{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/views/trainer/lesen.js","filenameRelative":"/client/views/trainer/lesen.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/views/trainer/lesen.js.map","sourceFileName":"/client/views/trainer/lesen.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"lesen"},"ignored":false,"code":"// Template.trainerLesen.onCreated(function() {\n// \tthis.autorun(() => {\n// \t\tthis.subscribe('vocabularyAll');\n// \t\tthis.subscribe('ownedFavourites');\n// \t});\n// });\n//\n// Template.trainerLesen.helpers({\n// \tentry() {\n// \t\tlet currentUserId = this.userId;\n// \t\tlet favIds = R.pluck('vocabularyId')(Favourites.find().fetch());\n// \t\tlet vocabulary = [];\n//\n// \t\tif (Session.get('randomFavourites')) {\n// \t\t\tvocabulary = Vocabulary.find({\n// \t\t\t\t_id: {\n// \t\t\t\t\t$in: favIds\n// \t\t\t\t}\n// \t\t\t}).fetch();\n// \t\t} else {\n// \t\t\tvocabulary = Vocabulary.find({\n// \t\t\t\t_id: {\n// \t\t\t\t\t$nin: favIds\n// \t\t\t\t}\n// \t\t\t}).fetch();\n// \t\t}\n// \t\treturn vocabulary[Session.get(COUNT_VIEWED)];\n// \t},\n// \tcountViewed() {\n// \t\treturn Session.get(COUNT_VIEWED);\n// \t},\n// \tlengthIsOne() {\n// \t\treturn (Session.get(LENGTH_FAV) === 1) && Session.get(RANDOM_FAV) ||\n// \t\t(Session.get(LENGTH_NOT_FAV) === 1) && Session.get(RANDOM_NOT_FAV);\n// \t}\n// });\n//\n// Template.trainerLesen.events({\n// \t'click .btn-backward' (event, template) {\n// \t\tlet val = 0;\n// \t\tif (Session.get(RANDOM_FAV)) {\n// \t\t\t// to avoid going into negative numbers\n// \t\t\tif (Session.get(COUNT_VIEWED) === 0) {\n// \t\t\t\tval = Session.get(LENGTH_FAV) - 1;\n// \t\t\t\tSession.set(COUNT_VIEWED, val);\n// \t\t\t} else {\n// \t\t\t\tval = (Session.get(COUNT_VIEWED) - 1) % Session.get(LENGTH_FAV);\n// \t\t\t\tSession.set(COUNT_VIEWED, val);\n// \t\t\t}\n//\n// \t\t} else {\n// \t\t\tif (Session.get(COUNT_VIEWED) === 0) {\n// \t\t\t\tval = Session.get(LENGTH_NOT_FAV) - 1;\n// \t\t\t\tSession.set(COUNT_VIEWED, val);\n// \t\t\t} else {\n// \t\t\t\tval = (Session.get(COUNT_VIEWED) - 1) % Session.get(LENGTH_NOT_FAV);\n// \t\t\t\tSession.set(COUNT_VIEWED, val);\n// \t\t\t}\n// \t\t}\n// \t},\n//\n// \t'click .btn-forward' (event, template) {\n// \t\tlet val = 0;\n// \t\tif (Session.get(RANDOM_FAV)) {\n// \t\t\tval = (Session.get(COUNT_VIEWED) + 1) % Session.get(LENGTH_FAV);\n// \t\t\tSession.set(COUNT_VIEWED, val);\n// \t\t} else {\n// \t\t\tval = (Session.get(COUNT_VIEWED) + 1) % Session.get(LENGTH_NOT_FAV);\n// \t\t\tSession.set(COUNT_VIEWED, val);\n// \t\t}\n// \t},\n//\n// \t'click .btn-fav' (event, template) {\n// \t\tMeteor.call('toggleFavourite', this._id);\n//\n// // reset the COUNT VIEW when a list entry has been removed\n// \t\tif (Session.get(RANDOM_NOT_FAV) && Session.get(COUNT_VIEWED) >= Session.get(LENGTH_NOT_FAV) - 1) {\n// \t\t\tlet val = (Session.get(COUNT_VIEWED) + 1) % Session.get(LENGTH_NOT_FAV);\n// \t\t\tSession.set(COUNT_VIEWED, val);\n// \t\t}\n//\n// \t\tif (Session.get(LENGTH_NOT_FAV) === 1) {\n// \t\t\tSession.set(RANDOM_NOT_FAV, !Session.get(RANDOM_NOT_FAV));\n// \t\t\tSession.set(RANDOM_FAV, !Session.get(RANDOM_FAV))\n// \t\t}\n// \t},\n//\n// \t'click .btn-delete' (event, template) {\n// \t\tMeteor.call('deleteFavourite', this._id);\n//\n// \t\tif (Session.get(RANDOM_FAV) && Session.get(COUNT_VIEWED) >= Session.get(LENGTH_FAV) - 1) {\n// \t\t\tlet val = (Session.get(COUNT_VIEWED) + 1) % Session.get(LENGTH_FAV);\n// \t\t\tSession.set(COUNT_VIEWED, val);\n// \t\t}\n// \t\tif (Session.get(LENGTH_FAV) === 1) {\n// \t\t\tSession.set(RANDOM_FAV, !Session.get(RANDOM_FAV));\n// \t\t\tSession.set(RANDOM_NOT_FAV, !Session.get(RANDOM_NOT_FAV))\n// \t\t}\n// \t}\n// });","ast":null,"map":{"version":3,"sources":[],"names":[],"mappings":"","file":"/client/views/trainer/lesen.js.map","sourcesContent":[]},"hash":"5d5f0c2dd231aebed98b5634625cd7f94c076c4d"}
