{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/views/trainer/lesen.js","filenameRelative":"/client/views/trainer/lesen.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/views/trainer/lesen.js.map","sourceFileName":"/client/views/trainer/lesen.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"lesen"},"ignored":false,"code":"// Template.trainerLesen.onCreated(function() {\n// \tthis.autorun(() => {\n// \t\tthis.subscribe('vocabularyAll');\n// \t\tthis.subscribe('ownedFavourites');\n// \t});\n// });\n\nTemplate.trainerLesen.helpers({\n\tentry: function () {\n\t\tfunction entry() {\n\t\t\tvar currentUserId = this.userId;\n\t\t\tvar favIds = R.pluck('vocabularyId')(Favourites.find().fetch());\n\t\t\tvar vocabulary = [];\n\n\t\t\tif (Session.get('randomFavourites')) {\n\t\t\t\tvocabulary = Vocabulary.find({\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$in: favIds\n\t\t\t\t\t}\n\t\t\t\t}).fetch();\n\t\t\t} else {\n\t\t\t\tvocabulary = Vocabulary.find({\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$nin: favIds\n\t\t\t\t\t}\n\t\t\t\t}).fetch();\n\t\t\t}\n\t\t\treturn vocabulary[Session.get(COUNT_VIEWED)];\n\t\t}\n\n\t\treturn entry;\n\t}(),\n\tcountViewed: function () {\n\t\tfunction countViewed() {\n\t\t\treturn Session.get(COUNT_VIEWED);\n\t\t}\n\n\t\treturn countViewed;\n\t}(),\n\tlengthIsOne: function () {\n\t\tfunction lengthIsOne() {\n\t\t\treturn Session.get(LENGTH_FAV) === 1 && Session.get(RANDOM_FAV) || Session.get(LENGTH_NOT_FAV) === 1 && Session.get(RANDOM_NOT_FAV);\n\t\t}\n\n\t\treturn lengthIsOne;\n\t}()\n});\n\n// Template.trainerLesen.events({\n// \t'click .btn-backward' (event, template) {\n// \t\tlet val = 0;\n// \t\tif (Session.get(RANDOM_FAV)) {\n// \t\t\t// to avoid going into negative numbers\n// \t\t\tif (Session.get(COUNT_VIEWED) === 0) {\n// \t\t\t\tval = Session.get(LENGTH_FAV) - 1;\n// \t\t\t\tSession.set(COUNT_VIEWED, val);\n// \t\t\t} else {\n// \t\t\t\tval = (Session.get(COUNT_VIEWED) - 1) % Session.get(LENGTH_FAV);\n// \t\t\t\tSession.set(COUNT_VIEWED, val);\n// \t\t\t}\n//\n// \t\t} else {\n// \t\t\tif (Session.get(COUNT_VIEWED) === 0) {\n// \t\t\t\tval = Session.get(LENGTH_NOT_FAV) - 1;\n// \t\t\t\tSession.set(COUNT_VIEWED, val);\n// \t\t\t} else {\n// \t\t\t\tval = (Session.get(COUNT_VIEWED) - 1) % Session.get(LENGTH_NOT_FAV);\n// \t\t\t\tSession.set(COUNT_VIEWED, val);\n// \t\t\t}\n// \t\t}\n// \t},\n//\n// \t'click .btn-forward' (event, template) {\n// \t\tlet val = 0;\n// \t\tif (Session.get(RANDOM_FAV)) {\n// \t\t\tval = (Session.get(COUNT_VIEWED) + 1) % Session.get(LENGTH_FAV);\n// \t\t\tSession.set(COUNT_VIEWED, val);\n// \t\t} else {\n// \t\t\tval = (Session.get(COUNT_VIEWED) + 1) % Session.get(LENGTH_NOT_FAV);\n// \t\t\tSession.set(COUNT_VIEWED, val);\n// \t\t}\n// \t},\n//\n// \t'click .btn-fav' (event, template) {\n// \t\tMeteor.call('toggleFavourite', this._id);\n//\n// \t\t// reset the COUNT VIEW when a list entry has been removed\n// \t\tif (Session.get(RANDOM_NOT_FAV) && Session.get(COUNT_VIEWED) >= Session.get(LENGTH_NOT_FAV) - 1) {\n// \t\t\tlet val = (Session.get(COUNT_VIEWED) + 1) % Session.get(LENGTH_NOT_FAV);\n// \t\t\tSession.set(COUNT_VIEWED, val);\n// \t\t}\n//\n// \t\tif (Session.get(LENGTH_NOT_FAV) === 1) {\n// \t\t\tSession.set(RANDOM_NOT_FAV, !Session.get(RANDOM_NOT_FAV));\n// \t\t\tSession.set(RANDOM_FAV, !Session.get(RANDOM_FAV))\n// \t\t}\n// \t},\n//\n// \t'click .btn-delete' (event, template) {\n// \t\tMeteor.call('deleteFavourite', this._id);\n//\n// \t\tif (Session.get(RANDOM_FAV) && Session.get(COUNT_VIEWED) >= Session.get(LENGTH_FAV) - 1) {\n// \t\t\tlet val = (Session.get(COUNT_VIEWED) + 1) % Session.get(LENGTH_FAV);\n// \t\t\tSession.set(COUNT_VIEWED, val);\n// \t\t}\n// \t\tif (Session.get(LENGTH_FAV) === 1) {\n// \t\t\tSession.set(RANDOM_FAV, !Session.get(RANDOM_FAV));\n// \t\t\tSession.set(RANDOM_NOT_FAV, !Session.get(RANDOM_NOT_FAV))\n// \t\t}\n// \t}\n// });","ast":null,"map":{"version":3,"sources":["/client/views/trainer/lesen.js"],"names":[],"mappings":";;;;;;;AAOA,SAAS,YAAT,CAAsB,OAAtB,CAA8B;AAC7B;mBAAQ;AACP,OAAI,gBAAgB,KAAK,MAAL,CADb;AAEP,OAAI,SAAS,EAAE,KAAF,CAAQ,cAAR,EAAwB,WAAW,IAAX,GAAkB,KAAlB,EAAxB,CAAT,CAFG;AAGP,OAAI,aAAa,EAAb,CAHG;;AAKP,OAAI,QAAQ,GAAR,CAAY,kBAAZ,CAAJ,EAAqC;AACpC,iBAAa,WAAW,IAAX,CAAgB;AAC5B,UAAK;AACJ,WAAK,MAAL;MADD;KADY,EAIV,KAJU,EAAb,CADoC;IAArC,MAMO;AACN,iBAAa,WAAW,IAAX,CAAgB;AAC5B,UAAK;AACJ,YAAM,MAAN;MADD;KADY,EAIV,KAJU,EAAb,CADM;IANP;AAaA,UAAO,WAAW,QAAQ,GAAR,CAAY,YAAZ,CAAX,CAAP,CAlBO;;;;IADqB;AAqB7B;yBAAc;AACb,UAAO,QAAQ,GAAR,CAAY,YAAZ,CAAP,CADa;;;;IArBe;AAwB7B;yBAAc;AACb,UAAO,OAAC,CAAQ,GAAR,CAAY,UAAZ,MAA4B,CAA5B,IAAkC,QAAQ,GAAR,CAAY,UAAZ,CAAnC,IACN,OAAC,CAAQ,GAAR,CAAY,cAAZ,MAAgC,CAAhC,IAAsC,QAAQ,GAAR,CAAY,cAAZ,CAAvC,CAFY;;;;IAxBe;CAA9B","file":"/client/views/trainer/lesen.js.map","sourcesContent":["// Template.trainerLesen.onCreated(function() {\n// \tthis.autorun(() => {\n// \t\tthis.subscribe('vocabularyAll');\n// \t\tthis.subscribe('ownedFavourites');\n// \t});\n// });\n\nTemplate.trainerLesen.helpers({\n\tentry() {\n\t\tlet currentUserId = this.userId;\n\t\tlet favIds = R.pluck('vocabularyId')(Favourites.find().fetch());\n\t\tlet vocabulary = [];\n\n\t\tif (Session.get('randomFavourites')) {\n\t\t\tvocabulary = Vocabulary.find({\n\t\t\t\t_id: {\n\t\t\t\t\t$in: favIds\n\t\t\t\t}\n\t\t\t}).fetch();\n\t\t} else {\n\t\t\tvocabulary = Vocabulary.find({\n\t\t\t\t_id: {\n\t\t\t\t\t$nin: favIds\n\t\t\t\t}\n\t\t\t}).fetch();\n\t\t}\n\t\treturn vocabulary[Session.get(COUNT_VIEWED)];\n\t},\n\tcountViewed() {\n\t\treturn Session.get(COUNT_VIEWED);\n\t},\n\tlengthIsOne() {\n\t\treturn (Session.get(LENGTH_FAV) === 1) && Session.get(RANDOM_FAV) ||\n\t\t\t(Session.get(LENGTH_NOT_FAV) === 1) && Session.get(RANDOM_NOT_FAV);\n\t}\n});\n\n// Template.trainerLesen.events({\n// \t'click .btn-backward' (event, template) {\n// \t\tlet val = 0;\n// \t\tif (Session.get(RANDOM_FAV)) {\n// \t\t\t// to avoid going into negative numbers\n// \t\t\tif (Session.get(COUNT_VIEWED) === 0) {\n// \t\t\t\tval = Session.get(LENGTH_FAV) - 1;\n// \t\t\t\tSession.set(COUNT_VIEWED, val);\n// \t\t\t} else {\n// \t\t\t\tval = (Session.get(COUNT_VIEWED) - 1) % Session.get(LENGTH_FAV);\n// \t\t\t\tSession.set(COUNT_VIEWED, val);\n// \t\t\t}\n//\n// \t\t} else {\n// \t\t\tif (Session.get(COUNT_VIEWED) === 0) {\n// \t\t\t\tval = Session.get(LENGTH_NOT_FAV) - 1;\n// \t\t\t\tSession.set(COUNT_VIEWED, val);\n// \t\t\t} else {\n// \t\t\t\tval = (Session.get(COUNT_VIEWED) - 1) % Session.get(LENGTH_NOT_FAV);\n// \t\t\t\tSession.set(COUNT_VIEWED, val);\n// \t\t\t}\n// \t\t}\n// \t},\n//\n// \t'click .btn-forward' (event, template) {\n// \t\tlet val = 0;\n// \t\tif (Session.get(RANDOM_FAV)) {\n// \t\t\tval = (Session.get(COUNT_VIEWED) + 1) % Session.get(LENGTH_FAV);\n// \t\t\tSession.set(COUNT_VIEWED, val);\n// \t\t} else {\n// \t\t\tval = (Session.get(COUNT_VIEWED) + 1) % Session.get(LENGTH_NOT_FAV);\n// \t\t\tSession.set(COUNT_VIEWED, val);\n// \t\t}\n// \t},\n//\n// \t'click .btn-fav' (event, template) {\n// \t\tMeteor.call('toggleFavourite', this._id);\n//\n// \t\t// reset the COUNT VIEW when a list entry has been removed\n// \t\tif (Session.get(RANDOM_NOT_FAV) && Session.get(COUNT_VIEWED) >= Session.get(LENGTH_NOT_FAV) - 1) {\n// \t\t\tlet val = (Session.get(COUNT_VIEWED) + 1) % Session.get(LENGTH_NOT_FAV);\n// \t\t\tSession.set(COUNT_VIEWED, val);\n// \t\t}\n//\n// \t\tif (Session.get(LENGTH_NOT_FAV) === 1) {\n// \t\t\tSession.set(RANDOM_NOT_FAV, !Session.get(RANDOM_NOT_FAV));\n// \t\t\tSession.set(RANDOM_FAV, !Session.get(RANDOM_FAV))\n// \t\t}\n// \t},\n//\n// \t'click .btn-delete' (event, template) {\n// \t\tMeteor.call('deleteFavourite', this._id);\n//\n// \t\tif (Session.get(RANDOM_FAV) && Session.get(COUNT_VIEWED) >= Session.get(LENGTH_FAV) - 1) {\n// \t\t\tlet val = (Session.get(COUNT_VIEWED) + 1) % Session.get(LENGTH_FAV);\n// \t\t\tSession.set(COUNT_VIEWED, val);\n// \t\t}\n// \t\tif (Session.get(LENGTH_FAV) === 1) {\n// \t\t\tSession.set(RANDOM_FAV, !Session.get(RANDOM_FAV));\n// \t\t\tSession.set(RANDOM_NOT_FAV, !Session.get(RANDOM_NOT_FAV))\n// \t\t}\n// \t}\n// });\n"]},"hash":"b2733f881ce3bd1cee1ec151669757f033d7c634"}
