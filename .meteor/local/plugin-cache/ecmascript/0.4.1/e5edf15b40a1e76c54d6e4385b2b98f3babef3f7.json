{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/views/vokabelregister/search.js","filenameRelative":"/client/views/vokabelregister/search.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/views/vokabelregister/search.js.map","sourceFileName":"/client/views/vokabelregister/search.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"search"},"ignored":false,"code":"Template.search.onCreated(function () {\n\tvar template = Template.instance();\n\n\ttemplate.searchQuery = new ReactiveVar();\n\ttemplate.searching = new ReactiveVar(false);\n\ttemplate.isAlphabetic = new ReactiveVar(true);\n\ttemplate.isLength64 = new ReactiveVar(true);\n\n\tTracker.autorun(function () {\n\t\ttemplate.subscribe('vocabularyRegister', template.searchQuery.get(), function () {\n\t\t\tsetTimeout(function () {\n\t\t\t\ttemplate.searching.set(false);\n\t\t\t}, 300);\n\t\t});\n\t\ttemplate.subscribe('ownedFavourites');\n\t});\n});\n\nTemplate.registerHelper(\"isFavourite\", function (vocabularyId) {\n\t// console.log(vocabularyId);\n\tvar favEntry = Favourites.findOne({\n\t\tvocabularyId: vocabularyId\n\t});\n\tif (favEntry) {\n\t\treturn true;\n\t}\n});\n\nTemplate.search.helpers({\n\tsearching: function () {\n\t\tfunction searching() {\n\t\t\treturn Template.instance().searching.get();\n\t\t}\n\n\t\treturn searching;\n\t}(),\n\tquery: function () {\n\t\tfunction query() {\n\t\t\treturn Template.instance().searchQuery.get();\n\t\t}\n\n\t\treturn query;\n\t}(),\n\tisAlphabetic: function () {\n\t\tfunction isAlphabetic() {\n\t\t\treturn Template.instance().isAlphabetic.get();\n\t\t}\n\n\t\treturn isAlphabetic;\n\t}(),\n\tisLength64: function () {\n\t\tfunction isLength64() {\n\t\t\treturn Template.instance().isLength64.get();\n\t\t}\n\n\t\treturn isLength64;\n\t}(),\n\tvocabulary: function () {\n\t\tfunction vocabulary() {\n\t\t\t// Sort and group entries by letter and create a new array of iterable objects for cascaded template iteration\n\t\t\tvar vocabularyIndexed = [];\n\t\t\tvar alphabet = R.split('', 'abcdefghijklmnopqrstuvwxyz'.toUpperCase());\n\t\t\tvar regex = function () {\n\t\t\t\tfunction regex(letter) {\n\t\t\t\t\treturn new RegExp(\"^\" + letter, \"i\");\n\t\t\t\t}\n\n\t\t\t\treturn regex;\n\t\t\t}();\n\n\t\t\talphabet.forEach(function (entry) {\n\t\t\t\tvar array = Vocabulary.find({\n\t\t\t\t\tterm: {\n\t\t\t\t\t\t$in: [regex(entry)]\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tsort: {\n\t\t\t\t\t\tterm: 1\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (array.count() !== 0) {\n\t\t\t\t\tvocabularyIndexed.push({\n\t\t\t\t\t\t'letter': entry,\n\t\t\t\t\t\t'entries': array\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (vocabularyIndexed) {\n\t\t\t\treturn vocabularyIndexed;\n\t\t\t}\n\t\t}\n\n\t\treturn vocabulary;\n\t}()\n});\n\nTemplate.search.events({\n\t'keyup [name=\"search\"]': function () {\n\t\tfunction keyupNameSearch(event, template) {\n\t\t\tvar value = event.target.value.trim();\n\n\t\t\tif (value !== '') {\n\t\t\t\t// check if string is valid\n\t\t\t\tif (isAlphabetic(value)) {\n\t\t\t\t\ttemplate.isAlphabetic.set(true);\n\t\t\t\t} else {\n\t\t\t\t\ttemplate.isAlphabetic.set(false);\n\t\t\t\t}\n\t\t\t\tif (isLength64(value)) {\n\t\t\t\t\ttemplate.isLength64.set(true);\n\t\t\t\t} else {\n\t\t\t\t\ttemplate.isLength64.set(false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (value !== '' && event.keyCode === 13) {\n\t\t\t\tif (template.isAlphabetic.get() && template.isLength64.get()) {\n\t\t\t\t\ttemplate.searchQuery.set(value);\n\t\t\t\t\ttemplate.searching.set(true);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (value === '') {\n\t\t\t\ttemplate.searchQuery.set(value);\n\t\t\t\ttemplate.isAlphabetic.set(true);\n\t\t\t\ttemplate.isLength64.set(true);\n\t\t\t}\n\t\t}\n\n\t\treturn keyupNameSearch;\n\t}(),\n\t'click .btn-fav': function () {\n\t\tfunction clickBtnFav(event, template) {\n\t\t\tMeteor.call('toggleFavourite', this._id);\n\t\t}\n\n\t\treturn clickBtnFav;\n\t}()\n});","ast":null,"map":{"version":3,"sources":["/client/views/vokabelregister/search.js"],"names":[],"mappings":"AAAA,SAAS,MAAT,CAAgB,SAAhB,CAA0B,YAAM;AAC/B,KAAI,WAAW,SAAS,QAAT,EAAX,CAD2B;;AAG/B,UAAS,WAAT,GAAuB,IAAI,WAAJ,EAAvB,CAH+B;AAI/B,UAAS,SAAT,GAAqB,IAAI,WAAJ,CAAgB,KAAhB,CAArB,CAJ+B;AAK/B,UAAS,YAAT,GAAwB,IAAI,WAAJ,CAAgB,IAAhB,CAAxB,CAL+B;AAM/B,UAAS,UAAT,GAAsB,IAAI,WAAJ,CAAgB,IAAhB,CAAtB,CAN+B;;AAQ/B,SAAQ,OAAR,CAAgB,YAAM;AACrB,WAAS,SAAT,CAAmB,oBAAnB,EAAyC,SAAS,WAAT,CAAqB,GAArB,EAAzC,EAAqE,YAAM;AAC1E,cAAW,YAAM;AAChB,aAAS,SAAT,CAAmB,GAAnB,CAAuB,KAAvB,EADgB;IAAN,EAER,GAFH,EAD0E;GAAN,CAArE,CADqB;AAMrB,WAAS,SAAT,CAAmB,iBAAnB,EANqB;EAAN,CAAhB,CAR+B;CAAN,CAA1B;;AAkBA,SAAS,cAAT,CAAwB,aAAxB,EAAuC,UAAS,YAAT,EAAuB;;AAE7D,KAAI,WAAW,WAAW,OAAX,CAAmB;AACjC,gBAAc,YAAd;EADc,CAAX,CAFyD;AAK7D,KAAI,QAAJ,EAAc;AACb,SAAO,IAAP,CADa;EAAd;CALsC,CAAvC;;AAUA,SAAS,MAAT,CAAgB,OAAhB,CAAwB;AACvB;uBAAY;AACX,UAAO,SAAS,QAAT,GAAoB,SAApB,CAA8B,GAA9B,EAAP,CADW;;;;IADW;AAIvB;mBAAQ;AACP,UAAO,SAAS,QAAT,GAAoB,WAApB,CAAgC,GAAhC,EAAP,CADO;;;;IAJe;AAOvB;0BAAe;AACd,UAAO,SAAS,QAAT,GAAoB,YAApB,CAAiC,GAAjC,EAAP,CADc;;;;IAPQ;AAUvB;wBAAa;AACZ,UAAO,SAAS,QAAT,GAAoB,UAApB,CAA+B,GAA/B,EAAP,CADY;;;;IAVU;AAavB;wBAAa;;AAEZ,OAAI,oBAAoB,EAApB,CAFQ;AAGZ,OAAI,WAAW,EAAE,KAAF,CAAQ,EAAR,EAAY,6BAA6B,WAA7B,EAAZ,CAAX,CAHQ;AAIZ,OAAI;AAAQ,aAAR,KAAQ;YAAU,IAAI,MAAJ,CAAW,MAAM,MAAN,EAAc,GAAzB;KAAV;;WAAR;MAAJ,CAJY;;AAMZ,YAAS,OAAT,CAAiB,iBAAS;AACzB,QAAI,QAAQ,WAAW,IAAX,CAAgB;AAC3B,WAAM;AACL,WAAK,CAAC,MAAM,KAAN,CAAD,CAAL;MADD;KADW,EAIT;AACF,WAAM;AACL,YAAM,CAAN;MADD;KALW,CAAR,CADqB;AAUzB,QAAI,MAAM,KAAN,OAAkB,CAAlB,EAAqB;AACxB,uBAAkB,IAAlB,CAAuB;AACtB,gBAAU,KAAV;AACA,iBAAW,KAAX;MAFD,EADwB;KAAzB;IAVgB,CAAjB,CANY;;AAwBZ,OAAI,iBAAJ,EAAuB;AACtB,WAAO,iBAAP,CADsB;IAAvB;;;;IArCsB;CAAxB;;AA2CA,SAAS,MAAT,CAAgB,MAAhB,CAAuB;AACtB;2BAAyB,OAAO,UAAU;AACzC,OAAI,QAAQ,MAAM,MAAN,CAAa,KAAb,CAAmB,IAAnB,EAAR,CADqC;;AAGzC,OAAI,UAAU,EAAV,EAAc;;AAEjB,QAAI,aAAa,KAAb,CAAJ,EAAyB;AACxB,cAAS,YAAT,CAAsB,GAAtB,CAA0B,IAA1B,EADwB;KAAzB,MAEO;AACN,cAAS,YAAT,CAAsB,GAAtB,CAA0B,KAA1B,EADM;KAFP;AAKA,QAAI,WAAW,KAAX,CAAJ,EAAuB;AACtB,cAAS,UAAT,CAAoB,GAApB,CAAwB,IAAxB,EADsB;KAAvB,MAEO;AACN,cAAS,UAAT,CAAoB,GAApB,CAAwB,KAAxB,EADM;KAFP;IAPD;;AAcA,OAAI,UAAU,EAAV,IAAgB,MAAM,OAAN,KAAkB,EAAlB,EAAsB;AACzC,QAAI,SAAS,YAAT,CAAsB,GAAtB,MAA+B,SAAS,UAAT,CAAoB,GAApB,EAA/B,EAA0D;AAC7D,cAAS,WAAT,CAAqB,GAArB,CAAyB,KAAzB,EAD6D;AAE7D,cAAS,SAAT,CAAmB,GAAnB,CAAuB,IAAvB,EAF6D;KAA9D;IADD;;AAOA,OAAI,UAAU,EAAV,EAAc;AACjB,aAAS,WAAT,CAAqB,GAArB,CAAyB,KAAzB,EADiB;AAEjB,aAAS,YAAT,CAAsB,GAAtB,CAA0B,IAA1B,EAFiB;AAGjB,aAAS,UAAT,CAAoB,GAApB,CAAwB,IAAxB,EAHiB;IAAlB;;;;IAzBqB;AAgCtB;uBAAkB,OAAO,UAAU;AAClC,UAAO,IAAP,CAAY,iBAAZ,EAA+B,KAAK,GAAL,CAA/B,CADkC;;;;IAhCb;CAAvB","file":"/client/views/vokabelregister/search.js.map","sourcesContent":["Template.search.onCreated(() => {\n\tlet template = Template.instance();\n\n\ttemplate.searchQuery = new ReactiveVar();\n\ttemplate.searching = new ReactiveVar(false);\n\ttemplate.isAlphabetic = new ReactiveVar(true);\n\ttemplate.isLength64 = new ReactiveVar(true);\n\n\tTracker.autorun(() => {\n\t\ttemplate.subscribe('vocabularyRegister', template.searchQuery.get(), () => {\n\t\t\tsetTimeout(() => {\n\t\t\t\ttemplate.searching.set(false);\n\t\t\t}, 300);\n\t\t});\n\t\ttemplate.subscribe('ownedFavourites');\n\t});\n});\n\nTemplate.registerHelper(\"isFavourite\", function(vocabularyId) {\n\t// console.log(vocabularyId);\n\tlet favEntry = Favourites.findOne({\n\t\tvocabularyId: vocabularyId\n\t});\n\tif (favEntry) {\n\t\treturn true;\n\t}\n});\n\nTemplate.search.helpers({\n\tsearching() {\n\t\treturn Template.instance().searching.get();\n\t},\n\tquery() {\n\t\treturn Template.instance().searchQuery.get();\n\t},\n\tisAlphabetic() {\n\t\treturn Template.instance().isAlphabetic.get();\n\t},\n\tisLength64() {\n\t\treturn Template.instance().isLength64.get();\n\t},\n\tvocabulary() {\n\t\t// Sort and group entries by letter and create a new array of iterable objects for cascaded template iteration\n\t\tlet vocabularyIndexed = [];\n\t\tlet alphabet = R.split('', 'abcdefghijklmnopqrstuvwxyz'.toUpperCase());\n\t\tlet regex = letter => new RegExp(\"^\" + letter, \"i\");\n\n\t\talphabet.forEach(entry => {\n\t\t\tlet array = Vocabulary.find({\n\t\t\t\tterm: {\n\t\t\t\t\t$in: [regex(entry)]\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tsort: {\n\t\t\t\t\tterm: 1\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (array.count() !== 0) {\n\t\t\t\tvocabularyIndexed.push({\n\t\t\t\t\t'letter': entry,\n\t\t\t\t\t'entries': array\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tif (vocabularyIndexed) {\n\t\t\treturn vocabularyIndexed;\n\t\t}\n\t}\n});\n\nTemplate.search.events({\n\t'keyup [name=\"search\"]' (event, template) {\n\t\tlet value = event.target.value.trim();\n\n\t\tif (value !== '') {\n\t\t\t// check if string is valid\n\t\t\tif (isAlphabetic(value)) {\n\t\t\t\ttemplate.isAlphabetic.set(true);\n\t\t\t} else {\n\t\t\t\ttemplate.isAlphabetic.set(false);\n\t\t\t}\n\t\t\tif (isLength64(value)) {\n\t\t\t\ttemplate.isLength64.set(true);\n\t\t\t} else {\n\t\t\t\ttemplate.isLength64.set(false);\n\t\t\t}\n\t\t}\n\n\t\tif (value !== '' && event.keyCode === 13) {\n\t\t\tif (template.isAlphabetic.get() && template.isLength64.get()) {\n\t\t\t\ttemplate.searchQuery.set(value);\n\t\t\t\ttemplate.searching.set(true);\n\t\t\t}\n\t\t}\n\n\t\tif (value === '') {\n\t\t\ttemplate.searchQuery.set(value);\n\t\t\ttemplate.isAlphabetic.set(true);\n\t\t\ttemplate.isLength64.set(true);\n\t\t}\n\t},\n\n\t'click .btn-fav' (event, template) {\n\t\tMeteor.call('toggleFavourite', this._id);\n\t}\n});\n"]},"hash":"e5edf15b40a1e76c54d6e4385b2b98f3babef3f7"}
