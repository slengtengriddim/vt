{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/views/high/stats/charts/chart_bar_modes.js","filenameRelative":"/client/views/high/stats/charts/chart_bar_modes.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/views/high/stats/charts/chart_bar_modes.js.map","sourceFileName":"/client/views/high/stats/charts/chart_bar_modes.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"chart_bar_modes"},"ignored":false,"code":"// \tlet data = () => {\n// \t\tlet countLesen = Data.Detail.find({mode: 'lesen'}).count();\n// \t\tlet countWort = Data.Detail.find({mode: 'wort'}).count();\n// \t\tlet countDefinition = Data.Detail.find({mode: 'definition'}).count();\n// \t\tlet countEingabe = Data.Detail.find({mode: 'eingabe'}).count();\n//\n// \t\treturn [{\n// \t\t\tmode: 'lesen',\n// \t\t\tcount: countLesen\n// \t\t},{\n// \t\t\tmode: 'wort',\n// \t\t\tcount: countWort\n// \t\t},{\n// \t\t\tmode: 'definition',\n// \t\t\tcount: countDefinition\n// \t\t},{\n// \t\t\tmode: 'eingabe',\n// \t\t\tcount: countEingabe\n// \t\t}];\n// \t};\n// \tlet barChart = () => {\n// \t\treturn [{\n// \t\t\tkey: \"Browse Modi\",\n// \t\t\tvalues: data()\n// \t\t}]\n// \t};\n\nTemplate.chartBarModes.rendered = function () {\n\tvar barChart = function barChart() {\n\t\tvar data = Data.Viewed.User.find({}, {\n\t\t\tsort: {\n\t\t\t\ttimesViewed: -1\n\t\t\t}\n\t\t}).fetch();\n\t\tvar barChart = [{\n\t\t\tkey: \"Top 5 beliebte Woerter (allgemein)\",\n\t\t\tvalues: data\n\t\t}];\n\t\treturn barChart;\n\t};\n\n\t// chart object\n\tvar chart = nv.models.discreteBarChart().x(function (d) {\n\t\treturn d.vocabularyName;\n\t}).y(function (d) {\n\t\treturn d.timesViewed;\n\t}).staggerLabels(true)\n\t//.staggerLabels(historicalBarChart[0].values.length > 8)\n\t.showValues(true).duration(250);\n\n\t// chart details\n\tnv.addGraph(function () {\n\t\td3.select('#chartBarModes svg').datum(barChart()).call(chart);\n\t\tnv.utils.windowResize(chart.update);\n\t\treturn chart;\n\t});\n\n\t// update chart when data changes\n\tthis.autorun(function () {\n\t\td3.select('#chartBarModes svg').datum(barChart()).call(chart);\n\t\tchart.update();\n\t});\n};","ast":null,"map":{"version":3,"sources":["/client/views/high/stats/charts/chart_bar_modes.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SAAS,aAAT,CAAuB,QAAvB,GAAkC,YAAW;AAC5C,KAAI,WAAW,oBAAM;AACpB,MAAI,OAAO,KAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB,CAAsB,EAAtB,EAA0B;AACpC,SAAM;AACL,iBAAa,CAAC,CAAD;IADd;GADU,EAIR,KAJQ,EAAP,CADgB;AAMpB,MAAI,WAAW,CAAC;AACf,QAAK,oCAAL;AACA,WAAQ,IAAR;GAFc,CAAX,CANgB;AAUpB,SAAO,QAAP,CAVoB;EAAN;;;AAD6B,KAexC,QAAQ,GAAG,MAAH,CAAU,gBAAV,GACV,CADU,CACR,UAAS,CAAT,EAAY;AACd,SAAO,EAAE,cAAF,CADO;EAAZ,CADQ,CAIV,CAJU,CAIR,UAAS,CAAT,EAAY;AACd,SAAO,EAAE,WAAF,CADO;EAAZ,CAJQ,CAOV,aAPU,CAOI,IAPJ;;EASV,UATU,CASC,IATD,EAUV,QAVU,CAUD,GAVC,CAAR;;;AAfwC,GA4B5C,CAAG,QAAH,CAAY,YAAW;AACtB,KAAG,MAAH,CAAU,oBAAV,EACE,KADF,CACQ,UADR,EAEE,IAFF,CAEO,KAFP,EADsB;AAItB,KAAG,KAAH,CAAS,YAAT,CAAsB,MAAM,MAAN,CAAtB,CAJsB;AAKtB,SAAO,KAAP,CALsB;EAAX,CAAZ;;;AA5B4C,KAqC5C,CAAK,OAAL,CAAa,YAAW;AACvB,KAAG,MAAH,CAAU,oBAAV,EACE,KADF,CACQ,UADR,EAEE,IAFF,CAEO,KAFP,EADuB;AAIvB,QAAM,MAAN,GAJuB;EAAX,CAAb,CArC4C;CAAX","file":"/client/views/high/stats/charts/chart_bar_modes.js.map","sourcesContent":["// \tlet data = () => {\n// \t\tlet countLesen = Data.Detail.find({mode: 'lesen'}).count();\n// \t\tlet countWort = Data.Detail.find({mode: 'wort'}).count();\n// \t\tlet countDefinition = Data.Detail.find({mode: 'definition'}).count();\n// \t\tlet countEingabe = Data.Detail.find({mode: 'eingabe'}).count();\n//\n// \t\treturn [{\n// \t\t\tmode: 'lesen',\n// \t\t\tcount: countLesen\n// \t\t},{\n// \t\t\tmode: 'wort',\n// \t\t\tcount: countWort\n// \t\t},{\n// \t\t\tmode: 'definition',\n// \t\t\tcount: countDefinition\n// \t\t},{\n// \t\t\tmode: 'eingabe',\n// \t\t\tcount: countEingabe\n// \t\t}];\n// \t};\n// \tlet barChart = () => {\n// \t\treturn [{\n// \t\t\tkey: \"Browse Modi\",\n// \t\t\tvalues: data()\n// \t\t}]\n// \t};\n\nTemplate.chartBarModes.rendered = function() {\n\tlet barChart = () => {\n\t\tlet data = Data.Viewed.User.find({}, {\n\t\t\tsort: {\n\t\t\t\ttimesViewed: -1\n\t\t\t}\n\t\t}).fetch();\n\t\tlet barChart = [{\n\t\t\tkey: \"Top 5 beliebte Woerter (allgemein)\",\n\t\t\tvalues: data\n\t\t}];\n\t\treturn barChart;\n\t};\n\n\t// chart object\n\tlet chart = nv.models.discreteBarChart()\n\t\t.x(function(d) {\n\t\t\treturn d.vocabularyName\n\t\t})\n\t\t.y(function(d) {\n\t\t\treturn d.timesViewed\n\t\t})\n\t\t.staggerLabels(true)\n\t\t//.staggerLabels(historicalBarChart[0].values.length > 8)\n\t\t.showValues(true)\n\t\t.duration(250);\n\n\t// chart details\n\tnv.addGraph(function() {\n\t\td3.select('#chartBarModes svg')\n\t\t\t.datum(barChart())\n\t\t\t.call(chart);\n\t\tnv.utils.windowResize(chart.update);\n\t\treturn chart;\n\t});\n\n\t// update chart when data changes\n\tthis.autorun(function() {\n\t\td3.select('#chartBarModes svg')\n\t\t\t.datum(barChart())\n\t\t\t.call(chart);\n\t\tchart.update();\n\t});\n};\n"]},"hash":"e46e00ec758c3c8049b3c5ff5db77b1c95ccd259"}
