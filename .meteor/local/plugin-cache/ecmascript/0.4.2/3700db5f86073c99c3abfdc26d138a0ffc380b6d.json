{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/common/aux/nvd3_extra.js","filenameRelative":"/common/aux/nvd3_extra.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/common/aux/nvd3_extra.js.map","sourceFileName":"/common/aux/nvd3_extra.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"nvd3_extra"},"ignored":false,"code":"/* Inspired by Lee Byron's test data generator. */\nfunction stream_layers(n, m, o) {\n  if (arguments.length < 3) o = 0;\n  function bump(a) {\n    var x = 1 / (.1 + Math.random()),\n        y = 2 * Math.random() - .5,\n        z = 10 / (.1 + Math.random());\n    for (var i = 0; i < m; i++) {\n      var w = (i / m - y) * z;\n      a[i] += x * Math.exp(-w * w);\n    }\n  }\n  return d3.range(n).map(function () {\n    var a = [],\n        i;\n    for (i = 0; i < m; i++) {\n      a[i] = o + o * Math.random();\n    }for (i = 0; i < 5; i++) {\n      bump(a);\n    }return a.map(stream_index);\n  });\n}\n\n/* Another layer generator using gamma distributions. */\nfunction stream_waves(n, m) {\n  return d3.range(n).map(function (i) {\n    return d3.range(m).map(function (j) {\n      var x = 20 * j / m - i / 3;\n      return 2 * x * Math.exp(-.5 * x);\n    }).map(stream_index);\n  });\n}\n\nfunction stream_index(d, i) {\n  return { x: i, y: Math.max(0, d) };\n}","ast":null,"map":{"version":3,"sources":["/common/aux/nvd3_extra.js"],"names":[],"mappings":";AACA,SAAS,aAAT,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC;AAC9B,MAAI,UAAU,MAAV,GAAmB,CAAnB,EAAsB,IAAI,CAAJ,CAA1B;AACA,WAAS,IAAT,CAAc,CAAd,EAAiB;AACf,QAAI,IAAI,KAAK,KAAK,KAAK,MAAL,EAAL,CAAL;QACJ,IAAI,IAAI,KAAK,MAAL,EAAJ,GAAoB,EAApB;QACJ,IAAI,MAAM,KAAK,KAAK,MAAL,EAAL,CAAN,CAHO;AAIf,SAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,CAAJ,EAAO,GAAvB,EAA4B;AAC1B,UAAI,IAAI,CAAC,IAAI,CAAJ,GAAQ,CAAR,CAAD,GAAc,CAAd,CADkB;AAE1B,QAAE,CAAF,KAAQ,IAAI,KAAK,GAAL,CAAS,CAAC,CAAD,GAAK,CAAL,CAAb,CAFkB;KAA5B;GAJF;AASA,SAAO,GAAG,KAAH,CAAS,CAAT,EAAY,GAAZ,CAAgB,YAAW;AAC9B,QAAI,IAAI,EAAJ;QAAQ,CAAZ,CAD8B;AAE9B,SAAK,IAAI,CAAJ,EAAO,IAAI,CAAJ,EAAO,GAAnB;AAAwB,QAAE,CAAF,IAAO,IAAI,IAAI,KAAK,MAAL,EAAJ;KAAnC,KACK,IAAI,CAAJ,EAAO,IAAI,CAAJ,EAAO,GAAnB;AAAwB,WAAK,CAAL;KAAxB,OACO,EAAE,GAAF,CAAM,YAAN,CAAP,CAJ8B;GAAX,CAAvB,CAX8B;CAAhC;;;AAoBA,SAAS,YAAT,CAAsB,CAAtB,EAAyB,CAAzB,EAA4B;AAC1B,SAAO,GAAG,KAAH,CAAS,CAAT,EAAY,GAAZ,CAAgB,UAAS,CAAT,EAAY;AACjC,WAAO,GAAG,KAAH,CAAS,CAAT,EAAY,GAAZ,CAAgB,UAAS,CAAT,EAAY;AAC/B,UAAI,IAAI,KAAK,CAAL,GAAS,CAAT,GAAa,IAAI,CAAJ,CADU;AAE/B,aAAO,IAAI,CAAJ,GAAQ,KAAK,GAAL,CAAS,CAAC,EAAD,GAAM,CAAN,CAAjB,CAFwB;KAAZ,CAAhB,CAGF,GAHE,CAGE,YAHF,CAAP,CADiC;GAAZ,CAAvB,CAD0B;CAA5B;;AASA,SAAS,YAAT,CAAsB,CAAtB,EAAyB,CAAzB,EAA4B;AAC1B,SAAO,EAAC,GAAG,CAAH,EAAM,GAAG,KAAK,GAAL,CAAS,CAAT,EAAY,CAAZ,CAAH,EAAd,CAD0B;CAA5B","file":"/common/aux/nvd3_extra.js.map","sourcesContent":["/* Inspired by Lee Byron's test data generator. */\nfunction stream_layers(n, m, o) {\n  if (arguments.length < 3) o = 0;\n  function bump(a) {\n    var x = 1 / (.1 + Math.random()),\n        y = 2 * Math.random() - .5,\n        z = 10 / (.1 + Math.random());\n    for (var i = 0; i < m; i++) {\n      var w = (i / m - y) * z;\n      a[i] += x * Math.exp(-w * w);\n    }\n  }\n  return d3.range(n).map(function() {\n      var a = [], i;\n      for (i = 0; i < m; i++) a[i] = o + o * Math.random();\n      for (i = 0; i < 5; i++) bump(a);\n      return a.map(stream_index);\n    });\n}\n\n/* Another layer generator using gamma distributions. */\nfunction stream_waves(n, m) {\n  return d3.range(n).map(function(i) {\n    return d3.range(m).map(function(j) {\n        var x = 20 * j / m - i / 3;\n        return 2 * x * Math.exp(-.5 * x);\n      }).map(stream_index);\n    });\n}\n\nfunction stream_index(d, i) {\n  return {x: i, y: Math.max(0, d)};\n}\n"]},"hash":"3700db5f86073c99c3abfdc26d138a0ffc380b6d"}
