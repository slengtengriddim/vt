{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/views/high/stats/charts/chart_bar_modes.js","filenameRelative":"/client/views/high/stats/charts/chart_bar_modes.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/views/high/stats/charts/chart_bar_modes.js.map","sourceFileName":"/client/views/high/stats/charts/chart_bar_modes.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"chart_bar_modes"},"ignored":false,"code":"// Template.chartBarModes.rendered = function() {\n//\n// \tlet data = () => {\n// \t\tlet countLesen = Data.Detail.find({mode: 'lesen'}).count();\n// \t\tlet countWort = Data.Detail.find({mode: 'wort'}).count();\n// \t\tlet countDefinition = Data.Detail.find({mode: 'definition'}).count();\n// \t\tlet countEingabe = Data.Detail.find({mode: 'eingabe'}).count();\n//\n// \t\treturn [{\n// \t\t\tmode: 'lesen',\n// \t\t\tcount: countLesen\n// \t\t},{\n// \t\t\tmode: 'wort',\n// \t\t\tcount: countWort\n// \t\t},{\n// \t\t\tmode: 'definition',\n// \t\t\tcount: countDefinition\n// \t\t},{\n// \t\t\tmode: 'eingabe',\n// \t\t\tcount: countEingabe\n// \t\t}];\n// \t};\n// \tlet barChart = () => {\n// \t\treturn [{\n// \t\t\tkey: \"Browse Modi\",\n// \t\t\tvalues: data()\n// \t\t}]\n// \t};\n//\n//\n// \t// chart object\n// \tlet chart = nv.models.discreteBarChart()\n// \t\t.x(function(d) {\n// \t\t\treturn d.mode\n// \t\t})\n// \t\t.y(function(d) {\n// \t\t\treturn d.count\n// \t\t})\n// \t\t.staggerLabels(true)\n// \t\t//.staggerLabels(historicalBarChart[0].values.length > 8)\n// \t\t.showValues(true)\n// \t\t.duration(250);\n//\n// \t// chart details\n// \tnv.addGraph(function() {\n// \t\t// let userId = Meteor.userId();\n// \t\t// let data = Data.Viewed.User.find({userId: userId}, {\n// \t\t// \tsort: {\n// \t\t// \t\ttimesViewed: -1\n// \t\t// \t}\n// \t\t// }).fetch();\n// \t\t// let barChart = [{\n// \t\t// \tkey: \"Top 5 beliebte Woerter (Benutzer)\",\n// \t\t// \tvalues: data\n// \t\t// }];\n//\n//\n// \t\td3.select('#chartBarModes svg')\n// \t\t\t.datum(barChart())\n// \t\t\t.call(chart);\n//\n// \t\tnv.utils.windowResize(chart.update);\n//\n// \t\treturn chart;\n// \t});\n//\n// \t// update chart when data changes\n// \tthis.autorun(function() {\n// \t\t// let userId = Meteor.userId();\n// \t\t// let data = Data.Viewed.User.find({userId: userId}, {\n// \t\t// \tsort: {\n// \t\t// \t\ttimesViewed: -1\n// \t\t// \t}\n// \t\t// }).fetch();\n// \t\t// let barChart = [{\n// \t\t// \tkey: \"Browse Modi\",\n// \t\t// \tvalues: data\n// \t\t// }];\n//\n// \t\td3.select('#chartBarModes svg')\n// \t\t\t.datum(barChart())\n// \t\t\t.call(chart);\n//\n// \t\tchart.update();\n// \t});\n// };","ast":null,"map":{"version":3,"sources":[],"names":[],"mappings":"","file":"/client/views/high/stats/charts/chart_bar_modes.js.map","sourcesContent":[]},"hash":"37280b08db97e3d511fbfd63e4a30090fd5144cc"}
