{"metadata":{"usedHelpers":["classCallCheck","toConsumableArray","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/ongoworks:security/lib/server/Security.Check.js","filenameRelative":"/packages/ongoworks:security/lib/server/Security.Check.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/ongoworks:security/lib/server/Security.Check.js.map","sourceFileName":"/packages/ongoworks:security/lib/server/Security.Check.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"Security.Check"},"ignored":false,"code":"var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nSecurity.Check = function () {\n  function _class(userId) {\n    (0, _classCallCheck3['default'])(this, _class);\n\n    this.userId = userId || null;\n  }\n\n  _class.prototype['for'] = function () {\n    function _for(collection) {\n      this.collection = collection;\n      this.collectionName = getCollectionName(collection);\n      return this;\n    }\n\n    return _for;\n  }();\n\n  _class.prototype.insert = function () {\n    function insert(doc) {\n      if (this.type) throw new Error(Security.errorMessages.multipleCan);\n      this.type = 'insert';\n      this.doc = doc;\n\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      this.args = args;\n      return this;\n    }\n\n    return insert;\n  }();\n\n  _class.prototype.update = function () {\n    function update(doc, modifier) {\n      if (this.type) throw new Error(Security.errorMessages.multipleCan);\n      this.type = 'update';\n      this.doc = doc;\n      this.modifier = modifier;\n\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      this.args = args;\n      return this;\n    }\n\n    return update;\n  }();\n\n  _class.prototype.remove = function () {\n    function remove(doc) {\n      if (this.type) throw new Error(Security.errorMessages.multipleCan);\n      this.type = 'remove';\n      this.doc = doc;\n\n      for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        args[_key3 - 1] = arguments[_key3];\n      }\n\n      this.args = args;\n      return this;\n    }\n\n    return remove;\n  }();\n\n  _class.prototype.read = function () {\n    function read(doc) {\n      if (this.type) throw new Error(Security.errorMessages.multipleCan);\n      this.type = 'read';\n      this.doc = doc;\n\n      for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        args[_key4 - 1] = arguments[_key4];\n      }\n\n      this.args = args;\n      return this;\n    }\n\n    return read;\n  }();\n\n  // EXAMPLES:\n  // Security.can(userId).insert(doc).for(MyCollection).check()\n  // Security.can(userId).update(id, modifier).for(MyCollection).check()\n  // Security.can(userId).remove(id).for(MyCollection).check()\n\n\n  _class.prototype.check = function () {\n    function check() {\n      var _this = this;\n\n      // Select only those rules that apply to this operation type\n      var rules = getRulesForCollectionAndType(this.collectionName, this.type);\n\n      // If this.doc is an ID, we will look up the doc, fetching only the fields needed.\n      // To find out which fields are needed, we will combine all the `fetch` arrays from\n      // all the restrictions in all the rules.\n      if (typeof this.doc === 'string' || this.doc instanceof MongoID.ObjectID) {\n        (function () {\n          var fields = {};\n          _.every(rules, function (rule) {\n            var fetch = rule.combinedFetch();\n            if (fetch === null) {\n              fields = null;\n              return false; // Exit loop\n            }\n            rule.combinedFetch().forEach(function (field) {\n              fields[field] = 1;\n            });\n            return true;\n          });\n\n          var options = {};\n          if (fields) {\n            if (_.isEmpty(fields)) {\n              options = { _id: 1 };\n            } else {\n              options = { fields: fields };\n            }\n          }\n          _this.doc = _this.collection.findOne(_this.doc, options);\n        })();\n      }\n\n      // Loop through all defined rules for this collection. There is an OR relationship among\n      // all rules for the collection, so if any \"allow\" function DO return true, we allow.\n      return _.any(rules, function (rule) {\n        return rule.allow.apply(rule, [_this.type, _this.collection, _this.userId, _this.doc, _this.modifier].concat((0, _toConsumableArray3['default'])(_this.args)));\n      });\n    }\n\n    return check;\n  }();\n\n  // EXAMPLES:\n  // Security.can(userId).insert(doc).for(MyCollection).throw()\n  // Security.can(userId).update(id, modifier).for(MyCollection).throw()\n  // Security.can(userId).remove(id).for(MyCollection).throw()\n\n\n  _class.prototype['throw'] = function () {\n    function _throw() {\n      if (!this.check()) throw new Meteor.Error('access-denied', Security.errorMessages.notAllowed);\n    }\n\n    return _throw;\n  }();\n\n  return _class;\n}();","ast":null,"map":{"version":3,"sources":["/packages/ongoworks:security/lib/server/Security.Check.js"],"names":[],"mappings":"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","file":"/packages/ongoworks:security/lib/server/Security.Check.js.map","sourcesContent":["Security.Check = class {\n  constructor(userId) {\n    this.userId = userId || null;\n  }\n\n  for(collection) {\n    this.collection = collection;\n    this.collectionName = getCollectionName(collection);\n    return this;\n  }\n\n  insert(doc, ...args) {\n    if (this.type) throw new Error(Security.errorMessages.multipleCan);\n    this.type = 'insert';\n    this.doc = doc;\n    this.args = args;\n    return this;\n  }\n\n  update(doc, modifier, ...args) {\n    if (this.type) throw new Error(Security.errorMessages.multipleCan);\n    this.type = 'update';\n    this.doc = doc;\n    this.modifier = modifier;\n    this.args = args;\n    return this;\n  }\n\n  remove(doc, ...args) {\n    if (this.type) throw new Error(Security.errorMessages.multipleCan);\n    this.type = 'remove';\n    this.doc = doc;\n    this.args = args;\n    return this;\n  }\n\n  read(doc, ...args) {\n    if (this.type) throw new Error(Security.errorMessages.multipleCan);\n    this.type = 'read';\n    this.doc = doc;\n    this.args = args;\n    return this;\n  }\n\n  // EXAMPLES:\n  // Security.can(userId).insert(doc).for(MyCollection).check()\n  // Security.can(userId).update(id, modifier).for(MyCollection).check()\n  // Security.can(userId).remove(id).for(MyCollection).check()\n  check() {\n    // Select only those rules that apply to this operation type\n    const rules = getRulesForCollectionAndType(this.collectionName, this.type);\n\n    // If this.doc is an ID, we will look up the doc, fetching only the fields needed.\n    // To find out which fields are needed, we will combine all the `fetch` arrays from\n    // all the restrictions in all the rules.\n    if (typeof this.doc === 'string' || this.doc instanceof MongoID.ObjectID) {\n      let fields = {};\n      _.every(rules, rule => {\n        const fetch = rule.combinedFetch();\n        if (fetch === null) {\n          fields = null;\n          return false; // Exit loop\n        }\n        rule.combinedFetch().forEach(field => {\n          fields[field] = 1;\n        });\n        return true;\n      });\n\n      let options = {};\n      if (fields) {\n        if (_.isEmpty(fields)) {\n          options = {_id: 1};\n        } else {\n          options = {fields};\n        }\n      }\n      this.doc = this.collection.findOne(this.doc, options);\n    }\n\n    // Loop through all defined rules for this collection. There is an OR relationship among\n    // all rules for the collection, so if any \"allow\" function DO return true, we allow.\n    return _.any(rules, rule => rule.allow(this.type, this.collection, this.userId, this.doc, this.modifier, ...this.args));\n  }\n\n  // EXAMPLES:\n  // Security.can(userId).insert(doc).for(MyCollection).throw()\n  // Security.can(userId).update(id, modifier).for(MyCollection).throw()\n  // Security.can(userId).remove(id).for(MyCollection).throw()\n  throw() {\n    if (!this.check()) throw new Meteor.Error('access-denied', Security.errorMessages.notAllowed);\n  }\n}\n"]},"hash":"21aa33f00e9f7ae63323596f17e3466fc4bf69bb"}
