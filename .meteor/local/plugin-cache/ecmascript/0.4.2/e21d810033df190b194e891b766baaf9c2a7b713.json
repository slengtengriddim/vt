{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/ongoworks:security/lib/builtInRules.js","filenameRelative":"/packages/ongoworks:security/lib/builtInRules.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/ongoworks:security/lib/builtInRules.js.map","sourceFileName":"/packages/ongoworks:security/lib/builtInRules.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"builtInRules"},"ignored":false,"code":"/*\n * This file defines built-in restriction methods\n */\n\n/*\n * No one\n */\n\nSecurity.defineMethod(\"never\", {\n  fetch: [],\n  transform: null,\n  allow: function () {\n    function allow() {\n      return false;\n    }\n\n    return allow;\n  }()\n});\n\n/*\n * Logged In\n */\n\nSecurity.defineMethod(\"ifLoggedIn\", {\n  fetch: [],\n  transform: null,\n  allow: function () {\n    function allow(type, arg, userId) {\n      return !!userId;\n    }\n\n    return allow;\n  }()\n});\n\n/*\n * Specific User ID\n */\n\nSecurity.defineMethod(\"ifHasUserId\", {\n  fetch: [],\n  transform: null,\n  allow: function () {\n    function allow(type, arg, userId) {\n      return userId === arg;\n    }\n\n    return allow;\n  }()\n});\n\n/*\n * Specific Roles\n */\n\n/*\n * alanning:roles support\n */\nif (Package && Package[\"alanning:roles\"]) {\n\n  var Roles = Package[\"alanning:roles\"].Roles;\n\n  Security.defineMethod(\"ifHasRole\", {\n    fetch: [],\n    transform: null,\n    allow: function () {\n      function allow(type, arg, userId) {\n        if (!arg) throw new Error('ifHasRole security rule method requires an argument');\n        if (arg.role) {\n          return Roles.userIsInRole(userId, arg.role, arg.group);\n        } else {\n          return Roles.userIsInRole(userId, arg);\n        }\n      }\n\n      return allow;\n    }()\n  });\n}\n\n/*\n * nicolaslopezj:roles support\n * Note: doesn't support groups\n */\nif (Package && Package[\"nicolaslopezj:roles\"]) {\n\n  var Roles = Package[\"nicolaslopezj:roles\"].Roles;\n\n  Security.defineMethod(\"ifHasRole\", {\n    fetch: [],\n    transform: null,\n    allow: function () {\n      function allow(type, arg, userId) {\n        if (!arg) throw new Error('ifHasRole security rule method requires an argument');\n        return Roles.userHasRole(userId, arg);\n      }\n\n      return allow;\n    }()\n  });\n}\n\n/*\n * Specific Properties\n */\n\nSecurity.defineMethod(\"onlyProps\", {\n  fetch: [],\n  transform: null,\n  allow: function () {\n    function allow(type, arg, userId, doc, fieldNames) {\n      if (!_.isArray(arg)) arg = [arg];\n\n      fieldNames = fieldNames || _.keys(doc);\n\n      return _.every(fieldNames, function (fieldName) {\n        return _.contains(arg, fieldName);\n      });\n    }\n\n    return allow;\n  }()\n});\n\nSecurity.defineMethod(\"exceptProps\", {\n  fetch: [],\n  transform: null,\n  allow: function () {\n    function allow(type, arg, userId, doc, fieldNames) {\n      if (!_.isArray(arg)) arg = [arg];\n\n      fieldNames = fieldNames || _.keys(doc);\n\n      return !_.any(fieldNames, function (fieldName) {\n        return _.contains(arg, fieldName);\n      });\n    }\n\n    return allow;\n  }()\n});","ast":null,"map":{"version":3,"sources":["/packages/ongoworks:security/lib/builtInRules.js"],"names":[],"mappings":";;;;;;;;AAQA,SAAS,YAAT,CAAsB,OAAtB,EAA+B;AAC7B,SAAO,EAAP;AACA,aAAW,IAAX;AACA;qBAAQ;AACN,aAAO,KAAP,CADM;;;;KAHqB;CAA/B;;;;;;AAYA,SAAS,YAAT,CAAsB,YAAtB,EAAoC;AAClC,SAAO,EAAP;AACA,aAAW,IAAX;AACA;mBAAM,MAAM,KAAK,QAAQ;AACvB,aAAO,CAAC,CAAC,MAAD,CADe;;;;KAHS;CAApC;;;;;;AAYA,SAAS,YAAT,CAAsB,aAAtB,EAAqC;AACnC,SAAO,EAAP;AACA,aAAW,IAAX;AACA;mBAAM,MAAM,KAAK,QAAQ;AACvB,aAAO,WAAW,GAAX,CADgB;;;;KAHU;CAArC;;;;;;;;;AAeA,IAAI,WAAW,QAAQ,gBAAR,CAAX,EAAsC;;AAExC,MAAI,QAAQ,QAAQ,gBAAR,EAA0B,KAA1B,CAF4B;;AAIxC,WAAS,YAAT,CAAsB,WAAtB,EAAmC;AACjC,WAAO,EAAP;AACA,eAAW,IAAX;AACA;qBAAM,MAAM,KAAK,QAAQ;AACvB,YAAI,CAAC,GAAD,EAAM,MAAM,IAAI,KAAJ,CAAU,qDAAV,CAAN,CAAV;AACA,YAAI,IAAI,IAAJ,EAAU;AACZ,iBAAO,MAAM,YAAN,CAAmB,MAAnB,EAA2B,IAAI,IAAJ,EAAU,IAAI,KAAJ,CAA5C,CADY;SAAd,MAEO;AACL,iBAAO,MAAM,YAAN,CAAmB,MAAnB,EAA2B,GAA3B,CAAP,CADK;SAFP;;;;OAL+B;GAAnC,EAJwC;CAA1C;;;;;;AAuBA,IAAI,WAAW,QAAQ,qBAAR,CAAX,EAA2C;;AAE7C,MAAI,QAAQ,QAAQ,qBAAR,EAA+B,KAA/B,CAFiC;;AAI7C,WAAS,YAAT,CAAsB,WAAtB,EAAmC;AACjC,WAAO,EAAP;AACA,eAAW,IAAX;AACA;qBAAM,MAAM,KAAK,QAAQ;AACvB,YAAI,CAAC,GAAD,EAAM,MAAM,IAAI,KAAJ,CAAU,qDAAV,CAAN,CAAV;AACA,eAAO,MAAM,WAAN,CAAkB,MAAlB,EAA0B,GAA1B,CAAP,CAFuB;;;;OAHQ;GAAnC,EAJ6C;CAA/C;;;;;;AAmBA,SAAS,YAAT,CAAsB,WAAtB,EAAmC;AACjC,SAAO,EAAP;AACA,aAAW,IAAX;AACA;mBAAM,MAAM,KAAK,QAAQ,KAAK,YAAY;AACxC,UAAI,CAAC,EAAE,OAAF,CAAU,GAAV,CAAD,EAAiB,MAAM,CAAC,GAAD,CAAN,CAArB;;AAEA,mBAAa,cAAc,EAAE,IAAF,CAAO,GAAP,CAAd,CAH2B;;AAKxC,aAAO,EAAE,KAAF,CAAQ,UAAR,EAAoB,UAAU,SAAV,EAAqB;AAC9C,eAAO,EAAE,QAAF,CAAW,GAAX,EAAgB,SAAhB,CAAP,CAD8C;OAArB,CAA3B,CALwC;;;;KAHT;CAAnC;;AAcA,SAAS,YAAT,CAAsB,aAAtB,EAAqC;AACnC,SAAO,EAAP;AACA,aAAW,IAAX;AACA;mBAAM,MAAM,KAAK,QAAQ,KAAK,YAAY;AACxC,UAAI,CAAC,EAAE,OAAF,CAAU,GAAV,CAAD,EAAiB,MAAM,CAAC,GAAD,CAAN,CAArB;;AAEA,mBAAa,cAAc,EAAE,IAAF,CAAO,GAAP,CAAd,CAH2B;;AAKxC,aAAO,CAAC,EAAE,GAAF,CAAM,UAAN,EAAkB,UAAU,SAAV,EAAqB;AAC7C,eAAO,EAAE,QAAF,CAAW,GAAX,EAAgB,SAAhB,CAAP,CAD6C;OAArB,CAAnB,CALiC;;;;KAHP;CAArC","file":"/packages/ongoworks:security/lib/builtInRules.js.map","sourcesContent":["/*\n * This file defines built-in restriction methods\n */\n\n/*\n * No one\n */\n\nSecurity.defineMethod(\"never\", {\n  fetch: [],\n  transform: null,\n  allow() {\n    return false;\n  },\n});\n\n/*\n * Logged In\n */\n\nSecurity.defineMethod(\"ifLoggedIn\", {\n  fetch: [],\n  transform: null,\n  allow(type, arg, userId) {\n    return !!userId;\n  },\n});\n\n/*\n * Specific User ID\n */\n\nSecurity.defineMethod(\"ifHasUserId\", {\n  fetch: [],\n  transform: null,\n  allow(type, arg, userId) {\n    return userId === arg;\n  },\n});\n\n/*\n * Specific Roles\n */\n\n/*\n * alanning:roles support\n */\nif (Package && Package[\"alanning:roles\"]) {\n\n  var Roles = Package[\"alanning:roles\"].Roles;\n\n  Security.defineMethod(\"ifHasRole\", {\n    fetch: [],\n    transform: null,\n    allow(type, arg, userId) {\n      if (!arg) throw new Error('ifHasRole security rule method requires an argument');\n      if (arg.role) {\n        return Roles.userIsInRole(userId, arg.role, arg.group);\n      } else {\n        return Roles.userIsInRole(userId, arg);\n      }\n    },\n  });\n\n}\n\n/*\n * nicolaslopezj:roles support\n * Note: doesn't support groups\n */\nif (Package && Package[\"nicolaslopezj:roles\"]) {\n\n  var Roles = Package[\"nicolaslopezj:roles\"].Roles;\n\n  Security.defineMethod(\"ifHasRole\", {\n    fetch: [],\n    transform: null,\n    allow(type, arg, userId) {\n      if (!arg) throw new Error('ifHasRole security rule method requires an argument');\n      return Roles.userHasRole(userId, arg);\n    }\n  });\n\n}\n\n/*\n * Specific Properties\n */\n\nSecurity.defineMethod(\"onlyProps\", {\n  fetch: [],\n  transform: null,\n  allow(type, arg, userId, doc, fieldNames) {\n    if (!_.isArray(arg)) arg = [arg];\n\n    fieldNames = fieldNames || _.keys(doc);\n\n    return _.every(fieldNames, function (fieldName) {\n      return _.contains(arg, fieldName);\n    });\n  },\n});\n\nSecurity.defineMethod(\"exceptProps\", {\n  fetch: [],\n  transform: null,\n  allow(type, arg, userId, doc, fieldNames) {\n    if (!_.isArray(arg)) arg = [arg];\n\n    fieldNames = fieldNames || _.keys(doc);\n\n    return !_.any(fieldNames, function (fieldName) {\n      return _.contains(arg, fieldName);\n    });\n  },\n});\n"]},"hash":"e21d810033df190b194e891b766baaf9c2a7b713"}
