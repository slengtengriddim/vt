{"metadata":{"usedHelpers":["classCallCheck","toConsumableArray","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/ongoworks:security/lib/server/Security.Rule.js","filenameRelative":"/packages/ongoworks:security/lib/server/Security.Rule.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/ongoworks:security/lib/server/Security.Rule.js.map","sourceFileName":"/packages/ongoworks:security/lib/server/Security.Rule.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"Security.Rule"},"ignored":false,"code":"var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nSecurity.Rule = function () {\n  function _class(types) {\n    (0, _classCallCheck3['default'])(this, _class);\n\n    if (!_.isArray(types)) types = [types];\n    this._types = types;\n    this._restrictions = [];\n  }\n\n  _class.prototype.collections = function () {\n    function collections(_collections) {\n      var _this = this;\n\n      // Make sure the `collections` argument is either a `Mongo.Collection` instance or\n      // an array of them. If it's a single collection, convert it to a one-item array.\n      if (!_.isArray(_collections)) _collections = [_collections];\n\n      // Keep list keyed by collection name\n      _.each(_collections, function (collection) {\n        if (!(collection instanceof Mongo.Collection) &&\n        // CollectionFS has underlying collection on `files` property\n        !(collection.files instanceof Mongo.Collection)) {\n          throw new Error(Security.errorMessages.collectionsArg);\n        }\n        // CollectionFS has underlying collection on `files` property\n        var collectionName = getCollectionName(collection);\n        rulesByCollection[collectionName] = rulesByCollection[collectionName] || [];\n        rulesByCollection[collectionName].push(_this);\n      });\n\n      this._collections = _collections;\n\n      return this;\n    }\n\n    return collections;\n  }();\n\n  _class.prototype.combinedFetch = function () {\n    function combinedFetch() {\n      // We need a combined `fetch` array. The `fetch` is optional and can be either an array\n      // or a function that takes the argument passed to the restriction method and returns an array.\n      var fetch = [];\n      _.every(this._restrictions, function (restriction) {\n        if (_.isArray(restriction.definition.fetch)) {\n          fetch = _.union(fetch, restriction.definition.fetch);\n        } else if (typeof restriction.definition.fetch === \"function\") {\n          fetch = _.union(fetch, restriction.definition.fetch(restriction.arg));\n        } else if (!restriction.definition.hasOwnProperty('fetch')) {\n          // If `fetch` property isn't present, we should fetch the full doc.\n          fetch = null;\n          return false; // Exit loop\n        }\n        return true;\n      });\n      return fetch;\n    }\n\n    return combinedFetch;\n  }();\n\n  _class.prototype.allowInClientCode = function () {\n    function allowInClientCode() {\n      if (!this._collections || !this._types) throw new Error(Security.errorMessages.noCollectionOrType);\n      ensureSecureDeny(this._collections, this._types);\n    }\n\n    return allowInClientCode;\n  }();\n\n  _class.prototype.allow = function () {\n    function allow(type, collection, userId, doc, modifier) {\n      for (var _len = arguments.length, args = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {\n        args[_key - 5] = arguments[_key];\n      }\n\n      var fields = void 0;\n      if (type === 'update') fields = computeChangedFieldsFromModifier(modifier);\n\n      // Loop through all defined restrictions. Restrictions are additive for this chained\n      // rule, so if any allow function returns false, this function should return false.\n      return _.every(this._restrictions, function (restriction) {\n        var _restriction$definiti;\n\n        // Clone the doc in case we need to transform it. Transformations\n        // should apply to only the one restriction.\n        var loopDoc = _.clone(doc);\n\n        // If transform is a function, apply that\n        var transform = restriction.definition.transform;\n        if (transform !== null) {\n          transform = transform || collection._transform;\n          if (typeof transform === 'function') {\n            var addedRandomId = false;\n            if (type === 'insert' && !loopDoc._id) {\n              // The wrapped transform requires an _id, but we\n              // don't have access to the generatedId from Meteor API,\n              // so we'll fudge one and then remove it.\n              loopDoc._id = Random.id();\n              addedRandomId = true;\n            }\n            loopDoc = transform(loopDoc);\n            if (addedRandomId) delete loopDoc._id;\n          }\n        }\n\n        return (_restriction$definiti = restriction.definition).allow.apply(_restriction$definiti, [type, restriction.arg, userId, loopDoc, fields, modifier].concat(args));\n      });\n    }\n\n    return allow;\n  }();\n\n  return _class;\n}();\n\nfunction ensureSecureDeny(collections, types) {\n  // If we haven't yet done so, set up a default, permissive `allow` function for all of\n  // the given collections and types. We control all security through `deny` functions only, but\n  // there must first be at least one `allow` function for each collection or all writes\n  // will be denied.\n  ensureDefaultAllow(collections, types);\n\n  _.each(types, function (t) {\n    _.each(collections, function (collection) {\n      ensureCreated('deny', [collection], [t], null, function () {\n        var _Security$can;\n\n        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        var userId = args.shift();\n\n        // If type is update, remove the `fields` argument. We will create our own\n        // for consistency.\n        if (t === 'update') args = [args[0], args[2]];\n\n        return !(_Security$can = Security.can(userId))[t].apply(_Security$can, (0, _toConsumableArray3['default'])(args))['for'](collection).check();\n      });\n    });\n  });\n}\n\nfunction computeChangedFieldsFromModifier(modifier) {\n  var fields = [];\n  // This is the same logic Meteor's mongo package uses in\n  // https://github.com/meteor/meteor/blob/devel/packages/mongo/collection.js\n  _.each(modifier, function (params) {\n    _.each(_.keys(params), function (field) {\n      // treat dotted fields as if they are replacing their\n      // top-level part\n      if (field.indexOf('.') !== -1) field = field.substring(0, field.indexOf('.'));\n\n      // record the field we are trying to change\n      if (!_.contains(fields, field)) fields.push(field);\n    });\n  });\n  return fields;\n}","ast":null,"map":{"version":3,"sources":["/packages/ongoworks:security/lib/server/Security.Rule.js"],"names":[],"mappings":"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","file":"/packages/ongoworks:security/lib/server/Security.Rule.js.map","sourcesContent":["Security.Rule = class {\n  constructor(types) {\n    if (!_.isArray(types)) types = [types];\n    this._types = types;\n    this._restrictions = [];\n  }\n\n  collections(collections) {\n    // Make sure the `collections` argument is either a `Mongo.Collection` instance or\n    // an array of them. If it's a single collection, convert it to a one-item array.\n    if (!_.isArray(collections)) collections = [collections];\n\n    // Keep list keyed by collection name\n    _.each(collections, collection => {\n      if (!(collection instanceof Mongo.Collection) &&\n          // CollectionFS has underlying collection on `files` property\n        !(collection.files instanceof Mongo.Collection)) {\n        throw new Error(Security.errorMessages.collectionsArg);\n      }\n      // CollectionFS has underlying collection on `files` property\n      const collectionName = getCollectionName(collection);\n      rulesByCollection[collectionName] = rulesByCollection[collectionName] || [];\n      rulesByCollection[collectionName].push(this);\n    });\n\n    this._collections = collections;\n\n    return this;\n  }\n\n  combinedFetch() {\n    // We need a combined `fetch` array. The `fetch` is optional and can be either an array\n    // or a function that takes the argument passed to the restriction method and returns an array.\n    let fetch = [];\n    _.every(this._restrictions, restriction => {\n      if (_.isArray(restriction.definition.fetch)) {\n        fetch = _.union(fetch, restriction.definition.fetch);\n      } else if (typeof restriction.definition.fetch === \"function\") {\n        fetch = _.union(fetch, restriction.definition.fetch(restriction.arg));\n      } else if (!restriction.definition.hasOwnProperty('fetch')) {\n        // If `fetch` property isn't present, we should fetch the full doc.\n        fetch = null;\n        return false; // Exit loop\n      }\n      return true;\n    });\n    return fetch;\n  }\n\n  allowInClientCode() {\n    if (!this._collections || !this._types) throw new Error(Security.errorMessages.noCollectionOrType);\n    ensureSecureDeny(this._collections, this._types);\n  }\n\n  allow(type, collection, userId, doc, modifier, ...args) {\n    let fields;\n    if (type === 'update') fields = computeChangedFieldsFromModifier(modifier);\n\n    // Loop through all defined restrictions. Restrictions are additive for this chained\n    // rule, so if any allow function returns false, this function should return false.\n    return _.every(this._restrictions, restriction => {\n      // Clone the doc in case we need to transform it. Transformations\n      // should apply to only the one restriction.\n      let loopDoc = _.clone(doc);\n\n      // If transform is a function, apply that\n      let transform = restriction.definition.transform;\n      if (transform !== null) {\n        transform = transform || collection._transform;\n        if (typeof transform === 'function') {\n          let addedRandomId = false;\n          if (type === 'insert' && !loopDoc._id) {\n            // The wrapped transform requires an _id, but we\n            // don't have access to the generatedId from Meteor API,\n            // so we'll fudge one and then remove it.\n            loopDoc._id = Random.id();\n            addedRandomId = true;\n          }\n          loopDoc = transform(loopDoc);\n          if (addedRandomId) delete loopDoc._id;\n        }\n      }\n\n      return restriction.definition.allow(type, restriction.arg, userId, loopDoc, fields, modifier, ...args);\n    });\n  }\n}\n\nfunction ensureSecureDeny(collections, types) {\n  // If we haven't yet done so, set up a default, permissive `allow` function for all of\n  // the given collections and types. We control all security through `deny` functions only, but\n  // there must first be at least one `allow` function for each collection or all writes\n  // will be denied.\n  ensureDefaultAllow(collections, types);\n\n  _.each(types, t => {\n    _.each(collections, collection => {\n      ensureCreated('deny', [collection], [t], null, function (...args) {\n        const userId = args.shift();\n\n        // If type is update, remove the `fields` argument. We will create our own\n        // for consistency.\n        if (t === 'update') args = [args[0], args[2]];\n\n        return !Security.can(userId)[t](...args).for(collection).check();\n      });\n    });\n  });\n}\n\nfunction computeChangedFieldsFromModifier(modifier) {\n  var fields = [];\n  // This is the same logic Meteor's mongo package uses in\n  // https://github.com/meteor/meteor/blob/devel/packages/mongo/collection.js\n  _.each(modifier, function (params) {\n    _.each(_.keys(params), function (field) {\n      // treat dotted fields as if they are replacing their\n      // top-level part\n      if (field.indexOf('.') !== -1)\n        field = field.substring(0, field.indexOf('.'));\n\n      // record the field we are trying to change\n      if (!_.contains(fields, field))\n        fields.push(field);\n    });\n  });\n  return fields;\n}\n"]},"hash":"5bc000b039a1176e7fc5e79670bfd1fd0285c9d4"}
