{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/views/high/stats/charts/chart_multibar_attention.js","filenameRelative":"/client/views/high/stats/charts/chart_multibar_attention.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/views/high/stats/charts/chart_multibar_attention.js.map","sourceFileName":"/client/views/high/stats/charts/chart_multibar_attention.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"chart_multibar_attention"},"ignored":false,"code":"Template.chartMultiBarAttention.rendered = function () {\n\tvar data = function data(mode) {\n\t\tvar result = [];\n\t\tvar data = Data.Detail.find({ mode: mode }, {\n\t\t\tsort: {\n\t\t\t\ttimestamp: 1\n\t\t\t}\n\t\t}).fetch();\n\t\tvar byDate = R.groupBy(function (entry) {\n\t\t\tvar day = entry.timestamp;\n\t\t\t// day.setHours(0);\n\t\t\t// day.setMinutes(0);\n\t\t\tday.setSeconds(0);\n\t\t\tday.setMilliseconds(0);\n\t\t\tif (entry.timestamp.getMinutes()) {\n\t\t\t\treturn day;\n\t\t\t}\n\t\t});\n\t\tvar groupedByDate = R.map(R.length, byDate(data));\n\t\tfor (var k in meteorBabelHelpers.sanitizeForInObject(groupedByDate)) {\n\t\t\tif (groupedByDate.hasOwnProperty(k)) {\n\t\t\t\tresult.push({\n\t\t\t\t\tx: k,\n\t\t\t\t\ty: groupedByDate[k]\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t};\n\n\tvar multiBar = function multiBar() {\n\t\treturn [{\n\t\t\tvalues: data('lesen'),\n\t\t\tkey: 'Lesen'\n\t\t}, {\n\t\t\tvalues: data('wort'),\n\t\t\tkey: 'Wort'\n\t\t}, {\n\t\t\tvalues: data('definition'),\n\t\t\tkey: 'Definition'\n\t\t}, {\n\t\t\tvalues: data('eingabe'),\n\t\t\tkey: 'Eingabe'\n\t\t}];\n\t};\n\n\tvar chart = nv.models.multiBarChart().duration(350).reduceXTicks(false) //If 'false', every single x-axis tick label will be rendered.\n\t.rotateLabels(0) //Angle to rotate x-axis labels.\n\t.showControls(true) //Allow user to switch between 'Grouped' and 'Stacked' mode.\n\t.groupSpacing(0.2) //Distance between each group of bars.\n\t.staggerLabels(true).rotateLabels(-45).x(function (d) {\n\t\treturn d.x;\n\t}).y(function (d) {\n\t\treturn d.y;\n\t});\n\tchart.xAxis.tickFormat(function (d) {\n\t\treturn d3.time.format('%e, %H:%M')(new Date(d));\n\t});\n\n\tchart.yAxis.tickFormat(d3.format(',.1f'));\n\n\tnv.addGraph(function () {\n\t\td3.select('#chartMultiBarAttention svg').datum(multiBar()).call(chart);\n\n\t\tnv.utils.windowResize(chart.update);\n\n\t\treturn chart;\n\t});\n\n\t// update chart when data changes\n\tthis.autorun(function () {\n\t\td3.select('#chartMultiBarAttention svg').datum(multiBar()).call(chart);\n\n\t\tconsole.log(multiBar());\n\n\t\tchart.update();\n\t});\n\n\t// //Generate some nice data.\n\t// function exampleData() {\n\t// \treturn NVD3.stream_layers(3, 10 + Math.random() * 100, .1).map(function(data, i) {\n\t// \t\treturn {\n\t// \t\t\tkey: 'Stream #' + i,\n\t// \t\t\tvalues: data\n\t// \t\t};\n\t// \t});\n\t// }\n\n\t// // chart object\n\t// let chart = nv.models.lineChart()\n\t// \t.margin({\n\t// \t\tleft: 100\n\t// \t}) //Adjust chart margins to give the x-axis some breathing room.\n\t// \t.useInteractiveGuideline(true) //We want nice looking tooltips and a guideline!\n\t// \t.duration(350) //how fast do you want the lines to transition?\n\t// \t.showLegend(true) //Show the legend, allowing users to turn on/off line series.\n\t// \t.showYAxis(true) //Show the y-axis\n\t// \t.showXAxis(true) //Show the x-axis\n\t// ;\n\t//\n\t// // chart details\n\t// nv.addGraph(function() {\n\t// \tlet dataLow = Data.Fav.Low.find({}, {\n\t// \t\tsort: {\n\t// \t\t\ttimesViewed: 1\n\t// \t\t}\n\t// \t}).fetch();\n\t// \tlet dataHigh = Data.Fav.High.find({}, {\n\t// \t\tsort: {\n\t// \t\t\ttimesViewed: 1\n\t// \t\t}\n\t// \t}).fetch();\n\t//\n\t// \tchart.xAxis\n\t// \t\t\t\t\t\t .axisLabel('Tag').tickFormat(d3.format('d'))\n\t// \t\t\t\t\t\t .tickFormat(function(d) {\n\t//                 return d3.time.format('%x')(new Date());\n\t//             });\n\t// \tchart.yAxis.axisLabel('Clicks').tickFormat(d3.format('d'));\n\t//\n\t// \td3.select('#chartLineAttention svg')\n\t// \t\t.datum(\n\t// \t\t\t[{\n\t// \t\t\t\tvalues: dataLow,\n\t// \t\t\t\tkey: 'Low',\n\t// \t\t\t\tcolor: \"#2ca02c\"\n\t// \t\t\t},\n\t// \t\t\t{\n\t// \t\t\t\tvalues: dataHigh,\n\t// \t\t\t\tkey: 'High',\n\t// \t\t\t\tcolor: \"#ff7f0e\"\n\t// \t\t\t}]\n\t// \t\t)\n\t// \t\t.call(chart)\n\t// \t\t;\n\t//\n\t// \tnv.utils.windowResize(chart.update);\n\t//\n\t// \treturn chart;\n\t// });\n\t//\n\t// // update chart when data changes\n\t// this.autorun(function() {\n\t// \tlet dataLow = Data.Fav.Low.find({}, {\n\t// \t\tsort: {\n\t// \t\t\ttimesViewed: 1\n\t// \t\t}\n\t// \t}).fetch();\n\t// \tlet dataHigh = Data.Fav.High.find({}, {\n\t// \t\tsort: {\n\t// \t\t\ttimesViewed: 1\n\t// \t\t}\n\t// \t}).fetch();\n\t//\n\t// \td3.select('#chartLineAttention svg').datum(\n\t// \t\t[{\n\t// \t\t\tvalues: dataLow,\n\t// \t\t\tkey: 'Low',\n\t// \t\t\tcolor: \"#2ca02c\"\n\t// \t\t},\n\t// \t\t{\n\t// \t\t\tvalues: dataHigh,\n\t// \t\t\tkey: 'High',\n\t// \t\t\tcolor: \"#ff7f0e\"\n\t// \t\t}]\n\t// \t).call(chart);\n\t// \tchart.update();\n\t// });\n};","ast":null,"map":{"version":3,"sources":["/client/views/high/stats/charts/chart_multibar_attention.js"],"names":[],"mappings":"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","file":"/client/views/high/stats/charts/chart_multibar_attention.js.map","sourcesContent":["Template.chartMultiBarAttention.rendered = function() {\n\tlet data = (mode) => {\n\t\tlet result = [];\n\t\tlet data = Data.Detail.find({mode: mode}, {\n\t\t\tsort: {\n\t\t\t\ttimestamp: 1\n\t\t\t}\n\t\t}).fetch();\n\t\tlet byDate = R.groupBy(function(entry) {\n\t\t\tlet day = entry.timestamp;\n\t\t\t// day.setHours(0);\n\t\t\t// day.setMinutes(0);\n\t\t\tday.setSeconds(0);\n\t\t\tday.setMilliseconds(0);\n\t\t\tif (entry.timestamp.getMinutes()) {\n\t\t\t\treturn day;\n\t\t\t}\n\t\t});\n\t\tlet groupedByDate = R.map(R.length, byDate(data));\n\t\tfor (let k in groupedByDate) {\n\t\t\tif (groupedByDate.hasOwnProperty(k)) {\n\t\t\t\tresult.push({\n\t\t\t\t\tx: k,\n\t\t\t\t\ty: groupedByDate[k]\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t};\n\n\tlet multiBar = () => {\n\t\treturn [{\n\t\t\tvalues: data('lesen'),\n\t\t\tkey: 'Lesen'\n\t\t}, {\n\t\t\tvalues: data('wort'),\n\t\t\tkey: 'Wort'\n\t\t}, {\n\t\t\tvalues: data('definition'),\n\t\t\tkey: 'Definition'\n\t\t}, {\n\t\t\tvalues: data('eingabe'),\n\t\t\tkey: 'Eingabe'\n\t\t}];\n\t}\n\n\tvar chart = nv.models.multiBarChart()\n\t\t.duration(350)\n\t\t.reduceXTicks(false) //If 'false', every single x-axis tick label will be rendered.\n\t\t.rotateLabels(0) //Angle to rotate x-axis labels.\n\t\t.showControls(true) //Allow user to switch between 'Grouped' and 'Stacked' mode.\n\t\t.groupSpacing(0.2) //Distance between each group of bars.\n\t\t.staggerLabels(true)\n\t\t.rotateLabels(-45)\n\t\t.x(function(d) {\n\t\t\treturn d.x\n\t\t})\n\t\t.y(function(d) {\n\t\t\treturn d.y\n\t\t})\n\t;\n\tchart.xAxis\n\t.tickFormat(function(d) {\n\t\t\t\treturn d3.time.format('%e, %H:%M')(new Date(d))\n\t});\n\n\n\tchart.yAxis\n\t\t.tickFormat(d3.format(',.1f'));\n\n\tnv.addGraph(function() {\n\t\td3.select('#chartMultiBarAttention svg')\n\t\t\t.datum(multiBar())\n\t\t\t.call(chart);\n\n\t\tnv.utils.windowResize(chart.update);\n\n\t\treturn chart;\n\t});\n\n\t// update chart when data changes\n\tthis.autorun(function() {\n\t\td3.select('#chartMultiBarAttention svg')\n\t\t  .datum(multiBar())\n\t\t  .call(chart);\n\n\t\t\tconsole.log(multiBar());\n\n\t\tchart.update();\n\t});\n\n\n\t// //Generate some nice data.\n\t// function exampleData() {\n\t// \treturn NVD3.stream_layers(3, 10 + Math.random() * 100, .1).map(function(data, i) {\n\t// \t\treturn {\n\t// \t\t\tkey: 'Stream #' + i,\n\t// \t\t\tvalues: data\n\t// \t\t};\n\t// \t});\n\t// }\n\n\n\n\t// // chart object\n\t// let chart = nv.models.lineChart()\n\t// \t.margin({\n\t// \t\tleft: 100\n\t// \t}) //Adjust chart margins to give the x-axis some breathing room.\n\t// \t.useInteractiveGuideline(true) //We want nice looking tooltips and a guideline!\n\t// \t.duration(350) //how fast do you want the lines to transition?\n\t// \t.showLegend(true) //Show the legend, allowing users to turn on/off line series.\n\t// \t.showYAxis(true) //Show the y-axis\n\t// \t.showXAxis(true) //Show the x-axis\n\t// ;\n\t//\n\t// // chart details\n\t// nv.addGraph(function() {\n\t// \tlet dataLow = Data.Fav.Low.find({}, {\n\t// \t\tsort: {\n\t// \t\t\ttimesViewed: 1\n\t// \t\t}\n\t// \t}).fetch();\n\t// \tlet dataHigh = Data.Fav.High.find({}, {\n\t// \t\tsort: {\n\t// \t\t\ttimesViewed: 1\n\t// \t\t}\n\t// \t}).fetch();\n\t//\n\t// \tchart.xAxis\n\t// \t\t\t\t\t\t .axisLabel('Tag').tickFormat(d3.format('d'))\n\t// \t\t\t\t\t\t .tickFormat(function(d) {\n\t//                 return d3.time.format('%x')(new Date());\n\t//             });\n\t// \tchart.yAxis.axisLabel('Clicks').tickFormat(d3.format('d'));\n\t//\n\t// \td3.select('#chartLineAttention svg')\n\t// \t\t.datum(\n\t// \t\t\t[{\n\t// \t\t\t\tvalues: dataLow,\n\t// \t\t\t\tkey: 'Low',\n\t// \t\t\t\tcolor: \"#2ca02c\"\n\t// \t\t\t},\n\t// \t\t\t{\n\t// \t\t\t\tvalues: dataHigh,\n\t// \t\t\t\tkey: 'High',\n\t// \t\t\t\tcolor: \"#ff7f0e\"\n\t// \t\t\t}]\n\t// \t\t)\n\t// \t\t.call(chart)\n\t// \t\t;\n\t//\n\t// \tnv.utils.windowResize(chart.update);\n\t//\n\t// \treturn chart;\n\t// });\n\t//\n\t// // update chart when data changes\n\t// this.autorun(function() {\n\t// \tlet dataLow = Data.Fav.Low.find({}, {\n\t// \t\tsort: {\n\t// \t\t\ttimesViewed: 1\n\t// \t\t}\n\t// \t}).fetch();\n\t// \tlet dataHigh = Data.Fav.High.find({}, {\n\t// \t\tsort: {\n\t// \t\t\ttimesViewed: 1\n\t// \t\t}\n\t// \t}).fetch();\n\t//\n\t// \td3.select('#chartLineAttention svg').datum(\n\t// \t\t[{\n\t// \t\t\tvalues: dataLow,\n\t// \t\t\tkey: 'Low',\n\t// \t\t\tcolor: \"#2ca02c\"\n\t// \t\t},\n\t// \t\t{\n\t// \t\t\tvalues: dataHigh,\n\t// \t\t\tkey: 'High',\n\t// \t\t\tcolor: \"#ff7f0e\"\n\t// \t\t}]\n\t// \t).call(chart);\n\t// \tchart.update();\n\t// });\n}\n"]},"hash":"189dd5225577808974807d059ac142e35b9bd538"}
