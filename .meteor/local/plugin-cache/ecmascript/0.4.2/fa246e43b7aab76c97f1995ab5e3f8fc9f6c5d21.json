{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/views/high/stats/charts/chart_line_attention.js","filenameRelative":"/client/views/high/stats/charts/chart_line_attention.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/views/high/stats/charts/chart_line_attention.js.map","sourceFileName":"/client/views/high/stats/charts/chart_line_attention.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"chart_line_attention"},"ignored":false,"code":"Template.chartLineAttention.onCreated(function () {\n\tvar template = Template.instance();\n\ttemplate.subscribe('dataFavHigh');\n\ttemplate.subscribe('dataFavLow');\n});\n\nTemplate.chartLineAttention.rendered = function () {\n\n\tnv.addGraph(function () {\n\t\tvar chart = nv.models.multiBarChart().duration(350).reduceXTicks(true) //If 'false', every single x-axis tick label will be rendered.\n\t\t.rotateLabels(0) //Angle to rotate x-axis labels.\n\t\t.showControls(true) //Allow user to switch between 'Grouped' and 'Stacked' mode.\n\t\t.groupSpacing(0.1) //Distance between each group of bars.\n\t\t;\n\n\t\tchart.xAxis.tickFormat(d3.format(',f'));\n\n\t\tchart.yAxis.tickFormat(d3.format(',.1f'));\n\n\t\td3.select('#chartLineAttention svg').datum(exampleData()).call(chart);\n\n\t\tnv.utils.windowResize(chart.update);\n\n\t\treturn chart;\n\t});\n\n\t//Generate some nice data.\n\tfunction exampleData() {\n\t\treturn NVD3.stream_layers(3, 10 + Math.random() * 100, .1).map(function (data, i) {\n\t\t\treturn {\n\t\t\t\tkey: 'Stream #' + i,\n\t\t\t\tvalues: data\n\t\t\t};\n\t\t});\n\t}\n\n\t// // chart object\n\t// let chart = nv.models.lineChart()\n\t// \t.margin({\n\t// \t\tleft: 100\n\t// \t}) //Adjust chart margins to give the x-axis some breathing room.\n\t// \t.useInteractiveGuideline(true) //We want nice looking tooltips and a guideline!\n\t// \t.duration(350) //how fast do you want the lines to transition?\n\t// \t.showLegend(true) //Show the legend, allowing users to turn on/off line series.\n\t// \t.showYAxis(true) //Show the y-axis\n\t// \t.showXAxis(true) //Show the x-axis\n\t// ;\n\t//\n\t// // chart details\n\t// nv.addGraph(function() {\n\t// \tlet dataLow = Data.Fav.Low.find({}, {\n\t// \t\tsort: {\n\t// \t\t\ttimesViewed: 1\n\t// \t\t}\n\t// \t}).fetch();\n\t// \tlet dataHigh = Data.Fav.High.find({}, {\n\t// \t\tsort: {\n\t// \t\t\ttimesViewed: 1\n\t// \t\t}\n\t// \t}).fetch();\n\t//\n\t// \tchart.xAxis\n\t// \t\t\t\t\t\t .axisLabel('Tag').tickFormat(d3.format('d'))\n\t// \t\t\t\t\t\t .tickFormat(function(d) {\n\t//                 return d3.time.format('%x')(new Date());\n\t//             });\n\t// \tchart.yAxis.axisLabel('Clicks').tickFormat(d3.format('d'));\n\t//\n\t// \td3.select('#chartLineAttention svg')\n\t// \t\t.datum(\n\t// \t\t\t[{\n\t// \t\t\t\tvalues: dataLow,\n\t// \t\t\t\tkey: 'Low',\n\t// \t\t\t\tcolor: \"#2ca02c\"\n\t// \t\t\t},\n\t// \t\t\t{\n\t// \t\t\t\tvalues: dataHigh,\n\t// \t\t\t\tkey: 'High',\n\t// \t\t\t\tcolor: \"#ff7f0e\"\n\t// \t\t\t}]\n\t// \t\t)\n\t// \t\t.call(chart)\n\t// \t\t;\n\t//\n\t// \tnv.utils.windowResize(chart.update);\n\t//\n\t// \treturn chart;\n\t// });\n\t//\n\t// // update chart when data changes\n\t// this.autorun(function() {\n\t// \tlet dataLow = Data.Fav.Low.find({}, {\n\t// \t\tsort: {\n\t// \t\t\ttimesViewed: 1\n\t// \t\t}\n\t// \t}).fetch();\n\t// \tlet dataHigh = Data.Fav.High.find({}, {\n\t// \t\tsort: {\n\t// \t\t\ttimesViewed: 1\n\t// \t\t}\n\t// \t}).fetch();\n\t//\n\t// \td3.select('#chartLineAttention svg').datum(\n\t// \t\t[{\n\t// \t\t\tvalues: dataLow,\n\t// \t\t\tkey: 'Low',\n\t// \t\t\tcolor: \"#2ca02c\"\n\t// \t\t},\n\t// \t\t{\n\t// \t\t\tvalues: dataHigh,\n\t// \t\t\tkey: 'High',\n\t// \t\t\tcolor: \"#ff7f0e\"\n\t// \t\t}]\n\t// \t).call(chart);\n\t// \tchart.update();\n\t// });\n};","ast":null,"map":{"version":3,"sources":["/client/views/high/stats/charts/chart_line_attention.js"],"names":[],"mappings":"AAAA,SAAS,kBAAT,CAA4B,SAA5B,CAAsC,YAAM;AAC3C,KAAI,WAAW,SAAS,QAAT,EAAX,CADuC;AAE3C,UAAS,SAAT,CAAmB,aAAnB,EAF2C;AAG3C,UAAS,SAAT,CAAmB,YAAnB,EAH2C;CAAN,CAAtC;;AAMA,SAAS,kBAAT,CAA4B,QAA5B,GAAuC,YAAW;;AAEjD,IAAG,QAAH,CAAY,YAAW;AACnB,MAAI,QAAQ,GAAG,MAAH,CAAU,aAAV,GACT,QADS,CACA,GADA,EAET,YAFS,CAEI,IAFJ;GAGT,YAHS,CAGI,CAHJ;GAIT,YAJS,CAII,IAJJ;GAKT,YALS,CAKI,GALJ,CAAR;AAAJ,GADmB;;AASnB,QAAM,KAAN,CACK,UADL,CACgB,GAAG,MAAH,CAAU,IAAV,CADhB,EATmB;;AAYnB,QAAM,KAAN,CACK,UADL,CACgB,GAAG,MAAH,CAAU,MAAV,CADhB,EAZmB;;AAenB,KAAG,MAAH,CAAU,yBAAV,EACK,KADL,CACW,aADX,EAEK,IAFL,CAEU,KAFV,EAfmB;;AAmBnB,KAAG,KAAH,CAAS,YAAT,CAAsB,MAAM,MAAN,CAAtB,CAnBmB;;AAqBnB,SAAO,KAAP,CArBmB;EAAX,CAAZ;;;AAFiD,UA2BxC,WAAT,GAAuB;AACrB,SAAO,KAAK,aAAL,CAAmB,CAAnB,EAAqB,KAAG,KAAK,MAAL,KAAc,GAAd,EAAkB,EAA1C,EAA8C,GAA9C,CAAkD,UAAS,IAAT,EAAe,CAAf,EAAkB;AACzE,UAAO;AACL,SAAK,aAAa,CAAb;AACL,YAAQ,IAAR;IAFF,CADyE;GAAlB,CAAzD,CADqB;EAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA3BiD,CAAX","file":"/client/views/high/stats/charts/chart_line_attention.js.map","sourcesContent":["Template.chartLineAttention.onCreated(() => {\n\tlet template = Template.instance();\n\ttemplate.subscribe('dataFavHigh');\n\ttemplate.subscribe('dataFavLow');\n});\n\nTemplate.chartLineAttention.rendered = function() {\n\n\tnv.addGraph(function() {\n\t    var chart = nv.models.multiBarChart()\n\t      .duration(350)\n\t      .reduceXTicks(true)   //If 'false', every single x-axis tick label will be rendered.\n\t      .rotateLabels(0)      //Angle to rotate x-axis labels.\n\t      .showControls(true)   //Allow user to switch between 'Grouped' and 'Stacked' mode.\n\t      .groupSpacing(0.1)    //Distance between each group of bars.\n\t    ;\n\n\t    chart.xAxis\n\t        .tickFormat(d3.format(',f'));\n\n\t    chart.yAxis\n\t        .tickFormat(d3.format(',.1f'));\n\n\t    d3.select('#chartLineAttention svg')\n\t        .datum(exampleData())\n\t        .call(chart);\n\n\t    nv.utils.windowResize(chart.update);\n\n\t    return chart;\n\t});\n\n\t//Generate some nice data.\n\tfunction exampleData() {\n\t  return NVD3.stream_layers(3,10+Math.random()*100,.1).map(function(data, i) {\n\t    return {\n\t      key: 'Stream #' + i,\n\t      values: data\n\t    };\n\t  });\n\t}\n\n\n\n\t// // chart object\n\t// let chart = nv.models.lineChart()\n\t// \t.margin({\n\t// \t\tleft: 100\n\t// \t}) //Adjust chart margins to give the x-axis some breathing room.\n\t// \t.useInteractiveGuideline(true) //We want nice looking tooltips and a guideline!\n\t// \t.duration(350) //how fast do you want the lines to transition?\n\t// \t.showLegend(true) //Show the legend, allowing users to turn on/off line series.\n\t// \t.showYAxis(true) //Show the y-axis\n\t// \t.showXAxis(true) //Show the x-axis\n\t// ;\n\t//\n\t// // chart details\n\t// nv.addGraph(function() {\n\t// \tlet dataLow = Data.Fav.Low.find({}, {\n\t// \t\tsort: {\n\t// \t\t\ttimesViewed: 1\n\t// \t\t}\n\t// \t}).fetch();\n\t// \tlet dataHigh = Data.Fav.High.find({}, {\n\t// \t\tsort: {\n\t// \t\t\ttimesViewed: 1\n\t// \t\t}\n\t// \t}).fetch();\n\t//\n\t// \tchart.xAxis\n\t// \t\t\t\t\t\t .axisLabel('Tag').tickFormat(d3.format('d'))\n\t// \t\t\t\t\t\t .tickFormat(function(d) {\n\t//                 return d3.time.format('%x')(new Date());\n\t//             });\n\t// \tchart.yAxis.axisLabel('Clicks').tickFormat(d3.format('d'));\n\t//\n\t// \td3.select('#chartLineAttention svg')\n\t// \t\t.datum(\n\t// \t\t\t[{\n\t// \t\t\t\tvalues: dataLow,\n\t// \t\t\t\tkey: 'Low',\n\t// \t\t\t\tcolor: \"#2ca02c\"\n\t// \t\t\t},\n\t// \t\t\t{\n\t// \t\t\t\tvalues: dataHigh,\n\t// \t\t\t\tkey: 'High',\n\t// \t\t\t\tcolor: \"#ff7f0e\"\n\t// \t\t\t}]\n\t// \t\t)\n\t// \t\t.call(chart)\n\t// \t\t;\n\t//\n\t// \tnv.utils.windowResize(chart.update);\n\t//\n\t// \treturn chart;\n\t// });\n\t//\n\t// // update chart when data changes\n\t// this.autorun(function() {\n\t// \tlet dataLow = Data.Fav.Low.find({}, {\n\t// \t\tsort: {\n\t// \t\t\ttimesViewed: 1\n\t// \t\t}\n\t// \t}).fetch();\n\t// \tlet dataHigh = Data.Fav.High.find({}, {\n\t// \t\tsort: {\n\t// \t\t\ttimesViewed: 1\n\t// \t\t}\n\t// \t}).fetch();\n\t//\n\t// \td3.select('#chartLineAttention svg').datum(\n\t// \t\t[{\n\t// \t\t\tvalues: dataLow,\n\t// \t\t\tkey: 'Low',\n\t// \t\t\tcolor: \"#2ca02c\"\n\t// \t\t},\n\t// \t\t{\n\t// \t\t\tvalues: dataHigh,\n\t// \t\t\tkey: 'High',\n\t// \t\t\tcolor: \"#ff7f0e\"\n\t// \t\t}]\n\t// \t).call(chart);\n\t// \tchart.update();\n\t// });\n}\n"]},"hash":"fa246e43b7aab76c97f1995ab5e3f8fc9f6c5d21"}
