{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\n\n/*\n  Apparently, the new api.export takes care of issues here. No need to attach to global namespace.\n  See http://shiggyenterprises.wordpress.com/2013/09/09/meteor-packages-in-coffeescript-0-6-5/\n\n  We may want to make UserSessions a server collection to take advantage of indices.\n  Will implement if someone has enough online users to warrant it.\n */\nvar UserConnections, activeSession, addSession, idleSession, loginSession, onStartup, removeSession, statusEvents, tryLogoutSession;                             \n\nUserConnections = new Mongo.Collection(\"user_status_sessions\", {\n  connection: null\n});\n\nstatusEvents = new (Npm.require('events').EventEmitter)();\n\n\n/*\n  Multiplex login/logout events to status.online\n\n  'online' field is \"true\" if user is online, and \"false\" otherwise\n\n  'idle' field is tri-stated:\n  - \"true\" if user is online and not idle\n  - \"false\" if user is online and idle\n  - null if user is offline\n */\n\nstatusEvents.on(\"connectionLogin\", function(advice) {\n  var conns, update;\n  update = {\n    $set: {\n      'status.online': true,\n      'status.lastLogin': {\n        date: advice.loginTime,\n        ipAddr: advice.ipAddr,\n        userAgent: advice.userAgent\n      }\n    }\n  };\n  conns = UserConnections.find({\n    userId: advice.userId\n  }).fetch();\n  if (!_.every(conns, function(c) {\n    return c.idle;\n  })) {\n    update.$set['status.idle'] = false;\n    update.$unset = {\n      'status.lastActivity': null\n    };\n  }\n  Meteor.users.update(advice.userId, update);\n});\n\nstatusEvents.on(\"connectionLogout\", function(advice) {\n  var conns;\n  conns = UserConnections.find({\n    userId: advice.userId\n  }).fetch();\n  if (conns.length === 0) {\n    Meteor.users.update(advice.userId, {\n      $set: {\n        'status.online': false\n      },\n      $unset: {\n        'status.idle': null,\n        'status.lastActivity': null\n      }\n    });\n  } else if (_.every(conns, function(c) {\n    return c.idle;\n  })) {\n\n    /*\n      All remaining connections are idle:\n      - If the last active connection quit, then we should go idle with the most recent activity\n    \n      - If an idle connection quit, nothing should happen; specifically, if the\n        most recently active idle connection quit, we shouldn't tick the value backwards.\n        This may result in a no-op so we can be smart and skip the update.\n     */\n    if (advice.lastActivity != null) {\n      return;\n    }\n    Meteor.users.update(advice.userId, {\n      $set: {\n        'status.idle': true,\n        'status.lastActivity': _.max(_.pluck(conns, \"lastActivity\"))\n      }\n    });\n  }\n});\n\n\n/*\n  Multiplex idle/active events to status.idle\n  TODO: Hopefully this is quick because it's all in memory, but we can use indices if it turns out to be slow\n\n  TODO: There is a race condition when switching between tabs, leaving the user inactive while idle goes from one tab to the other.\n  It can probably be smoothed out.\n */\n\nstatusEvents.on(\"connectionIdle\", function(advice) {\n  var conns;\n  conns = UserConnections.find({\n    userId: advice.userId\n  }).fetch();\n  if (!_.every(conns, function(c) {\n    return c.idle;\n  })) {\n    return;\n  }\n  Meteor.users.update(advice.userId, {\n    $set: {\n      'status.idle': true,\n      'status.lastActivity': _.max(_.pluck(conns, \"lastActivity\"))\n    }\n  });\n});\n\nstatusEvents.on(\"connectionActive\", function(advice) {\n  Meteor.users.update(advice.userId, {\n    $set: {\n      'status.idle': false\n    },\n    $unset: {\n      'status.lastActivity': null\n    }\n  });\n});\n\nonStartup = function(selector) {\n  if (selector == null) {\n    selector = {};\n  }\n  return Meteor.users.update(selector, {\n    $set: {\n      \"status.online\": false\n    },\n    $unset: {\n      \"status.idle\": null,\n      \"status.lastActivity\": null\n    }\n  }, {\n    multi: true\n  });\n};\n\n\n/*\n  Local session modifification functions - also used in testing\n */\n\naddSession = function(connection) {\n  UserConnections.upsert(connection.id, {\n    $set: {\n      ipAddr: connection.clientAddress,\n      userAgent: connection.httpHeaders['user-agent']\n    }\n  });\n};\n\nloginSession = function(connection, date, userId) {\n  UserConnections.upsert(connection.id, {\n    $set: {\n      userId: userId,\n      loginTime: date\n    }\n  });\n  statusEvents.emit(\"connectionLogin\", {\n    userId: userId,\n    connectionId: connection.id,\n    ipAddr: connection.clientAddress,\n    userAgent: connection.httpHeaders['user-agent'],\n    loginTime: date\n  });\n};\n\ntryLogoutSession = function(connection, date) {\n  var conn;\n  if ((conn = UserConnections.findOne({\n    _id: connection.id,\n    userId: {\n      $exists: true\n    }\n  })) == null) {\n    return false;\n  }\n  UserConnections.upsert(connection.id, {\n    $unset: {\n      userId: null,\n      loginTime: null\n    }\n  });\n  return statusEvents.emit(\"connectionLogout\", {\n    userId: conn.userId,\n    connectionId: connection.id,\n    lastActivity: conn.lastActivity,\n    logoutTime: date\n  });\n};\n\nremoveSession = function(connection, date) {\n  tryLogoutSession(connection, date);\n  UserConnections.remove(connection.id);\n};\n\nidleSession = function(connection, date, userId) {\n  UserConnections.update(connection.id, {\n    $set: {\n      idle: true,\n      lastActivity: date\n    }\n  });\n  statusEvents.emit(\"connectionIdle\", {\n    userId: userId,\n    connectionId: connection.id,\n    lastActivity: date\n  });\n};\n\nactiveSession = function(connection, date, userId) {\n  UserConnections.update(connection.id, {\n    $set: {\n      idle: false\n    },\n    $unset: {\n      lastActivity: null\n    }\n  });\n  statusEvents.emit(\"connectionActive\", {\n    userId: userId,\n    connectionId: connection.id,\n    lastActivity: date\n  });\n};\n\n\n/*\n  Handlers for various client-side events\n */\n\nMeteor.startup(onStartup);\n\nMeteor.onConnection(function(connection) {\n  addSession(connection);\n  return connection.onClose(function() {\n    return removeSession(connection, new Date());\n  });\n});\n\nAccounts.onLogin(function(info) {\n  return loginSession(info.connection, new Date(), info.user._id);\n});\n\nMeteor.publish(null, function() {\n  if (this._session == null) {\n    return [];\n  }\n  if (this.userId == null) {\n    tryLogoutSession(this._session.connectionHandle, new Date());\n  }\n  return [];\n});\n\nMeteor.methods({\n  \"user-status-idle\": function(timestamp) {\n    var date;\n    check(timestamp, Match.OneOf(null, void 0, Date, Number));\n    date = timestamp != null ? new Date(timestamp) : new Date();\n    idleSession(this.connection, date, this.userId);\n  },\n  \"user-status-active\": function(timestamp) {\n    var date;\n    check(timestamp, Match.OneOf(null, void 0, Date, Number));\n    date = timestamp != null ? new Date(timestamp) : new Date();\n    activeSession(this.connection, date, this.userId);\n  }\n});\n\nUserStatus = {\n  connections: UserConnections,\n  events: statusEvents\n};\n\nStatusInternals = {\n  onStartup: onStartup,\n  addSession: addSession,\n  removeSession: removeSession,\n  loginSession: loginSession,\n  tryLogoutSession: tryLogoutSession,\n  idleSession: idleSession,\n  activeSession: activeSession\n};\n","sourceMap":{"version":3,"file":"/status.coffee.js","sourceRoot":"","sources":["/packages/mizzao_user-status/status.coffee"],"names":[],"mappings":"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","sourcesContent":["###\n  Apparently, the new api.export takes care of issues here. No need to attach to global namespace.\n  See http://shiggyenterprises.wordpress.com/2013/09/09/meteor-packages-in-coffeescript-0-6-5/\n\n  We may want to make UserSessions a server collection to take advantage of indices.\n  Will implement if someone has enough online users to warrant it.\n###\nUserConnections = new Mongo.Collection(\"user_status_sessions\", { connection: null })\n\nstatusEvents = new (Npm.require('events').EventEmitter)()\n\n###\n  Multiplex login/logout events to status.online\n\n  'online' field is \"true\" if user is online, and \"false\" otherwise\n\n  'idle' field is tri-stated:\n  - \"true\" if user is online and not idle\n  - \"false\" if user is online and idle\n  - null if user is offline\n###\nstatusEvents.on \"connectionLogin\", (advice) ->\n  update =\n    $set: {\n      'status.online': true,\n      'status.lastLogin': {\n        date: advice.loginTime\n        ipAddr: advice.ipAddr\n        userAgent: advice.userAgent\n      }\n    }\n\n  # unless ALL existing connections are idle (including this new one),\n  # the user connection becomes active.\n  conns = UserConnections.find(userId: advice.userId).fetch()\n  unless _.every(conns, (c) -> c.idle)\n    update.$set['status.idle'] = false\n    update.$unset =\n      'status.lastActivity': null\n  # in other case, idle field remains true and no update to lastActivity.\n\n  Meteor.users.update advice.userId, update\n  return\n\nstatusEvents.on \"connectionLogout\", (advice) ->\n  conns = UserConnections.find(userId: advice.userId).fetch()\n  if conns.length is 0\n    # Go offline if we are the last connection for this user\n    # This includes removing all idle information\n    Meteor.users.update advice.userId,\n      $set: {'status.online': false }\n      $unset:\n        'status.idle': null\n        'status.lastActivity': null\n  else if _.every(conns, (c) -> c.idle)\n    ###\n      All remaining connections are idle:\n      - If the last active connection quit, then we should go idle with the most recent activity\n\n      - If an idle connection quit, nothing should happen; specifically, if the\n        most recently active idle connection quit, we shouldn't tick the value backwards.\n        This may result in a no-op so we can be smart and skip the update.\n    ###\n    return if advice.lastActivity? # The dropped connection was already idle\n\n    Meteor.users.update advice.userId,\n      $set:\n        'status.idle': true\n        'status.lastActivity': _.max(_.pluck conns, \"lastActivity\")\n  return\n\n###\n  Multiplex idle/active events to status.idle\n  TODO: Hopefully this is quick because it's all in memory, but we can use indices if it turns out to be slow\n\n  TODO: There is a race condition when switching between tabs, leaving the user inactive while idle goes from one tab to the other.\n  It can probably be smoothed out.\n###\nstatusEvents.on \"connectionIdle\", (advice) ->\n  conns = UserConnections.find(userId: advice.userId).fetch()\n  return unless _.every(conns, (c) -> c.idle)\n  # Set user to idle if all the connections are idle\n  # This will not be the most recent idle across a disconnection, so we use max\n\n  # TODO: the race happens here where everyone was idle when we looked for them but now one of them isn't.\n  Meteor.users.update advice.userId,\n    $set:\n      'status.idle': true\n      'status.lastActivity': _.max(_.pluck conns, \"lastActivity\")\n  return\n\nstatusEvents.on \"connectionActive\", (advice) ->\n  Meteor.users.update advice.userId,\n    $set:\n      'status.idle': false\n    $unset:\n      'status.lastActivity': null\n  return\n\n# Reset online status on startup (users will reconnect)\nonStartup = (selector = {}) ->\n  Meteor.users.update selector,\n    {\n      $set: {\n        \"status.online\": false\n      },\n      $unset: {\n        \"status.idle\": null\n        \"status.lastActivity\": null\n      }\n    },\n    { multi: true }\n\n###\n  Local session modifification functions - also used in testing\n###\n\naddSession = (connection) ->\n  UserConnections.upsert connection.id,\n    $set: {\n      ipAddr: connection.clientAddress\n      userAgent: connection.httpHeaders['user-agent']\n    }\n  return\n\nloginSession = (connection, date, userId) ->\n  UserConnections.upsert connection.id,\n    $set: {\n      userId: userId\n      loginTime: date\n    }\n\n  statusEvents.emit \"connectionLogin\",\n    userId: userId\n    connectionId: connection.id\n    ipAddr: connection.clientAddress\n    userAgent: connection.httpHeaders['user-agent']\n    loginTime: date\n  return\n\n# Possibly trigger a logout event if this connection was previously associated with a user ID\ntryLogoutSession = (connection, date) ->\n  return false unless (conn = UserConnections.findOne({\n    _id: connection.id\n    userId: { $exists: true }\n  }))?\n\n  # Yes, this is actually a user logging out.\n  UserConnections.upsert connection.id,\n    $unset: {\n      userId: null\n      loginTime: null\n    }\n\n  statusEvents.emit \"connectionLogout\",\n    userId: conn.userId\n    connectionId: connection.id\n    lastActivity: conn.lastActivity # If this connection was idle, pass the last activity we saw\n    logoutTime: date\n\nremoveSession = (connection, date) ->\n  tryLogoutSession(connection, date)\n  UserConnections.remove(connection.id)\n  return\n\nidleSession = (connection, date, userId) ->\n  UserConnections.update connection.id,\n    $set: {\n      idle: true\n      lastActivity: date\n    }\n\n  statusEvents.emit \"connectionIdle\",\n    userId: userId\n    connectionId: connection.id\n    lastActivity: date\n  return\n\nactiveSession = (connection, date, userId) ->\n  UserConnections.update connection.id,\n    $set: { idle: false }\n    $unset: { lastActivity: null }\n\n  statusEvents.emit \"connectionActive\",\n    userId: userId\n    connectionId: connection.id\n    lastActivity: date\n  return\n\n###\n  Handlers for various client-side events\n###\nMeteor.startup(onStartup)\n\n# Opening and closing of DDP connections\nMeteor.onConnection (connection) ->\n  addSession(connection)\n\n  connection.onClose ->\n    removeSession(connection, new Date())\n\n# Authentication of a DDP connection\nAccounts.onLogin (info) ->\n  loginSession(info.connection, new Date(), info.user._id)\n\n# pub/sub trick as referenced in http://stackoverflow.com/q/10257958/586086\n# We used this in the past, but still need this to detect logouts on the same connection.\nMeteor.publish null, ->\n  # Return null explicitly if this._session is not available, i.e.:\n  # https://github.com/arunoda/meteor-fast-render/issues/41\n  return [] unless @_session?\n\n  # We're interested in logout events - re-publishes for which a past connection exists\n  tryLogoutSession(@_session.connectionHandle, new Date()) unless @userId?\n\n  return []\n\n# We can use the client's timestamp here because it was sent from a TimeSync\n# value, however we should never trust it for something security dependent.\n# If timestamp is not provided (probably due to a desync), use server time.\nMeteor.methods\n  \"user-status-idle\": (timestamp) ->\n    check(timestamp, Match.OneOf(null, undefined, Date, Number) )\n\n    date = if timestamp? then new Date(timestamp) else new Date()\n    idleSession(@connection, date, @userId)\n    return\n\n  \"user-status-active\": (timestamp) ->\n    check(timestamp, Match.OneOf(null, undefined, Date, Number) )\n\n    # We only use timestamp because it's when we saw activity *on the client*\n    # as opposed to just being notified it. It is probably more accurate even if\n    # a dozen ms off due to the latency of sending it to the server.\n    date = if timestamp? then new Date(timestamp) else new Date()\n    activeSession(@connection, date, @userId)\n    return\n\n# Exported variable\nUserStatus =\n  connections: UserConnections\n  events: statusEvents\n\n# Internal functions, exported for testing\nStatusInternals = {\n  onStartup,\n  addSession,\n  removeSession,\n  loginSession,\n  tryLogoutSession,\n  idleSession,\n  activeSession,\n}\n"]}}