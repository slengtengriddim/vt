{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\n\n/*\n  The idle monitor watches for mouse, keyboard, and blur events,\n  and reports idle status to the server.\n\n  It uses TimeSync to report accurate time.\n\n  Everything is reactive, of course!\n */\nvar activityDep, focused, idle, idleDep, isIdle, isMonitoring, lastActivity, lastActivityTime, monitor, monitorDep, monitorId, start, stop, touch;                              \n\nmonitorId = null;\n\nidle = false;\n\nlastActivityTime = void 0;\n\nmonitorDep = new Deps.Dependency;\n\nidleDep = new Deps.Dependency;\n\nactivityDep = new Deps.Dependency;\n\nfocused = true;\n\nMonitorInternals = {\n  idleThreshold: null,\n  idleOnBlur: false,\n  computeState: function(lastActiveTime, currentTime, isWindowFocused) {\n    var inactiveTime;\n    inactiveTime = currentTime - lastActiveTime;\n    if (MonitorInternals.idleOnBlur && !isWindowFocused) {\n      return true;\n    }\n    if (inactiveTime > MonitorInternals.idleThreshold) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  connectionChange: function(isConnected, wasConnected) {\n    if (isConnected && !wasConnected && idle) {\n      return MonitorInternals.reportIdle(lastActivityTime);\n    }\n  },\n  onWindowBlur: function() {\n    focused = false;\n    return monitor();\n  },\n  onWindowFocus: function() {\n    focused = true;\n    return monitor(true);\n  },\n  reportIdle: function(time) {\n    return Meteor.call(\"user-status-idle\", time);\n  },\n  reportActive: function(time) {\n    return Meteor.call(\"user-status-active\", time);\n  }\n};\n\nstart = function(settings) {\n  var interval;\n  if (!TimeSync.isSynced()) {\n    throw new Error(\"Can't start idle monitor until synced to server\");\n  }\n  if (monitorId) {\n    throw new Error(\"Idle monitor is already active. Stop it first.\");\n  }\n  settings = settings || {};\n  MonitorInternals.idleThreshold = settings.threshold || 60000;\n  interval = Math.max(settings.interval || 1000, 1000);\n  MonitorInternals.idleOnBlur = settings.idleOnBlur != null ? settings.idleOnBlur : false;\n  monitorId = Meteor.setInterval(monitor, interval);\n  monitorDep.changed();\n  if (lastActivityTime == null) {\n    lastActivityTime = Deps.nonreactive(function() {\n      return TimeSync.serverTime();\n    });\n    activityDep.changed();\n  }\n  monitor();\n};\n\nstop = function() {\n  if (!monitorId) {\n    throw new Error(\"Idle monitor is not running.\");\n  }\n  Meteor.clearInterval(monitorId);\n  monitorId = null;\n  lastActivityTime = void 0;\n  monitorDep.changed();\n  if (idle) {\n    idle = false;\n    idleDep.changed();\n    MonitorInternals.reportActive(Deps.nonreactive(function() {\n      return TimeSync.serverTime();\n    }));\n  }\n};\n\nmonitor = function(setAction) {\n  var currentTime, newIdle;\n  if (!monitorId) {\n    return;\n  }\n  currentTime = Deps.nonreactive(function() {\n    return TimeSync.serverTime();\n  });\n  if (currentTime == null) {\n    return;\n  }\n  if (setAction && (focused || !MonitorInternals.idleOnBlur)) {\n    lastActivityTime = currentTime;\n    activityDep.changed();\n  }\n  newIdle = MonitorInternals.computeState(lastActivityTime, currentTime, focused);\n  if (newIdle !== idle) {\n    idle = newIdle;\n    idleDep.changed();\n  }\n};\n\ntouch = function() {\n  if (!monitorId) {\n    Meteor._debug(\"Cannot touch as idle monitor is not running.\");\n    return;\n  }\n  return monitor(true);\n};\n\nisIdle = function() {\n  idleDep.depend();\n  return idle;\n};\n\nisMonitoring = function() {\n  monitorDep.depend();\n  return monitorId != null;\n};\n\nlastActivity = function() {\n  if (!isMonitoring()) {\n    return;\n  }\n  activityDep.depend();\n  return lastActivityTime;\n};\n\nMeteor.startup(function() {\n  var wasConnected;\n  $(window).on(\"click keydown\", function() {\n    return monitor(true);\n  });\n  $(window).blur(MonitorInternals.onWindowBlur);\n  $(window).focus(MonitorInternals.onWindowFocus);\n  if (Meteor.isCordova) {\n    document.addEventListener(\"pause\", MonitorInternals.onWindowBlur);\n    document.addEventListener(\"resume\", MonitorInternals.onWindowFocus);\n  }\n  focused = document.hasFocus();\n  Deps.autorun(function() {\n    if (!isMonitoring()) {\n      return;\n    }\n    if (isIdle()) {\n      MonitorInternals.reportIdle(lastActivityTime);\n    } else {\n      MonitorInternals.reportActive(lastActivityTime);\n    }\n  });\n  wasConnected = Meteor.status().connected;\n  return Deps.autorun(function() {\n    var connected;\n    connected = Meteor.status().connected;\n    MonitorInternals.connectionChange(connected, wasConnected);\n    wasConnected = connected;\n  });\n});\n\nUserStatus = {\n  startMonitor: start,\n  stopMonitor: stop,\n  pingMonitor: touch,\n  isIdle: isIdle,\n  isMonitoring: isMonitoring,\n  lastActivity: lastActivity\n};\n","sourceMap":{"version":3,"file":"/monitor.coffee.js","sourceRoot":"","sources":["/packages/mizzao_user-status/monitor.coffee"],"names":[],"mappings":"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","sourcesContent":["###\n  The idle monitor watches for mouse, keyboard, and blur events,\n  and reports idle status to the server.\n\n  It uses TimeSync to report accurate time.\n\n  Everything is reactive, of course!\n###\n\n# State variables\nmonitorId = null\nidle = false\nlastActivityTime = undefined\n\nmonitorDep = new Deps.Dependency\nidleDep = new Deps.Dependency\nactivityDep = new Deps.Dependency\n\nfocused = true\n\n# These settings are internal or exported for test only\nMonitorInternals = {\n  idleThreshold: null\n  idleOnBlur: false\n\n  computeState: (lastActiveTime, currentTime, isWindowFocused) ->\n    inactiveTime = currentTime - lastActiveTime\n    return true if MonitorInternals.idleOnBlur and not isWindowFocused\n    return if (inactiveTime > MonitorInternals.idleThreshold) then true else false\n\n  connectionChange: (isConnected, wasConnected) ->\n    # We only need to do something if we reconnect and we are idle\n    # Don't get idle status reactively, as this function only\n    # takes care of reconnect status and doesn't care if it changes.\n\n    # Note that userId does not change during a resume login, as designed by Meteor.\n    # However, the idle state is tied to the connection and not the userId.\n    if isConnected and !wasConnected and idle\n      MonitorInternals.reportIdle(lastActivityTime)\n\n  onWindowBlur: ->\n    focused = false\n    monitor()\n\n  onWindowFocus: ->\n    focused = true\n    # Focusing should count as an action, otherwise \"active\" event may be\n    # triggered at some point in the past!\n    monitor(true)\n\n  reportIdle: (time) ->\n    Meteor.call \"user-status-idle\", time\n\n  reportActive: (time) ->\n    Meteor.call \"user-status-active\", time\n\n}\n\nstart = (settings) ->\n  throw new Error(\"Can't start idle monitor until synced to server\") unless TimeSync.isSynced()\n  throw new Error(\"Idle monitor is already active. Stop it first.\") if monitorId\n\n  settings = settings || {}\n\n  # The amount of time before a user is marked idle\n  MonitorInternals.idleThreshold = settings.threshold || 60000\n\n  # Don't check too quickly; it doesn't matter anyway: http://stackoverflow.com/q/15871942/586086\n  interval = Math.max(settings.interval || 1000, 1000)\n\n  # Whether blurring the window should immediately cause the user to go idle\n  MonitorInternals.idleOnBlur = if settings.idleOnBlur? then settings.idleOnBlur else false\n\n  # Set new monitoring interval\n  monitorId = Meteor.setInterval(monitor, interval)\n  monitorDep.changed()\n\n  # Reset last activity; can't count inactivity from some arbitrary time\n  unless lastActivityTime?\n    lastActivityTime = Deps.nonreactive -> TimeSync.serverTime()\n    activityDep.changed()\n\n  monitor()\n  return\n\nstop = ->\n  throw new Error(\"Idle monitor is not running.\") unless monitorId\n\n  Meteor.clearInterval(monitorId)\n  monitorId = null\n  lastActivityTime = undefined # If monitor started again, we shouldn't re-use this time\n  monitorDep.changed()\n\n  if idle # Un-set any idleness\n    idle = false\n    idleDep.changed()\n    # need to run this because the Deps below won't re-run when monitor is off\n    MonitorInternals.reportActive( Deps.nonreactive -> TimeSync.serverTime() )\n\n  return\n\nmonitor = (setAction) ->\n  # Ignore focus/blur events when we aren't monitoring\n  return unless monitorId\n\n  # We use setAction here to not have to call serverTime twice. Premature optimization?\n  currentTime = Deps.nonreactive -> TimeSync.serverTime()\n  # Can't monitor if we haven't synced with server yet, or lost our sync.\n  return unless currentTime?\n\n  # Update action as long as we're not blurred and idling on blur\n  # We ignore actions that happen while a client is blurred, if idleOnBlur is set.\n  if setAction and (focused or !MonitorInternals.idleOnBlur)\n    lastActivityTime = currentTime\n    activityDep.changed()\n\n  newIdle = MonitorInternals.computeState(lastActivityTime, currentTime, focused)\n\n  if newIdle isnt idle\n    idle = newIdle\n    idleDep.changed()\n  return\n\ntouch = ->\n  unless monitorId\n    Meteor._debug(\"Cannot touch as idle monitor is not running.\")\n    return\n  monitor(true) # Check for an idle state change right now\n\nisIdle = ->\n  idleDep.depend()\n  return idle\n\nisMonitoring = ->\n  monitorDep.depend()\n  return monitorId?\n\nlastActivity = ->\n  return unless isMonitoring()\n  activityDep.depend()\n  return lastActivityTime\n\nMeteor.startup ->\n  # Listen for mouse and keyboard events on window\n  # TODO other stuff - e.g. touch events?\n  $(window).on \"click keydown\", -> monitor(true)\n\n  # catch window blur events when requested and where supported\n  # We'll use jQuery here instead of window.blur so that other code can attach blur events:\n  # http://stackoverflow.com/q/22415296/586086\n  $(window).blur MonitorInternals.onWindowBlur\n  $(window).focus MonitorInternals.onWindowFocus\n\n  # Catch Cordova \"pause\" and \"resume\" events:\n  # https://github.com/mizzao/meteor-user-status/issues/47\n  if Meteor.isCordova\n    document.addEventListener \"pause\", MonitorInternals.onWindowBlur\n    document.addEventListener \"resume\", MonitorInternals.onWindowFocus\n\n  # First check initial state if window loaded while blurred\n  # Some browsers don't fire focus on load: http://stackoverflow.com/a/10325169/586086\n  focused = document.hasFocus()\n\n  # Report idle status whenever connection changes\n  Deps.autorun ->\n    # Don't report idle state unless we're monitoring\n    return unless isMonitoring()\n\n    # XXX These will buffer across a disconnection - do we want that?\n    # The idle report will result in a duplicate message (with below)\n    # The active report will result in a null op.\n    if isIdle()\n      MonitorInternals.reportIdle(lastActivityTime)\n    else\n      # If we were inactive, report that we are active again to the server\n      MonitorInternals.reportActive(lastActivityTime)\n    return\n\n  # If we reconnect and we were idle, make sure we send that upstream\n  wasConnected = Meteor.status().connected\n  Deps.autorun ->\n    connected = Meteor.status().connected\n    MonitorInternals.connectionChange(connected, wasConnected)\n\n    wasConnected = connected\n    return\n\n# export functions for starting and stopping idle monitor\nUserStatus = {\n  startMonitor: start\n  stopMonitor: stop\n  pingMonitor: touch\n  isIdle: isIdle\n  isMonitoring: isMonitoring\n  lastActivity: lastActivity\n}\n\n"]}}