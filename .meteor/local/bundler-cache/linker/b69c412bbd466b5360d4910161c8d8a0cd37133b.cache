[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar FlowRouter = Package['kadira:flow-router'].FlowRouter;\nvar BlazeLayout = Package['kadira:blaze-layout'].BlazeLayout;\nvar ActiveRoute = Package['zimme:active-route'].ActiveRoute;\nvar Roles = Package['alanning:roles'].Roles;\nvar Helpers = Package['raix:handlebar-helpers'].Helpers;\nvar moment = Package['momentjs:moment'].moment;\nvar Tabular = Package['aldeed:tabular'].Tabular;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Email = Package.email.Email;\nvar EmailInternals = Package.email.EmailInternals;\nvar Collection2 = Package['aldeed:collection2-core'].Collection2;\nvar SimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nvar MongoObject = Package['aldeed:simple-schema'].MongoObject;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\n\n/* Package-scope variables */\nvar __coffeescriptShare, AdminDashboard;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/sach_flow-db-admin/lib/both/AdminDashboard.coffee.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\n                                                                                                                       // 1\n                                                                                                                       //\nAdminDashboard = {                                                                                                     // 1\n  schemas: {},                                                                                                         // 2\n  sidebarItems: [],                                                                                                    // 2\n  collectionItems: [],                                                                                                 // 2\n  alertSuccess: function(message) {                                                                                    // 2\n    Session.set('adminError', null);                                                                                   // 6\n    return Session.set('adminSuccess', message);                                                                       //\n  },                                                                                                                   //\n  alertFailure: function(message) {                                                                                    // 2\n    Session.set('adminSuccess', null);                                                                                 // 9\n    return Session.set('adminError', message);                                                                         //\n  },                                                                                                                   //\n  checkAdmin: function() {                                                                                             // 2\n    if (!Roles.userIsInRole(Meteor.userId(), ['admin'])) {                                                             // 13\n      Meteor.call('adminCheckAdmin');                                                                                  // 14\n      if (typeof (typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.nonAdminRedirectRoute : void 0) === \"string\") {\n        Router.go(AdminConfig.nonAdminRedirectRoute);                                                                  // 16\n      }                                                                                                                //\n    }                                                                                                                  //\n    if (typeof this.next === 'function') {                                                                             // 17\n      return this.next();                                                                                              //\n    }                                                                                                                  //\n  },                                                                                                                   //\n  adminRoutes: ['adminDashboard', 'adminDashboardUsersNew', 'adminDashboardUsersEdit', 'adminDashboardView', 'adminDashboardNew', 'adminDashboardEdit'],\n  collectionLabel: function(collection) {                                                                              // 2\n    if (collection === 'Users') {                                                                                      // 21\n      return 'Users';                                                                                                  //\n    } else if ((collection != null) && typeof AdminConfig.collections[collection].label === 'string') {                //\n      return AdminConfig.collections[collection].label;                                                                //\n    } else {                                                                                                           //\n      return Session.get('admin_collection_name');                                                                     //\n    }                                                                                                                  //\n  },                                                                                                                   //\n  addSidebarItem: function(title, url, options) {                                                                      // 2\n    var item;                                                                                                          // 28\n    item = {                                                                                                           // 28\n      title: title                                                                                                     // 28\n    };                                                                                                                 //\n    if (_.isObject(url) && typeof options === 'undefined') {                                                           // 29\n      item.options = url;                                                                                              // 30\n    } else {                                                                                                           //\n      item.url = url;                                                                                                  // 32\n      item.options = options;                                                                                          // 32\n    }                                                                                                                  //\n    return this.sidebarItems.push(item);                                                                               //\n  },                                                                                                                   //\n  extendSidebarItem: function(title, urls) {                                                                           // 2\n    var existing;                                                                                                      // 38\n    if (_.isObject(urls)) {                                                                                            // 38\n      urls = [urls];                                                                                                   // 38\n    }                                                                                                                  //\n    existing = _.find(this.sidebarItems, function(item) {                                                              // 38\n      return item.title === title;                                                                                     //\n    });                                                                                                                //\n    if (existing) {                                                                                                    // 41\n      return existing.options.urls = _.union(existing.options.urls, urls);                                             //\n    }                                                                                                                  //\n  },                                                                                                                   //\n  addCollectionItem: function(fn) {                                                                                    // 2\n    return this.collectionItems.push(fn);                                                                              //\n  },                                                                                                                   //\n  path: function(s) {                                                                                                  // 2\n    var path;                                                                                                          // 48\n    path = '/admin';                                                                                                   // 48\n    if (typeof s === 'string' && s.length > 0) {                                                                       // 49\n      path += (s[0] === '/' ? '' : '/') + s;                                                                           // 50\n    }                                                                                                                  //\n    return path;                                                                                                       //\n  }                                                                                                                    //\n};                                                                                                                     //\n                                                                                                                       //\nAdminDashboard.schemas.newUser = new SimpleSchema({                                                                    // 1\n  email: {                                                                                                             // 55\n    type: String,                                                                                                      // 56\n    label: \"Email address\"                                                                                             // 56\n  },                                                                                                                   //\n  chooseOwnPassword: {                                                                                                 // 55\n    type: Boolean,                                                                                                     // 59\n    label: 'Let this user choose their own password with an email',                                                    // 59\n    defaultValue: true                                                                                                 // 59\n  },                                                                                                                   //\n  password: {                                                                                                          // 55\n    type: String,                                                                                                      // 63\n    label: 'Password',                                                                                                 // 63\n    optional: true                                                                                                     // 63\n  },                                                                                                                   //\n  sendPassword: {                                                                                                      // 55\n    type: Boolean,                                                                                                     // 67\n    label: 'Send this user their password by email',                                                                   // 67\n    optional: true                                                                                                     // 67\n  }                                                                                                                    //\n});                                                                                                                    //\n                                                                                                                       //\nAdminDashboard.schemas.sendResetPasswordEmail = new SimpleSchema({                                                     // 1\n  _id: {                                                                                                               // 72\n    type: String                                                                                                       // 73\n  }                                                                                                                    //\n});                                                                                                                    //\n                                                                                                                       //\nAdminDashboard.schemas.changePassword = new SimpleSchema({                                                             // 1\n  _id: {                                                                                                               // 76\n    type: String                                                                                                       // 77\n  },                                                                                                                   //\n  password: {                                                                                                          // 76\n    type: String                                                                                                       // 79\n  }                                                                                                                    //\n});                                                                                                                    //\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/sach_flow-db-admin/lib/both/routes.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\nvar fadminRoutes = FlowRouter.group({\n  name: \"AdminController\",\n  prefix: '/admin',\n  subscriptions: function() {\n    this.register('fadminUsers', Meteor.subscribe('adminUsers'));\n    this.register('fadminUser', Meteor.subscribe('adminUser'));\n    this.register('fadminCollectionsCount', Meteor.subscribe('adminCollectionsCount'));\n  },\n triggersEnter: [\n  \tfunction(context) {\n  \t\tif(!Roles.userIsInRole (Meteor.userId(),['admin']))\n  \t\t{\n  \t\t\tMeteor.call('adminCheckAdmin');\n  \t\t\t//if (typeof AdminConfig.nonAdminRedirectRoute == 'string')\n  \t\t\t//\tFlowRouter.go(AdminController.nonAdminRedirectRoute);\n  \t\t}\n  \t},\n    function(context) {\n      Session.set('adminSuccess', null);\n      Session.set('adminError', null);\n      Session.set('admin_title', null);\n      Session.set('admin_subtitle', null);\n      Session.set('admin_collection_name', null);\n      Session.set('admin_collection_page', null);\n      Session.set('admin_id',null);\n      Session.set('admin_doc', null);\n    }\n  ]\n});\n\nfadminRoutes.route('/',{\n\tname: 'adminDashboard',\n\ttriggersEnter: [\n\t function(context){\n\t \tSession.set('admin_title',\"Dashboard\");\n\t \tSession.set('admin_collection_name',\"\");\n\t \tSession.set('admin_collection_page',\"\");\n\t }\n\t],\n\taction: function ()\n\t{\n\t\tBlazeLayout.render('fAdminLayout', {main: 'AdminDashboard'});\n\t}\n});\n\n\nfadminRoutes.route('/view/:collectionName',{\n\ttriggersEnter: [\n\t\tfunction(context){\n\t\tSession.set('admin_title', context.params.collectionName);\n\t\tSession.set('admin_subtitle', 'View');\n\t\tSession.set('admin_collection_page', 'view');\n\t\tSession.set('admin_collection_name', context.params.collectionName);\n\t}],\n\ttriggersExit: [\n\t\tfunction(context){\n\t\t\tBlazeLayout.render('fAdminLayout',{main: 'AdminLoading'});\n\t\t}\n\t],\n\taction: function(params)\n\t{\n\t\tBlazeLayout.render('fAdminLayout',{main: 'AdminDashboardView'});\n\t}\n});\n\nfadminRoutes.route('/new/:collectionName',{\n\ttriggersEnter: [function(context){\n\t\tSession.set('admin_title', context.params.collectionName);\n\t\tSession.set('admin_subtitle', 'Create New');\n\t\tSession.set('admin_collection_page', 'new');\n\t\tSession.set('admin_collection_name', context.params.collectionName);\n\t}],\n\ttriggersExit: [\n\t\tfunction(context){\n\t\t\tBlazeLayout.render('fAdminLayout',{main: 'AdminLoading'});\n\t\t}\n\t],\n\taction: function(params)\n\t{\tif(params.collectionName == 'Users')\n\t\t\tBlazeLayout.render('fAdminLayout',{main: 'AdminDashboardUsersNew'});\n\t\telse\n\t\t\tBlazeLayout.render('fAdminLayout',{main: 'AdminDashboardNew'});\n\t}\n});\n\nfadminRoutes.route('/edit/:collectionName/:_id',{\n\ttriggersEnter: [function(context){\n\t\tSession.set('admin_title', context.params.collectionName);\n\t\tSession.set('admin_subtitle', 'Edit');\n\t\tSession.set('admin_collection_page', 'edit');\n\t\tSession.set('admin_collection_name', context.params.collectionName);\n\t\tif (context.params.collectionName == 'Users')\n\t\t\tSession.set('admin_id', context.params._id);\n\t\telse\n\t\t\tSession.set('admin_id', null);\n\n\t}],\n\ttriggersExit: [\n\t\tfunction(context){\n\t\t\tBlazeLayout.render('fAdminLayout',{main: 'AdminLoading'});\n\t\t\tSession.set('admin_id',null);\n\t\t}\n\t],\n\tsubscriptions : function(params){\n\t\tif (params.collectionName !== 'Users')\n\t\tthis.register('admindoc2edit', Meteor.subscribe('adminCollectionDoc', params.collectionName, parseID(params._id)));\n\t},\n\taction: function(params)\n\t{\n\t\tif(params.collectionName == 'Users')\n\t\t\tBlazeLayout.render('fAdminLayout',{main: 'AdminDashboardUsersEdit'});\n\t\telse\n\t\t\tBlazeLayout.render('fAdminLayout',{main: 'AdminDashboardEdit'});\n\t}\n});\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/sach_flow-db-admin/lib/both/utils.coffee.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nthis.adminCollectionObject = function(collection) {                                                                    // 1\n  if (typeof AdminConfig.collections[collection] !== 'undefined' && typeof AdminConfig.collections[collection].collectionObject !== 'undefined') {\n    return AdminConfig.collections[collection].collectionObject;                                                       //\n  } else {                                                                                                             //\n    return lookup(collection);                                                                                         //\n  }                                                                                                                    //\n};                                                                                                                     // 1\n                                                                                                                       //\nthis.adminCallback = function(name, args, callback) {                                                                  // 1\n  var ref1, ref2, stop;                                                                                                // 8\n  stop = false;                                                                                                        // 8\n  if (typeof (typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? (ref1 = AdminConfig.callbacks) != null ? ref1[name] : void 0 : void 0) === 'function') {\n    stop = (ref2 = AdminConfig.callbacks)[name].apply(ref2, args) === false;                                           // 10\n  }                                                                                                                    //\n  if (typeof callback === 'function') {                                                                                // 11\n    if (!stop) {                                                                                                       // 12\n      return callback.apply(null, args);                                                                               //\n    }                                                                                                                  //\n  }                                                                                                                    //\n};                                                                                                                     // 7\n                                                                                                                       //\nthis.lookup = function(obj, root, required) {                                                                          // 1\n  var arr, ref;                                                                                                        // 15\n  if (required == null) {                                                                                              //\n    required = true;                                                                                                   //\n  }                                                                                                                    //\n  if (typeof root === 'undefined') {                                                                                   // 15\n    root = Meteor.isServer ? global : window;                                                                          // 16\n  }                                                                                                                    //\n  if (typeof obj === 'string') {                                                                                       // 17\n    ref = root;                                                                                                        // 18\n    arr = obj.split('.');                                                                                              // 18\n    while (arr.length && (ref = ref[arr.shift()])) {                                                                   // 20\n      continue;                                                                                                        // 20\n    }                                                                                                                  //\n    if (!ref && required) {                                                                                            // 21\n      throw new Error(obj + ' is not in the ' + root.toString());                                                      // 22\n    } else {                                                                                                           //\n      return ref;                                                                                                      // 24\n    }                                                                                                                  //\n  }                                                                                                                    //\n  return obj;                                                                                                          // 25\n};                                                                                                                     // 14\n                                                                                                                       //\nthis.parseID = function(id) {                                                                                          // 1\n  if (typeof id === 'string') {                                                                                        // 28\n    if (id.indexOf(\"ObjectID\") > -1) {                                                                                 // 29\n      return new Mongo.ObjectID(id.slice(id.indexOf('\"') + 1, id.lastIndexOf('\"')));                                   // 30\n    } else {                                                                                                           //\n      return id;                                                                                                       // 32\n    }                                                                                                                  //\n  } else {                                                                                                             //\n    return id;                                                                                                         // 34\n  }                                                                                                                    //\n};                                                                                                                     // 27\n                                                                                                                       //\nthis.parseIDs = function(ids) {                                                                                        // 1\n  return _.map(ids, function(id) {                                                                                     // 37\n    return parseID(id);                                                                                                //\n  });                                                                                                                  //\n};                                                                                                                     // 36\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/sach_flow-db-admin/lib/both/startup.coffee.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar adminCreateTables, adminDelButton, adminEditButton, adminEditDelButtons, adminPublishTables, adminTablePubName, adminTablesDom, defaultColumns;\n                                                                                                                       //\nthis.AdminTables = {};                                                                                                 // 1\n                                                                                                                       //\nadminTablesDom = '<\"box\"<\"box-header\"<\"box-toolbar\"<\"pull-left\"<lf>><\"pull-right\"p>>><\"box-body\"t>>';                  // 1\n                                                                                                                       //\nadminEditButton = {                                                                                                    // 1\n  data: '_id',                                                                                                         // 5\n  title: 'Edit',                                                                                                       // 5\n  createdCell: function(node, cellData, rowData) {                                                                     // 5\n    return $(node).html(Blaze.toHTMLWithData(Template.adminEditBtn, {                                                  //\n      _id: cellData                                                                                                    // 9\n    }, node));                                                                                                         //\n  },                                                                                                                   //\n  width: '40px',                                                                                                       // 5\n  orderable: false                                                                                                     // 5\n};                                                                                                                     //\n                                                                                                                       //\nadminDelButton = {                                                                                                     // 1\n  data: '_id',                                                                                                         // 13\n  title: 'Delete',                                                                                                     // 13\n  createdCell: function(node, cellData, rowData) {                                                                     // 13\n    return $(node).html(Blaze.toHTMLWithData(Template.adminDeleteBtn, {                                                //\n      _id: cellData                                                                                                    // 17\n    }, node));                                                                                                         //\n  },                                                                                                                   //\n  width: '40px',                                                                                                       // 13\n  orderable: false                                                                                                     // 13\n};                                                                                                                     //\n                                                                                                                       //\nadminEditDelButtons = [adminEditButton, adminDelButton];                                                               // 1\n                                                                                                                       //\ndefaultColumns = function() {                                                                                          // 1\n  return [                                                                                                             //\n    {                                                                                                                  //\n      data: '_id',                                                                                                     // 28\n      title: 'ID'                                                                                                      // 28\n    }                                                                                                                  //\n  ];                                                                                                                   //\n};                                                                                                                     // 27\n                                                                                                                       //\nAdminTables.Users = new Tabular.Table({                                                                                // 1\n  changeSelector: function(selector, userId) {                                                                         // 34\n    var $or;                                                                                                           // 35\n    $or = selector['$or'];                                                                                             // 35\n    $or && (selector['$or'] = _.map($or, function(exp) {                                                               // 35\n      var ref;                                                                                                         // 37\n      if (((ref = exp.emails) != null ? ref['$regex'] : void 0) != null) {                                             // 37\n        return {                                                                                                       //\n          emails: {                                                                                                    // 38\n            $elemMatch: {                                                                                              // 38\n              address: exp.emails                                                                                      // 38\n            }                                                                                                          //\n          }                                                                                                            //\n        };                                                                                                             //\n      } else {                                                                                                         //\n        return exp;                                                                                                    //\n      }                                                                                                                //\n    }));                                                                                                               //\n    return selector;                                                                                                   //\n  },                                                                                                                   //\n  name: 'Users',                                                                                                       // 34\n  collection: Meteor.users,                                                                                            // 34\n  columns: _.union([                                                                                                   // 34\n    {                                                                                                                  //\n      data: '_id',                                                                                                     // 46\n      title: 'Admin',                                                                                                  // 46\n      createdCell: function(node, cellData, rowData) {                                                                 // 46\n        return $(node).html(Blaze.toHTMLWithData(Template.adminUsersIsAdmin, {                                         //\n          _id: cellData                                                                                                // 51\n        }, node));                                                                                                     //\n      },                                                                                                               //\n      width: '40px'                                                                                                    // 46\n    }, {                                                                                                               //\n      data: 'emails',                                                                                                  // 54\n      title: 'Email',                                                                                                  // 54\n      render: function(value) {                                                                                        // 54\n        if (value) {                                                                                                   // 58\n          return value[0].address;                                                                                     //\n        } else {                                                                                                       //\n          return '';                                                                                                   //\n        }                                                                                                              //\n      },                                                                                                               //\n      searchable: true                                                                                                 // 54\n    }, {                                                                                                               //\n      data: 'emails',                                                                                                  // 61\n      title: 'Mail',                                                                                                   // 61\n      createdCell: function(node, cellData, rowData) {                                                                 // 61\n        return $(node).html(Blaze.toHTMLWithData(Template.adminUsersMailBtn, {                                         //\n          emails: cellData                                                                                             // 66\n        }, node));                                                                                                     //\n      },                                                                                                               //\n      width: '40px'                                                                                                    // 61\n    }, {                                                                                                               //\n      data: 'createdAt',                                                                                               // 69\n      title: 'Joined'                                                                                                  // 69\n    }                                                                                                                  //\n  ], adminEditDelButtons),                                                                                             //\n  dom: adminTablesDom                                                                                                  // 34\n});                                                                                                                    //\n                                                                                                                       //\nadminTablePubName = function(collection) {                                                                             // 1\n  return \"admin_tabular_\" + collection;                                                                                //\n};                                                                                                                     // 73\n                                                                                                                       //\nadminCreateTables = function(collections) {                                                                            // 1\n  return _.each(typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.collections : void 0, function(collection, name) {\n    var columns;                                                                                                       // 78\n    _.defaults(collection, {                                                                                           // 78\n      showEditColumn: true,                                                                                            // 78\n      showDelColumn: true                                                                                              // 78\n    });                                                                                                                //\n    columns = _.map(collection.tableColumns, function(column) {                                                        // 78\n      var createdCell;                                                                                                 // 84\n      if (column.template) {                                                                                           // 84\n        createdCell = function(node, cellData, rowData) {                                                              // 85\n          $(node).html('');                                                                                            // 86\n          return Blaze.renderWithData(Template[column.template], {                                                     //\n            value: cellData,                                                                                           // 87\n            doc: rowData                                                                                               // 87\n          }, node);                                                                                                    //\n        };                                                                                                             //\n      }                                                                                                                //\n      return {                                                                                                         //\n        data: column.name,                                                                                             // 89\n        title: column.label,                                                                                           // 89\n        createdCell: createdCell                                                                                       // 89\n      };                                                                                                               //\n    });                                                                                                                //\n    if (columns.length === 0) {                                                                                        // 93\n      columns = defaultColumns();                                                                                      // 94\n    }                                                                                                                  //\n    if (collection.showEditColumn) {                                                                                   // 96\n      columns.push(adminEditButton);                                                                                   // 97\n    }                                                                                                                  //\n    if (collection.showDelColumn) {                                                                                    // 98\n      columns.push(adminDelButton);                                                                                    // 99\n    }                                                                                                                  //\n    return AdminTables[name] = new Tabular.Table({                                                                     //\n      name: name,                                                                                                      // 102\n      collection: adminCollectionObject(name),                                                                         // 102\n      pub: collection.children && adminTablePubName(name),                                                             // 102\n      sub: collection.sub,                                                                                             // 102\n      columns: columns,                                                                                                // 102\n      extraFields: collection.extraFields,                                                                             // 102\n      dom: adminTablesDom                                                                                              // 102\n    });                                                                                                                //\n  });                                                                                                                  //\n};                                                                                                                     // 76\n                                                                                                                       //\nadminPublishTables = function(collections) {                                                                           // 1\n  return _.each(collections, function(collection, name) {                                                              //\n    if (!collection.children) {                                                                                        // 113\n      return void 0;                                                                                                   // 113\n    }                                                                                                                  //\n    return Meteor.publishComposite(adminTablePubName(name), function(tableName, ids, fields) {                         //\n      var extraFields;                                                                                                 // 115\n      check(tableName, String);                                                                                        // 115\n      check(ids, Array);                                                                                               // 115\n      check(fields, Match.Optional(Object));                                                                           // 115\n      extraFields = _.reduce(collection.extraFields, function(fields, name) {                                          // 115\n        fields[name] = 1;                                                                                              // 120\n        return fields;                                                                                                 //\n      }, {});                                                                                                          //\n      _.extend(fields, extraFields);                                                                                   // 115\n      this.unblock();                                                                                                  // 115\n      return {                                                                                                         //\n        find: function() {                                                                                             // 127\n          this.unblock();                                                                                              // 128\n          return adminCollectionObject(name).find({                                                                    //\n            _id: {                                                                                                     // 129\n              $in: ids                                                                                                 // 129\n            }                                                                                                          //\n          }, {                                                                                                         //\n            fields: fields                                                                                             // 129\n          });                                                                                                          //\n        },                                                                                                             //\n        children: collection.children                                                                                  // 127\n      };                                                                                                               //\n    });                                                                                                                //\n  });                                                                                                                  //\n};                                                                                                                     // 111\n                                                                                                                       //\nMeteor.startup(function() {                                                                                            // 1\n  adminCreateTables(typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.collections : void 0);    // 133\n  if (Meteor.isServer) {                                                                                               // 134\n    return adminPublishTables(typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.collections : void 0);\n  }                                                                                                                    //\n});                                                                                                                    // 132\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/sach_flow-db-admin/lib/both/collections.coffee.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nthis.AdminCollectionsCount = new Mongo.Collection('adminCollectionsCount');                                            // 1\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/sach_flow-db-admin/lib/server/publish.coffee.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nMeteor.publishComposite('adminCollectionDoc', function(collection, id) {                                               // 1\n  var ref, ref1;                                                                                                       // 2\n  check(collection, String);                                                                                           // 2\n  check(id, Match.OneOf(String, Mongo.ObjectID));                                                                      // 2\n  if (Roles.userIsInRole(this.userId, ['admin'])) {                                                                    // 4\n    return {                                                                                                           //\n      find: function() {                                                                                               // 5\n        return adminCollectionObject(collection).find(id);                                                             //\n      },                                                                                                               //\n      children: (typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? (ref = AdminConfig.collections) != null ? (ref1 = ref[collection]) != null ? ref1.children : void 0 : void 0 : void 0) || []\n    };                                                                                                                 //\n  } else {                                                                                                             //\n    return this.ready();                                                                                               //\n  }                                                                                                                    //\n});                                                                                                                    // 1\n                                                                                                                       //\nMeteor.publish('adminUsers', function() {                                                                              // 1\n  if (Roles.userIsInRole(this.userId, ['admin'])) {                                                                    // 12\n    return Meteor.users.find();                                                                                        //\n  } else {                                                                                                             //\n    return this.ready();                                                                                               //\n  }                                                                                                                    //\n});                                                                                                                    // 11\n                                                                                                                       //\nMeteor.publish('adminUser', function() {                                                                               // 1\n  return Meteor.users.find(this.userId);                                                                               //\n});                                                                                                                    // 17\n                                                                                                                       //\nMeteor.publish('adminCollectionsCount', function() {                                                                   // 1\n  var handles, self;                                                                                                   // 21\n  handles = [];                                                                                                        // 21\n  self = this;                                                                                                         // 21\n  _.each(AdminTables, function(table, name) {                                                                          // 21\n    var count, id, ready;                                                                                              // 25\n    id = new Mongo.ObjectID;                                                                                           // 25\n    count = 0;                                                                                                         // 25\n    ready = false;                                                                                                     // 25\n    handles.push(table.collection.find().observeChanges({                                                              // 25\n      added: function() {                                                                                              // 30\n        count += 1;                                                                                                    // 31\n        return ready && self.changed('adminCollectionsCount', id, {                                                    //\n          count: count                                                                                                 // 32\n        });                                                                                                            //\n      },                                                                                                               //\n      removed: function() {                                                                                            // 30\n        count -= 1;                                                                                                    // 34\n        return ready && self.changed('adminCollectionsCount', id, {                                                    //\n          count: count                                                                                                 // 35\n        });                                                                                                            //\n      }                                                                                                                //\n    }));                                                                                                               //\n    ready = true;                                                                                                      // 25\n    return self.added('adminCollectionsCount', id, {                                                                   //\n      collection: name,                                                                                                // 38\n      count: count                                                                                                     // 38\n    });                                                                                                                //\n  });                                                                                                                  //\n  self.onStop(function() {                                                                                             // 21\n    return _.each(handles, function(handle) {                                                                          //\n      return handle.stop();                                                                                            //\n    });                                                                                                                //\n  });                                                                                                                  //\n  return self.ready();                                                                                                 //\n});                                                                                                                    // 20\n                                                                                                                       //\nMeteor.publish(null, function() {                                                                                      // 1\n  return Meteor.roles.find({});                                                                                        //\n});                                                                                                                    // 44\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/sach_flow-db-admin/lib/server/methods.coffee.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nMeteor.methods({                                                                                                       // 1\n  adminInsertDoc: function(doc, collection) {                                                                          // 2\n    var Future, fut;                                                                                                   // 3\n    check(arguments, [Match.Any]);                                                                                     // 3\n    if (Roles.userIsInRole(this.userId, ['admin'])) {                                                                  // 4\n      Future = Npm.require('fibers/future');                                                                           // 5\n      fut = new Future();                                                                                              // 5\n      adminCollectionObject(collection).insert(doc, function(e, _id) {                                                 // 5\n        return fut['return']({                                                                                         //\n          e: e,                                                                                                        // 9\n          _id: _id                                                                                                     // 9\n        });                                                                                                            //\n      });                                                                                                              //\n      return fut.wait();                                                                                               // 10\n    }                                                                                                                  //\n  },                                                                                                                   //\n  adminUpdateDoc: function(modifier, collection, _id) {                                                                // 2\n    var Future, fut;                                                                                                   // 13\n    check(arguments, [Match.Any]);                                                                                     // 13\n    if (Roles.userIsInRole(this.userId, ['admin'])) {                                                                  // 14\n      Future = Npm.require('fibers/future');                                                                           // 15\n      fut = new Future();                                                                                              // 15\n      adminCollectionObject(collection).update({                                                                       // 15\n        _id: _id                                                                                                       // 17\n      }, modifier, function(e, r) {                                                                                    //\n        return fut['return']({                                                                                         //\n          e: e,                                                                                                        // 18\n          r: r                                                                                                         // 18\n        });                                                                                                            //\n      });                                                                                                              //\n      return fut.wait();                                                                                               // 19\n    }                                                                                                                  //\n  },                                                                                                                   //\n  adminRemoveDoc: function(collection, _id) {                                                                          // 2\n    check(arguments, [Match.Any]);                                                                                     // 22\n    if (Roles.userIsInRole(this.userId, ['admin'])) {                                                                  // 23\n      if (collection === 'Users') {                                                                                    // 24\n        return Meteor.users.remove({                                                                                   //\n          _id: _id                                                                                                     // 25\n        });                                                                                                            //\n      } else {                                                                                                         //\n        return adminCollectionObject(collection).remove({                                                              //\n          _id: _id                                                                                                     // 28\n        });                                                                                                            //\n      }                                                                                                                //\n    }                                                                                                                  //\n  },                                                                                                                   //\n  adminNewUser: function(doc) {                                                                                        // 2\n    var emails;                                                                                                        // 32\n    check(arguments, [Match.Any]);                                                                                     // 32\n    if (Roles.userIsInRole(this.userId, ['admin'])) {                                                                  // 33\n      emails = doc.email.split(',');                                                                                   // 34\n      return _.each(emails, function(email) {                                                                          //\n        var _id, user;                                                                                                 // 36\n        user = {};                                                                                                     // 36\n        user.email = email;                                                                                            // 36\n        if (!doc.chooseOwnPassword) {                                                                                  // 38\n          user.password = doc.password;                                                                                // 39\n        }                                                                                                              //\n        _id = Accounts.createUser(user);                                                                               // 36\n        if (doc.sendPassword && (AdminConfig.fromEmail != null)) {                                                     // 43\n          Email.send({                                                                                                 // 44\n            to: user.email,                                                                                            // 45\n            from: AdminConfig.fromEmail,                                                                               // 45\n            subject: 'Your account has been created',                                                                  // 45\n            html: 'You\\'ve just had an account created for ' + Meteor.absoluteUrl() + ' with password ' + doc.password\n          });                                                                                                          //\n        }                                                                                                              //\n        if (!doc.sendPassword) {                                                                                       // 50\n          return Accounts.sendEnrollmentEmail(_id);                                                                    //\n        }                                                                                                              //\n      });                                                                                                              //\n    }                                                                                                                  //\n  },                                                                                                                   //\n  adminUpdateUser: function(modifier, _id) {                                                                           // 2\n    var Future, fut;                                                                                                   // 54\n    check(arguments, [Match.Any]);                                                                                     // 54\n    if (Roles.userIsInRole(this.userId, ['admin'])) {                                                                  // 55\n      Future = Npm.require('fibers/future');                                                                           // 56\n      fut = new Future();                                                                                              // 56\n      Meteor.users.update({                                                                                            // 56\n        _id: _id                                                                                                       // 58\n      }, modifier, function(e, r) {                                                                                    //\n        return fut['return']({                                                                                         //\n          e: e,                                                                                                        // 59\n          r: r                                                                                                         // 59\n        });                                                                                                            //\n      });                                                                                                              //\n      return fut.wait();                                                                                               // 60\n    }                                                                                                                  //\n  },                                                                                                                   //\n  adminSendResetPasswordEmail: function(doc) {                                                                         // 2\n    check(arguments, [Match.Any]);                                                                                     // 63\n    if (Roles.userIsInRole(this.userId, ['admin'])) {                                                                  // 64\n      console.log('Changing password for user ' + doc._id);                                                            // 65\n      return Accounts.sendResetPasswordEmail(doc._id);                                                                 //\n    }                                                                                                                  //\n  },                                                                                                                   //\n  adminChangePassword: function(doc) {                                                                                 // 2\n    check(arguments, [Match.Any]);                                                                                     // 69\n    if (Roles.userIsInRole(this.userId, ['admin'])) {                                                                  // 70\n      console.log('Changing password for user ' + doc._id);                                                            // 71\n      Accounts.setPassword(doc._id, doc.password);                                                                     // 71\n      return {                                                                                                         //\n        label: 'Email user their new password'                                                                         // 73\n      };                                                                                                               //\n    }                                                                                                                  //\n  },                                                                                                                   //\n  adminCheckAdmin: function() {                                                                                        // 2\n    var adminEmails, email, user;                                                                                      // 76\n    check(arguments, [Match.Any]);                                                                                     // 76\n    user = Meteor.users.findOne({                                                                                      // 76\n      _id: this.userId                                                                                                 // 77\n    });                                                                                                                //\n    if (this.userId && !Roles.userIsInRole(this.userId, ['admin']) && (user.emails.length > 0)) {                      // 78\n      email = user.emails[0].address;                                                                                  // 79\n      if (typeof Meteor.settings.adminEmails !== 'undefined') {                                                        // 80\n        adminEmails = Meteor.settings.adminEmails;                                                                     // 81\n        if (adminEmails.indexOf(email) > -1) {                                                                         // 82\n          console.log('Adding admin user: ' + email);                                                                  // 83\n          return Roles.addUsersToRoles(this.userId, ['admin'], Roles.GLOBAL_GROUP);                                    //\n        }                                                                                                              //\n      } else if (typeof AdminConfig !== 'undefined' && typeof AdminConfig.adminEmails === 'object') {                  //\n        adminEmails = AdminConfig.adminEmails;                                                                         // 86\n        if (adminEmails.indexOf(email) > -1) {                                                                         // 87\n          console.log('Adding admin user: ' + email);                                                                  // 88\n          return Roles.addUsersToRoles(this.userId, ['admin'], Roles.GLOBAL_GROUP);                                    //\n        }                                                                                                              //\n      } else if (this.userId === Meteor.users.findOne({}, {                                                            //\n        sort: {                                                                                                        // 90\n          createdAt: 1                                                                                                 // 90\n        }                                                                                                              //\n      })._id) {                                                                                                        //\n        console.log('Making first user admin: ' + email);                                                              // 91\n        return Roles.addUsersToRoles(this.userId, ['admin']);                                                          //\n      }                                                                                                                //\n    }                                                                                                                  //\n  },                                                                                                                   //\n  adminAddUserToRole: function(_id, role) {                                                                            // 2\n    check(arguments, [Match.Any]);                                                                                     // 95\n    if (Roles.userIsInRole(this.userId, ['admin'])) {                                                                  // 96\n      return Roles.addUsersToRoles(_id, role, Roles.GLOBAL_GROUP);                                                     //\n    }                                                                                                                  //\n  },                                                                                                                   //\n  adminRemoveUserToRole: function(_id, role) {                                                                         // 2\n    check(arguments, [Match.Any]);                                                                                     // 100\n    if (Roles.userIsInRole(this.userId, ['admin'])) {                                                                  // 101\n      return Roles.removeUsersFromRoles(_id, role, Roles.GLOBAL_GROUP);                                                //\n    }                                                                                                                  //\n  },                                                                                                                   //\n  adminSetCollectionSort: function(collection, _sort) {                                                                // 2\n    check(arguments, [Match.Any]);                                                                                     // 105\n    return global.AdminPages[collection].set({                                                                         //\n      sort: _sort                                                                                                      // 107\n    });                                                                                                                //\n  }                                                                                                                    //\n});                                                                                                                    //\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['sach:flow-db-admin'] = {}, {\n  AdminDashboard: AdminDashboard\n});\n\n})();\n","servePath":"/packages/sach_flow-db-admin.js","sourceMap":{"version":3,"sources":["/packages/sach_flow-db-admin/lib/both/AdminDashboard.coffee","/packages/sach_flow-db-admin/lib/both/utils.coffee","/packages/sach_flow-db-admin/lib/both/startup.coffee","/packages/sach_flow-db-admin/lib/both/collections.coffee","/packages/sach_flow-db-admin/lib/server/publish.coffee","/packages/sach_flow-db-admin/lib/server/methods.coffee"],"names":[],"mappings":"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","file":"/packages/sach_flow-db-admin.js","sourcesContent":["AdminDashboard =\n\tschemas: {}\n\tsidebarItems: []\n\tcollectionItems: []\n\talertSuccess: (message)->\n\t\tSession.set 'adminError', null\n\t\tSession.set 'adminSuccess', message\n\talertFailure: (message)->\n\t\tSession.set 'adminSuccess', null\n\t\tSession.set 'adminError', message\n\n\tcheckAdmin: ->\n\t\tif not Roles.userIsInRole Meteor.userId(), ['admin']\n\t\t\tMeteor.call 'adminCheckAdmin'\n\t\t\tif (typeof AdminConfig?.nonAdminRedirectRoute == \"string\")\n\t\t\t  Router.go AdminConfig.nonAdminRedirectRoute\n\t\tif typeof @.next == 'function'\n\t\t\t@next()\n\tadminRoutes: ['adminDashboard','adminDashboardUsersNew','adminDashboardUsersEdit','adminDashboardView','adminDashboardNew','adminDashboardEdit']\n\tcollectionLabel: (collection)->\n\t\tif collection == 'Users'\n\t\t\t'Users'\n\t\telse if collection? and typeof AdminConfig.collections[collection].label == 'string'\n\t\t\tAdminConfig.collections[collection].label\n\t\telse Session.get 'admin_collection_name'\n\n\taddSidebarItem: (title, url, options) ->\n\t\titem = title: title\n\t\tif _.isObject(url) and typeof options == 'undefined'\n\t\t\titem.options = url\n\t\telse\n\t\t\titem.url = url\n\t\t\titem.options = options\n\n\t\t@sidebarItems.push item\n\n\textendSidebarItem: (title, urls) ->\n\t\tif _.isObject(urls) then urls = [urls]\n\n\t\texisting = _.find @sidebarItems, (item) -> item.title == title\n\t\tif existing\n\t\t\texisting.options.urls = _.union existing.options.urls, urls\n\n\taddCollectionItem: (fn) ->\n\t\t@collectionItems.push fn\n\n\tpath: (s) ->\n\t\tpath = '/admin'\n\t\tif typeof s == 'string' and s.length > 0\n\t\t\tpath += (if s[0] == '/' then '' else '/') + s\n\t\tpath\n\n\nAdminDashboard.schemas.newUser = new SimpleSchema\n\temail: \n\t\ttype: String\n\t\tlabel: \"Email address\"\n\tchooseOwnPassword:\n\t\ttype: Boolean\n\t\tlabel: 'Let this user choose their own password with an email'\n\t\tdefaultValue: true\n\tpassword:\n\t\ttype: String\n\t\tlabel: 'Password'\n\t\toptional: true\n\tsendPassword:\n\t\ttype: Boolean\n\t\tlabel: 'Send this user their password by email'\n\t\toptional: true\n\nAdminDashboard.schemas.sendResetPasswordEmail = new SimpleSchema\n\t_id:\n\t\ttype: String\n\nAdminDashboard.schemas.changePassword = new SimpleSchema\n\t_id:\n\t\ttype: String\n\tpassword:\n\t\ttype: String\n","@adminCollectionObject = (collection) ->\n\tif typeof AdminConfig.collections[collection] != 'undefined' and typeof AdminConfig.collections[collection].collectionObject != 'undefined'\n\t\tAdminConfig.collections[collection].collectionObject\n\telse\n\t\tlookup collection\n\n@adminCallback = (name, args, callback) ->\n\tstop = false\n\tif typeof AdminConfig?.callbacks?[name] == 'function'\n\t\tstop = AdminConfig.callbacks[name](args...) is false\n\tif typeof callback == 'function'\n\t\tcallback args... unless stop\n\n@lookup = (obj, root, required=true) ->\n\tif typeof root == 'undefined'\n\t\troot = if Meteor.isServer then global else window\n\tif typeof obj == 'string'\n\t\tref = root\n\t\tarr = obj.split '.'\n\t\tcontinue while arr.length and (ref = ref[arr.shift()])\n\t\tif not ref and required\n\t\t\tthrow new Error(obj + ' is not in the ' + root.toString())\n\t\telse\n\t\t\treturn ref\n\treturn obj\n\t\n@parseID = (id) ->\n\tif typeof id == 'string'\n\t\tif(id.indexOf(\"ObjectID\") > -1)\n\t\t\treturn new Mongo.ObjectID(id.slice(id.indexOf('\"') + 1,id.lastIndexOf('\"')))\n\t\telse\n\t\t\treturn id\n\telse\n\t\treturn id\n\n@parseIDs = (ids) ->\n    return _.map ids, (id) ->\n        parseID id\n","@AdminTables = {}\n\nadminTablesDom = '<\"box\"<\"box-header\"<\"box-toolbar\"<\"pull-left\"<lf>><\"pull-right\"p>>><\"box-body\"t>>'\n\nadminEditButton = {\n\tdata: '_id'\n\ttitle: 'Edit'\n\tcreatedCell: (node, cellData, rowData) ->\n\t\t$(node).html(Blaze.toHTMLWithData Template.adminEditBtn, {_id: cellData}, node)\n\twidth: '40px'\n\torderable: false\n}\nadminDelButton = {\n\tdata: '_id'\n\ttitle: 'Delete'\n\tcreatedCell: (node, cellData, rowData) ->\n\t $(node).html(Blaze.toHTMLWithData Template.adminDeleteBtn, {_id: cellData}, node)\n\twidth: '40px'\n\torderable: false\n}\n\nadminEditDelButtons = [\n\tadminEditButton,\n\tadminDelButton\n]\n\ndefaultColumns = () -> [\n  data: '_id',\n  title: 'ID'\n]\n\nAdminTables.Users = new Tabular.Table\n\t# Modify selector to allow search by email\n\tchangeSelector: (selector, userId) ->\n\t\t$or = selector['$or']\n\t\t$or and selector['$or'] = _.map $or, (exp) ->\n\t\t\tif exp.emails?['$regex']?\n\t\t\t\temails: $elemMatch: address: exp.emails\n\t\t\telse\n\t\t\t\texp\n\t\tselector\n\n\tname: 'Users'\n\tcollection: Meteor.users\n\tcolumns: _.union [\n\t\t{\n\t\t\tdata: '_id'\n\t\t\ttitle: 'Admin'\n\t\t\t# TODO: use `tmpl`\n\t\t\tcreatedCell: (node, cellData, rowData) ->\n\t\t\t\t$(node).html(Blaze.toHTMLWithData Template.adminUsersIsAdmin, {_id: cellData}, node)\n\t\t\twidth: '40px'\n\t\t}\n\t\t{\n\t\t\tdata: 'emails'\n\t\t\ttitle: 'Email'\n\t\t\trender: (value) ->\n\t\t\t\tif value then value[0].address else ''\n\t\t\tsearchable: true\n\t\t}\n\t\t{\n\t\t\tdata: 'emails'\n\t\t\ttitle: 'Mail'\n\t\t\t# TODO: use `tmpl`\n\t\t\tcreatedCell: (node, cellData, rowData) ->\n\t\t\t\t$(node).html(Blaze.toHTMLWithData Template.adminUsersMailBtn, {emails: cellData}, node)\n\t\t\twidth: '40px'\n\t\t}\n\t\t{ data: 'createdAt', title: 'Joined' }\n\t], adminEditDelButtons\n\tdom: adminTablesDom\n\nadminTablePubName = (collection) ->\n\t\"admin_tabular_#{collection}\"\n\nadminCreateTables = (collections) ->\n\t_.each AdminConfig?.collections, (collection, name) ->\n\t\t_.defaults collection, {\n\t\t\tshowEditColumn: true\n\t\t\tshowDelColumn: true\n\t\t}\n\n\t\tcolumns = _.map collection.tableColumns, (column) ->\n\t\t\tif column.template\n\t\t\t\tcreatedCell = (node, cellData, rowData) ->\n\t\t\t\t\t$(node).html ''\n\t\t\t\t\tBlaze.renderWithData(Template[column.template], {value: cellData, doc: rowData}, node)\n\n\t\t\tdata: column.name\n\t\t\ttitle: column.label\n\t\t\tcreatedCell: createdCell\n\n\t\tif columns.length == 0\n\t\t\tcolumns = defaultColumns()\n\n\t\tif collection.showEditColumn\n\t\t\tcolumns.push(adminEditButton)\n\t\tif collection.showDelColumn\n\t\t\tcolumns.push(adminDelButton)\n\n\t\tAdminTables[name] = new Tabular.Table\n\t\t\tname: name\n\t\t\tcollection: adminCollectionObject(name)\n\t\t\tpub: collection.children and adminTablePubName(name)\n\t\t\tsub: collection.sub\n\t\t\tcolumns: columns\n\t\t\textraFields: collection.extraFields\n\t\t\tdom: adminTablesDom\n\n\nadminPublishTables = (collections) ->\n\t_.each collections, (collection, name) ->\n\t\tif not collection.children then return undefined\n\t\tMeteor.publishComposite adminTablePubName(name), (tableName, ids, fields) ->\n\t\t\tcheck tableName, String\n\t\t\tcheck ids, Array\n\t\t\tcheck fields, Match.Optional Object\n\n\t\t\textraFields = _.reduce collection.extraFields, (fields, name) ->\n\t\t\t\tfields[name] = 1\n\t\t\t\tfields\n\t\t\t, {}\n\t\t\t_.extend fields, extraFields\n\n\t\t\t@unblock()\n\n\t\t\tfind: ->\n\t\t\t\t@unblock()\n\t\t\t\tadminCollectionObject(name).find {_id: {$in: ids}}, {fields: fields}\n\t\t\tchildren: collection.children\n\nMeteor.startup ->\n\tadminCreateTables AdminConfig?.collections\n\tadminPublishTables AdminConfig?.collections if Meteor.isServer\n","@AdminCollectionsCount = new Mongo.Collection 'adminCollectionsCount'","Meteor.publishComposite 'adminCollectionDoc', (collection, id) ->\n\tcheck collection, String\n\tcheck id, Match.OneOf(String, Mongo.ObjectID)\n\tif Roles.userIsInRole this.userId, ['admin']\n\t\tfind: ->\n\t\t\tadminCollectionObject(collection).find(id)\n\t\tchildren: AdminConfig?.collections?[collection]?.children or []\n\telse\n\t\t@ready()\n\nMeteor.publish 'adminUsers', ->\n\tif Roles.userIsInRole @userId, ['admin']\n\t\tMeteor.users.find()\n\telse\n\t\t@ready()\n\nMeteor.publish 'adminUser', ->\n\tMeteor.users.find @userId\n\nMeteor.publish 'adminCollectionsCount', ->\n\thandles = []\n\tself = @\n\n\t_.each AdminTables, (table, name) ->\n\t\tid = new Mongo.ObjectID\n\t\tcount = 0\n\n\t\tready = false\n\t\thandles.push table.collection.find().observeChanges\n\t\t\tadded: ->\n\t\t\t\tcount += 1\n\t\t\t\tready and self.changed 'adminCollectionsCount', id, {count: count}\n\t\t\tremoved: ->\n\t\t\t\tcount -= 1\n\t\t\t\tready and self.changed 'adminCollectionsCount', id, {count: count}\n\t\tready = true\n\n\t\tself.added 'adminCollectionsCount', id, {collection: name, count: count}\n\n\tself.onStop ->\n\t\t_.each handles, (handle) -> handle.stop()\n\tself.ready()\n\nMeteor.publish null, ->\n\tMeteor.roles.find({})\n","Meteor.methods\n\tadminInsertDoc: (doc,collection)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tFuture = Npm.require('fibers/future');\n\t\t\tfut = new Future();\n\n\t\t\tadminCollectionObject(collection).insert doc, (e,_id)->\n\t\t\t\tfut['return']( {e:e,_id:_id} )\n\t\t\treturn fut.wait()\n\n\tadminUpdateDoc: (modifier,collection,_id)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tFuture = Npm.require('fibers/future');\n\t\t\tfut = new Future();\n\t\t\tadminCollectionObject(collection).update {_id:_id},modifier,(e,r)->\n\t\t\t\tfut['return']( {e:e,r:r} )\n\t\t\treturn fut.wait()\n\n\tadminRemoveDoc: (collection,_id)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tif collection == 'Users'\n\t\t\t\tMeteor.users.remove {_id:_id}\n\t\t\telse\n\t\t\t\t# global[collection].remove {_id:_id}\n\t\t\t\tadminCollectionObject(collection).remove {_id: _id}\n\n\n\tadminNewUser: (doc) ->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\temails = doc.email.split(',')\n\t\t\t_.each emails, (email)->\n\t\t\t\tuser = {}\n\t\t\t\tuser.email = email\n\t\t\t\tunless doc.chooseOwnPassword\n\t\t\t\t\tuser.password = doc.password\n\n\t\t\t\t_id = Accounts.createUser user\n\n\t\t\t\tif doc.sendPassword and AdminConfig.fromEmail?\n\t\t\t\t\tEmail.send\n\t\t\t\t\t\tto: user.email\n\t\t\t\t\t\tfrom: AdminConfig.fromEmail\n\t\t\t\t\t\tsubject: 'Your account has been created'\n\t\t\t\t\t\thtml: 'You\\'ve just had an account created for ' + Meteor.absoluteUrl() + ' with password ' + doc.password\n\n\t\t\t\tif not doc.sendPassword\n\t\t\t\t\tAccounts.sendEnrollmentEmail _id\n\n\tadminUpdateUser: (modifier,_id)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tFuture = Npm.require('fibers/future');\n\t\t\tfut = new Future();\n\t\t\tMeteor.users.update {_id:_id},modifier,(e,r)->\n\t\t\t\tfut['return']( {e:e,r:r} )\n\t\t\treturn fut.wait()\n\n\tadminSendResetPasswordEmail: (doc)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tconsole.log 'Changing password for user ' + doc._id\n\t\t\tAccounts.sendResetPasswordEmail(doc._id)\n\n\tadminChangePassword: (doc)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tconsole.log 'Changing password for user ' + doc._id\n\t\t\tAccounts.setPassword(doc._id, doc.password)\n\t\t\tlabel: 'Email user their new password'\n\n\tadminCheckAdmin: ->\n\t\tcheck arguments, [Match.Any]\n\t\tuser = Meteor.users.findOne(_id:this.userId)\n\t\tif this.userId and !Roles.userIsInRole(this.userId, ['admin']) and (user.emails.length > 0)\n\t\t\temail = user.emails[0].address\n\t\t\tif typeof Meteor.settings.adminEmails != 'undefined'\n\t\t\t\tadminEmails = Meteor.settings.adminEmails\n\t\t\t\tif adminEmails.indexOf(email) > -1\n\t\t\t\t\tconsole.log 'Adding admin user: ' + email\n\t\t\t\t\tRoles.addUsersToRoles this.userId, ['admin'], Roles.GLOBAL_GROUP\n\t\t\telse if typeof AdminConfig != 'undefined' and typeof AdminConfig.adminEmails == 'object'\n\t\t\t\tadminEmails = AdminConfig.adminEmails\n\t\t\t\tif adminEmails.indexOf(email) > -1\n\t\t\t\t\tconsole.log 'Adding admin user: ' + email\n\t\t\t\t\tRoles.addUsersToRoles this.userId, ['admin'], Roles.GLOBAL_GROUP\n\t\t\telse if this.userId == Meteor.users.findOne({},{sort:{createdAt:1}})._id\n\t\t\t\tconsole.log 'Making first user admin: ' + email\n\t\t\t\tRoles.addUsersToRoles this.userId, ['admin']\n\n\tadminAddUserToRole: (_id,role)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tRoles.addUsersToRoles _id, role, Roles.GLOBAL_GROUP\n\n\tadminRemoveUserToRole: (_id,role)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tRoles.removeUsersFromRoles _id, role, Roles.GLOBAL_GROUP\n\n\tadminSetCollectionSort: (collection, _sort) ->\n\t\tcheck arguments, [Match.Any]\n\t\tglobal.AdminPages[collection].set\n\t\t\tsort: _sort\n"]}}]