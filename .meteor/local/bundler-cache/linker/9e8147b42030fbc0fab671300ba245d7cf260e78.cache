[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Accounts = Package['accounts-base'].Accounts;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar _ = Package.underscore._;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\n\n/* Package-scope variables */\nvar __coffeescriptShare, UserStatus, StatusInternals;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/mizzao_user-status/status.coffee.js                                                               //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\n                                                                                                              // 1\n/*                                                                                                            // 1\n  Apparently, the new api.export takes care of issues here. No need to attach to global namespace.            //\n  See http://shiggyenterprises.wordpress.com/2013/09/09/meteor-packages-in-coffeescript-0-6-5/                //\n                                                                                                              //\n  We may want to make UserSessions a server collection to take advantage of indices.                          //\n  Will implement if someone has enough online users to warrant it.                                            //\n */                                                                                                           //\nvar UserConnections, activeSession, addSession, idleSession, loginSession, onStartup, removeSession, statusEvents, tryLogoutSession;                             \n                                                                                                              //\nUserConnections = new Mongo.Collection(\"user_status_sessions\", {                                              // 1\n  connection: null                                                                                            // 8\n});                                                                                                           //\n                                                                                                              //\nstatusEvents = new (Npm.require('events').EventEmitter)();                                                    // 1\n                                                                                                              //\n                                                                                                              // 12\n/*                                                                                                            // 12\n  Multiplex login/logout events to status.online                                                              //\n                                                                                                              //\n  'online' field is \"true\" if user is online, and \"false\" otherwise                                           //\n                                                                                                              //\n  'idle' field is tri-stated:                                                                                 //\n  - \"true\" if user is online and not idle                                                                     //\n  - \"false\" if user is online and idle                                                                        //\n  - null if user is offline                                                                                   //\n */                                                                                                           //\n                                                                                                              //\nstatusEvents.on(\"connectionLogin\", function(advice) {                                                         // 1\n  var conns, update;                                                                                          // 23\n  update = {                                                                                                  // 23\n    $set: {                                                                                                   // 24\n      'status.online': true,                                                                                  // 24\n      'status.lastLogin': {                                                                                   // 24\n        date: advice.loginTime,                                                                               // 26\n        ipAddr: advice.ipAddr,                                                                                // 26\n        userAgent: advice.userAgent                                                                           // 26\n      }                                                                                                       //\n    }                                                                                                         //\n  };                                                                                                          //\n  conns = UserConnections.find({                                                                              // 23\n    userId: advice.userId                                                                                     // 35\n  }).fetch();                                                                                                 //\n  if (!_.every(conns, function(c) {                                                                           // 36\n    return c.idle;                                                                                            //\n  })) {                                                                                                       //\n    update.$set['status.idle'] = false;                                                                       // 37\n    update.$unset = {                                                                                         // 37\n      'status.lastActivity': null                                                                             // 39\n    };                                                                                                        //\n  }                                                                                                           //\n  Meteor.users.update(advice.userId, update);                                                                 // 23\n});                                                                                                           // 22\n                                                                                                              //\nstatusEvents.on(\"connectionLogout\", function(advice) {                                                        // 1\n  var conns;                                                                                                  // 46\n  conns = UserConnections.find({                                                                              // 46\n    userId: advice.userId                                                                                     // 46\n  }).fetch();                                                                                                 //\n  if (conns.length === 0) {                                                                                   // 47\n    Meteor.users.update(advice.userId, {                                                                      // 50\n      $set: {                                                                                                 // 51\n        'status.online': false                                                                                // 51\n      },                                                                                                      //\n      $unset: {                                                                                               // 51\n        'status.idle': null,                                                                                  // 53\n        'status.lastActivity': null                                                                           // 53\n      }                                                                                                       //\n    });                                                                                                       //\n  } else if (_.every(conns, function(c) {                                                                     //\n    return c.idle;                                                                                            //\n  })) {                                                                                                       //\n                                                                                                              // 56\n    /*                                                                                                        // 56\n      All remaining connections are idle:                                                                     //\n      - If the last active connection quit, then we should go idle with the most recent activity              //\n                                                                                                              //\n      - If an idle connection quit, nothing should happen; specifically, if the                               //\n        most recently active idle connection quit, we shouldn't tick the value backwards.                     //\n        This may result in a no-op so we can be smart and skip the update.                                    //\n     */                                                                                                       //\n    if (advice.lastActivity != null) {                                                                        // 64\n      return;                                                                                                 // 64\n    }                                                                                                         //\n    Meteor.users.update(advice.userId, {                                                                      // 56\n      $set: {                                                                                                 // 67\n        'status.idle': true,                                                                                  // 68\n        'status.lastActivity': _.max(_.pluck(conns, \"lastActivity\"))                                          // 68\n      }                                                                                                       //\n    });                                                                                                       //\n  }                                                                                                           //\n});                                                                                                           // 45\n                                                                                                              //\n                                                                                                              // 72\n/*                                                                                                            // 72\n  Multiplex idle/active events to status.idle                                                                 //\n  TODO: Hopefully this is quick because it's all in memory, but we can use indices if it turns out to be slow\n                                                                                                              //\n  TODO: There is a race condition when switching between tabs, leaving the user inactive while idle goes from one tab to the other.\n  It can probably be smoothed out.                                                                            //\n */                                                                                                           //\n                                                                                                              //\nstatusEvents.on(\"connectionIdle\", function(advice) {                                                          // 1\n  var conns;                                                                                                  // 80\n  conns = UserConnections.find({                                                                              // 80\n    userId: advice.userId                                                                                     // 80\n  }).fetch();                                                                                                 //\n  if (!_.every(conns, function(c) {                                                                           // 81\n    return c.idle;                                                                                            //\n  })) {                                                                                                       //\n    return;                                                                                                   // 81\n  }                                                                                                           //\n  Meteor.users.update(advice.userId, {                                                                        // 80\n    $set: {                                                                                                   // 87\n      'status.idle': true,                                                                                    // 88\n      'status.lastActivity': _.max(_.pluck(conns, \"lastActivity\"))                                            // 88\n    }                                                                                                         //\n  });                                                                                                         //\n});                                                                                                           // 79\n                                                                                                              //\nstatusEvents.on(\"connectionActive\", function(advice) {                                                        // 1\n  Meteor.users.update(advice.userId, {                                                                        // 93\n    $set: {                                                                                                   // 94\n      'status.idle': false                                                                                    // 95\n    },                                                                                                        //\n    $unset: {                                                                                                 // 94\n      'status.lastActivity': null                                                                             // 97\n    }                                                                                                         //\n  });                                                                                                         //\n});                                                                                                           // 92\n                                                                                                              //\nonStartup = function(selector) {                                                                              // 1\n  if (selector == null) {                                                                                     //\n    selector = {};                                                                                            //\n  }                                                                                                           //\n  return Meteor.users.update(selector, {                                                                      //\n    $set: {                                                                                                   // 103\n      \"status.online\": false                                                                                  // 104\n    },                                                                                                        //\n    $unset: {                                                                                                 // 103\n      \"status.idle\": null,                                                                                    // 107\n      \"status.lastActivity\": null                                                                             // 107\n    }                                                                                                         //\n  }, {                                                                                                        //\n    multi: true                                                                                               // 112\n  });                                                                                                         //\n};                                                                                                            // 101\n                                                                                                              //\n                                                                                                              // 114\n/*                                                                                                            // 114\n  Local session modifification functions - also used in testing                                               //\n */                                                                                                           //\n                                                                                                              //\naddSession = function(connection) {                                                                           // 1\n  UserConnections.upsert(connection.id, {                                                                     // 119\n    $set: {                                                                                                   // 120\n      ipAddr: connection.clientAddress,                                                                       // 120\n      userAgent: connection.httpHeaders['user-agent']                                                         // 120\n    }                                                                                                         //\n  });                                                                                                         //\n};                                                                                                            // 118\n                                                                                                              //\nloginSession = function(connection, date, userId) {                                                           // 1\n  UserConnections.upsert(connection.id, {                                                                     // 127\n    $set: {                                                                                                   // 128\n      userId: userId,                                                                                         // 128\n      loginTime: date                                                                                         // 128\n    }                                                                                                         //\n  });                                                                                                         //\n  statusEvents.emit(\"connectionLogin\", {                                                                      // 127\n    userId: userId,                                                                                           // 134\n    connectionId: connection.id,                                                                              // 134\n    ipAddr: connection.clientAddress,                                                                         // 134\n    userAgent: connection.httpHeaders['user-agent'],                                                          // 134\n    loginTime: date                                                                                           // 134\n  });                                                                                                         //\n};                                                                                                            // 126\n                                                                                                              //\ntryLogoutSession = function(connection, date) {                                                               // 1\n  var conn;                                                                                                   // 143\n  if ((conn = UserConnections.findOne({                                                                       // 143\n    _id: connection.id,                                                                                       //\n    userId: {                                                                                                 //\n      $exists: true                                                                                           //\n    }                                                                                                         //\n  })) == null) {                                                                                              //\n    return false;                                                                                             // 143\n  }                                                                                                           //\n  UserConnections.upsert(connection.id, {                                                                     // 143\n    $unset: {                                                                                                 // 150\n      userId: null,                                                                                           // 150\n      loginTime: null                                                                                         // 150\n    }                                                                                                         //\n  });                                                                                                         //\n  return statusEvents.emit(\"connectionLogout\", {                                                              //\n    userId: conn.userId,                                                                                      // 156\n    connectionId: connection.id,                                                                              // 156\n    lastActivity: conn.lastActivity,                                                                          // 156\n    logoutTime: date                                                                                          // 156\n  });                                                                                                         //\n};                                                                                                            // 142\n                                                                                                              //\nremoveSession = function(connection, date) {                                                                  // 1\n  tryLogoutSession(connection, date);                                                                         // 162\n  UserConnections.remove(connection.id);                                                                      // 162\n};                                                                                                            // 161\n                                                                                                              //\nidleSession = function(connection, date, userId) {                                                            // 1\n  UserConnections.update(connection.id, {                                                                     // 167\n    $set: {                                                                                                   // 168\n      idle: true,                                                                                             // 168\n      lastActivity: date                                                                                      // 168\n    }                                                                                                         //\n  });                                                                                                         //\n  statusEvents.emit(\"connectionIdle\", {                                                                       // 167\n    userId: userId,                                                                                           // 174\n    connectionId: connection.id,                                                                              // 174\n    lastActivity: date                                                                                        // 174\n  });                                                                                                         //\n};                                                                                                            // 166\n                                                                                                              //\nactiveSession = function(connection, date, userId) {                                                          // 1\n  UserConnections.update(connection.id, {                                                                     // 180\n    $set: {                                                                                                   // 181\n      idle: false                                                                                             // 181\n    },                                                                                                        //\n    $unset: {                                                                                                 // 181\n      lastActivity: null                                                                                      // 182\n    }                                                                                                         //\n  });                                                                                                         //\n  statusEvents.emit(\"connectionActive\", {                                                                     // 180\n    userId: userId,                                                                                           // 185\n    connectionId: connection.id,                                                                              // 185\n    lastActivity: date                                                                                        // 185\n  });                                                                                                         //\n};                                                                                                            // 179\n                                                                                                              //\n                                                                                                              // 190\n/*                                                                                                            // 190\n  Handlers for various client-side events                                                                     //\n */                                                                                                           //\n                                                                                                              //\nMeteor.startup(onStartup);                                                                                    // 1\n                                                                                                              //\nMeteor.onConnection(function(connection) {                                                                    // 1\n  addSession(connection);                                                                                     // 197\n  return connection.onClose(function() {                                                                      //\n    return removeSession(connection, new Date());                                                             //\n  });                                                                                                         //\n});                                                                                                           // 196\n                                                                                                              //\nAccounts.onLogin(function(info) {                                                                             // 1\n  return loginSession(info.connection, new Date(), info.user._id);                                            //\n});                                                                                                           // 203\n                                                                                                              //\nMeteor.publish(null, function() {                                                                             // 1\n  if (this._session == null) {                                                                                // 211\n    return [];                                                                                                // 211\n  }                                                                                                           //\n  if (this.userId == null) {                                                                                  // 214\n    tryLogoutSession(this._session.connectionHandle, new Date());                                             // 214\n  }                                                                                                           //\n  return [];                                                                                                  // 216\n});                                                                                                           // 208\n                                                                                                              //\nMeteor.methods({                                                                                              // 1\n  \"user-status-idle\": function(timestamp) {                                                                   // 222\n    var date;                                                                                                 // 223\n    check(timestamp, Match.OneOf(null, void 0, Date, Number));                                                // 223\n    date = timestamp != null ? new Date(timestamp) : new Date();                                              // 223\n    idleSession(this.connection, date, this.userId);                                                          // 223\n  },                                                                                                          //\n  \"user-status-active\": function(timestamp) {                                                                 // 222\n    var date;                                                                                                 // 230\n    check(timestamp, Match.OneOf(null, void 0, Date, Number));                                                // 230\n    date = timestamp != null ? new Date(timestamp) : new Date();                                              // 230\n    activeSession(this.connection, date, this.userId);                                                        // 230\n  }                                                                                                           //\n});                                                                                                           //\n                                                                                                              //\nUserStatus = {                                                                                                // 1\n  connections: UserConnections,                                                                               // 241\n  events: statusEvents                                                                                        // 241\n};                                                                                                            //\n                                                                                                              //\nStatusInternals = {                                                                                           // 1\n  onStartup: onStartup,                                                                                       // 245\n  addSession: addSession,                                                                                     // 245\n  removeSession: removeSession,                                                                               // 245\n  loginSession: loginSession,                                                                                 // 245\n  tryLogoutSession: tryLogoutSession,                                                                         // 245\n  idleSession: idleSession,                                                                                   // 245\n  activeSession: activeSession                                                                                // 245\n};                                                                                                            //\n                                                                                                              //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['mizzao:user-status'] = {}, {\n  UserStatus: UserStatus,\n  StatusInternals: StatusInternals\n});\n\n})();\n","servePath":"/packages/mizzao_user-status.js","sourceMap":{"version":3,"sources":["/packages/mizzao_user-status/status.coffee"],"names":[],"mappings":"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","file":"/packages/mizzao_user-status.js","sourcesContent":["###\n  Apparently, the new api.export takes care of issues here. No need to attach to global namespace.\n  See http://shiggyenterprises.wordpress.com/2013/09/09/meteor-packages-in-coffeescript-0-6-5/\n\n  We may want to make UserSessions a server collection to take advantage of indices.\n  Will implement if someone has enough online users to warrant it.\n###\nUserConnections = new Mongo.Collection(\"user_status_sessions\", { connection: null })\n\nstatusEvents = new (Npm.require('events').EventEmitter)()\n\n###\n  Multiplex login/logout events to status.online\n\n  'online' field is \"true\" if user is online, and \"false\" otherwise\n\n  'idle' field is tri-stated:\n  - \"true\" if user is online and not idle\n  - \"false\" if user is online and idle\n  - null if user is offline\n###\nstatusEvents.on \"connectionLogin\", (advice) ->\n  update =\n    $set: {\n      'status.online': true,\n      'status.lastLogin': {\n        date: advice.loginTime\n        ipAddr: advice.ipAddr\n        userAgent: advice.userAgent\n      }\n    }\n\n  # unless ALL existing connections are idle (including this new one),\n  # the user connection becomes active.\n  conns = UserConnections.find(userId: advice.userId).fetch()\n  unless _.every(conns, (c) -> c.idle)\n    update.$set['status.idle'] = false\n    update.$unset =\n      'status.lastActivity': null\n  # in other case, idle field remains true and no update to lastActivity.\n\n  Meteor.users.update advice.userId, update\n  return\n\nstatusEvents.on \"connectionLogout\", (advice) ->\n  conns = UserConnections.find(userId: advice.userId).fetch()\n  if conns.length is 0\n    # Go offline if we are the last connection for this user\n    # This includes removing all idle information\n    Meteor.users.update advice.userId,\n      $set: {'status.online': false }\n      $unset:\n        'status.idle': null\n        'status.lastActivity': null\n  else if _.every(conns, (c) -> c.idle)\n    ###\n      All remaining connections are idle:\n      - If the last active connection quit, then we should go idle with the most recent activity\n\n      - If an idle connection quit, nothing should happen; specifically, if the\n        most recently active idle connection quit, we shouldn't tick the value backwards.\n        This may result in a no-op so we can be smart and skip the update.\n    ###\n    return if advice.lastActivity? # The dropped connection was already idle\n\n    Meteor.users.update advice.userId,\n      $set:\n        'status.idle': true\n        'status.lastActivity': _.max(_.pluck conns, \"lastActivity\")\n  return\n\n###\n  Multiplex idle/active events to status.idle\n  TODO: Hopefully this is quick because it's all in memory, but we can use indices if it turns out to be slow\n\n  TODO: There is a race condition when switching between tabs, leaving the user inactive while idle goes from one tab to the other.\n  It can probably be smoothed out.\n###\nstatusEvents.on \"connectionIdle\", (advice) ->\n  conns = UserConnections.find(userId: advice.userId).fetch()\n  return unless _.every(conns, (c) -> c.idle)\n  # Set user to idle if all the connections are idle\n  # This will not be the most recent idle across a disconnection, so we use max\n\n  # TODO: the race happens here where everyone was idle when we looked for them but now one of them isn't.\n  Meteor.users.update advice.userId,\n    $set:\n      'status.idle': true\n      'status.lastActivity': _.max(_.pluck conns, \"lastActivity\")\n  return\n\nstatusEvents.on \"connectionActive\", (advice) ->\n  Meteor.users.update advice.userId,\n    $set:\n      'status.idle': false\n    $unset:\n      'status.lastActivity': null\n  return\n\n# Reset online status on startup (users will reconnect)\nonStartup = (selector = {}) ->\n  Meteor.users.update selector,\n    {\n      $set: {\n        \"status.online\": false\n      },\n      $unset: {\n        \"status.idle\": null\n        \"status.lastActivity\": null\n      }\n    },\n    { multi: true }\n\n###\n  Local session modifification functions - also used in testing\n###\n\naddSession = (connection) ->\n  UserConnections.upsert connection.id,\n    $set: {\n      ipAddr: connection.clientAddress\n      userAgent: connection.httpHeaders['user-agent']\n    }\n  return\n\nloginSession = (connection, date, userId) ->\n  UserConnections.upsert connection.id,\n    $set: {\n      userId: userId\n      loginTime: date\n    }\n\n  statusEvents.emit \"connectionLogin\",\n    userId: userId\n    connectionId: connection.id\n    ipAddr: connection.clientAddress\n    userAgent: connection.httpHeaders['user-agent']\n    loginTime: date\n  return\n\n# Possibly trigger a logout event if this connection was previously associated with a user ID\ntryLogoutSession = (connection, date) ->\n  return false unless (conn = UserConnections.findOne({\n    _id: connection.id\n    userId: { $exists: true }\n  }))?\n\n  # Yes, this is actually a user logging out.\n  UserConnections.upsert connection.id,\n    $unset: {\n      userId: null\n      loginTime: null\n    }\n\n  statusEvents.emit \"connectionLogout\",\n    userId: conn.userId\n    connectionId: connection.id\n    lastActivity: conn.lastActivity # If this connection was idle, pass the last activity we saw\n    logoutTime: date\n\nremoveSession = (connection, date) ->\n  tryLogoutSession(connection, date)\n  UserConnections.remove(connection.id)\n  return\n\nidleSession = (connection, date, userId) ->\n  UserConnections.update connection.id,\n    $set: {\n      idle: true\n      lastActivity: date\n    }\n\n  statusEvents.emit \"connectionIdle\",\n    userId: userId\n    connectionId: connection.id\n    lastActivity: date\n  return\n\nactiveSession = (connection, date, userId) ->\n  UserConnections.update connection.id,\n    $set: { idle: false }\n    $unset: { lastActivity: null }\n\n  statusEvents.emit \"connectionActive\",\n    userId: userId\n    connectionId: connection.id\n    lastActivity: date\n  return\n\n###\n  Handlers for various client-side events\n###\nMeteor.startup(onStartup)\n\n# Opening and closing of DDP connections\nMeteor.onConnection (connection) ->\n  addSession(connection)\n\n  connection.onClose ->\n    removeSession(connection, new Date())\n\n# Authentication of a DDP connection\nAccounts.onLogin (info) ->\n  loginSession(info.connection, new Date(), info.user._id)\n\n# pub/sub trick as referenced in http://stackoverflow.com/q/10257958/586086\n# We used this in the past, but still need this to detect logouts on the same connection.\nMeteor.publish null, ->\n  # Return null explicitly if this._session is not available, i.e.:\n  # https://github.com/arunoda/meteor-fast-render/issues/41\n  return [] unless @_session?\n\n  # We're interested in logout events - re-publishes for which a past connection exists\n  tryLogoutSession(@_session.connectionHandle, new Date()) unless @userId?\n\n  return []\n\n# We can use the client's timestamp here because it was sent from a TimeSync\n# value, however we should never trust it for something security dependent.\n# If timestamp is not provided (probably due to a desync), use server time.\nMeteor.methods\n  \"user-status-idle\": (timestamp) ->\n    check(timestamp, Match.OneOf(null, undefined, Date, Number) )\n\n    date = if timestamp? then new Date(timestamp) else new Date()\n    idleSession(@connection, date, @userId)\n    return\n\n  \"user-status-active\": (timestamp) ->\n    check(timestamp, Match.OneOf(null, undefined, Date, Number) )\n\n    # We only use timestamp because it's when we saw activity *on the client*\n    # as opposed to just being notified it. It is probably more accurate even if\n    # a dozen ms off due to the latency of sending it to the server.\n    date = if timestamp? then new Date(timestamp) else new Date()\n    activeSession(@connection, date, @userId)\n    return\n\n# Exported variable\nUserStatus =\n  connections: UserConnections\n  events: statusEvents\n\n# Internal functions, exported for testing\nStatusInternals = {\n  onStartup,\n  addSession,\n  removeSession,\n  loginSession,\n  tryLogoutSession,\n  idleSession,\n  activeSession,\n}\n"]}}]