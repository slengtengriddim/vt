[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar moment;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/momentjs_moment/moment.js                                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n//! moment.js                                                                                                         // 1\n//! version : 2.12.0                                                                                                  // 2\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors                                                        // 3\n//! license : MIT                                                                                                     // 4\n//! momentjs.com                                                                                                      // 5\n                                                                                                                      // 6\n;(function (global, factory) {                                                                                        // 7\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :                       // 8\n    typeof define === 'function' && define.amd ? define(factory) :                                                    // 9\n    global.moment = factory()                                                                                         // 10\n}(this, function () { 'use strict';                                                                                   // 11\n                                                                                                                      // 12\n    var hookCallback;                                                                                                 // 13\n                                                                                                                      // 14\n    function utils_hooks__hooks () {                                                                                  // 15\n        return hookCallback.apply(null, arguments);                                                                   // 16\n    }                                                                                                                 // 17\n                                                                                                                      // 18\n    // This is done to register the method called with moment()                                                       // 19\n    // without creating circular dependencies.                                                                        // 20\n    function setHookCallback (callback) {                                                                             // 21\n        hookCallback = callback;                                                                                      // 22\n    }                                                                                                                 // 23\n                                                                                                                      // 24\n    function isArray(input) {                                                                                         // 25\n        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';                  // 26\n    }                                                                                                                 // 27\n                                                                                                                      // 28\n    function isDate(input) {                                                                                          // 29\n        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';                    // 30\n    }                                                                                                                 // 31\n                                                                                                                      // 32\n    function map(arr, fn) {                                                                                           // 33\n        var res = [], i;                                                                                              // 34\n        for (i = 0; i < arr.length; ++i) {                                                                            // 35\n            res.push(fn(arr[i], i));                                                                                  // 36\n        }                                                                                                             // 37\n        return res;                                                                                                   // 38\n    }                                                                                                                 // 39\n                                                                                                                      // 40\n    function hasOwnProp(a, b) {                                                                                       // 41\n        return Object.prototype.hasOwnProperty.call(a, b);                                                            // 42\n    }                                                                                                                 // 43\n                                                                                                                      // 44\n    function extend(a, b) {                                                                                           // 45\n        for (var i in b) {                                                                                            // 46\n            if (hasOwnProp(b, i)) {                                                                                   // 47\n                a[i] = b[i];                                                                                          // 48\n            }                                                                                                         // 49\n        }                                                                                                             // 50\n                                                                                                                      // 51\n        if (hasOwnProp(b, 'toString')) {                                                                              // 52\n            a.toString = b.toString;                                                                                  // 53\n        }                                                                                                             // 54\n                                                                                                                      // 55\n        if (hasOwnProp(b, 'valueOf')) {                                                                               // 56\n            a.valueOf = b.valueOf;                                                                                    // 57\n        }                                                                                                             // 58\n                                                                                                                      // 59\n        return a;                                                                                                     // 60\n    }                                                                                                                 // 61\n                                                                                                                      // 62\n    function create_utc__createUTC (input, format, locale, strict) {                                                  // 63\n        return createLocalOrUTC(input, format, locale, strict, true).utc();                                           // 64\n    }                                                                                                                 // 65\n                                                                                                                      // 66\n    function defaultParsingFlags() {                                                                                  // 67\n        // We need to deep clone this object.                                                                         // 68\n        return {                                                                                                      // 69\n            empty           : false,                                                                                  // 70\n            unusedTokens    : [],                                                                                     // 71\n            unusedInput     : [],                                                                                     // 72\n            overflow        : -2,                                                                                     // 73\n            charsLeftOver   : 0,                                                                                      // 74\n            nullInput       : false,                                                                                  // 75\n            invalidMonth    : null,                                                                                   // 76\n            invalidFormat   : false,                                                                                  // 77\n            userInvalidated : false,                                                                                  // 78\n            iso             : false                                                                                   // 79\n        };                                                                                                            // 80\n    }                                                                                                                 // 81\n                                                                                                                      // 82\n    function getParsingFlags(m) {                                                                                     // 83\n        if (m._pf == null) {                                                                                          // 84\n            m._pf = defaultParsingFlags();                                                                            // 85\n        }                                                                                                             // 86\n        return m._pf;                                                                                                 // 87\n    }                                                                                                                 // 88\n                                                                                                                      // 89\n    function valid__isValid(m) {                                                                                      // 90\n        if (m._isValid == null) {                                                                                     // 91\n            var flags = getParsingFlags(m);                                                                           // 92\n            m._isValid = !isNaN(m._d.getTime()) &&                                                                    // 93\n                flags.overflow < 0 &&                                                                                 // 94\n                !flags.empty &&                                                                                       // 95\n                !flags.invalidMonth &&                                                                                // 96\n                !flags.invalidWeekday &&                                                                              // 97\n                !flags.nullInput &&                                                                                   // 98\n                !flags.invalidFormat &&                                                                               // 99\n                !flags.userInvalidated;                                                                               // 100\n                                                                                                                      // 101\n            if (m._strict) {                                                                                          // 102\n                m._isValid = m._isValid &&                                                                            // 103\n                    flags.charsLeftOver === 0 &&                                                                      // 104\n                    flags.unusedTokens.length === 0 &&                                                                // 105\n                    flags.bigHour === undefined;                                                                      // 106\n            }                                                                                                         // 107\n        }                                                                                                             // 108\n        return m._isValid;                                                                                            // 109\n    }                                                                                                                 // 110\n                                                                                                                      // 111\n    function valid__createInvalid (flags) {                                                                           // 112\n        var m = create_utc__createUTC(NaN);                                                                           // 113\n        if (flags != null) {                                                                                          // 114\n            extend(getParsingFlags(m), flags);                                                                        // 115\n        }                                                                                                             // 116\n        else {                                                                                                        // 117\n            getParsingFlags(m).userInvalidated = true;                                                                // 118\n        }                                                                                                             // 119\n                                                                                                                      // 120\n        return m;                                                                                                     // 121\n    }                                                                                                                 // 122\n                                                                                                                      // 123\n    function isUndefined(input) {                                                                                     // 124\n        return input === void 0;                                                                                      // 125\n    }                                                                                                                 // 126\n                                                                                                                      // 127\n    // Plugins that add properties should also add the key here (null value),                                         // 128\n    // so we can properly clone ourselves.                                                                            // 129\n    var momentProperties = utils_hooks__hooks.momentProperties = [];                                                  // 130\n                                                                                                                      // 131\n    function copyConfig(to, from) {                                                                                   // 132\n        var i, prop, val;                                                                                             // 133\n                                                                                                                      // 134\n        if (!isUndefined(from._isAMomentObject)) {                                                                    // 135\n            to._isAMomentObject = from._isAMomentObject;                                                              // 136\n        }                                                                                                             // 137\n        if (!isUndefined(from._i)) {                                                                                  // 138\n            to._i = from._i;                                                                                          // 139\n        }                                                                                                             // 140\n        if (!isUndefined(from._f)) {                                                                                  // 141\n            to._f = from._f;                                                                                          // 142\n        }                                                                                                             // 143\n        if (!isUndefined(from._l)) {                                                                                  // 144\n            to._l = from._l;                                                                                          // 145\n        }                                                                                                             // 146\n        if (!isUndefined(from._strict)) {                                                                             // 147\n            to._strict = from._strict;                                                                                // 148\n        }                                                                                                             // 149\n        if (!isUndefined(from._tzm)) {                                                                                // 150\n            to._tzm = from._tzm;                                                                                      // 151\n        }                                                                                                             // 152\n        if (!isUndefined(from._isUTC)) {                                                                              // 153\n            to._isUTC = from._isUTC;                                                                                  // 154\n        }                                                                                                             // 155\n        if (!isUndefined(from._offset)) {                                                                             // 156\n            to._offset = from._offset;                                                                                // 157\n        }                                                                                                             // 158\n        if (!isUndefined(from._pf)) {                                                                                 // 159\n            to._pf = getParsingFlags(from);                                                                           // 160\n        }                                                                                                             // 161\n        if (!isUndefined(from._locale)) {                                                                             // 162\n            to._locale = from._locale;                                                                                // 163\n        }                                                                                                             // 164\n                                                                                                                      // 165\n        if (momentProperties.length > 0) {                                                                            // 166\n            for (i in momentProperties) {                                                                             // 167\n                prop = momentProperties[i];                                                                           // 168\n                val = from[prop];                                                                                     // 169\n                if (!isUndefined(val)) {                                                                              // 170\n                    to[prop] = val;                                                                                   // 171\n                }                                                                                                     // 172\n            }                                                                                                         // 173\n        }                                                                                                             // 174\n                                                                                                                      // 175\n        return to;                                                                                                    // 176\n    }                                                                                                                 // 177\n                                                                                                                      // 178\n    var updateInProgress = false;                                                                                     // 179\n                                                                                                                      // 180\n    // Moment prototype object                                                                                        // 181\n    function Moment(config) {                                                                                         // 182\n        copyConfig(this, config);                                                                                     // 183\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);                                            // 184\n        // Prevent infinite loop in case updateOffset creates new moment                                              // 185\n        // objects.                                                                                                   // 186\n        if (updateInProgress === false) {                                                                             // 187\n            updateInProgress = true;                                                                                  // 188\n            utils_hooks__hooks.updateOffset(this);                                                                    // 189\n            updateInProgress = false;                                                                                 // 190\n        }                                                                                                             // 191\n    }                                                                                                                 // 192\n                                                                                                                      // 193\n    function isMoment (obj) {                                                                                         // 194\n        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);                                // 195\n    }                                                                                                                 // 196\n                                                                                                                      // 197\n    function absFloor (number) {                                                                                      // 198\n        if (number < 0) {                                                                                             // 199\n            return Math.ceil(number);                                                                                 // 200\n        } else {                                                                                                      // 201\n            return Math.floor(number);                                                                                // 202\n        }                                                                                                             // 203\n    }                                                                                                                 // 204\n                                                                                                                      // 205\n    function toInt(argumentForCoercion) {                                                                             // 206\n        var coercedNumber = +argumentForCoercion,                                                                     // 207\n            value = 0;                                                                                                // 208\n                                                                                                                      // 209\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {                                                         // 210\n            value = absFloor(coercedNumber);                                                                          // 211\n        }                                                                                                             // 212\n                                                                                                                      // 213\n        return value;                                                                                                 // 214\n    }                                                                                                                 // 215\n                                                                                                                      // 216\n    // compare two arrays, return the number of differences                                                           // 217\n    function compareArrays(array1, array2, dontConvert) {                                                             // 218\n        var len = Math.min(array1.length, array2.length),                                                             // 219\n            lengthDiff = Math.abs(array1.length - array2.length),                                                     // 220\n            diffs = 0,                                                                                                // 221\n            i;                                                                                                        // 222\n        for (i = 0; i < len; i++) {                                                                                   // 223\n            if ((dontConvert && array1[i] !== array2[i]) ||                                                           // 224\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {                                            // 225\n                diffs++;                                                                                              // 226\n            }                                                                                                         // 227\n        }                                                                                                             // 228\n        return diffs + lengthDiff;                                                                                    // 229\n    }                                                                                                                 // 230\n                                                                                                                      // 231\n    function warn(msg) {                                                                                              // 232\n        if (utils_hooks__hooks.suppressDeprecationWarnings === false &&                                               // 233\n                (typeof console !==  'undefined') && console.warn) {                                                  // 234\n            console.warn('Deprecation warning: ' + msg);                                                              // 235\n        }                                                                                                             // 236\n    }                                                                                                                 // 237\n                                                                                                                      // 238\n    function deprecate(msg, fn) {                                                                                     // 239\n        var firstTime = true;                                                                                         // 240\n                                                                                                                      // 241\n        return extend(function () {                                                                                   // 242\n            if (firstTime) {                                                                                          // 243\n                warn(msg + '\\nArguments: ' + Array.prototype.slice.call(arguments).join(', ') + '\\n' + (new Error()).stack);\n                firstTime = false;                                                                                    // 245\n            }                                                                                                         // 246\n            return fn.apply(this, arguments);                                                                         // 247\n        }, fn);                                                                                                       // 248\n    }                                                                                                                 // 249\n                                                                                                                      // 250\n    var deprecations = {};                                                                                            // 251\n                                                                                                                      // 252\n    function deprecateSimple(name, msg) {                                                                             // 253\n        if (!deprecations[name]) {                                                                                    // 254\n            warn(msg);                                                                                                // 255\n            deprecations[name] = true;                                                                                // 256\n        }                                                                                                             // 257\n    }                                                                                                                 // 258\n                                                                                                                      // 259\n    utils_hooks__hooks.suppressDeprecationWarnings = false;                                                           // 260\n                                                                                                                      // 261\n    function isFunction(input) {                                                                                      // 262\n        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';            // 263\n    }                                                                                                                 // 264\n                                                                                                                      // 265\n    function isObject(input) {                                                                                        // 266\n        return Object.prototype.toString.call(input) === '[object Object]';                                           // 267\n    }                                                                                                                 // 268\n                                                                                                                      // 269\n    function locale_set__set (config) {                                                                               // 270\n        var prop, i;                                                                                                  // 271\n        for (i in config) {                                                                                           // 272\n            prop = config[i];                                                                                         // 273\n            if (isFunction(prop)) {                                                                                   // 274\n                this[i] = prop;                                                                                       // 275\n            } else {                                                                                                  // 276\n                this['_' + i] = prop;                                                                                 // 277\n            }                                                                                                         // 278\n        }                                                                                                             // 279\n        this._config = config;                                                                                        // 280\n        // Lenient ordinal parsing accepts just a number in addition to                                               // 281\n        // number + (possibly) stuff coming from _ordinalParseLenient.                                                // 282\n        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\\d{1,2}/).source);                 // 283\n    }                                                                                                                 // 284\n                                                                                                                      // 285\n    function mergeConfigs(parentConfig, childConfig) {                                                                // 286\n        var res = extend({}, parentConfig), prop;                                                                     // 287\n        for (prop in childConfig) {                                                                                   // 288\n            if (hasOwnProp(childConfig, prop)) {                                                                      // 289\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {                                    // 290\n                    res[prop] = {};                                                                                   // 291\n                    extend(res[prop], parentConfig[prop]);                                                            // 292\n                    extend(res[prop], childConfig[prop]);                                                             // 293\n                } else if (childConfig[prop] != null) {                                                               // 294\n                    res[prop] = childConfig[prop];                                                                    // 295\n                } else {                                                                                              // 296\n                    delete res[prop];                                                                                 // 297\n                }                                                                                                     // 298\n            }                                                                                                         // 299\n        }                                                                                                             // 300\n        return res;                                                                                                   // 301\n    }                                                                                                                 // 302\n                                                                                                                      // 303\n    function Locale(config) {                                                                                         // 304\n        if (config != null) {                                                                                         // 305\n            this.set(config);                                                                                         // 306\n        }                                                                                                             // 307\n    }                                                                                                                 // 308\n                                                                                                                      // 309\n    // internal storage for locale config files                                                                       // 310\n    var locales = {};                                                                                                 // 311\n    var globalLocale;                                                                                                 // 312\n                                                                                                                      // 313\n    function normalizeLocale(key) {                                                                                   // 314\n        return key ? key.toLowerCase().replace('_', '-') : key;                                                       // 315\n    }                                                                                                                 // 316\n                                                                                                                      // 317\n    // pick the locale from the array                                                                                 // 318\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each                      // 319\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {                                                                                    // 321\n        var i = 0, j, next, locale, split;                                                                            // 322\n                                                                                                                      // 323\n        while (i < names.length) {                                                                                    // 324\n            split = normalizeLocale(names[i]).split('-');                                                             // 325\n            j = split.length;                                                                                         // 326\n            next = normalizeLocale(names[i + 1]);                                                                     // 327\n            next = next ? next.split('-') : null;                                                                     // 328\n            while (j > 0) {                                                                                           // 329\n                locale = loadLocale(split.slice(0, j).join('-'));                                                     // 330\n                if (locale) {                                                                                         // 331\n                    return locale;                                                                                    // 332\n                }                                                                                                     // 333\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {                          // 334\n                    //the next array item is better than a shallower substring of this one                            // 335\n                    break;                                                                                            // 336\n                }                                                                                                     // 337\n                j--;                                                                                                  // 338\n            }                                                                                                         // 339\n            i++;                                                                                                      // 340\n        }                                                                                                             // 341\n        return null;                                                                                                  // 342\n    }                                                                                                                 // 343\n                                                                                                                      // 344\n    function loadLocale(name) {                                                                                       // 345\n        var oldLocale = null;                                                                                         // 346\n        // TODO: Find a better way to register and load all the locales in Node                                       // 347\n        if (!locales[name] && (typeof module !== 'undefined') &&                                                      // 348\n                module && module.exports) {                                                                           // 349\n            try {                                                                                                     // 350\n                oldLocale = globalLocale._abbr;                                                                       // 351\n                require('./locale/' + name);                                                                          // 352\n                // because defineLocale currently also sets the global locale, we                                     // 353\n                // want to undo that for lazy loaded locales                                                          // 354\n                locale_locales__getSetGlobalLocale(oldLocale);                                                        // 355\n            } catch (e) { }                                                                                           // 356\n        }                                                                                                             // 357\n        return locales[name];                                                                                         // 358\n    }                                                                                                                 // 359\n                                                                                                                      // 360\n    // This function will load locale and then set the global locale.  If                                             // 361\n    // no arguments are passed in, it will simply return the current global                                           // 362\n    // locale key.                                                                                                    // 363\n    function locale_locales__getSetGlobalLocale (key, values) {                                                       // 364\n        var data;                                                                                                     // 365\n        if (key) {                                                                                                    // 366\n            if (isUndefined(values)) {                                                                                // 367\n                data = locale_locales__getLocale(key);                                                                // 368\n            }                                                                                                         // 369\n            else {                                                                                                    // 370\n                data = defineLocale(key, values);                                                                     // 371\n            }                                                                                                         // 372\n                                                                                                                      // 373\n            if (data) {                                                                                               // 374\n                // moment.duration._locale = moment._locale = data;                                                   // 375\n                globalLocale = data;                                                                                  // 376\n            }                                                                                                         // 377\n        }                                                                                                             // 378\n                                                                                                                      // 379\n        return globalLocale._abbr;                                                                                    // 380\n    }                                                                                                                 // 381\n                                                                                                                      // 382\n    function defineLocale (name, config) {                                                                            // 383\n        if (config !== null) {                                                                                        // 384\n            config.abbr = name;                                                                                       // 385\n            if (locales[name] != null) {                                                                              // 386\n                deprecateSimple('defineLocaleOverride',                                                               // 387\n                        'use moment.updateLocale(localeName, config) to change ' +                                    // 388\n                        'an existing locale. moment.defineLocale(localeName, ' +                                      // 389\n                        'config) should only be used for creating a new locale');                                     // 390\n                config = mergeConfigs(locales[name]._config, config);                                                 // 391\n            } else if (config.parentLocale != null) {                                                                 // 392\n                if (locales[config.parentLocale] != null) {                                                           // 393\n                    config = mergeConfigs(locales[config.parentLocale]._config, config);                              // 394\n                } else {                                                                                              // 395\n                    // treat as if there is no base config                                                            // 396\n                    deprecateSimple('parentLocaleUndefined',                                                          // 397\n                            'specified parentLocale is not defined yet');                                             // 398\n                }                                                                                                     // 399\n            }                                                                                                         // 400\n            locales[name] = new Locale(config);                                                                       // 401\n                                                                                                                      // 402\n            // backwards compat for now: also set the locale                                                          // 403\n            locale_locales__getSetGlobalLocale(name);                                                                 // 404\n                                                                                                                      // 405\n            return locales[name];                                                                                     // 406\n        } else {                                                                                                      // 407\n            // useful for testing                                                                                     // 408\n            delete locales[name];                                                                                     // 409\n            return null;                                                                                              // 410\n        }                                                                                                             // 411\n    }                                                                                                                 // 412\n                                                                                                                      // 413\n    function updateLocale(name, config) {                                                                             // 414\n        if (config != null) {                                                                                         // 415\n            var locale;                                                                                               // 416\n            if (locales[name] != null) {                                                                              // 417\n                config = mergeConfigs(locales[name]._config, config);                                                 // 418\n            }                                                                                                         // 419\n            locale = new Locale(config);                                                                              // 420\n            locale.parentLocale = locales[name];                                                                      // 421\n            locales[name] = locale;                                                                                   // 422\n                                                                                                                      // 423\n            // backwards compat for now: also set the locale                                                          // 424\n            locale_locales__getSetGlobalLocale(name);                                                                 // 425\n        } else {                                                                                                      // 426\n            // pass null for config to unupdate, useful for tests                                                     // 427\n            if (locales[name] != null) {                                                                              // 428\n                if (locales[name].parentLocale != null) {                                                             // 429\n                    locales[name] = locales[name].parentLocale;                                                       // 430\n                } else if (locales[name] != null) {                                                                   // 431\n                    delete locales[name];                                                                             // 432\n                }                                                                                                     // 433\n            }                                                                                                         // 434\n        }                                                                                                             // 435\n        return locales[name];                                                                                         // 436\n    }                                                                                                                 // 437\n                                                                                                                      // 438\n    // returns locale data                                                                                            // 439\n    function locale_locales__getLocale (key) {                                                                        // 440\n        var locale;                                                                                                   // 441\n                                                                                                                      // 442\n        if (key && key._locale && key._locale._abbr) {                                                                // 443\n            key = key._locale._abbr;                                                                                  // 444\n        }                                                                                                             // 445\n                                                                                                                      // 446\n        if (!key) {                                                                                                   // 447\n            return globalLocale;                                                                                      // 448\n        }                                                                                                             // 449\n                                                                                                                      // 450\n        if (!isArray(key)) {                                                                                          // 451\n            //short-circuit everything else                                                                           // 452\n            locale = loadLocale(key);                                                                                 // 453\n            if (locale) {                                                                                             // 454\n                return locale;                                                                                        // 455\n            }                                                                                                         // 456\n            key = [key];                                                                                              // 457\n        }                                                                                                             // 458\n                                                                                                                      // 459\n        return chooseLocale(key);                                                                                     // 460\n    }                                                                                                                 // 461\n                                                                                                                      // 462\n    function locale_locales__listLocales() {                                                                          // 463\n        return Object.keys(locales);                                                                                  // 464\n    }                                                                                                                 // 465\n                                                                                                                      // 466\n    var aliases = {};                                                                                                 // 467\n                                                                                                                      // 468\n    function addUnitAlias (unit, shorthand) {                                                                         // 469\n        var lowerCase = unit.toLowerCase();                                                                           // 470\n        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;                                    // 471\n    }                                                                                                                 // 472\n                                                                                                                      // 473\n    function normalizeUnits(units) {                                                                                  // 474\n        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;                // 475\n    }                                                                                                                 // 476\n                                                                                                                      // 477\n    function normalizeObjectUnits(inputObject) {                                                                      // 478\n        var normalizedInput = {},                                                                                     // 479\n            normalizedProp,                                                                                           // 480\n            prop;                                                                                                     // 481\n                                                                                                                      // 482\n        for (prop in inputObject) {                                                                                   // 483\n            if (hasOwnProp(inputObject, prop)) {                                                                      // 484\n                normalizedProp = normalizeUnits(prop);                                                                // 485\n                if (normalizedProp) {                                                                                 // 486\n                    normalizedInput[normalizedProp] = inputObject[prop];                                              // 487\n                }                                                                                                     // 488\n            }                                                                                                         // 489\n        }                                                                                                             // 490\n                                                                                                                      // 491\n        return normalizedInput;                                                                                       // 492\n    }                                                                                                                 // 493\n                                                                                                                      // 494\n    function makeGetSet (unit, keepTime) {                                                                            // 495\n        return function (value) {                                                                                     // 496\n            if (value != null) {                                                                                      // 497\n                get_set__set(this, unit, value);                                                                      // 498\n                utils_hooks__hooks.updateOffset(this, keepTime);                                                      // 499\n                return this;                                                                                          // 500\n            } else {                                                                                                  // 501\n                return get_set__get(this, unit);                                                                      // 502\n            }                                                                                                         // 503\n        };                                                                                                            // 504\n    }                                                                                                                 // 505\n                                                                                                                      // 506\n    function get_set__get (mom, unit) {                                                                               // 507\n        return mom.isValid() ?                                                                                        // 508\n            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;                                                 // 509\n    }                                                                                                                 // 510\n                                                                                                                      // 511\n    function get_set__set (mom, unit, value) {                                                                        // 512\n        if (mom.isValid()) {                                                                                          // 513\n            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);                                                  // 514\n        }                                                                                                             // 515\n    }                                                                                                                 // 516\n                                                                                                                      // 517\n    // MOMENTS                                                                                                        // 518\n                                                                                                                      // 519\n    function getSet (units, value) {                                                                                  // 520\n        var unit;                                                                                                     // 521\n        if (typeof units === 'object') {                                                                              // 522\n            for (unit in units) {                                                                                     // 523\n                this.set(unit, units[unit]);                                                                          // 524\n            }                                                                                                         // 525\n        } else {                                                                                                      // 526\n            units = normalizeUnits(units);                                                                            // 527\n            if (isFunction(this[units])) {                                                                            // 528\n                return this[units](value);                                                                            // 529\n            }                                                                                                         // 530\n        }                                                                                                             // 531\n        return this;                                                                                                  // 532\n    }                                                                                                                 // 533\n                                                                                                                      // 534\n    function zeroFill(number, targetLength, forceSign) {                                                              // 535\n        var absNumber = '' + Math.abs(number),                                                                        // 536\n            zerosToFill = targetLength - absNumber.length,                                                            // 537\n            sign = number >= 0;                                                                                       // 538\n        return (sign ? (forceSign ? '+' : '') : '-') +                                                                // 539\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;                                  // 540\n    }                                                                                                                 // 541\n                                                                                                                      // 542\n    var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n                                                                                                                      // 544\n    var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;                                         // 545\n                                                                                                                      // 546\n    var formatFunctions = {};                                                                                         // 547\n                                                                                                                      // 548\n    var formatTokenFunctions = {};                                                                                    // 549\n                                                                                                                      // 550\n    // token:    'M'                                                                                                  // 551\n    // padded:   ['MM', 2]                                                                                            // 552\n    // ordinal:  'Mo'                                                                                                 // 553\n    // callback: function () { this.month() + 1 }                                                                     // 554\n    function addFormatToken (token, padded, ordinal, callback) {                                                      // 555\n        var func = callback;                                                                                          // 556\n        if (typeof callback === 'string') {                                                                           // 557\n            func = function () {                                                                                      // 558\n                return this[callback]();                                                                              // 559\n            };                                                                                                        // 560\n        }                                                                                                             // 561\n        if (token) {                                                                                                  // 562\n            formatTokenFunctions[token] = func;                                                                       // 563\n        }                                                                                                             // 564\n        if (padded) {                                                                                                 // 565\n            formatTokenFunctions[padded[0]] = function () {                                                           // 566\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);                                   // 567\n            };                                                                                                        // 568\n        }                                                                                                             // 569\n        if (ordinal) {                                                                                                // 570\n            formatTokenFunctions[ordinal] = function () {                                                             // 571\n                return this.localeData().ordinal(func.apply(this, arguments), token);                                 // 572\n            };                                                                                                        // 573\n        }                                                                                                             // 574\n    }                                                                                                                 // 575\n                                                                                                                      // 576\n    function removeFormattingTokens(input) {                                                                          // 577\n        if (input.match(/\\[[\\s\\S]/)) {                                                                                // 578\n            return input.replace(/^\\[|\\]$/g, '');                                                                     // 579\n        }                                                                                                             // 580\n        return input.replace(/\\\\/g, '');                                                                              // 581\n    }                                                                                                                 // 582\n                                                                                                                      // 583\n    function makeFormatFunction(format) {                                                                             // 584\n        var array = format.match(formattingTokens), i, length;                                                        // 585\n                                                                                                                      // 586\n        for (i = 0, length = array.length; i < length; i++) {                                                         // 587\n            if (formatTokenFunctions[array[i]]) {                                                                     // 588\n                array[i] = formatTokenFunctions[array[i]];                                                            // 589\n            } else {                                                                                                  // 590\n                array[i] = removeFormattingTokens(array[i]);                                                          // 591\n            }                                                                                                         // 592\n        }                                                                                                             // 593\n                                                                                                                      // 594\n        return function (mom) {                                                                                       // 595\n            var output = '';                                                                                          // 596\n            for (i = 0; i < length; i++) {                                                                            // 597\n                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];                       // 598\n            }                                                                                                         // 599\n            return output;                                                                                            // 600\n        };                                                                                                            // 601\n    }                                                                                                                 // 602\n                                                                                                                      // 603\n    // format date using native date object                                                                           // 604\n    function formatMoment(m, format) {                                                                                // 605\n        if (!m.isValid()) {                                                                                           // 606\n            return m.localeData().invalidDate();                                                                      // 607\n        }                                                                                                             // 608\n                                                                                                                      // 609\n        format = expandFormat(format, m.localeData());                                                                // 610\n        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);                              // 611\n                                                                                                                      // 612\n        return formatFunctions[format](m);                                                                            // 613\n    }                                                                                                                 // 614\n                                                                                                                      // 615\n    function expandFormat(format, locale) {                                                                           // 616\n        var i = 5;                                                                                                    // 617\n                                                                                                                      // 618\n        function replaceLongDateFormatTokens(input) {                                                                 // 619\n            return locale.longDateFormat(input) || input;                                                             // 620\n        }                                                                                                             // 621\n                                                                                                                      // 622\n        localFormattingTokens.lastIndex = 0;                                                                          // 623\n        while (i >= 0 && localFormattingTokens.test(format)) {                                                        // 624\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);                              // 625\n            localFormattingTokens.lastIndex = 0;                                                                      // 626\n            i -= 1;                                                                                                   // 627\n        }                                                                                                             // 628\n                                                                                                                      // 629\n        return format;                                                                                                // 630\n    }                                                                                                                 // 631\n                                                                                                                      // 632\n    var match1         = /\\d/;            //       0 - 9                                                              // 633\n    var match2         = /\\d\\d/;          //      00 - 99                                                             // 634\n    var match3         = /\\d{3}/;         //     000 - 999                                                            // 635\n    var match4         = /\\d{4}/;         //    0000 - 9999                                                           // 636\n    var match6         = /[+-]?\\d{6}/;    // -999999 - 999999                                                         // 637\n    var match1to2      = /\\d\\d?/;         //       0 - 99                                                             // 638\n    var match3to4      = /\\d\\d\\d\\d?/;     //     999 - 9999                                                           // 639\n    var match5to6      = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999                                                         // 640\n    var match1to3      = /\\d{1,3}/;       //       0 - 999                                                            // 641\n    var match1to4      = /\\d{1,4}/;       //       0 - 9999                                                           // 642\n    var match1to6      = /[+-]?\\d{1,6}/;  // -999999 - 999999                                                         // 643\n                                                                                                                      // 644\n    var matchUnsigned  = /\\d+/;           //       0 - inf                                                            // 645\n    var matchSigned    = /[+-]?\\d+/;      //    -inf - inf                                                            // 646\n                                                                                                                      // 647\n    var matchOffset    = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z                                      // 648\n    var matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z                       // 649\n                                                                                                                      // 650\n    var matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123                                           // 651\n                                                                                                                      // 652\n    // any word (or two) characters or numbers including two/three word month in arabic.                              // 653\n    // includes scottish gaelic two word and hyphenated months                                                        // 654\n    var matchWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i;\n                                                                                                                      // 656\n                                                                                                                      // 657\n    var regexes = {};                                                                                                 // 658\n                                                                                                                      // 659\n    function addRegexToken (token, regex, strictRegex) {                                                              // 660\n        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {                                // 661\n            return (isStrict && strictRegex) ? strictRegex : regex;                                                   // 662\n        };                                                                                                            // 663\n    }                                                                                                                 // 664\n                                                                                                                      // 665\n    function getParseRegexForToken (token, config) {                                                                  // 666\n        if (!hasOwnProp(regexes, token)) {                                                                            // 667\n            return new RegExp(unescapeFormat(token));                                                                 // 668\n        }                                                                                                             // 669\n                                                                                                                      // 670\n        return regexes[token](config._strict, config._locale);                                                        // 671\n    }                                                                                                                 // 672\n                                                                                                                      // 673\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript           // 674\n    function unescapeFormat(s) {                                                                                      // 675\n        return regexEscape(s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n            return p1 || p2 || p3 || p4;                                                                              // 677\n        }));                                                                                                          // 678\n    }                                                                                                                 // 679\n                                                                                                                      // 680\n    function regexEscape(s) {                                                                                         // 681\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');                                                           // 682\n    }                                                                                                                 // 683\n                                                                                                                      // 684\n    var tokens = {};                                                                                                  // 685\n                                                                                                                      // 686\n    function addParseToken (token, callback) {                                                                        // 687\n        var i, func = callback;                                                                                       // 688\n        if (typeof token === 'string') {                                                                              // 689\n            token = [token];                                                                                          // 690\n        }                                                                                                             // 691\n        if (typeof callback === 'number') {                                                                           // 692\n            func = function (input, array) {                                                                          // 693\n                array[callback] = toInt(input);                                                                       // 694\n            };                                                                                                        // 695\n        }                                                                                                             // 696\n        for (i = 0; i < token.length; i++) {                                                                          // 697\n            tokens[token[i]] = func;                                                                                  // 698\n        }                                                                                                             // 699\n    }                                                                                                                 // 700\n                                                                                                                      // 701\n    function addWeekParseToken (token, callback) {                                                                    // 702\n        addParseToken(token, function (input, array, config, token) {                                                 // 703\n            config._w = config._w || {};                                                                              // 704\n            callback(input, config._w, config, token);                                                                // 705\n        });                                                                                                           // 706\n    }                                                                                                                 // 707\n                                                                                                                      // 708\n    function addTimeToArrayFromToken(token, input, config) {                                                          // 709\n        if (input != null && hasOwnProp(tokens, token)) {                                                             // 710\n            tokens[token](input, config._a, config, token);                                                           // 711\n        }                                                                                                             // 712\n    }                                                                                                                 // 713\n                                                                                                                      // 714\n    var YEAR = 0;                                                                                                     // 715\n    var MONTH = 1;                                                                                                    // 716\n    var DATE = 2;                                                                                                     // 717\n    var HOUR = 3;                                                                                                     // 718\n    var MINUTE = 4;                                                                                                   // 719\n    var SECOND = 5;                                                                                                   // 720\n    var MILLISECOND = 6;                                                                                              // 721\n    var WEEK = 7;                                                                                                     // 722\n    var WEEKDAY = 8;                                                                                                  // 723\n                                                                                                                      // 724\n    function daysInMonth(year, month) {                                                                               // 725\n        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();                                                   // 726\n    }                                                                                                                 // 727\n                                                                                                                      // 728\n    // FORMATTING                                                                                                     // 729\n                                                                                                                      // 730\n    addFormatToken('M', ['MM', 2], 'Mo', function () {                                                                // 731\n        return this.month() + 1;                                                                                      // 732\n    });                                                                                                               // 733\n                                                                                                                      // 734\n    addFormatToken('MMM', 0, 0, function (format) {                                                                   // 735\n        return this.localeData().monthsShort(this, format);                                                           // 736\n    });                                                                                                               // 737\n                                                                                                                      // 738\n    addFormatToken('MMMM', 0, 0, function (format) {                                                                  // 739\n        return this.localeData().months(this, format);                                                                // 740\n    });                                                                                                               // 741\n                                                                                                                      // 742\n    // ALIASES                                                                                                        // 743\n                                                                                                                      // 744\n    addUnitAlias('month', 'M');                                                                                       // 745\n                                                                                                                      // 746\n    // PARSING                                                                                                        // 747\n                                                                                                                      // 748\n    addRegexToken('M',    match1to2);                                                                                 // 749\n    addRegexToken('MM',   match1to2, match2);                                                                         // 750\n    addRegexToken('MMM',  function (isStrict, locale) {                                                               // 751\n        return locale.monthsShortRegex(isStrict);                                                                     // 752\n    });                                                                                                               // 753\n    addRegexToken('MMMM', function (isStrict, locale) {                                                               // 754\n        return locale.monthsRegex(isStrict);                                                                          // 755\n    });                                                                                                               // 756\n                                                                                                                      // 757\n    addParseToken(['M', 'MM'], function (input, array) {                                                              // 758\n        array[MONTH] = toInt(input) - 1;                                                                              // 759\n    });                                                                                                               // 760\n                                                                                                                      // 761\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {                                           // 762\n        var month = config._locale.monthsParse(input, token, config._strict);                                         // 763\n        // if we didn't find a month name, mark the date as invalid.                                                  // 764\n        if (month != null) {                                                                                          // 765\n            array[MONTH] = month;                                                                                     // 766\n        } else {                                                                                                      // 767\n            getParsingFlags(config).invalidMonth = input;                                                             // 768\n        }                                                                                                             // 769\n    });                                                                                                               // 770\n                                                                                                                      // 771\n    // LOCALES                                                                                                        // 772\n                                                                                                                      // 773\n    var MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s+)+MMMM?/;                                                          // 774\n    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\n    function localeMonths (m, format) {                                                                               // 776\n        return isArray(this._months) ? this._months[m.month()] :                                                      // 777\n            this._months[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];                         // 778\n    }                                                                                                                 // 779\n                                                                                                                      // 780\n    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');                      // 781\n    function localeMonthsShort (m, format) {                                                                          // 782\n        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :                                            // 783\n            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];                    // 784\n    }                                                                                                                 // 785\n                                                                                                                      // 786\n    function localeMonthsParse (monthName, format, strict) {                                                          // 787\n        var i, mom, regex;                                                                                            // 788\n                                                                                                                      // 789\n        if (!this._monthsParse) {                                                                                     // 790\n            this._monthsParse = [];                                                                                   // 791\n            this._longMonthsParse = [];                                                                               // 792\n            this._shortMonthsParse = [];                                                                              // 793\n        }                                                                                                             // 794\n                                                                                                                      // 795\n        for (i = 0; i < 12; i++) {                                                                                    // 796\n            // make the regex if we don't have it already                                                             // 797\n            mom = create_utc__createUTC([2000, i]);                                                                   // 798\n            if (strict && !this._longMonthsParse[i]) {                                                                // 799\n                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');        // 800\n                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');  // 801\n            }                                                                                                         // 802\n            if (!strict && !this._monthsParse[i]) {                                                                   // 803\n                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');                                // 804\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');                                       // 805\n            }                                                                                                         // 806\n            // test the regex                                                                                         // 807\n            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {                            // 808\n                return i;                                                                                             // 809\n            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {                     // 810\n                return i;                                                                                             // 811\n            } else if (!strict && this._monthsParse[i].test(monthName)) {                                             // 812\n                return i;                                                                                             // 813\n            }                                                                                                         // 814\n        }                                                                                                             // 815\n    }                                                                                                                 // 816\n                                                                                                                      // 817\n    // MOMENTS                                                                                                        // 818\n                                                                                                                      // 819\n    function setMonth (mom, value) {                                                                                  // 820\n        var dayOfMonth;                                                                                               // 821\n                                                                                                                      // 822\n        if (!mom.isValid()) {                                                                                         // 823\n            // No op                                                                                                  // 824\n            return mom;                                                                                               // 825\n        }                                                                                                             // 826\n                                                                                                                      // 827\n        if (typeof value === 'string') {                                                                              // 828\n            if (/^\\d+$/.test(value)) {                                                                                // 829\n                value = toInt(value);                                                                                 // 830\n            } else {                                                                                                  // 831\n                value = mom.localeData().monthsParse(value);                                                          // 832\n                // TODO: Another silent failure?                                                                      // 833\n                if (typeof value !== 'number') {                                                                      // 834\n                    return mom;                                                                                       // 835\n                }                                                                                                     // 836\n            }                                                                                                         // 837\n        }                                                                                                             // 838\n                                                                                                                      // 839\n        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));                                            // 840\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);                                       // 841\n        return mom;                                                                                                   // 842\n    }                                                                                                                 // 843\n                                                                                                                      // 844\n    function getSetMonth (value) {                                                                                    // 845\n        if (value != null) {                                                                                          // 846\n            setMonth(this, value);                                                                                    // 847\n            utils_hooks__hooks.updateOffset(this, true);                                                              // 848\n            return this;                                                                                              // 849\n        } else {                                                                                                      // 850\n            return get_set__get(this, 'Month');                                                                       // 851\n        }                                                                                                             // 852\n    }                                                                                                                 // 853\n                                                                                                                      // 854\n    function getDaysInMonth () {                                                                                      // 855\n        return daysInMonth(this.year(), this.month());                                                                // 856\n    }                                                                                                                 // 857\n                                                                                                                      // 858\n    var defaultMonthsShortRegex = matchWord;                                                                          // 859\n    function monthsShortRegex (isStrict) {                                                                            // 860\n        if (this._monthsParseExact) {                                                                                 // 861\n            if (!hasOwnProp(this, '_monthsRegex')) {                                                                  // 862\n                computeMonthsParse.call(this);                                                                        // 863\n            }                                                                                                         // 864\n            if (isStrict) {                                                                                           // 865\n                return this._monthsShortStrictRegex;                                                                  // 866\n            } else {                                                                                                  // 867\n                return this._monthsShortRegex;                                                                        // 868\n            }                                                                                                         // 869\n        } else {                                                                                                      // 870\n            return this._monthsShortStrictRegex && isStrict ?                                                         // 871\n                this._monthsShortStrictRegex : this._monthsShortRegex;                                                // 872\n        }                                                                                                             // 873\n    }                                                                                                                 // 874\n                                                                                                                      // 875\n    var defaultMonthsRegex = matchWord;                                                                               // 876\n    function monthsRegex (isStrict) {                                                                                 // 877\n        if (this._monthsParseExact) {                                                                                 // 878\n            if (!hasOwnProp(this, '_monthsRegex')) {                                                                  // 879\n                computeMonthsParse.call(this);                                                                        // 880\n            }                                                                                                         // 881\n            if (isStrict) {                                                                                           // 882\n                return this._monthsStrictRegex;                                                                       // 883\n            } else {                                                                                                  // 884\n                return this._monthsRegex;                                                                             // 885\n            }                                                                                                         // 886\n        } else {                                                                                                      // 887\n            return this._monthsStrictRegex && isStrict ?                                                              // 888\n                this._monthsStrictRegex : this._monthsRegex;                                                          // 889\n        }                                                                                                             // 890\n    }                                                                                                                 // 891\n                                                                                                                      // 892\n    function computeMonthsParse () {                                                                                  // 893\n        function cmpLenRev(a, b) {                                                                                    // 894\n            return b.length - a.length;                                                                               // 895\n        }                                                                                                             // 896\n                                                                                                                      // 897\n        var shortPieces = [], longPieces = [], mixedPieces = [],                                                      // 898\n            i, mom;                                                                                                   // 899\n        for (i = 0; i < 12; i++) {                                                                                    // 900\n            // make the regex if we don't have it already                                                             // 901\n            mom = create_utc__createUTC([2000, i]);                                                                   // 902\n            shortPieces.push(this.monthsShort(mom, ''));                                                              // 903\n            longPieces.push(this.months(mom, ''));                                                                    // 904\n            mixedPieces.push(this.months(mom, ''));                                                                   // 905\n            mixedPieces.push(this.monthsShort(mom, ''));                                                              // 906\n        }                                                                                                             // 907\n        // Sorting makes sure if one month (or abbr) is a prefix of another it                                        // 908\n        // will match the longer piece.                                                                               // 909\n        shortPieces.sort(cmpLenRev);                                                                                  // 910\n        longPieces.sort(cmpLenRev);                                                                                   // 911\n        mixedPieces.sort(cmpLenRev);                                                                                  // 912\n        for (i = 0; i < 12; i++) {                                                                                    // 913\n            shortPieces[i] = regexEscape(shortPieces[i]);                                                             // 914\n            longPieces[i] = regexEscape(longPieces[i]);                                                               // 915\n            mixedPieces[i] = regexEscape(mixedPieces[i]);                                                             // 916\n        }                                                                                                             // 917\n                                                                                                                      // 918\n        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');                                      // 919\n        this._monthsShortRegex = this._monthsRegex;                                                                   // 920\n        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')$', 'i');                                // 921\n        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')$', 'i');                          // 922\n    }                                                                                                                 // 923\n                                                                                                                      // 924\n    function checkOverflow (m) {                                                                                      // 925\n        var overflow;                                                                                                 // 926\n        var a = m._a;                                                                                                 // 927\n                                                                                                                      // 928\n        if (a && getParsingFlags(m).overflow === -2) {                                                                // 929\n            overflow =                                                                                                // 930\n                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :                                                  // 931\n                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :                        // 932\n                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\n                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :                                                 // 934\n                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :                                                 // 935\n                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :                                            // 936\n                -1;                                                                                                   // 937\n                                                                                                                      // 938\n            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {                      // 939\n                overflow = DATE;                                                                                      // 940\n            }                                                                                                         // 941\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {                                               // 942\n                overflow = WEEK;                                                                                      // 943\n            }                                                                                                         // 944\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {                                             // 945\n                overflow = WEEKDAY;                                                                                   // 946\n            }                                                                                                         // 947\n                                                                                                                      // 948\n            getParsingFlags(m).overflow = overflow;                                                                   // 949\n        }                                                                                                             // 950\n                                                                                                                      // 951\n        return m;                                                                                                     // 952\n    }                                                                                                                 // 953\n                                                                                                                      // 954\n    // iso 8601 regex                                                                                                 // 955\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)      // 956\n    var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?/;\n    var basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?/;\n                                                                                                                      // 959\n    var tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;                                                                            // 960\n                                                                                                                      // 961\n    var isoDates = [                                                                                                  // 962\n        ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],                                                                      // 963\n        ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],                                                                            // 964\n        ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],                                                                           // 965\n        ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],                                                                         // 966\n        ['YYYY-DDD', /\\d{4}-\\d{3}/],                                                                                  // 967\n        ['YYYY-MM', /\\d{4}-\\d\\d/, false],                                                                             // 968\n        ['YYYYYYMMDD', /[+-]\\d{10}/],                                                                                 // 969\n        ['YYYYMMDD', /\\d{8}/],                                                                                        // 970\n        // YYYYMM is NOT allowed by the standard                                                                      // 971\n        ['GGGG[W]WWE', /\\d{4}W\\d{3}/],                                                                                // 972\n        ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],                                                                          // 973\n        ['YYYYDDD', /\\d{7}/]                                                                                          // 974\n    ];                                                                                                                // 975\n                                                                                                                      // 976\n    // iso time formats and regexes                                                                                   // 977\n    var isoTimes = [                                                                                                  // 978\n        ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],                                                                     // 979\n        ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],                                                                      // 980\n        ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],                                                                               // 981\n        ['HH:mm', /\\d\\d:\\d\\d/],                                                                                       // 982\n        ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],                                                                         // 983\n        ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],                                                                          // 984\n        ['HHmmss', /\\d\\d\\d\\d\\d\\d/],                                                                                   // 985\n        ['HHmm', /\\d\\d\\d\\d/],                                                                                         // 986\n        ['HH', /\\d\\d/]                                                                                                // 987\n    ];                                                                                                                // 988\n                                                                                                                      // 989\n    var aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;                                                                      // 990\n                                                                                                                      // 991\n    // date from iso format                                                                                           // 992\n    function configFromISO(config) {                                                                                  // 993\n        var i, l,                                                                                                     // 994\n            string = config._i,                                                                                       // 995\n            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),                                      // 996\n            allowTime, dateFormat, timeFormat, tzFormat;                                                              // 997\n                                                                                                                      // 998\n        if (match) {                                                                                                  // 999\n            getParsingFlags(config).iso = true;                                                                       // 1000\n                                                                                                                      // 1001\n            for (i = 0, l = isoDates.length; i < l; i++) {                                                            // 1002\n                if (isoDates[i][1].exec(match[1])) {                                                                  // 1003\n                    dateFormat = isoDates[i][0];                                                                      // 1004\n                    allowTime = isoDates[i][2] !== false;                                                             // 1005\n                    break;                                                                                            // 1006\n                }                                                                                                     // 1007\n            }                                                                                                         // 1008\n            if (dateFormat == null) {                                                                                 // 1009\n                config._isValid = false;                                                                              // 1010\n                return;                                                                                               // 1011\n            }                                                                                                         // 1012\n            if (match[3]) {                                                                                           // 1013\n                for (i = 0, l = isoTimes.length; i < l; i++) {                                                        // 1014\n                    if (isoTimes[i][1].exec(match[3])) {                                                              // 1015\n                        // match[2] should be 'T' or space                                                            // 1016\n                        timeFormat = (match[2] || ' ') + isoTimes[i][0];                                              // 1017\n                        break;                                                                                        // 1018\n                    }                                                                                                 // 1019\n                }                                                                                                     // 1020\n                if (timeFormat == null) {                                                                             // 1021\n                    config._isValid = false;                                                                          // 1022\n                    return;                                                                                           // 1023\n                }                                                                                                     // 1024\n            }                                                                                                         // 1025\n            if (!allowTime && timeFormat != null) {                                                                   // 1026\n                config._isValid = false;                                                                              // 1027\n                return;                                                                                               // 1028\n            }                                                                                                         // 1029\n            if (match[4]) {                                                                                           // 1030\n                if (tzRegex.exec(match[4])) {                                                                         // 1031\n                    tzFormat = 'Z';                                                                                   // 1032\n                } else {                                                                                              // 1033\n                    config._isValid = false;                                                                          // 1034\n                    return;                                                                                           // 1035\n                }                                                                                                     // 1036\n            }                                                                                                         // 1037\n            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');                                           // 1038\n            configFromStringAndFormat(config);                                                                        // 1039\n        } else {                                                                                                      // 1040\n            config._isValid = false;                                                                                  // 1041\n        }                                                                                                             // 1042\n    }                                                                                                                 // 1043\n                                                                                                                      // 1044\n    // date from iso format or fallback                                                                               // 1045\n    function configFromString(config) {                                                                               // 1046\n        var matched = aspNetJsonRegex.exec(config._i);                                                                // 1047\n                                                                                                                      // 1048\n        if (matched !== null) {                                                                                       // 1049\n            config._d = new Date(+matched[1]);                                                                        // 1050\n            return;                                                                                                   // 1051\n        }                                                                                                             // 1052\n                                                                                                                      // 1053\n        configFromISO(config);                                                                                        // 1054\n        if (config._isValid === false) {                                                                              // 1055\n            delete config._isValid;                                                                                   // 1056\n            utils_hooks__hooks.createFromInputFallback(config);                                                       // 1057\n        }                                                                                                             // 1058\n    }                                                                                                                 // 1059\n                                                                                                                      // 1060\n    utils_hooks__hooks.createFromInputFallback = deprecate(                                                           // 1061\n        'moment construction falls back to js Date. This is ' +                                                       // 1062\n        'discouraged and will be removed in upcoming major ' +                                                        // 1063\n        'release. Please refer to ' +                                                                                 // 1064\n        'https://github.com/moment/moment/issues/1407 for more info.',                                                // 1065\n        function (config) {                                                                                           // 1066\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));                                         // 1067\n        }                                                                                                             // 1068\n    );                                                                                                                // 1069\n                                                                                                                      // 1070\n    function createDate (y, m, d, h, M, s, ms) {                                                                      // 1071\n        //can't just apply() to create a date:                                                                        // 1072\n        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply\n        var date = new Date(y, m, d, h, M, s, ms);                                                                    // 1074\n                                                                                                                      // 1075\n        //the date constructor remaps years 0-99 to 1900-1999                                                         // 1076\n        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {                                                      // 1077\n            date.setFullYear(y);                                                                                      // 1078\n        }                                                                                                             // 1079\n        return date;                                                                                                  // 1080\n    }                                                                                                                 // 1081\n                                                                                                                      // 1082\n    function createUTCDate (y) {                                                                                      // 1083\n        var date = new Date(Date.UTC.apply(null, arguments));                                                         // 1084\n                                                                                                                      // 1085\n        //the Date.UTC function remaps years 0-99 to 1900-1999                                                        // 1086\n        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {                                                   // 1087\n            date.setUTCFullYear(y);                                                                                   // 1088\n        }                                                                                                             // 1089\n        return date;                                                                                                  // 1090\n    }                                                                                                                 // 1091\n                                                                                                                      // 1092\n    // FORMATTING                                                                                                     // 1093\n                                                                                                                      // 1094\n    addFormatToken('Y', 0, 0, function () {                                                                           // 1095\n        var y = this.year();                                                                                          // 1096\n        return y <= 9999 ? '' + y : '+' + y;                                                                          // 1097\n    });                                                                                                               // 1098\n                                                                                                                      // 1099\n    addFormatToken(0, ['YY', 2], 0, function () {                                                                     // 1100\n        return this.year() % 100;                                                                                     // 1101\n    });                                                                                                               // 1102\n                                                                                                                      // 1103\n    addFormatToken(0, ['YYYY',   4],       0, 'year');                                                                // 1104\n    addFormatToken(0, ['YYYYY',  5],       0, 'year');                                                                // 1105\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');                                                                // 1106\n                                                                                                                      // 1107\n    // ALIASES                                                                                                        // 1108\n                                                                                                                      // 1109\n    addUnitAlias('year', 'y');                                                                                        // 1110\n                                                                                                                      // 1111\n    // PARSING                                                                                                        // 1112\n                                                                                                                      // 1113\n    addRegexToken('Y',      matchSigned);                                                                             // 1114\n    addRegexToken('YY',     match1to2, match2);                                                                       // 1115\n    addRegexToken('YYYY',   match1to4, match4);                                                                       // 1116\n    addRegexToken('YYYYY',  match1to6, match6);                                                                       // 1117\n    addRegexToken('YYYYYY', match1to6, match6);                                                                       // 1118\n                                                                                                                      // 1119\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);                                                                         // 1120\n    addParseToken('YYYY', function (input, array) {                                                                   // 1121\n        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);                // 1122\n    });                                                                                                               // 1123\n    addParseToken('YY', function (input, array) {                                                                     // 1124\n        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);                                                    // 1125\n    });                                                                                                               // 1126\n    addParseToken('Y', function (input, array) {                                                                      // 1127\n        array[YEAR] = parseInt(input, 10);                                                                            // 1128\n    });                                                                                                               // 1129\n                                                                                                                      // 1130\n    // HELPERS                                                                                                        // 1131\n                                                                                                                      // 1132\n    function daysInYear(year) {                                                                                       // 1133\n        return isLeapYear(year) ? 366 : 365;                                                                          // 1134\n    }                                                                                                                 // 1135\n                                                                                                                      // 1136\n    function isLeapYear(year) {                                                                                       // 1137\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;                                              // 1138\n    }                                                                                                                 // 1139\n                                                                                                                      // 1140\n    // HOOKS                                                                                                          // 1141\n                                                                                                                      // 1142\n    utils_hooks__hooks.parseTwoDigitYear = function (input) {                                                         // 1143\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);                                                      // 1144\n    };                                                                                                                // 1145\n                                                                                                                      // 1146\n    // MOMENTS                                                                                                        // 1147\n                                                                                                                      // 1148\n    var getSetYear = makeGetSet('FullYear', false);                                                                   // 1149\n                                                                                                                      // 1150\n    function getIsLeapYear () {                                                                                       // 1151\n        return isLeapYear(this.year());                                                                               // 1152\n    }                                                                                                                 // 1153\n                                                                                                                      // 1154\n    // start-of-first-week - start-of-year                                                                            // 1155\n    function firstWeekOffset(year, dow, doy) {                                                                        // 1156\n        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)                   // 1157\n            fwd = 7 + dow - doy,                                                                                      // 1158\n            // first-week day local weekday -- which local weekday is fwd                                             // 1159\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;                                          // 1160\n                                                                                                                      // 1161\n        return -fwdlw + fwd - 1;                                                                                      // 1162\n    }                                                                                                                 // 1163\n                                                                                                                      // 1164\n    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday         // 1165\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {                                                      // 1166\n        var localWeekday = (7 + weekday - dow) % 7,                                                                   // 1167\n            weekOffset = firstWeekOffset(year, dow, doy),                                                             // 1168\n            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,                                               // 1169\n            resYear, resDayOfYear;                                                                                    // 1170\n                                                                                                                      // 1171\n        if (dayOfYear <= 0) {                                                                                         // 1172\n            resYear = year - 1;                                                                                       // 1173\n            resDayOfYear = daysInYear(resYear) + dayOfYear;                                                           // 1174\n        } else if (dayOfYear > daysInYear(year)) {                                                                    // 1175\n            resYear = year + 1;                                                                                       // 1176\n            resDayOfYear = dayOfYear - daysInYear(year);                                                              // 1177\n        } else {                                                                                                      // 1178\n            resYear = year;                                                                                           // 1179\n            resDayOfYear = dayOfYear;                                                                                 // 1180\n        }                                                                                                             // 1181\n                                                                                                                      // 1182\n        return {                                                                                                      // 1183\n            year: resYear,                                                                                            // 1184\n            dayOfYear: resDayOfYear                                                                                   // 1185\n        };                                                                                                            // 1186\n    }                                                                                                                 // 1187\n                                                                                                                      // 1188\n    function weekOfYear(mom, dow, doy) {                                                                              // 1189\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy),                                                       // 1190\n            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,                                            // 1191\n            resWeek, resYear;                                                                                         // 1192\n                                                                                                                      // 1193\n        if (week < 1) {                                                                                               // 1194\n            resYear = mom.year() - 1;                                                                                 // 1195\n            resWeek = week + weeksInYear(resYear, dow, doy);                                                          // 1196\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {                                                        // 1197\n            resWeek = week - weeksInYear(mom.year(), dow, doy);                                                       // 1198\n            resYear = mom.year() + 1;                                                                                 // 1199\n        } else {                                                                                                      // 1200\n            resYear = mom.year();                                                                                     // 1201\n            resWeek = week;                                                                                           // 1202\n        }                                                                                                             // 1203\n                                                                                                                      // 1204\n        return {                                                                                                      // 1205\n            week: resWeek,                                                                                            // 1206\n            year: resYear                                                                                             // 1207\n        };                                                                                                            // 1208\n    }                                                                                                                 // 1209\n                                                                                                                      // 1210\n    function weeksInYear(year, dow, doy) {                                                                            // 1211\n        var weekOffset = firstWeekOffset(year, dow, doy),                                                             // 1212\n            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);                                                     // 1213\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;                                                  // 1214\n    }                                                                                                                 // 1215\n                                                                                                                      // 1216\n    // Pick the first defined of two or three arguments.                                                              // 1217\n    function defaults(a, b, c) {                                                                                      // 1218\n        if (a != null) {                                                                                              // 1219\n            return a;                                                                                                 // 1220\n        }                                                                                                             // 1221\n        if (b != null) {                                                                                              // 1222\n            return b;                                                                                                 // 1223\n        }                                                                                                             // 1224\n        return c;                                                                                                     // 1225\n    }                                                                                                                 // 1226\n                                                                                                                      // 1227\n    function currentDateArray(config) {                                                                               // 1228\n        // hooks is actually the exported moment object                                                               // 1229\n        var nowValue = new Date(utils_hooks__hooks.now());                                                            // 1230\n        if (config._useUTC) {                                                                                         // 1231\n            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];                        // 1232\n        }                                                                                                             // 1233\n        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];                                     // 1234\n    }                                                                                                                 // 1235\n                                                                                                                      // 1236\n    // convert an array to a date.                                                                                    // 1237\n    // the array should mirror the parameters below                                                                   // 1238\n    // note: all values past the year are optional and will default to the lowest possible value.                     // 1239\n    // [year, month, day , hour, minute, second, millisecond]                                                         // 1240\n    function configFromArray (config) {                                                                               // 1241\n        var i, date, input = [], currentDate, yearToUse;                                                              // 1242\n                                                                                                                      // 1243\n        if (config._d) {                                                                                              // 1244\n            return;                                                                                                   // 1245\n        }                                                                                                             // 1246\n                                                                                                                      // 1247\n        currentDate = currentDateArray(config);                                                                       // 1248\n                                                                                                                      // 1249\n        //compute day of the year from weeks and weekdays                                                             // 1250\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {                                       // 1251\n            dayOfYearFromWeekInfo(config);                                                                            // 1252\n        }                                                                                                             // 1253\n                                                                                                                      // 1254\n        //if the day of the year is set, figure out what it is                                                        // 1255\n        if (config._dayOfYear) {                                                                                      // 1256\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);                                                 // 1257\n                                                                                                                      // 1258\n            if (config._dayOfYear > daysInYear(yearToUse)) {                                                          // 1259\n                getParsingFlags(config)._overflowDayOfYear = true;                                                    // 1260\n            }                                                                                                         // 1261\n                                                                                                                      // 1262\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);                                                    // 1263\n            config._a[MONTH] = date.getUTCMonth();                                                                    // 1264\n            config._a[DATE] = date.getUTCDate();                                                                      // 1265\n        }                                                                                                             // 1266\n                                                                                                                      // 1267\n        // Default to current date.                                                                                   // 1268\n        // * if no year, month, day of month are given, default to today                                              // 1269\n        // * if day of month is given, default month and year                                                         // 1270\n        // * if month is given, default only year                                                                     // 1271\n        // * if year is given, don't default anything                                                                 // 1272\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {                                                             // 1273\n            config._a[i] = input[i] = currentDate[i];                                                                 // 1274\n        }                                                                                                             // 1275\n                                                                                                                      // 1276\n        // Zero out whatever was not defaulted, including time                                                        // 1277\n        for (; i < 7; i++) {                                                                                          // 1278\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];                      // 1279\n        }                                                                                                             // 1280\n                                                                                                                      // 1281\n        // Check for 24:00:00.000                                                                                     // 1282\n        if (config._a[HOUR] === 24 &&                                                                                 // 1283\n                config._a[MINUTE] === 0 &&                                                                            // 1284\n                config._a[SECOND] === 0 &&                                                                            // 1285\n                config._a[MILLISECOND] === 0) {                                                                       // 1286\n            config._nextDay = true;                                                                                   // 1287\n            config._a[HOUR] = 0;                                                                                      // 1288\n        }                                                                                                             // 1289\n                                                                                                                      // 1290\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);                                 // 1291\n        // Apply timezone offset from input. The actual utcOffset can be changed                                      // 1292\n        // with parseZone.                                                                                            // 1293\n        if (config._tzm != null) {                                                                                    // 1294\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);                                         // 1295\n        }                                                                                                             // 1296\n                                                                                                                      // 1297\n        if (config._nextDay) {                                                                                        // 1298\n            config._a[HOUR] = 24;                                                                                     // 1299\n        }                                                                                                             // 1300\n    }                                                                                                                 // 1301\n                                                                                                                      // 1302\n    function dayOfYearFromWeekInfo(config) {                                                                          // 1303\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;                                              // 1304\n                                                                                                                      // 1305\n        w = config._w;                                                                                                // 1306\n        if (w.GG != null || w.W != null || w.E != null) {                                                             // 1307\n            dow = 1;                                                                                                  // 1308\n            doy = 4;                                                                                                  // 1309\n                                                                                                                      // 1310\n            // TODO: We need to take the current isoWeekYear, but that depends on                                     // 1311\n            // how we interpret now (local, utc, fixed offset). So create                                             // 1312\n            // a now version of current config (take local/utc/offset flags, and                                      // 1313\n            // create now).                                                                                           // 1314\n            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);                  // 1315\n            week = defaults(w.W, 1);                                                                                  // 1316\n            weekday = defaults(w.E, 1);                                                                               // 1317\n            if (weekday < 1 || weekday > 7) {                                                                         // 1318\n                weekdayOverflow = true;                                                                               // 1319\n            }                                                                                                         // 1320\n        } else {                                                                                                      // 1321\n            dow = config._locale._week.dow;                                                                           // 1322\n            doy = config._locale._week.doy;                                                                           // 1323\n                                                                                                                      // 1324\n            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);              // 1325\n            week = defaults(w.w, 1);                                                                                  // 1326\n                                                                                                                      // 1327\n            if (w.d != null) {                                                                                        // 1328\n                // weekday -- low day numbers are considered next week                                                // 1329\n                weekday = w.d;                                                                                        // 1330\n                if (weekday < 0 || weekday > 6) {                                                                     // 1331\n                    weekdayOverflow = true;                                                                           // 1332\n                }                                                                                                     // 1333\n            } else if (w.e != null) {                                                                                 // 1334\n                // local weekday -- counting starts from begining of week                                             // 1335\n                weekday = w.e + dow;                                                                                  // 1336\n                if (w.e < 0 || w.e > 6) {                                                                             // 1337\n                    weekdayOverflow = true;                                                                           // 1338\n                }                                                                                                     // 1339\n            } else {                                                                                                  // 1340\n                // default to begining of week                                                                        // 1341\n                weekday = dow;                                                                                        // 1342\n            }                                                                                                         // 1343\n        }                                                                                                             // 1344\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {                                                     // 1345\n            getParsingFlags(config)._overflowWeeks = true;                                                            // 1346\n        } else if (weekdayOverflow != null) {                                                                         // 1347\n            getParsingFlags(config)._overflowWeekday = true;                                                          // 1348\n        } else {                                                                                                      // 1349\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);                                             // 1350\n            config._a[YEAR] = temp.year;                                                                              // 1351\n            config._dayOfYear = temp.dayOfYear;                                                                       // 1352\n        }                                                                                                             // 1353\n    }                                                                                                                 // 1354\n                                                                                                                      // 1355\n    // constant that refers to the ISO standard                                                                       // 1356\n    utils_hooks__hooks.ISO_8601 = function () {};                                                                     // 1357\n                                                                                                                      // 1358\n    // date from string and format string                                                                             // 1359\n    function configFromStringAndFormat(config) {                                                                      // 1360\n        // TODO: Move this to another part of the creation flow to prevent circular deps                              // 1361\n        if (config._f === utils_hooks__hooks.ISO_8601) {                                                              // 1362\n            configFromISO(config);                                                                                    // 1363\n            return;                                                                                                   // 1364\n        }                                                                                                             // 1365\n                                                                                                                      // 1366\n        config._a = [];                                                                                               // 1367\n        getParsingFlags(config).empty = true;                                                                         // 1368\n                                                                                                                      // 1369\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`                                    // 1370\n        var string = '' + config._i,                                                                                  // 1371\n            i, parsedInput, tokens, token, skipped,                                                                   // 1372\n            stringLength = string.length,                                                                             // 1373\n            totalParsedInputLength = 0;                                                                               // 1374\n                                                                                                                      // 1375\n        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];                               // 1376\n                                                                                                                      // 1377\n        for (i = 0; i < tokens.length; i++) {                                                                         // 1378\n            token = tokens[i];                                                                                        // 1379\n            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];                              // 1380\n            // console.log('token', token, 'parsedInput', parsedInput,                                                // 1381\n            //         'regex', getParseRegexForToken(token, config));                                                // 1382\n            if (parsedInput) {                                                                                        // 1383\n                skipped = string.substr(0, string.indexOf(parsedInput));                                              // 1384\n                if (skipped.length > 0) {                                                                             // 1385\n                    getParsingFlags(config).unusedInput.push(skipped);                                                // 1386\n                }                                                                                                     // 1387\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);                              // 1388\n                totalParsedInputLength += parsedInput.length;                                                         // 1389\n            }                                                                                                         // 1390\n            // don't parse if it's not a known token                                                                  // 1391\n            if (formatTokenFunctions[token]) {                                                                        // 1392\n                if (parsedInput) {                                                                                    // 1393\n                    getParsingFlags(config).empty = false;                                                            // 1394\n                }                                                                                                     // 1395\n                else {                                                                                                // 1396\n                    getParsingFlags(config).unusedTokens.push(token);                                                 // 1397\n                }                                                                                                     // 1398\n                addTimeToArrayFromToken(token, parsedInput, config);                                                  // 1399\n            }                                                                                                         // 1400\n            else if (config._strict && !parsedInput) {                                                                // 1401\n                getParsingFlags(config).unusedTokens.push(token);                                                     // 1402\n            }                                                                                                         // 1403\n        }                                                                                                             // 1404\n                                                                                                                      // 1405\n        // add remaining unparsed input length to the string                                                          // 1406\n        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;                                // 1407\n        if (string.length > 0) {                                                                                      // 1408\n            getParsingFlags(config).unusedInput.push(string);                                                         // 1409\n        }                                                                                                             // 1410\n                                                                                                                      // 1411\n        // clear _12h flag if hour is <= 12                                                                           // 1412\n        if (getParsingFlags(config).bigHour === true &&                                                               // 1413\n                config._a[HOUR] <= 12 &&                                                                              // 1414\n                config._a[HOUR] > 0) {                                                                                // 1415\n            getParsingFlags(config).bigHour = undefined;                                                              // 1416\n        }                                                                                                             // 1417\n        // handle meridiem                                                                                            // 1418\n        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);                         // 1419\n                                                                                                                      // 1420\n        configFromArray(config);                                                                                      // 1421\n        checkOverflow(config);                                                                                        // 1422\n    }                                                                                                                 // 1423\n                                                                                                                      // 1424\n                                                                                                                      // 1425\n    function meridiemFixWrap (locale, hour, meridiem) {                                                               // 1426\n        var isPm;                                                                                                     // 1427\n                                                                                                                      // 1428\n        if (meridiem == null) {                                                                                       // 1429\n            // nothing to do                                                                                          // 1430\n            return hour;                                                                                              // 1431\n        }                                                                                                             // 1432\n        if (locale.meridiemHour != null) {                                                                            // 1433\n            return locale.meridiemHour(hour, meridiem);                                                               // 1434\n        } else if (locale.isPM != null) {                                                                             // 1435\n            // Fallback                                                                                               // 1436\n            isPm = locale.isPM(meridiem);                                                                             // 1437\n            if (isPm && hour < 12) {                                                                                  // 1438\n                hour += 12;                                                                                           // 1439\n            }                                                                                                         // 1440\n            if (!isPm && hour === 12) {                                                                               // 1441\n                hour = 0;                                                                                             // 1442\n            }                                                                                                         // 1443\n            return hour;                                                                                              // 1444\n        } else {                                                                                                      // 1445\n            // this is not supposed to happen                                                                         // 1446\n            return hour;                                                                                              // 1447\n        }                                                                                                             // 1448\n    }                                                                                                                 // 1449\n                                                                                                                      // 1450\n    // date from string and array of format strings                                                                   // 1451\n    function configFromStringAndArray(config) {                                                                       // 1452\n        var tempConfig,                                                                                               // 1453\n            bestMoment,                                                                                               // 1454\n                                                                                                                      // 1455\n            scoreToBeat,                                                                                              // 1456\n            i,                                                                                                        // 1457\n            currentScore;                                                                                             // 1458\n                                                                                                                      // 1459\n        if (config._f.length === 0) {                                                                                 // 1460\n            getParsingFlags(config).invalidFormat = true;                                                             // 1461\n            config._d = new Date(NaN);                                                                                // 1462\n            return;                                                                                                   // 1463\n        }                                                                                                             // 1464\n                                                                                                                      // 1465\n        for (i = 0; i < config._f.length; i++) {                                                                      // 1466\n            currentScore = 0;                                                                                         // 1467\n            tempConfig = copyConfig({}, config);                                                                      // 1468\n            if (config._useUTC != null) {                                                                             // 1469\n                tempConfig._useUTC = config._useUTC;                                                                  // 1470\n            }                                                                                                         // 1471\n            tempConfig._f = config._f[i];                                                                             // 1472\n            configFromStringAndFormat(tempConfig);                                                                    // 1473\n                                                                                                                      // 1474\n            if (!valid__isValid(tempConfig)) {                                                                        // 1475\n                continue;                                                                                             // 1476\n            }                                                                                                         // 1477\n                                                                                                                      // 1478\n            // if there is any input that was not parsed add a penalty for that format                                // 1479\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;                                                // 1480\n                                                                                                                      // 1481\n            //or tokens                                                                                               // 1482\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;                                     // 1483\n                                                                                                                      // 1484\n            getParsingFlags(tempConfig).score = currentScore;                                                         // 1485\n                                                                                                                      // 1486\n            if (scoreToBeat == null || currentScore < scoreToBeat) {                                                  // 1487\n                scoreToBeat = currentScore;                                                                           // 1488\n                bestMoment = tempConfig;                                                                              // 1489\n            }                                                                                                         // 1490\n        }                                                                                                             // 1491\n                                                                                                                      // 1492\n        extend(config, bestMoment || tempConfig);                                                                     // 1493\n    }                                                                                                                 // 1494\n                                                                                                                      // 1495\n    function configFromObject(config) {                                                                               // 1496\n        if (config._d) {                                                                                              // 1497\n            return;                                                                                                   // 1498\n        }                                                                                                             // 1499\n                                                                                                                      // 1500\n        var i = normalizeObjectUnits(config._i);                                                                      // 1501\n        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {\n            return obj && parseInt(obj, 10);                                                                          // 1503\n        });                                                                                                           // 1504\n                                                                                                                      // 1505\n        configFromArray(config);                                                                                      // 1506\n    }                                                                                                                 // 1507\n                                                                                                                      // 1508\n    function createFromConfig (config) {                                                                              // 1509\n        var res = new Moment(checkOverflow(prepareConfig(config)));                                                   // 1510\n        if (res._nextDay) {                                                                                           // 1511\n            // Adding is smart enough around DST                                                                      // 1512\n            res.add(1, 'd');                                                                                          // 1513\n            res._nextDay = undefined;                                                                                 // 1514\n        }                                                                                                             // 1515\n                                                                                                                      // 1516\n        return res;                                                                                                   // 1517\n    }                                                                                                                 // 1518\n                                                                                                                      // 1519\n    function prepareConfig (config) {                                                                                 // 1520\n        var input = config._i,                                                                                        // 1521\n            format = config._f;                                                                                       // 1522\n                                                                                                                      // 1523\n        config._locale = config._locale || locale_locales__getLocale(config._l);                                      // 1524\n                                                                                                                      // 1525\n        if (input === null || (format === undefined && input === '')) {                                               // 1526\n            return valid__createInvalid({nullInput: true});                                                           // 1527\n        }                                                                                                             // 1528\n                                                                                                                      // 1529\n        if (typeof input === 'string') {                                                                              // 1530\n            config._i = input = config._locale.preparse(input);                                                       // 1531\n        }                                                                                                             // 1532\n                                                                                                                      // 1533\n        if (isMoment(input)) {                                                                                        // 1534\n            return new Moment(checkOverflow(input));                                                                  // 1535\n        } else if (isArray(format)) {                                                                                 // 1536\n            configFromStringAndArray(config);                                                                         // 1537\n        } else if (format) {                                                                                          // 1538\n            configFromStringAndFormat(config);                                                                        // 1539\n        } else if (isDate(input)) {                                                                                   // 1540\n            config._d = input;                                                                                        // 1541\n        } else {                                                                                                      // 1542\n            configFromInput(config);                                                                                  // 1543\n        }                                                                                                             // 1544\n                                                                                                                      // 1545\n        if (!valid__isValid(config)) {                                                                                // 1546\n            config._d = null;                                                                                         // 1547\n        }                                                                                                             // 1548\n                                                                                                                      // 1549\n        return config;                                                                                                // 1550\n    }                                                                                                                 // 1551\n                                                                                                                      // 1552\n    function configFromInput(config) {                                                                                // 1553\n        var input = config._i;                                                                                        // 1554\n        if (input === undefined) {                                                                                    // 1555\n            config._d = new Date(utils_hooks__hooks.now());                                                           // 1556\n        } else if (isDate(input)) {                                                                                   // 1557\n            config._d = new Date(+input);                                                                             // 1558\n        } else if (typeof input === 'string') {                                                                       // 1559\n            configFromString(config);                                                                                 // 1560\n        } else if (isArray(input)) {                                                                                  // 1561\n            config._a = map(input.slice(0), function (obj) {                                                          // 1562\n                return parseInt(obj, 10);                                                                             // 1563\n            });                                                                                                       // 1564\n            configFromArray(config);                                                                                  // 1565\n        } else if (typeof(input) === 'object') {                                                                      // 1566\n            configFromObject(config);                                                                                 // 1567\n        } else if (typeof(input) === 'number') {                                                                      // 1568\n            // from milliseconds                                                                                      // 1569\n            config._d = new Date(input);                                                                              // 1570\n        } else {                                                                                                      // 1571\n            utils_hooks__hooks.createFromInputFallback(config);                                                       // 1572\n        }                                                                                                             // 1573\n    }                                                                                                                 // 1574\n                                                                                                                      // 1575\n    function createLocalOrUTC (input, format, locale, strict, isUTC) {                                                // 1576\n        var c = {};                                                                                                   // 1577\n                                                                                                                      // 1578\n        if (typeof(locale) === 'boolean') {                                                                           // 1579\n            strict = locale;                                                                                          // 1580\n            locale = undefined;                                                                                       // 1581\n        }                                                                                                             // 1582\n        // object construction must be done this way.                                                                 // 1583\n        // https://github.com/moment/moment/issues/1423                                                               // 1584\n        c._isAMomentObject = true;                                                                                    // 1585\n        c._useUTC = c._isUTC = isUTC;                                                                                 // 1586\n        c._l = locale;                                                                                                // 1587\n        c._i = input;                                                                                                 // 1588\n        c._f = format;                                                                                                // 1589\n        c._strict = strict;                                                                                           // 1590\n                                                                                                                      // 1591\n        return createFromConfig(c);                                                                                   // 1592\n    }                                                                                                                 // 1593\n                                                                                                                      // 1594\n    function local__createLocal (input, format, locale, strict) {                                                     // 1595\n        return createLocalOrUTC(input, format, locale, strict, false);                                                // 1596\n    }                                                                                                                 // 1597\n                                                                                                                      // 1598\n    var prototypeMin = deprecate(                                                                                     // 1599\n         'moment().min is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',          // 1600\n         function () {                                                                                                // 1601\n             var other = local__createLocal.apply(null, arguments);                                                   // 1602\n             if (this.isValid() && other.isValid()) {                                                                 // 1603\n                 return other < this ? this : other;                                                                  // 1604\n             } else {                                                                                                 // 1605\n                 return valid__createInvalid();                                                                       // 1606\n             }                                                                                                        // 1607\n         }                                                                                                            // 1608\n     );                                                                                                               // 1609\n                                                                                                                      // 1610\n    var prototypeMax = deprecate(                                                                                     // 1611\n        'moment().max is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',           // 1612\n        function () {                                                                                                 // 1613\n            var other = local__createLocal.apply(null, arguments);                                                    // 1614\n            if (this.isValid() && other.isValid()) {                                                                  // 1615\n                return other > this ? this : other;                                                                   // 1616\n            } else {                                                                                                  // 1617\n                return valid__createInvalid();                                                                        // 1618\n            }                                                                                                         // 1619\n        }                                                                                                             // 1620\n    );                                                                                                                // 1621\n                                                                                                                      // 1622\n    // Pick a moment m from moments so that m[fn](other) is true for all                                              // 1623\n    // other. This relies on the function fn to be transitive.                                                        // 1624\n    //                                                                                                                // 1625\n    // moments should either be an array of moment objects or an array, whose                                         // 1626\n    // first element is an array of moment objects.                                                                   // 1627\n    function pickBy(fn, moments) {                                                                                    // 1628\n        var res, i;                                                                                                   // 1629\n        if (moments.length === 1 && isArray(moments[0])) {                                                            // 1630\n            moments = moments[0];                                                                                     // 1631\n        }                                                                                                             // 1632\n        if (!moments.length) {                                                                                        // 1633\n            return local__createLocal();                                                                              // 1634\n        }                                                                                                             // 1635\n        res = moments[0];                                                                                             // 1636\n        for (i = 1; i < moments.length; ++i) {                                                                        // 1637\n            if (!moments[i].isValid() || moments[i][fn](res)) {                                                       // 1638\n                res = moments[i];                                                                                     // 1639\n            }                                                                                                         // 1640\n        }                                                                                                             // 1641\n        return res;                                                                                                   // 1642\n    }                                                                                                                 // 1643\n                                                                                                                      // 1644\n    // TODO: Use [].sort instead?                                                                                     // 1645\n    function min () {                                                                                                 // 1646\n        var args = [].slice.call(arguments, 0);                                                                       // 1647\n                                                                                                                      // 1648\n        return pickBy('isBefore', args);                                                                              // 1649\n    }                                                                                                                 // 1650\n                                                                                                                      // 1651\n    function max () {                                                                                                 // 1652\n        var args = [].slice.call(arguments, 0);                                                                       // 1653\n                                                                                                                      // 1654\n        return pickBy('isAfter', args);                                                                               // 1655\n    }                                                                                                                 // 1656\n                                                                                                                      // 1657\n    var now = function () {                                                                                           // 1658\n        return Date.now ? Date.now() : +(new Date());                                                                 // 1659\n    };                                                                                                                // 1660\n                                                                                                                      // 1661\n    function Duration (duration) {                                                                                    // 1662\n        var normalizedInput = normalizeObjectUnits(duration),                                                         // 1663\n            years = normalizedInput.year || 0,                                                                        // 1664\n            quarters = normalizedInput.quarter || 0,                                                                  // 1665\n            months = normalizedInput.month || 0,                                                                      // 1666\n            weeks = normalizedInput.week || 0,                                                                        // 1667\n            days = normalizedInput.day || 0,                                                                          // 1668\n            hours = normalizedInput.hour || 0,                                                                        // 1669\n            minutes = normalizedInput.minute || 0,                                                                    // 1670\n            seconds = normalizedInput.second || 0,                                                                    // 1671\n            milliseconds = normalizedInput.millisecond || 0;                                                          // 1672\n                                                                                                                      // 1673\n        // representation for dateAddRemove                                                                           // 1674\n        this._milliseconds = +milliseconds +                                                                          // 1675\n            seconds * 1e3 + // 1000                                                                                   // 1676\n            minutes * 6e4 + // 1000 * 60                                                                              // 1677\n            hours * 36e5; // 1000 * 60 * 60                                                                           // 1678\n        // Because of dateAddRemove treats 24 hours as different from a                                               // 1679\n        // day when working around DST, we need to store them separately                                              // 1680\n        this._days = +days +                                                                                          // 1681\n            weeks * 7;                                                                                                // 1682\n        // It is impossible translate months into days without knowing                                                // 1683\n        // which months you are are talking about, so we have to store                                                // 1684\n        // it separately.                                                                                             // 1685\n        this._months = +months +                                                                                      // 1686\n            quarters * 3 +                                                                                            // 1687\n            years * 12;                                                                                               // 1688\n                                                                                                                      // 1689\n        this._data = {};                                                                                              // 1690\n                                                                                                                      // 1691\n        this._locale = locale_locales__getLocale();                                                                   // 1692\n                                                                                                                      // 1693\n        this._bubble();                                                                                               // 1694\n    }                                                                                                                 // 1695\n                                                                                                                      // 1696\n    function isDuration (obj) {                                                                                       // 1697\n        return obj instanceof Duration;                                                                               // 1698\n    }                                                                                                                 // 1699\n                                                                                                                      // 1700\n    // FORMATTING                                                                                                     // 1701\n                                                                                                                      // 1702\n    function offset (token, separator) {                                                                              // 1703\n        addFormatToken(token, 0, 0, function () {                                                                     // 1704\n            var offset = this.utcOffset();                                                                            // 1705\n            var sign = '+';                                                                                           // 1706\n            if (offset < 0) {                                                                                         // 1707\n                offset = -offset;                                                                                     // 1708\n                sign = '-';                                                                                           // 1709\n            }                                                                                                         // 1710\n            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);                    // 1711\n        });                                                                                                           // 1712\n    }                                                                                                                 // 1713\n                                                                                                                      // 1714\n    offset('Z', ':');                                                                                                 // 1715\n    offset('ZZ', '');                                                                                                 // 1716\n                                                                                                                      // 1717\n    // PARSING                                                                                                        // 1718\n                                                                                                                      // 1719\n    addRegexToken('Z',  matchShortOffset);                                                                            // 1720\n    addRegexToken('ZZ', matchShortOffset);                                                                            // 1721\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {                                                      // 1722\n        config._useUTC = true;                                                                                        // 1723\n        config._tzm = offsetFromString(matchShortOffset, input);                                                      // 1724\n    });                                                                                                               // 1725\n                                                                                                                      // 1726\n    // HELPERS                                                                                                        // 1727\n                                                                                                                      // 1728\n    // timezone chunker                                                                                               // 1729\n    // '+10:00' > ['10',  '00']                                                                                       // 1730\n    // '-1530'  > ['-15', '30']                                                                                       // 1731\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;                                                                              // 1732\n                                                                                                                      // 1733\n    function offsetFromString(matcher, string) {                                                                      // 1734\n        var matches = ((string || '').match(matcher) || []);                                                          // 1735\n        var chunk   = matches[matches.length - 1] || [];                                                              // 1736\n        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];                                                 // 1737\n        var minutes = +(parts[1] * 60) + toInt(parts[2]);                                                             // 1738\n                                                                                                                      // 1739\n        return parts[0] === '+' ? minutes : -minutes;                                                                 // 1740\n    }                                                                                                                 // 1741\n                                                                                                                      // 1742\n    // Return a moment from input, that is local/utc/zone equivalent to model.                                        // 1743\n    function cloneWithOffset(input, model) {                                                                          // 1744\n        var res, diff;                                                                                                // 1745\n        if (model._isUTC) {                                                                                           // 1746\n            res = model.clone();                                                                                      // 1747\n            diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - (+res);                 // 1748\n            // Use low-level api, because this fn is low-level api.                                                   // 1749\n            res._d.setTime(+res._d + diff);                                                                           // 1750\n            utils_hooks__hooks.updateOffset(res, false);                                                              // 1751\n            return res;                                                                                               // 1752\n        } else {                                                                                                      // 1753\n            return local__createLocal(input).local();                                                                 // 1754\n        }                                                                                                             // 1755\n    }                                                                                                                 // 1756\n                                                                                                                      // 1757\n    function getDateOffset (m) {                                                                                      // 1758\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.                                             // 1759\n        // https://github.com/moment/moment/pull/1871                                                                 // 1760\n        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;                                                       // 1761\n    }                                                                                                                 // 1762\n                                                                                                                      // 1763\n    // HOOKS                                                                                                          // 1764\n                                                                                                                      // 1765\n    // This function will be called whenever a moment is mutated.                                                     // 1766\n    // It is intended to keep the offset in sync with the timezone.                                                   // 1767\n    utils_hooks__hooks.updateOffset = function () {};                                                                 // 1768\n                                                                                                                      // 1769\n    // MOMENTS                                                                                                        // 1770\n                                                                                                                      // 1771\n    // keepLocalTime = true means only change the timezone, without                                                   // 1772\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->                                           // 1773\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset                                            // 1774\n    // +0200, so we adjust the time as needed, to be valid.                                                           // 1775\n    //                                                                                                                // 1776\n    // Keeping the time actually adds/subtracts (one hour)                                                            // 1777\n    // from the actual represented time. That is why we call updateOffset                                             // 1778\n    // a second time. In case it wants us to change the offset again                                                  // 1779\n    // _changeInProgress == true case, then we have to adjust, because                                                // 1780\n    // there is no such time in the given timezone.                                                                   // 1781\n    function getSetOffset (input, keepLocalTime) {                                                                    // 1782\n        var offset = this._offset || 0,                                                                               // 1783\n            localAdjust;                                                                                              // 1784\n        if (!this.isValid()) {                                                                                        // 1785\n            return input != null ? this : NaN;                                                                        // 1786\n        }                                                                                                             // 1787\n        if (input != null) {                                                                                          // 1788\n            if (typeof input === 'string') {                                                                          // 1789\n                input = offsetFromString(matchShortOffset, input);                                                    // 1790\n            } else if (Math.abs(input) < 16) {                                                                        // 1791\n                input = input * 60;                                                                                   // 1792\n            }                                                                                                         // 1793\n            if (!this._isUTC && keepLocalTime) {                                                                      // 1794\n                localAdjust = getDateOffset(this);                                                                    // 1795\n            }                                                                                                         // 1796\n            this._offset = input;                                                                                     // 1797\n            this._isUTC = true;                                                                                       // 1798\n            if (localAdjust != null) {                                                                                // 1799\n                this.add(localAdjust, 'm');                                                                           // 1800\n            }                                                                                                         // 1801\n            if (offset !== input) {                                                                                   // 1802\n                if (!keepLocalTime || this._changeInProgress) {                                                       // 1803\n                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);           // 1804\n                } else if (!this._changeInProgress) {                                                                 // 1805\n                    this._changeInProgress = true;                                                                    // 1806\n                    utils_hooks__hooks.updateOffset(this, true);                                                      // 1807\n                    this._changeInProgress = null;                                                                    // 1808\n                }                                                                                                     // 1809\n            }                                                                                                         // 1810\n            return this;                                                                                              // 1811\n        } else {                                                                                                      // 1812\n            return this._isUTC ? offset : getDateOffset(this);                                                        // 1813\n        }                                                                                                             // 1814\n    }                                                                                                                 // 1815\n                                                                                                                      // 1816\n    function getSetZone (input, keepLocalTime) {                                                                      // 1817\n        if (input != null) {                                                                                          // 1818\n            if (typeof input !== 'string') {                                                                          // 1819\n                input = -input;                                                                                       // 1820\n            }                                                                                                         // 1821\n                                                                                                                      // 1822\n            this.utcOffset(input, keepLocalTime);                                                                     // 1823\n                                                                                                                      // 1824\n            return this;                                                                                              // 1825\n        } else {                                                                                                      // 1826\n            return -this.utcOffset();                                                                                 // 1827\n        }                                                                                                             // 1828\n    }                                                                                                                 // 1829\n                                                                                                                      // 1830\n    function setOffsetToUTC (keepLocalTime) {                                                                         // 1831\n        return this.utcOffset(0, keepLocalTime);                                                                      // 1832\n    }                                                                                                                 // 1833\n                                                                                                                      // 1834\n    function setOffsetToLocal (keepLocalTime) {                                                                       // 1835\n        if (this._isUTC) {                                                                                            // 1836\n            this.utcOffset(0, keepLocalTime);                                                                         // 1837\n            this._isUTC = false;                                                                                      // 1838\n                                                                                                                      // 1839\n            if (keepLocalTime) {                                                                                      // 1840\n                this.subtract(getDateOffset(this), 'm');                                                              // 1841\n            }                                                                                                         // 1842\n        }                                                                                                             // 1843\n        return this;                                                                                                  // 1844\n    }                                                                                                                 // 1845\n                                                                                                                      // 1846\n    function setOffsetToParsedOffset () {                                                                             // 1847\n        if (this._tzm) {                                                                                              // 1848\n            this.utcOffset(this._tzm);                                                                                // 1849\n        } else if (typeof this._i === 'string') {                                                                     // 1850\n            this.utcOffset(offsetFromString(matchOffset, this._i));                                                   // 1851\n        }                                                                                                             // 1852\n        return this;                                                                                                  // 1853\n    }                                                                                                                 // 1854\n                                                                                                                      // 1855\n    function hasAlignedHourOffset (input) {                                                                           // 1856\n        if (!this.isValid()) {                                                                                        // 1857\n            return false;                                                                                             // 1858\n        }                                                                                                             // 1859\n        input = input ? local__createLocal(input).utcOffset() : 0;                                                    // 1860\n                                                                                                                      // 1861\n        return (this.utcOffset() - input) % 60 === 0;                                                                 // 1862\n    }                                                                                                                 // 1863\n                                                                                                                      // 1864\n    function isDaylightSavingTime () {                                                                                // 1865\n        return (                                                                                                      // 1866\n            this.utcOffset() > this.clone().month(0).utcOffset() ||                                                   // 1867\n            this.utcOffset() > this.clone().month(5).utcOffset()                                                      // 1868\n        );                                                                                                            // 1869\n    }                                                                                                                 // 1870\n                                                                                                                      // 1871\n    function isDaylightSavingTimeShifted () {                                                                         // 1872\n        if (!isUndefined(this._isDSTShifted)) {                                                                       // 1873\n            return this._isDSTShifted;                                                                                // 1874\n        }                                                                                                             // 1875\n                                                                                                                      // 1876\n        var c = {};                                                                                                   // 1877\n                                                                                                                      // 1878\n        copyConfig(c, this);                                                                                          // 1879\n        c = prepareConfig(c);                                                                                         // 1880\n                                                                                                                      // 1881\n        if (c._a) {                                                                                                   // 1882\n            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);                            // 1883\n            this._isDSTShifted = this.isValid() &&                                                                    // 1884\n                compareArrays(c._a, other.toArray()) > 0;                                                             // 1885\n        } else {                                                                                                      // 1886\n            this._isDSTShifted = false;                                                                               // 1887\n        }                                                                                                             // 1888\n                                                                                                                      // 1889\n        return this._isDSTShifted;                                                                                    // 1890\n    }                                                                                                                 // 1891\n                                                                                                                      // 1892\n    function isLocal () {                                                                                             // 1893\n        return this.isValid() ? !this._isUTC : false;                                                                 // 1894\n    }                                                                                                                 // 1895\n                                                                                                                      // 1896\n    function isUtcOffset () {                                                                                         // 1897\n        return this.isValid() ? this._isUTC : false;                                                                  // 1898\n    }                                                                                                                 // 1899\n                                                                                                                      // 1900\n    function isUtc () {                                                                                               // 1901\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;                                            // 1902\n    }                                                                                                                 // 1903\n                                                                                                                      // 1904\n    // ASP.NET json date format regex                                                                                 // 1905\n    var aspNetRegex = /^(\\-)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)\\.?(\\d{3})?\\d*)?$/;                                  // 1906\n                                                                                                                      // 1907\n    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html                      // 1908\n    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere                                      // 1909\n    // and further modified to allow for strings containing both week and day                                         // 1910\n    var isoRegex = /^(-)?P(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)W)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?$/;\n                                                                                                                      // 1912\n    function create__createDuration (input, key) {                                                                    // 1913\n        var duration = input,                                                                                         // 1914\n            // matching against regexp is expensive, do it on demand                                                  // 1915\n            match = null,                                                                                             // 1916\n            sign,                                                                                                     // 1917\n            ret,                                                                                                      // 1918\n            diffRes;                                                                                                  // 1919\n                                                                                                                      // 1920\n        if (isDuration(input)) {                                                                                      // 1921\n            duration = {                                                                                              // 1922\n                ms : input._milliseconds,                                                                             // 1923\n                d  : input._days,                                                                                     // 1924\n                M  : input._months                                                                                    // 1925\n            };                                                                                                        // 1926\n        } else if (typeof input === 'number') {                                                                       // 1927\n            duration = {};                                                                                            // 1928\n            if (key) {                                                                                                // 1929\n                duration[key] = input;                                                                                // 1930\n            } else {                                                                                                  // 1931\n                duration.milliseconds = input;                                                                        // 1932\n            }                                                                                                         // 1933\n        } else if (!!(match = aspNetRegex.exec(input))) {                                                             // 1934\n            sign = (match[1] === '-') ? -1 : 1;                                                                       // 1935\n            duration = {                                                                                              // 1936\n                y  : 0,                                                                                               // 1937\n                d  : toInt(match[DATE])        * sign,                                                                // 1938\n                h  : toInt(match[HOUR])        * sign,                                                                // 1939\n                m  : toInt(match[MINUTE])      * sign,                                                                // 1940\n                s  : toInt(match[SECOND])      * sign,                                                                // 1941\n                ms : toInt(match[MILLISECOND]) * sign                                                                 // 1942\n            };                                                                                                        // 1943\n        } else if (!!(match = isoRegex.exec(input))) {                                                                // 1944\n            sign = (match[1] === '-') ? -1 : 1;                                                                       // 1945\n            duration = {                                                                                              // 1946\n                y : parseIso(match[2], sign),                                                                         // 1947\n                M : parseIso(match[3], sign),                                                                         // 1948\n                w : parseIso(match[4], sign),                                                                         // 1949\n                d : parseIso(match[5], sign),                                                                         // 1950\n                h : parseIso(match[6], sign),                                                                         // 1951\n                m : parseIso(match[7], sign),                                                                         // 1952\n                s : parseIso(match[8], sign)                                                                          // 1953\n            };                                                                                                        // 1954\n        } else if (duration == null) {// checks for null or undefined                                                 // 1955\n            duration = {};                                                                                            // 1956\n        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {                        // 1957\n            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));          // 1958\n                                                                                                                      // 1959\n            duration = {};                                                                                            // 1960\n            duration.ms = diffRes.milliseconds;                                                                       // 1961\n            duration.M = diffRes.months;                                                                              // 1962\n        }                                                                                                             // 1963\n                                                                                                                      // 1964\n        ret = new Duration(duration);                                                                                 // 1965\n                                                                                                                      // 1966\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {                                                      // 1967\n            ret._locale = input._locale;                                                                              // 1968\n        }                                                                                                             // 1969\n                                                                                                                      // 1970\n        return ret;                                                                                                   // 1971\n    }                                                                                                                 // 1972\n                                                                                                                      // 1973\n    create__createDuration.fn = Duration.prototype;                                                                   // 1974\n                                                                                                                      // 1975\n    function parseIso (inp, sign) {                                                                                   // 1976\n        // We'd normally use ~~inp for this, but unfortunately it also                                                // 1977\n        // converts floats to ints.                                                                                   // 1978\n        // inp may be undefined, so careful calling replace on it.                                                    // 1979\n        var res = inp && parseFloat(inp.replace(',', '.'));                                                           // 1980\n        // apply sign while we're at it                                                                               // 1981\n        return (isNaN(res) ? 0 : res) * sign;                                                                         // 1982\n    }                                                                                                                 // 1983\n                                                                                                                      // 1984\n    function positiveMomentsDifference(base, other) {                                                                 // 1985\n        var res = {milliseconds: 0, months: 0};                                                                       // 1986\n                                                                                                                      // 1987\n        res.months = other.month() - base.month() +                                                                   // 1988\n            (other.year() - base.year()) * 12;                                                                        // 1989\n        if (base.clone().add(res.months, 'M').isAfter(other)) {                                                       // 1990\n            --res.months;                                                                                             // 1991\n        }                                                                                                             // 1992\n                                                                                                                      // 1993\n        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));                                             // 1994\n                                                                                                                      // 1995\n        return res;                                                                                                   // 1996\n    }                                                                                                                 // 1997\n                                                                                                                      // 1998\n    function momentsDifference(base, other) {                                                                         // 1999\n        var res;                                                                                                      // 2000\n        if (!(base.isValid() && other.isValid())) {                                                                   // 2001\n            return {milliseconds: 0, months: 0};                                                                      // 2002\n        }                                                                                                             // 2003\n                                                                                                                      // 2004\n        other = cloneWithOffset(other, base);                                                                         // 2005\n        if (base.isBefore(other)) {                                                                                   // 2006\n            res = positiveMomentsDifference(base, other);                                                             // 2007\n        } else {                                                                                                      // 2008\n            res = positiveMomentsDifference(other, base);                                                             // 2009\n            res.milliseconds = -res.milliseconds;                                                                     // 2010\n            res.months = -res.months;                                                                                 // 2011\n        }                                                                                                             // 2012\n                                                                                                                      // 2013\n        return res;                                                                                                   // 2014\n    }                                                                                                                 // 2015\n                                                                                                                      // 2016\n    function absRound (number) {                                                                                      // 2017\n        if (number < 0) {                                                                                             // 2018\n            return Math.round(-1 * number) * -1;                                                                      // 2019\n        } else {                                                                                                      // 2020\n            return Math.round(number);                                                                                // 2021\n        }                                                                                                             // 2022\n    }                                                                                                                 // 2023\n                                                                                                                      // 2024\n    // TODO: remove 'name' arg after deprecation is removed                                                           // 2025\n    function createAdder(direction, name) {                                                                           // 2026\n        return function (val, period) {                                                                               // 2027\n            var dur, tmp;                                                                                             // 2028\n            //invert the arguments, but complain about it                                                             // 2029\n            if (period !== null && !isNaN(+period)) {                                                                 // 2030\n                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');\n                tmp = val; val = period; period = tmp;                                                                // 2032\n            }                                                                                                         // 2033\n                                                                                                                      // 2034\n            val = typeof val === 'string' ? +val : val;                                                               // 2035\n            dur = create__createDuration(val, period);                                                                // 2036\n            add_subtract__addSubtract(this, dur, direction);                                                          // 2037\n            return this;                                                                                              // 2038\n        };                                                                                                            // 2039\n    }                                                                                                                 // 2040\n                                                                                                                      // 2041\n    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {                                      // 2042\n        var milliseconds = duration._milliseconds,                                                                    // 2043\n            days = absRound(duration._days),                                                                          // 2044\n            months = absRound(duration._months);                                                                      // 2045\n                                                                                                                      // 2046\n        if (!mom.isValid()) {                                                                                         // 2047\n            // No op                                                                                                  // 2048\n            return;                                                                                                   // 2049\n        }                                                                                                             // 2050\n                                                                                                                      // 2051\n        updateOffset = updateOffset == null ? true : updateOffset;                                                    // 2052\n                                                                                                                      // 2053\n        if (milliseconds) {                                                                                           // 2054\n            mom._d.setTime(+mom._d + milliseconds * isAdding);                                                        // 2055\n        }                                                                                                             // 2056\n        if (days) {                                                                                                   // 2057\n            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);                                   // 2058\n        }                                                                                                             // 2059\n        if (months) {                                                                                                 // 2060\n            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);                                            // 2061\n        }                                                                                                             // 2062\n        if (updateOffset) {                                                                                           // 2063\n            utils_hooks__hooks.updateOffset(mom, days || months);                                                     // 2064\n        }                                                                                                             // 2065\n    }                                                                                                                 // 2066\n                                                                                                                      // 2067\n    var add_subtract__add      = createAdder(1, 'add');                                                               // 2068\n    var add_subtract__subtract = createAdder(-1, 'subtract');                                                         // 2069\n                                                                                                                      // 2070\n    function moment_calendar__calendar (time, formats) {                                                              // 2071\n        // We want to compare the start of today, vs this.                                                            // 2072\n        // Getting start-of-today depends on whether we're local/utc/offset or not.                                   // 2073\n        var now = time || local__createLocal(),                                                                       // 2074\n            sod = cloneWithOffset(now, this).startOf('day'),                                                          // 2075\n            diff = this.diff(sod, 'days', true),                                                                      // 2076\n            format = diff < -6 ? 'sameElse' :                                                                         // 2077\n                diff < -1 ? 'lastWeek' :                                                                              // 2078\n                diff < 0 ? 'lastDay' :                                                                                // 2079\n                diff < 1 ? 'sameDay' :                                                                                // 2080\n                diff < 2 ? 'nextDay' :                                                                                // 2081\n                diff < 7 ? 'nextWeek' : 'sameElse';                                                                   // 2082\n                                                                                                                      // 2083\n        var output = formats && (isFunction(formats[format]) ? formats[format]() : formats[format]);                  // 2084\n                                                                                                                      // 2085\n        return this.format(output || this.localeData().calendar(format, this, local__createLocal(now)));              // 2086\n    }                                                                                                                 // 2087\n                                                                                                                      // 2088\n    function clone () {                                                                                               // 2089\n        return new Moment(this);                                                                                      // 2090\n    }                                                                                                                 // 2091\n                                                                                                                      // 2092\n    function isAfter (input, units) {                                                                                 // 2093\n        var localInput = isMoment(input) ? input : local__createLocal(input);                                         // 2094\n        if (!(this.isValid() && localInput.isValid())) {                                                              // 2095\n            return false;                                                                                             // 2096\n        }                                                                                                             // 2097\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');                                          // 2098\n        if (units === 'millisecond') {                                                                                // 2099\n            return +this > +localInput;                                                                               // 2100\n        } else {                                                                                                      // 2101\n            return +localInput < +this.clone().startOf(units);                                                        // 2102\n        }                                                                                                             // 2103\n    }                                                                                                                 // 2104\n                                                                                                                      // 2105\n    function isBefore (input, units) {                                                                                // 2106\n        var localInput = isMoment(input) ? input : local__createLocal(input);                                         // 2107\n        if (!(this.isValid() && localInput.isValid())) {                                                              // 2108\n            return false;                                                                                             // 2109\n        }                                                                                                             // 2110\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');                                          // 2111\n        if (units === 'millisecond') {                                                                                // 2112\n            return +this < +localInput;                                                                               // 2113\n        } else {                                                                                                      // 2114\n            return +this.clone().endOf(units) < +localInput;                                                          // 2115\n        }                                                                                                             // 2116\n    }                                                                                                                 // 2117\n                                                                                                                      // 2118\n    function isBetween (from, to, units) {                                                                            // 2119\n        return this.isAfter(from, units) && this.isBefore(to, units);                                                 // 2120\n    }                                                                                                                 // 2121\n                                                                                                                      // 2122\n    function isSame (input, units) {                                                                                  // 2123\n        var localInput = isMoment(input) ? input : local__createLocal(input),                                         // 2124\n            inputMs;                                                                                                  // 2125\n        if (!(this.isValid() && localInput.isValid())) {                                                              // 2126\n            return false;                                                                                             // 2127\n        }                                                                                                             // 2128\n        units = normalizeUnits(units || 'millisecond');                                                               // 2129\n        if (units === 'millisecond') {                                                                                // 2130\n            return +this === +localInput;                                                                             // 2131\n        } else {                                                                                                      // 2132\n            inputMs = +localInput;                                                                                    // 2133\n            return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));              // 2134\n        }                                                                                                             // 2135\n    }                                                                                                                 // 2136\n                                                                                                                      // 2137\n    function isSameOrAfter (input, units) {                                                                           // 2138\n        return this.isSame(input, units) || this.isAfter(input,units);                                                // 2139\n    }                                                                                                                 // 2140\n                                                                                                                      // 2141\n    function isSameOrBefore (input, units) {                                                                          // 2142\n        return this.isSame(input, units) || this.isBefore(input,units);                                               // 2143\n    }                                                                                                                 // 2144\n                                                                                                                      // 2145\n    function diff (input, units, asFloat) {                                                                           // 2146\n        var that,                                                                                                     // 2147\n            zoneDelta,                                                                                                // 2148\n            delta, output;                                                                                            // 2149\n                                                                                                                      // 2150\n        if (!this.isValid()) {                                                                                        // 2151\n            return NaN;                                                                                               // 2152\n        }                                                                                                             // 2153\n                                                                                                                      // 2154\n        that = cloneWithOffset(input, this);                                                                          // 2155\n                                                                                                                      // 2156\n        if (!that.isValid()) {                                                                                        // 2157\n            return NaN;                                                                                               // 2158\n        }                                                                                                             // 2159\n                                                                                                                      // 2160\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;                                                      // 2161\n                                                                                                                      // 2162\n        units = normalizeUnits(units);                                                                                // 2163\n                                                                                                                      // 2164\n        if (units === 'year' || units === 'month' || units === 'quarter') {                                           // 2165\n            output = monthDiff(this, that);                                                                           // 2166\n            if (units === 'quarter') {                                                                                // 2167\n                output = output / 3;                                                                                  // 2168\n            } else if (units === 'year') {                                                                            // 2169\n                output = output / 12;                                                                                 // 2170\n            }                                                                                                         // 2171\n        } else {                                                                                                      // 2172\n            delta = this - that;                                                                                      // 2173\n            output = units === 'second' ? delta / 1e3 : // 1000                                                       // 2174\n                units === 'minute' ? delta / 6e4 : // 1000 * 60                                                       // 2175\n                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60                                                   // 2176\n                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst                    // 2177\n                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst              // 2178\n                delta;                                                                                                // 2179\n        }                                                                                                             // 2180\n        return asFloat ? output : absFloor(output);                                                                   // 2181\n    }                                                                                                                 // 2182\n                                                                                                                      // 2183\n    function monthDiff (a, b) {                                                                                       // 2184\n        // difference in months                                                                                       // 2185\n        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),                                  // 2186\n            // b is in (anchor - 1 month, anchor + 1 month)                                                           // 2187\n            anchor = a.clone().add(wholeMonthDiff, 'months'),                                                         // 2188\n            anchor2, adjust;                                                                                          // 2189\n                                                                                                                      // 2190\n        if (b - anchor < 0) {                                                                                         // 2191\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');                                                    // 2192\n            // linear across the month                                                                                // 2193\n            adjust = (b - anchor) / (anchor - anchor2);                                                               // 2194\n        } else {                                                                                                      // 2195\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');                                                    // 2196\n            // linear across the month                                                                                // 2197\n            adjust = (b - anchor) / (anchor2 - anchor);                                                               // 2198\n        }                                                                                                             // 2199\n                                                                                                                      // 2200\n        return -(wholeMonthDiff + adjust);                                                                            // 2201\n    }                                                                                                                 // 2202\n                                                                                                                      // 2203\n    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';                                                        // 2204\n                                                                                                                      // 2205\n    function toString () {                                                                                            // 2206\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');                                  // 2207\n    }                                                                                                                 // 2208\n                                                                                                                      // 2209\n    function moment_format__toISOString () {                                                                          // 2210\n        var m = this.clone().utc();                                                                                   // 2211\n        if (0 < m.year() && m.year() <= 9999) {                                                                       // 2212\n            if (isFunction(Date.prototype.toISOString)) {                                                             // 2213\n                // native implementation is ~50x faster, use it when we can                                           // 2214\n                return this.toDate().toISOString();                                                                   // 2215\n            } else {                                                                                                  // 2216\n                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');                                               // 2217\n            }                                                                                                         // 2218\n        } else {                                                                                                      // 2219\n            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');                                                 // 2220\n        }                                                                                                             // 2221\n    }                                                                                                                 // 2222\n                                                                                                                      // 2223\n    function format (inputString) {                                                                                   // 2224\n        var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);                             // 2225\n        return this.localeData().postformat(output);                                                                  // 2226\n    }                                                                                                                 // 2227\n                                                                                                                      // 2228\n    function from (time, withoutSuffix) {                                                                             // 2229\n        if (this.isValid() &&                                                                                         // 2230\n                ((isMoment(time) && time.isValid()) ||                                                                // 2231\n                 local__createLocal(time).isValid())) {                                                               // 2232\n            return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);     // 2233\n        } else {                                                                                                      // 2234\n            return this.localeData().invalidDate();                                                                   // 2235\n        }                                                                                                             // 2236\n    }                                                                                                                 // 2237\n                                                                                                                      // 2238\n    function fromNow (withoutSuffix) {                                                                                // 2239\n        return this.from(local__createLocal(), withoutSuffix);                                                        // 2240\n    }                                                                                                                 // 2241\n                                                                                                                      // 2242\n    function to (time, withoutSuffix) {                                                                               // 2243\n        if (this.isValid() &&                                                                                         // 2244\n                ((isMoment(time) && time.isValid()) ||                                                                // 2245\n                 local__createLocal(time).isValid())) {                                                               // 2246\n            return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);     // 2247\n        } else {                                                                                                      // 2248\n            return this.localeData().invalidDate();                                                                   // 2249\n        }                                                                                                             // 2250\n    }                                                                                                                 // 2251\n                                                                                                                      // 2252\n    function toNow (withoutSuffix) {                                                                                  // 2253\n        return this.to(local__createLocal(), withoutSuffix);                                                          // 2254\n    }                                                                                                                 // 2255\n                                                                                                                      // 2256\n    // If passed a locale key, it will set the locale for this                                                        // 2257\n    // instance.  Otherwise, it will return the locale configuration                                                  // 2258\n    // variables for this instance.                                                                                   // 2259\n    function locale (key) {                                                                                           // 2260\n        var newLocaleData;                                                                                            // 2261\n                                                                                                                      // 2262\n        if (key === undefined) {                                                                                      // 2263\n            return this._locale._abbr;                                                                                // 2264\n        } else {                                                                                                      // 2265\n            newLocaleData = locale_locales__getLocale(key);                                                           // 2266\n            if (newLocaleData != null) {                                                                              // 2267\n                this._locale = newLocaleData;                                                                         // 2268\n            }                                                                                                         // 2269\n            return this;                                                                                              // 2270\n        }                                                                                                             // 2271\n    }                                                                                                                 // 2272\n                                                                                                                      // 2273\n    var lang = deprecate(                                                                                             // 2274\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n        function (key) {                                                                                              // 2276\n            if (key === undefined) {                                                                                  // 2277\n                return this.localeData();                                                                             // 2278\n            } else {                                                                                                  // 2279\n                return this.locale(key);                                                                              // 2280\n            }                                                                                                         // 2281\n        }                                                                                                             // 2282\n    );                                                                                                                // 2283\n                                                                                                                      // 2284\n    function localeData () {                                                                                          // 2285\n        return this._locale;                                                                                          // 2286\n    }                                                                                                                 // 2287\n                                                                                                                      // 2288\n    function startOf (units) {                                                                                        // 2289\n        units = normalizeUnits(units);                                                                                // 2290\n        // the following switch intentionally omits break keywords                                                    // 2291\n        // to utilize falling through the cases.                                                                      // 2292\n        switch (units) {                                                                                              // 2293\n        case 'year':                                                                                                  // 2294\n            this.month(0);                                                                                            // 2295\n            /* falls through */                                                                                       // 2296\n        case 'quarter':                                                                                               // 2297\n        case 'month':                                                                                                 // 2298\n            this.date(1);                                                                                             // 2299\n            /* falls through */                                                                                       // 2300\n        case 'week':                                                                                                  // 2301\n        case 'isoWeek':                                                                                               // 2302\n        case 'day':                                                                                                   // 2303\n            this.hours(0);                                                                                            // 2304\n            /* falls through */                                                                                       // 2305\n        case 'hour':                                                                                                  // 2306\n            this.minutes(0);                                                                                          // 2307\n            /* falls through */                                                                                       // 2308\n        case 'minute':                                                                                                // 2309\n            this.seconds(0);                                                                                          // 2310\n            /* falls through */                                                                                       // 2311\n        case 'second':                                                                                                // 2312\n            this.milliseconds(0);                                                                                     // 2313\n        }                                                                                                             // 2314\n                                                                                                                      // 2315\n        // weeks are a special case                                                                                   // 2316\n        if (units === 'week') {                                                                                       // 2317\n            this.weekday(0);                                                                                          // 2318\n        }                                                                                                             // 2319\n        if (units === 'isoWeek') {                                                                                    // 2320\n            this.isoWeekday(1);                                                                                       // 2321\n        }                                                                                                             // 2322\n                                                                                                                      // 2323\n        // quarters are also special                                                                                  // 2324\n        if (units === 'quarter') {                                                                                    // 2325\n            this.month(Math.floor(this.month() / 3) * 3);                                                             // 2326\n        }                                                                                                             // 2327\n                                                                                                                      // 2328\n        return this;                                                                                                  // 2329\n    }                                                                                                                 // 2330\n                                                                                                                      // 2331\n    function endOf (units) {                                                                                          // 2332\n        units = normalizeUnits(units);                                                                                // 2333\n        if (units === undefined || units === 'millisecond') {                                                         // 2334\n            return this;                                                                                              // 2335\n        }                                                                                                             // 2336\n        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');                  // 2337\n    }                                                                                                                 // 2338\n                                                                                                                      // 2339\n    function to_type__valueOf () {                                                                                    // 2340\n        return +this._d - ((this._offset || 0) * 60000);                                                              // 2341\n    }                                                                                                                 // 2342\n                                                                                                                      // 2343\n    function unix () {                                                                                                // 2344\n        return Math.floor(+this / 1000);                                                                              // 2345\n    }                                                                                                                 // 2346\n                                                                                                                      // 2347\n    function toDate () {                                                                                              // 2348\n        return this._offset ? new Date(+this) : this._d;                                                              // 2349\n    }                                                                                                                 // 2350\n                                                                                                                      // 2351\n    function toArray () {                                                                                             // 2352\n        var m = this;                                                                                                 // 2353\n        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];                    // 2354\n    }                                                                                                                 // 2355\n                                                                                                                      // 2356\n    function toObject () {                                                                                            // 2357\n        var m = this;                                                                                                 // 2358\n        return {                                                                                                      // 2359\n            years: m.year(),                                                                                          // 2360\n            months: m.month(),                                                                                        // 2361\n            date: m.date(),                                                                                           // 2362\n            hours: m.hours(),                                                                                         // 2363\n            minutes: m.minutes(),                                                                                     // 2364\n            seconds: m.seconds(),                                                                                     // 2365\n            milliseconds: m.milliseconds()                                                                            // 2366\n        };                                                                                                            // 2367\n    }                                                                                                                 // 2368\n                                                                                                                      // 2369\n    function toJSON () {                                                                                              // 2370\n        // new Date(NaN).toJSON() === null                                                                            // 2371\n        return this.isValid() ? this.toISOString() : null;                                                            // 2372\n    }                                                                                                                 // 2373\n                                                                                                                      // 2374\n    function moment_valid__isValid () {                                                                               // 2375\n        return valid__isValid(this);                                                                                  // 2376\n    }                                                                                                                 // 2377\n                                                                                                                      // 2378\n    function parsingFlags () {                                                                                        // 2379\n        return extend({}, getParsingFlags(this));                                                                     // 2380\n    }                                                                                                                 // 2381\n                                                                                                                      // 2382\n    function invalidAt () {                                                                                           // 2383\n        return getParsingFlags(this).overflow;                                                                        // 2384\n    }                                                                                                                 // 2385\n                                                                                                                      // 2386\n    function creationData() {                                                                                         // 2387\n        return {                                                                                                      // 2388\n            input: this._i,                                                                                           // 2389\n            format: this._f,                                                                                          // 2390\n            locale: this._locale,                                                                                     // 2391\n            isUTC: this._isUTC,                                                                                       // 2392\n            strict: this._strict                                                                                      // 2393\n        };                                                                                                            // 2394\n    }                                                                                                                 // 2395\n                                                                                                                      // 2396\n    // FORMATTING                                                                                                     // 2397\n                                                                                                                      // 2398\n    addFormatToken(0, ['gg', 2], 0, function () {                                                                     // 2399\n        return this.weekYear() % 100;                                                                                 // 2400\n    });                                                                                                               // 2401\n                                                                                                                      // 2402\n    addFormatToken(0, ['GG', 2], 0, function () {                                                                     // 2403\n        return this.isoWeekYear() % 100;                                                                              // 2404\n    });                                                                                                               // 2405\n                                                                                                                      // 2406\n    function addWeekYearFormatToken (token, getter) {                                                                 // 2407\n        addFormatToken(0, [token, token.length], 0, getter);                                                          // 2408\n    }                                                                                                                 // 2409\n                                                                                                                      // 2410\n    addWeekYearFormatToken('gggg',     'weekYear');                                                                   // 2411\n    addWeekYearFormatToken('ggggg',    'weekYear');                                                                   // 2412\n    addWeekYearFormatToken('GGGG',  'isoWeekYear');                                                                   // 2413\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');                                                                   // 2414\n                                                                                                                      // 2415\n    // ALIASES                                                                                                        // 2416\n                                                                                                                      // 2417\n    addUnitAlias('weekYear', 'gg');                                                                                   // 2418\n    addUnitAlias('isoWeekYear', 'GG');                                                                                // 2419\n                                                                                                                      // 2420\n    // PARSING                                                                                                        // 2421\n                                                                                                                      // 2422\n    addRegexToken('G',      matchSigned);                                                                             // 2423\n    addRegexToken('g',      matchSigned);                                                                             // 2424\n    addRegexToken('GG',     match1to2, match2);                                                                       // 2425\n    addRegexToken('gg',     match1to2, match2);                                                                       // 2426\n    addRegexToken('GGGG',   match1to4, match4);                                                                       // 2427\n    addRegexToken('gggg',   match1to4, match4);                                                                       // 2428\n    addRegexToken('GGGGG',  match1to6, match6);                                                                       // 2429\n    addRegexToken('ggggg',  match1to6, match6);                                                                       // 2430\n                                                                                                                      // 2431\n    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {                     // 2432\n        week[token.substr(0, 2)] = toInt(input);                                                                      // 2433\n    });                                                                                                               // 2434\n                                                                                                                      // 2435\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {                                           // 2436\n        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);                                                    // 2437\n    });                                                                                                               // 2438\n                                                                                                                      // 2439\n    // MOMENTS                                                                                                        // 2440\n                                                                                                                      // 2441\n    function getSetWeekYear (input) {                                                                                 // 2442\n        return getSetWeekYearHelper.call(this,                                                                        // 2443\n                input,                                                                                                // 2444\n                this.week(),                                                                                          // 2445\n                this.weekday(),                                                                                       // 2446\n                this.localeData()._week.dow,                                                                          // 2447\n                this.localeData()._week.doy);                                                                         // 2448\n    }                                                                                                                 // 2449\n                                                                                                                      // 2450\n    function getSetISOWeekYear (input) {                                                                              // 2451\n        return getSetWeekYearHelper.call(this,                                                                        // 2452\n                input, this.isoWeek(), this.isoWeekday(), 1, 4);                                                      // 2453\n    }                                                                                                                 // 2454\n                                                                                                                      // 2455\n    function getISOWeeksInYear () {                                                                                   // 2456\n        return weeksInYear(this.year(), 1, 4);                                                                        // 2457\n    }                                                                                                                 // 2458\n                                                                                                                      // 2459\n    function getWeeksInYear () {                                                                                      // 2460\n        var weekInfo = this.localeData()._week;                                                                       // 2461\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);                                                  // 2462\n    }                                                                                                                 // 2463\n                                                                                                                      // 2464\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {                                                   // 2465\n        var weeksTarget;                                                                                              // 2466\n        if (input == null) {                                                                                          // 2467\n            return weekOfYear(this, dow, doy).year;                                                                   // 2468\n        } else {                                                                                                      // 2469\n            weeksTarget = weeksInYear(input, dow, doy);                                                               // 2470\n            if (week > weeksTarget) {                                                                                 // 2471\n                week = weeksTarget;                                                                                   // 2472\n            }                                                                                                         // 2473\n            return setWeekAll.call(this, input, week, weekday, dow, doy);                                             // 2474\n        }                                                                                                             // 2475\n    }                                                                                                                 // 2476\n                                                                                                                      // 2477\n    function setWeekAll(weekYear, week, weekday, dow, doy) {                                                          // 2478\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),                                    // 2479\n            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);                                     // 2480\n                                                                                                                      // 2481\n        this.year(date.getUTCFullYear());                                                                             // 2482\n        this.month(date.getUTCMonth());                                                                               // 2483\n        this.date(date.getUTCDate());                                                                                 // 2484\n        return this;                                                                                                  // 2485\n    }                                                                                                                 // 2486\n                                                                                                                      // 2487\n    // FORMATTING                                                                                                     // 2488\n                                                                                                                      // 2489\n    addFormatToken('Q', 0, 'Qo', 'quarter');                                                                          // 2490\n                                                                                                                      // 2491\n    // ALIASES                                                                                                        // 2492\n                                                                                                                      // 2493\n    addUnitAlias('quarter', 'Q');                                                                                     // 2494\n                                                                                                                      // 2495\n    // PARSING                                                                                                        // 2496\n                                                                                                                      // 2497\n    addRegexToken('Q', match1);                                                                                       // 2498\n    addParseToken('Q', function (input, array) {                                                                      // 2499\n        array[MONTH] = (toInt(input) - 1) * 3;                                                                        // 2500\n    });                                                                                                               // 2501\n                                                                                                                      // 2502\n    // MOMENTS                                                                                                        // 2503\n                                                                                                                      // 2504\n    function getSetQuarter (input) {                                                                                  // 2505\n        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);    // 2506\n    }                                                                                                                 // 2507\n                                                                                                                      // 2508\n    // FORMATTING                                                                                                     // 2509\n                                                                                                                      // 2510\n    addFormatToken('w', ['ww', 2], 'wo', 'week');                                                                     // 2511\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');                                                                  // 2512\n                                                                                                                      // 2513\n    // ALIASES                                                                                                        // 2514\n                                                                                                                      // 2515\n    addUnitAlias('week', 'w');                                                                                        // 2516\n    addUnitAlias('isoWeek', 'W');                                                                                     // 2517\n                                                                                                                      // 2518\n    // PARSING                                                                                                        // 2519\n                                                                                                                      // 2520\n    addRegexToken('w',  match1to2);                                                                                   // 2521\n    addRegexToken('ww', match1to2, match2);                                                                           // 2522\n    addRegexToken('W',  match1to2);                                                                                   // 2523\n    addRegexToken('WW', match1to2, match2);                                                                           // 2524\n                                                                                                                      // 2525\n    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {                                 // 2526\n        week[token.substr(0, 1)] = toInt(input);                                                                      // 2527\n    });                                                                                                               // 2528\n                                                                                                                      // 2529\n    // HELPERS                                                                                                        // 2530\n                                                                                                                      // 2531\n    // LOCALES                                                                                                        // 2532\n                                                                                                                      // 2533\n    function localeWeek (mom) {                                                                                       // 2534\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;                                                  // 2535\n    }                                                                                                                 // 2536\n                                                                                                                      // 2537\n    var defaultLocaleWeek = {                                                                                         // 2538\n        dow : 0, // Sunday is the first day of the week.                                                              // 2539\n        doy : 6  // The week that contains Jan 1st is the first week of the year.                                     // 2540\n    };                                                                                                                // 2541\n                                                                                                                      // 2542\n    function localeFirstDayOfWeek () {                                                                                // 2543\n        return this._week.dow;                                                                                        // 2544\n    }                                                                                                                 // 2545\n                                                                                                                      // 2546\n    function localeFirstDayOfYear () {                                                                                // 2547\n        return this._week.doy;                                                                                        // 2548\n    }                                                                                                                 // 2549\n                                                                                                                      // 2550\n    // MOMENTS                                                                                                        // 2551\n                                                                                                                      // 2552\n    function getSetWeek (input) {                                                                                     // 2553\n        var week = this.localeData().week(this);                                                                      // 2554\n        return input == null ? week : this.add((input - week) * 7, 'd');                                              // 2555\n    }                                                                                                                 // 2556\n                                                                                                                      // 2557\n    function getSetISOWeek (input) {                                                                                  // 2558\n        var week = weekOfYear(this, 1, 4).week;                                                                       // 2559\n        return input == null ? week : this.add((input - week) * 7, 'd');                                              // 2560\n    }                                                                                                                 // 2561\n                                                                                                                      // 2562\n    // FORMATTING                                                                                                     // 2563\n                                                                                                                      // 2564\n    addFormatToken('D', ['DD', 2], 'Do', 'date');                                                                     // 2565\n                                                                                                                      // 2566\n    // ALIASES                                                                                                        // 2567\n                                                                                                                      // 2568\n    addUnitAlias('date', 'D');                                                                                        // 2569\n                                                                                                                      // 2570\n    // PARSING                                                                                                        // 2571\n                                                                                                                      // 2572\n    addRegexToken('D',  match1to2);                                                                                   // 2573\n    addRegexToken('DD', match1to2, match2);                                                                           // 2574\n    addRegexToken('Do', function (isStrict, locale) {                                                                 // 2575\n        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;                                         // 2576\n    });                                                                                                               // 2577\n                                                                                                                      // 2578\n    addParseToken(['D', 'DD'], DATE);                                                                                 // 2579\n    addParseToken('Do', function (input, array) {                                                                     // 2580\n        array[DATE] = toInt(input.match(match1to2)[0], 10);                                                           // 2581\n    });                                                                                                               // 2582\n                                                                                                                      // 2583\n    // MOMENTS                                                                                                        // 2584\n                                                                                                                      // 2585\n    var getSetDayOfMonth = makeGetSet('Date', true);                                                                  // 2586\n                                                                                                                      // 2587\n    // FORMATTING                                                                                                     // 2588\n                                                                                                                      // 2589\n    addFormatToken('d', 0, 'do', 'day');                                                                              // 2590\n                                                                                                                      // 2591\n    addFormatToken('dd', 0, 0, function (format) {                                                                    // 2592\n        return this.localeData().weekdaysMin(this, format);                                                           // 2593\n    });                                                                                                               // 2594\n                                                                                                                      // 2595\n    addFormatToken('ddd', 0, 0, function (format) {                                                                   // 2596\n        return this.localeData().weekdaysShort(this, format);                                                         // 2597\n    });                                                                                                               // 2598\n                                                                                                                      // 2599\n    addFormatToken('dddd', 0, 0, function (format) {                                                                  // 2600\n        return this.localeData().weekdays(this, format);                                                              // 2601\n    });                                                                                                               // 2602\n                                                                                                                      // 2603\n    addFormatToken('e', 0, 0, 'weekday');                                                                             // 2604\n    addFormatToken('E', 0, 0, 'isoWeekday');                                                                          // 2605\n                                                                                                                      // 2606\n    // ALIASES                                                                                                        // 2607\n                                                                                                                      // 2608\n    addUnitAlias('day', 'd');                                                                                         // 2609\n    addUnitAlias('weekday', 'e');                                                                                     // 2610\n    addUnitAlias('isoWeekday', 'E');                                                                                  // 2611\n                                                                                                                      // 2612\n    // PARSING                                                                                                        // 2613\n                                                                                                                      // 2614\n    addRegexToken('d',    match1to2);                                                                                 // 2615\n    addRegexToken('e',    match1to2);                                                                                 // 2616\n    addRegexToken('E',    match1to2);                                                                                 // 2617\n    addRegexToken('dd',   matchWord);                                                                                 // 2618\n    addRegexToken('ddd',  matchWord);                                                                                 // 2619\n    addRegexToken('dddd', matchWord);                                                                                 // 2620\n                                                                                                                      // 2621\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {                                  // 2622\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);                                     // 2623\n        // if we didn't get a weekday name, mark the date as invalid                                                  // 2624\n        if (weekday != null) {                                                                                        // 2625\n            week.d = weekday;                                                                                         // 2626\n        } else {                                                                                                      // 2627\n            getParsingFlags(config).invalidWeekday = input;                                                           // 2628\n        }                                                                                                             // 2629\n    });                                                                                                               // 2630\n                                                                                                                      // 2631\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {                                        // 2632\n        week[token] = toInt(input);                                                                                   // 2633\n    });                                                                                                               // 2634\n                                                                                                                      // 2635\n    // HELPERS                                                                                                        // 2636\n                                                                                                                      // 2637\n    function parseWeekday(input, locale) {                                                                            // 2638\n        if (typeof input !== 'string') {                                                                              // 2639\n            return input;                                                                                             // 2640\n        }                                                                                                             // 2641\n                                                                                                                      // 2642\n        if (!isNaN(input)) {                                                                                          // 2643\n            return parseInt(input, 10);                                                                               // 2644\n        }                                                                                                             // 2645\n                                                                                                                      // 2646\n        input = locale.weekdaysParse(input);                                                                          // 2647\n        if (typeof input === 'number') {                                                                              // 2648\n            return input;                                                                                             // 2649\n        }                                                                                                             // 2650\n                                                                                                                      // 2651\n        return null;                                                                                                  // 2652\n    }                                                                                                                 // 2653\n                                                                                                                      // 2654\n    // LOCALES                                                                                                        // 2655\n                                                                                                                      // 2656\n    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');                // 2657\n    function localeWeekdays (m, format) {                                                                             // 2658\n        return isArray(this._weekdays) ? this._weekdays[m.day()] :                                                    // 2659\n            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];                  // 2660\n    }                                                                                                                 // 2661\n                                                                                                                      // 2662\n    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');                                        // 2663\n    function localeWeekdaysShort (m) {                                                                                // 2664\n        return this._weekdaysShort[m.day()];                                                                          // 2665\n    }                                                                                                                 // 2666\n                                                                                                                      // 2667\n    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');                                                 // 2668\n    function localeWeekdaysMin (m) {                                                                                  // 2669\n        return this._weekdaysMin[m.day()];                                                                            // 2670\n    }                                                                                                                 // 2671\n                                                                                                                      // 2672\n    function localeWeekdaysParse (weekdayName, format, strict) {                                                      // 2673\n        var i, mom, regex;                                                                                            // 2674\n                                                                                                                      // 2675\n        if (!this._weekdaysParse) {                                                                                   // 2676\n            this._weekdaysParse = [];                                                                                 // 2677\n            this._minWeekdaysParse = [];                                                                              // 2678\n            this._shortWeekdaysParse = [];                                                                            // 2679\n            this._fullWeekdaysParse = [];                                                                             // 2680\n        }                                                                                                             // 2681\n                                                                                                                      // 2682\n        for (i = 0; i < 7; i++) {                                                                                     // 2683\n            // make the regex if we don't have it already                                                             // 2684\n                                                                                                                      // 2685\n            mom = local__createLocal([2000, 1]).day(i);                                                               // 2686\n            if (strict && !this._fullWeekdaysParse[i]) {                                                              // 2687\n                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');\n                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');\n                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');\n            }                                                                                                         // 2691\n            if (!this._weekdaysParse[i]) {                                                                            // 2692\n                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');                                     // 2694\n            }                                                                                                         // 2695\n            // test the regex                                                                                         // 2696\n            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {                        // 2697\n                return i;                                                                                             // 2698\n            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {                 // 2699\n                return i;                                                                                             // 2700\n            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {                    // 2701\n                return i;                                                                                             // 2702\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {                                         // 2703\n                return i;                                                                                             // 2704\n            }                                                                                                         // 2705\n        }                                                                                                             // 2706\n    }                                                                                                                 // 2707\n                                                                                                                      // 2708\n    // MOMENTS                                                                                                        // 2709\n                                                                                                                      // 2710\n    function getSetDayOfWeek (input) {                                                                                // 2711\n        if (!this.isValid()) {                                                                                        // 2712\n            return input != null ? this : NaN;                                                                        // 2713\n        }                                                                                                             // 2714\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();                                               // 2715\n        if (input != null) {                                                                                          // 2716\n            input = parseWeekday(input, this.localeData());                                                           // 2717\n            return this.add(input - day, 'd');                                                                        // 2718\n        } else {                                                                                                      // 2719\n            return day;                                                                                               // 2720\n        }                                                                                                             // 2721\n    }                                                                                                                 // 2722\n                                                                                                                      // 2723\n    function getSetLocaleDayOfWeek (input) {                                                                          // 2724\n        if (!this.isValid()) {                                                                                        // 2725\n            return input != null ? this : NaN;                                                                        // 2726\n        }                                                                                                             // 2727\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;                                             // 2728\n        return input == null ? weekday : this.add(input - weekday, 'd');                                              // 2729\n    }                                                                                                                 // 2730\n                                                                                                                      // 2731\n    function getSetISODayOfWeek (input) {                                                                             // 2732\n        if (!this.isValid()) {                                                                                        // 2733\n            return input != null ? this : NaN;                                                                        // 2734\n        }                                                                                                             // 2735\n        // behaves the same as moment#day except                                                                      // 2736\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)                                             // 2737\n        // as a setter, sunday should belong to the previous week.                                                    // 2738\n        return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);                        // 2739\n    }                                                                                                                 // 2740\n                                                                                                                      // 2741\n    // FORMATTING                                                                                                     // 2742\n                                                                                                                      // 2743\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');                                                          // 2744\n                                                                                                                      // 2745\n    // ALIASES                                                                                                        // 2746\n                                                                                                                      // 2747\n    addUnitAlias('dayOfYear', 'DDD');                                                                                 // 2748\n                                                                                                                      // 2749\n    // PARSING                                                                                                        // 2750\n                                                                                                                      // 2751\n    addRegexToken('DDD',  match1to3);                                                                                 // 2752\n    addRegexToken('DDDD', match3);                                                                                    // 2753\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {                                                  // 2754\n        config._dayOfYear = toInt(input);                                                                             // 2755\n    });                                                                                                               // 2756\n                                                                                                                      // 2757\n    // HELPERS                                                                                                        // 2758\n                                                                                                                      // 2759\n    // MOMENTS                                                                                                        // 2760\n                                                                                                                      // 2761\n    function getSetDayOfYear (input) {                                                                                // 2762\n        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;         // 2763\n        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');                                        // 2764\n    }                                                                                                                 // 2765\n                                                                                                                      // 2766\n    // FORMATTING                                                                                                     // 2767\n                                                                                                                      // 2768\n    function hFormat() {                                                                                              // 2769\n        return this.hours() % 12 || 12;                                                                               // 2770\n    }                                                                                                                 // 2771\n                                                                                                                      // 2772\n    addFormatToken('H', ['HH', 2], 0, 'hour');                                                                        // 2773\n    addFormatToken('h', ['hh', 2], 0, hFormat);                                                                       // 2774\n                                                                                                                      // 2775\n    addFormatToken('hmm', 0, 0, function () {                                                                         // 2776\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);                                                // 2777\n    });                                                                                                               // 2778\n                                                                                                                      // 2779\n    addFormatToken('hmmss', 0, 0, function () {                                                                       // 2780\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +                                               // 2781\n            zeroFill(this.seconds(), 2);                                                                              // 2782\n    });                                                                                                               // 2783\n                                                                                                                      // 2784\n    addFormatToken('Hmm', 0, 0, function () {                                                                         // 2785\n        return '' + this.hours() + zeroFill(this.minutes(), 2);                                                       // 2786\n    });                                                                                                               // 2787\n                                                                                                                      // 2788\n    addFormatToken('Hmmss', 0, 0, function () {                                                                       // 2789\n        return '' + this.hours() + zeroFill(this.minutes(), 2) +                                                      // 2790\n            zeroFill(this.seconds(), 2);                                                                              // 2791\n    });                                                                                                               // 2792\n                                                                                                                      // 2793\n    function meridiem (token, lowercase) {                                                                            // 2794\n        addFormatToken(token, 0, 0, function () {                                                                     // 2795\n            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);                               // 2796\n        });                                                                                                           // 2797\n    }                                                                                                                 // 2798\n                                                                                                                      // 2799\n    meridiem('a', true);                                                                                              // 2800\n    meridiem('A', false);                                                                                             // 2801\n                                                                                                                      // 2802\n    // ALIASES                                                                                                        // 2803\n                                                                                                                      // 2804\n    addUnitAlias('hour', 'h');                                                                                        // 2805\n                                                                                                                      // 2806\n    // PARSING                                                                                                        // 2807\n                                                                                                                      // 2808\n    function matchMeridiem (isStrict, locale) {                                                                       // 2809\n        return locale._meridiemParse;                                                                                 // 2810\n    }                                                                                                                 // 2811\n                                                                                                                      // 2812\n    addRegexToken('a',  matchMeridiem);                                                                               // 2813\n    addRegexToken('A',  matchMeridiem);                                                                               // 2814\n    addRegexToken('H',  match1to2);                                                                                   // 2815\n    addRegexToken('h',  match1to2);                                                                                   // 2816\n    addRegexToken('HH', match1to2, match2);                                                                           // 2817\n    addRegexToken('hh', match1to2, match2);                                                                           // 2818\n                                                                                                                      // 2819\n    addRegexToken('hmm', match3to4);                                                                                  // 2820\n    addRegexToken('hmmss', match5to6);                                                                                // 2821\n    addRegexToken('Hmm', match3to4);                                                                                  // 2822\n    addRegexToken('Hmmss', match5to6);                                                                                // 2823\n                                                                                                                      // 2824\n    addParseToken(['H', 'HH'], HOUR);                                                                                 // 2825\n    addParseToken(['a', 'A'], function (input, array, config) {                                                       // 2826\n        config._isPm = config._locale.isPM(input);                                                                    // 2827\n        config._meridiem = input;                                                                                     // 2828\n    });                                                                                                               // 2829\n    addParseToken(['h', 'hh'], function (input, array, config) {                                                      // 2830\n        array[HOUR] = toInt(input);                                                                                   // 2831\n        getParsingFlags(config).bigHour = true;                                                                       // 2832\n    });                                                                                                               // 2833\n    addParseToken('hmm', function (input, array, config) {                                                            // 2834\n        var pos = input.length - 2;                                                                                   // 2835\n        array[HOUR] = toInt(input.substr(0, pos));                                                                    // 2836\n        array[MINUTE] = toInt(input.substr(pos));                                                                     // 2837\n        getParsingFlags(config).bigHour = true;                                                                       // 2838\n    });                                                                                                               // 2839\n    addParseToken('hmmss', function (input, array, config) {                                                          // 2840\n        var pos1 = input.length - 4;                                                                                  // 2841\n        var pos2 = input.length - 2;                                                                                  // 2842\n        array[HOUR] = toInt(input.substr(0, pos1));                                                                   // 2843\n        array[MINUTE] = toInt(input.substr(pos1, 2));                                                                 // 2844\n        array[SECOND] = toInt(input.substr(pos2));                                                                    // 2845\n        getParsingFlags(config).bigHour = true;                                                                       // 2846\n    });                                                                                                               // 2847\n    addParseToken('Hmm', function (input, array, config) {                                                            // 2848\n        var pos = input.length - 2;                                                                                   // 2849\n        array[HOUR] = toInt(input.substr(0, pos));                                                                    // 2850\n        array[MINUTE] = toInt(input.substr(pos));                                                                     // 2851\n    });                                                                                                               // 2852\n    addParseToken('Hmmss', function (input, array, config) {                                                          // 2853\n        var pos1 = input.length - 4;                                                                                  // 2854\n        var pos2 = input.length - 2;                                                                                  // 2855\n        array[HOUR] = toInt(input.substr(0, pos1));                                                                   // 2856\n        array[MINUTE] = toInt(input.substr(pos1, 2));                                                                 // 2857\n        array[SECOND] = toInt(input.substr(pos2));                                                                    // 2858\n    });                                                                                                               // 2859\n                                                                                                                      // 2860\n    // LOCALES                                                                                                        // 2861\n                                                                                                                      // 2862\n    function localeIsPM (input) {                                                                                     // 2863\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays                            // 2864\n        // Using charAt should be more compatible.                                                                    // 2865\n        return ((input + '').toLowerCase().charAt(0) === 'p');                                                        // 2866\n    }                                                                                                                 // 2867\n                                                                                                                      // 2868\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;                                                                 // 2869\n    function localeMeridiem (hours, minutes, isLower) {                                                               // 2870\n        if (hours > 11) {                                                                                             // 2871\n            return isLower ? 'pm' : 'PM';                                                                             // 2872\n        } else {                                                                                                      // 2873\n            return isLower ? 'am' : 'AM';                                                                             // 2874\n        }                                                                                                             // 2875\n    }                                                                                                                 // 2876\n                                                                                                                      // 2877\n                                                                                                                      // 2878\n    // MOMENTS                                                                                                        // 2879\n                                                                                                                      // 2880\n    // Setting the hour should keep the time, because the user explicitly                                             // 2881\n    // specified which hour he wants. So trying to maintain the same hour (in                                         // 2882\n    // a new timezone) makes sense. Adding/subtracting hours does not follow                                          // 2883\n    // this rule.                                                                                                     // 2884\n    var getSetHour = makeGetSet('Hours', true);                                                                       // 2885\n                                                                                                                      // 2886\n    // FORMATTING                                                                                                     // 2887\n                                                                                                                      // 2888\n    addFormatToken('m', ['mm', 2], 0, 'minute');                                                                      // 2889\n                                                                                                                      // 2890\n    // ALIASES                                                                                                        // 2891\n                                                                                                                      // 2892\n    addUnitAlias('minute', 'm');                                                                                      // 2893\n                                                                                                                      // 2894\n    // PARSING                                                                                                        // 2895\n                                                                                                                      // 2896\n    addRegexToken('m',  match1to2);                                                                                   // 2897\n    addRegexToken('mm', match1to2, match2);                                                                           // 2898\n    addParseToken(['m', 'mm'], MINUTE);                                                                               // 2899\n                                                                                                                      // 2900\n    // MOMENTS                                                                                                        // 2901\n                                                                                                                      // 2902\n    var getSetMinute = makeGetSet('Minutes', false);                                                                  // 2903\n                                                                                                                      // 2904\n    // FORMATTING                                                                                                     // 2905\n                                                                                                                      // 2906\n    addFormatToken('s', ['ss', 2], 0, 'second');                                                                      // 2907\n                                                                                                                      // 2908\n    // ALIASES                                                                                                        // 2909\n                                                                                                                      // 2910\n    addUnitAlias('second', 's');                                                                                      // 2911\n                                                                                                                      // 2912\n    // PARSING                                                                                                        // 2913\n                                                                                                                      // 2914\n    addRegexToken('s',  match1to2);                                                                                   // 2915\n    addRegexToken('ss', match1to2, match2);                                                                           // 2916\n    addParseToken(['s', 'ss'], SECOND);                                                                               // 2917\n                                                                                                                      // 2918\n    // MOMENTS                                                                                                        // 2919\n                                                                                                                      // 2920\n    var getSetSecond = makeGetSet('Seconds', false);                                                                  // 2921\n                                                                                                                      // 2922\n    // FORMATTING                                                                                                     // 2923\n                                                                                                                      // 2924\n    addFormatToken('S', 0, 0, function () {                                                                           // 2925\n        return ~~(this.millisecond() / 100);                                                                          // 2926\n    });                                                                                                               // 2927\n                                                                                                                      // 2928\n    addFormatToken(0, ['SS', 2], 0, function () {                                                                     // 2929\n        return ~~(this.millisecond() / 10);                                                                           // 2930\n    });                                                                                                               // 2931\n                                                                                                                      // 2932\n    addFormatToken(0, ['SSS', 3], 0, 'millisecond');                                                                  // 2933\n    addFormatToken(0, ['SSSS', 4], 0, function () {                                                                   // 2934\n        return this.millisecond() * 10;                                                                               // 2935\n    });                                                                                                               // 2936\n    addFormatToken(0, ['SSSSS', 5], 0, function () {                                                                  // 2937\n        return this.millisecond() * 100;                                                                              // 2938\n    });                                                                                                               // 2939\n    addFormatToken(0, ['SSSSSS', 6], 0, function () {                                                                 // 2940\n        return this.millisecond() * 1000;                                                                             // 2941\n    });                                                                                                               // 2942\n    addFormatToken(0, ['SSSSSSS', 7], 0, function () {                                                                // 2943\n        return this.millisecond() * 10000;                                                                            // 2944\n    });                                                                                                               // 2945\n    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {                                                               // 2946\n        return this.millisecond() * 100000;                                                                           // 2947\n    });                                                                                                               // 2948\n    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {                                                              // 2949\n        return this.millisecond() * 1000000;                                                                          // 2950\n    });                                                                                                               // 2951\n                                                                                                                      // 2952\n                                                                                                                      // 2953\n    // ALIASES                                                                                                        // 2954\n                                                                                                                      // 2955\n    addUnitAlias('millisecond', 'ms');                                                                                // 2956\n                                                                                                                      // 2957\n    // PARSING                                                                                                        // 2958\n                                                                                                                      // 2959\n    addRegexToken('S',    match1to3, match1);                                                                         // 2960\n    addRegexToken('SS',   match1to3, match2);                                                                         // 2961\n    addRegexToken('SSS',  match1to3, match3);                                                                         // 2962\n                                                                                                                      // 2963\n    var token;                                                                                                        // 2964\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {                                                           // 2965\n        addRegexToken(token, matchUnsigned);                                                                          // 2966\n    }                                                                                                                 // 2967\n                                                                                                                      // 2968\n    function parseMs(input, array) {                                                                                  // 2969\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);                                                            // 2970\n    }                                                                                                                 // 2971\n                                                                                                                      // 2972\n    for (token = 'S'; token.length <= 9; token += 'S') {                                                              // 2973\n        addParseToken(token, parseMs);                                                                                // 2974\n    }                                                                                                                 // 2975\n    // MOMENTS                                                                                                        // 2976\n                                                                                                                      // 2977\n    var getSetMillisecond = makeGetSet('Milliseconds', false);                                                        // 2978\n                                                                                                                      // 2979\n    // FORMATTING                                                                                                     // 2980\n                                                                                                                      // 2981\n    addFormatToken('z',  0, 0, 'zoneAbbr');                                                                           // 2982\n    addFormatToken('zz', 0, 0, 'zoneName');                                                                           // 2983\n                                                                                                                      // 2984\n    // MOMENTS                                                                                                        // 2985\n                                                                                                                      // 2986\n    function getZoneAbbr () {                                                                                         // 2987\n        return this._isUTC ? 'UTC' : '';                                                                              // 2988\n    }                                                                                                                 // 2989\n                                                                                                                      // 2990\n    function getZoneName () {                                                                                         // 2991\n        return this._isUTC ? 'Coordinated Universal Time' : '';                                                       // 2992\n    }                                                                                                                 // 2993\n                                                                                                                      // 2994\n    var momentPrototype__proto = Moment.prototype;                                                                    // 2995\n                                                                                                                      // 2996\n    momentPrototype__proto.add               = add_subtract__add;                                                     // 2997\n    momentPrototype__proto.calendar          = moment_calendar__calendar;                                             // 2998\n    momentPrototype__proto.clone             = clone;                                                                 // 2999\n    momentPrototype__proto.diff              = diff;                                                                  // 3000\n    momentPrototype__proto.endOf             = endOf;                                                                 // 3001\n    momentPrototype__proto.format            = format;                                                                // 3002\n    momentPrototype__proto.from              = from;                                                                  // 3003\n    momentPrototype__proto.fromNow           = fromNow;                                                               // 3004\n    momentPrototype__proto.to                = to;                                                                    // 3005\n    momentPrototype__proto.toNow             = toNow;                                                                 // 3006\n    momentPrototype__proto.get               = getSet;                                                                // 3007\n    momentPrototype__proto.invalidAt         = invalidAt;                                                             // 3008\n    momentPrototype__proto.isAfter           = isAfter;                                                               // 3009\n    momentPrototype__proto.isBefore          = isBefore;                                                              // 3010\n    momentPrototype__proto.isBetween         = isBetween;                                                             // 3011\n    momentPrototype__proto.isSame            = isSame;                                                                // 3012\n    momentPrototype__proto.isSameOrAfter     = isSameOrAfter;                                                         // 3013\n    momentPrototype__proto.isSameOrBefore    = isSameOrBefore;                                                        // 3014\n    momentPrototype__proto.isValid           = moment_valid__isValid;                                                 // 3015\n    momentPrototype__proto.lang              = lang;                                                                  // 3016\n    momentPrototype__proto.locale            = locale;                                                                // 3017\n    momentPrototype__proto.localeData        = localeData;                                                            // 3018\n    momentPrototype__proto.max               = prototypeMax;                                                          // 3019\n    momentPrototype__proto.min               = prototypeMin;                                                          // 3020\n    momentPrototype__proto.parsingFlags      = parsingFlags;                                                          // 3021\n    momentPrototype__proto.set               = getSet;                                                                // 3022\n    momentPrototype__proto.startOf           = startOf;                                                               // 3023\n    momentPrototype__proto.subtract          = add_subtract__subtract;                                                // 3024\n    momentPrototype__proto.toArray           = toArray;                                                               // 3025\n    momentPrototype__proto.toObject          = toObject;                                                              // 3026\n    momentPrototype__proto.toDate            = toDate;                                                                // 3027\n    momentPrototype__proto.toISOString       = moment_format__toISOString;                                            // 3028\n    momentPrototype__proto.toJSON            = toJSON;                                                                // 3029\n    momentPrototype__proto.toString          = toString;                                                              // 3030\n    momentPrototype__proto.unix              = unix;                                                                  // 3031\n    momentPrototype__proto.valueOf           = to_type__valueOf;                                                      // 3032\n    momentPrototype__proto.creationData      = creationData;                                                          // 3033\n                                                                                                                      // 3034\n    // Year                                                                                                           // 3035\n    momentPrototype__proto.year       = getSetYear;                                                                   // 3036\n    momentPrototype__proto.isLeapYear = getIsLeapYear;                                                                // 3037\n                                                                                                                      // 3038\n    // Week Year                                                                                                      // 3039\n    momentPrototype__proto.weekYear    = getSetWeekYear;                                                              // 3040\n    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;                                                           // 3041\n                                                                                                                      // 3042\n    // Quarter                                                                                                        // 3043\n    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;                                 // 3044\n                                                                                                                      // 3045\n    // Month                                                                                                          // 3046\n    momentPrototype__proto.month       = getSetMonth;                                                                 // 3047\n    momentPrototype__proto.daysInMonth = getDaysInMonth;                                                              // 3048\n                                                                                                                      // 3049\n    // Week                                                                                                           // 3050\n    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;                         // 3051\n    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;                      // 3052\n    momentPrototype__proto.weeksInYear    = getWeeksInYear;                                                           // 3053\n    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;                                                        // 3054\n                                                                                                                      // 3055\n    // Day                                                                                                            // 3056\n    momentPrototype__proto.date       = getSetDayOfMonth;                                                             // 3057\n    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;                    // 3058\n    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;                                                        // 3059\n    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;                                                           // 3060\n    momentPrototype__proto.dayOfYear  = getSetDayOfYear;                                                              // 3061\n                                                                                                                      // 3062\n    // Hour                                                                                                           // 3063\n    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;                                          // 3064\n                                                                                                                      // 3065\n    // Minute                                                                                                         // 3066\n    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;                                    // 3067\n                                                                                                                      // 3068\n    // Second                                                                                                         // 3069\n    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;                                    // 3070\n                                                                                                                      // 3071\n    // Millisecond                                                                                                    // 3072\n    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;                     // 3073\n                                                                                                                      // 3074\n    // Offset                                                                                                         // 3075\n    momentPrototype__proto.utcOffset            = getSetOffset;                                                       // 3076\n    momentPrototype__proto.utc                  = setOffsetToUTC;                                                     // 3077\n    momentPrototype__proto.local                = setOffsetToLocal;                                                   // 3078\n    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;                                            // 3079\n    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;                                               // 3080\n    momentPrototype__proto.isDST                = isDaylightSavingTime;                                               // 3081\n    momentPrototype__proto.isDSTShifted         = isDaylightSavingTimeShifted;                                        // 3082\n    momentPrototype__proto.isLocal              = isLocal;                                                            // 3083\n    momentPrototype__proto.isUtcOffset          = isUtcOffset;                                                        // 3084\n    momentPrototype__proto.isUtc                = isUtc;                                                              // 3085\n    momentPrototype__proto.isUTC                = isUtc;                                                              // 3086\n                                                                                                                      // 3087\n    // Timezone                                                                                                       // 3088\n    momentPrototype__proto.zoneAbbr = getZoneAbbr;                                                                    // 3089\n    momentPrototype__proto.zoneName = getZoneName;                                                                    // 3090\n                                                                                                                      // 3091\n    // Deprecations                                                                                                   // 3092\n    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);   // 3093\n    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);       // 3094\n    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);          // 3095\n    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);\n                                                                                                                      // 3097\n    var momentPrototype = momentPrototype__proto;                                                                     // 3098\n                                                                                                                      // 3099\n    function moment__createUnix (input) {                                                                             // 3100\n        return local__createLocal(input * 1000);                                                                      // 3101\n    }                                                                                                                 // 3102\n                                                                                                                      // 3103\n    function moment__createInZone () {                                                                                // 3104\n        return local__createLocal.apply(null, arguments).parseZone();                                                 // 3105\n    }                                                                                                                 // 3106\n                                                                                                                      // 3107\n    var defaultCalendar = {                                                                                           // 3108\n        sameDay : '[Today at] LT',                                                                                    // 3109\n        nextDay : '[Tomorrow at] LT',                                                                                 // 3110\n        nextWeek : 'dddd [at] LT',                                                                                    // 3111\n        lastDay : '[Yesterday at] LT',                                                                                // 3112\n        lastWeek : '[Last] dddd [at] LT',                                                                             // 3113\n        sameElse : 'L'                                                                                                // 3114\n    };                                                                                                                // 3115\n                                                                                                                      // 3116\n    function locale_calendar__calendar (key, mom, now) {                                                              // 3117\n        var output = this._calendar[key];                                                                             // 3118\n        return isFunction(output) ? output.call(mom, now) : output;                                                   // 3119\n    }                                                                                                                 // 3120\n                                                                                                                      // 3121\n    var defaultLongDateFormat = {                                                                                     // 3122\n        LTS  : 'h:mm:ss A',                                                                                           // 3123\n        LT   : 'h:mm A',                                                                                              // 3124\n        L    : 'MM/DD/YYYY',                                                                                          // 3125\n        LL   : 'MMMM D, YYYY',                                                                                        // 3126\n        LLL  : 'MMMM D, YYYY h:mm A',                                                                                 // 3127\n        LLLL : 'dddd, MMMM D, YYYY h:mm A'                                                                            // 3128\n    };                                                                                                                // 3129\n                                                                                                                      // 3130\n    function longDateFormat (key) {                                                                                   // 3131\n        var format = this._longDateFormat[key],                                                                       // 3132\n            formatUpper = this._longDateFormat[key.toUpperCase()];                                                    // 3133\n                                                                                                                      // 3134\n        if (format || !formatUpper) {                                                                                 // 3135\n            return format;                                                                                            // 3136\n        }                                                                                                             // 3137\n                                                                                                                      // 3138\n        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {                          // 3139\n            return val.slice(1);                                                                                      // 3140\n        });                                                                                                           // 3141\n                                                                                                                      // 3142\n        return this._longDateFormat[key];                                                                             // 3143\n    }                                                                                                                 // 3144\n                                                                                                                      // 3145\n    var defaultInvalidDate = 'Invalid date';                                                                          // 3146\n                                                                                                                      // 3147\n    function invalidDate () {                                                                                         // 3148\n        return this._invalidDate;                                                                                     // 3149\n    }                                                                                                                 // 3150\n                                                                                                                      // 3151\n    var defaultOrdinal = '%d';                                                                                        // 3152\n    var defaultOrdinalParse = /\\d{1,2}/;                                                                              // 3153\n                                                                                                                      // 3154\n    function ordinal (number) {                                                                                       // 3155\n        return this._ordinal.replace('%d', number);                                                                   // 3156\n    }                                                                                                                 // 3157\n                                                                                                                      // 3158\n    function preParsePostFormat (string) {                                                                            // 3159\n        return string;                                                                                                // 3160\n    }                                                                                                                 // 3161\n                                                                                                                      // 3162\n    var defaultRelativeTime = {                                                                                       // 3163\n        future : 'in %s',                                                                                             // 3164\n        past   : '%s ago',                                                                                            // 3165\n        s  : 'a few seconds',                                                                                         // 3166\n        m  : 'a minute',                                                                                              // 3167\n        mm : '%d minutes',                                                                                            // 3168\n        h  : 'an hour',                                                                                               // 3169\n        hh : '%d hours',                                                                                              // 3170\n        d  : 'a day',                                                                                                 // 3171\n        dd : '%d days',                                                                                               // 3172\n        M  : 'a month',                                                                                               // 3173\n        MM : '%d months',                                                                                             // 3174\n        y  : 'a year',                                                                                                // 3175\n        yy : '%d years'                                                                                               // 3176\n    };                                                                                                                // 3177\n                                                                                                                      // 3178\n    function relative__relativeTime (number, withoutSuffix, string, isFuture) {                                       // 3179\n        var output = this._relativeTime[string];                                                                      // 3180\n        return (isFunction(output)) ?                                                                                 // 3181\n            output(number, withoutSuffix, string, isFuture) :                                                         // 3182\n            output.replace(/%d/i, number);                                                                            // 3183\n    }                                                                                                                 // 3184\n                                                                                                                      // 3185\n    function pastFuture (diff, output) {                                                                              // 3186\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];                                                // 3187\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);                                   // 3188\n    }                                                                                                                 // 3189\n                                                                                                                      // 3190\n    var prototype__proto = Locale.prototype;                                                                          // 3191\n                                                                                                                      // 3192\n    prototype__proto._calendar       = defaultCalendar;                                                               // 3193\n    prototype__proto.calendar        = locale_calendar__calendar;                                                     // 3194\n    prototype__proto._longDateFormat = defaultLongDateFormat;                                                         // 3195\n    prototype__proto.longDateFormat  = longDateFormat;                                                                // 3196\n    prototype__proto._invalidDate    = defaultInvalidDate;                                                            // 3197\n    prototype__proto.invalidDate     = invalidDate;                                                                   // 3198\n    prototype__proto._ordinal        = defaultOrdinal;                                                                // 3199\n    prototype__proto.ordinal         = ordinal;                                                                       // 3200\n    prototype__proto._ordinalParse   = defaultOrdinalParse;                                                           // 3201\n    prototype__proto.preparse        = preParsePostFormat;                                                            // 3202\n    prototype__proto.postformat      = preParsePostFormat;                                                            // 3203\n    prototype__proto._relativeTime   = defaultRelativeTime;                                                           // 3204\n    prototype__proto.relativeTime    = relative__relativeTime;                                                        // 3205\n    prototype__proto.pastFuture      = pastFuture;                                                                    // 3206\n    prototype__proto.set             = locale_set__set;                                                               // 3207\n                                                                                                                      // 3208\n    // Month                                                                                                          // 3209\n    prototype__proto.months            =        localeMonths;                                                         // 3210\n    prototype__proto._months           = defaultLocaleMonths;                                                         // 3211\n    prototype__proto.monthsShort       =        localeMonthsShort;                                                    // 3212\n    prototype__proto._monthsShort      = defaultLocaleMonthsShort;                                                    // 3213\n    prototype__proto.monthsParse       =        localeMonthsParse;                                                    // 3214\n    prototype__proto._monthsRegex      = defaultMonthsRegex;                                                          // 3215\n    prototype__proto.monthsRegex       = monthsRegex;                                                                 // 3216\n    prototype__proto._monthsShortRegex = defaultMonthsShortRegex;                                                     // 3217\n    prototype__proto.monthsShortRegex  = monthsShortRegex;                                                            // 3218\n                                                                                                                      // 3219\n    // Week                                                                                                           // 3220\n    prototype__proto.week = localeWeek;                                                                               // 3221\n    prototype__proto._week = defaultLocaleWeek;                                                                       // 3222\n    prototype__proto.firstDayOfYear = localeFirstDayOfYear;                                                           // 3223\n    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;                                                           // 3224\n                                                                                                                      // 3225\n    // Day of Week                                                                                                    // 3226\n    prototype__proto.weekdays       =        localeWeekdays;                                                          // 3227\n    prototype__proto._weekdays      = defaultLocaleWeekdays;                                                          // 3228\n    prototype__proto.weekdaysMin    =        localeWeekdaysMin;                                                       // 3229\n    prototype__proto._weekdaysMin   = defaultLocaleWeekdaysMin;                                                       // 3230\n    prototype__proto.weekdaysShort  =        localeWeekdaysShort;                                                     // 3231\n    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;                                                     // 3232\n    prototype__proto.weekdaysParse  =        localeWeekdaysParse;                                                     // 3233\n                                                                                                                      // 3234\n    // Hours                                                                                                          // 3235\n    prototype__proto.isPM = localeIsPM;                                                                               // 3236\n    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;                                                     // 3237\n    prototype__proto.meridiem = localeMeridiem;                                                                       // 3238\n                                                                                                                      // 3239\n    function lists__get (format, index, field, setter) {                                                              // 3240\n        var locale = locale_locales__getLocale();                                                                     // 3241\n        var utc = create_utc__createUTC().set(setter, index);                                                         // 3242\n        return locale[field](utc, format);                                                                            // 3243\n    }                                                                                                                 // 3244\n                                                                                                                      // 3245\n    function list (format, index, field, count, setter) {                                                             // 3246\n        if (typeof format === 'number') {                                                                             // 3247\n            index = format;                                                                                           // 3248\n            format = undefined;                                                                                       // 3249\n        }                                                                                                             // 3250\n                                                                                                                      // 3251\n        format = format || '';                                                                                        // 3252\n                                                                                                                      // 3253\n        if (index != null) {                                                                                          // 3254\n            return lists__get(format, index, field, setter);                                                          // 3255\n        }                                                                                                             // 3256\n                                                                                                                      // 3257\n        var i;                                                                                                        // 3258\n        var out = [];                                                                                                 // 3259\n        for (i = 0; i < count; i++) {                                                                                 // 3260\n            out[i] = lists__get(format, i, field, setter);                                                            // 3261\n        }                                                                                                             // 3262\n        return out;                                                                                                   // 3263\n    }                                                                                                                 // 3264\n                                                                                                                      // 3265\n    function lists__listMonths (format, index) {                                                                      // 3266\n        return list(format, index, 'months', 12, 'month');                                                            // 3267\n    }                                                                                                                 // 3268\n                                                                                                                      // 3269\n    function lists__listMonthsShort (format, index) {                                                                 // 3270\n        return list(format, index, 'monthsShort', 12, 'month');                                                       // 3271\n    }                                                                                                                 // 3272\n                                                                                                                      // 3273\n    function lists__listWeekdays (format, index) {                                                                    // 3274\n        return list(format, index, 'weekdays', 7, 'day');                                                             // 3275\n    }                                                                                                                 // 3276\n                                                                                                                      // 3277\n    function lists__listWeekdaysShort (format, index) {                                                               // 3278\n        return list(format, index, 'weekdaysShort', 7, 'day');                                                        // 3279\n    }                                                                                                                 // 3280\n                                                                                                                      // 3281\n    function lists__listWeekdaysMin (format, index) {                                                                 // 3282\n        return list(format, index, 'weekdaysMin', 7, 'day');                                                          // 3283\n    }                                                                                                                 // 3284\n                                                                                                                      // 3285\n    locale_locales__getSetGlobalLocale('en', {                                                                        // 3286\n        ordinalParse: /\\d{1,2}(th|st|nd|rd)/,                                                                         // 3287\n        ordinal : function (number) {                                                                                 // 3288\n            var b = number % 10,                                                                                      // 3289\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :                                                    // 3290\n                (b === 1) ? 'st' :                                                                                    // 3291\n                (b === 2) ? 'nd' :                                                                                    // 3292\n                (b === 3) ? 'rd' : 'th';                                                                              // 3293\n            return number + output;                                                                                   // 3294\n        }                                                                                                             // 3295\n    });                                                                                                               // 3296\n                                                                                                                      // 3297\n    // Side effect imports                                                                                            // 3298\n    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);\n    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);\n                                                                                                                      // 3301\n    var mathAbs = Math.abs;                                                                                           // 3302\n                                                                                                                      // 3303\n    function duration_abs__abs () {                                                                                   // 3304\n        var data           = this._data;                                                                              // 3305\n                                                                                                                      // 3306\n        this._milliseconds = mathAbs(this._milliseconds);                                                             // 3307\n        this._days         = mathAbs(this._days);                                                                     // 3308\n        this._months       = mathAbs(this._months);                                                                   // 3309\n                                                                                                                      // 3310\n        data.milliseconds  = mathAbs(data.milliseconds);                                                              // 3311\n        data.seconds       = mathAbs(data.seconds);                                                                   // 3312\n        data.minutes       = mathAbs(data.minutes);                                                                   // 3313\n        data.hours         = mathAbs(data.hours);                                                                     // 3314\n        data.months        = mathAbs(data.months);                                                                    // 3315\n        data.years         = mathAbs(data.years);                                                                     // 3316\n                                                                                                                      // 3317\n        return this;                                                                                                  // 3318\n    }                                                                                                                 // 3319\n                                                                                                                      // 3320\n    function duration_add_subtract__addSubtract (duration, input, value, direction) {                                 // 3321\n        var other = create__createDuration(input, value);                                                             // 3322\n                                                                                                                      // 3323\n        duration._milliseconds += direction * other._milliseconds;                                                    // 3324\n        duration._days         += direction * other._days;                                                            // 3325\n        duration._months       += direction * other._months;                                                          // 3326\n                                                                                                                      // 3327\n        return duration._bubble();                                                                                    // 3328\n    }                                                                                                                 // 3329\n                                                                                                                      // 3330\n    // supports only 2.0-style add(1, 's') or add(duration)                                                           // 3331\n    function duration_add_subtract__add (input, value) {                                                              // 3332\n        return duration_add_subtract__addSubtract(this, input, value, 1);                                             // 3333\n    }                                                                                                                 // 3334\n                                                                                                                      // 3335\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)                                                 // 3336\n    function duration_add_subtract__subtract (input, value) {                                                         // 3337\n        return duration_add_subtract__addSubtract(this, input, value, -1);                                            // 3338\n    }                                                                                                                 // 3339\n                                                                                                                      // 3340\n    function absCeil (number) {                                                                                       // 3341\n        if (number < 0) {                                                                                             // 3342\n            return Math.floor(number);                                                                                // 3343\n        } else {                                                                                                      // 3344\n            return Math.ceil(number);                                                                                 // 3345\n        }                                                                                                             // 3346\n    }                                                                                                                 // 3347\n                                                                                                                      // 3348\n    function bubble () {                                                                                              // 3349\n        var milliseconds = this._milliseconds;                                                                        // 3350\n        var days         = this._days;                                                                                // 3351\n        var months       = this._months;                                                                              // 3352\n        var data         = this._data;                                                                                // 3353\n        var seconds, minutes, hours, years, monthsFromDays;                                                           // 3354\n                                                                                                                      // 3355\n        // if we have a mix of positive and negative values, bubble down first                                        // 3356\n        // check: https://github.com/moment/moment/issues/2166                                                        // 3357\n        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||                                                      // 3358\n                (milliseconds <= 0 && days <= 0 && months <= 0))) {                                                   // 3359\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;                                             // 3360\n            days = 0;                                                                                                 // 3361\n            months = 0;                                                                                               // 3362\n        }                                                                                                             // 3363\n                                                                                                                      // 3364\n        // The following code bubbles up values, see the tests for                                                    // 3365\n        // examples of what that means.                                                                               // 3366\n        data.milliseconds = milliseconds % 1000;                                                                      // 3367\n                                                                                                                      // 3368\n        seconds           = absFloor(milliseconds / 1000);                                                            // 3369\n        data.seconds      = seconds % 60;                                                                             // 3370\n                                                                                                                      // 3371\n        minutes           = absFloor(seconds / 60);                                                                   // 3372\n        data.minutes      = minutes % 60;                                                                             // 3373\n                                                                                                                      // 3374\n        hours             = absFloor(minutes / 60);                                                                   // 3375\n        data.hours        = hours % 24;                                                                               // 3376\n                                                                                                                      // 3377\n        days += absFloor(hours / 24);                                                                                 // 3378\n                                                                                                                      // 3379\n        // convert days to months                                                                                     // 3380\n        monthsFromDays = absFloor(daysToMonths(days));                                                                // 3381\n        months += monthsFromDays;                                                                                     // 3382\n        days -= absCeil(monthsToDays(monthsFromDays));                                                                // 3383\n                                                                                                                      // 3384\n        // 12 months -> 1 year                                                                                        // 3385\n        years = absFloor(months / 12);                                                                                // 3386\n        months %= 12;                                                                                                 // 3387\n                                                                                                                      // 3388\n        data.days   = days;                                                                                           // 3389\n        data.months = months;                                                                                         // 3390\n        data.years  = years;                                                                                          // 3391\n                                                                                                                      // 3392\n        return this;                                                                                                  // 3393\n    }                                                                                                                 // 3394\n                                                                                                                      // 3395\n    function daysToMonths (days) {                                                                                    // 3396\n        // 400 years have 146097 days (taking into account leap year rules)                                           // 3397\n        // 400 years have 12 months === 4800                                                                          // 3398\n        return days * 4800 / 146097;                                                                                  // 3399\n    }                                                                                                                 // 3400\n                                                                                                                      // 3401\n    function monthsToDays (months) {                                                                                  // 3402\n        // the reverse of daysToMonths                                                                                // 3403\n        return months * 146097 / 4800;                                                                                // 3404\n    }                                                                                                                 // 3405\n                                                                                                                      // 3406\n    function as (units) {                                                                                             // 3407\n        var days;                                                                                                     // 3408\n        var months;                                                                                                   // 3409\n        var milliseconds = this._milliseconds;                                                                        // 3410\n                                                                                                                      // 3411\n        units = normalizeUnits(units);                                                                                // 3412\n                                                                                                                      // 3413\n        if (units === 'month' || units === 'year') {                                                                  // 3414\n            days   = this._days   + milliseconds / 864e5;                                                             // 3415\n            months = this._months + daysToMonths(days);                                                               // 3416\n            return units === 'month' ? months : months / 12;                                                          // 3417\n        } else {                                                                                                      // 3418\n            // handle milliseconds separately because of floating point math errors (issue #1867)                     // 3419\n            days = this._days + Math.round(monthsToDays(this._months));                                               // 3420\n            switch (units) {                                                                                          // 3421\n                case 'week'   : return days / 7     + milliseconds / 6048e5;                                          // 3422\n                case 'day'    : return days         + milliseconds / 864e5;                                           // 3423\n                case 'hour'   : return days * 24    + milliseconds / 36e5;                                            // 3424\n                case 'minute' : return days * 1440  + milliseconds / 6e4;                                             // 3425\n                case 'second' : return days * 86400 + milliseconds / 1000;                                            // 3426\n                // Math.floor prevents floating point math errors here                                                // 3427\n                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;                                   // 3428\n                default: throw new Error('Unknown unit ' + units);                                                    // 3429\n            }                                                                                                         // 3430\n        }                                                                                                             // 3431\n    }                                                                                                                 // 3432\n                                                                                                                      // 3433\n    // TODO: Use this.as('ms')?                                                                                       // 3434\n    function duration_as__valueOf () {                                                                                // 3435\n        return (                                                                                                      // 3436\n            this._milliseconds +                                                                                      // 3437\n            this._days * 864e5 +                                                                                      // 3438\n            (this._months % 12) * 2592e6 +                                                                            // 3439\n            toInt(this._months / 12) * 31536e6                                                                        // 3440\n        );                                                                                                            // 3441\n    }                                                                                                                 // 3442\n                                                                                                                      // 3443\n    function makeAs (alias) {                                                                                         // 3444\n        return function () {                                                                                          // 3445\n            return this.as(alias);                                                                                    // 3446\n        };                                                                                                            // 3447\n    }                                                                                                                 // 3448\n                                                                                                                      // 3449\n    var asMilliseconds = makeAs('ms');                                                                                // 3450\n    var asSeconds      = makeAs('s');                                                                                 // 3451\n    var asMinutes      = makeAs('m');                                                                                 // 3452\n    var asHours        = makeAs('h');                                                                                 // 3453\n    var asDays         = makeAs('d');                                                                                 // 3454\n    var asWeeks        = makeAs('w');                                                                                 // 3455\n    var asMonths       = makeAs('M');                                                                                 // 3456\n    var asYears        = makeAs('y');                                                                                 // 3457\n                                                                                                                      // 3458\n    function duration_get__get (units) {                                                                              // 3459\n        units = normalizeUnits(units);                                                                                // 3460\n        return this[units + 's']();                                                                                   // 3461\n    }                                                                                                                 // 3462\n                                                                                                                      // 3463\n    function makeGetter(name) {                                                                                       // 3464\n        return function () {                                                                                          // 3465\n            return this._data[name];                                                                                  // 3466\n        };                                                                                                            // 3467\n    }                                                                                                                 // 3468\n                                                                                                                      // 3469\n    var milliseconds = makeGetter('milliseconds');                                                                    // 3470\n    var seconds      = makeGetter('seconds');                                                                         // 3471\n    var minutes      = makeGetter('minutes');                                                                         // 3472\n    var hours        = makeGetter('hours');                                                                           // 3473\n    var days         = makeGetter('days');                                                                            // 3474\n    var months       = makeGetter('months');                                                                          // 3475\n    var years        = makeGetter('years');                                                                           // 3476\n                                                                                                                      // 3477\n    function weeks () {                                                                                               // 3478\n        return absFloor(this.days() / 7);                                                                             // 3479\n    }                                                                                                                 // 3480\n                                                                                                                      // 3481\n    var round = Math.round;                                                                                           // 3482\n    var thresholds = {                                                                                                // 3483\n        s: 45,  // seconds to minute                                                                                  // 3484\n        m: 45,  // minutes to hour                                                                                    // 3485\n        h: 22,  // hours to day                                                                                       // 3486\n        d: 26,  // days to month                                                                                      // 3487\n        M: 11   // months to year                                                                                     // 3488\n    };                                                                                                                // 3489\n                                                                                                                      // 3490\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize                         // 3491\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {                                     // 3492\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);                                   // 3493\n    }                                                                                                                 // 3494\n                                                                                                                      // 3495\n    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {                                // 3496\n        var duration = create__createDuration(posNegDuration).abs();                                                  // 3497\n        var seconds  = round(duration.as('s'));                                                                       // 3498\n        var minutes  = round(duration.as('m'));                                                                       // 3499\n        var hours    = round(duration.as('h'));                                                                       // 3500\n        var days     = round(duration.as('d'));                                                                       // 3501\n        var months   = round(duration.as('M'));                                                                       // 3502\n        var years    = round(duration.as('y'));                                                                       // 3503\n                                                                                                                      // 3504\n        var a = seconds < thresholds.s && ['s', seconds]  ||                                                          // 3505\n                minutes <= 1           && ['m']           ||                                                          // 3506\n                minutes < thresholds.m && ['mm', minutes] ||                                                          // 3507\n                hours   <= 1           && ['h']           ||                                                          // 3508\n                hours   < thresholds.h && ['hh', hours]   ||                                                          // 3509\n                days    <= 1           && ['d']           ||                                                          // 3510\n                days    < thresholds.d && ['dd', days]    ||                                                          // 3511\n                months  <= 1           && ['M']           ||                                                          // 3512\n                months  < thresholds.M && ['MM', months]  ||                                                          // 3513\n                years   <= 1           && ['y']           || ['yy', years];                                           // 3514\n                                                                                                                      // 3515\n        a[2] = withoutSuffix;                                                                                         // 3516\n        a[3] = +posNegDuration > 0;                                                                                   // 3517\n        a[4] = locale;                                                                                                // 3518\n        return substituteTimeAgo.apply(null, a);                                                                      // 3519\n    }                                                                                                                 // 3520\n                                                                                                                      // 3521\n    // This function allows you to set a threshold for relative time strings                                          // 3522\n    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {                                      // 3523\n        if (thresholds[threshold] === undefined) {                                                                    // 3524\n            return false;                                                                                             // 3525\n        }                                                                                                             // 3526\n        if (limit === undefined) {                                                                                    // 3527\n            return thresholds[threshold];                                                                             // 3528\n        }                                                                                                             // 3529\n        thresholds[threshold] = limit;                                                                                // 3530\n        return true;                                                                                                  // 3531\n    }                                                                                                                 // 3532\n                                                                                                                      // 3533\n    function humanize (withSuffix) {                                                                                  // 3534\n        var locale = this.localeData();                                                                               // 3535\n        var output = duration_humanize__relativeTime(this, !withSuffix, locale);                                      // 3536\n                                                                                                                      // 3537\n        if (withSuffix) {                                                                                             // 3538\n            output = locale.pastFuture(+this, output);                                                                // 3539\n        }                                                                                                             // 3540\n                                                                                                                      // 3541\n        return locale.postformat(output);                                                                             // 3542\n    }                                                                                                                 // 3543\n                                                                                                                      // 3544\n    var iso_string__abs = Math.abs;                                                                                   // 3545\n                                                                                                                      // 3546\n    function iso_string__toISOString() {                                                                              // 3547\n        // for ISO strings we do not use the normal bubbling rules:                                                   // 3548\n        //  * milliseconds bubble up until they become hours                                                          // 3549\n        //  * days do not bubble at all                                                                               // 3550\n        //  * months bubble up until they become years                                                                // 3551\n        // This is because there is no context-free conversion between hours and days                                 // 3552\n        // (think of clock changes)                                                                                   // 3553\n        // and also not between days and months (28-31 days per month)                                                // 3554\n        var seconds = iso_string__abs(this._milliseconds) / 1000;                                                     // 3555\n        var days         = iso_string__abs(this._days);                                                               // 3556\n        var months       = iso_string__abs(this._months);                                                             // 3557\n        var minutes, hours, years;                                                                                    // 3558\n                                                                                                                      // 3559\n        // 3600 seconds -> 60 minutes -> 1 hour                                                                       // 3560\n        minutes           = absFloor(seconds / 60);                                                                   // 3561\n        hours             = absFloor(minutes / 60);                                                                   // 3562\n        seconds %= 60;                                                                                                // 3563\n        minutes %= 60;                                                                                                // 3564\n                                                                                                                      // 3565\n        // 12 months -> 1 year                                                                                        // 3566\n        years  = absFloor(months / 12);                                                                               // 3567\n        months %= 12;                                                                                                 // 3568\n                                                                                                                      // 3569\n                                                                                                                      // 3570\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js               // 3571\n        var Y = years;                                                                                                // 3572\n        var M = months;                                                                                               // 3573\n        var D = days;                                                                                                 // 3574\n        var h = hours;                                                                                                // 3575\n        var m = minutes;                                                                                              // 3576\n        var s = seconds;                                                                                              // 3577\n        var total = this.asSeconds();                                                                                 // 3578\n                                                                                                                      // 3579\n        if (!total) {                                                                                                 // 3580\n            // this is the same as C#'s (Noda) and python (isodate)...                                                // 3581\n            // but not other JS (goog.date)                                                                           // 3582\n            return 'P0D';                                                                                             // 3583\n        }                                                                                                             // 3584\n                                                                                                                      // 3585\n        return (total < 0 ? '-' : '') +                                                                               // 3586\n            'P' +                                                                                                     // 3587\n            (Y ? Y + 'Y' : '') +                                                                                      // 3588\n            (M ? M + 'M' : '') +                                                                                      // 3589\n            (D ? D + 'D' : '') +                                                                                      // 3590\n            ((h || m || s) ? 'T' : '') +                                                                              // 3591\n            (h ? h + 'H' : '') +                                                                                      // 3592\n            (m ? m + 'M' : '') +                                                                                      // 3593\n            (s ? s + 'S' : '');                                                                                       // 3594\n    }                                                                                                                 // 3595\n                                                                                                                      // 3596\n    var duration_prototype__proto = Duration.prototype;                                                               // 3597\n                                                                                                                      // 3598\n    duration_prototype__proto.abs            = duration_abs__abs;                                                     // 3599\n    duration_prototype__proto.add            = duration_add_subtract__add;                                            // 3600\n    duration_prototype__proto.subtract       = duration_add_subtract__subtract;                                       // 3601\n    duration_prototype__proto.as             = as;                                                                    // 3602\n    duration_prototype__proto.asMilliseconds = asMilliseconds;                                                        // 3603\n    duration_prototype__proto.asSeconds      = asSeconds;                                                             // 3604\n    duration_prototype__proto.asMinutes      = asMinutes;                                                             // 3605\n    duration_prototype__proto.asHours        = asHours;                                                               // 3606\n    duration_prototype__proto.asDays         = asDays;                                                                // 3607\n    duration_prototype__proto.asWeeks        = asWeeks;                                                               // 3608\n    duration_prototype__proto.asMonths       = asMonths;                                                              // 3609\n    duration_prototype__proto.asYears        = asYears;                                                               // 3610\n    duration_prototype__proto.valueOf        = duration_as__valueOf;                                                  // 3611\n    duration_prototype__proto._bubble        = bubble;                                                                // 3612\n    duration_prototype__proto.get            = duration_get__get;                                                     // 3613\n    duration_prototype__proto.milliseconds   = milliseconds;                                                          // 3614\n    duration_prototype__proto.seconds        = seconds;                                                               // 3615\n    duration_prototype__proto.minutes        = minutes;                                                               // 3616\n    duration_prototype__proto.hours          = hours;                                                                 // 3617\n    duration_prototype__proto.days           = days;                                                                  // 3618\n    duration_prototype__proto.weeks          = weeks;                                                                 // 3619\n    duration_prototype__proto.months         = months;                                                                // 3620\n    duration_prototype__proto.years          = years;                                                                 // 3621\n    duration_prototype__proto.humanize       = humanize;                                                              // 3622\n    duration_prototype__proto.toISOString    = iso_string__toISOString;                                               // 3623\n    duration_prototype__proto.toString       = iso_string__toISOString;                                               // 3624\n    duration_prototype__proto.toJSON         = iso_string__toISOString;                                               // 3625\n    duration_prototype__proto.locale         = locale;                                                                // 3626\n    duration_prototype__proto.localeData     = localeData;                                                            // 3627\n                                                                                                                      // 3628\n    // Deprecations                                                                                                   // 3629\n    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);\n    duration_prototype__proto.lang = lang;                                                                            // 3631\n                                                                                                                      // 3632\n    // Side effect imports                                                                                            // 3633\n                                                                                                                      // 3634\n    // FORMATTING                                                                                                     // 3635\n                                                                                                                      // 3636\n    addFormatToken('X', 0, 0, 'unix');                                                                                // 3637\n    addFormatToken('x', 0, 0, 'valueOf');                                                                             // 3638\n                                                                                                                      // 3639\n    // PARSING                                                                                                        // 3640\n                                                                                                                      // 3641\n    addRegexToken('x', matchSigned);                                                                                  // 3642\n    addRegexToken('X', matchTimestamp);                                                                               // 3643\n    addParseToken('X', function (input, array, config) {                                                              // 3644\n        config._d = new Date(parseFloat(input, 10) * 1000);                                                           // 3645\n    });                                                                                                               // 3646\n    addParseToken('x', function (input, array, config) {                                                              // 3647\n        config._d = new Date(toInt(input));                                                                           // 3648\n    });                                                                                                               // 3649\n                                                                                                                      // 3650\n    // Side effect imports                                                                                            // 3651\n                                                                                                                      // 3652\n                                                                                                                      // 3653\n    utils_hooks__hooks.version = '2.12.0';                                                                            // 3654\n                                                                                                                      // 3655\n    setHookCallback(local__createLocal);                                                                              // 3656\n                                                                                                                      // 3657\n    utils_hooks__hooks.fn                    = momentPrototype;                                                       // 3658\n    utils_hooks__hooks.min                   = min;                                                                   // 3659\n    utils_hooks__hooks.max                   = max;                                                                   // 3660\n    utils_hooks__hooks.now                   = now;                                                                   // 3661\n    utils_hooks__hooks.utc                   = create_utc__createUTC;                                                 // 3662\n    utils_hooks__hooks.unix                  = moment__createUnix;                                                    // 3663\n    utils_hooks__hooks.months                = lists__listMonths;                                                     // 3664\n    utils_hooks__hooks.isDate                = isDate;                                                                // 3665\n    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;                                    // 3666\n    utils_hooks__hooks.invalid               = valid__createInvalid;                                                  // 3667\n    utils_hooks__hooks.duration              = create__createDuration;                                                // 3668\n    utils_hooks__hooks.isMoment              = isMoment;                                                              // 3669\n    utils_hooks__hooks.weekdays              = lists__listWeekdays;                                                   // 3670\n    utils_hooks__hooks.parseZone             = moment__createInZone;                                                  // 3671\n    utils_hooks__hooks.localeData            = locale_locales__getLocale;                                             // 3672\n    utils_hooks__hooks.isDuration            = isDuration;                                                            // 3673\n    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;                                                // 3674\n    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;                                                // 3675\n    utils_hooks__hooks.defineLocale          = defineLocale;                                                          // 3676\n    utils_hooks__hooks.updateLocale          = updateLocale;                                                          // 3677\n    utils_hooks__hooks.locales               = locale_locales__listLocales;                                           // 3678\n    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;                                              // 3679\n    utils_hooks__hooks.normalizeUnits        = normalizeUnits;                                                        // 3680\n    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;                        // 3681\n    utils_hooks__hooks.prototype             = momentPrototype;                                                       // 3682\n                                                                                                                      // 3683\n    var _moment = utils_hooks__hooks;                                                                                 // 3684\n                                                                                                                      // 3685\n    return _moment;                                                                                                   // 3686\n                                                                                                                      // 3687\n}));                                                                                                                  // 3688\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/momentjs_moment/meteor/export.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// moment.js makes `moment` global on the window (or global) object, while Meteor expects a file-scoped global variable\nmoment = this.moment;                                                                                                 // 2\ntry {                                                                                                                 // 3\n    delete this.moment;                                                                                               // 4\n} catch (e) {                                                                                                         // 5\n}                                                                                                                     // 6\n                                                                                                                      // 7\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['momentjs:moment'] = {}, {\n  moment: moment\n});\n\n})();\n","servePath":"/packages/momentjs_moment.js"}]