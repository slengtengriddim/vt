[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar _ = Package.underscore._;\nvar Mongo = Package.mongo.Mongo;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Template = Package.templating.Template;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar HTML = Package.htmljs.HTML;\nvar Spacebars = Package.spacebars.Spacebars;\n\n/* Package-scope variables */\nvar Tabular, Util, tableInit, getPubSelector;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_tabular/common.js                                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global Tabular:true, Mongo, _, Meteor, Template */                                                                  // 1\n                                                                                                                       // 2\nTabular = {}; //exported                                                                                               // 3\n                                                                                                                       // 4\nTabular.tablesByName = {};                                                                                             // 5\n                                                                                                                       // 6\nif (Meteor.isClient) {                                                                                                 // 7\n  Template.registerHelper('TabularTables', Tabular.tablesByName);                                                      // 8\n}                                                                                                                      // 9\n                                                                                                                       // 10\nTabular.Table = function (options) {                                                                                   // 11\n  var self = this;                                                                                                     // 12\n                                                                                                                       // 13\n  if (!options) {                                                                                                      // 14\n    throw new Error('Tabular.Table options argument is required');                                                     // 15\n  }                                                                                                                    // 16\n                                                                                                                       // 17\n  if (!options.name) {                                                                                                 // 18\n    throw new Error('Tabular.Table options must specify name');                                                        // 19\n  }                                                                                                                    // 20\n  self.name = options.name;                                                                                            // 21\n                                                                                                                       // 22\n  if (!(options.collection instanceof Mongo.Collection)) {                                                             // 23\n    throw new Error('Tabular.Table options must specify collection');                                                  // 24\n  }                                                                                                                    // 25\n  self.collection = options.collection;                                                                                // 26\n                                                                                                                       // 27\n  self.pub = options.pub || 'tabular_genericPub';                                                                      // 28\n                                                                                                                       // 29\n  // By default we use core `Meteor.subscribe`, but you can pass                                                       // 30\n  // a subscription manager like `sub: new SubsManager({cacheLimit: 20, expireIn: 3})`                                 // 31\n  self.sub = options.sub || Meteor;                                                                                    // 32\n                                                                                                                       // 33\n  self.onUnload = options.onUnload;                                                                                    // 34\n  self.allow = options.allow;                                                                                          // 35\n  self.allowFields = options.allowFields;                                                                              // 36\n  self.changeSelector = options.changeSelector;                                                                        // 37\n                                                                                                                       // 38\n  if (_.isArray(options.extraFields)) {                                                                                // 39\n    var fields = {};                                                                                                   // 40\n    _.each(options.extraFields, function (fieldName) {                                                                 // 41\n      fields[fieldName] = 1;                                                                                           // 42\n    });                                                                                                                // 43\n    self.extraFields = fields;                                                                                         // 44\n  }                                                                                                                    // 45\n                                                                                                                       // 46\n  self.selector = options.selector;                                                                                    // 47\n                                                                                                                       // 48\n  if (!options.columns) {                                                                                              // 49\n    throw new Error('Tabular.Table options must specify columns');                                                     // 50\n  }                                                                                                                    // 51\n                                                                                                                       // 52\n  self.options = _.omit(options, 'collection', 'pub', 'sub', 'onUnload', 'allow', 'allowFields', 'extraFields', 'name', 'selector');\n                                                                                                                       // 54\n  Tabular.tablesByName[self.name] = self;                                                                              // 55\n};                                                                                                                     // 56\n                                                                                                                       // 57\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_tabular/.npm/package/node_modules/datatables/media/js/jquery.dataTables.js                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*! DataTables 1.10.7                                                                                                  // 1\n * ©2008-2014 SpryMedia Ltd - datatables.net/license                                                                   // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\n/**                                                                                                                    // 5\n * @summary     DataTables                                                                                             // 6\n * @description Paginate, search and order HTML tables                                                                 // 7\n * @version     1.10.7                                                                                                 // 8\n * @file        jquery.dataTables.js                                                                                   // 9\n * @author      SpryMedia Ltd (www.sprymedia.co.uk)                                                                    // 10\n * @contact     www.sprymedia.co.uk/contact                                                                            // 11\n * @copyright   Copyright 2008-2014 SpryMedia Ltd.                                                                     // 12\n *                                                                                                                     // 13\n * This source file is free software, available under the following license:                                           // 14\n *   MIT license - http://datatables.net/license                                                                       // 15\n *                                                                                                                     // 16\n * This source file is distributed in the hope that it will be useful, but                                             // 17\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY                                          // 18\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.                                             // 19\n *                                                                                                                     // 20\n * For details please refer to: http://www.datatables.net                                                              // 21\n */                                                                                                                    // 22\n                                                                                                                       // 23\n/*jslint evil: true, undef: true, browser: true */                                                                     // 24\n/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnScrollingWidthAdjust,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnScrollBarWidth,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/\n                                                                                                                       // 26\n(/** @lends <global> */function( window, document, undefined ) {                                                       // 27\n                                                                                                                       // 28\n(function( factory ) {                                                                                                 // 29\n\t\"use strict\";                                                                                                         // 30\n                                                                                                                       // 31\n\tif ( typeof define === 'function' && define.amd ) {                                                                   // 32\n\t\t// Define as an AMD module if possible                                                                               // 33\n\t\tdefine( 'datatables', ['jquery'], factory );                                                                         // 34\n\t}                                                                                                                     // 35\n    else if ( typeof exports === 'object' ) {                                                                          // 36\n        // Node/CommonJS                                                                                               // 37\n        module.exports = factory( require( 'jquery' ) );                                                               // 38\n    }                                                                                                                  // 39\n\telse if ( jQuery && !jQuery.fn.dataTable ) {                                                                          // 40\n\t\t// Define using browser globals otherwise                                                                            // 41\n\t\t// Prevent multiple instantiations if the script is loaded twice                                                     // 42\n\t\tfactory( jQuery );                                                                                                   // 43\n\t}                                                                                                                     // 44\n}                                                                                                                      // 45\n(/** @lends <global> */function( $ ) {                                                                                 // 46\n\t\"use strict\";                                                                                                         // 47\n                                                                                                                       // 48\n\t/**                                                                                                                   // 49\n\t * DataTables is a plug-in for the jQuery Javascript library. It is a highly                                          // 50\n\t * flexible tool, based upon the foundations of progressive enhancement,                                              // 51\n\t * which will add advanced interaction controls to any HTML table. For a                                              // 52\n\t * full list of features please refer to                                                                              // 53\n\t * [DataTables.net](href=\"http://datatables.net).                                                                     // 54\n\t *                                                                                                                    // 55\n\t * Note that the `DataTable` object is not a global variable but is aliased                                           // 56\n\t * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may                                            // 57\n\t * be  accessed.                                                                                                      // 58\n\t *                                                                                                                    // 59\n\t *  @class                                                                                                            // 60\n\t *  @param {object} [init={}] Configuration object for DataTables. Options                                            // 61\n\t *    are defined by {@link DataTable.defaults}                                                                       // 62\n\t *  @requires jQuery 1.7+                                                                                             // 63\n\t *                                                                                                                    // 64\n\t *  @example                                                                                                          // 65\n\t *    // Basic initialisation                                                                                         // 66\n\t *    $(document).ready( function {                                                                                   // 67\n\t *      $('#example').dataTable();                                                                                    // 68\n\t *    } );                                                                                                            // 69\n\t *                                                                                                                    // 70\n\t *  @example                                                                                                          // 71\n\t *    // Initialisation with configuration options - in this case, disable                                            // 72\n\t *    // pagination and sorting.                                                                                      // 73\n\t *    $(document).ready( function {                                                                                   // 74\n\t *      $('#example').dataTable( {                                                                                    // 75\n\t *        \"paginate\": false,                                                                                          // 76\n\t *        \"sort\": false                                                                                               // 77\n\t *      } );                                                                                                          // 78\n\t *    } );                                                                                                            // 79\n\t */                                                                                                                   // 80\n\tvar DataTable;                                                                                                        // 81\n                                                                                                                       // 82\n\t                                                                                                                      // 83\n\t/*                                                                                                                    // 84\n\t * It is useful to have variables which are scoped locally so only the                                                // 85\n\t * DataTables functions can access them and they don't leak into global space.                                        // 86\n\t * At the same time these functions are often useful over multiple files in the                                       // 87\n\t * core and API, so we list, or at least document, all variables which are used                                       // 88\n\t * by DataTables as private variables here. This also ensures that there is no                                        // 89\n\t * clashing of variable names and that they can easily referenced for reuse.                                          // 90\n\t */                                                                                                                   // 91\n\t                                                                                                                      // 92\n\t                                                                                                                      // 93\n\t// Defined else where                                                                                                 // 94\n\t//  _selector_run                                                                                                     // 95\n\t//  _selector_opts                                                                                                    // 96\n\t//  _selector_first                                                                                                   // 97\n\t//  _selector_row_indexes                                                                                             // 98\n\t                                                                                                                      // 99\n\tvar _ext; // DataTable.ext                                                                                            // 100\n\tvar _Api; // DataTable.Api                                                                                            // 101\n\tvar _api_register; // DataTable.Api.register                                                                          // 102\n\tvar _api_registerPlural; // DataTable.Api.registerPlural                                                              // 103\n\t                                                                                                                      // 104\n\tvar _re_dic = {};                                                                                                     // 105\n\tvar _re_new_lines = /[\\r\\n]/g;                                                                                        // 106\n\tvar _re_html = /<.*?>/g;                                                                                              // 107\n\tvar _re_date_start = /^[\\w\\+\\-]/;                                                                                     // 108\n\tvar _re_date_end = /[\\w\\+\\-]$/;                                                                                       // 109\n\t                                                                                                                      // 110\n\t// Escape regular expression special characters                                                                       // 111\n\tvar _re_escape_regex = new RegExp( '(\\\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\', '$', '^', '-' ].join('|\\\\') + ')', 'g' );\n\t                                                                                                                      // 113\n\t// http://en.wikipedia.org/wiki/Foreign_exchange_market                                                               // 114\n\t// - \\u20BD - Russian ruble.                                                                                          // 115\n\t// - \\u20a9 - South Korean Won                                                                                        // 116\n\t// - \\u20BA - Turkish Lira                                                                                            // 117\n\t// - \\u20B9 - Indian Rupee                                                                                            // 118\n\t// - R - Brazil (R$) and South Africa                                                                                 // 119\n\t// - fr - Swiss Franc                                                                                                 // 120\n\t// - kr - Swedish krona, Norwegian krone and Danish krone                                                             // 121\n\t// - \\u2009 is thin space and \\u202F is narrow no-break space, both used in many                                      // 122\n\t//   standards as thousands separators.                                                                               // 123\n\tvar _re_formatted_numeric = /[',$£€¥%\\u2009\\u202F\\u20BD\\u20a9\\u20BArfk]/gi;                                           // 124\n\t                                                                                                                      // 125\n\t                                                                                                                      // 126\n\tvar _empty = function ( d ) {                                                                                         // 127\n\t\treturn !d || d === true || d === '-' ? true : false;                                                                 // 128\n\t};                                                                                                                    // 129\n\t                                                                                                                      // 130\n\t                                                                                                                      // 131\n\tvar _intVal = function ( s ) {                                                                                        // 132\n\t\tvar integer = parseInt( s, 10 );                                                                                     // 133\n\t\treturn !isNaN(integer) && isFinite(s) ? integer : null;                                                              // 134\n\t};                                                                                                                    // 135\n\t                                                                                                                      // 136\n\t// Convert from a formatted number with characters other than `.` as the                                              // 137\n\t// decimal place, to a Javascript number                                                                              // 138\n\tvar _numToDecimal = function ( num, decimalPoint ) {                                                                  // 139\n\t\t// Cache created regular expressions for speed as this function is called often                                      // 140\n\t\tif ( ! _re_dic[ decimalPoint ] ) {                                                                                   // 141\n\t\t\t_re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );                                        // 142\n\t\t}                                                                                                                    // 143\n\t\treturn typeof num === 'string' && decimalPoint !== '.' ?                                                             // 144\n\t\t\tnum.replace( /\\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :                                                  // 145\n\t\t\tnum;                                                                                                                // 146\n\t};                                                                                                                    // 147\n\t                                                                                                                      // 148\n\t                                                                                                                      // 149\n\tvar _isNumber = function ( d, decimalPoint, formatted ) {                                                             // 150\n\t\tvar strType = typeof d === 'string';                                                                                 // 151\n\t                                                                                                                      // 152\n\t\t// If empty return immediately so there must be a number if it is a                                                  // 153\n\t\t// formatted string (this stops the string \"k\", or \"kr\", etc being detected                                          // 154\n\t\t// as a formatted number for currency                                                                                // 155\n\t\tif ( _empty( d ) ) {                                                                                                 // 156\n\t\t\treturn true;                                                                                                        // 157\n\t\t}                                                                                                                    // 158\n\t                                                                                                                      // 159\n\t\tif ( decimalPoint && strType ) {                                                                                     // 160\n\t\t\td = _numToDecimal( d, decimalPoint );                                                                               // 161\n\t\t}                                                                                                                    // 162\n\t                                                                                                                      // 163\n\t\tif ( formatted && strType ) {                                                                                        // 164\n\t\t\td = d.replace( _re_formatted_numeric, '' );                                                                         // 165\n\t\t}                                                                                                                    // 166\n\t                                                                                                                      // 167\n\t\treturn !isNaN( parseFloat(d) ) && isFinite( d );                                                                     // 168\n\t};                                                                                                                    // 169\n\t                                                                                                                      // 170\n\t                                                                                                                      // 171\n\t// A string without HTML in it can be considered to be HTML still                                                     // 172\n\tvar _isHtml = function ( d ) {                                                                                        // 173\n\t\treturn _empty( d ) || typeof d === 'string';                                                                         // 174\n\t};                                                                                                                    // 175\n\t                                                                                                                      // 176\n\t                                                                                                                      // 177\n\tvar _htmlNumeric = function ( d, decimalPoint, formatted ) {                                                          // 178\n\t\tif ( _empty( d ) ) {                                                                                                 // 179\n\t\t\treturn true;                                                                                                        // 180\n\t\t}                                                                                                                    // 181\n\t                                                                                                                      // 182\n\t\tvar html = _isHtml( d );                                                                                             // 183\n\t\treturn ! html ?                                                                                                      // 184\n\t\t\tnull :                                                                                                              // 185\n\t\t\t_isNumber( _stripHtml( d ), decimalPoint, formatted ) ?                                                             // 186\n\t\t\t\ttrue :                                                                                                             // 187\n\t\t\t\tnull;                                                                                                              // 188\n\t};                                                                                                                    // 189\n\t                                                                                                                      // 190\n\t                                                                                                                      // 191\n\tvar _pluck = function ( a, prop, prop2 ) {                                                                            // 192\n\t\tvar out = [];                                                                                                        // 193\n\t\tvar i=0, ien=a.length;                                                                                               // 194\n\t                                                                                                                      // 195\n\t\t// Could have the test in the loop for slightly smaller code, but speed                                              // 196\n\t\t// is essential here                                                                                                 // 197\n\t\tif ( prop2 !== undefined ) {                                                                                         // 198\n\t\t\tfor ( ; i<ien ; i++ ) {                                                                                             // 199\n\t\t\t\tif ( a[i] && a[i][ prop ] ) {                                                                                      // 200\n\t\t\t\t\tout.push( a[i][ prop ][ prop2 ] );                                                                                // 201\n\t\t\t\t}                                                                                                                  // 202\n\t\t\t}                                                                                                                   // 203\n\t\t}                                                                                                                    // 204\n\t\telse {                                                                                                               // 205\n\t\t\tfor ( ; i<ien ; i++ ) {                                                                                             // 206\n\t\t\t\tif ( a[i] ) {                                                                                                      // 207\n\t\t\t\t\tout.push( a[i][ prop ] );                                                                                         // 208\n\t\t\t\t}                                                                                                                  // 209\n\t\t\t}                                                                                                                   // 210\n\t\t}                                                                                                                    // 211\n\t                                                                                                                      // 212\n\t\treturn out;                                                                                                          // 213\n\t};                                                                                                                    // 214\n\t                                                                                                                      // 215\n\t                                                                                                                      // 216\n\t// Basically the same as _pluck, but rather than looping over `a` we use `order`                                      // 217\n\t// as the indexes to pick from `a`                                                                                    // 218\n\tvar _pluck_order = function ( a, order, prop, prop2 )                                                                 // 219\n\t{                                                                                                                     // 220\n\t\tvar out = [];                                                                                                        // 221\n\t\tvar i=0, ien=order.length;                                                                                           // 222\n\t                                                                                                                      // 223\n\t\t// Could have the test in the loop for slightly smaller code, but speed                                              // 224\n\t\t// is essential here                                                                                                 // 225\n\t\tif ( prop2 !== undefined ) {                                                                                         // 226\n\t\t\tfor ( ; i<ien ; i++ ) {                                                                                             // 227\n\t\t\t\tif ( a[ order[i] ][ prop ] ) {                                                                                     // 228\n\t\t\t\t\tout.push( a[ order[i] ][ prop ][ prop2 ] );                                                                       // 229\n\t\t\t\t}                                                                                                                  // 230\n\t\t\t}                                                                                                                   // 231\n\t\t}                                                                                                                    // 232\n\t\telse {                                                                                                               // 233\n\t\t\tfor ( ; i<ien ; i++ ) {                                                                                             // 234\n\t\t\t\tout.push( a[ order[i] ][ prop ] );                                                                                 // 235\n\t\t\t}                                                                                                                   // 236\n\t\t}                                                                                                                    // 237\n\t                                                                                                                      // 238\n\t\treturn out;                                                                                                          // 239\n\t};                                                                                                                    // 240\n\t                                                                                                                      // 241\n\t                                                                                                                      // 242\n\tvar _range = function ( len, start )                                                                                  // 243\n\t{                                                                                                                     // 244\n\t\tvar out = [];                                                                                                        // 245\n\t\tvar end;                                                                                                             // 246\n\t                                                                                                                      // 247\n\t\tif ( start === undefined ) {                                                                                         // 248\n\t\t\tstart = 0;                                                                                                          // 249\n\t\t\tend = len;                                                                                                          // 250\n\t\t}                                                                                                                    // 251\n\t\telse {                                                                                                               // 252\n\t\t\tend = start;                                                                                                        // 253\n\t\t\tstart = len;                                                                                                        // 254\n\t\t}                                                                                                                    // 255\n\t                                                                                                                      // 256\n\t\tfor ( var i=start ; i<end ; i++ ) {                                                                                  // 257\n\t\t\tout.push( i );                                                                                                      // 258\n\t\t}                                                                                                                    // 259\n\t                                                                                                                      // 260\n\t\treturn out;                                                                                                          // 261\n\t};                                                                                                                    // 262\n\t                                                                                                                      // 263\n\t                                                                                                                      // 264\n\tvar _removeEmpty = function ( a )                                                                                     // 265\n\t{                                                                                                                     // 266\n\t\tvar out = [];                                                                                                        // 267\n\t                                                                                                                      // 268\n\t\tfor ( var i=0, ien=a.length ; i<ien ; i++ ) {                                                                        // 269\n\t\t\tif ( a[i] ) { // careful - will remove all falsy values!                                                            // 270\n\t\t\t\tout.push( a[i] );                                                                                                  // 271\n\t\t\t}                                                                                                                   // 272\n\t\t}                                                                                                                    // 273\n\t                                                                                                                      // 274\n\t\treturn out;                                                                                                          // 275\n\t};                                                                                                                    // 276\n\t                                                                                                                      // 277\n\t                                                                                                                      // 278\n\tvar _stripHtml = function ( d ) {                                                                                     // 279\n\t\treturn d.replace( _re_html, '' );                                                                                    // 280\n\t};                                                                                                                    // 281\n\t                                                                                                                      // 282\n\t                                                                                                                      // 283\n\t/**                                                                                                                   // 284\n\t * Find the unique elements in a source array.                                                                        // 285\n\t *                                                                                                                    // 286\n\t * @param  {array} src Source array                                                                                   // 287\n\t * @return {array} Array of unique items                                                                              // 288\n\t * @ignore                                                                                                            // 289\n\t */                                                                                                                   // 290\n\tvar _unique = function ( src )                                                                                        // 291\n\t{                                                                                                                     // 292\n\t\t// A faster unique method is to use object keys to identify used values,                                             // 293\n\t\t// but this doesn't work with arrays or objects, which we must also                                                  // 294\n\t\t// consider. See jsperf.com/compare-array-unique-versions/4 for more                                                 // 295\n\t\t// information.                                                                                                      // 296\n\t\tvar                                                                                                                  // 297\n\t\t\tout = [],                                                                                                           // 298\n\t\t\tval,                                                                                                                // 299\n\t\t\ti, ien=src.length,                                                                                                  // 300\n\t\t\tj, k=0;                                                                                                             // 301\n\t                                                                                                                      // 302\n\t\tagain: for ( i=0 ; i<ien ; i++ ) {                                                                                   // 303\n\t\t\tval = src[i];                                                                                                       // 304\n\t                                                                                                                      // 305\n\t\t\tfor ( j=0 ; j<k ; j++ ) {                                                                                           // 306\n\t\t\t\tif ( out[j] === val ) {                                                                                            // 307\n\t\t\t\t\tcontinue again;                                                                                                   // 308\n\t\t\t\t}                                                                                                                  // 309\n\t\t\t}                                                                                                                   // 310\n\t                                                                                                                      // 311\n\t\t\tout.push( val );                                                                                                    // 312\n\t\t\tk++;                                                                                                                // 313\n\t\t}                                                                                                                    // 314\n\t                                                                                                                      // 315\n\t\treturn out;                                                                                                          // 316\n\t};                                                                                                                    // 317\n\t                                                                                                                      // 318\n\t                                                                                                                      // 319\n\t                                                                                                                      // 320\n\t/**                                                                                                                   // 321\n\t * Create a mapping object that allows camel case parameters to be looked up                                          // 322\n\t * for their Hungarian counterparts. The mapping is stored in a private                                               // 323\n\t * parameter called `_hungarianMap` which can be accessed on the source object.                                       // 324\n\t *  @param {object} o                                                                                                 // 325\n\t *  @memberof DataTable#oApi                                                                                          // 326\n\t */                                                                                                                   // 327\n\tfunction _fnHungarianMap ( o )                                                                                        // 328\n\t{                                                                                                                     // 329\n\t\tvar                                                                                                                  // 330\n\t\t\thungarian = 'a aa ai ao as b fn i m o s ',                                                                          // 331\n\t\t\tmatch,                                                                                                              // 332\n\t\t\tnewKey,                                                                                                             // 333\n\t\t\tmap = {};                                                                                                           // 334\n\t                                                                                                                      // 335\n\t\t$.each( o, function (key, val) {                                                                                     // 336\n\t\t\tmatch = key.match(/^([^A-Z]+?)([A-Z])/);                                                                            // 337\n\t                                                                                                                      // 338\n\t\t\tif ( match && hungarian.indexOf(match[1]+' ') !== -1 )                                                              // 339\n\t\t\t{                                                                                                                   // 340\n\t\t\t\tnewKey = key.replace( match[0], match[2].toLowerCase() );                                                          // 341\n\t\t\t\tmap[ newKey ] = key;                                                                                               // 342\n\t                                                                                                                      // 343\n\t\t\t\tif ( match[1] === 'o' )                                                                                            // 344\n\t\t\t\t{                                                                                                                  // 345\n\t\t\t\t\t_fnHungarianMap( o[key] );                                                                                        // 346\n\t\t\t\t}                                                                                                                  // 347\n\t\t\t}                                                                                                                   // 348\n\t\t} );                                                                                                                 // 349\n\t                                                                                                                      // 350\n\t\to._hungarianMap = map;                                                                                               // 351\n\t}                                                                                                                     // 352\n\t                                                                                                                      // 353\n\t                                                                                                                      // 354\n\t/**                                                                                                                   // 355\n\t * Convert from camel case parameters to Hungarian, based on a Hungarian map                                          // 356\n\t * created by _fnHungarianMap.                                                                                        // 357\n\t *  @param {object} src The model object which holds all parameters that can be                                       // 358\n\t *    mapped.                                                                                                         // 359\n\t *  @param {object} user The object to convert from camel case to Hungarian.                                          // 360\n\t *  @param {boolean} force When set to `true`, properties which already have a                                        // 361\n\t *    Hungarian value in the `user` object will be overwritten. Otherwise they                                        // 362\n\t *    won't be.                                                                                                       // 363\n\t *  @memberof DataTable#oApi                                                                                          // 364\n\t */                                                                                                                   // 365\n\tfunction _fnCamelToHungarian ( src, user, force )                                                                     // 366\n\t{                                                                                                                     // 367\n\t\tif ( ! src._hungarianMap ) {                                                                                         // 368\n\t\t\t_fnHungarianMap( src );                                                                                             // 369\n\t\t}                                                                                                                    // 370\n\t                                                                                                                      // 371\n\t\tvar hungarianKey;                                                                                                    // 372\n\t                                                                                                                      // 373\n\t\t$.each( user, function (key, val) {                                                                                  // 374\n\t\t\thungarianKey = src._hungarianMap[ key ];                                                                            // 375\n\t                                                                                                                      // 376\n\t\t\tif ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )                                    // 377\n\t\t\t{                                                                                                                   // 378\n\t\t\t\t// For objects, we need to buzz down into the object to copy parameters                                            // 379\n\t\t\t\tif ( hungarianKey.charAt(0) === 'o' )                                                                              // 380\n\t\t\t\t{                                                                                                                  // 381\n\t\t\t\t\t// Copy the camelCase options over to the hungarian                                                               // 382\n\t\t\t\t\tif ( ! user[ hungarianKey ] ) {                                                                                   // 383\n\t\t\t\t\t\tuser[ hungarianKey ] = {};                                                                                       // 384\n\t\t\t\t\t}                                                                                                                 // 385\n\t\t\t\t\t$.extend( true, user[hungarianKey], user[key] );                                                                  // 386\n\t                                                                                                                      // 387\n\t\t\t\t\t_fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );                                              // 388\n\t\t\t\t}                                                                                                                  // 389\n\t\t\t\telse {                                                                                                             // 390\n\t\t\t\t\tuser[hungarianKey] = user[ key ];                                                                                 // 391\n\t\t\t\t}                                                                                                                  // 392\n\t\t\t}                                                                                                                   // 393\n\t\t} );                                                                                                                 // 394\n\t}                                                                                                                     // 395\n\t                                                                                                                      // 396\n\t                                                                                                                      // 397\n\t/**                                                                                                                   // 398\n\t * Language compatibility - when certain options are given, and others aren't, we                                     // 399\n\t * need to duplicate the values over, in order to provide backwards compatibility                                     // 400\n\t * with older language files.                                                                                         // 401\n\t *  @param {object} oSettings dataTables settings object                                                              // 402\n\t *  @memberof DataTable#oApi                                                                                          // 403\n\t */                                                                                                                   // 404\n\tfunction _fnLanguageCompat( lang )                                                                                    // 405\n\t{                                                                                                                     // 406\n\t\tvar defaults = DataTable.defaults.oLanguage;                                                                         // 407\n\t\tvar zeroRecords = lang.sZeroRecords;                                                                                 // 408\n\t                                                                                                                      // 409\n\t\t/* Backwards compatibility - if there is no sEmptyTable given, then use the same as                                  // 410\n\t\t * sZeroRecords - assuming that is given.                                                                            // 411\n\t\t */                                                                                                                  // 412\n\t\tif ( ! lang.sEmptyTable && zeroRecords &&                                                                            // 413\n\t\t\tdefaults.sEmptyTable === \"No data available in table\" )                                                             // 414\n\t\t{                                                                                                                    // 415\n\t\t\t_fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );                                                                // 416\n\t\t}                                                                                                                    // 417\n\t                                                                                                                      // 418\n\t\t/* Likewise with loading records */                                                                                  // 419\n\t\tif ( ! lang.sLoadingRecords && zeroRecords &&                                                                        // 420\n\t\t\tdefaults.sLoadingRecords === \"Loading...\" )                                                                         // 421\n\t\t{                                                                                                                    // 422\n\t\t\t_fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );                                                            // 423\n\t\t}                                                                                                                    // 424\n\t                                                                                                                      // 425\n\t\t// Old parameter name of the thousands separator mapped onto the new                                                 // 426\n\t\tif ( lang.sInfoThousands ) {                                                                                         // 427\n\t\t\tlang.sThousands = lang.sInfoThousands;                                                                              // 428\n\t\t}                                                                                                                    // 429\n\t                                                                                                                      // 430\n\t\tvar decimal = lang.sDecimal;                                                                                         // 431\n\t\tif ( decimal ) {                                                                                                     // 432\n\t\t\t_addNumericSort( decimal );                                                                                         // 433\n\t\t}                                                                                                                    // 434\n\t}                                                                                                                     // 435\n\t                                                                                                                      // 436\n\t                                                                                                                      // 437\n\t/**                                                                                                                   // 438\n\t * Map one parameter onto another                                                                                     // 439\n\t *  @param {object} o Object to map                                                                                   // 440\n\t *  @param {*} knew The new parameter name                                                                            // 441\n\t *  @param {*} old The old parameter name                                                                             // 442\n\t */                                                                                                                   // 443\n\tvar _fnCompatMap = function ( o, knew, old ) {                                                                        // 444\n\t\tif ( o[ knew ] !== undefined ) {                                                                                     // 445\n\t\t\to[ old ] = o[ knew ];                                                                                               // 446\n\t\t}                                                                                                                    // 447\n\t};                                                                                                                    // 448\n\t                                                                                                                      // 449\n\t                                                                                                                      // 450\n\t/**                                                                                                                   // 451\n\t * Provide backwards compatibility for the main DT options. Note that the new                                         // 452\n\t * options are mapped onto the old parameters, so this is an external interface                                       // 453\n\t * change only.                                                                                                       // 454\n\t *  @param {object} init Object to map                                                                                // 455\n\t */                                                                                                                   // 456\n\tfunction _fnCompatOpts ( init )                                                                                       // 457\n\t{                                                                                                                     // 458\n\t\t_fnCompatMap( init, 'ordering',      'bSort' );                                                                      // 459\n\t\t_fnCompatMap( init, 'orderMulti',    'bSortMulti' );                                                                 // 460\n\t\t_fnCompatMap( init, 'orderClasses',  'bSortClasses' );                                                               // 461\n\t\t_fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );                                                              // 462\n\t\t_fnCompatMap( init, 'order',         'aaSorting' );                                                                  // 463\n\t\t_fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );                                                             // 464\n\t\t_fnCompatMap( init, 'paging',        'bPaginate' );                                                                  // 465\n\t\t_fnCompatMap( init, 'pagingType',    'sPaginationType' );                                                            // 466\n\t\t_fnCompatMap( init, 'pageLength',    'iDisplayLength' );                                                             // 467\n\t\t_fnCompatMap( init, 'searching',     'bFilter' );                                                                    // 468\n\t                                                                                                                      // 469\n\t\t// Column search objects are in an array, so it needs to be converted                                                // 470\n\t\t// element by element                                                                                                // 471\n\t\tvar searchCols = init.aoSearchCols;                                                                                  // 472\n\t                                                                                                                      // 473\n\t\tif ( searchCols ) {                                                                                                  // 474\n\t\t\tfor ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {                                                              // 475\n\t\t\t\tif ( searchCols[i] ) {                                                                                             // 476\n\t\t\t\t\t_fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );                                                   // 477\n\t\t\t\t}                                                                                                                  // 478\n\t\t\t}                                                                                                                   // 479\n\t\t}                                                                                                                    // 480\n\t}                                                                                                                     // 481\n\t                                                                                                                      // 482\n\t                                                                                                                      // 483\n\t/**                                                                                                                   // 484\n\t * Provide backwards compatibility for column options. Note that the new options                                      // 485\n\t * are mapped onto the old parameters, so this is an external interface change                                        // 486\n\t * only.                                                                                                              // 487\n\t *  @param {object} init Object to map                                                                                // 488\n\t */                                                                                                                   // 489\n\tfunction _fnCompatCols ( init )                                                                                       // 490\n\t{                                                                                                                     // 491\n\t\t_fnCompatMap( init, 'orderable',     'bSortable' );                                                                  // 492\n\t\t_fnCompatMap( init, 'orderData',     'aDataSort' );                                                                  // 493\n\t\t_fnCompatMap( init, 'orderSequence', 'asSorting' );                                                                  // 494\n\t\t_fnCompatMap( init, 'orderDataType', 'sortDataType' );                                                               // 495\n\t                                                                                                                      // 496\n\t\t// orderData can be given as an integer                                                                              // 497\n\t\tvar dataSort = init.aDataSort;                                                                                       // 498\n\t\tif ( dataSort && ! $.isArray( dataSort ) ) {                                                                         // 499\n\t\t\tinit.aDataSort = [ dataSort ];                                                                                      // 500\n\t\t}                                                                                                                    // 501\n\t}                                                                                                                     // 502\n\t                                                                                                                      // 503\n\t                                                                                                                      // 504\n\t/**                                                                                                                   // 505\n\t * Browser feature detection for capabilities, quirks                                                                 // 506\n\t *  @param {object} settings dataTables settings object                                                               // 507\n\t *  @memberof DataTable#oApi                                                                                          // 508\n\t */                                                                                                                   // 509\n\tfunction _fnBrowserDetect( settings )                                                                                 // 510\n\t{                                                                                                                     // 511\n\t\tvar browser = settings.oBrowser;                                                                                     // 512\n\t                                                                                                                      // 513\n\t\t// Scrolling feature / quirks detection                                                                              // 514\n\t\tvar n = $('<div/>')                                                                                                  // 515\n\t\t\t.css( {                                                                                                             // 516\n\t\t\t\tposition: 'absolute',                                                                                              // 517\n\t\t\t\ttop: 0,                                                                                                            // 518\n\t\t\t\tleft: 0,                                                                                                           // 519\n\t\t\t\theight: 1,                                                                                                         // 520\n\t\t\t\twidth: 1,                                                                                                          // 521\n\t\t\t\toverflow: 'hidden'                                                                                                 // 522\n\t\t\t} )                                                                                                                 // 523\n\t\t\t.append(                                                                                                            // 524\n\t\t\t\t$('<div/>')                                                                                                        // 525\n\t\t\t\t\t.css( {                                                                                                           // 526\n\t\t\t\t\t\tposition: 'absolute',                                                                                            // 527\n\t\t\t\t\t\ttop: 1,                                                                                                          // 528\n\t\t\t\t\t\tleft: 1,                                                                                                         // 529\n\t\t\t\t\t\twidth: 100,                                                                                                      // 530\n\t\t\t\t\t\toverflow: 'scroll'                                                                                               // 531\n\t\t\t\t\t} )                                                                                                               // 532\n\t\t\t\t\t.append(                                                                                                          // 533\n\t\t\t\t\t\t$('<div class=\"test\"/>')                                                                                         // 534\n\t\t\t\t\t\t\t.css( {                                                                                                         // 535\n\t\t\t\t\t\t\t\twidth: '100%',                                                                                                 // 536\n\t\t\t\t\t\t\t\theight: 10                                                                                                     // 537\n\t\t\t\t\t\t\t} )                                                                                                             // 538\n\t\t\t\t\t)                                                                                                                 // 539\n\t\t\t)                                                                                                                   // 540\n\t\t\t.appendTo( 'body' );                                                                                                // 541\n\t                                                                                                                      // 542\n\t\tvar test = n.find('.test');                                                                                          // 543\n\t                                                                                                                      // 544\n\t\t// IE6/7 will oversize a width 100% element inside a scrolling element, to                                           // 545\n\t\t// include the width of the scrollbar, while other browsers ensure the inner                                         // 546\n\t\t// element is contained without forcing scrolling                                                                    // 547\n\t\tbrowser.bScrollOversize = test[0].offsetWidth === 100;                                                               // 548\n\t                                                                                                                      // 549\n\t\t// In rtl text layout, some browsers (most, but not all) will place the                                              // 550\n\t\t// scrollbar on the left, rather than the right.                                                                     // 551\n\t\tbrowser.bScrollbarLeft = Math.round( test.offset().left ) !== 1;                                                     // 552\n\t                                                                                                                      // 553\n\t\tn.remove();                                                                                                          // 554\n\t}                                                                                                                     // 555\n\t                                                                                                                      // 556\n\t                                                                                                                      // 557\n\t/**                                                                                                                   // 558\n\t * Array.prototype reduce[Right] method, used for browsers which don't support                                        // 559\n\t * JS 1.6. Done this way to reduce code size, since we iterate either way                                             // 560\n\t *  @param {object} settings dataTables settings object                                                               // 561\n\t *  @memberof DataTable#oApi                                                                                          // 562\n\t */                                                                                                                   // 563\n\tfunction _fnReduce ( that, fn, init, start, end, inc )                                                                // 564\n\t{                                                                                                                     // 565\n\t\tvar                                                                                                                  // 566\n\t\t\ti = start,                                                                                                          // 567\n\t\t\tvalue,                                                                                                              // 568\n\t\t\tisSet = false;                                                                                                      // 569\n\t                                                                                                                      // 570\n\t\tif ( init !== undefined ) {                                                                                          // 571\n\t\t\tvalue = init;                                                                                                       // 572\n\t\t\tisSet = true;                                                                                                       // 573\n\t\t}                                                                                                                    // 574\n\t                                                                                                                      // 575\n\t\twhile ( i !== end ) {                                                                                                // 576\n\t\t\tif ( ! that.hasOwnProperty(i) ) {                                                                                   // 577\n\t\t\t\tcontinue;                                                                                                          // 578\n\t\t\t}                                                                                                                   // 579\n\t                                                                                                                      // 580\n\t\t\tvalue = isSet ?                                                                                                     // 581\n\t\t\t\tfn( value, that[i], i, that ) :                                                                                    // 582\n\t\t\t\tthat[i];                                                                                                           // 583\n\t                                                                                                                      // 584\n\t\t\tisSet = true;                                                                                                       // 585\n\t\t\ti += inc;                                                                                                           // 586\n\t\t}                                                                                                                    // 587\n\t                                                                                                                      // 588\n\t\treturn value;                                                                                                        // 589\n\t}                                                                                                                     // 590\n\t                                                                                                                      // 591\n\t/**                                                                                                                   // 592\n\t * Add a column to the list used for the table with default values                                                    // 593\n\t *  @param {object} oSettings dataTables settings object                                                              // 594\n\t *  @param {node} nTh The th element for this column                                                                  // 595\n\t *  @memberof DataTable#oApi                                                                                          // 596\n\t */                                                                                                                   // 597\n\tfunction _fnAddColumn( oSettings, nTh )                                                                               // 598\n\t{                                                                                                                     // 599\n\t\t// Add column to aoColumns array                                                                                     // 600\n\t\tvar oDefaults = DataTable.defaults.column;                                                                           // 601\n\t\tvar iCol = oSettings.aoColumns.length;                                                                               // 602\n\t\tvar oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {                                                      // 603\n\t\t\t\"nTh\": nTh ? nTh : document.createElement('th'),                                                                    // 604\n\t\t\t\"sTitle\":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',                                  // 605\n\t\t\t\"aDataSort\": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],                                                    // 606\n\t\t\t\"mData\": oDefaults.mData ? oDefaults.mData : iCol,                                                                  // 607\n\t\t\tidx: iCol                                                                                                           // 608\n\t\t} );                                                                                                                 // 609\n\t\toSettings.aoColumns.push( oCol );                                                                                    // 610\n\t                                                                                                                      // 611\n\t\t// Add search object for column specific search. Note that the `searchCols[ iCol ]`                                  // 612\n\t\t// passed into extend can be undefined. This allows the user to give a default                                       // 613\n\t\t// with only some of the parameters defined, and also not give a default                                             // 614\n\t\tvar searchCols = oSettings.aoPreSearchCols;                                                                          // 615\n\t\tsearchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );                                   // 616\n\t                                                                                                                      // 617\n\t\t// Use the default column options function to initialise classes etc                                                 // 618\n\t\t_fnColumnOptions( oSettings, iCol, $(nTh).data() );                                                                  // 619\n\t}                                                                                                                     // 620\n\t                                                                                                                      // 621\n\t                                                                                                                      // 622\n\t/**                                                                                                                   // 623\n\t * Apply options for a column                                                                                         // 624\n\t *  @param {object} oSettings dataTables settings object                                                              // 625\n\t *  @param {int} iCol column index to consider                                                                        // 626\n\t *  @param {object} oOptions object with sType, bVisible and bSearchable etc                                          // 627\n\t *  @memberof DataTable#oApi                                                                                          // 628\n\t */                                                                                                                   // 629\n\tfunction _fnColumnOptions( oSettings, iCol, oOptions )                                                                // 630\n\t{                                                                                                                     // 631\n\t\tvar oCol = oSettings.aoColumns[ iCol ];                                                                              // 632\n\t\tvar oClasses = oSettings.oClasses;                                                                                   // 633\n\t\tvar th = $(oCol.nTh);                                                                                                // 634\n\t                                                                                                                      // 635\n\t\t// Try to get width information from the DOM. We can't get it from CSS                                               // 636\n\t\t// as we'd need to parse the CSS stylesheet. `width` option can override                                             // 637\n\t\tif ( ! oCol.sWidthOrig ) {                                                                                           // 638\n\t\t\t// Width attribute                                                                                                  // 639\n\t\t\toCol.sWidthOrig = th.attr('width') || null;                                                                         // 640\n\t                                                                                                                      // 641\n\t\t\t// Style attribute                                                                                                  // 642\n\t\t\tvar t = (th.attr('style') || '').match(/width:\\s*(\\d+[pxem%]+)/);                                                   // 643\n\t\t\tif ( t ) {                                                                                                          // 644\n\t\t\t\toCol.sWidthOrig = t[1];                                                                                            // 645\n\t\t\t}                                                                                                                   // 646\n\t\t}                                                                                                                    // 647\n\t                                                                                                                      // 648\n\t\t/* User specified column options */                                                                                  // 649\n\t\tif ( oOptions !== undefined && oOptions !== null )                                                                   // 650\n\t\t{                                                                                                                    // 651\n\t\t\t// Backwards compatibility                                                                                          // 652\n\t\t\t_fnCompatCols( oOptions );                                                                                          // 653\n\t                                                                                                                      // 654\n\t\t\t// Map camel case parameters to their Hungarian counterparts                                                        // 655\n\t\t\t_fnCamelToHungarian( DataTable.defaults.column, oOptions );                                                         // 656\n\t                                                                                                                      // 657\n\t\t\t/* Backwards compatibility for mDataProp */                                                                         // 658\n\t\t\tif ( oOptions.mDataProp !== undefined && !oOptions.mData )                                                          // 659\n\t\t\t{                                                                                                                   // 660\n\t\t\t\toOptions.mData = oOptions.mDataProp;                                                                               // 661\n\t\t\t}                                                                                                                   // 662\n\t                                                                                                                      // 663\n\t\t\tif ( oOptions.sType )                                                                                               // 664\n\t\t\t{                                                                                                                   // 665\n\t\t\t\toCol._sManualType = oOptions.sType;                                                                                // 666\n\t\t\t}                                                                                                                   // 667\n\t                                                                                                                      // 668\n\t\t\t// `class` is a reserved word in Javascript, so we need to provide                                                  // 669\n\t\t\t// the ability to use a valid name for the camel case input                                                         // 670\n\t\t\tif ( oOptions.className && ! oOptions.sClass )                                                                      // 671\n\t\t\t{                                                                                                                   // 672\n\t\t\t\toOptions.sClass = oOptions.className;                                                                              // 673\n\t\t\t}                                                                                                                   // 674\n\t                                                                                                                      // 675\n\t\t\t$.extend( oCol, oOptions );                                                                                         // 676\n\t\t\t_fnMap( oCol, oOptions, \"sWidth\", \"sWidthOrig\" );                                                                   // 677\n\t                                                                                                                      // 678\n\t\t\t/* iDataSort to be applied (backwards compatibility), but aDataSort will take                                       // 679\n\t\t\t * priority if defined                                                                                              // 680\n\t\t\t */                                                                                                                 // 681\n\t\t\tif ( oOptions.iDataSort !== undefined )                                                                             // 682\n\t\t\t{                                                                                                                   // 683\n\t\t\t\toCol.aDataSort = [ oOptions.iDataSort ];                                                                           // 684\n\t\t\t}                                                                                                                   // 685\n\t\t\t_fnMap( oCol, oOptions, \"aDataSort\" );                                                                              // 686\n\t\t}                                                                                                                    // 687\n\t                                                                                                                      // 688\n\t\t/* Cache the data get and set functions for speed */                                                                 // 689\n\t\tvar mDataSrc = oCol.mData;                                                                                           // 690\n\t\tvar mData = _fnGetObjectDataFn( mDataSrc );                                                                          // 691\n\t\tvar mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;                                              // 692\n\t                                                                                                                      // 693\n\t\tvar attrTest = function( src ) {                                                                                     // 694\n\t\t\treturn typeof src === 'string' && src.indexOf('@') !== -1;                                                          // 695\n\t\t};                                                                                                                   // 696\n\t\toCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (                                                                    // 697\n\t\t\tattrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)                                     // 698\n\t\t);                                                                                                                   // 699\n\t                                                                                                                      // 700\n\t\toCol.fnGetData = function (rowData, type, meta) {                                                                    // 701\n\t\t\tvar innerData = mData( rowData, type, undefined, meta );                                                            // 702\n\t                                                                                                                      // 703\n\t\t\treturn mRender && type ?                                                                                            // 704\n\t\t\t\tmRender( innerData, type, rowData, meta ) :                                                                        // 705\n\t\t\t\tinnerData;                                                                                                         // 706\n\t\t};                                                                                                                   // 707\n\t\toCol.fnSetData = function ( rowData, val, meta ) {                                                                   // 708\n\t\t\treturn _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );                                                        // 709\n\t\t};                                                                                                                   // 710\n\t                                                                                                                      // 711\n\t\t// Indicate if DataTables should read DOM data as an object or array                                                 // 712\n\t\t// Used in _fnGetRowElements                                                                                         // 713\n\t\tif ( typeof mDataSrc !== 'number' ) {                                                                                // 714\n\t\t\toSettings._rowReadObject = true;                                                                                    // 715\n\t\t}                                                                                                                    // 716\n\t                                                                                                                      // 717\n\t\t/* Feature sorting overrides column specific when off */                                                             // 718\n\t\tif ( !oSettings.oFeatures.bSort )                                                                                    // 719\n\t\t{                                                                                                                    // 720\n\t\t\toCol.bSortable = false;                                                                                             // 721\n\t\t\tth.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called                        // 722\n\t\t}                                                                                                                    // 723\n\t                                                                                                                      // 724\n\t\t/* Check that the class assignment is correct for sorting */                                                         // 725\n\t\tvar bAsc = $.inArray('asc', oCol.asSorting) !== -1;                                                                  // 726\n\t\tvar bDesc = $.inArray('desc', oCol.asSorting) !== -1;                                                                // 727\n\t\tif ( !oCol.bSortable || (!bAsc && !bDesc) )                                                                          // 728\n\t\t{                                                                                                                    // 729\n\t\t\toCol.sSortingClass = oClasses.sSortableNone;                                                                        // 730\n\t\t\toCol.sSortingClassJUI = \"\";                                                                                         // 731\n\t\t}                                                                                                                    // 732\n\t\telse if ( bAsc && !bDesc )                                                                                           // 733\n\t\t{                                                                                                                    // 734\n\t\t\toCol.sSortingClass = oClasses.sSortableAsc;                                                                         // 735\n\t\t\toCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;                                                                // 736\n\t\t}                                                                                                                    // 737\n\t\telse if ( !bAsc && bDesc )                                                                                           // 738\n\t\t{                                                                                                                    // 739\n\t\t\toCol.sSortingClass = oClasses.sSortableDesc;                                                                        // 740\n\t\t\toCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;                                                               // 741\n\t\t}                                                                                                                    // 742\n\t\telse                                                                                                                 // 743\n\t\t{                                                                                                                    // 744\n\t\t\toCol.sSortingClass = oClasses.sSortable;                                                                            // 745\n\t\t\toCol.sSortingClassJUI = oClasses.sSortJUI;                                                                          // 746\n\t\t}                                                                                                                    // 747\n\t}                                                                                                                     // 748\n\t                                                                                                                      // 749\n\t                                                                                                                      // 750\n\t/**                                                                                                                   // 751\n\t * Adjust the table column widths for new data. Note: you would probably want to                                      // 752\n\t * do a redraw after calling this function!                                                                           // 753\n\t *  @param {object} settings dataTables settings object                                                               // 754\n\t *  @memberof DataTable#oApi                                                                                          // 755\n\t */                                                                                                                   // 756\n\tfunction _fnAdjustColumnSizing ( settings )                                                                           // 757\n\t{                                                                                                                     // 758\n\t\t/* Not interested in doing column width calculation if auto-width is disabled */                                     // 759\n\t\tif ( settings.oFeatures.bAutoWidth !== false )                                                                       // 760\n\t\t{                                                                                                                    // 761\n\t\t\tvar columns = settings.aoColumns;                                                                                   // 762\n\t                                                                                                                      // 763\n\t\t\t_fnCalculateColumnWidths( settings );                                                                               // 764\n\t\t\tfor ( var i=0 , iLen=columns.length ; i<iLen ; i++ )                                                                // 765\n\t\t\t{                                                                                                                   // 766\n\t\t\t\tcolumns[i].nTh.style.width = columns[i].sWidth;                                                                    // 767\n\t\t\t}                                                                                                                   // 768\n\t\t}                                                                                                                    // 769\n\t                                                                                                                      // 770\n\t\tvar scroll = settings.oScroll;                                                                                       // 771\n\t\tif ( scroll.sY !== '' || scroll.sX !== '')                                                                           // 772\n\t\t{                                                                                                                    // 773\n\t\t\t_fnScrollDraw( settings );                                                                                          // 774\n\t\t}                                                                                                                    // 775\n\t                                                                                                                      // 776\n\t\t_fnCallbackFire( settings, null, 'column-sizing', [settings] );                                                      // 777\n\t}                                                                                                                     // 778\n\t                                                                                                                      // 779\n\t                                                                                                                      // 780\n\t/**                                                                                                                   // 781\n\t * Covert the index of a visible column to the index in the data array (take account                                  // 782\n\t * of hidden columns)                                                                                                 // 783\n\t *  @param {object} oSettings dataTables settings object                                                              // 784\n\t *  @param {int} iMatch Visible column index to lookup                                                                // 785\n\t *  @returns {int} i the data index                                                                                   // 786\n\t *  @memberof DataTable#oApi                                                                                          // 787\n\t */                                                                                                                   // 788\n\tfunction _fnVisibleToColumnIndex( oSettings, iMatch )                                                                 // 789\n\t{                                                                                                                     // 790\n\t\tvar aiVis = _fnGetColumns( oSettings, 'bVisible' );                                                                  // 791\n\t                                                                                                                      // 792\n\t\treturn typeof aiVis[iMatch] === 'number' ?                                                                           // 793\n\t\t\taiVis[iMatch] :                                                                                                     // 794\n\t\t\tnull;                                                                                                               // 795\n\t}                                                                                                                     // 796\n\t                                                                                                                      // 797\n\t                                                                                                                      // 798\n\t/**                                                                                                                   // 799\n\t * Covert the index of an index in the data array and convert it to the visible                                       // 800\n\t *   column index (take account of hidden columns)                                                                    // 801\n\t *  @param {int} iMatch Column index to lookup                                                                        // 802\n\t *  @param {object} oSettings dataTables settings object                                                              // 803\n\t *  @returns {int} i the data index                                                                                   // 804\n\t *  @memberof DataTable#oApi                                                                                          // 805\n\t */                                                                                                                   // 806\n\tfunction _fnColumnIndexToVisible( oSettings, iMatch )                                                                 // 807\n\t{                                                                                                                     // 808\n\t\tvar aiVis = _fnGetColumns( oSettings, 'bVisible' );                                                                  // 809\n\t\tvar iPos = $.inArray( iMatch, aiVis );                                                                               // 810\n\t                                                                                                                      // 811\n\t\treturn iPos !== -1 ? iPos : null;                                                                                    // 812\n\t}                                                                                                                     // 813\n\t                                                                                                                      // 814\n\t                                                                                                                      // 815\n\t/**                                                                                                                   // 816\n\t * Get the number of visible columns                                                                                  // 817\n\t *  @param {object} oSettings dataTables settings object                                                              // 818\n\t *  @returns {int} i the number of visible columns                                                                    // 819\n\t *  @memberof DataTable#oApi                                                                                          // 820\n\t */                                                                                                                   // 821\n\tfunction _fnVisbleColumns( oSettings )                                                                                // 822\n\t{                                                                                                                     // 823\n\t\treturn _fnGetColumns( oSettings, 'bVisible' ).length;                                                                // 824\n\t}                                                                                                                     // 825\n\t                                                                                                                      // 826\n\t                                                                                                                      // 827\n\t/**                                                                                                                   // 828\n\t * Get an array of column indexes that match a given property                                                         // 829\n\t *  @param {object} oSettings dataTables settings object                                                              // 830\n\t *  @param {string} sParam Parameter in aoColumns to look for - typically                                             // 831\n\t *    bVisible or bSearchable                                                                                         // 832\n\t *  @returns {array} Array of indexes with matched properties                                                         // 833\n\t *  @memberof DataTable#oApi                                                                                          // 834\n\t */                                                                                                                   // 835\n\tfunction _fnGetColumns( oSettings, sParam )                                                                           // 836\n\t{                                                                                                                     // 837\n\t\tvar a = [];                                                                                                          // 838\n\t                                                                                                                      // 839\n\t\t$.map( oSettings.aoColumns, function(val, i) {                                                                       // 840\n\t\t\tif ( val[sParam] ) {                                                                                                // 841\n\t\t\t\ta.push( i );                                                                                                       // 842\n\t\t\t}                                                                                                                   // 843\n\t\t} );                                                                                                                 // 844\n\t                                                                                                                      // 845\n\t\treturn a;                                                                                                            // 846\n\t}                                                                                                                     // 847\n\t                                                                                                                      // 848\n\t                                                                                                                      // 849\n\t/**                                                                                                                   // 850\n\t * Calculate the 'type' of a column                                                                                   // 851\n\t *  @param {object} settings dataTables settings object                                                               // 852\n\t *  @memberof DataTable#oApi                                                                                          // 853\n\t */                                                                                                                   // 854\n\tfunction _fnColumnTypes ( settings )                                                                                  // 855\n\t{                                                                                                                     // 856\n\t\tvar columns = settings.aoColumns;                                                                                    // 857\n\t\tvar data = settings.aoData;                                                                                          // 858\n\t\tvar types = DataTable.ext.type.detect;                                                                               // 859\n\t\tvar i, ien, j, jen, k, ken;                                                                                          // 860\n\t\tvar col, cell, detectedType, cache;                                                                                  // 861\n\t                                                                                                                      // 862\n\t\t// For each column, spin over the                                                                                    // 863\n\t\tfor ( i=0, ien=columns.length ; i<ien ; i++ ) {                                                                      // 864\n\t\t\tcol = columns[i];                                                                                                   // 865\n\t\t\tcache = [];                                                                                                         // 866\n\t                                                                                                                      // 867\n\t\t\tif ( ! col.sType && col._sManualType ) {                                                                            // 868\n\t\t\t\tcol.sType = col._sManualType;                                                                                      // 869\n\t\t\t}                                                                                                                   // 870\n\t\t\telse if ( ! col.sType ) {                                                                                           // 871\n\t\t\t\tfor ( j=0, jen=types.length ; j<jen ; j++ ) {                                                                      // 872\n\t\t\t\t\tfor ( k=0, ken=data.length ; k<ken ; k++ ) {                                                                      // 873\n\t\t\t\t\t\t// Use a cache array so we only need to get the type data                                                        // 874\n\t\t\t\t\t\t// from the formatter once (when using multiple detectors)                                                       // 875\n\t\t\t\t\t\tif ( cache[k] === undefined ) {                                                                                  // 876\n\t\t\t\t\t\t\tcache[k] = _fnGetCellData( settings, k, i, 'type' );                                                            // 877\n\t\t\t\t\t\t}                                                                                                                // 878\n\t                                                                                                                      // 879\n\t\t\t\t\t\tdetectedType = types[j]( cache[k], settings );                                                                   // 880\n\t                                                                                                                      // 881\n\t\t\t\t\t\t// If null, then this type can't apply to this column, so                                                        // 882\n\t\t\t\t\t\t// rather than testing all cells, break out. There is an                                                         // 883\n\t\t\t\t\t\t// exception for the last type which is `html`. We need to                                                       // 884\n\t\t\t\t\t\t// scan all rows since it is possible to mix string and HTML                                                     // 885\n\t\t\t\t\t\t// types                                                                                                         // 886\n\t\t\t\t\t\tif ( ! detectedType && j !== types.length-1 ) {                                                                  // 887\n\t\t\t\t\t\t\tbreak;                                                                                                          // 888\n\t\t\t\t\t\t}                                                                                                                // 889\n\t                                                                                                                      // 890\n\t\t\t\t\t\t// Only a single match is needed for html type since it is                                                       // 891\n\t\t\t\t\t\t// bottom of the pile and very similar to string                                                                 // 892\n\t\t\t\t\t\tif ( detectedType === 'html' ) {                                                                                 // 893\n\t\t\t\t\t\t\tbreak;                                                                                                          // 894\n\t\t\t\t\t\t}                                                                                                                // 895\n\t\t\t\t\t}                                                                                                                 // 896\n\t                                                                                                                      // 897\n\t\t\t\t\t// Type is valid for all data points in the column - use this                                                     // 898\n\t\t\t\t\t// type                                                                                                           // 899\n\t\t\t\t\tif ( detectedType ) {                                                                                             // 900\n\t\t\t\t\t\tcol.sType = detectedType;                                                                                        // 901\n\t\t\t\t\t\tbreak;                                                                                                           // 902\n\t\t\t\t\t}                                                                                                                 // 903\n\t\t\t\t}                                                                                                                  // 904\n\t                                                                                                                      // 905\n\t\t\t\t// Fall back - if no type was detected, always use string                                                          // 906\n\t\t\t\tif ( ! col.sType ) {                                                                                               // 907\n\t\t\t\t\tcol.sType = 'string';                                                                                             // 908\n\t\t\t\t}                                                                                                                  // 909\n\t\t\t}                                                                                                                   // 910\n\t\t}                                                                                                                    // 911\n\t}                                                                                                                     // 912\n\t                                                                                                                      // 913\n\t                                                                                                                      // 914\n\t/**                                                                                                                   // 915\n\t * Take the column definitions and static columns arrays and calculate how                                            // 916\n\t * they relate to column indexes. The callback function will then apply the                                           // 917\n\t * definition found for a column to a suitable configuration object.                                                  // 918\n\t *  @param {object} oSettings dataTables settings object                                                              // 919\n\t *  @param {array} aoColDefs The aoColumnDefs array that is to be applied                                             // 920\n\t *  @param {array} aoCols The aoColumns array that defines columns individually                                       // 921\n\t *  @param {function} fn Callback function - takes two parameters, the calculated                                     // 922\n\t *    column index and the definition for that column.                                                                // 923\n\t *  @memberof DataTable#oApi                                                                                          // 924\n\t */                                                                                                                   // 925\n\tfunction _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )                                                       // 926\n\t{                                                                                                                     // 927\n\t\tvar i, iLen, j, jLen, k, kLen, def;                                                                                  // 928\n\t\tvar columns = oSettings.aoColumns;                                                                                   // 929\n\t                                                                                                                      // 930\n\t\t// Column definitions with aTargets                                                                                  // 931\n\t\tif ( aoColDefs )                                                                                                     // 932\n\t\t{                                                                                                                    // 933\n\t\t\t/* Loop over the definitions array - loop in reverse so first instance has priority */                              // 934\n\t\t\tfor ( i=aoColDefs.length-1 ; i>=0 ; i-- )                                                                           // 935\n\t\t\t{                                                                                                                   // 936\n\t\t\t\tdef = aoColDefs[i];                                                                                                // 937\n\t                                                                                                                      // 938\n\t\t\t\t/* Each definition can target multiple columns, as it is an array */                                               // 939\n\t\t\t\tvar aTargets = def.targets !== undefined ?                                                                         // 940\n\t\t\t\t\tdef.targets :                                                                                                     // 941\n\t\t\t\t\tdef.aTargets;                                                                                                     // 942\n\t                                                                                                                      // 943\n\t\t\t\tif ( ! $.isArray( aTargets ) )                                                                                     // 944\n\t\t\t\t{                                                                                                                  // 945\n\t\t\t\t\taTargets = [ aTargets ];                                                                                          // 946\n\t\t\t\t}                                                                                                                  // 947\n\t                                                                                                                      // 948\n\t\t\t\tfor ( j=0, jLen=aTargets.length ; j<jLen ; j++ )                                                                   // 949\n\t\t\t\t{                                                                                                                  // 950\n\t\t\t\t\tif ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )                                                        // 951\n\t\t\t\t\t{                                                                                                                 // 952\n\t\t\t\t\t\t/* Add columns that we don't yet know about */                                                                   // 953\n\t\t\t\t\t\twhile( columns.length <= aTargets[j] )                                                                           // 954\n\t\t\t\t\t\t{                                                                                                                // 955\n\t\t\t\t\t\t\t_fnAddColumn( oSettings );                                                                                      // 956\n\t\t\t\t\t\t}                                                                                                                // 957\n\t                                                                                                                      // 958\n\t\t\t\t\t\t/* Integer, basic index */                                                                                       // 959\n\t\t\t\t\t\tfn( aTargets[j], def );                                                                                          // 960\n\t\t\t\t\t}                                                                                                                 // 961\n\t\t\t\t\telse if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )                                                    // 962\n\t\t\t\t\t{                                                                                                                 // 963\n\t\t\t\t\t\t/* Negative integer, right to left column counting */                                                            // 964\n\t\t\t\t\t\tfn( columns.length+aTargets[j], def );                                                                           // 965\n\t\t\t\t\t}                                                                                                                 // 966\n\t\t\t\t\telse if ( typeof aTargets[j] === 'string' )                                                                       // 967\n\t\t\t\t\t{                                                                                                                 // 968\n\t\t\t\t\t\t/* Class name matching on TH element */                                                                          // 969\n\t\t\t\t\t\tfor ( k=0, kLen=columns.length ; k<kLen ; k++ )                                                                  // 970\n\t\t\t\t\t\t{                                                                                                                // 971\n\t\t\t\t\t\t\tif ( aTargets[j] == \"_all\" ||                                                                                   // 972\n\t\t\t\t\t\t\t     $(columns[k].nTh).hasClass( aTargets[j] ) )                                                                // 973\n\t\t\t\t\t\t\t{                                                                                                               // 974\n\t\t\t\t\t\t\t\tfn( k, def );                                                                                                  // 975\n\t\t\t\t\t\t\t}                                                                                                               // 976\n\t\t\t\t\t\t}                                                                                                                // 977\n\t\t\t\t\t}                                                                                                                 // 978\n\t\t\t\t}                                                                                                                  // 979\n\t\t\t}                                                                                                                   // 980\n\t\t}                                                                                                                    // 981\n\t                                                                                                                      // 982\n\t\t// Statically defined columns array                                                                                  // 983\n\t\tif ( aoCols )                                                                                                        // 984\n\t\t{                                                                                                                    // 985\n\t\t\tfor ( i=0, iLen=aoCols.length ; i<iLen ; i++ )                                                                      // 986\n\t\t\t{                                                                                                                   // 987\n\t\t\t\tfn( i, aoCols[i] );                                                                                                // 988\n\t\t\t}                                                                                                                   // 989\n\t\t}                                                                                                                    // 990\n\t}                                                                                                                     // 991\n\t                                                                                                                      // 992\n\t/**                                                                                                                   // 993\n\t * Add a data array to the table, creating DOM node etc. This is the parallel to                                      // 994\n\t * _fnGatherData, but for adding rows from a Javascript source, rather than a                                         // 995\n\t * DOM source.                                                                                                        // 996\n\t *  @param {object} oSettings dataTables settings object                                                              // 997\n\t *  @param {array} aData data array to be added                                                                       // 998\n\t *  @param {node} [nTr] TR element to add to the table - optional. If not given,                                      // 999\n\t *    DataTables will create a row automatically                                                                      // 1000\n\t *  @param {array} [anTds] Array of TD|TH elements for the row - must be given                                        // 1001\n\t *    if nTr is.                                                                                                      // 1002\n\t *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed                                        // 1003\n\t *  @memberof DataTable#oApi                                                                                          // 1004\n\t */                                                                                                                   // 1005\n\tfunction _fnAddData ( oSettings, aDataIn, nTr, anTds )                                                                // 1006\n\t{                                                                                                                     // 1007\n\t\t/* Create the object for storing information about this new row */                                                   // 1008\n\t\tvar iRow = oSettings.aoData.length;                                                                                  // 1009\n\t\tvar oData = $.extend( true, {}, DataTable.models.oRow, {                                                             // 1010\n\t\t\tsrc: nTr ? 'dom' : 'data'                                                                                           // 1011\n\t\t} );                                                                                                                 // 1012\n\t                                                                                                                      // 1013\n\t\toData._aData = aDataIn;                                                                                              // 1014\n\t\toSettings.aoData.push( oData );                                                                                      // 1015\n\t                                                                                                                      // 1016\n\t\t/* Create the cells */                                                                                               // 1017\n\t\tvar nTd, sThisType;                                                                                                  // 1018\n\t\tvar columns = oSettings.aoColumns;                                                                                   // 1019\n\t\tfor ( var i=0, iLen=columns.length ; i<iLen ; i++ )                                                                  // 1020\n\t\t{                                                                                                                    // 1021\n\t\t\t// When working with a row, the data source object must be populated. In                                            // 1022\n\t\t\t// all other cases, the data source object is already populated, so we                                              // 1023\n\t\t\t// don't overwrite it, which might break bindings etc                                                               // 1024\n\t\t\tif ( nTr ) {                                                                                                        // 1025\n\t\t\t\t_fnSetCellData( oSettings, iRow, i, _fnGetCellData( oSettings, iRow, i ) );                                        // 1026\n\t\t\t}                                                                                                                   // 1027\n\t\t\tcolumns[i].sType = null;                                                                                            // 1028\n\t\t}                                                                                                                    // 1029\n\t                                                                                                                      // 1030\n\t\t/* Add to the display array */                                                                                       // 1031\n\t\toSettings.aiDisplayMaster.push( iRow );                                                                              // 1032\n\t                                                                                                                      // 1033\n\t\t/* Create the DOM information, or register it if already present */                                                  // 1034\n\t\tif ( nTr || ! oSettings.oFeatures.bDeferRender )                                                                     // 1035\n\t\t{                                                                                                                    // 1036\n\t\t\t_fnCreateTr( oSettings, iRow, nTr, anTds );                                                                         // 1037\n\t\t}                                                                                                                    // 1038\n\t                                                                                                                      // 1039\n\t\treturn iRow;                                                                                                         // 1040\n\t}                                                                                                                     // 1041\n\t                                                                                                                      // 1042\n\t                                                                                                                      // 1043\n\t/**                                                                                                                   // 1044\n\t * Add one or more TR elements to the table. Generally we'd expect to                                                 // 1045\n\t * use this for reading data from a DOM sourced table, but it could be                                                // 1046\n\t * used for an TR element. Note that if a TR is given, it is used (i.e.                                               // 1047\n\t * it is not cloned).                                                                                                 // 1048\n\t *  @param {object} settings dataTables settings object                                                               // 1049\n\t *  @param {array|node|jQuery} trs The TR element(s) to add to the table                                              // 1050\n\t *  @returns {array} Array of indexes for the added rows                                                              // 1051\n\t *  @memberof DataTable#oApi                                                                                          // 1052\n\t */                                                                                                                   // 1053\n\tfunction _fnAddTr( settings, trs )                                                                                    // 1054\n\t{                                                                                                                     // 1055\n\t\tvar row;                                                                                                             // 1056\n\t                                                                                                                      // 1057\n\t\t// Allow an individual node to be passed in                                                                          // 1058\n\t\tif ( ! (trs instanceof $) ) {                                                                                        // 1059\n\t\t\ttrs = $(trs);                                                                                                       // 1060\n\t\t}                                                                                                                    // 1061\n\t                                                                                                                      // 1062\n\t\treturn trs.map( function (i, el) {                                                                                   // 1063\n\t\t\trow = _fnGetRowElements( settings, el );                                                                            // 1064\n\t\t\treturn _fnAddData( settings, row.data, el, row.cells );                                                             // 1065\n\t\t} );                                                                                                                 // 1066\n\t}                                                                                                                     // 1067\n\t                                                                                                                      // 1068\n\t                                                                                                                      // 1069\n\t/**                                                                                                                   // 1070\n\t * Take a TR element and convert it to an index in aoData                                                             // 1071\n\t *  @param {object} oSettings dataTables settings object                                                              // 1072\n\t *  @param {node} n the TR element to find                                                                            // 1073\n\t *  @returns {int} index if the node is found, null if not                                                            // 1074\n\t *  @memberof DataTable#oApi                                                                                          // 1075\n\t */                                                                                                                   // 1076\n\tfunction _fnNodeToDataIndex( oSettings, n )                                                                           // 1077\n\t{                                                                                                                     // 1078\n\t\treturn (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;                                                         // 1079\n\t}                                                                                                                     // 1080\n\t                                                                                                                      // 1081\n\t                                                                                                                      // 1082\n\t/**                                                                                                                   // 1083\n\t * Take a TD element and convert it into a column data index (not the visible index)                                  // 1084\n\t *  @param {object} oSettings dataTables settings object                                                              // 1085\n\t *  @param {int} iRow The row number the TD/TH can be found in                                                        // 1086\n\t *  @param {node} n The TD/TH element to find                                                                         // 1087\n\t *  @returns {int} index if the node is found, -1 if not                                                              // 1088\n\t *  @memberof DataTable#oApi                                                                                          // 1089\n\t */                                                                                                                   // 1090\n\tfunction _fnNodeToColumnIndex( oSettings, iRow, n )                                                                   // 1091\n\t{                                                                                                                     // 1092\n\t\treturn $.inArray( n, oSettings.aoData[ iRow ].anCells );                                                             // 1093\n\t}                                                                                                                     // 1094\n\t                                                                                                                      // 1095\n\t                                                                                                                      // 1096\n\t/**                                                                                                                   // 1097\n\t * Get the data for a given cell from the internal cache, taking into account data mapping                            // 1098\n\t *  @param {object} settings dataTables settings object                                                               // 1099\n\t *  @param {int} rowIdx aoData row id                                                                                 // 1100\n\t *  @param {int} colIdx Column index                                                                                  // 1101\n\t *  @param {string} type data get type ('display', 'type' 'filter' 'sort')                                            // 1102\n\t *  @returns {*} Cell data                                                                                            // 1103\n\t *  @memberof DataTable#oApi                                                                                          // 1104\n\t */                                                                                                                   // 1105\n\tfunction _fnGetCellData( settings, rowIdx, colIdx, type )                                                             // 1106\n\t{                                                                                                                     // 1107\n\t\tvar draw           = settings.iDraw;                                                                                 // 1108\n\t\tvar col            = settings.aoColumns[colIdx];                                                                     // 1109\n\t\tvar rowData        = settings.aoData[rowIdx]._aData;                                                                 // 1110\n\t\tvar defaultContent = col.sDefaultContent;                                                                            // 1111\n\t\tvar cellData       = col.fnGetData( rowData, type, {                                                                 // 1112\n\t\t\tsettings: settings,                                                                                                 // 1113\n\t\t\trow:      rowIdx,                                                                                                   // 1114\n\t\t\tcol:      colIdx                                                                                                    // 1115\n\t\t} );                                                                                                                 // 1116\n\t                                                                                                                      // 1117\n\t\tif ( cellData === undefined ) {                                                                                      // 1118\n\t\t\tif ( settings.iDrawError != draw && defaultContent === null ) {                                                     // 1119\n\t\t\t\t_fnLog( settings, 0, \"Requested unknown parameter \"+                                                               // 1120\n\t\t\t\t\t(typeof col.mData=='function' ? '{function}' : \"'\"+col.mData+\"'\")+                                                // 1121\n\t\t\t\t\t\" for row \"+rowIdx, 4 );                                                                                          // 1122\n\t\t\t\tsettings.iDrawError = draw;                                                                                        // 1123\n\t\t\t}                                                                                                                   // 1124\n\t\t\treturn defaultContent;                                                                                              // 1125\n\t\t}                                                                                                                    // 1126\n\t                                                                                                                      // 1127\n\t\t/* When the data source is null, we can use default column data */                                                   // 1128\n\t\tif ( (cellData === rowData || cellData === null) && defaultContent !== null ) {                                      // 1129\n\t\t\tcellData = defaultContent;                                                                                          // 1130\n\t\t}                                                                                                                    // 1131\n\t\telse if ( typeof cellData === 'function' ) {                                                                         // 1132\n\t\t\t// If the data source is a function, then we run it and use the return,                                             // 1133\n\t\t\t// executing in the scope of the data object (for instances)                                                        // 1134\n\t\t\treturn cellData.call( rowData );                                                                                    // 1135\n\t\t}                                                                                                                    // 1136\n\t                                                                                                                      // 1137\n\t\tif ( cellData === null && type == 'display' ) {                                                                      // 1138\n\t\t\treturn '';                                                                                                          // 1139\n\t\t}                                                                                                                    // 1140\n\t\treturn cellData;                                                                                                     // 1141\n\t}                                                                                                                     // 1142\n\t                                                                                                                      // 1143\n\t                                                                                                                      // 1144\n\t/**                                                                                                                   // 1145\n\t * Set the value for a specific cell, into the internal data cache                                                    // 1146\n\t *  @param {object} settings dataTables settings object                                                               // 1147\n\t *  @param {int} rowIdx aoData row id                                                                                 // 1148\n\t *  @param {int} colIdx Column index                                                                                  // 1149\n\t *  @param {*} val Value to set                                                                                       // 1150\n\t *  @memberof DataTable#oApi                                                                                          // 1151\n\t */                                                                                                                   // 1152\n\tfunction _fnSetCellData( settings, rowIdx, colIdx, val )                                                              // 1153\n\t{                                                                                                                     // 1154\n\t\tvar col     = settings.aoColumns[colIdx];                                                                            // 1155\n\t\tvar rowData = settings.aoData[rowIdx]._aData;                                                                        // 1156\n\t                                                                                                                      // 1157\n\t\tcol.fnSetData( rowData, val, {                                                                                       // 1158\n\t\t\tsettings: settings,                                                                                                 // 1159\n\t\t\trow:      rowIdx,                                                                                                   // 1160\n\t\t\tcol:      colIdx                                                                                                    // 1161\n\t\t}  );                                                                                                                // 1162\n\t}                                                                                                                     // 1163\n\t                                                                                                                      // 1164\n\t                                                                                                                      // 1165\n\t// Private variable that is used to match action syntax in the data property object                                   // 1166\n\tvar __reArray = /\\[.*?\\]$/;                                                                                           // 1167\n\tvar __reFn = /\\(\\)$/;                                                                                                 // 1168\n\t                                                                                                                      // 1169\n\t/**                                                                                                                   // 1170\n\t * Split string on periods, taking into account escaped periods                                                       // 1171\n\t * @param  {string} str String to split                                                                               // 1172\n\t * @return {array} Split string                                                                                       // 1173\n\t */                                                                                                                   // 1174\n\tfunction _fnSplitObjNotation( str )                                                                                   // 1175\n\t{                                                                                                                     // 1176\n\t\treturn $.map( str.match(/(\\\\.|[^\\.])+/g), function ( s ) {                                                           // 1177\n\t\t\treturn s.replace(/\\\\./g, '.');                                                                                      // 1178\n\t\t} );                                                                                                                 // 1179\n\t}                                                                                                                     // 1180\n\t                                                                                                                      // 1181\n\t                                                                                                                      // 1182\n\t/**                                                                                                                   // 1183\n\t * Return a function that can be used to get data from a source object, taking                                        // 1184\n\t * into account the ability to use nested objects as a source                                                         // 1185\n\t *  @param {string|int|function} mSource The data source for the object                                               // 1186\n\t *  @returns {function} Data get function                                                                             // 1187\n\t *  @memberof DataTable#oApi                                                                                          // 1188\n\t */                                                                                                                   // 1189\n\tfunction _fnGetObjectDataFn( mSource )                                                                                // 1190\n\t{                                                                                                                     // 1191\n\t\tif ( $.isPlainObject( mSource ) )                                                                                    // 1192\n\t\t{                                                                                                                    // 1193\n\t\t\t/* Build an object of get functions, and wrap them in a single call */                                              // 1194\n\t\t\tvar o = {};                                                                                                         // 1195\n\t\t\t$.each( mSource, function (key, val) {                                                                              // 1196\n\t\t\t\tif ( val ) {                                                                                                       // 1197\n\t\t\t\t\to[key] = _fnGetObjectDataFn( val );                                                                               // 1198\n\t\t\t\t}                                                                                                                  // 1199\n\t\t\t} );                                                                                                                // 1200\n\t                                                                                                                      // 1201\n\t\t\treturn function (data, type, row, meta) {                                                                           // 1202\n\t\t\t\tvar t = o[type] || o._;                                                                                            // 1203\n\t\t\t\treturn t !== undefined ?                                                                                           // 1204\n\t\t\t\t\tt(data, type, row, meta) :                                                                                        // 1205\n\t\t\t\t\tdata;                                                                                                             // 1206\n\t\t\t};                                                                                                                  // 1207\n\t\t}                                                                                                                    // 1208\n\t\telse if ( mSource === null )                                                                                         // 1209\n\t\t{                                                                                                                    // 1210\n\t\t\t/* Give an empty string for rendering / sorting etc */                                                              // 1211\n\t\t\treturn function (data) { // type, row and meta also passed, but not used                                            // 1212\n\t\t\t\treturn data;                                                                                                       // 1213\n\t\t\t};                                                                                                                  // 1214\n\t\t}                                                                                                                    // 1215\n\t\telse if ( typeof mSource === 'function' )                                                                            // 1216\n\t\t{                                                                                                                    // 1217\n\t\t\treturn function (data, type, row, meta) {                                                                           // 1218\n\t\t\t\treturn mSource( data, type, row, meta );                                                                           // 1219\n\t\t\t};                                                                                                                  // 1220\n\t\t}                                                                                                                    // 1221\n\t\telse if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||                                             // 1222\n\t\t\t      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )                                                 // 1223\n\t\t{                                                                                                                    // 1224\n\t\t\t/* If there is a . in the source string then the data source is in a                                                // 1225\n\t\t\t * nested object so we loop over the data for each level to get the next                                            // 1226\n\t\t\t * level down. On each loop we test for undefined, and if found immediately                                         // 1227\n\t\t\t * return. This allows entire objects to be missing and sDefaultContent to                                          // 1228\n\t\t\t * be used if defined, rather than throwing an error                                                                // 1229\n\t\t\t */                                                                                                                 // 1230\n\t\t\tvar fetchData = function (data, type, src) {                                                                        // 1231\n\t\t\t\tvar arrayNotation, funcNotation, out, innerSrc;                                                                    // 1232\n\t                                                                                                                      // 1233\n\t\t\t\tif ( src !== \"\" )                                                                                                  // 1234\n\t\t\t\t{                                                                                                                  // 1235\n\t\t\t\t\tvar a = _fnSplitObjNotation( src );                                                                               // 1236\n\t                                                                                                                      // 1237\n\t\t\t\t\tfor ( var i=0, iLen=a.length ; i<iLen ; i++ )                                                                     // 1238\n\t\t\t\t\t{                                                                                                                 // 1239\n\t\t\t\t\t\t// Check if we are dealing with special notation                                                                 // 1240\n\t\t\t\t\t\tarrayNotation = a[i].match(__reArray);                                                                           // 1241\n\t\t\t\t\t\tfuncNotation = a[i].match(__reFn);                                                                               // 1242\n\t                                                                                                                      // 1243\n\t\t\t\t\t\tif ( arrayNotation )                                                                                             // 1244\n\t\t\t\t\t\t{                                                                                                                // 1245\n\t\t\t\t\t\t\t// Array notation                                                                                               // 1246\n\t\t\t\t\t\t\ta[i] = a[i].replace(__reArray, '');                                                                             // 1247\n\t                                                                                                                      // 1248\n\t\t\t\t\t\t\t// Condition allows simply [] to be passed in                                                                   // 1249\n\t\t\t\t\t\t\tif ( a[i] !== \"\" ) {                                                                                            // 1250\n\t\t\t\t\t\t\t\tdata = data[ a[i] ];                                                                                           // 1251\n\t\t\t\t\t\t\t}                                                                                                               // 1252\n\t\t\t\t\t\t\tout = [];                                                                                                       // 1253\n\t                                                                                                                      // 1254\n\t\t\t\t\t\t\t// Get the remainder of the nested object to get                                                                // 1255\n\t\t\t\t\t\t\ta.splice( 0, i+1 );                                                                                             // 1256\n\t\t\t\t\t\t\tinnerSrc = a.join('.');                                                                                         // 1257\n\t                                                                                                                      // 1258\n\t\t\t\t\t\t\t// Traverse each entry in the array getting the properties requested                                            // 1259\n\t\t\t\t\t\t\tfor ( var j=0, jLen=data.length ; j<jLen ; j++ ) {                                                              // 1260\n\t\t\t\t\t\t\t\tout.push( fetchData( data[j], type, innerSrc ) );                                                              // 1261\n\t\t\t\t\t\t\t}                                                                                                               // 1262\n\t                                                                                                                      // 1263\n\t\t\t\t\t\t\t// If a string is given in between the array notation indicators, that                                          // 1264\n\t\t\t\t\t\t\t// is used to join the strings together, otherwise an array is returned                                         // 1265\n\t\t\t\t\t\t\tvar join = arrayNotation[0].substring(1, arrayNotation[0].length-1);                                            // 1266\n\t\t\t\t\t\t\tdata = (join===\"\") ? out : out.join(join);                                                                      // 1267\n\t                                                                                                                      // 1268\n\t\t\t\t\t\t\t// The inner call to fetchData has already traversed through the remainder                                      // 1269\n\t\t\t\t\t\t\t// of the source requested, so we exit from the loop                                                            // 1270\n\t\t\t\t\t\t\tbreak;                                                                                                          // 1271\n\t\t\t\t\t\t}                                                                                                                // 1272\n\t\t\t\t\t\telse if ( funcNotation )                                                                                         // 1273\n\t\t\t\t\t\t{                                                                                                                // 1274\n\t\t\t\t\t\t\t// Function call                                                                                                // 1275\n\t\t\t\t\t\t\ta[i] = a[i].replace(__reFn, '');                                                                                // 1276\n\t\t\t\t\t\t\tdata = data[ a[i] ]();                                                                                          // 1277\n\t\t\t\t\t\t\tcontinue;                                                                                                       // 1278\n\t\t\t\t\t\t}                                                                                                                // 1279\n\t                                                                                                                      // 1280\n\t\t\t\t\t\tif ( data === null || data[ a[i] ] === undefined )                                                               // 1281\n\t\t\t\t\t\t{                                                                                                                // 1282\n\t\t\t\t\t\t\treturn undefined;                                                                                               // 1283\n\t\t\t\t\t\t}                                                                                                                // 1284\n\t\t\t\t\t\tdata = data[ a[i] ];                                                                                             // 1285\n\t\t\t\t\t}                                                                                                                 // 1286\n\t\t\t\t}                                                                                                                  // 1287\n\t                                                                                                                      // 1288\n\t\t\t\treturn data;                                                                                                       // 1289\n\t\t\t};                                                                                                                  // 1290\n\t                                                                                                                      // 1291\n\t\t\treturn function (data, type) { // row and meta also passed, but not used                                            // 1292\n\t\t\t\treturn fetchData( data, type, mSource );                                                                           // 1293\n\t\t\t};                                                                                                                  // 1294\n\t\t}                                                                                                                    // 1295\n\t\telse                                                                                                                 // 1296\n\t\t{                                                                                                                    // 1297\n\t\t\t/* Array or flat object mapping */                                                                                  // 1298\n\t\t\treturn function (data, type) { // row and meta also passed, but not used                                            // 1299\n\t\t\t\treturn data[mSource];                                                                                              // 1300\n\t\t\t};                                                                                                                  // 1301\n\t\t}                                                                                                                    // 1302\n\t}                                                                                                                     // 1303\n\t                                                                                                                      // 1304\n\t                                                                                                                      // 1305\n\t/**                                                                                                                   // 1306\n\t * Return a function that can be used to set data from a source object, taking                                        // 1307\n\t * into account the ability to use nested objects as a source                                                         // 1308\n\t *  @param {string|int|function} mSource The data source for the object                                               // 1309\n\t *  @returns {function} Data set function                                                                             // 1310\n\t *  @memberof DataTable#oApi                                                                                          // 1311\n\t */                                                                                                                   // 1312\n\tfunction _fnSetObjectDataFn( mSource )                                                                                // 1313\n\t{                                                                                                                     // 1314\n\t\tif ( $.isPlainObject( mSource ) )                                                                                    // 1315\n\t\t{                                                                                                                    // 1316\n\t\t\t/* Unlike get, only the underscore (global) option is used for for                                                  // 1317\n\t\t\t * setting data since we don't know the type here. This is why an object                                            // 1318\n\t\t\t * option is not documented for `mData` (which is read/write), but it is                                            // 1319\n\t\t\t * for `mRender` which is read only.                                                                                // 1320\n\t\t\t */                                                                                                                 // 1321\n\t\t\treturn _fnSetObjectDataFn( mSource._ );                                                                             // 1322\n\t\t}                                                                                                                    // 1323\n\t\telse if ( mSource === null )                                                                                         // 1324\n\t\t{                                                                                                                    // 1325\n\t\t\t/* Nothing to do when the data source is null */                                                                    // 1326\n\t\t\treturn function () {};                                                                                              // 1327\n\t\t}                                                                                                                    // 1328\n\t\telse if ( typeof mSource === 'function' )                                                                            // 1329\n\t\t{                                                                                                                    // 1330\n\t\t\treturn function (data, val, meta) {                                                                                 // 1331\n\t\t\t\tmSource( data, 'set', val, meta );                                                                                 // 1332\n\t\t\t};                                                                                                                  // 1333\n\t\t}                                                                                                                    // 1334\n\t\telse if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||                                             // 1335\n\t\t\t      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )                                                 // 1336\n\t\t{                                                                                                                    // 1337\n\t\t\t/* Like the get, we need to get data from a nested object */                                                        // 1338\n\t\t\tvar setData = function (data, val, src) {                                                                           // 1339\n\t\t\t\tvar a = _fnSplitObjNotation( src ), b;                                                                             // 1340\n\t\t\t\tvar aLast = a[a.length-1];                                                                                         // 1341\n\t\t\t\tvar arrayNotation, funcNotation, o, innerSrc;                                                                      // 1342\n\t                                                                                                                      // 1343\n\t\t\t\tfor ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )                                                                    // 1344\n\t\t\t\t{                                                                                                                  // 1345\n\t\t\t\t\t// Check if we are dealing with an array notation request                                                         // 1346\n\t\t\t\t\tarrayNotation = a[i].match(__reArray);                                                                            // 1347\n\t\t\t\t\tfuncNotation = a[i].match(__reFn);                                                                                // 1348\n\t                                                                                                                      // 1349\n\t\t\t\t\tif ( arrayNotation )                                                                                              // 1350\n\t\t\t\t\t{                                                                                                                 // 1351\n\t\t\t\t\t\ta[i] = a[i].replace(__reArray, '');                                                                              // 1352\n\t\t\t\t\t\tdata[ a[i] ] = [];                                                                                               // 1353\n\t                                                                                                                      // 1354\n\t\t\t\t\t\t// Get the remainder of the nested object to set so we can recurse                                               // 1355\n\t\t\t\t\t\tb = a.slice();                                                                                                   // 1356\n\t\t\t\t\t\tb.splice( 0, i+1 );                                                                                              // 1357\n\t\t\t\t\t\tinnerSrc = b.join('.');                                                                                          // 1358\n\t                                                                                                                      // 1359\n\t\t\t\t\t\t// Traverse each entry in the array setting the properties requested                                             // 1360\n\t\t\t\t\t\tfor ( var j=0, jLen=val.length ; j<jLen ; j++ )                                                                  // 1361\n\t\t\t\t\t\t{                                                                                                                // 1362\n\t\t\t\t\t\t\to = {};                                                                                                         // 1363\n\t\t\t\t\t\t\tsetData( o, val[j], innerSrc );                                                                                 // 1364\n\t\t\t\t\t\t\tdata[ a[i] ].push( o );                                                                                         // 1365\n\t\t\t\t\t\t}                                                                                                                // 1366\n\t                                                                                                                      // 1367\n\t\t\t\t\t\t// The inner call to setData has already traversed through the remainder                                         // 1368\n\t\t\t\t\t\t// of the source and has set the data, thus we can exit here                                                     // 1369\n\t\t\t\t\t\treturn;                                                                                                          // 1370\n\t\t\t\t\t}                                                                                                                 // 1371\n\t\t\t\t\telse if ( funcNotation )                                                                                          // 1372\n\t\t\t\t\t{                                                                                                                 // 1373\n\t\t\t\t\t\t// Function call                                                                                                 // 1374\n\t\t\t\t\t\ta[i] = a[i].replace(__reFn, '');                                                                                 // 1375\n\t\t\t\t\t\tdata = data[ a[i] ]( val );                                                                                      // 1376\n\t\t\t\t\t}                                                                                                                 // 1377\n\t                                                                                                                      // 1378\n\t\t\t\t\t// If the nested object doesn't currently exist - since we are                                                    // 1379\n\t\t\t\t\t// trying to set the value - create it                                                                            // 1380\n\t\t\t\t\tif ( data[ a[i] ] === null || data[ a[i] ] === undefined )                                                        // 1381\n\t\t\t\t\t{                                                                                                                 // 1382\n\t\t\t\t\t\tdata[ a[i] ] = {};                                                                                               // 1383\n\t\t\t\t\t}                                                                                                                 // 1384\n\t\t\t\t\tdata = data[ a[i] ];                                                                                              // 1385\n\t\t\t\t}                                                                                                                  // 1386\n\t                                                                                                                      // 1387\n\t\t\t\t// Last item in the input - i.e, the actual set                                                                    // 1388\n\t\t\t\tif ( aLast.match(__reFn ) )                                                                                        // 1389\n\t\t\t\t{                                                                                                                  // 1390\n\t\t\t\t\t// Function call                                                                                                  // 1391\n\t\t\t\t\tdata = data[ aLast.replace(__reFn, '') ]( val );                                                                  // 1392\n\t\t\t\t}                                                                                                                  // 1393\n\t\t\t\telse                                                                                                               // 1394\n\t\t\t\t{                                                                                                                  // 1395\n\t\t\t\t\t// If array notation is used, we just want to strip it and use the property name                                  // 1396\n\t\t\t\t\t// and assign the value. If it isn't used, then we get the result we want anyway                                  // 1397\n\t\t\t\t\tdata[ aLast.replace(__reArray, '') ] = val;                                                                       // 1398\n\t\t\t\t}                                                                                                                  // 1399\n\t\t\t};                                                                                                                  // 1400\n\t                                                                                                                      // 1401\n\t\t\treturn function (data, val) { // meta is also passed in, but not used                                               // 1402\n\t\t\t\treturn setData( data, val, mSource );                                                                              // 1403\n\t\t\t};                                                                                                                  // 1404\n\t\t}                                                                                                                    // 1405\n\t\telse                                                                                                                 // 1406\n\t\t{                                                                                                                    // 1407\n\t\t\t/* Array or flat object mapping */                                                                                  // 1408\n\t\t\treturn function (data, val) { // meta is also passed in, but not used                                               // 1409\n\t\t\t\tdata[mSource] = val;                                                                                               // 1410\n\t\t\t};                                                                                                                  // 1411\n\t\t}                                                                                                                    // 1412\n\t}                                                                                                                     // 1413\n\t                                                                                                                      // 1414\n\t                                                                                                                      // 1415\n\t/**                                                                                                                   // 1416\n\t * Return an array with the full table data                                                                           // 1417\n\t *  @param {object} oSettings dataTables settings object                                                              // 1418\n\t *  @returns array {array} aData Master data array                                                                    // 1419\n\t *  @memberof DataTable#oApi                                                                                          // 1420\n\t */                                                                                                                   // 1421\n\tfunction _fnGetDataMaster ( settings )                                                                                // 1422\n\t{                                                                                                                     // 1423\n\t\treturn _pluck( settings.aoData, '_aData' );                                                                          // 1424\n\t}                                                                                                                     // 1425\n\t                                                                                                                      // 1426\n\t                                                                                                                      // 1427\n\t/**                                                                                                                   // 1428\n\t * Nuke the table                                                                                                     // 1429\n\t *  @param {object} oSettings dataTables settings object                                                              // 1430\n\t *  @memberof DataTable#oApi                                                                                          // 1431\n\t */                                                                                                                   // 1432\n\tfunction _fnClearTable( settings )                                                                                    // 1433\n\t{                                                                                                                     // 1434\n\t\tsettings.aoData.length = 0;                                                                                          // 1435\n\t\tsettings.aiDisplayMaster.length = 0;                                                                                 // 1436\n\t\tsettings.aiDisplay.length = 0;                                                                                       // 1437\n\t}                                                                                                                     // 1438\n\t                                                                                                                      // 1439\n\t                                                                                                                      // 1440\n\t /**                                                                                                                  // 1441\n\t * Take an array of integers (index array) and remove a target integer (value - not                                   // 1442\n\t * the key!)                                                                                                          // 1443\n\t *  @param {array} a Index array to target                                                                            // 1444\n\t *  @param {int} iTarget value to find                                                                                // 1445\n\t *  @memberof DataTable#oApi                                                                                          // 1446\n\t */                                                                                                                   // 1447\n\tfunction _fnDeleteIndex( a, iTarget, splice )                                                                         // 1448\n\t{                                                                                                                     // 1449\n\t\tvar iTargetIndex = -1;                                                                                               // 1450\n\t                                                                                                                      // 1451\n\t\tfor ( var i=0, iLen=a.length ; i<iLen ; i++ )                                                                        // 1452\n\t\t{                                                                                                                    // 1453\n\t\t\tif ( a[i] == iTarget )                                                                                              // 1454\n\t\t\t{                                                                                                                   // 1455\n\t\t\t\tiTargetIndex = i;                                                                                                  // 1456\n\t\t\t}                                                                                                                   // 1457\n\t\t\telse if ( a[i] > iTarget )                                                                                          // 1458\n\t\t\t{                                                                                                                   // 1459\n\t\t\t\ta[i]--;                                                                                                            // 1460\n\t\t\t}                                                                                                                   // 1461\n\t\t}                                                                                                                    // 1462\n\t                                                                                                                      // 1463\n\t\tif ( iTargetIndex != -1 && splice === undefined )                                                                    // 1464\n\t\t{                                                                                                                    // 1465\n\t\t\ta.splice( iTargetIndex, 1 );                                                                                        // 1466\n\t\t}                                                                                                                    // 1467\n\t}                                                                                                                     // 1468\n\t                                                                                                                      // 1469\n\t                                                                                                                      // 1470\n\t/**                                                                                                                   // 1471\n\t * Mark cached data as invalid such that a re-read of the data will occur when                                        // 1472\n\t * the cached data is next requested. Also update from the data source object.                                        // 1473\n\t *                                                                                                                    // 1474\n\t * @param {object} settings DataTables settings object                                                                // 1475\n\t * @param {int}    rowIdx   Row index to invalidate                                                                   // 1476\n\t * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'                                       // 1477\n\t *     or 'data'                                                                                                      // 1478\n\t * @param {int}    [colIdx] Column index to invalidate. If undefined the whole                                        // 1479\n\t *     row will be invalidated                                                                                        // 1480\n\t * @memberof DataTable#oApi                                                                                           // 1481\n\t *                                                                                                                    // 1482\n\t * @todo For the modularisation of v1.11 this will need to become a callback, so                                      // 1483\n\t *   the sort and filter methods can subscribe to it. That will required                                              // 1484\n\t *   initialisation options for sorting, which is why it is not already baked in                                      // 1485\n\t */                                                                                                                   // 1486\n\tfunction _fnInvalidate( settings, rowIdx, src, colIdx )                                                               // 1487\n\t{                                                                                                                     // 1488\n\t\tvar row = settings.aoData[ rowIdx ];                                                                                 // 1489\n\t\tvar i, ien;                                                                                                          // 1490\n\t\tvar cellWrite = function ( cell, col ) {                                                                             // 1491\n\t\t\t// This is very frustrating, but in IE if you just write directly                                                   // 1492\n\t\t\t// to innerHTML, and elements that are overwritten are GC'ed,                                                       // 1493\n\t\t\t// even if there is a reference to them elsewhere                                                                   // 1494\n\t\t\twhile ( cell.childNodes.length ) {                                                                                  // 1495\n\t\t\t\tcell.removeChild( cell.firstChild );                                                                               // 1496\n\t\t\t}                                                                                                                   // 1497\n\t                                                                                                                      // 1498\n\t\t\tcell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );                                                // 1499\n\t\t};                                                                                                                   // 1500\n\t                                                                                                                      // 1501\n\t\t// Are we reading last data from DOM or the data object?                                                             // 1502\n\t\tif ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {                                           // 1503\n\t\t\t// Read the data from the DOM                                                                                       // 1504\n\t\t\trow._aData = _fnGetRowElements(                                                                                     // 1505\n\t\t\t\t\tsettings, row, colIdx, colIdx === undefined ? undefined : row._aData                                              // 1506\n\t\t\t\t)                                                                                                                  // 1507\n\t\t\t\t.data;                                                                                                             // 1508\n\t\t}                                                                                                                    // 1509\n\t\telse {                                                                                                               // 1510\n\t\t\t// Reading from data object, update the DOM                                                                         // 1511\n\t\t\tvar cells = row.anCells;                                                                                            // 1512\n\t                                                                                                                      // 1513\n\t\t\tif ( cells ) {                                                                                                      // 1514\n\t\t\t\tif ( colIdx !== undefined ) {                                                                                      // 1515\n\t\t\t\t\tcellWrite( cells[colIdx], colIdx );                                                                               // 1516\n\t\t\t\t}                                                                                                                  // 1517\n\t\t\t\telse {                                                                                                             // 1518\n\t\t\t\t\tfor ( i=0, ien=cells.length ; i<ien ; i++ ) {                                                                     // 1519\n\t\t\t\t\t\tcellWrite( cells[i], i );                                                                                        // 1520\n\t\t\t\t\t}                                                                                                                 // 1521\n\t\t\t\t}                                                                                                                  // 1522\n\t\t\t}                                                                                                                   // 1523\n\t\t}                                                                                                                    // 1524\n\t                                                                                                                      // 1525\n\t\t// For both row and cell invalidation, the cached data for sorting and                                               // 1526\n\t\t// filtering is nulled out                                                                                           // 1527\n\t\trow._aSortData = null;                                                                                               // 1528\n\t\trow._aFilterData = null;                                                                                             // 1529\n\t                                                                                                                      // 1530\n\t\t// Invalidate the type for a specific column (if given) or all columns since                                         // 1531\n\t\t// the data might have changed                                                                                       // 1532\n\t\tvar cols = settings.aoColumns;                                                                                       // 1533\n\t\tif ( colIdx !== undefined ) {                                                                                        // 1534\n\t\t\tcols[ colIdx ].sType = null;                                                                                        // 1535\n\t\t}                                                                                                                    // 1536\n\t\telse {                                                                                                               // 1537\n\t\t\tfor ( i=0, ien=cols.length ; i<ien ; i++ ) {                                                                        // 1538\n\t\t\t\tcols[i].sType = null;                                                                                              // 1539\n\t\t\t}                                                                                                                   // 1540\n\t                                                                                                                      // 1541\n\t\t\t// Update DataTables special `DT_*` attributes for the row                                                          // 1542\n\t\t\t_fnRowAttributes( row );                                                                                            // 1543\n\t\t}                                                                                                                    // 1544\n\t}                                                                                                                     // 1545\n\t                                                                                                                      // 1546\n\t                                                                                                                      // 1547\n\t/**                                                                                                                   // 1548\n\t * Build a data source object from an HTML row, reading the contents of the                                           // 1549\n\t * cells that are in the row.                                                                                         // 1550\n\t *                                                                                                                    // 1551\n\t * @param {object} settings DataTables settings object                                                                // 1552\n\t * @param {node|object} TR element from which to read data or existing row                                            // 1553\n\t *   object from which to re-read the data from the cells                                                             // 1554\n\t * @param {int} [colIdx] Optional column index                                                                        // 1555\n\t * @param {array|object} [d] Data source object. If `colIdx` is given then this                                       // 1556\n\t *   parameter should also be given and will be used to write the data into.                                          // 1557\n\t *   Only the column in question will be written                                                                      // 1558\n\t * @returns {object} Object with two parameters: `data` the data read, in                                             // 1559\n\t *   document order, and `cells` and array of nodes (they can be useful to the                                        // 1560\n\t *   caller, so rather than needing a second traversal to get them, just return                                       // 1561\n\t *   them from here).                                                                                                 // 1562\n\t * @memberof DataTable#oApi                                                                                           // 1563\n\t */                                                                                                                   // 1564\n\tfunction _fnGetRowElements( settings, row, colIdx, d )                                                                // 1565\n\t{                                                                                                                     // 1566\n\t\tvar                                                                                                                  // 1567\n\t\t\ttds = [],                                                                                                           // 1568\n\t\t\ttd = row.firstChild,                                                                                                // 1569\n\t\t\tname, col, o, i=0, contents,                                                                                        // 1570\n\t\t\tcolumns = settings.aoColumns,                                                                                       // 1571\n\t\t\tobjectRead = settings._rowReadObject;                                                                               // 1572\n\t                                                                                                                      // 1573\n\t\t// Allow the data object to be passed in, or construct                                                               // 1574\n\t\td = d || objectRead ? {} : [];                                                                                       // 1575\n\t                                                                                                                      // 1576\n\t\tvar attr = function ( str, td  ) {                                                                                   // 1577\n\t\t\tif ( typeof str === 'string' ) {                                                                                    // 1578\n\t\t\t\tvar idx = str.indexOf('@');                                                                                        // 1579\n\t                                                                                                                      // 1580\n\t\t\t\tif ( idx !== -1 ) {                                                                                                // 1581\n\t\t\t\t\tvar attr = str.substring( idx+1 );                                                                                // 1582\n\t\t\t\t\tvar setter = _fnSetObjectDataFn( str );                                                                           // 1583\n\t\t\t\t\tsetter( d, td.getAttribute( attr ) );                                                                             // 1584\n\t\t\t\t}                                                                                                                  // 1585\n\t\t\t}                                                                                                                   // 1586\n\t\t};                                                                                                                   // 1587\n\t                                                                                                                      // 1588\n\t\t// Read data from a cell and store into the data object                                                              // 1589\n\t\tvar cellProcess = function ( cell ) {                                                                                // 1590\n\t\t\tif ( colIdx === undefined || colIdx === i ) {                                                                       // 1591\n\t\t\t\tcol = columns[i];                                                                                                  // 1592\n\t\t\t\tcontents = $.trim(cell.innerHTML);                                                                                 // 1593\n\t                                                                                                                      // 1594\n\t\t\t\tif ( col && col._bAttrSrc ) {                                                                                      // 1595\n\t\t\t\t\tvar setter = _fnSetObjectDataFn( col.mData._ );                                                                   // 1596\n\t\t\t\t\tsetter( d, contents );                                                                                            // 1597\n\t                                                                                                                      // 1598\n\t\t\t\t\tattr( col.mData.sort, cell );                                                                                     // 1599\n\t\t\t\t\tattr( col.mData.type, cell );                                                                                     // 1600\n\t\t\t\t\tattr( col.mData.filter, cell );                                                                                   // 1601\n\t\t\t\t}                                                                                                                  // 1602\n\t\t\t\telse {                                                                                                             // 1603\n\t\t\t\t\t// Depending on the `data` option for the columns the data can                                                    // 1604\n\t\t\t\t\t// be read to either an object or an array.                                                                       // 1605\n\t\t\t\t\tif ( objectRead ) {                                                                                               // 1606\n\t\t\t\t\t\tif ( ! col._setter ) {                                                                                           // 1607\n\t\t\t\t\t\t\t// Cache the setter function                                                                                    // 1608\n\t\t\t\t\t\t\tcol._setter = _fnSetObjectDataFn( col.mData );                                                                  // 1609\n\t\t\t\t\t\t}                                                                                                                // 1610\n\t\t\t\t\t\tcol._setter( d, contents );                                                                                      // 1611\n\t\t\t\t\t}                                                                                                                 // 1612\n\t\t\t\t\telse {                                                                                                            // 1613\n\t\t\t\t\t\td[i] = contents;                                                                                                 // 1614\n\t\t\t\t\t}                                                                                                                 // 1615\n\t\t\t\t}                                                                                                                  // 1616\n\t\t\t}                                                                                                                   // 1617\n\t                                                                                                                      // 1618\n\t\t\ti++;                                                                                                                // 1619\n\t\t};                                                                                                                   // 1620\n\t                                                                                                                      // 1621\n\t\tif ( td ) {                                                                                                          // 1622\n\t\t\t// `tr` element was passed in                                                                                       // 1623\n\t\t\twhile ( td ) {                                                                                                      // 1624\n\t\t\t\tname = td.nodeName.toUpperCase();                                                                                  // 1625\n\t                                                                                                                      // 1626\n\t\t\t\tif ( name == \"TD\" || name == \"TH\" ) {                                                                              // 1627\n\t\t\t\t\tcellProcess( td );                                                                                                // 1628\n\t\t\t\t\ttds.push( td );                                                                                                   // 1629\n\t\t\t\t}                                                                                                                  // 1630\n\t                                                                                                                      // 1631\n\t\t\t\ttd = td.nextSibling;                                                                                               // 1632\n\t\t\t}                                                                                                                   // 1633\n\t\t}                                                                                                                    // 1634\n\t\telse {                                                                                                               // 1635\n\t\t\t// Existing row object passed in                                                                                    // 1636\n\t\t\ttds = row.anCells;                                                                                                  // 1637\n\t\t\t                                                                                                                    // 1638\n\t\t\tfor ( var j=0, jen=tds.length ; j<jen ; j++ ) {                                                                     // 1639\n\t\t\t\tcellProcess( tds[j] );                                                                                             // 1640\n\t\t\t}                                                                                                                   // 1641\n\t\t}                                                                                                                    // 1642\n\t                                                                                                                      // 1643\n\t\treturn {                                                                                                             // 1644\n\t\t\tdata: d,                                                                                                            // 1645\n\t\t\tcells: tds                                                                                                          // 1646\n\t\t};                                                                                                                   // 1647\n\t}                                                                                                                     // 1648\n\t/**                                                                                                                   // 1649\n\t * Create a new TR element (and it's TD children) for a row                                                           // 1650\n\t *  @param {object} oSettings dataTables settings object                                                              // 1651\n\t *  @param {int} iRow Row to consider                                                                                 // 1652\n\t *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,                                    // 1653\n\t *    DataTables will create a row automatically                                                                      // 1654\n\t *  @param {array} [anTds] Array of TD|TH elements for the row - must be given                                        // 1655\n\t *    if nTr is.                                                                                                      // 1656\n\t *  @memberof DataTable#oApi                                                                                          // 1657\n\t */                                                                                                                   // 1658\n\tfunction _fnCreateTr ( oSettings, iRow, nTrIn, anTds )                                                                // 1659\n\t{                                                                                                                     // 1660\n\t\tvar                                                                                                                  // 1661\n\t\t\trow = oSettings.aoData[iRow],                                                                                       // 1662\n\t\t\trowData = row._aData,                                                                                               // 1663\n\t\t\tcells = [],                                                                                                         // 1664\n\t\t\tnTr, nTd, oCol,                                                                                                     // 1665\n\t\t\ti, iLen;                                                                                                            // 1666\n\t                                                                                                                      // 1667\n\t\tif ( row.nTr === null )                                                                                              // 1668\n\t\t{                                                                                                                    // 1669\n\t\t\tnTr = nTrIn || document.createElement('tr');                                                                        // 1670\n\t                                                                                                                      // 1671\n\t\t\trow.nTr = nTr;                                                                                                      // 1672\n\t\t\trow.anCells = cells;                                                                                                // 1673\n\t                                                                                                                      // 1674\n\t\t\t/* Use a private property on the node to allow reserve mapping from the node                                        // 1675\n\t\t\t * to the aoData array for fast look up                                                                             // 1676\n\t\t\t */                                                                                                                 // 1677\n\t\t\tnTr._DT_RowIndex = iRow;                                                                                            // 1678\n\t                                                                                                                      // 1679\n\t\t\t/* Special parameters can be given by the data source to be used on the row */                                      // 1680\n\t\t\t_fnRowAttributes( row );                                                                                            // 1681\n\t                                                                                                                      // 1682\n\t\t\t/* Process each column */                                                                                           // 1683\n\t\t\tfor ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )                                                         // 1684\n\t\t\t{                                                                                                                   // 1685\n\t\t\t\toCol = oSettings.aoColumns[i];                                                                                     // 1686\n\t                                                                                                                      // 1687\n\t\t\t\tnTd = nTrIn ? anTds[i] : document.createElement( oCol.sCellType );                                                 // 1688\n\t\t\t\tcells.push( nTd );                                                                                                 // 1689\n\t                                                                                                                      // 1690\n\t\t\t\t// Need to create the HTML if new, or if a rendering function is defined                                           // 1691\n\t\t\t\tif ( !nTrIn || oCol.mRender || oCol.mData !== i )                                                                  // 1692\n\t\t\t\t{                                                                                                                  // 1693\n\t\t\t\t\tnTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );                                                  // 1694\n\t\t\t\t}                                                                                                                  // 1695\n\t                                                                                                                      // 1696\n\t\t\t\t/* Add user defined class */                                                                                       // 1697\n\t\t\t\tif ( oCol.sClass )                                                                                                 // 1698\n\t\t\t\t{                                                                                                                  // 1699\n\t\t\t\t\tnTd.className += ' '+oCol.sClass;                                                                                 // 1700\n\t\t\t\t}                                                                                                                  // 1701\n\t                                                                                                                      // 1702\n\t\t\t\t// Visibility - add or remove as required                                                                          // 1703\n\t\t\t\tif ( oCol.bVisible && ! nTrIn )                                                                                    // 1704\n\t\t\t\t{                                                                                                                  // 1705\n\t\t\t\t\tnTr.appendChild( nTd );                                                                                           // 1706\n\t\t\t\t}                                                                                                                  // 1707\n\t\t\t\telse if ( ! oCol.bVisible && nTrIn )                                                                               // 1708\n\t\t\t\t{                                                                                                                  // 1709\n\t\t\t\t\tnTd.parentNode.removeChild( nTd );                                                                                // 1710\n\t\t\t\t}                                                                                                                  // 1711\n\t                                                                                                                      // 1712\n\t\t\t\tif ( oCol.fnCreatedCell )                                                                                          // 1713\n\t\t\t\t{                                                                                                                  // 1714\n\t\t\t\t\toCol.fnCreatedCell.call( oSettings.oInstance,                                                                     // 1715\n\t\t\t\t\t\tnTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i                                                      // 1716\n\t\t\t\t\t);                                                                                                                // 1717\n\t\t\t\t}                                                                                                                  // 1718\n\t\t\t}                                                                                                                   // 1719\n\t                                                                                                                      // 1720\n\t\t\t_fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow] );                                   // 1721\n\t\t}                                                                                                                    // 1722\n\t                                                                                                                      // 1723\n\t\t// Remove once webkit bug 131819 and Chromium bug 365619 have been resolved                                          // 1724\n\t\t// and deployed                                                                                                      // 1725\n\t\trow.nTr.setAttribute( 'role', 'row' );                                                                               // 1726\n\t}                                                                                                                     // 1727\n\t                                                                                                                      // 1728\n\t                                                                                                                      // 1729\n\t/**                                                                                                                   // 1730\n\t * Add attributes to a row based on the special `DT_*` parameters in a data                                           // 1731\n\t * source object.                                                                                                     // 1732\n\t *  @param {object} DataTables row object for the row to be modified                                                  // 1733\n\t *  @memberof DataTable#oApi                                                                                          // 1734\n\t */                                                                                                                   // 1735\n\tfunction _fnRowAttributes( row )                                                                                      // 1736\n\t{                                                                                                                     // 1737\n\t\tvar tr = row.nTr;                                                                                                    // 1738\n\t\tvar data = row._aData;                                                                                               // 1739\n\t                                                                                                                      // 1740\n\t\tif ( tr ) {                                                                                                          // 1741\n\t\t\tif ( data.DT_RowId ) {                                                                                              // 1742\n\t\t\t\ttr.id = data.DT_RowId;                                                                                             // 1743\n\t\t\t}                                                                                                                   // 1744\n\t                                                                                                                      // 1745\n\t\t\tif ( data.DT_RowClass ) {                                                                                           // 1746\n\t\t\t\t// Remove any classes added by DT_RowClass before                                                                  // 1747\n\t\t\t\tvar a = data.DT_RowClass.split(' ');                                                                               // 1748\n\t\t\t\trow.__rowc = row.__rowc ?                                                                                          // 1749\n\t\t\t\t\t_unique( row.__rowc.concat( a ) ) :                                                                               // 1750\n\t\t\t\t\ta;                                                                                                                // 1751\n\t                                                                                                                      // 1752\n\t\t\t\t$(tr)                                                                                                              // 1753\n\t\t\t\t\t.removeClass( row.__rowc.join(' ') )                                                                              // 1754\n\t\t\t\t\t.addClass( data.DT_RowClass );                                                                                    // 1755\n\t\t\t}                                                                                                                   // 1756\n\t                                                                                                                      // 1757\n\t\t\tif ( data.DT_RowAttr ) {                                                                                            // 1758\n\t\t\t\t$(tr).attr( data.DT_RowAttr );                                                                                     // 1759\n\t\t\t}                                                                                                                   // 1760\n\t                                                                                                                      // 1761\n\t\t\tif ( data.DT_RowData ) {                                                                                            // 1762\n\t\t\t\t$(tr).data( data.DT_RowData );                                                                                     // 1763\n\t\t\t}                                                                                                                   // 1764\n\t\t}                                                                                                                    // 1765\n\t}                                                                                                                     // 1766\n\t                                                                                                                      // 1767\n\t                                                                                                                      // 1768\n\t/**                                                                                                                   // 1769\n\t * Create the HTML header for the table                                                                               // 1770\n\t *  @param {object} oSettings dataTables settings object                                                              // 1771\n\t *  @memberof DataTable#oApi                                                                                          // 1772\n\t */                                                                                                                   // 1773\n\tfunction _fnBuildHead( oSettings )                                                                                    // 1774\n\t{                                                                                                                     // 1775\n\t\tvar i, ien, cell, row, column;                                                                                       // 1776\n\t\tvar thead = oSettings.nTHead;                                                                                        // 1777\n\t\tvar tfoot = oSettings.nTFoot;                                                                                        // 1778\n\t\tvar createHeader = $('th, td', thead).length === 0;                                                                  // 1779\n\t\tvar classes = oSettings.oClasses;                                                                                    // 1780\n\t\tvar columns = oSettings.aoColumns;                                                                                   // 1781\n\t                                                                                                                      // 1782\n\t\tif ( createHeader ) {                                                                                                // 1783\n\t\t\trow = $('<tr/>').appendTo( thead );                                                                                 // 1784\n\t\t}                                                                                                                    // 1785\n\t                                                                                                                      // 1786\n\t\tfor ( i=0, ien=columns.length ; i<ien ; i++ ) {                                                                      // 1787\n\t\t\tcolumn = columns[i];                                                                                                // 1788\n\t\t\tcell = $( column.nTh ).addClass( column.sClass );                                                                   // 1789\n\t                                                                                                                      // 1790\n\t\t\tif ( createHeader ) {                                                                                               // 1791\n\t\t\t\tcell.appendTo( row );                                                                                              // 1792\n\t\t\t}                                                                                                                   // 1793\n\t                                                                                                                      // 1794\n\t\t\t// 1.11 move into sorting                                                                                           // 1795\n\t\t\tif ( oSettings.oFeatures.bSort ) {                                                                                  // 1796\n\t\t\t\tcell.addClass( column.sSortingClass );                                                                             // 1797\n\t                                                                                                                      // 1798\n\t\t\t\tif ( column.bSortable !== false ) {                                                                                // 1799\n\t\t\t\t\tcell                                                                                                              // 1800\n\t\t\t\t\t\t.attr( 'tabindex', oSettings.iTabIndex )                                                                         // 1801\n\t\t\t\t\t\t.attr( 'aria-controls', oSettings.sTableId );                                                                    // 1802\n\t                                                                                                                      // 1803\n\t\t\t\t\t_fnSortAttachListener( oSettings, column.nTh, i );                                                                // 1804\n\t\t\t\t}                                                                                                                  // 1805\n\t\t\t}                                                                                                                   // 1806\n\t                                                                                                                      // 1807\n\t\t\tif ( column.sTitle != cell.html() ) {                                                                               // 1808\n\t\t\t\tcell.html( column.sTitle );                                                                                        // 1809\n\t\t\t}                                                                                                                   // 1810\n\t                                                                                                                      // 1811\n\t\t\t_fnRenderer( oSettings, 'header' )(                                                                                 // 1812\n\t\t\t\toSettings, cell, column, classes                                                                                   // 1813\n\t\t\t);                                                                                                                  // 1814\n\t\t}                                                                                                                    // 1815\n\t                                                                                                                      // 1816\n\t\tif ( createHeader ) {                                                                                                // 1817\n\t\t\t_fnDetectHeader( oSettings.aoHeader, thead );                                                                       // 1818\n\t\t}                                                                                                                    // 1819\n\t\t                                                                                                                     // 1820\n\t\t/* ARIA role for the rows */                                                                                         // 1821\n\t \t$(thead).find('>tr').attr('role', 'row');                                                                           // 1822\n\t                                                                                                                      // 1823\n\t\t/* Deal with the footer - add classes if required */                                                                 // 1824\n\t\t$(thead).find('>tr>th, >tr>td').addClass( classes.sHeaderTH );                                                       // 1825\n\t\t$(tfoot).find('>tr>th, >tr>td').addClass( classes.sFooterTH );                                                       // 1826\n\t                                                                                                                      // 1827\n\t\t// Cache the footer cells. Note that we only take the cells from the first                                           // 1828\n\t\t// row in the footer. If there is more than one row the user wants to                                                // 1829\n\t\t// interact with, they need to use the table().foot() method. Note also this                                         // 1830\n\t\t// allows cells to be used for multiple columns using colspan                                                        // 1831\n\t\tif ( tfoot !== null ) {                                                                                              // 1832\n\t\t\tvar cells = oSettings.aoFooter[0];                                                                                  // 1833\n\t                                                                                                                      // 1834\n\t\t\tfor ( i=0, ien=cells.length ; i<ien ; i++ ) {                                                                       // 1835\n\t\t\t\tcolumn = columns[i];                                                                                               // 1836\n\t\t\t\tcolumn.nTf = cells[i].cell;                                                                                        // 1837\n\t                                                                                                                      // 1838\n\t\t\t\tif ( column.sClass ) {                                                                                             // 1839\n\t\t\t\t\t$(column.nTf).addClass( column.sClass );                                                                          // 1840\n\t\t\t\t}                                                                                                                  // 1841\n\t\t\t}                                                                                                                   // 1842\n\t\t}                                                                                                                    // 1843\n\t}                                                                                                                     // 1844\n\t                                                                                                                      // 1845\n\t                                                                                                                      // 1846\n\t/**                                                                                                                   // 1847\n\t * Draw the header (or footer) element based on the column visibility states. The                                     // 1848\n\t * methodology here is to use the layout array from _fnDetectHeader, modified for                                     // 1849\n\t * the instantaneous column visibility, to construct the new layout. The grid is                                      // 1850\n\t * traversed over cell at a time in a rows x columns grid fashion, although each                                      // 1851\n\t * cell insert can cover multiple elements in the grid - which is tracks using the                                    // 1852\n\t * aApplied array. Cell inserts in the grid will only occur where there isn't                                         // 1853\n\t * already a cell in that position.                                                                                   // 1854\n\t *  @param {object} oSettings dataTables settings object                                                              // 1855\n\t *  @param array {objects} aoSource Layout array from _fnDetectHeader                                                 // 1856\n\t *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,                      // 1857\n\t *  @memberof DataTable#oApi                                                                                          // 1858\n\t */                                                                                                                   // 1859\n\tfunction _fnDrawHead( oSettings, aoSource, bIncludeHidden )                                                           // 1860\n\t{                                                                                                                     // 1861\n\t\tvar i, iLen, j, jLen, k, kLen, n, nLocalTr;                                                                          // 1862\n\t\tvar aoLocal = [];                                                                                                    // 1863\n\t\tvar aApplied = [];                                                                                                   // 1864\n\t\tvar iColumns = oSettings.aoColumns.length;                                                                           // 1865\n\t\tvar iRowspan, iColspan;                                                                                              // 1866\n\t                                                                                                                      // 1867\n\t\tif ( ! aoSource )                                                                                                    // 1868\n\t\t{                                                                                                                    // 1869\n\t\t\treturn;                                                                                                             // 1870\n\t\t}                                                                                                                    // 1871\n\t                                                                                                                      // 1872\n\t\tif (  bIncludeHidden === undefined )                                                                                 // 1873\n\t\t{                                                                                                                    // 1874\n\t\t\tbIncludeHidden = false;                                                                                             // 1875\n\t\t}                                                                                                                    // 1876\n\t                                                                                                                      // 1877\n\t\t/* Make a copy of the master layout array, but without the visible columns in it */                                  // 1878\n\t\tfor ( i=0, iLen=aoSource.length ; i<iLen ; i++ )                                                                     // 1879\n\t\t{                                                                                                                    // 1880\n\t\t\taoLocal[i] = aoSource[i].slice();                                                                                   // 1881\n\t\t\taoLocal[i].nTr = aoSource[i].nTr;                                                                                   // 1882\n\t                                                                                                                      // 1883\n\t\t\t/* Remove any columns which are currently hidden */                                                                 // 1884\n\t\t\tfor ( j=iColumns-1 ; j>=0 ; j-- )                                                                                   // 1885\n\t\t\t{                                                                                                                   // 1886\n\t\t\t\tif ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )                                                         // 1887\n\t\t\t\t{                                                                                                                  // 1888\n\t\t\t\t\taoLocal[i].splice( j, 1 );                                                                                        // 1889\n\t\t\t\t}                                                                                                                  // 1890\n\t\t\t}                                                                                                                   // 1891\n\t                                                                                                                      // 1892\n\t\t\t/* Prep the applied array - it needs an element for each row */                                                     // 1893\n\t\t\taApplied.push( [] );                                                                                                // 1894\n\t\t}                                                                                                                    // 1895\n\t                                                                                                                      // 1896\n\t\tfor ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )                                                                      // 1897\n\t\t{                                                                                                                    // 1898\n\t\t\tnLocalTr = aoLocal[i].nTr;                                                                                          // 1899\n\t                                                                                                                      // 1900\n\t\t\t/* All cells are going to be replaced, so empty out the row */                                                      // 1901\n\t\t\tif ( nLocalTr )                                                                                                     // 1902\n\t\t\t{                                                                                                                   // 1903\n\t\t\t\twhile( (n = nLocalTr.firstChild) )                                                                                 // 1904\n\t\t\t\t{                                                                                                                  // 1905\n\t\t\t\t\tnLocalTr.removeChild( n );                                                                                        // 1906\n\t\t\t\t}                                                                                                                  // 1907\n\t\t\t}                                                                                                                   // 1908\n\t                                                                                                                      // 1909\n\t\t\tfor ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )                                                                  // 1910\n\t\t\t{                                                                                                                   // 1911\n\t\t\t\tiRowspan = 1;                                                                                                      // 1912\n\t\t\t\tiColspan = 1;                                                                                                      // 1913\n\t                                                                                                                      // 1914\n\t\t\t\t/* Check to see if there is already a cell (row/colspan) covering our target                                       // 1915\n\t\t\t\t * insert point. If there is, then there is nothing to do.                                                         // 1916\n\t\t\t\t */                                                                                                                // 1917\n\t\t\t\tif ( aApplied[i][j] === undefined )                                                                                // 1918\n\t\t\t\t{                                                                                                                  // 1919\n\t\t\t\t\tnLocalTr.appendChild( aoLocal[i][j].cell );                                                                       // 1920\n\t\t\t\t\taApplied[i][j] = 1;                                                                                               // 1921\n\t                                                                                                                      // 1922\n\t\t\t\t\t/* Expand the cell to cover as many rows as needed */                                                             // 1923\n\t\t\t\t\twhile ( aoLocal[i+iRowspan] !== undefined &&                                                                      // 1924\n\t\t\t\t\t        aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )                                                       // 1925\n\t\t\t\t\t{                                                                                                                 // 1926\n\t\t\t\t\t\taApplied[i+iRowspan][j] = 1;                                                                                     // 1927\n\t\t\t\t\t\tiRowspan++;                                                                                                      // 1928\n\t\t\t\t\t}                                                                                                                 // 1929\n\t                                                                                                                      // 1930\n\t\t\t\t\t/* Expand the cell to cover as many columns as needed */                                                          // 1931\n\t\t\t\t\twhile ( aoLocal[i][j+iColspan] !== undefined &&                                                                   // 1932\n\t\t\t\t\t        aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )                                                       // 1933\n\t\t\t\t\t{                                                                                                                 // 1934\n\t\t\t\t\t\t/* Must update the applied array over the rows for the columns */                                                // 1935\n\t\t\t\t\t\tfor ( k=0 ; k<iRowspan ; k++ )                                                                                   // 1936\n\t\t\t\t\t\t{                                                                                                                // 1937\n\t\t\t\t\t\t\taApplied[i+k][j+iColspan] = 1;                                                                                  // 1938\n\t\t\t\t\t\t}                                                                                                                // 1939\n\t\t\t\t\t\tiColspan++;                                                                                                      // 1940\n\t\t\t\t\t}                                                                                                                 // 1941\n\t                                                                                                                      // 1942\n\t\t\t\t\t/* Do the actual expansion in the DOM */                                                                          // 1943\n\t\t\t\t\t$(aoLocal[i][j].cell)                                                                                             // 1944\n\t\t\t\t\t\t.attr('rowspan', iRowspan)                                                                                       // 1945\n\t\t\t\t\t\t.attr('colspan', iColspan);                                                                                      // 1946\n\t\t\t\t}                                                                                                                  // 1947\n\t\t\t}                                                                                                                   // 1948\n\t\t}                                                                                                                    // 1949\n\t}                                                                                                                     // 1950\n\t                                                                                                                      // 1951\n\t                                                                                                                      // 1952\n\t/**                                                                                                                   // 1953\n\t * Insert the required TR nodes into the table for display                                                            // 1954\n\t *  @param {object} oSettings dataTables settings object                                                              // 1955\n\t *  @memberof DataTable#oApi                                                                                          // 1956\n\t */                                                                                                                   // 1957\n\tfunction _fnDraw( oSettings )                                                                                         // 1958\n\t{                                                                                                                     // 1959\n\t\t/* Provide a pre-callback function which can be used to cancel the draw is false is returned */                      // 1960\n\t\tvar aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );                            // 1961\n\t\tif ( $.inArray( false, aPreDraw ) !== -1 )                                                                           // 1962\n\t\t{                                                                                                                    // 1963\n\t\t\t_fnProcessingDisplay( oSettings, false );                                                                           // 1964\n\t\t\treturn;                                                                                                             // 1965\n\t\t}                                                                                                                    // 1966\n\t                                                                                                                      // 1967\n\t\tvar i, iLen, n;                                                                                                      // 1968\n\t\tvar anRows = [];                                                                                                     // 1969\n\t\tvar iRowCount = 0;                                                                                                   // 1970\n\t\tvar asStripeClasses = oSettings.asStripeClasses;                                                                     // 1971\n\t\tvar iStripes = asStripeClasses.length;                                                                               // 1972\n\t\tvar iOpenRows = oSettings.aoOpenRows.length;                                                                         // 1973\n\t\tvar oLang = oSettings.oLanguage;                                                                                     // 1974\n\t\tvar iInitDisplayStart = oSettings.iInitDisplayStart;                                                                 // 1975\n\t\tvar bServerSide = _fnDataSource( oSettings ) == 'ssp';                                                               // 1976\n\t\tvar aiDisplay = oSettings.aiDisplay;                                                                                 // 1977\n\t                                                                                                                      // 1978\n\t\toSettings.bDrawing = true;                                                                                           // 1979\n\t                                                                                                                      // 1980\n\t\t/* Check and see if we have an initial draw position from state saving */                                            // 1981\n\t\tif ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )                                                   // 1982\n\t\t{                                                                                                                    // 1983\n\t\t\toSettings._iDisplayStart = bServerSide ?                                                                            // 1984\n\t\t\t\tiInitDisplayStart :                                                                                                // 1985\n\t\t\t\tiInitDisplayStart >= oSettings.fnRecordsDisplay() ?                                                                // 1986\n\t\t\t\t\t0 :                                                                                                               // 1987\n\t\t\t\t\tiInitDisplayStart;                                                                                                // 1988\n\t                                                                                                                      // 1989\n\t\t\toSettings.iInitDisplayStart = -1;                                                                                   // 1990\n\t\t}                                                                                                                    // 1991\n\t                                                                                                                      // 1992\n\t\tvar iDisplayStart = oSettings._iDisplayStart;                                                                        // 1993\n\t\tvar iDisplayEnd = oSettings.fnDisplayEnd();                                                                          // 1994\n\t                                                                                                                      // 1995\n\t\t/* Server-side processing draw intercept */                                                                          // 1996\n\t\tif ( oSettings.bDeferLoading )                                                                                       // 1997\n\t\t{                                                                                                                    // 1998\n\t\t\toSettings.bDeferLoading = false;                                                                                    // 1999\n\t\t\toSettings.iDraw++;                                                                                                  // 2000\n\t\t\t_fnProcessingDisplay( oSettings, false );                                                                           // 2001\n\t\t}                                                                                                                    // 2002\n\t\telse if ( !bServerSide )                                                                                             // 2003\n\t\t{                                                                                                                    // 2004\n\t\t\toSettings.iDraw++;                                                                                                  // 2005\n\t\t}                                                                                                                    // 2006\n\t\telse if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )                                                    // 2007\n\t\t{                                                                                                                    // 2008\n\t\t\treturn;                                                                                                             // 2009\n\t\t}                                                                                                                    // 2010\n\t                                                                                                                      // 2011\n\t\tif ( aiDisplay.length !== 0 )                                                                                        // 2012\n\t\t{                                                                                                                    // 2013\n\t\t\tvar iStart = bServerSide ? 0 : iDisplayStart;                                                                       // 2014\n\t\t\tvar iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;                                                     // 2015\n\t                                                                                                                      // 2016\n\t\t\tfor ( var j=iStart ; j<iEnd ; j++ )                                                                                 // 2017\n\t\t\t{                                                                                                                   // 2018\n\t\t\t\tvar iDataIndex = aiDisplay[j];                                                                                     // 2019\n\t\t\t\tvar aoData = oSettings.aoData[ iDataIndex ];                                                                       // 2020\n\t\t\t\tif ( aoData.nTr === null )                                                                                         // 2021\n\t\t\t\t{                                                                                                                  // 2022\n\t\t\t\t\t_fnCreateTr( oSettings, iDataIndex );                                                                             // 2023\n\t\t\t\t}                                                                                                                  // 2024\n\t                                                                                                                      // 2025\n\t\t\t\tvar nRow = aoData.nTr;                                                                                             // 2026\n\t                                                                                                                      // 2027\n\t\t\t\t/* Remove the old striping classes and then add the new one */                                                     // 2028\n\t\t\t\tif ( iStripes !== 0 )                                                                                              // 2029\n\t\t\t\t{                                                                                                                  // 2030\n\t\t\t\t\tvar sStripe = asStripeClasses[ iRowCount % iStripes ];                                                            // 2031\n\t\t\t\t\tif ( aoData._sRowStripe != sStripe )                                                                              // 2032\n\t\t\t\t\t{                                                                                                                 // 2033\n\t\t\t\t\t\t$(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );                                                   // 2034\n\t\t\t\t\t\taoData._sRowStripe = sStripe;                                                                                    // 2035\n\t\t\t\t\t}                                                                                                                 // 2036\n\t\t\t\t}                                                                                                                  // 2037\n\t                                                                                                                      // 2038\n\t\t\t\t// Row callback functions - might want to manipulate the row                                                       // 2039\n\t\t\t\t// iRowCount and j are not currently documented. Are they at all                                                   // 2040\n\t\t\t\t// useful?                                                                                                         // 2041\n\t\t\t\t_fnCallbackFire( oSettings, 'aoRowCallback', null,                                                                 // 2042\n\t\t\t\t\t[nRow, aoData._aData, iRowCount, j] );                                                                            // 2043\n\t                                                                                                                      // 2044\n\t\t\t\tanRows.push( nRow );                                                                                               // 2045\n\t\t\t\tiRowCount++;                                                                                                       // 2046\n\t\t\t}                                                                                                                   // 2047\n\t\t}                                                                                                                    // 2048\n\t\telse                                                                                                                 // 2049\n\t\t{                                                                                                                    // 2050\n\t\t\t/* Table is empty - create a row with an empty message in it */                                                     // 2051\n\t\t\tvar sZero = oLang.sZeroRecords;                                                                                     // 2052\n\t\t\tif ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )                                                // 2053\n\t\t\t{                                                                                                                   // 2054\n\t\t\t\tsZero = oLang.sLoadingRecords;                                                                                     // 2055\n\t\t\t}                                                                                                                   // 2056\n\t\t\telse if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )                                                   // 2057\n\t\t\t{                                                                                                                   // 2058\n\t\t\t\tsZero = oLang.sEmptyTable;                                                                                         // 2059\n\t\t\t}                                                                                                                   // 2060\n\t                                                                                                                      // 2061\n\t\t\tanRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )                                         // 2062\n\t\t\t\t.append( $('<td />', {                                                                                             // 2063\n\t\t\t\t\t'valign':  'top',                                                                                                 // 2064\n\t\t\t\t\t'colSpan': _fnVisbleColumns( oSettings ),                                                                         // 2065\n\t\t\t\t\t'class':   oSettings.oClasses.sRowEmpty                                                                           // 2066\n\t\t\t\t} ).html( sZero ) )[0];                                                                                            // 2067\n\t\t}                                                                                                                    // 2068\n\t                                                                                                                      // 2069\n\t\t/* Header and footer callbacks */                                                                                    // 2070\n\t\t_fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],                   // 2071\n\t\t\t_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );                                           // 2072\n\t                                                                                                                      // 2073\n\t\t_fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],                   // 2074\n\t\t\t_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );                                           // 2075\n\t                                                                                                                      // 2076\n\t\tvar body = $(oSettings.nTBody);                                                                                      // 2077\n\t                                                                                                                      // 2078\n\t\tbody.children().detach();                                                                                            // 2079\n\t\tbody.append( $(anRows) );                                                                                            // 2080\n\t                                                                                                                      // 2081\n\t\t/* Call all required callback functions for the end of a draw */                                                     // 2082\n\t\t_fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );                                                 // 2083\n\t                                                                                                                      // 2084\n\t\t/* Draw is complete, sorting and filtering must be as well */                                                        // 2085\n\t\toSettings.bSorted = false;                                                                                           // 2086\n\t\toSettings.bFiltered = false;                                                                                         // 2087\n\t\toSettings.bDrawing = false;                                                                                          // 2088\n\t}                                                                                                                     // 2089\n\t                                                                                                                      // 2090\n\t                                                                                                                      // 2091\n\t/**                                                                                                                   // 2092\n\t * Redraw the table - taking account of the various features which are enabled                                        // 2093\n\t *  @param {object} oSettings dataTables settings object                                                              // 2094\n\t *  @param {boolean} [holdPosition] Keep the current paging position. By default                                      // 2095\n\t *    the paging is reset to the first page                                                                           // 2096\n\t *  @memberof DataTable#oApi                                                                                          // 2097\n\t */                                                                                                                   // 2098\n\tfunction _fnReDraw( settings, holdPosition )                                                                          // 2099\n\t{                                                                                                                     // 2100\n\t\tvar                                                                                                                  // 2101\n\t\t\tfeatures = settings.oFeatures,                                                                                      // 2102\n\t\t\tsort     = features.bSort,                                                                                          // 2103\n\t\t\tfilter   = features.bFilter;                                                                                        // 2104\n\t                                                                                                                      // 2105\n\t\tif ( sort ) {                                                                                                        // 2106\n\t\t\t_fnSort( settings );                                                                                                // 2107\n\t\t}                                                                                                                    // 2108\n\t                                                                                                                      // 2109\n\t\tif ( filter ) {                                                                                                      // 2110\n\t\t\t_fnFilterComplete( settings, settings.oPreviousSearch );                                                            // 2111\n\t\t}                                                                                                                    // 2112\n\t\telse {                                                                                                               // 2113\n\t\t\t// No filtering, so we want to just use the display master                                                          // 2114\n\t\t\tsettings.aiDisplay = settings.aiDisplayMaster.slice();                                                              // 2115\n\t\t}                                                                                                                    // 2116\n\t                                                                                                                      // 2117\n\t\tif ( holdPosition !== true ) {                                                                                       // 2118\n\t\t\tsettings._iDisplayStart = 0;                                                                                        // 2119\n\t\t}                                                                                                                    // 2120\n\t                                                                                                                      // 2121\n\t\t// Let any modules know about the draw hold position state (used by                                                  // 2122\n\t\t// scrolling internally)                                                                                             // 2123\n\t\tsettings._drawHold = holdPosition;                                                                                   // 2124\n\t                                                                                                                      // 2125\n\t\t_fnDraw( settings );                                                                                                 // 2126\n\t                                                                                                                      // 2127\n\t\tsettings._drawHold = false;                                                                                          // 2128\n\t}                                                                                                                     // 2129\n\t                                                                                                                      // 2130\n\t                                                                                                                      // 2131\n\t/**                                                                                                                   // 2132\n\t * Add the options to the page HTML for the table                                                                     // 2133\n\t *  @param {object} oSettings dataTables settings object                                                              // 2134\n\t *  @memberof DataTable#oApi                                                                                          // 2135\n\t */                                                                                                                   // 2136\n\tfunction _fnAddOptionsHtml ( oSettings )                                                                              // 2137\n\t{                                                                                                                     // 2138\n\t\tvar classes = oSettings.oClasses;                                                                                    // 2139\n\t\tvar table = $(oSettings.nTable);                                                                                     // 2140\n\t\tvar holding = $('<div/>').insertBefore( table ); // Holding element for speed                                        // 2141\n\t\tvar features = oSettings.oFeatures;                                                                                  // 2142\n\t                                                                                                                      // 2143\n\t\t// All DataTables are wrapped in a div                                                                               // 2144\n\t\tvar insert = $('<div/>', {                                                                                           // 2145\n\t\t\tid:      oSettings.sTableId+'_wrapper',                                                                             // 2146\n\t\t\t'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)                                         // 2147\n\t\t} );                                                                                                                 // 2148\n\t                                                                                                                      // 2149\n\t\toSettings.nHolding = holding[0];                                                                                     // 2150\n\t\toSettings.nTableWrapper = insert[0];                                                                                 // 2151\n\t\toSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;                                                       // 2152\n\t                                                                                                                      // 2153\n\t\t/* Loop over the user set positioning and place the elements as needed */                                            // 2154\n\t\tvar aDom = oSettings.sDom.split('');                                                                                 // 2155\n\t\tvar featureNode, cOption, nNewNode, cNext, sAttr, j;                                                                 // 2156\n\t\tfor ( var i=0 ; i<aDom.length ; i++ )                                                                                // 2157\n\t\t{                                                                                                                    // 2158\n\t\t\tfeatureNode = null;                                                                                                 // 2159\n\t\t\tcOption = aDom[i];                                                                                                  // 2160\n\t                                                                                                                      // 2161\n\t\t\tif ( cOption == '<' )                                                                                               // 2162\n\t\t\t{                                                                                                                   // 2163\n\t\t\t\t/* New container div */                                                                                            // 2164\n\t\t\t\tnNewNode = $('<div/>')[0];                                                                                         // 2165\n\t                                                                                                                      // 2166\n\t\t\t\t/* Check to see if we should append an id and/or a class name to the container */                                  // 2167\n\t\t\t\tcNext = aDom[i+1];                                                                                                 // 2168\n\t\t\t\tif ( cNext == \"'\" || cNext == '\"' )                                                                                // 2169\n\t\t\t\t{                                                                                                                  // 2170\n\t\t\t\t\tsAttr = \"\";                                                                                                       // 2171\n\t\t\t\t\tj = 2;                                                                                                            // 2172\n\t\t\t\t\twhile ( aDom[i+j] != cNext )                                                                                      // 2173\n\t\t\t\t\t{                                                                                                                 // 2174\n\t\t\t\t\t\tsAttr += aDom[i+j];                                                                                              // 2175\n\t\t\t\t\t\tj++;                                                                                                             // 2176\n\t\t\t\t\t}                                                                                                                 // 2177\n\t                                                                                                                      // 2178\n\t\t\t\t\t/* Replace jQuery UI constants @todo depreciated */                                                               // 2179\n\t\t\t\t\tif ( sAttr == \"H\" )                                                                                               // 2180\n\t\t\t\t\t{                                                                                                                 // 2181\n\t\t\t\t\t\tsAttr = classes.sJUIHeader;                                                                                      // 2182\n\t\t\t\t\t}                                                                                                                 // 2183\n\t\t\t\t\telse if ( sAttr == \"F\" )                                                                                          // 2184\n\t\t\t\t\t{                                                                                                                 // 2185\n\t\t\t\t\t\tsAttr = classes.sJUIFooter;                                                                                      // 2186\n\t\t\t\t\t}                                                                                                                 // 2187\n\t                                                                                                                      // 2188\n\t\t\t\t\t/* The attribute can be in the format of \"#id.class\", \"#id\" or \"class\" This logic                                 // 2189\n\t\t\t\t\t * breaks the string into parts and applies them as needed                                                        // 2190\n\t\t\t\t\t */                                                                                                               // 2191\n\t\t\t\t\tif ( sAttr.indexOf('.') != -1 )                                                                                   // 2192\n\t\t\t\t\t{                                                                                                                 // 2193\n\t\t\t\t\t\tvar aSplit = sAttr.split('.');                                                                                   // 2194\n\t\t\t\t\t\tnNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);                                                           // 2195\n\t\t\t\t\t\tnNewNode.className = aSplit[1];                                                                                  // 2196\n\t\t\t\t\t}                                                                                                                 // 2197\n\t\t\t\t\telse if ( sAttr.charAt(0) == \"#\" )                                                                                // 2198\n\t\t\t\t\t{                                                                                                                 // 2199\n\t\t\t\t\t\tnNewNode.id = sAttr.substr(1, sAttr.length-1);                                                                   // 2200\n\t\t\t\t\t}                                                                                                                 // 2201\n\t\t\t\t\telse                                                                                                              // 2202\n\t\t\t\t\t{                                                                                                                 // 2203\n\t\t\t\t\t\tnNewNode.className = sAttr;                                                                                      // 2204\n\t\t\t\t\t}                                                                                                                 // 2205\n\t                                                                                                                      // 2206\n\t\t\t\t\ti += j; /* Move along the position array */                                                                       // 2207\n\t\t\t\t}                                                                                                                  // 2208\n\t                                                                                                                      // 2209\n\t\t\t\tinsert.append( nNewNode );                                                                                         // 2210\n\t\t\t\tinsert = $(nNewNode);                                                                                              // 2211\n\t\t\t}                                                                                                                   // 2212\n\t\t\telse if ( cOption == '>' )                                                                                          // 2213\n\t\t\t{                                                                                                                   // 2214\n\t\t\t\t/* End container div */                                                                                            // 2215\n\t\t\t\tinsert = insert.parent();                                                                                          // 2216\n\t\t\t}                                                                                                                   // 2217\n\t\t\t// @todo Move options into their own plugins?                                                                       // 2218\n\t\t\telse if ( cOption == 'l' && features.bPaginate && features.bLengthChange )                                          // 2219\n\t\t\t{                                                                                                                   // 2220\n\t\t\t\t/* Length */                                                                                                       // 2221\n\t\t\t\tfeatureNode = _fnFeatureHtmlLength( oSettings );                                                                   // 2222\n\t\t\t}                                                                                                                   // 2223\n\t\t\telse if ( cOption == 'f' && features.bFilter )                                                                      // 2224\n\t\t\t{                                                                                                                   // 2225\n\t\t\t\t/* Filter */                                                                                                       // 2226\n\t\t\t\tfeatureNode = _fnFeatureHtmlFilter( oSettings );                                                                   // 2227\n\t\t\t}                                                                                                                   // 2228\n\t\t\telse if ( cOption == 'r' && features.bProcessing )                                                                  // 2229\n\t\t\t{                                                                                                                   // 2230\n\t\t\t\t/* pRocessing */                                                                                                   // 2231\n\t\t\t\tfeatureNode = _fnFeatureHtmlProcessing( oSettings );                                                               // 2232\n\t\t\t}                                                                                                                   // 2233\n\t\t\telse if ( cOption == 't' )                                                                                          // 2234\n\t\t\t{                                                                                                                   // 2235\n\t\t\t\t/* Table */                                                                                                        // 2236\n\t\t\t\tfeatureNode = _fnFeatureHtmlTable( oSettings );                                                                    // 2237\n\t\t\t}                                                                                                                   // 2238\n\t\t\telse if ( cOption ==  'i' && features.bInfo )                                                                       // 2239\n\t\t\t{                                                                                                                   // 2240\n\t\t\t\t/* Info */                                                                                                         // 2241\n\t\t\t\tfeatureNode = _fnFeatureHtmlInfo( oSettings );                                                                     // 2242\n\t\t\t}                                                                                                                   // 2243\n\t\t\telse if ( cOption == 'p' && features.bPaginate )                                                                    // 2244\n\t\t\t{                                                                                                                   // 2245\n\t\t\t\t/* Pagination */                                                                                                   // 2246\n\t\t\t\tfeatureNode = _fnFeatureHtmlPaginate( oSettings );                                                                 // 2247\n\t\t\t}                                                                                                                   // 2248\n\t\t\telse if ( DataTable.ext.feature.length !== 0 )                                                                      // 2249\n\t\t\t{                                                                                                                   // 2250\n\t\t\t\t/* Plug-in features */                                                                                             // 2251\n\t\t\t\tvar aoFeatures = DataTable.ext.feature;                                                                            // 2252\n\t\t\t\tfor ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )                                                             // 2253\n\t\t\t\t{                                                                                                                  // 2254\n\t\t\t\t\tif ( cOption == aoFeatures[k].cFeature )                                                                          // 2255\n\t\t\t\t\t{                                                                                                                 // 2256\n\t\t\t\t\t\tfeatureNode = aoFeatures[k].fnInit( oSettings );                                                                 // 2257\n\t\t\t\t\t\tbreak;                                                                                                           // 2258\n\t\t\t\t\t}                                                                                                                 // 2259\n\t\t\t\t}                                                                                                                  // 2260\n\t\t\t}                                                                                                                   // 2261\n\t                                                                                                                      // 2262\n\t\t\t/* Add to the 2D features array */                                                                                  // 2263\n\t\t\tif ( featureNode )                                                                                                  // 2264\n\t\t\t{                                                                                                                   // 2265\n\t\t\t\tvar aanFeatures = oSettings.aanFeatures;                                                                           // 2266\n\t                                                                                                                      // 2267\n\t\t\t\tif ( ! aanFeatures[cOption] )                                                                                      // 2268\n\t\t\t\t{                                                                                                                  // 2269\n\t\t\t\t\taanFeatures[cOption] = [];                                                                                        // 2270\n\t\t\t\t}                                                                                                                  // 2271\n\t                                                                                                                      // 2272\n\t\t\t\taanFeatures[cOption].push( featureNode );                                                                          // 2273\n\t\t\t\tinsert.append( featureNode );                                                                                      // 2274\n\t\t\t}                                                                                                                   // 2275\n\t\t}                                                                                                                    // 2276\n\t                                                                                                                      // 2277\n\t\t/* Built our DOM structure - replace the holding div with what we want */                                            // 2278\n\t\tholding.replaceWith( insert );                                                                                       // 2279\n\t}                                                                                                                     // 2280\n\t                                                                                                                      // 2281\n\t                                                                                                                      // 2282\n\t/**                                                                                                                   // 2283\n\t * Use the DOM source to create up an array of header cells. The idea here is to                                      // 2284\n\t * create a layout grid (array) of rows x columns, which contains a reference                                         // 2285\n\t * to the cell that that point in the grid (regardless of col/rowspan), such that                                     // 2286\n\t * any column / row could be removed and the new grid constructed                                                     // 2287\n\t *  @param array {object} aLayout Array to store the calculated layout in                                             // 2288\n\t *  @param {node} nThead The header/footer element for the table                                                      // 2289\n\t *  @memberof DataTable#oApi                                                                                          // 2290\n\t */                                                                                                                   // 2291\n\tfunction _fnDetectHeader ( aLayout, nThead )                                                                          // 2292\n\t{                                                                                                                     // 2293\n\t\tvar nTrs = $(nThead).children('tr');                                                                                 // 2294\n\t\tvar nTr, nCell;                                                                                                      // 2295\n\t\tvar i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;                                                   // 2296\n\t\tvar bUnique;                                                                                                         // 2297\n\t\tvar fnShiftCol = function ( a, i, j ) {                                                                              // 2298\n\t\t\tvar k = a[i];                                                                                                       // 2299\n\t                while ( k[j] ) {                                                                                      // 2300\n\t\t\t\tj++;                                                                                                               // 2301\n\t\t\t}                                                                                                                   // 2302\n\t\t\treturn j;                                                                                                           // 2303\n\t\t};                                                                                                                   // 2304\n\t                                                                                                                      // 2305\n\t\taLayout.splice( 0, aLayout.length );                                                                                 // 2306\n\t                                                                                                                      // 2307\n\t\t/* We know how many rows there are in the layout - so prep it */                                                     // 2308\n\t\tfor ( i=0, iLen=nTrs.length ; i<iLen ; i++ )                                                                         // 2309\n\t\t{                                                                                                                    // 2310\n\t\t\taLayout.push( [] );                                                                                                 // 2311\n\t\t}                                                                                                                    // 2312\n\t                                                                                                                      // 2313\n\t\t/* Calculate a layout array */                                                                                       // 2314\n\t\tfor ( i=0, iLen=nTrs.length ; i<iLen ; i++ )                                                                         // 2315\n\t\t{                                                                                                                    // 2316\n\t\t\tnTr = nTrs[i];                                                                                                      // 2317\n\t\t\tiColumn = 0;                                                                                                        // 2318\n\t                                                                                                                      // 2319\n\t\t\t/* For every cell in the row... */                                                                                  // 2320\n\t\t\tnCell = nTr.firstChild;                                                                                             // 2321\n\t\t\twhile ( nCell ) {                                                                                                   // 2322\n\t\t\t\tif ( nCell.nodeName.toUpperCase() == \"TD\" ||                                                                       // 2323\n\t\t\t\t     nCell.nodeName.toUpperCase() == \"TH\" )                                                                        // 2324\n\t\t\t\t{                                                                                                                  // 2325\n\t\t\t\t\t/* Get the col and rowspan attributes from the DOM and sanitise them */                                           // 2326\n\t\t\t\t\tiColspan = nCell.getAttribute('colspan') * 1;                                                                     // 2327\n\t\t\t\t\tiRowspan = nCell.getAttribute('rowspan') * 1;                                                                     // 2328\n\t\t\t\t\tiColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;                                            // 2329\n\t\t\t\t\tiRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;                                            // 2330\n\t                                                                                                                      // 2331\n\t\t\t\t\t/* There might be colspan cells already in this row, so shift our target                                          // 2332\n\t\t\t\t\t * accordingly                                                                                                    // 2333\n\t\t\t\t\t */                                                                                                               // 2334\n\t\t\t\t\tiColShifted = fnShiftCol( aLayout, i, iColumn );                                                                  // 2335\n\t                                                                                                                      // 2336\n\t\t\t\t\t/* Cache calculation for unique columns */                                                                        // 2337\n\t\t\t\t\tbUnique = iColspan === 1 ? true : false;                                                                          // 2338\n\t                                                                                                                      // 2339\n\t\t\t\t\t/* If there is col / rowspan, copy the information into the layout grid */                                        // 2340\n\t\t\t\t\tfor ( l=0 ; l<iColspan ; l++ )                                                                                    // 2341\n\t\t\t\t\t{                                                                                                                 // 2342\n\t\t\t\t\t\tfor ( k=0 ; k<iRowspan ; k++ )                                                                                   // 2343\n\t\t\t\t\t\t{                                                                                                                // 2344\n\t\t\t\t\t\t\taLayout[i+k][iColShifted+l] = {                                                                                 // 2345\n\t\t\t\t\t\t\t\t\"cell\": nCell,                                                                                                 // 2346\n\t\t\t\t\t\t\t\t\"unique\": bUnique                                                                                              // 2347\n\t\t\t\t\t\t\t};                                                                                                              // 2348\n\t\t\t\t\t\t\taLayout[i+k].nTr = nTr;                                                                                         // 2349\n\t\t\t\t\t\t}                                                                                                                // 2350\n\t\t\t\t\t}                                                                                                                 // 2351\n\t\t\t\t}                                                                                                                  // 2352\n\t\t\t\tnCell = nCell.nextSibling;                                                                                         // 2353\n\t\t\t}                                                                                                                   // 2354\n\t\t}                                                                                                                    // 2355\n\t}                                                                                                                     // 2356\n\t                                                                                                                      // 2357\n\t                                                                                                                      // 2358\n\t/**                                                                                                                   // 2359\n\t * Get an array of unique th elements, one for each column                                                            // 2360\n\t *  @param {object} oSettings dataTables settings object                                                              // 2361\n\t *  @param {node} nHeader automatically detect the layout from this node - optional                                   // 2362\n\t *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional                                         // 2363\n\t *  @returns array {node} aReturn list of unique th's                                                                 // 2364\n\t *  @memberof DataTable#oApi                                                                                          // 2365\n\t */                                                                                                                   // 2366\n\tfunction _fnGetUniqueThs ( oSettings, nHeader, aLayout )                                                              // 2367\n\t{                                                                                                                     // 2368\n\t\tvar aReturn = [];                                                                                                    // 2369\n\t\tif ( !aLayout )                                                                                                      // 2370\n\t\t{                                                                                                                    // 2371\n\t\t\taLayout = oSettings.aoHeader;                                                                                       // 2372\n\t\t\tif ( nHeader )                                                                                                      // 2373\n\t\t\t{                                                                                                                   // 2374\n\t\t\t\taLayout = [];                                                                                                      // 2375\n\t\t\t\t_fnDetectHeader( aLayout, nHeader );                                                                               // 2376\n\t\t\t}                                                                                                                   // 2377\n\t\t}                                                                                                                    // 2378\n\t                                                                                                                      // 2379\n\t\tfor ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )                                                                  // 2380\n\t\t{                                                                                                                    // 2381\n\t\t\tfor ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )                                                              // 2382\n\t\t\t{                                                                                                                   // 2383\n\t\t\t\tif ( aLayout[i][j].unique &&                                                                                       // 2384\n\t\t\t\t\t (!aReturn[j] || !oSettings.bSortCellsTop) )                                                                      // 2385\n\t\t\t\t{                                                                                                                  // 2386\n\t\t\t\t\taReturn[j] = aLayout[i][j].cell;                                                                                  // 2387\n\t\t\t\t}                                                                                                                  // 2388\n\t\t\t}                                                                                                                   // 2389\n\t\t}                                                                                                                    // 2390\n\t                                                                                                                      // 2391\n\t\treturn aReturn;                                                                                                      // 2392\n\t}                                                                                                                     // 2393\n\t                                                                                                                      // 2394\n\t/**                                                                                                                   // 2395\n\t * Create an Ajax call based on the table's settings, taking into account that                                        // 2396\n\t * parameters can have multiple forms, and backwards compatibility.                                                   // 2397\n\t *                                                                                                                    // 2398\n\t * @param {object} oSettings dataTables settings object                                                               // 2399\n\t * @param {array} data Data to send to the server, required by                                                        // 2400\n\t *     DataTables - may be augmented by developer callbacks                                                           // 2401\n\t * @param {function} fn Callback function to run when data is obtained                                                // 2402\n\t */                                                                                                                   // 2403\n\tfunction _fnBuildAjax( oSettings, data, fn )                                                                          // 2404\n\t{                                                                                                                     // 2405\n\t\t// Compatibility with 1.9-, allow fnServerData and event to manipulate                                               // 2406\n\t\t_fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );                                              // 2407\n\t                                                                                                                      // 2408\n\t\t// Convert to object based for 1.10+ if using the old array scheme which can                                         // 2409\n\t\t// come from server-side processing or serverParams                                                                  // 2410\n\t\tif ( data && $.isArray(data) ) {                                                                                     // 2411\n\t\t\tvar tmp = {};                                                                                                       // 2412\n\t\t\tvar rbracket = /(.*?)\\[\\]$/;                                                                                        // 2413\n\t                                                                                                                      // 2414\n\t\t\t$.each( data, function (key, val) {                                                                                 // 2415\n\t\t\t\tvar match = val.name.match(rbracket);                                                                              // 2416\n\t                                                                                                                      // 2417\n\t\t\t\tif ( match ) {                                                                                                     // 2418\n\t\t\t\t\t// Support for arrays                                                                                             // 2419\n\t\t\t\t\tvar name = match[0];                                                                                              // 2420\n\t                                                                                                                      // 2421\n\t\t\t\t\tif ( ! tmp[ name ] ) {                                                                                            // 2422\n\t\t\t\t\t\ttmp[ name ] = [];                                                                                                // 2423\n\t\t\t\t\t}                                                                                                                 // 2424\n\t\t\t\t\ttmp[ name ].push( val.value );                                                                                    // 2425\n\t\t\t\t}                                                                                                                  // 2426\n\t\t\t\telse {                                                                                                             // 2427\n\t\t\t\t\ttmp[val.name] = val.value;                                                                                        // 2428\n\t\t\t\t}                                                                                                                  // 2429\n\t\t\t} );                                                                                                                // 2430\n\t\t\tdata = tmp;                                                                                                         // 2431\n\t\t}                                                                                                                    // 2432\n\t                                                                                                                      // 2433\n\t\tvar ajaxData;                                                                                                        // 2434\n\t\tvar ajax = oSettings.ajax;                                                                                           // 2435\n\t\tvar instance = oSettings.oInstance;                                                                                  // 2436\n\t\tvar callback = function ( json ) {                                                                                   // 2437\n\t\t\t_fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR] );                                      // 2438\n\t\t\tfn( json );                                                                                                         // 2439\n\t\t};                                                                                                                   // 2440\n\t                                                                                                                      // 2441\n\t\tif ( $.isPlainObject( ajax ) && ajax.data )                                                                          // 2442\n\t\t{                                                                                                                    // 2443\n\t\t\tajaxData = ajax.data;                                                                                               // 2444\n\t                                                                                                                      // 2445\n\t\t\tvar newData = $.isFunction( ajaxData ) ?                                                                            // 2446\n\t\t\t\tajaxData( data, oSettings ) :  // fn can manipulate data or return                                                 // 2447\n\t\t\t\tajaxData;                      // an object object or array to merge                                               // 2448\n\t                                                                                                                      // 2449\n\t\t\t// If the function returned something, use that alone                                                               // 2450\n\t\t\tdata = $.isFunction( ajaxData ) && newData ?                                                                        // 2451\n\t\t\t\tnewData :                                                                                                          // 2452\n\t\t\t\t$.extend( true, data, newData );                                                                                   // 2453\n\t                                                                                                                      // 2454\n\t\t\t// Remove the data property as we've resolved it already and don't want                                             // 2455\n\t\t\t// jQuery to do it again (it is restored at the end of the function)                                                // 2456\n\t\t\tdelete ajax.data;                                                                                                   // 2457\n\t\t}                                                                                                                    // 2458\n\t                                                                                                                      // 2459\n\t\tvar baseAjax = {                                                                                                     // 2460\n\t\t\t\"data\": data,                                                                                                       // 2461\n\t\t\t\"success\": function (json) {                                                                                        // 2462\n\t\t\t\tvar error = json.error || json.sError;                                                                             // 2463\n\t\t\t\tif ( error ) {                                                                                                     // 2464\n\t\t\t\t\t_fnLog( oSettings, 0, error );                                                                                    // 2465\n\t\t\t\t}                                                                                                                  // 2466\n\t                                                                                                                      // 2467\n\t\t\t\toSettings.json = json;                                                                                             // 2468\n\t\t\t\tcallback( json );                                                                                                  // 2469\n\t\t\t},                                                                                                                  // 2470\n\t\t\t\"dataType\": \"json\",                                                                                                 // 2471\n\t\t\t\"cache\": false,                                                                                                     // 2472\n\t\t\t\"type\": oSettings.sServerMethod,                                                                                    // 2473\n\t\t\t\"error\": function (xhr, error, thrown) {                                                                            // 2474\n\t\t\t\tvar ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR] );                           // 2475\n\t                                                                                                                      // 2476\n\t\t\t\tif ( $.inArray( true, ret ) === -1 ) {                                                                             // 2477\n\t\t\t\t\tif ( error == \"parsererror\" ) {                                                                                   // 2478\n\t\t\t\t\t\t_fnLog( oSettings, 0, 'Invalid JSON response', 1 );                                                              // 2479\n\t\t\t\t\t}                                                                                                                 // 2480\n\t\t\t\t\telse if ( xhr.readyState === 4 ) {                                                                                // 2481\n\t\t\t\t\t\t_fnLog( oSettings, 0, 'Ajax error', 7 );                                                                         // 2482\n\t\t\t\t\t}                                                                                                                 // 2483\n\t\t\t\t}                                                                                                                  // 2484\n\t                                                                                                                      // 2485\n\t\t\t\t_fnProcessingDisplay( oSettings, false );                                                                          // 2486\n\t\t\t}                                                                                                                   // 2487\n\t\t};                                                                                                                   // 2488\n\t                                                                                                                      // 2489\n\t\t// Store the data submitted for the API                                                                              // 2490\n\t\toSettings.oAjaxData = data;                                                                                          // 2491\n\t                                                                                                                      // 2492\n\t\t// Allow plug-ins and external processes to modify the data                                                          // 2493\n\t\t_fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );                                                     // 2494\n\t                                                                                                                      // 2495\n\t\tif ( oSettings.fnServerData )                                                                                        // 2496\n\t\t{                                                                                                                    // 2497\n\t\t\t// DataTables 1.9- compatibility                                                                                    // 2498\n\t\t\toSettings.fnServerData.call( instance,                                                                              // 2499\n\t\t\t\toSettings.sAjaxSource,                                                                                             // 2500\n\t\t\t\t$.map( data, function (val, key) { // Need to convert back to 1.9 trad format                                      // 2501\n\t\t\t\t\treturn { name: key, value: val };                                                                                 // 2502\n\t\t\t\t} ),                                                                                                               // 2503\n\t\t\t\tcallback,                                                                                                          // 2504\n\t\t\t\toSettings                                                                                                          // 2505\n\t\t\t);                                                                                                                  // 2506\n\t\t}                                                                                                                    // 2507\n\t\telse if ( oSettings.sAjaxSource || typeof ajax === 'string' )                                                        // 2508\n\t\t{                                                                                                                    // 2509\n\t\t\t// DataTables 1.9- compatibility                                                                                    // 2510\n\t\t\toSettings.jqXHR = $.ajax( $.extend( baseAjax, {                                                                     // 2511\n\t\t\t\turl: ajax || oSettings.sAjaxSource                                                                                 // 2512\n\t\t\t} ) );                                                                                                              // 2513\n\t\t}                                                                                                                    // 2514\n\t\telse if ( $.isFunction( ajax ) )                                                                                     // 2515\n\t\t{                                                                                                                    // 2516\n\t\t\t// Is a function - let the caller define what needs to be done                                                      // 2517\n\t\t\toSettings.jqXHR = ajax.call( instance, data, callback, oSettings );                                                 // 2518\n\t\t}                                                                                                                    // 2519\n\t\telse                                                                                                                 // 2520\n\t\t{                                                                                                                    // 2521\n\t\t\t// Object to extend the base settings                                                                               // 2522\n\t\t\toSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );                                                             // 2523\n\t                                                                                                                      // 2524\n\t\t\t// Restore for next time around                                                                                     // 2525\n\t\t\tajax.data = ajaxData;                                                                                               // 2526\n\t\t}                                                                                                                    // 2527\n\t}                                                                                                                     // 2528\n\t                                                                                                                      // 2529\n\t                                                                                                                      // 2530\n\t/**                                                                                                                   // 2531\n\t * Update the table using an Ajax call                                                                                // 2532\n\t *  @param {object} settings dataTables settings object                                                               // 2533\n\t *  @returns {boolean} Block the table drawing or not                                                                 // 2534\n\t *  @memberof DataTable#oApi                                                                                          // 2535\n\t */                                                                                                                   // 2536\n\tfunction _fnAjaxUpdate( settings )                                                                                    // 2537\n\t{                                                                                                                     // 2538\n\t\tif ( settings.bAjaxDataGet ) {                                                                                       // 2539\n\t\t\tsettings.iDraw++;                                                                                                   // 2540\n\t\t\t_fnProcessingDisplay( settings, true );                                                                             // 2541\n\t                                                                                                                      // 2542\n\t\t\t_fnBuildAjax(                                                                                                       // 2543\n\t\t\t\tsettings,                                                                                                          // 2544\n\t\t\t\t_fnAjaxParameters( settings ),                                                                                     // 2545\n\t\t\t\tfunction(json) {                                                                                                   // 2546\n\t\t\t\t\t_fnAjaxUpdateDraw( settings, json );                                                                              // 2547\n\t\t\t\t}                                                                                                                  // 2548\n\t\t\t);                                                                                                                  // 2549\n\t                                                                                                                      // 2550\n\t\t\treturn false;                                                                                                       // 2551\n\t\t}                                                                                                                    // 2552\n\t\treturn true;                                                                                                         // 2553\n\t}                                                                                                                     // 2554\n\t                                                                                                                      // 2555\n\t                                                                                                                      // 2556\n\t/**                                                                                                                   // 2557\n\t * Build up the parameters in an object needed for a server-side processing                                           // 2558\n\t * request. Note that this is basically done twice, is different ways - a modern                                      // 2559\n\t * method which is used by default in DataTables 1.10 which uses objects and                                          // 2560\n\t * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if                                       // 2561\n\t * the sAjaxSource option is used in the initialisation, or the legacyAjax                                            // 2562\n\t * option is set.                                                                                                     // 2563\n\t *  @param {object} oSettings dataTables settings object                                                              // 2564\n\t *  @returns {bool} block the table drawing or not                                                                    // 2565\n\t *  @memberof DataTable#oApi                                                                                          // 2566\n\t */                                                                                                                   // 2567\n\tfunction _fnAjaxParameters( settings )                                                                                // 2568\n\t{                                                                                                                     // 2569\n\t\tvar                                                                                                                  // 2570\n\t\t\tcolumns = settings.aoColumns,                                                                                       // 2571\n\t\t\tcolumnCount = columns.length,                                                                                       // 2572\n\t\t\tfeatures = settings.oFeatures,                                                                                      // 2573\n\t\t\tpreSearch = settings.oPreviousSearch,                                                                               // 2574\n\t\t\tpreColSearch = settings.aoPreSearchCols,                                                                            // 2575\n\t\t\ti, data = [], dataProp, column, columnSearch,                                                                       // 2576\n\t\t\tsort = _fnSortFlatten( settings ),                                                                                  // 2577\n\t\t\tdisplayStart = settings._iDisplayStart,                                                                             // 2578\n\t\t\tdisplayLength = features.bPaginate !== false ?                                                                      // 2579\n\t\t\t\tsettings._iDisplayLength :                                                                                         // 2580\n\t\t\t\t-1;                                                                                                                // 2581\n\t                                                                                                                      // 2582\n\t\tvar param = function ( name, value ) {                                                                               // 2583\n\t\t\tdata.push( { 'name': name, 'value': value } );                                                                      // 2584\n\t\t};                                                                                                                   // 2585\n\t                                                                                                                      // 2586\n\t\t// DataTables 1.9- compatible method                                                                                 // 2587\n\t\tparam( 'sEcho',          settings.iDraw );                                                                           // 2588\n\t\tparam( 'iColumns',       columnCount );                                                                              // 2589\n\t\tparam( 'sColumns',       _pluck( columns, 'sName' ).join(',') );                                                     // 2590\n\t\tparam( 'iDisplayStart',  displayStart );                                                                             // 2591\n\t\tparam( 'iDisplayLength', displayLength );                                                                            // 2592\n\t                                                                                                                      // 2593\n\t\t// DataTables 1.10+ method                                                                                           // 2594\n\t\tvar d = {                                                                                                            // 2595\n\t\t\tdraw:    settings.iDraw,                                                                                            // 2596\n\t\t\tcolumns: [],                                                                                                        // 2597\n\t\t\torder:   [],                                                                                                        // 2598\n\t\t\tstart:   displayStart,                                                                                              // 2599\n\t\t\tlength:  displayLength,                                                                                             // 2600\n\t\t\tsearch:  {                                                                                                          // 2601\n\t\t\t\tvalue: preSearch.sSearch,                                                                                          // 2602\n\t\t\t\tregex: preSearch.bRegex                                                                                            // 2603\n\t\t\t}                                                                                                                   // 2604\n\t\t};                                                                                                                   // 2605\n\t                                                                                                                      // 2606\n\t\tfor ( i=0 ; i<columnCount ; i++ ) {                                                                                  // 2607\n\t\t\tcolumn = columns[i];                                                                                                // 2608\n\t\t\tcolumnSearch = preColSearch[i];                                                                                     // 2609\n\t\t\tdataProp = typeof column.mData==\"function\" ? 'function' : column.mData ;                                            // 2610\n\t                                                                                                                      // 2611\n\t\t\td.columns.push( {                                                                                                   // 2612\n\t\t\t\tdata:       dataProp,                                                                                              // 2613\n\t\t\t\tname:       column.sName,                                                                                          // 2614\n\t\t\t\tsearchable: column.bSearchable,                                                                                    // 2615\n\t\t\t\torderable:  column.bSortable,                                                                                      // 2616\n\t\t\t\tsearch:     {                                                                                                      // 2617\n\t\t\t\t\tvalue: columnSearch.sSearch,                                                                                      // 2618\n\t\t\t\t\tregex: columnSearch.bRegex                                                                                        // 2619\n\t\t\t\t}                                                                                                                  // 2620\n\t\t\t} );                                                                                                                // 2621\n\t                                                                                                                      // 2622\n\t\t\tparam( \"mDataProp_\"+i, dataProp );                                                                                  // 2623\n\t                                                                                                                      // 2624\n\t\t\tif ( features.bFilter ) {                                                                                           // 2625\n\t\t\t\tparam( 'sSearch_'+i,     columnSearch.sSearch );                                                                   // 2626\n\t\t\t\tparam( 'bRegex_'+i,      columnSearch.bRegex );                                                                    // 2627\n\t\t\t\tparam( 'bSearchable_'+i, column.bSearchable );                                                                     // 2628\n\t\t\t}                                                                                                                   // 2629\n\t                                                                                                                      // 2630\n\t\t\tif ( features.bSort ) {                                                                                             // 2631\n\t\t\t\tparam( 'bSortable_'+i, column.bSortable );                                                                         // 2632\n\t\t\t}                                                                                                                   // 2633\n\t\t}                                                                                                                    // 2634\n\t                                                                                                                      // 2635\n\t\tif ( features.bFilter ) {                                                                                            // 2636\n\t\t\tparam( 'sSearch', preSearch.sSearch );                                                                              // 2637\n\t\t\tparam( 'bRegex', preSearch.bRegex );                                                                                // 2638\n\t\t}                                                                                                                    // 2639\n\t                                                                                                                      // 2640\n\t\tif ( features.bSort ) {                                                                                              // 2641\n\t\t\t$.each( sort, function ( i, val ) {                                                                                 // 2642\n\t\t\t\td.order.push( { column: val.col, dir: val.dir } );                                                                 // 2643\n\t                                                                                                                      // 2644\n\t\t\t\tparam( 'iSortCol_'+i, val.col );                                                                                   // 2645\n\t\t\t\tparam( 'sSortDir_'+i, val.dir );                                                                                   // 2646\n\t\t\t} );                                                                                                                // 2647\n\t                                                                                                                      // 2648\n\t\t\tparam( 'iSortingCols', sort.length );                                                                               // 2649\n\t\t}                                                                                                                    // 2650\n\t                                                                                                                      // 2651\n\t\t// If the legacy.ajax parameter is null, then we automatically decide which                                          // 2652\n\t\t// form to use, based on sAjaxSource                                                                                 // 2653\n\t\tvar legacy = DataTable.ext.legacy.ajax;                                                                              // 2654\n\t\tif ( legacy === null ) {                                                                                             // 2655\n\t\t\treturn settings.sAjaxSource ? data : d;                                                                             // 2656\n\t\t}                                                                                                                    // 2657\n\t                                                                                                                      // 2658\n\t\t// Otherwise, if legacy has been specified then we use that to decide on the                                         // 2659\n\t\t// form                                                                                                              // 2660\n\t\treturn legacy ? data : d;                                                                                            // 2661\n\t}                                                                                                                     // 2662\n\t                                                                                                                      // 2663\n\t                                                                                                                      // 2664\n\t/**                                                                                                                   // 2665\n\t * Data the data from the server (nuking the old) and redraw the table                                                // 2666\n\t *  @param {object} oSettings dataTables settings object                                                              // 2667\n\t *  @param {object} json json data return from the server.                                                            // 2668\n\t *  @param {string} json.sEcho Tracking flag for DataTables to match requests                                         // 2669\n\t *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering                   // 2670\n\t *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering                // 2671\n\t *  @param {array} json.aaData The data to display on this page                                                       // 2672\n\t *  @param {string} [json.sColumns] Column ordering (sName, comma separated)                                          // 2673\n\t *  @memberof DataTable#oApi                                                                                          // 2674\n\t */                                                                                                                   // 2675\n\tfunction _fnAjaxUpdateDraw ( settings, json )                                                                         // 2676\n\t{                                                                                                                     // 2677\n\t\t// v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.                                                // 2678\n\t\t// Support both                                                                                                      // 2679\n\t\tvar compat = function ( old, modern ) {                                                                              // 2680\n\t\t\treturn json[old] !== undefined ? json[old] : json[modern];                                                          // 2681\n\t\t};                                                                                                                   // 2682\n\t                                                                                                                      // 2683\n\t\tvar data = _fnAjaxDataSrc( settings, json );                                                                         // 2684\n\t\tvar draw            = compat( 'sEcho',                'draw' );                                                      // 2685\n\t\tvar recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );                                              // 2686\n\t\tvar recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );                                           // 2687\n\t                                                                                                                      // 2688\n\t\tif ( draw ) {                                                                                                        // 2689\n\t\t\t// Protect against out of sequence returns                                                                          // 2690\n\t\t\tif ( draw*1 < settings.iDraw ) {                                                                                    // 2691\n\t\t\t\treturn;                                                                                                            // 2692\n\t\t\t}                                                                                                                   // 2693\n\t\t\tsettings.iDraw = draw * 1;                                                                                          // 2694\n\t\t}                                                                                                                    // 2695\n\t                                                                                                                      // 2696\n\t\t_fnClearTable( settings );                                                                                           // 2697\n\t\tsettings._iRecordsTotal   = parseInt(recordsTotal, 10);                                                              // 2698\n\t\tsettings._iRecordsDisplay = parseInt(recordsFiltered, 10);                                                           // 2699\n\t                                                                                                                      // 2700\n\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {                                                                     // 2701\n\t\t\t_fnAddData( settings, data[i] );                                                                                    // 2702\n\t\t}                                                                                                                    // 2703\n\t\tsettings.aiDisplay = settings.aiDisplayMaster.slice();                                                               // 2704\n\t                                                                                                                      // 2705\n\t\tsettings.bAjaxDataGet = false;                                                                                       // 2706\n\t\t_fnDraw( settings );                                                                                                 // 2707\n\t                                                                                                                      // 2708\n\t\tif ( ! settings._bInitComplete ) {                                                                                   // 2709\n\t\t\t_fnInitComplete( settings, json );                                                                                  // 2710\n\t\t}                                                                                                                    // 2711\n\t                                                                                                                      // 2712\n\t\tsettings.bAjaxDataGet = true;                                                                                        // 2713\n\t\t_fnProcessingDisplay( settings, false );                                                                             // 2714\n\t}                                                                                                                     // 2715\n\t                                                                                                                      // 2716\n\t                                                                                                                      // 2717\n\t/**                                                                                                                   // 2718\n\t * Get the data from the JSON data source to use for drawing a table. Using                                           // 2719\n\t * `_fnGetObjectDataFn` allows the data to be sourced from a property of the                                          // 2720\n\t * source object, or from a processing function.                                                                      // 2721\n\t *  @param {object} oSettings dataTables settings object                                                              // 2722\n\t *  @param  {object} json Data source object / array from the server                                                  // 2723\n\t *  @return {array} Array of data to use                                                                              // 2724\n\t */                                                                                                                   // 2725\n\tfunction _fnAjaxDataSrc ( oSettings, json )                                                                           // 2726\n\t{                                                                                                                     // 2727\n\t\tvar dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?                            // 2728\n\t\t\toSettings.ajax.dataSrc :                                                                                            // 2729\n\t\t\toSettings.sAjaxDataProp; // Compatibility with 1.9-.                                                                // 2730\n\t                                                                                                                      // 2731\n\t\t// Compatibility with 1.9-. In order to read from aaData, check if the                                               // 2732\n\t\t// default has been changed, if not, check for aaData                                                                // 2733\n\t\tif ( dataSrc === 'data' ) {                                                                                          // 2734\n\t\t\treturn json.aaData || json[dataSrc];                                                                                // 2735\n\t\t}                                                                                                                    // 2736\n\t                                                                                                                      // 2737\n\t\treturn dataSrc !== \"\" ?                                                                                              // 2738\n\t\t\t_fnGetObjectDataFn( dataSrc )( json ) :                                                                             // 2739\n\t\t\tjson;                                                                                                               // 2740\n\t}                                                                                                                     // 2741\n\t                                                                                                                      // 2742\n\t/**                                                                                                                   // 2743\n\t * Generate the node required for filtering text                                                                      // 2744\n\t *  @returns {node} Filter control element                                                                            // 2745\n\t *  @param {object} oSettings dataTables settings object                                                              // 2746\n\t *  @memberof DataTable#oApi                                                                                          // 2747\n\t */                                                                                                                   // 2748\n\tfunction _fnFeatureHtmlFilter ( settings )                                                                            // 2749\n\t{                                                                                                                     // 2750\n\t\tvar classes = settings.oClasses;                                                                                     // 2751\n\t\tvar tableId = settings.sTableId;                                                                                     // 2752\n\t\tvar language = settings.oLanguage;                                                                                   // 2753\n\t\tvar previousSearch = settings.oPreviousSearch;                                                                       // 2754\n\t\tvar features = settings.aanFeatures;                                                                                 // 2755\n\t\tvar input = '<input type=\"search\" class=\"'+classes.sFilterInput+'\"/>';                                               // 2756\n\t                                                                                                                      // 2757\n\t\tvar str = language.sSearch;                                                                                          // 2758\n\t\tstr = str.match(/_INPUT_/) ?                                                                                         // 2759\n\t\t\tstr.replace('_INPUT_', input) :                                                                                     // 2760\n\t\t\tstr+input;                                                                                                          // 2761\n\t                                                                                                                      // 2762\n\t\tvar filter = $('<div/>', {                                                                                           // 2763\n\t\t\t\t'id': ! features.f ? tableId+'_filter' : null,                                                                     // 2764\n\t\t\t\t'class': classes.sFilter                                                                                           // 2765\n\t\t\t} )                                                                                                                 // 2766\n\t\t\t.append( $('<label/>' ).append( str ) );                                                                            // 2767\n\t                                                                                                                      // 2768\n\t\tvar searchFn = function() {                                                                                          // 2769\n\t\t\t/* Update all other filter input elements for the new display */                                                    // 2770\n\t\t\tvar n = features.f;                                                                                                 // 2771\n\t\t\tvar val = !this.value ? \"\" : this.value; // mental IE8 fix :-(                                                      // 2772\n\t                                                                                                                      // 2773\n\t\t\t/* Now do the filter */                                                                                             // 2774\n\t\t\tif ( val != previousSearch.sSearch ) {                                                                              // 2775\n\t\t\t\t_fnFilterComplete( settings, {                                                                                     // 2776\n\t\t\t\t\t\"sSearch\": val,                                                                                                   // 2777\n\t\t\t\t\t\"bRegex\": previousSearch.bRegex,                                                                                  // 2778\n\t\t\t\t\t\"bSmart\": previousSearch.bSmart ,                                                                                 // 2779\n\t\t\t\t\t\"bCaseInsensitive\": previousSearch.bCaseInsensitive                                                               // 2780\n\t\t\t\t} );                                                                                                               // 2781\n\t                                                                                                                      // 2782\n\t\t\t\t// Need to redraw, without resorting                                                                               // 2783\n\t\t\t\tsettings._iDisplayStart = 0;                                                                                       // 2784\n\t\t\t\t_fnDraw( settings );                                                                                               // 2785\n\t\t\t}                                                                                                                   // 2786\n\t\t};                                                                                                                   // 2787\n\t                                                                                                                      // 2788\n\t\tvar searchDelay = settings.searchDelay !== null ?                                                                    // 2789\n\t\t\tsettings.searchDelay :                                                                                              // 2790\n\t\t\t_fnDataSource( settings ) === 'ssp' ?                                                                               // 2791\n\t\t\t\t400 :                                                                                                              // 2792\n\t\t\t\t0;                                                                                                                 // 2793\n\t                                                                                                                      // 2794\n\t\tvar jqFilter = $('input', filter)                                                                                    // 2795\n\t\t\t.val( previousSearch.sSearch )                                                                                      // 2796\n\t\t\t.attr( 'placeholder', language.sSearchPlaceholder )                                                                 // 2797\n\t\t\t.bind(                                                                                                              // 2798\n\t\t\t\t'keyup.DT search.DT input.DT paste.DT cut.DT',                                                                     // 2799\n\t\t\t\tsearchDelay ?                                                                                                      // 2800\n\t\t\t\t\t_fnThrottle( searchFn, searchDelay ) :                                                                            // 2801\n\t\t\t\t\tsearchFn                                                                                                          // 2802\n\t\t\t)                                                                                                                   // 2803\n\t\t\t.bind( 'keypress.DT', function(e) {                                                                                 // 2804\n\t\t\t\t/* Prevent form submission */                                                                                      // 2805\n\t\t\t\tif ( e.keyCode == 13 ) {                                                                                           // 2806\n\t\t\t\t\treturn false;                                                                                                     // 2807\n\t\t\t\t}                                                                                                                  // 2808\n\t\t\t} )                                                                                                                 // 2809\n\t\t\t.attr('aria-controls', tableId);                                                                                    // 2810\n\t                                                                                                                      // 2811\n\t\t// Update the input elements whenever the table is filtered                                                          // 2812\n\t\t$(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {                                                          // 2813\n\t\t\tif ( settings === s ) {                                                                                             // 2814\n\t\t\t\t// IE9 throws an 'unknown error' if document.activeElement is used                                                 // 2815\n\t\t\t\t// inside an iframe or frame...                                                                                    // 2816\n\t\t\t\ttry {                                                                                                              // 2817\n\t\t\t\t\tif ( jqFilter[0] !== document.activeElement ) {                                                                   // 2818\n\t\t\t\t\t\tjqFilter.val( previousSearch.sSearch );                                                                          // 2819\n\t\t\t\t\t}                                                                                                                 // 2820\n\t\t\t\t}                                                                                                                  // 2821\n\t\t\t\tcatch ( e ) {}                                                                                                     // 2822\n\t\t\t}                                                                                                                   // 2823\n\t\t} );                                                                                                                 // 2824\n\t                                                                                                                      // 2825\n\t\treturn filter[0];                                                                                                    // 2826\n\t}                                                                                                                     // 2827\n\t                                                                                                                      // 2828\n\t                                                                                                                      // 2829\n\t/**                                                                                                                   // 2830\n\t * Filter the table using both the global filter and column based filtering                                           // 2831\n\t *  @param {object} oSettings dataTables settings object                                                              // 2832\n\t *  @param {object} oSearch search information                                                                        // 2833\n\t *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)                            // 2834\n\t *  @memberof DataTable#oApi                                                                                          // 2835\n\t */                                                                                                                   // 2836\n\tfunction _fnFilterComplete ( oSettings, oInput, iForce )                                                              // 2837\n\t{                                                                                                                     // 2838\n\t\tvar oPrevSearch = oSettings.oPreviousSearch;                                                                         // 2839\n\t\tvar aoPrevSearch = oSettings.aoPreSearchCols;                                                                        // 2840\n\t\tvar fnSaveFilter = function ( oFilter ) {                                                                            // 2841\n\t\t\t/* Save the filtering values */                                                                                     // 2842\n\t\t\toPrevSearch.sSearch = oFilter.sSearch;                                                                              // 2843\n\t\t\toPrevSearch.bRegex = oFilter.bRegex;                                                                                // 2844\n\t\t\toPrevSearch.bSmart = oFilter.bSmart;                                                                                // 2845\n\t\t\toPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;                                                            // 2846\n\t\t};                                                                                                                   // 2847\n\t\tvar fnRegex = function ( o ) {                                                                                       // 2848\n\t\t\t// Backwards compatibility with the bEscapeRegex option                                                             // 2849\n\t\t\treturn o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;                                                   // 2850\n\t\t};                                                                                                                   // 2851\n\t                                                                                                                      // 2852\n\t\t// Resolve any column types that are unknown due to addition or invalidation                                         // 2853\n\t\t// @todo As per sort - can this be moved into an event handler?                                                      // 2854\n\t\t_fnColumnTypes( oSettings );                                                                                         // 2855\n\t                                                                                                                      // 2856\n\t\t/* In server-side processing all filtering is done by the server, so no point hanging around here */                 // 2857\n\t\tif ( _fnDataSource( oSettings ) != 'ssp' )                                                                           // 2858\n\t\t{                                                                                                                    // 2859\n\t\t\t/* Global filter */                                                                                                 // 2860\n\t\t\t_fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );            // 2861\n\t\t\tfnSaveFilter( oInput );                                                                                             // 2862\n\t                                                                                                                      // 2863\n\t\t\t/* Now do the individual column filter */                                                                           // 2864\n\t\t\tfor ( var i=0 ; i<aoPrevSearch.length ; i++ )                                                                       // 2865\n\t\t\t{                                                                                                                   // 2866\n\t\t\t\t_fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),                                  // 2867\n\t\t\t\t\taoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );                                                       // 2868\n\t\t\t}                                                                                                                   // 2869\n\t                                                                                                                      // 2870\n\t\t\t/* Custom filtering */                                                                                              // 2871\n\t\t\t_fnFilterCustom( oSettings );                                                                                       // 2872\n\t\t}                                                                                                                    // 2873\n\t\telse                                                                                                                 // 2874\n\t\t{                                                                                                                    // 2875\n\t\t\tfnSaveFilter( oInput );                                                                                             // 2876\n\t\t}                                                                                                                    // 2877\n\t                                                                                                                      // 2878\n\t\t/* Tell the draw function we have been filtering */                                                                  // 2879\n\t\toSettings.bFiltered = true;                                                                                          // 2880\n\t\t_fnCallbackFire( oSettings, null, 'search', [oSettings] );                                                           // 2881\n\t}                                                                                                                     // 2882\n\t                                                                                                                      // 2883\n\t                                                                                                                      // 2884\n\t/**                                                                                                                   // 2885\n\t * Apply custom filtering functions                                                                                   // 2886\n\t *  @param {object} oSettings dataTables settings object                                                              // 2887\n\t *  @memberof DataTable#oApi                                                                                          // 2888\n\t */                                                                                                                   // 2889\n\tfunction _fnFilterCustom( settings )                                                                                  // 2890\n\t{                                                                                                                     // 2891\n\t\tvar filters = DataTable.ext.search;                                                                                  // 2892\n\t\tvar displayRows = settings.aiDisplay;                                                                                // 2893\n\t\tvar row, rowIdx;                                                                                                     // 2894\n\t                                                                                                                      // 2895\n\t\tfor ( var i=0, ien=filters.length ; i<ien ; i++ ) {                                                                  // 2896\n\t\t\tvar rows = [];                                                                                                      // 2897\n\t                                                                                                                      // 2898\n\t\t\t// Loop over each row and see if it should be included                                                              // 2899\n\t\t\tfor ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {                                                             // 2900\n\t\t\t\trowIdx = displayRows[ j ];                                                                                         // 2901\n\t\t\t\trow = settings.aoData[ rowIdx ];                                                                                   // 2902\n\t                                                                                                                      // 2903\n\t\t\t\tif ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {                                           // 2904\n\t\t\t\t\trows.push( rowIdx );                                                                                              // 2905\n\t\t\t\t}                                                                                                                  // 2906\n\t\t\t}                                                                                                                   // 2907\n\t                                                                                                                      // 2908\n\t\t\t// So the array reference doesn't break set the results into the                                                    // 2909\n\t\t\t// existing array                                                                                                   // 2910\n\t\t\tdisplayRows.length = 0;                                                                                             // 2911\n\t\t\tdisplayRows.push.apply( displayRows, rows );                                                                        // 2912\n\t\t}                                                                                                                    // 2913\n\t}                                                                                                                     // 2914\n\t                                                                                                                      // 2915\n\t                                                                                                                      // 2916\n\t/**                                                                                                                   // 2917\n\t * Filter the table on a per-column basis                                                                             // 2918\n\t *  @param {object} oSettings dataTables settings object                                                              // 2919\n\t *  @param {string} sInput string to filter on                                                                        // 2920\n\t *  @param {int} iColumn column to filter                                                                             // 2921\n\t *  @param {bool} bRegex treat search string as a regular expression or not                                           // 2922\n\t *  @param {bool} bSmart use smart filtering or not                                                                   // 2923\n\t *  @param {bool} bCaseInsensitive Do case insenstive matching or not                                                 // 2924\n\t *  @memberof DataTable#oApi                                                                                          // 2925\n\t */                                                                                                                   // 2926\n\tfunction _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )                               // 2927\n\t{                                                                                                                     // 2928\n\t\tif ( searchStr === '' ) {                                                                                            // 2929\n\t\t\treturn;                                                                                                             // 2930\n\t\t}                                                                                                                    // 2931\n\t                                                                                                                      // 2932\n\t\tvar data;                                                                                                            // 2933\n\t\tvar display = settings.aiDisplay;                                                                                    // 2934\n\t\tvar rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );                                    // 2935\n\t                                                                                                                      // 2936\n\t\tfor ( var i=display.length-1 ; i>=0 ; i-- ) {                                                                        // 2937\n\t\t\tdata = settings.aoData[ display[i] ]._aFilterData[ colIdx ];                                                        // 2938\n\t                                                                                                                      // 2939\n\t\t\tif ( ! rpSearch.test( data ) ) {                                                                                    // 2940\n\t\t\t\tdisplay.splice( i, 1 );                                                                                            // 2941\n\t\t\t}                                                                                                                   // 2942\n\t\t}                                                                                                                    // 2943\n\t}                                                                                                                     // 2944\n\t                                                                                                                      // 2945\n\t                                                                                                                      // 2946\n\t/**                                                                                                                   // 2947\n\t * Filter the data table based on user input and draw the table                                                       // 2948\n\t *  @param {object} settings dataTables settings object                                                               // 2949\n\t *  @param {string} input string to filter on                                                                         // 2950\n\t *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)                    // 2951\n\t *  @param {bool} regex treat as a regular expression or not                                                          // 2952\n\t *  @param {bool} smart perform smart filtering or not                                                                // 2953\n\t *  @param {bool} caseInsensitive Do case insenstive matching or not                                                  // 2954\n\t *  @memberof DataTable#oApi                                                                                          // 2955\n\t */                                                                                                                   // 2956\n\tfunction _fnFilter( settings, input, force, regex, smart, caseInsensitive )                                           // 2957\n\t{                                                                                                                     // 2958\n\t\tvar rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );                                        // 2959\n\t\tvar prevSearch = settings.oPreviousSearch.sSearch;                                                                   // 2960\n\t\tvar displayMaster = settings.aiDisplayMaster;                                                                        // 2961\n\t\tvar display, invalidated, i;                                                                                         // 2962\n\t                                                                                                                      // 2963\n\t\t// Need to take account of custom filtering functions - always filter                                                // 2964\n\t\tif ( DataTable.ext.search.length !== 0 ) {                                                                           // 2965\n\t\t\tforce = true;                                                                                                       // 2966\n\t\t}                                                                                                                    // 2967\n\t                                                                                                                      // 2968\n\t\t// Check if any of the rows were invalidated                                                                         // 2969\n\t\tinvalidated = _fnFilterData( settings );                                                                             // 2970\n\t                                                                                                                      // 2971\n\t\t// If the input is blank - we just want the full data set                                                            // 2972\n\t\tif ( input.length <= 0 ) {                                                                                           // 2973\n\t\t\tsettings.aiDisplay = displayMaster.slice();                                                                         // 2974\n\t\t}                                                                                                                    // 2975\n\t\telse {                                                                                                               // 2976\n\t\t\t// New search - start from the master array                                                                         // 2977\n\t\t\tif ( invalidated ||                                                                                                 // 2978\n\t\t\t\t force ||                                                                                                          // 2979\n\t\t\t\t prevSearch.length > input.length ||                                                                               // 2980\n\t\t\t\t input.indexOf(prevSearch) !== 0 ||                                                                                // 2981\n\t\t\t\t settings.bSorted // On resort, the display master needs to be                                                     // 2982\n\t\t\t\t                  // re-filtered since indexes will have changed                                                   // 2983\n\t\t\t) {                                                                                                                 // 2984\n\t\t\t\tsettings.aiDisplay = displayMaster.slice();                                                                        // 2985\n\t\t\t}                                                                                                                   // 2986\n\t                                                                                                                      // 2987\n\t\t\t// Search the display array                                                                                         // 2988\n\t\t\tdisplay = settings.aiDisplay;                                                                                       // 2989\n\t                                                                                                                      // 2990\n\t\t\tfor ( i=display.length-1 ; i>=0 ; i-- ) {                                                                           // 2991\n\t\t\t\tif ( ! rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {                                              // 2992\n\t\t\t\t\tdisplay.splice( i, 1 );                                                                                           // 2993\n\t\t\t\t}                                                                                                                  // 2994\n\t\t\t}                                                                                                                   // 2995\n\t\t}                                                                                                                    // 2996\n\t}                                                                                                                     // 2997\n\t                                                                                                                      // 2998\n\t                                                                                                                      // 2999\n\t/**                                                                                                                   // 3000\n\t * Build a regular expression object suitable for searching a table                                                   // 3001\n\t *  @param {string} sSearch string to search for                                                                      // 3002\n\t *  @param {bool} bRegex treat as a regular expression or not                                                         // 3003\n\t *  @param {bool} bSmart perform smart filtering or not                                                               // 3004\n\t *  @param {bool} bCaseInsensitive Do case insensitive matching or not                                                // 3005\n\t *  @returns {RegExp} constructed object                                                                              // 3006\n\t *  @memberof DataTable#oApi                                                                                          // 3007\n\t */                                                                                                                   // 3008\n\tfunction _fnFilterCreateSearch( search, regex, smart, caseInsensitive )                                               // 3009\n\t{                                                                                                                     // 3010\n\t\tsearch = regex ?                                                                                                     // 3011\n\t\t\tsearch :                                                                                                            // 3012\n\t\t\t_fnEscapeRegex( search );                                                                                           // 3013\n\t\t                                                                                                                     // 3014\n\t\tif ( smart ) {                                                                                                       // 3015\n\t\t\t/* For smart filtering we want to allow the search to work regardless of                                            // 3016\n\t\t\t * word order. We also want double quoted text to be preserved, so word                                             // 3017\n\t\t\t * order is important - a la google. So this is what we want to                                                     // 3018\n\t\t\t * generate:                                                                                                        // 3019\n\t\t\t *                                                                                                                  // 3020\n\t\t\t * ^(?=.*?\\bone\\b)(?=.*?\\btwo three\\b)(?=.*?\\bfour\\b).*$                                                            // 3021\n\t\t\t */                                                                                                                 // 3022\n\t\t\tvar a = $.map( search.match( /\"[^\"]+\"|[^ ]+/g ) || [''], function ( word ) {                                        // 3023\n\t\t\t\tif ( word.charAt(0) === '\"' ) {                                                                                    // 3024\n\t\t\t\t\tvar m = word.match( /^\"(.*)\"$/ );                                                                                 // 3025\n\t\t\t\t\tword = m ? m[1] : word;                                                                                           // 3026\n\t\t\t\t}                                                                                                                  // 3027\n\t                                                                                                                      // 3028\n\t\t\t\treturn word.replace('\"', '');                                                                                      // 3029\n\t\t\t} );                                                                                                                // 3030\n\t                                                                                                                      // 3031\n\t\t\tsearch = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';                                                                      // 3032\n\t\t}                                                                                                                    // 3033\n\t                                                                                                                      // 3034\n\t\treturn new RegExp( search, caseInsensitive ? 'i' : '' );                                                             // 3035\n\t}                                                                                                                     // 3036\n\t                                                                                                                      // 3037\n\t                                                                                                                      // 3038\n\t/**                                                                                                                   // 3039\n\t * Escape a string such that it can be used in a regular expression                                                   // 3040\n\t *  @param {string} sVal string to escape                                                                             // 3041\n\t *  @returns {string} escaped string                                                                                  // 3042\n\t *  @memberof DataTable#oApi                                                                                          // 3043\n\t */                                                                                                                   // 3044\n\tfunction _fnEscapeRegex ( sVal )                                                                                      // 3045\n\t{                                                                                                                     // 3046\n\t\treturn sVal.replace( _re_escape_regex, '\\\\$1' );                                                                     // 3047\n\t}                                                                                                                     // 3048\n\t                                                                                                                      // 3049\n\t                                                                                                                      // 3050\n\t                                                                                                                      // 3051\n\tvar __filter_div = $('<div>')[0];                                                                                     // 3052\n\tvar __filter_div_textContent = __filter_div.textContent !== undefined;                                                // 3053\n\t                                                                                                                      // 3054\n\t// Update the filtering data for each row if needed (by invalidation or first run)                                    // 3055\n\tfunction _fnFilterData ( settings )                                                                                   // 3056\n\t{                                                                                                                     // 3057\n\t\tvar columns = settings.aoColumns;                                                                                    // 3058\n\t\tvar column;                                                                                                          // 3059\n\t\tvar i, j, ien, jen, filterData, cellData, row;                                                                       // 3060\n\t\tvar fomatters = DataTable.ext.type.search;                                                                           // 3061\n\t\tvar wasInvalidated = false;                                                                                          // 3062\n\t                                                                                                                      // 3063\n\t\tfor ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {                                                              // 3064\n\t\t\trow = settings.aoData[i];                                                                                           // 3065\n\t                                                                                                                      // 3066\n\t\t\tif ( ! row._aFilterData ) {                                                                                         // 3067\n\t\t\t\tfilterData = [];                                                                                                   // 3068\n\t                                                                                                                      // 3069\n\t\t\t\tfor ( j=0, jen=columns.length ; j<jen ; j++ ) {                                                                    // 3070\n\t\t\t\t\tcolumn = columns[j];                                                                                              // 3071\n\t                                                                                                                      // 3072\n\t\t\t\t\tif ( column.bSearchable ) {                                                                                       // 3073\n\t\t\t\t\t\tcellData = _fnGetCellData( settings, i, j, 'filter' );                                                           // 3074\n\t                                                                                                                      // 3075\n\t\t\t\t\t\tif ( fomatters[ column.sType ] ) {                                                                               // 3076\n\t\t\t\t\t\t\tcellData = fomatters[ column.sType ]( cellData );                                                               // 3077\n\t\t\t\t\t\t}                                                                                                                // 3078\n\t                                                                                                                      // 3079\n\t\t\t\t\t\t// Search in DataTables 1.10 is string based. In 1.11 this                                                       // 3080\n\t\t\t\t\t\t// should be altered to also allow strict type checking.                                                         // 3081\n\t\t\t\t\t\tif ( cellData === null ) {                                                                                       // 3082\n\t\t\t\t\t\t\tcellData = '';                                                                                                  // 3083\n\t\t\t\t\t\t}                                                                                                                // 3084\n\t                                                                                                                      // 3085\n\t\t\t\t\t\tif ( typeof cellData !== 'string' && cellData.toString ) {                                                       // 3086\n\t\t\t\t\t\t\tcellData = cellData.toString();                                                                                 // 3087\n\t\t\t\t\t\t}                                                                                                                // 3088\n\t\t\t\t\t}                                                                                                                 // 3089\n\t\t\t\t\telse {                                                                                                            // 3090\n\t\t\t\t\t\tcellData = '';                                                                                                   // 3091\n\t\t\t\t\t}                                                                                                                 // 3092\n\t                                                                                                                      // 3093\n\t\t\t\t\t// If it looks like there is an HTML entity in the string,                                                        // 3094\n\t\t\t\t\t// attempt to decode it so sorting works as expected. Note that                                                   // 3095\n\t\t\t\t\t// we could use a single line of jQuery to do this, but the DOM                                                   // 3096\n\t\t\t\t\t// method used here is much faster http://jsperf.com/html-decode                                                  // 3097\n\t\t\t\t\tif ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {                                                         // 3098\n\t\t\t\t\t\t__filter_div.innerHTML = cellData;                                                                               // 3099\n\t\t\t\t\t\tcellData = __filter_div_textContent ?                                                                            // 3100\n\t\t\t\t\t\t\t__filter_div.textContent :                                                                                      // 3101\n\t\t\t\t\t\t\t__filter_div.innerText;                                                                                         // 3102\n\t\t\t\t\t}                                                                                                                 // 3103\n\t                                                                                                                      // 3104\n\t\t\t\t\tif ( cellData.replace ) {                                                                                         // 3105\n\t\t\t\t\t\tcellData = cellData.replace(/[\\r\\n]/g, '');                                                                      // 3106\n\t\t\t\t\t}                                                                                                                 // 3107\n\t                                                                                                                      // 3108\n\t\t\t\t\tfilterData.push( cellData );                                                                                      // 3109\n\t\t\t\t}                                                                                                                  // 3110\n\t                                                                                                                      // 3111\n\t\t\t\trow._aFilterData = filterData;                                                                                     // 3112\n\t\t\t\trow._sFilterRow = filterData.join('  ');                                                                           // 3113\n\t\t\t\twasInvalidated = true;                                                                                             // 3114\n\t\t\t}                                                                                                                   // 3115\n\t\t}                                                                                                                    // 3116\n\t                                                                                                                      // 3117\n\t\treturn wasInvalidated;                                                                                               // 3118\n\t}                                                                                                                     // 3119\n\t                                                                                                                      // 3120\n\t                                                                                                                      // 3121\n\t/**                                                                                                                   // 3122\n\t * Convert from the internal Hungarian notation to camelCase for external                                             // 3123\n\t * interaction                                                                                                        // 3124\n\t *  @param {object} obj Object to convert                                                                             // 3125\n\t *  @returns {object} Inverted object                                                                                 // 3126\n\t *  @memberof DataTable#oApi                                                                                          // 3127\n\t */                                                                                                                   // 3128\n\tfunction _fnSearchToCamel ( obj )                                                                                     // 3129\n\t{                                                                                                                     // 3130\n\t\treturn {                                                                                                             // 3131\n\t\t\tsearch:          obj.sSearch,                                                                                       // 3132\n\t\t\tsmart:           obj.bSmart,                                                                                        // 3133\n\t\t\tregex:           obj.bRegex,                                                                                        // 3134\n\t\t\tcaseInsensitive: obj.bCaseInsensitive                                                                               // 3135\n\t\t};                                                                                                                   // 3136\n\t}                                                                                                                     // 3137\n\t                                                                                                                      // 3138\n\t                                                                                                                      // 3139\n\t                                                                                                                      // 3140\n\t/**                                                                                                                   // 3141\n\t * Convert from camelCase notation to the internal Hungarian. We could use the                                        // 3142\n\t * Hungarian convert function here, but this is cleaner                                                               // 3143\n\t *  @param {object} obj Object to convert                                                                             // 3144\n\t *  @returns {object} Inverted object                                                                                 // 3145\n\t *  @memberof DataTable#oApi                                                                                          // 3146\n\t */                                                                                                                   // 3147\n\tfunction _fnSearchToHung ( obj )                                                                                      // 3148\n\t{                                                                                                                     // 3149\n\t\treturn {                                                                                                             // 3150\n\t\t\tsSearch:          obj.search,                                                                                       // 3151\n\t\t\tbSmart:           obj.smart,                                                                                        // 3152\n\t\t\tbRegex:           obj.regex,                                                                                        // 3153\n\t\t\tbCaseInsensitive: obj.caseInsensitive                                                                               // 3154\n\t\t};                                                                                                                   // 3155\n\t}                                                                                                                     // 3156\n\t                                                                                                                      // 3157\n\t/**                                                                                                                   // 3158\n\t * Generate the node required for the info display                                                                    // 3159\n\t *  @param {object} oSettings dataTables settings object                                                              // 3160\n\t *  @returns {node} Information element                                                                               // 3161\n\t *  @memberof DataTable#oApi                                                                                          // 3162\n\t */                                                                                                                   // 3163\n\tfunction _fnFeatureHtmlInfo ( settings )                                                                              // 3164\n\t{                                                                                                                     // 3165\n\t\tvar                                                                                                                  // 3166\n\t\t\ttid = settings.sTableId,                                                                                            // 3167\n\t\t\tnodes = settings.aanFeatures.i,                                                                                     // 3168\n\t\t\tn = $('<div/>', {                                                                                                   // 3169\n\t\t\t\t'class': settings.oClasses.sInfo,                                                                                  // 3170\n\t\t\t\t'id': ! nodes ? tid+'_info' : null                                                                                 // 3171\n\t\t\t} );                                                                                                                // 3172\n\t                                                                                                                      // 3173\n\t\tif ( ! nodes ) {                                                                                                     // 3174\n\t\t\t// Update display on each draw                                                                                      // 3175\n\t\t\tsettings.aoDrawCallback.push( {                                                                                     // 3176\n\t\t\t\t\"fn\": _fnUpdateInfo,                                                                                               // 3177\n\t\t\t\t\"sName\": \"information\"                                                                                             // 3178\n\t\t\t} );                                                                                                                // 3179\n\t                                                                                                                      // 3180\n\t\t\tn                                                                                                                   // 3181\n\t\t\t\t.attr( 'role', 'status' )                                                                                          // 3182\n\t\t\t\t.attr( 'aria-live', 'polite' );                                                                                    // 3183\n\t                                                                                                                      // 3184\n\t\t\t// Table is described by our info div                                                                               // 3185\n\t\t\t$(settings.nTable).attr( 'aria-describedby', tid+'_info' );                                                         // 3186\n\t\t}                                                                                                                    // 3187\n\t                                                                                                                      // 3188\n\t\treturn n[0];                                                                                                         // 3189\n\t}                                                                                                                     // 3190\n\t                                                                                                                      // 3191\n\t                                                                                                                      // 3192\n\t/**                                                                                                                   // 3193\n\t * Update the information elements in the display                                                                     // 3194\n\t *  @param {object} settings dataTables settings object                                                               // 3195\n\t *  @memberof DataTable#oApi                                                                                          // 3196\n\t */                                                                                                                   // 3197\n\tfunction _fnUpdateInfo ( settings )                                                                                   // 3198\n\t{                                                                                                                     // 3199\n\t\t/* Show information about the table */                                                                               // 3200\n\t\tvar nodes = settings.aanFeatures.i;                                                                                  // 3201\n\t\tif ( nodes.length === 0 ) {                                                                                          // 3202\n\t\t\treturn;                                                                                                             // 3203\n\t\t}                                                                                                                    // 3204\n\t                                                                                                                      // 3205\n\t\tvar                                                                                                                  // 3206\n\t\t\tlang  = settings.oLanguage,                                                                                         // 3207\n\t\t\tstart = settings._iDisplayStart+1,                                                                                  // 3208\n\t\t\tend   = settings.fnDisplayEnd(),                                                                                    // 3209\n\t\t\tmax   = settings.fnRecordsTotal(),                                                                                  // 3210\n\t\t\ttotal = settings.fnRecordsDisplay(),                                                                                // 3211\n\t\t\tout   = total ?                                                                                                     // 3212\n\t\t\t\tlang.sInfo :                                                                                                       // 3213\n\t\t\t\tlang.sInfoEmpty;                                                                                                   // 3214\n\t                                                                                                                      // 3215\n\t\tif ( total !== max ) {                                                                                               // 3216\n\t\t\t/* Record set after filtering */                                                                                    // 3217\n\t\t\tout += ' ' + lang.sInfoFiltered;                                                                                    // 3218\n\t\t}                                                                                                                    // 3219\n\t                                                                                                                      // 3220\n\t\t// Convert the macros                                                                                                // 3221\n\t\tout += lang.sInfoPostFix;                                                                                            // 3222\n\t\tout = _fnInfoMacros( settings, out );                                                                                // 3223\n\t                                                                                                                      // 3224\n\t\tvar callback = lang.fnInfoCallback;                                                                                  // 3225\n\t\tif ( callback !== null ) {                                                                                           // 3226\n\t\t\tout = callback.call( settings.oInstance,                                                                            // 3227\n\t\t\t\tsettings, start, end, max, total, out                                                                              // 3228\n\t\t\t);                                                                                                                  // 3229\n\t\t}                                                                                                                    // 3230\n\t                                                                                                                      // 3231\n\t\t$(nodes).html( out );                                                                                                // 3232\n\t}                                                                                                                     // 3233\n\t                                                                                                                      // 3234\n\t                                                                                                                      // 3235\n\tfunction _fnInfoMacros ( settings, str )                                                                              // 3236\n\t{                                                                                                                     // 3237\n\t\t// When infinite scrolling, we are always starting at 1. _iDisplayStart is used only                                 // 3238\n\t\t// internally                                                                                                        // 3239\n\t\tvar                                                                                                                  // 3240\n\t\t\tformatter  = settings.fnFormatNumber,                                                                               // 3241\n\t\t\tstart      = settings._iDisplayStart+1,                                                                             // 3242\n\t\t\tlen        = settings._iDisplayLength,                                                                              // 3243\n\t\t\tvis        = settings.fnRecordsDisplay(),                                                                           // 3244\n\t\t\tall        = len === -1;                                                                                            // 3245\n\t                                                                                                                      // 3246\n\t\treturn str.                                                                                                          // 3247\n\t\t\treplace(/_START_/g, formatter.call( settings, start ) ).                                                            // 3248\n\t\t\treplace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).                                          // 3249\n\t\t\treplace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).                                        // 3250\n\t\t\treplace(/_TOTAL_/g, formatter.call( settings, vis ) ).                                                              // 3251\n\t\t\treplace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).                               // 3252\n\t\t\treplace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );                                 // 3253\n\t}                                                                                                                     // 3254\n\t                                                                                                                      // 3255\n\t                                                                                                                      // 3256\n\t                                                                                                                      // 3257\n\t/**                                                                                                                   // 3258\n\t * Draw the table for the first time, adding all required features                                                    // 3259\n\t *  @param {object} settings dataTables settings object                                                               // 3260\n\t *  @memberof DataTable#oApi                                                                                          // 3261\n\t */                                                                                                                   // 3262\n\tfunction _fnInitialise ( settings )                                                                                   // 3263\n\t{                                                                                                                     // 3264\n\t\tvar i, iLen, iAjaxStart=settings.iInitDisplayStart;                                                                  // 3265\n\t\tvar columns = settings.aoColumns, column;                                                                            // 3266\n\t\tvar features = settings.oFeatures;                                                                                   // 3267\n\t                                                                                                                      // 3268\n\t\t/* Ensure that the table data is fully initialised */                                                                // 3269\n\t\tif ( ! settings.bInitialised ) {                                                                                     // 3270\n\t\t\tsetTimeout( function(){ _fnInitialise( settings ); }, 200 );                                                        // 3271\n\t\t\treturn;                                                                                                             // 3272\n\t\t}                                                                                                                    // 3273\n\t                                                                                                                      // 3274\n\t\t/* Show the display HTML options */                                                                                  // 3275\n\t\t_fnAddOptionsHtml( settings );                                                                                       // 3276\n\t                                                                                                                      // 3277\n\t\t/* Build and draw the header / footer for the table */                                                               // 3278\n\t\t_fnBuildHead( settings );                                                                                            // 3279\n\t\t_fnDrawHead( settings, settings.aoHeader );                                                                          // 3280\n\t\t_fnDrawHead( settings, settings.aoFooter );                                                                          // 3281\n\t                                                                                                                      // 3282\n\t\t/* Okay to show that something is going on now */                                                                    // 3283\n\t\t_fnProcessingDisplay( settings, true );                                                                              // 3284\n\t                                                                                                                      // 3285\n\t\t/* Calculate sizes for columns */                                                                                    // 3286\n\t\tif ( features.bAutoWidth ) {                                                                                         // 3287\n\t\t\t_fnCalculateColumnWidths( settings );                                                                               // 3288\n\t\t}                                                                                                                    // 3289\n\t                                                                                                                      // 3290\n\t\tfor ( i=0, iLen=columns.length ; i<iLen ; i++ ) {                                                                    // 3291\n\t\t\tcolumn = columns[i];                                                                                                // 3292\n\t                                                                                                                      // 3293\n\t\t\tif ( column.sWidth ) {                                                                                              // 3294\n\t\t\t\tcolumn.nTh.style.width = _fnStringToCss( column.sWidth );                                                          // 3295\n\t\t\t}                                                                                                                   // 3296\n\t\t}                                                                                                                    // 3297\n\t                                                                                                                      // 3298\n\t\t// If there is default sorting required - let's do it. The sort function                                             // 3299\n\t\t// will do the drawing for us. Otherwise we draw the table regardless of the                                         // 3300\n\t\t// Ajax source - this allows the table to look initialised for Ajax sourcing                                         // 3301\n\t\t// data (show 'loading' message possibly)                                                                            // 3302\n\t\t_fnReDraw( settings );                                                                                               // 3303\n\t                                                                                                                      // 3304\n\t\t// Server-side processing init complete is done by _fnAjaxUpdateDraw                                                 // 3305\n\t\tvar dataSrc = _fnDataSource( settings );                                                                             // 3306\n\t\tif ( dataSrc != 'ssp' ) {                                                                                            // 3307\n\t\t\t// if there is an ajax source load the data                                                                         // 3308\n\t\t\tif ( dataSrc == 'ajax' ) {                                                                                          // 3309\n\t\t\t\t_fnBuildAjax( settings, [], function(json) {                                                                       // 3310\n\t\t\t\t\tvar aData = _fnAjaxDataSrc( settings, json );                                                                     // 3311\n\t                                                                                                                      // 3312\n\t\t\t\t\t// Got the data - add it to the table                                                                             // 3313\n\t\t\t\t\tfor ( i=0 ; i<aData.length ; i++ ) {                                                                              // 3314\n\t\t\t\t\t\t_fnAddData( settings, aData[i] );                                                                                // 3315\n\t\t\t\t\t}                                                                                                                 // 3316\n\t                                                                                                                      // 3317\n\t\t\t\t\t// Reset the init display for cookie saving. We've already done                                                   // 3318\n\t\t\t\t\t// a filter, and therefore cleared it before. So we need to make                                                  // 3319\n\t\t\t\t\t// it appear 'fresh'                                                                                              // 3320\n\t\t\t\t\tsettings.iInitDisplayStart = iAjaxStart;                                                                          // 3321\n\t                                                                                                                      // 3322\n\t\t\t\t\t_fnReDraw( settings );                                                                                            // 3323\n\t                                                                                                                      // 3324\n\t\t\t\t\t_fnProcessingDisplay( settings, false );                                                                          // 3325\n\t\t\t\t\t_fnInitComplete( settings, json );                                                                                // 3326\n\t\t\t\t}, settings );                                                                                                     // 3327\n\t\t\t}                                                                                                                   // 3328\n\t\t\telse {                                                                                                              // 3329\n\t\t\t\t_fnProcessingDisplay( settings, false );                                                                           // 3330\n\t\t\t\t_fnInitComplete( settings );                                                                                       // 3331\n\t\t\t}                                                                                                                   // 3332\n\t\t}                                                                                                                    // 3333\n\t}                                                                                                                     // 3334\n\t                                                                                                                      // 3335\n\t                                                                                                                      // 3336\n\t/**                                                                                                                   // 3337\n\t * Draw the table for the first time, adding all required features                                                    // 3338\n\t *  @param {object} oSettings dataTables settings object                                                              // 3339\n\t *  @param {object} [json] JSON from the server that completed the table, if using Ajax source                        // 3340\n\t *    with client-side processing (optional)                                                                          // 3341\n\t *  @memberof DataTable#oApi                                                                                          // 3342\n\t */                                                                                                                   // 3343\n\tfunction _fnInitComplete ( settings, json )                                                                           // 3344\n\t{                                                                                                                     // 3345\n\t\tsettings._bInitComplete = true;                                                                                      // 3346\n\t                                                                                                                      // 3347\n\t\t// On an Ajax load we now have data and therefore want to apply the column                                           // 3348\n\t\t// sizing                                                                                                            // 3349\n\t\tif ( json ) {                                                                                                        // 3350\n\t\t\t_fnAdjustColumnSizing( settings );                                                                                  // 3351\n\t\t}                                                                                                                    // 3352\n\t                                                                                                                      // 3353\n\t\t_fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );                                             // 3354\n\t}                                                                                                                     // 3355\n\t                                                                                                                      // 3356\n\t                                                                                                                      // 3357\n\tfunction _fnLengthChange ( settings, val )                                                                            // 3358\n\t{                                                                                                                     // 3359\n\t\tvar len = parseInt( val, 10 );                                                                                       // 3360\n\t\tsettings._iDisplayLength = len;                                                                                      // 3361\n\t                                                                                                                      // 3362\n\t\t_fnLengthOverflow( settings );                                                                                       // 3363\n\t                                                                                                                      // 3364\n\t\t// Fire length change event                                                                                          // 3365\n\t\t_fnCallbackFire( settings, null, 'length', [settings, len] );                                                        // 3366\n\t}                                                                                                                     // 3367\n\t                                                                                                                      // 3368\n\t                                                                                                                      // 3369\n\t/**                                                                                                                   // 3370\n\t * Generate the node required for user display length changing                                                        // 3371\n\t *  @param {object} settings dataTables settings object                                                               // 3372\n\t *  @returns {node} Display length feature node                                                                       // 3373\n\t *  @memberof DataTable#oApi                                                                                          // 3374\n\t */                                                                                                                   // 3375\n\tfunction _fnFeatureHtmlLength ( settings )                                                                            // 3376\n\t{                                                                                                                     // 3377\n\t\tvar                                                                                                                  // 3378\n\t\t\tclasses  = settings.oClasses,                                                                                       // 3379\n\t\t\ttableId  = settings.sTableId,                                                                                       // 3380\n\t\t\tmenu     = settings.aLengthMenu,                                                                                    // 3381\n\t\t\td2       = $.isArray( menu[0] ),                                                                                    // 3382\n\t\t\tlengths  = d2 ? menu[0] : menu,                                                                                     // 3383\n\t\t\tlanguage = d2 ? menu[1] : menu;                                                                                     // 3384\n\t                                                                                                                      // 3385\n\t\tvar select = $('<select/>', {                                                                                        // 3386\n\t\t\t'name':          tableId+'_length',                                                                                 // 3387\n\t\t\t'aria-controls': tableId,                                                                                           // 3388\n\t\t\t'class':         classes.sLengthSelect                                                                              // 3389\n\t\t} );                                                                                                                 // 3390\n\t                                                                                                                      // 3391\n\t\tfor ( var i=0, ien=lengths.length ; i<ien ; i++ ) {                                                                  // 3392\n\t\t\tselect[0][ i ] = new Option( language[i], lengths[i] );                                                             // 3393\n\t\t}                                                                                                                    // 3394\n\t                                                                                                                      // 3395\n\t\tvar div = $('<div><label/></div>').addClass( classes.sLength );                                                      // 3396\n\t\tif ( ! settings.aanFeatures.l ) {                                                                                    // 3397\n\t\t\tdiv[0].id = tableId+'_length';                                                                                      // 3398\n\t\t}                                                                                                                    // 3399\n\t                                                                                                                      // 3400\n\t\tdiv.children().append(                                                                                               // 3401\n\t\t\tsettings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )                                             // 3402\n\t\t);                                                                                                                   // 3403\n\t                                                                                                                      // 3404\n\t\t// Can't use `select` variable as user might provide their own and the                                               // 3405\n\t\t// reference is broken by the use of outerHTML                                                                       // 3406\n\t\t$('select', div)                                                                                                     // 3407\n\t\t\t.val( settings._iDisplayLength )                                                                                    // 3408\n\t\t\t.bind( 'change.DT', function(e) {                                                                                   // 3409\n\t\t\t\t_fnLengthChange( settings, $(this).val() );                                                                        // 3410\n\t\t\t\t_fnDraw( settings );                                                                                               // 3411\n\t\t\t} );                                                                                                                // 3412\n\t                                                                                                                      // 3413\n\t\t// Update node value whenever anything changes the table's length                                                    // 3414\n\t\t$(settings.nTable).bind( 'length.dt.DT', function (e, s, len) {                                                      // 3415\n\t\t\tif ( settings === s ) {                                                                                             // 3416\n\t\t\t\t$('select', div).val( len );                                                                                       // 3417\n\t\t\t}                                                                                                                   // 3418\n\t\t} );                                                                                                                 // 3419\n\t                                                                                                                      // 3420\n\t\treturn div[0];                                                                                                       // 3421\n\t}                                                                                                                     // 3422\n\t                                                                                                                      // 3423\n\t                                                                                                                      // 3424\n\t                                                                                                                      // 3425\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                          // 3426\n\t * Note that most of the paging logic is done in                                                                      // 3427\n\t * DataTable.ext.pager                                                                                                // 3428\n\t */                                                                                                                   // 3429\n\t                                                                                                                      // 3430\n\t/**                                                                                                                   // 3431\n\t * Generate the node required for default pagination                                                                  // 3432\n\t *  @param {object} oSettings dataTables settings object                                                              // 3433\n\t *  @returns {node} Pagination feature node                                                                           // 3434\n\t *  @memberof DataTable#oApi                                                                                          // 3435\n\t */                                                                                                                   // 3436\n\tfunction _fnFeatureHtmlPaginate ( settings )                                                                          // 3437\n\t{                                                                                                                     // 3438\n\t\tvar                                                                                                                  // 3439\n\t\t\ttype   = settings.sPaginationType,                                                                                  // 3440\n\t\t\tplugin = DataTable.ext.pager[ type ],                                                                               // 3441\n\t\t\tmodern = typeof plugin === 'function',                                                                              // 3442\n\t\t\tredraw = function( settings ) {                                                                                     // 3443\n\t\t\t\t_fnDraw( settings );                                                                                               // 3444\n\t\t\t},                                                                                                                  // 3445\n\t\t\tnode = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],                                                 // 3446\n\t\t\tfeatures = settings.aanFeatures;                                                                                    // 3447\n\t                                                                                                                      // 3448\n\t\tif ( ! modern ) {                                                                                                    // 3449\n\t\t\tplugin.fnInit( settings, node, redraw );                                                                            // 3450\n\t\t}                                                                                                                    // 3451\n\t                                                                                                                      // 3452\n\t\t/* Add a draw callback for the pagination on first instance, to update the paging display */                         // 3453\n\t\tif ( ! features.p )                                                                                                  // 3454\n\t\t{                                                                                                                    // 3455\n\t\t\tnode.id = settings.sTableId+'_paginate';                                                                            // 3456\n\t                                                                                                                      // 3457\n\t\t\tsettings.aoDrawCallback.push( {                                                                                     // 3458\n\t\t\t\t\"fn\": function( settings ) {                                                                                       // 3459\n\t\t\t\t\tif ( modern ) {                                                                                                   // 3460\n\t\t\t\t\t\tvar                                                                                                              // 3461\n\t\t\t\t\t\t\tstart      = settings._iDisplayStart,                                                                           // 3462\n\t\t\t\t\t\t\tlen        = settings._iDisplayLength,                                                                          // 3463\n\t\t\t\t\t\t\tvisRecords = settings.fnRecordsDisplay(),                                                                       // 3464\n\t\t\t\t\t\t\tall        = len === -1,                                                                                        // 3465\n\t\t\t\t\t\t\tpage = all ? 0 : Math.ceil( start / len ),                                                                      // 3466\n\t\t\t\t\t\t\tpages = all ? 1 : Math.ceil( visRecords / len ),                                                                // 3467\n\t\t\t\t\t\t\tbuttons = plugin(page, pages),                                                                                  // 3468\n\t\t\t\t\t\t\ti, ien;                                                                                                         // 3469\n\t                                                                                                                      // 3470\n\t\t\t\t\t\tfor ( i=0, ien=features.p.length ; i<ien ; i++ ) {                                                               // 3471\n\t\t\t\t\t\t\t_fnRenderer( settings, 'pageButton' )(                                                                          // 3472\n\t\t\t\t\t\t\t\tsettings, features.p[i], i, buttons, page, pages                                                               // 3473\n\t\t\t\t\t\t\t);                                                                                                              // 3474\n\t\t\t\t\t\t}                                                                                                                // 3475\n\t\t\t\t\t}                                                                                                                 // 3476\n\t\t\t\t\telse {                                                                                                            // 3477\n\t\t\t\t\t\tplugin.fnUpdate( settings, redraw );                                                                             // 3478\n\t\t\t\t\t}                                                                                                                 // 3479\n\t\t\t\t},                                                                                                                 // 3480\n\t\t\t\t\"sName\": \"pagination\"                                                                                              // 3481\n\t\t\t} );                                                                                                                // 3482\n\t\t}                                                                                                                    // 3483\n\t                                                                                                                      // 3484\n\t\treturn node;                                                                                                         // 3485\n\t}                                                                                                                     // 3486\n\t                                                                                                                      // 3487\n\t                                                                                                                      // 3488\n\t/**                                                                                                                   // 3489\n\t * Alter the display settings to change the page                                                                      // 3490\n\t *  @param {object} settings DataTables settings object                                                               // 3491\n\t *  @param {string|int} action Paging action to take: \"first\", \"previous\",                                            // 3492\n\t *    \"next\" or \"last\" or page number to jump to (integer)                                                            // 3493\n\t *  @param [bool] redraw Automatically draw the update or not                                                         // 3494\n\t *  @returns {bool} true page has changed, false - no change                                                          // 3495\n\t *  @memberof DataTable#oApi                                                                                          // 3496\n\t */                                                                                                                   // 3497\n\tfunction _fnPageChange ( settings, action, redraw )                                                                   // 3498\n\t{                                                                                                                     // 3499\n\t\tvar                                                                                                                  // 3500\n\t\t\tstart     = settings._iDisplayStart,                                                                                // 3501\n\t\t\tlen       = settings._iDisplayLength,                                                                               // 3502\n\t\t\trecords   = settings.fnRecordsDisplay();                                                                            // 3503\n\t                                                                                                                      // 3504\n\t\tif ( records === 0 || len === -1 )                                                                                   // 3505\n\t\t{                                                                                                                    // 3506\n\t\t\tstart = 0;                                                                                                          // 3507\n\t\t}                                                                                                                    // 3508\n\t\telse if ( typeof action === \"number\" )                                                                               // 3509\n\t\t{                                                                                                                    // 3510\n\t\t\tstart = action * len;                                                                                               // 3511\n\t                                                                                                                      // 3512\n\t\t\tif ( start > records )                                                                                              // 3513\n\t\t\t{                                                                                                                   // 3514\n\t\t\t\tstart = 0;                                                                                                         // 3515\n\t\t\t}                                                                                                                   // 3516\n\t\t}                                                                                                                    // 3517\n\t\telse if ( action == \"first\" )                                                                                        // 3518\n\t\t{                                                                                                                    // 3519\n\t\t\tstart = 0;                                                                                                          // 3520\n\t\t}                                                                                                                    // 3521\n\t\telse if ( action == \"previous\" )                                                                                     // 3522\n\t\t{                                                                                                                    // 3523\n\t\t\tstart = len >= 0 ?                                                                                                  // 3524\n\t\t\t\tstart - len :                                                                                                      // 3525\n\t\t\t\t0;                                                                                                                 // 3526\n\t                                                                                                                      // 3527\n\t\t\tif ( start < 0 )                                                                                                    // 3528\n\t\t\t{                                                                                                                   // 3529\n\t\t\t  start = 0;                                                                                                        // 3530\n\t\t\t}                                                                                                                   // 3531\n\t\t}                                                                                                                    // 3532\n\t\telse if ( action == \"next\" )                                                                                         // 3533\n\t\t{                                                                                                                    // 3534\n\t\t\tif ( start + len < records )                                                                                        // 3535\n\t\t\t{                                                                                                                   // 3536\n\t\t\t\tstart += len;                                                                                                      // 3537\n\t\t\t}                                                                                                                   // 3538\n\t\t}                                                                                                                    // 3539\n\t\telse if ( action == \"last\" )                                                                                         // 3540\n\t\t{                                                                                                                    // 3541\n\t\t\tstart = Math.floor( (records-1) / len) * len;                                                                       // 3542\n\t\t}                                                                                                                    // 3543\n\t\telse                                                                                                                 // 3544\n\t\t{                                                                                                                    // 3545\n\t\t\t_fnLog( settings, 0, \"Unknown paging action: \"+action, 5 );                                                         // 3546\n\t\t}                                                                                                                    // 3547\n\t                                                                                                                      // 3548\n\t\tvar changed = settings._iDisplayStart !== start;                                                                     // 3549\n\t\tsettings._iDisplayStart = start;                                                                                     // 3550\n\t                                                                                                                      // 3551\n\t\tif ( changed ) {                                                                                                     // 3552\n\t\t\t_fnCallbackFire( settings, null, 'page', [settings] );                                                              // 3553\n\t                                                                                                                      // 3554\n\t\t\tif ( redraw ) {                                                                                                     // 3555\n\t\t\t\t_fnDraw( settings );                                                                                               // 3556\n\t\t\t}                                                                                                                   // 3557\n\t\t}                                                                                                                    // 3558\n\t                                                                                                                      // 3559\n\t\treturn changed;                                                                                                      // 3560\n\t}                                                                                                                     // 3561\n\t                                                                                                                      // 3562\n\t                                                                                                                      // 3563\n\t                                                                                                                      // 3564\n\t/**                                                                                                                   // 3565\n\t * Generate the node required for the processing node                                                                 // 3566\n\t *  @param {object} settings dataTables settings object                                                               // 3567\n\t *  @returns {node} Processing element                                                                                // 3568\n\t *  @memberof DataTable#oApi                                                                                          // 3569\n\t */                                                                                                                   // 3570\n\tfunction _fnFeatureHtmlProcessing ( settings )                                                                        // 3571\n\t{                                                                                                                     // 3572\n\t\treturn $('<div/>', {                                                                                                 // 3573\n\t\t\t\t'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,                                           // 3574\n\t\t\t\t'class': settings.oClasses.sProcessing                                                                             // 3575\n\t\t\t} )                                                                                                                 // 3576\n\t\t\t.html( settings.oLanguage.sProcessing )                                                                             // 3577\n\t\t\t.insertBefore( settings.nTable )[0];                                                                                // 3578\n\t}                                                                                                                     // 3579\n\t                                                                                                                      // 3580\n\t                                                                                                                      // 3581\n\t/**                                                                                                                   // 3582\n\t * Display or hide the processing indicator                                                                           // 3583\n\t *  @param {object} settings dataTables settings object                                                               // 3584\n\t *  @param {bool} show Show the processing indicator (true) or not (false)                                            // 3585\n\t *  @memberof DataTable#oApi                                                                                          // 3586\n\t */                                                                                                                   // 3587\n\tfunction _fnProcessingDisplay ( settings, show )                                                                      // 3588\n\t{                                                                                                                     // 3589\n\t\tif ( settings.oFeatures.bProcessing ) {                                                                              // 3590\n\t\t\t$(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );                                                // 3591\n\t\t}                                                                                                                    // 3592\n\t                                                                                                                      // 3593\n\t\t_fnCallbackFire( settings, null, 'processing', [settings, show] );                                                   // 3594\n\t}                                                                                                                     // 3595\n\t                                                                                                                      // 3596\n\t/**                                                                                                                   // 3597\n\t * Add any control elements for the table - specifically scrolling                                                    // 3598\n\t *  @param {object} settings dataTables settings object                                                               // 3599\n\t *  @returns {node} Node to add to the DOM                                                                            // 3600\n\t *  @memberof DataTable#oApi                                                                                          // 3601\n\t */                                                                                                                   // 3602\n\tfunction _fnFeatureHtmlTable ( settings )                                                                             // 3603\n\t{                                                                                                                     // 3604\n\t\tvar table = $(settings.nTable);                                                                                      // 3605\n\t                                                                                                                      // 3606\n\t\t// Add the ARIA grid role to the table                                                                               // 3607\n\t\ttable.attr( 'role', 'grid' );                                                                                        // 3608\n\t                                                                                                                      // 3609\n\t\t// Scrolling from here on in                                                                                         // 3610\n\t\tvar scroll = settings.oScroll;                                                                                       // 3611\n\t                                                                                                                      // 3612\n\t\tif ( scroll.sX === '' && scroll.sY === '' ) {                                                                        // 3613\n\t\t\treturn settings.nTable;                                                                                             // 3614\n\t\t}                                                                                                                    // 3615\n\t                                                                                                                      // 3616\n\t\tvar scrollX = scroll.sX;                                                                                             // 3617\n\t\tvar scrollY = scroll.sY;                                                                                             // 3618\n\t\tvar classes = settings.oClasses;                                                                                     // 3619\n\t\tvar caption = table.children('caption');                                                                             // 3620\n\t\tvar captionSide = caption.length ? caption[0]._captionSide : null;                                                   // 3621\n\t\tvar headerClone = $( table[0].cloneNode(false) );                                                                    // 3622\n\t\tvar footerClone = $( table[0].cloneNode(false) );                                                                    // 3623\n\t\tvar footer = table.children('tfoot');                                                                                // 3624\n\t\tvar _div = '<div/>';                                                                                                 // 3625\n\t\tvar size = function ( s ) {                                                                                          // 3626\n\t\t\treturn !s ? null : _fnStringToCss( s );                                                                             // 3627\n\t\t};                                                                                                                   // 3628\n\t                                                                                                                      // 3629\n\t\t// This is fairly messy, but with x scrolling enabled, if the table has a                                            // 3630\n\t\t// width attribute, regardless of any width applied using the column width                                           // 3631\n\t\t// options, the browser will shrink or grow the table as needed to fit into                                          // 3632\n\t\t// that 100%. That would make the width options useless. So we remove it.                                            // 3633\n\t\t// This is okay, under the assumption that width:100% is applied to the                                              // 3634\n\t\t// table in CSS (it is in the default stylesheet) which will set the table                                           // 3635\n\t\t// width as appropriate (the attribute and css behave differently...)                                                // 3636\n\t\tif ( scroll.sX && table.attr('width') === '100%' ) {                                                                 // 3637\n\t\t\ttable.removeAttr('width');                                                                                          // 3638\n\t\t}                                                                                                                    // 3639\n\t                                                                                                                      // 3640\n\t\tif ( ! footer.length ) {                                                                                             // 3641\n\t\t\tfooter = null;                                                                                                      // 3642\n\t\t}                                                                                                                    // 3643\n\t                                                                                                                      // 3644\n\t\t/*                                                                                                                   // 3645\n\t\t * The HTML structure that we want to generate in this function is:                                                  // 3646\n\t\t *  div - scroller                                                                                                   // 3647\n\t\t *    div - scroll head                                                                                              // 3648\n\t\t *      div - scroll head inner                                                                                      // 3649\n\t\t *        table - scroll head table                                                                                  // 3650\n\t\t *          thead - thead                                                                                            // 3651\n\t\t *    div - scroll body                                                                                              // 3652\n\t\t *      table - table (master table)                                                                                 // 3653\n\t\t *        thead - thead clone for sizing                                                                             // 3654\n\t\t *        tbody - tbody                                                                                              // 3655\n\t\t *    div - scroll foot                                                                                              // 3656\n\t\t *      div - scroll foot inner                                                                                      // 3657\n\t\t *        table - scroll foot table                                                                                  // 3658\n\t\t *          tfoot - tfoot                                                                                            // 3659\n\t\t */                                                                                                                  // 3660\n\t\tvar scroller = $( _div, { 'class': classes.sScrollWrapper } )                                                        // 3661\n\t\t\t.append(                                                                                                            // 3662\n\t\t\t\t$(_div, { 'class': classes.sScrollHead } )                                                                         // 3663\n\t\t\t\t\t.css( {                                                                                                           // 3664\n\t\t\t\t\t\toverflow: 'hidden',                                                                                              // 3665\n\t\t\t\t\t\tposition: 'relative',                                                                                            // 3666\n\t\t\t\t\t\tborder: 0,                                                                                                       // 3667\n\t\t\t\t\t\twidth: scrollX ? size(scrollX) : '100%'                                                                          // 3668\n\t\t\t\t\t} )                                                                                                               // 3669\n\t\t\t\t\t.append(                                                                                                          // 3670\n\t\t\t\t\t\t$(_div, { 'class': classes.sScrollHeadInner } )                                                                  // 3671\n\t\t\t\t\t\t\t.css( {                                                                                                         // 3672\n\t\t\t\t\t\t\t\t'box-sizing': 'content-box',                                                                                   // 3673\n\t\t\t\t\t\t\t\twidth: scroll.sXInner || '100%'                                                                                // 3674\n\t\t\t\t\t\t\t} )                                                                                                             // 3675\n\t\t\t\t\t\t\t.append(                                                                                                        // 3676\n\t\t\t\t\t\t\t\theaderClone                                                                                                    // 3677\n\t\t\t\t\t\t\t\t\t.removeAttr('id')                                                                                             // 3678\n\t\t\t\t\t\t\t\t\t.css( 'margin-left', 0 )                                                                                      // 3679\n\t\t\t\t\t\t\t\t\t.append( captionSide === 'top' ? caption : null )                                                             // 3680\n\t\t\t\t\t\t\t\t\t.append(                                                                                                      // 3681\n\t\t\t\t\t\t\t\t\t\ttable.children('thead')                                                                                      // 3682\n\t\t\t\t\t\t\t\t\t)                                                                                                             // 3683\n\t\t\t\t\t\t\t)                                                                                                               // 3684\n\t\t\t\t\t)                                                                                                                 // 3685\n\t\t\t)                                                                                                                   // 3686\n\t\t\t.append(                                                                                                            // 3687\n\t\t\t\t$(_div, { 'class': classes.sScrollBody } )                                                                         // 3688\n\t\t\t\t\t.css( {                                                                                                           // 3689\n\t\t\t\t\t\toverflow: 'auto',                                                                                                // 3690\n\t\t\t\t\t\theight: size( scrollY ),                                                                                         // 3691\n\t\t\t\t\t\twidth: size( scrollX )                                                                                           // 3692\n\t\t\t\t\t} )                                                                                                               // 3693\n\t\t\t\t\t.append( table )                                                                                                  // 3694\n\t\t\t);                                                                                                                  // 3695\n\t                                                                                                                      // 3696\n\t\tif ( footer ) {                                                                                                      // 3697\n\t\t\tscroller.append(                                                                                                    // 3698\n\t\t\t\t$(_div, { 'class': classes.sScrollFoot } )                                                                         // 3699\n\t\t\t\t\t.css( {                                                                                                           // 3700\n\t\t\t\t\t\toverflow: 'hidden',                                                                                              // 3701\n\t\t\t\t\t\tborder: 0,                                                                                                       // 3702\n\t\t\t\t\t\twidth: scrollX ? size(scrollX) : '100%'                                                                          // 3703\n\t\t\t\t\t} )                                                                                                               // 3704\n\t\t\t\t\t.append(                                                                                                          // 3705\n\t\t\t\t\t\t$(_div, { 'class': classes.sScrollFootInner } )                                                                  // 3706\n\t\t\t\t\t\t\t.append(                                                                                                        // 3707\n\t\t\t\t\t\t\t\tfooterClone                                                                                                    // 3708\n\t\t\t\t\t\t\t\t\t.removeAttr('id')                                                                                             // 3709\n\t\t\t\t\t\t\t\t\t.css( 'margin-left', 0 )                                                                                      // 3710\n\t\t\t\t\t\t\t\t\t.append( captionSide === 'bottom' ? caption : null )                                                          // 3711\n\t\t\t\t\t\t\t\t\t.append(                                                                                                      // 3712\n\t\t\t\t\t\t\t\t\t\ttable.children('tfoot')                                                                                      // 3713\n\t\t\t\t\t\t\t\t\t)                                                                                                             // 3714\n\t\t\t\t\t\t\t)                                                                                                               // 3715\n\t\t\t\t\t)                                                                                                                 // 3716\n\t\t\t);                                                                                                                  // 3717\n\t\t}                                                                                                                    // 3718\n\t                                                                                                                      // 3719\n\t\tvar children = scroller.children();                                                                                  // 3720\n\t\tvar scrollHead = children[0];                                                                                        // 3721\n\t\tvar scrollBody = children[1];                                                                                        // 3722\n\t\tvar scrollFoot = footer ? children[2] : null;                                                                        // 3723\n\t                                                                                                                      // 3724\n\t\t// When the body is scrolled, then we also want to scroll the headers                                                // 3725\n\t\tif ( scrollX ) {                                                                                                     // 3726\n\t\t\t$(scrollBody).on( 'scroll.DT', function (e) {                                                                       // 3727\n\t\t\t\tvar scrollLeft = this.scrollLeft;                                                                                  // 3728\n\t                                                                                                                      // 3729\n\t\t\t\tscrollHead.scrollLeft = scrollLeft;                                                                                // 3730\n\t                                                                                                                      // 3731\n\t\t\t\tif ( footer ) {                                                                                                    // 3732\n\t\t\t\t\tscrollFoot.scrollLeft = scrollLeft;                                                                               // 3733\n\t\t\t\t}                                                                                                                  // 3734\n\t\t\t} );                                                                                                                // 3735\n\t\t}                                                                                                                    // 3736\n\t                                                                                                                      // 3737\n\t\tsettings.nScrollHead = scrollHead;                                                                                   // 3738\n\t\tsettings.nScrollBody = scrollBody;                                                                                   // 3739\n\t\tsettings.nScrollFoot = scrollFoot;                                                                                   // 3740\n\t                                                                                                                      // 3741\n\t\t// On redraw - align columns                                                                                         // 3742\n\t\tsettings.aoDrawCallback.push( {                                                                                      // 3743\n\t\t\t\"fn\": _fnScrollDraw,                                                                                                // 3744\n\t\t\t\"sName\": \"scrolling\"                                                                                                // 3745\n\t\t} );                                                                                                                 // 3746\n\t                                                                                                                      // 3747\n\t\treturn scroller[0];                                                                                                  // 3748\n\t}                                                                                                                     // 3749\n\t                                                                                                                      // 3750\n\t                                                                                                                      // 3751\n\t                                                                                                                      // 3752\n\t/**                                                                                                                   // 3753\n\t * Update the header, footer and body tables for resizing - i.e. column                                               // 3754\n\t * alignment.                                                                                                         // 3755\n\t *                                                                                                                    // 3756\n\t * Welcome to the most horrible function DataTables. The process that this                                            // 3757\n\t * function follows is basically:                                                                                     // 3758\n\t *   1. Re-create the table inside the scrolling div                                                                  // 3759\n\t *   2. Take live measurements from the DOM                                                                           // 3760\n\t *   3. Apply the measurements to align the columns                                                                   // 3761\n\t *   4. Clean up                                                                                                      // 3762\n\t *                                                                                                                    // 3763\n\t *  @param {object} settings dataTables settings object                                                               // 3764\n\t *  @memberof DataTable#oApi                                                                                          // 3765\n\t */                                                                                                                   // 3766\n\tfunction _fnScrollDraw ( settings )                                                                                   // 3767\n\t{                                                                                                                     // 3768\n\t\t// Given that this is such a monster function, a lot of variables are use                                            // 3769\n\t\t// to try and keep the minimised size as small as possible                                                           // 3770\n\t\tvar                                                                                                                  // 3771\n\t\t\tscroll         = settings.oScroll,                                                                                  // 3772\n\t\t\tscrollX        = scroll.sX,                                                                                         // 3773\n\t\t\tscrollXInner   = scroll.sXInner,                                                                                    // 3774\n\t\t\tscrollY        = scroll.sY,                                                                                         // 3775\n\t\t\tbarWidth       = scroll.iBarWidth,                                                                                  // 3776\n\t\t\tdivHeader      = $(settings.nScrollHead),                                                                           // 3777\n\t\t\tdivHeaderStyle = divHeader[0].style,                                                                                // 3778\n\t\t\tdivHeaderInner = divHeader.children('div'),                                                                         // 3779\n\t\t\tdivHeaderInnerStyle = divHeaderInner[0].style,                                                                      // 3780\n\t\t\tdivHeaderTable = divHeaderInner.children('table'),                                                                  // 3781\n\t\t\tdivBodyEl      = settings.nScrollBody,                                                                              // 3782\n\t\t\tdivBody        = $(divBodyEl),                                                                                      // 3783\n\t\t\tdivBodyStyle   = divBodyEl.style,                                                                                   // 3784\n\t\t\tdivFooter      = $(settings.nScrollFoot),                                                                           // 3785\n\t\t\tdivFooterInner = divFooter.children('div'),                                                                         // 3786\n\t\t\tdivFooterTable = divFooterInner.children('table'),                                                                  // 3787\n\t\t\theader         = $(settings.nTHead),                                                                                // 3788\n\t\t\ttable          = $(settings.nTable),                                                                                // 3789\n\t\t\ttableEl        = table[0],                                                                                          // 3790\n\t\t\ttableStyle     = tableEl.style,                                                                                     // 3791\n\t\t\tfooter         = settings.nTFoot ? $(settings.nTFoot) : null,                                                       // 3792\n\t\t\tbrowser        = settings.oBrowser,                                                                                 // 3793\n\t\t\tie67           = browser.bScrollOversize,                                                                           // 3794\n\t\t\theaderTrgEls, footerTrgEls,                                                                                         // 3795\n\t\t\theaderSrcEls, footerSrcEls,                                                                                         // 3796\n\t\t\theaderCopy, footerCopy,                                                                                             // 3797\n\t\t\theaderWidths=[], footerWidths=[],                                                                                   // 3798\n\t\t\theaderContent=[],                                                                                                   // 3799\n\t\t\tidx, correction, sanityWidth,                                                                                       // 3800\n\t\t\tzeroOut = function(nSizer) {                                                                                        // 3801\n\t\t\t\tvar style = nSizer.style;                                                                                          // 3802\n\t\t\t\tstyle.paddingTop = \"0\";                                                                                            // 3803\n\t\t\t\tstyle.paddingBottom = \"0\";                                                                                         // 3804\n\t\t\t\tstyle.borderTopWidth = \"0\";                                                                                        // 3805\n\t\t\t\tstyle.borderBottomWidth = \"0\";                                                                                     // 3806\n\t\t\t\tstyle.height = 0;                                                                                                  // 3807\n\t\t\t};                                                                                                                  // 3808\n\t                                                                                                                      // 3809\n\t\t/*                                                                                                                   // 3810\n\t\t * 1. Re-create the table inside the scrolling div                                                                   // 3811\n\t\t */                                                                                                                  // 3812\n\t                                                                                                                      // 3813\n\t\t// Remove the old minimised thead and tfoot elements in the inner table                                              // 3814\n\t\ttable.children('thead, tfoot').remove();                                                                             // 3815\n\t                                                                                                                      // 3816\n\t\t// Clone the current header and footer elements and then place it into the inner table                               // 3817\n\t\theaderCopy = header.clone().prependTo( table );                                                                      // 3818\n\t\theaderTrgEls = header.find('tr'); // original header is in its own table                                             // 3819\n\t\theaderSrcEls = headerCopy.find('tr');                                                                                // 3820\n\t\theaderCopy.find('th, td').removeAttr('tabindex');                                                                    // 3821\n\t                                                                                                                      // 3822\n\t\tif ( footer ) {                                                                                                      // 3823\n\t\t\tfooterCopy = footer.clone().prependTo( table );                                                                     // 3824\n\t\t\tfooterTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized                       // 3825\n\t\t\tfooterSrcEls = footerCopy.find('tr');                                                                               // 3826\n\t\t}                                                                                                                    // 3827\n\t                                                                                                                      // 3828\n\t                                                                                                                      // 3829\n\t\t/*                                                                                                                   // 3830\n\t\t * 2. Take live measurements from the DOM - do not alter the DOM itself!                                             // 3831\n\t\t */                                                                                                                  // 3832\n\t                                                                                                                      // 3833\n\t\t// Remove old sizing and apply the calculated column widths                                                          // 3834\n\t\t// Get the unique column headers in the newly created (cloned) header. We want to apply the                          // 3835\n\t\t// calculated sizes to this header                                                                                   // 3836\n\t\tif ( ! scrollX )                                                                                                     // 3837\n\t\t{                                                                                                                    // 3838\n\t\t\tdivBodyStyle.width = '100%';                                                                                        // 3839\n\t\t\tdivHeader[0].style.width = '100%';                                                                                  // 3840\n\t\t}                                                                                                                    // 3841\n\t                                                                                                                      // 3842\n\t\t$.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {                                                // 3843\n\t\t\tidx = _fnVisibleToColumnIndex( settings, i );                                                                       // 3844\n\t\t\tel.style.width = settings.aoColumns[idx].sWidth;                                                                    // 3845\n\t\t} );                                                                                                                 // 3846\n\t                                                                                                                      // 3847\n\t\tif ( footer ) {                                                                                                      // 3848\n\t\t\t_fnApplyToChildren( function(n) {                                                                                   // 3849\n\t\t\t\tn.style.width = \"\";                                                                                                // 3850\n\t\t\t}, footerSrcEls );                                                                                                  // 3851\n\t\t}                                                                                                                    // 3852\n\t                                                                                                                      // 3853\n\t\t// If scroll collapse is enabled, when we put the headers back into the body for sizing, we                          // 3854\n\t\t// will end up forcing the scrollbar to appear, making our measurements wrong for when we                            // 3855\n\t\t// then hide it (end of this function), so add the header height to the body scroller.                               // 3856\n\t\tif ( scroll.bCollapse && scrollY !== \"\" ) {                                                                          // 3857\n\t\t\tdivBodyStyle.height = (divBody[0].offsetHeight + header[0].offsetHeight)+\"px\";                                      // 3858\n\t\t}                                                                                                                    // 3859\n\t                                                                                                                      // 3860\n\t\t// Size the table as a whole                                                                                         // 3861\n\t\tsanityWidth = table.outerWidth();                                                                                    // 3862\n\t\tif ( scrollX === \"\" ) {                                                                                              // 3863\n\t\t\t// No x scrolling                                                                                                   // 3864\n\t\t\ttableStyle.width = \"100%\";                                                                                          // 3865\n\t                                                                                                                      // 3866\n\t\t\t// IE7 will make the width of the table when 100% include the scrollbar                                             // 3867\n\t\t\t// - which is shouldn't. When there is a scrollbar we need to take this                                             // 3868\n\t\t\t// into account.                                                                                                    // 3869\n\t\t\tif ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||                                              // 3870\n\t\t\t\tdivBody.css('overflow-y') == \"scroll\")                                                                             // 3871\n\t\t\t) {                                                                                                                 // 3872\n\t\t\t\ttableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);                                                 // 3873\n\t\t\t}                                                                                                                   // 3874\n\t\t}                                                                                                                    // 3875\n\t\telse                                                                                                                 // 3876\n\t\t{                                                                                                                    // 3877\n\t\t\t// x scrolling                                                                                                      // 3878\n\t\t\tif ( scrollXInner !== \"\" ) {                                                                                        // 3879\n\t\t\t\t// x scroll inner has been given - use it                                                                          // 3880\n\t\t\t\ttableStyle.width = _fnStringToCss(scrollXInner);                                                                   // 3881\n\t\t\t}                                                                                                                   // 3882\n\t\t\telse if ( sanityWidth == divBody.width() && divBody.height() < table.height() ) {                                   // 3883\n\t\t\t\t// There is y-scrolling - try to take account of the y scroll bar                                                  // 3884\n\t\t\t\ttableStyle.width = _fnStringToCss( sanityWidth-barWidth );                                                         // 3885\n\t\t\t\tif ( table.outerWidth() > sanityWidth-barWidth ) {                                                                 // 3886\n\t\t\t\t\t// Not possible to take account of it                                                                             // 3887\n\t\t\t\t\ttableStyle.width = _fnStringToCss( sanityWidth );                                                                 // 3888\n\t\t\t\t}                                                                                                                  // 3889\n\t\t\t}                                                                                                                   // 3890\n\t\t\telse {                                                                                                              // 3891\n\t\t\t\t// When all else fails                                                                                             // 3892\n\t\t\t\ttableStyle.width = _fnStringToCss( sanityWidth );                                                                  // 3893\n\t\t\t}                                                                                                                   // 3894\n\t\t}                                                                                                                    // 3895\n\t                                                                                                                      // 3896\n\t\t// Recalculate the sanity width - now that we've applied the required width,                                         // 3897\n\t\t// before it was a temporary variable. This is required because the column                                           // 3898\n\t\t// width calculation is done before this table DOM is created.                                                       // 3899\n\t\tsanityWidth = table.outerWidth();                                                                                    // 3900\n\t                                                                                                                      // 3901\n\t\t// Hidden header should have zero height, so remove padding and borders. Then                                        // 3902\n\t\t// set the width based on the real headers                                                                           // 3903\n\t                                                                                                                      // 3904\n\t\t// Apply all styles in one pass                                                                                      // 3905\n\t\t_fnApplyToChildren( zeroOut, headerSrcEls );                                                                         // 3906\n\t                                                                                                                      // 3907\n\t\t// Read all widths in next pass                                                                                      // 3908\n\t\t_fnApplyToChildren( function(nSizer) {                                                                               // 3909\n\t\t\theaderContent.push( nSizer.innerHTML );                                                                             // 3910\n\t\t\theaderWidths.push( _fnStringToCss( $(nSizer).css('width') ) );                                                      // 3911\n\t\t}, headerSrcEls );                                                                                                   // 3912\n\t                                                                                                                      // 3913\n\t\t// Apply all widths in final pass                                                                                    // 3914\n\t\t_fnApplyToChildren( function(nToSize, i) {                                                                           // 3915\n\t\t\tnToSize.style.width = headerWidths[i];                                                                              // 3916\n\t\t}, headerTrgEls );                                                                                                   // 3917\n\t                                                                                                                      // 3918\n\t\t$(headerSrcEls).height(0);                                                                                           // 3919\n\t                                                                                                                      // 3920\n\t\t/* Same again with the footer if we have one */                                                                      // 3921\n\t\tif ( footer )                                                                                                        // 3922\n\t\t{                                                                                                                    // 3923\n\t\t\t_fnApplyToChildren( zeroOut, footerSrcEls );                                                                        // 3924\n\t                                                                                                                      // 3925\n\t\t\t_fnApplyToChildren( function(nSizer) {                                                                              // 3926\n\t\t\t\tfooterWidths.push( _fnStringToCss( $(nSizer).css('width') ) );                                                     // 3927\n\t\t\t}, footerSrcEls );                                                                                                  // 3928\n\t                                                                                                                      // 3929\n\t\t\t_fnApplyToChildren( function(nToSize, i) {                                                                          // 3930\n\t\t\t\tnToSize.style.width = footerWidths[i];                                                                             // 3931\n\t\t\t}, footerTrgEls );                                                                                                  // 3932\n\t                                                                                                                      // 3933\n\t\t\t$(footerSrcEls).height(0);                                                                                          // 3934\n\t\t}                                                                                                                    // 3935\n\t                                                                                                                      // 3936\n\t                                                                                                                      // 3937\n\t\t/*                                                                                                                   // 3938\n\t\t * 3. Apply the measurements                                                                                         // 3939\n\t\t */                                                                                                                  // 3940\n\t                                                                                                                      // 3941\n\t\t// \"Hide\" the header and footer that we used for the sizing. We need to keep                                         // 3942\n\t\t// the content of the cell so that the width applied to the header and body                                          // 3943\n\t\t// both match, but we want to hide it completely. We want to also fix their                                          // 3944\n\t\t// width to what they currently are                                                                                  // 3945\n\t\t_fnApplyToChildren( function(nSizer, i) {                                                                            // 3946\n\t\t\tnSizer.innerHTML = '<div class=\"dataTables_sizing\" style=\"height:0;overflow:hidden;\">'+headerContent[i]+'</div>';   // 3947\n\t\t\tnSizer.style.width = headerWidths[i];                                                                               // 3948\n\t\t}, headerSrcEls );                                                                                                   // 3949\n\t                                                                                                                      // 3950\n\t\tif ( footer )                                                                                                        // 3951\n\t\t{                                                                                                                    // 3952\n\t\t\t_fnApplyToChildren( function(nSizer, i) {                                                                           // 3953\n\t\t\t\tnSizer.innerHTML = \"\";                                                                                             // 3954\n\t\t\t\tnSizer.style.width = footerWidths[i];                                                                              // 3955\n\t\t\t}, footerSrcEls );                                                                                                  // 3956\n\t\t}                                                                                                                    // 3957\n\t                                                                                                                      // 3958\n\t\t// Sanity check that the table is of a sensible width. If not then we are going to get                               // 3959\n\t\t// misalignment - try to prevent this by not allowing the table to shrink below its min width                        // 3960\n\t\tif ( table.outerWidth() < sanityWidth )                                                                              // 3961\n\t\t{                                                                                                                    // 3962\n\t\t\t// The min width depends upon if we have a vertical scrollbar visible or not */                                     // 3963\n\t\t\tcorrection = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||                                                   // 3964\n\t\t\t\tdivBody.css('overflow-y') == \"scroll\")) ?                                                                          // 3965\n\t\t\t\t\tsanityWidth+barWidth :                                                                                            // 3966\n\t\t\t\t\tsanityWidth;                                                                                                      // 3967\n\t                                                                                                                      // 3968\n\t\t\t// IE6/7 are a law unto themselves...                                                                               // 3969\n\t\t\tif ( ie67 && (divBodyEl.scrollHeight >                                                                              // 3970\n\t\t\t\tdivBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\")                                                   // 3971\n\t\t\t) {                                                                                                                 // 3972\n\t\t\t\ttableStyle.width = _fnStringToCss( correction-barWidth );                                                          // 3973\n\t\t\t}                                                                                                                   // 3974\n\t                                                                                                                      // 3975\n\t\t\t// And give the user a warning that we've stopped the table getting too small                                       // 3976\n\t\t\tif ( scrollX === \"\" || scrollXInner !== \"\" ) {                                                                      // 3977\n\t\t\t\t_fnLog( settings, 1, 'Possible column misalignment', 6 );                                                          // 3978\n\t\t\t}                                                                                                                   // 3979\n\t\t}                                                                                                                    // 3980\n\t\telse                                                                                                                 // 3981\n\t\t{                                                                                                                    // 3982\n\t\t\tcorrection = '100%';                                                                                                // 3983\n\t\t}                                                                                                                    // 3984\n\t                                                                                                                      // 3985\n\t\t// Apply to the container elements                                                                                   // 3986\n\t\tdivBodyStyle.width = _fnStringToCss( correction );                                                                   // 3987\n\t\tdivHeaderStyle.width = _fnStringToCss( correction );                                                                 // 3988\n\t                                                                                                                      // 3989\n\t\tif ( footer ) {                                                                                                      // 3990\n\t\t\tsettings.nScrollFoot.style.width = _fnStringToCss( correction );                                                    // 3991\n\t\t}                                                                                                                    // 3992\n\t                                                                                                                      // 3993\n\t                                                                                                                      // 3994\n\t\t/*                                                                                                                   // 3995\n\t\t * 4. Clean up                                                                                                       // 3996\n\t\t */                                                                                                                  // 3997\n\t\tif ( ! scrollY ) {                                                                                                   // 3998\n\t\t\t/* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting                                // 3999\n\t\t\t * the scrollbar height from the visible display, rather than adding it on. We need to                              // 4000\n\t\t\t * set the height in order to sort this. Don't want to do it in any other browsers.                                 // 4001\n\t\t\t */                                                                                                                 // 4002\n\t\t\tif ( ie67 ) {                                                                                                       // 4003\n\t\t\t\tdivBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );                                             // 4004\n\t\t\t}                                                                                                                   // 4005\n\t\t}                                                                                                                    // 4006\n\t                                                                                                                      // 4007\n\t\tif ( scrollY && scroll.bCollapse ) {                                                                                 // 4008\n\t\t\tdivBodyStyle.height = _fnStringToCss( scrollY );                                                                    // 4009\n\t                                                                                                                      // 4010\n\t\t\tvar iExtra = (scrollX && tableEl.offsetWidth > divBodyEl.offsetWidth) ?                                             // 4011\n\t\t\t\tbarWidth :                                                                                                         // 4012\n\t\t\t\t0;                                                                                                                 // 4013\n\t                                                                                                                      // 4014\n\t\t\tif ( tableEl.offsetHeight < divBodyEl.offsetHeight ) {                                                              // 4015\n\t\t\t\tdivBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+iExtra );                                               // 4016\n\t\t\t}                                                                                                                   // 4017\n\t\t}                                                                                                                    // 4018\n\t                                                                                                                      // 4019\n\t\t/* Finally set the width's of the header and footer tables */                                                        // 4020\n\t\tvar iOuterWidth = table.outerWidth();                                                                                // 4021\n\t\tdivHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );                                                       // 4022\n\t\tdivHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );                                                           // 4023\n\t                                                                                                                      // 4024\n\t\t// Figure out if there are scrollbar present - if so then we need a the header and footer to                         // 4025\n\t\t// provide a bit more space to allow \"overflow\" scrolling (i.e. past the scrollbar)                                  // 4026\n\t\tvar bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == \"scroll\";                   // 4027\n\t\tvar padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );                                              // 4028\n\t\tdivHeaderInnerStyle[ padding ] = bScrolling ? barWidth+\"px\" : \"0px\";                                                 // 4029\n\t                                                                                                                      // 4030\n\t\tif ( footer ) {                                                                                                      // 4031\n\t\t\tdivFooterTable[0].style.width = _fnStringToCss( iOuterWidth );                                                      // 4032\n\t\t\tdivFooterInner[0].style.width = _fnStringToCss( iOuterWidth );                                                      // 4033\n\t\t\tdivFooterInner[0].style[padding] = bScrolling ? barWidth+\"px\" : \"0px\";                                              // 4034\n\t\t}                                                                                                                    // 4035\n\t                                                                                                                      // 4036\n\t\t/* Adjust the position of the header in case we loose the y-scrollbar */                                             // 4037\n\t\tdivBody.scroll();                                                                                                    // 4038\n\t                                                                                                                      // 4039\n\t\t// If sorting or filtering has occurred, jump the scrolling back to the top                                          // 4040\n\t\t// only if we aren't holding the position                                                                            // 4041\n\t\tif ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {                                            // 4042\n\t\t\tdivBodyEl.scrollTop = 0;                                                                                            // 4043\n\t\t}                                                                                                                    // 4044\n\t}                                                                                                                     // 4045\n\t                                                                                                                      // 4046\n\t                                                                                                                      // 4047\n\t                                                                                                                      // 4048\n\t/**                                                                                                                   // 4049\n\t * Apply a given function to the display child nodes of an element array (typically                                   // 4050\n\t * TD children of TR rows                                                                                             // 4051\n\t *  @param {function} fn Method to apply to the objects                                                               // 4052\n\t *  @param array {nodes} an1 List of elements to look through for display children                                    // 4053\n\t *  @param array {nodes} an2 Another list (identical structure to the first) - optional                               // 4054\n\t *  @memberof DataTable#oApi                                                                                          // 4055\n\t */                                                                                                                   // 4056\n\tfunction _fnApplyToChildren( fn, an1, an2 )                                                                           // 4057\n\t{                                                                                                                     // 4058\n\t\tvar index=0, i=0, iLen=an1.length;                                                                                   // 4059\n\t\tvar nNode1, nNode2;                                                                                                  // 4060\n\t                                                                                                                      // 4061\n\t\twhile ( i < iLen ) {                                                                                                 // 4062\n\t\t\tnNode1 = an1[i].firstChild;                                                                                         // 4063\n\t\t\tnNode2 = an2 ? an2[i].firstChild : null;                                                                            // 4064\n\t                                                                                                                      // 4065\n\t\t\twhile ( nNode1 ) {                                                                                                  // 4066\n\t\t\t\tif ( nNode1.nodeType === 1 ) {                                                                                     // 4067\n\t\t\t\t\tif ( an2 ) {                                                                                                      // 4068\n\t\t\t\t\t\tfn( nNode1, nNode2, index );                                                                                     // 4069\n\t\t\t\t\t}                                                                                                                 // 4070\n\t\t\t\t\telse {                                                                                                            // 4071\n\t\t\t\t\t\tfn( nNode1, index );                                                                                             // 4072\n\t\t\t\t\t}                                                                                                                 // 4073\n\t                                                                                                                      // 4074\n\t\t\t\t\tindex++;                                                                                                          // 4075\n\t\t\t\t}                                                                                                                  // 4076\n\t                                                                                                                      // 4077\n\t\t\t\tnNode1 = nNode1.nextSibling;                                                                                       // 4078\n\t\t\t\tnNode2 = an2 ? nNode2.nextSibling : null;                                                                          // 4079\n\t\t\t}                                                                                                                   // 4080\n\t                                                                                                                      // 4081\n\t\t\ti++;                                                                                                                // 4082\n\t\t}                                                                                                                    // 4083\n\t}                                                                                                                     // 4084\n\t                                                                                                                      // 4085\n\t                                                                                                                      // 4086\n\t                                                                                                                      // 4087\n\tvar __re_html_remove = /<.*?>/g;                                                                                      // 4088\n\t                                                                                                                      // 4089\n\t                                                                                                                      // 4090\n\t/**                                                                                                                   // 4091\n\t * Calculate the width of columns for the table                                                                       // 4092\n\t *  @param {object} oSettings dataTables settings object                                                              // 4093\n\t *  @memberof DataTable#oApi                                                                                          // 4094\n\t */                                                                                                                   // 4095\n\tfunction _fnCalculateColumnWidths ( oSettings )                                                                       // 4096\n\t{                                                                                                                     // 4097\n\t\tvar                                                                                                                  // 4098\n\t\t\ttable = oSettings.nTable,                                                                                           // 4099\n\t\t\tcolumns = oSettings.aoColumns,                                                                                      // 4100\n\t\t\tscroll = oSettings.oScroll,                                                                                         // 4101\n\t\t\tscrollY = scroll.sY,                                                                                                // 4102\n\t\t\tscrollX = scroll.sX,                                                                                                // 4103\n\t\t\tscrollXInner = scroll.sXInner,                                                                                      // 4104\n\t\t\tcolumnCount = columns.length,                                                                                       // 4105\n\t\t\tvisibleColumns = _fnGetColumns( oSettings, 'bVisible' ),                                                            // 4106\n\t\t\theaderCells = $('th', oSettings.nTHead),                                                                            // 4107\n\t\t\ttableWidthAttr = table.getAttribute('width'), // from DOM element                                                   // 4108\n\t\t\ttableContainer = table.parentNode,                                                                                  // 4109\n\t\t\tuserInputs = false,                                                                                                 // 4110\n\t\t\ti, column, columnIdx, width, outerWidth;                                                                            // 4111\n\t                                                                                                                      // 4112\n\t\tvar styleWidth = table.style.width;                                                                                  // 4113\n\t\tif ( styleWidth && styleWidth.indexOf('%') !== -1 ) {                                                                // 4114\n\t\t\ttableWidthAttr = styleWidth;                                                                                        // 4115\n\t\t}                                                                                                                    // 4116\n\t                                                                                                                      // 4117\n\t\t/* Convert any user input sizes into pixel sizes */                                                                  // 4118\n\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {                                                                        // 4119\n\t\t\tcolumn = columns[ visibleColumns[i] ];                                                                              // 4120\n\t                                                                                                                      // 4121\n\t\t\tif ( column.sWidth !== null ) {                                                                                     // 4122\n\t\t\t\tcolumn.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );                                            // 4123\n\t                                                                                                                      // 4124\n\t\t\t\tuserInputs = true;                                                                                                 // 4125\n\t\t\t}                                                                                                                   // 4126\n\t\t}                                                                                                                    // 4127\n\t                                                                                                                      // 4128\n\t\t/* If the number of columns in the DOM equals the number that we have to                                             // 4129\n\t\t * process in DataTables, then we can use the offsets that are created by                                            // 4130\n\t\t * the web- browser. No custom sizes can be set in order for this to happen,                                         // 4131\n\t\t * nor scrolling used                                                                                                // 4132\n\t\t */                                                                                                                  // 4133\n\t\tif ( ! userInputs && ! scrollX && ! scrollY &&                                                                       // 4134\n\t\t    columnCount == _fnVisbleColumns( oSettings ) &&                                                                  // 4135\n\t\t\tcolumnCount == headerCells.length                                                                                   // 4136\n\t\t) {                                                                                                                  // 4137\n\t\t\tfor ( i=0 ; i<columnCount ; i++ ) {                                                                                 // 4138\n\t\t\t\tcolumns[i].sWidth = _fnStringToCss( headerCells.eq(i).width() );                                                   // 4139\n\t\t\t}                                                                                                                   // 4140\n\t\t}                                                                                                                    // 4141\n\t\telse                                                                                                                 // 4142\n\t\t{                                                                                                                    // 4143\n\t\t\t// Otherwise construct a single row, worst case, table with the widest                                              // 4144\n\t\t\t// node in the data, assign any user defined widths, then insert it into                                            // 4145\n\t\t\t// the DOM and allow the browser to do all the hard work of calculating                                             // 4146\n\t\t\t// table widths                                                                                                     // 4147\n\t\t\tvar tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table                   // 4148\n\t\t\t\t.css( 'visibility', 'hidden' )                                                                                     // 4149\n\t\t\t\t.removeAttr( 'id' );                                                                                               // 4150\n\t                                                                                                                      // 4151\n\t\t\t// Clean up the table body                                                                                          // 4152\n\t\t\ttmpTable.find('tbody tr').remove();                                                                                 // 4153\n\t\t\tvar tr = $('<tr/>').appendTo( tmpTable.find('tbody') );                                                             // 4154\n\t                                                                                                                      // 4155\n\t\t\t// Remove any assigned widths from the footer (from scrolling)                                                      // 4156\n\t\t\ttmpTable.find('tfoot th, tfoot td').css('width', '');                                                               // 4157\n\t                                                                                                                      // 4158\n\t\t\t// Apply custom sizing to the cloned header                                                                         // 4159\n\t\t\theaderCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );                                              // 4160\n\t                                                                                                                      // 4161\n\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {                                                                       // 4162\n\t\t\t\tcolumn = columns[ visibleColumns[i] ];                                                                             // 4163\n\t                                                                                                                      // 4164\n\t\t\t\theaderCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?                              // 4165\n\t\t\t\t\t_fnStringToCss( column.sWidthOrig ) :                                                                             // 4166\n\t\t\t\t\t'';                                                                                                               // 4167\n\t\t\t}                                                                                                                   // 4168\n\t                                                                                                                      // 4169\n\t\t\t// Find the widest cell for each column and put it into the table                                                   // 4170\n\t\t\tif ( oSettings.aoData.length ) {                                                                                    // 4171\n\t\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {                                                                      // 4172\n\t\t\t\t\tcolumnIdx = visibleColumns[i];                                                                                    // 4173\n\t\t\t\t\tcolumn = columns[ columnIdx ];                                                                                    // 4174\n\t                                                                                                                      // 4175\n\t\t\t\t\t$( _fnGetWidestNode( oSettings, columnIdx ) )                                                                     // 4176\n\t\t\t\t\t\t.clone( false )                                                                                                  // 4177\n\t\t\t\t\t\t.append( column.sContentPadding )                                                                                // 4178\n\t\t\t\t\t\t.appendTo( tr );                                                                                                 // 4179\n\t\t\t\t}                                                                                                                  // 4180\n\t\t\t}                                                                                                                   // 4181\n\t                                                                                                                      // 4182\n\t\t\t// Table has been built, attach to the document so we can work with it                                              // 4183\n\t\t\ttmpTable.appendTo( tableContainer );                                                                                // 4184\n\t                                                                                                                      // 4185\n\t\t\t// When scrolling (X or Y) we want to set the width of the table as                                                 // 4186\n\t\t\t// appropriate. However, when not scrolling leave the table width as it                                             // 4187\n\t\t\t// is. This results in slightly different, but I think correct behaviour                                            // 4188\n\t\t\tif ( scrollX && scrollXInner ) {                                                                                    // 4189\n\t\t\t\ttmpTable.width( scrollXInner );                                                                                    // 4190\n\t\t\t}                                                                                                                   // 4191\n\t\t\telse if ( scrollX ) {                                                                                               // 4192\n\t\t\t\ttmpTable.css( 'width', 'auto' );                                                                                   // 4193\n\t                                                                                                                      // 4194\n\t\t\t\tif ( tmpTable.width() < tableContainer.offsetWidth ) {                                                             // 4195\n\t\t\t\t\ttmpTable.width( tableContainer.offsetWidth );                                                                     // 4196\n\t\t\t\t}                                                                                                                  // 4197\n\t\t\t}                                                                                                                   // 4198\n\t\t\telse if ( scrollY ) {                                                                                               // 4199\n\t\t\t\ttmpTable.width( tableContainer.offsetWidth );                                                                      // 4200\n\t\t\t}                                                                                                                   // 4201\n\t\t\telse if ( tableWidthAttr ) {                                                                                        // 4202\n\t\t\t\ttmpTable.width( tableWidthAttr );                                                                                  // 4203\n\t\t\t}                                                                                                                   // 4204\n\t                                                                                                                      // 4205\n\t\t\t// Take into account the y scrollbar                                                                                // 4206\n\t\t\t_fnScrollingWidthAdjust( oSettings, tmpTable[0] );                                                                  // 4207\n\t                                                                                                                      // 4208\n\t\t\t// Browsers need a bit of a hand when a width is assigned to any columns                                            // 4209\n\t\t\t// when x-scrolling as they tend to collapse the table to the min-width,                                            // 4210\n\t\t\t// even if we sent the column widths. So we need to keep track of what                                              // 4211\n\t\t\t// the table width should be by summing the user given values, and the                                              // 4212\n\t\t\t// automatic values                                                                                                 // 4213\n\t\t\tif ( scrollX )                                                                                                      // 4214\n\t\t\t{                                                                                                                   // 4215\n\t\t\t\tvar total = 0;                                                                                                     // 4216\n\t                                                                                                                      // 4217\n\t\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {                                                                      // 4218\n\t\t\t\t\tcolumn = columns[ visibleColumns[i] ];                                                                            // 4219\n\t\t\t\t\touterWidth = $(headerCells[i]).outerWidth();                                                                      // 4220\n\t                                                                                                                      // 4221\n\t\t\t\t\ttotal += column.sWidthOrig === null ?                                                                             // 4222\n\t\t\t\t\t\touterWidth :                                                                                                     // 4223\n\t\t\t\t\t\tparseInt( column.sWidth, 10 ) + outerWidth - $(headerCells[i]).width();                                          // 4224\n\t\t\t\t}                                                                                                                  // 4225\n\t                                                                                                                      // 4226\n\t\t\t\ttmpTable.width( _fnStringToCss( total ) );                                                                         // 4227\n\t\t\t\ttable.style.width = _fnStringToCss( total );                                                                       // 4228\n\t\t\t}                                                                                                                   // 4229\n\t                                                                                                                      // 4230\n\t\t\t// Get the width of each column in the constructed table                                                            // 4231\n\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {                                                                       // 4232\n\t\t\t\tcolumn = columns[ visibleColumns[i] ];                                                                             // 4233\n\t\t\t\twidth = $(headerCells[i]).width();                                                                                 // 4234\n\t                                                                                                                      // 4235\n\t\t\t\tif ( width ) {                                                                                                     // 4236\n\t\t\t\t\tcolumn.sWidth = _fnStringToCss( width );                                                                          // 4237\n\t\t\t\t}                                                                                                                  // 4238\n\t\t\t}                                                                                                                   // 4239\n\t                                                                                                                      // 4240\n\t\t\ttable.style.width = _fnStringToCss( tmpTable.css('width') );                                                        // 4241\n\t                                                                                                                      // 4242\n\t\t\t// Finished with the table - ditch it                                                                               // 4243\n\t\t\ttmpTable.remove();                                                                                                  // 4244\n\t\t}                                                                                                                    // 4245\n\t                                                                                                                      // 4246\n\t\t// If there is a width attr, we want to attach an event listener which                                               // 4247\n\t\t// allows the table sizing to automatically adjust when the window is                                                // 4248\n\t\t// resized. Use the width attr rather than CSS, since we can't know if the                                           // 4249\n\t\t// CSS is a relative value or absolute - DOM read is always px.                                                      // 4250\n\t\tif ( tableWidthAttr ) {                                                                                              // 4251\n\t\t\ttable.style.width = _fnStringToCss( tableWidthAttr );                                                               // 4252\n\t\t}                                                                                                                    // 4253\n\t                                                                                                                      // 4254\n\t\tif ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {                                                         // 4255\n\t\t\tvar bindResize = function () {                                                                                      // 4256\n\t\t\t\t$(window).bind('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {                                        // 4257\n\t\t\t\t\t_fnAdjustColumnSizing( oSettings );                                                                               // 4258\n\t\t\t\t} ) );                                                                                                             // 4259\n\t\t\t};                                                                                                                  // 4260\n\t                                                                                                                      // 4261\n\t\t\t// IE6/7 will crash if we bind a resize event handler on page load.                                                 // 4262\n\t\t\t// To be removed in 1.11 which drops IE6/7 support                                                                  // 4263\n\t\t\tif ( oSettings.oBrowser.bScrollOversize ) {                                                                         // 4264\n\t\t\t\tsetTimeout( bindResize, 1000 );                                                                                    // 4265\n\t\t\t}                                                                                                                   // 4266\n\t\t\telse {                                                                                                              // 4267\n\t\t\t\tbindResize();                                                                                                      // 4268\n\t\t\t}                                                                                                                   // 4269\n\t                                                                                                                      // 4270\n\t\t\toSettings._reszEvt = true;                                                                                          // 4271\n\t\t}                                                                                                                    // 4272\n\t}                                                                                                                     // 4273\n\t                                                                                                                      // 4274\n\t                                                                                                                      // 4275\n\t/**                                                                                                                   // 4276\n\t * Throttle the calls to a function. Arguments and context are maintained for                                         // 4277\n\t * the throttled function                                                                                             // 4278\n\t *  @param {function} fn Function to be called                                                                        // 4279\n\t *  @param {int} [freq=200] call frequency in mS                                                                      // 4280\n\t *  @returns {function} wrapped function                                                                              // 4281\n\t *  @memberof DataTable#oApi                                                                                          // 4282\n\t */                                                                                                                   // 4283\n\tfunction _fnThrottle( fn, freq ) {                                                                                    // 4284\n\t\tvar                                                                                                                  // 4285\n\t\t\tfrequency = freq !== undefined ? freq : 200,                                                                        // 4286\n\t\t\tlast,                                                                                                               // 4287\n\t\t\ttimer;                                                                                                              // 4288\n\t                                                                                                                      // 4289\n\t\treturn function () {                                                                                                 // 4290\n\t\t\tvar                                                                                                                 // 4291\n\t\t\t\tthat = this,                                                                                                       // 4292\n\t\t\t\tnow  = +new Date(),                                                                                                // 4293\n\t\t\t\targs = arguments;                                                                                                  // 4294\n\t                                                                                                                      // 4295\n\t\t\tif ( last && now < last + frequency ) {                                                                             // 4296\n\t\t\t\tclearTimeout( timer );                                                                                             // 4297\n\t                                                                                                                      // 4298\n\t\t\t\ttimer = setTimeout( function () {                                                                                  // 4299\n\t\t\t\t\tlast = undefined;                                                                                                 // 4300\n\t\t\t\t\tfn.apply( that, args );                                                                                           // 4301\n\t\t\t\t}, frequency );                                                                                                    // 4302\n\t\t\t}                                                                                                                   // 4303\n\t\t\telse {                                                                                                              // 4304\n\t\t\t\tlast = now;                                                                                                        // 4305\n\t\t\t\tfn.apply( that, args );                                                                                            // 4306\n\t\t\t}                                                                                                                   // 4307\n\t\t};                                                                                                                   // 4308\n\t}                                                                                                                     // 4309\n\t                                                                                                                      // 4310\n\t                                                                                                                      // 4311\n\t/**                                                                                                                   // 4312\n\t * Convert a CSS unit width to pixels (e.g. 2em)                                                                      // 4313\n\t *  @param {string} width width to be converted                                                                       // 4314\n\t *  @param {node} parent parent to get the with for (required for relative widths) - optional                         // 4315\n\t *  @returns {int} width in pixels                                                                                    // 4316\n\t *  @memberof DataTable#oApi                                                                                          // 4317\n\t */                                                                                                                   // 4318\n\tfunction _fnConvertToWidth ( width, parent )                                                                          // 4319\n\t{                                                                                                                     // 4320\n\t\tif ( ! width ) {                                                                                                     // 4321\n\t\t\treturn 0;                                                                                                           // 4322\n\t\t}                                                                                                                    // 4323\n\t                                                                                                                      // 4324\n\t\tvar n = $('<div/>')                                                                                                  // 4325\n\t\t\t.css( 'width', _fnStringToCss( width ) )                                                                            // 4326\n\t\t\t.appendTo( parent || document.body );                                                                               // 4327\n\t                                                                                                                      // 4328\n\t\tvar val = n[0].offsetWidth;                                                                                          // 4329\n\t\tn.remove();                                                                                                          // 4330\n\t                                                                                                                      // 4331\n\t\treturn val;                                                                                                          // 4332\n\t}                                                                                                                     // 4333\n\t                                                                                                                      // 4334\n\t                                                                                                                      // 4335\n\t/**                                                                                                                   // 4336\n\t * Adjust a table's width to take account of vertical scroll bar                                                      // 4337\n\t *  @param {object} oSettings dataTables settings object                                                              // 4338\n\t *  @param {node} n table node                                                                                        // 4339\n\t *  @memberof DataTable#oApi                                                                                          // 4340\n\t */                                                                                                                   // 4341\n\t                                                                                                                      // 4342\n\tfunction _fnScrollingWidthAdjust ( settings, n )                                                                      // 4343\n\t{                                                                                                                     // 4344\n\t\tvar scroll = settings.oScroll;                                                                                       // 4345\n\t                                                                                                                      // 4346\n\t\tif ( scroll.sX || scroll.sY ) {                                                                                      // 4347\n\t\t\t// When y-scrolling only, we want to remove the width of the scroll bar                                             // 4348\n\t\t\t// so the table + scroll bar will fit into the area available, otherwise                                            // 4349\n\t\t\t// we fix the table at its current size with no adjustment                                                          // 4350\n\t\t\tvar correction = ! scroll.sX ? scroll.iBarWidth : 0;                                                                // 4351\n\t\t\tn.style.width = _fnStringToCss( $(n).outerWidth() - correction );                                                   // 4352\n\t\t}                                                                                                                    // 4353\n\t}                                                                                                                     // 4354\n\t                                                                                                                      // 4355\n\t                                                                                                                      // 4356\n\t/**                                                                                                                   // 4357\n\t * Get the widest node                                                                                                // 4358\n\t *  @param {object} settings dataTables settings object                                                               // 4359\n\t *  @param {int} colIdx column of interest                                                                            // 4360\n\t *  @returns {node} widest table node                                                                                 // 4361\n\t *  @memberof DataTable#oApi                                                                                          // 4362\n\t */                                                                                                                   // 4363\n\tfunction _fnGetWidestNode( settings, colIdx )                                                                         // 4364\n\t{                                                                                                                     // 4365\n\t\tvar idx = _fnGetMaxLenString( settings, colIdx );                                                                    // 4366\n\t\tif ( idx < 0 ) {                                                                                                     // 4367\n\t\t\treturn null;                                                                                                        // 4368\n\t\t}                                                                                                                    // 4369\n\t                                                                                                                      // 4370\n\t\tvar data = settings.aoData[ idx ];                                                                                   // 4371\n\t\treturn ! data.nTr ? // Might not have been created when deferred rendering                                           // 4372\n\t\t\t$('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :                                          // 4373\n\t\t\tdata.anCells[ colIdx ];                                                                                             // 4374\n\t}                                                                                                                     // 4375\n\t                                                                                                                      // 4376\n\t                                                                                                                      // 4377\n\t/**                                                                                                                   // 4378\n\t * Get the maximum strlen for each data column                                                                        // 4379\n\t *  @param {object} settings dataTables settings object                                                               // 4380\n\t *  @param {int} colIdx column of interest                                                                            // 4381\n\t *  @returns {string} max string length for each column                                                               // 4382\n\t *  @memberof DataTable#oApi                                                                                          // 4383\n\t */                                                                                                                   // 4384\n\tfunction _fnGetMaxLenString( settings, colIdx )                                                                       // 4385\n\t{                                                                                                                     // 4386\n\t\tvar s, max=-1, maxIdx = -1;                                                                                          // 4387\n\t                                                                                                                      // 4388\n\t\tfor ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {                                                          // 4389\n\t\t\ts = _fnGetCellData( settings, i, colIdx, 'display' )+'';                                                            // 4390\n\t\t\ts = s.replace( __re_html_remove, '' );                                                                              // 4391\n\t                                                                                                                      // 4392\n\t\t\tif ( s.length > max ) {                                                                                             // 4393\n\t\t\t\tmax = s.length;                                                                                                    // 4394\n\t\t\t\tmaxIdx = i;                                                                                                        // 4395\n\t\t\t}                                                                                                                   // 4396\n\t\t}                                                                                                                    // 4397\n\t                                                                                                                      // 4398\n\t\treturn maxIdx;                                                                                                       // 4399\n\t}                                                                                                                     // 4400\n\t                                                                                                                      // 4401\n\t                                                                                                                      // 4402\n\t/**                                                                                                                   // 4403\n\t * Append a CSS unit (only if required) to a string                                                                   // 4404\n\t *  @param {string} value to css-ify                                                                                  // 4405\n\t *  @returns {string} value with css unit                                                                             // 4406\n\t *  @memberof DataTable#oApi                                                                                          // 4407\n\t */                                                                                                                   // 4408\n\tfunction _fnStringToCss( s )                                                                                          // 4409\n\t{                                                                                                                     // 4410\n\t\tif ( s === null ) {                                                                                                  // 4411\n\t\t\treturn '0px';                                                                                                       // 4412\n\t\t}                                                                                                                    // 4413\n\t                                                                                                                      // 4414\n\t\tif ( typeof s == 'number' ) {                                                                                        // 4415\n\t\t\treturn s < 0 ?                                                                                                      // 4416\n\t\t\t\t'0px' :                                                                                                            // 4417\n\t\t\t\ts+'px';                                                                                                            // 4418\n\t\t}                                                                                                                    // 4419\n\t                                                                                                                      // 4420\n\t\t// Check it has a unit character already                                                                             // 4421\n\t\treturn s.match(/\\d$/) ?                                                                                              // 4422\n\t\t\ts+'px' :                                                                                                            // 4423\n\t\t\ts;                                                                                                                  // 4424\n\t}                                                                                                                     // 4425\n\t                                                                                                                      // 4426\n\t                                                                                                                      // 4427\n\t/**                                                                                                                   // 4428\n\t * Get the width of a scroll bar in this browser being used                                                           // 4429\n\t *  @returns {int} width in pixels                                                                                    // 4430\n\t *  @memberof DataTable#oApi                                                                                          // 4431\n\t */                                                                                                                   // 4432\n\tfunction _fnScrollBarWidth ()                                                                                         // 4433\n\t{                                                                                                                     // 4434\n\t\t// On first run a static variable is set, since this is only needed once.                                            // 4435\n\t\t// Subsequent runs will just use the previously calculated value                                                     // 4436\n\t\tvar width = DataTable.__scrollbarWidth;                                                                              // 4437\n\t                                                                                                                      // 4438\n\t\tif ( width === undefined ) {                                                                                         // 4439\n\t\t\tvar sizer = $('<p/>').css( {                                                                                        // 4440\n\t\t\t\t\tposition: 'absolute',                                                                                             // 4441\n\t\t\t\t\ttop: 0,                                                                                                           // 4442\n\t\t\t\t\tleft: 0,                                                                                                          // 4443\n\t\t\t\t\twidth: '100%',                                                                                                    // 4444\n\t\t\t\t\theight: 150,                                                                                                      // 4445\n\t\t\t\t\tpadding: 0,                                                                                                       // 4446\n\t\t\t\t\toverflow: 'scroll',                                                                                               // 4447\n\t\t\t\t\tvisibility: 'hidden'                                                                                              // 4448\n\t\t\t\t} )                                                                                                                // 4449\n\t\t\t\t.appendTo('body');                                                                                                 // 4450\n\t                                                                                                                      // 4451\n\t\t\twidth = sizer[0].offsetWidth - sizer[0].clientWidth;                                                                // 4452\n\t\t\tDataTable.__scrollbarWidth = width;                                                                                 // 4453\n\t                                                                                                                      // 4454\n\t\t\tsizer.remove();                                                                                                     // 4455\n\t\t}                                                                                                                    // 4456\n\t                                                                                                                      // 4457\n\t\treturn width;                                                                                                        // 4458\n\t}                                                                                                                     // 4459\n\t                                                                                                                      // 4460\n\t                                                                                                                      // 4461\n\t                                                                                                                      // 4462\n\tfunction _fnSortFlatten ( settings )                                                                                  // 4463\n\t{                                                                                                                     // 4464\n\t\tvar                                                                                                                  // 4465\n\t\t\ti, iLen, k, kLen,                                                                                                   // 4466\n\t\t\taSort = [],                                                                                                         // 4467\n\t\t\taiOrig = [],                                                                                                        // 4468\n\t\t\taoColumns = settings.aoColumns,                                                                                     // 4469\n\t\t\taDataSort, iCol, sType, srcCol,                                                                                     // 4470\n\t\t\tfixed = settings.aaSortingFixed,                                                                                    // 4471\n\t\t\tfixedObj = $.isPlainObject( fixed ),                                                                                // 4472\n\t\t\tnestedSort = [],                                                                                                    // 4473\n\t\t\tadd = function ( a ) {                                                                                              // 4474\n\t\t\t\tif ( a.length && ! $.isArray( a[0] ) ) {                                                                           // 4475\n\t\t\t\t\t// 1D array                                                                                                       // 4476\n\t\t\t\t\tnestedSort.push( a );                                                                                             // 4477\n\t\t\t\t}                                                                                                                  // 4478\n\t\t\t\telse {                                                                                                             // 4479\n\t\t\t\t\t// 2D array                                                                                                       // 4480\n\t\t\t\t\tnestedSort.push.apply( nestedSort, a );                                                                           // 4481\n\t\t\t\t}                                                                                                                  // 4482\n\t\t\t};                                                                                                                  // 4483\n\t                                                                                                                      // 4484\n\t\t// Build the sort array, with pre-fix and post-fix options if they have been                                         // 4485\n\t\t// specified                                                                                                         // 4486\n\t\tif ( $.isArray( fixed ) ) {                                                                                          // 4487\n\t\t\tadd( fixed );                                                                                                       // 4488\n\t\t}                                                                                                                    // 4489\n\t                                                                                                                      // 4490\n\t\tif ( fixedObj && fixed.pre ) {                                                                                       // 4491\n\t\t\tadd( fixed.pre );                                                                                                   // 4492\n\t\t}                                                                                                                    // 4493\n\t                                                                                                                      // 4494\n\t\tadd( settings.aaSorting );                                                                                           // 4495\n\t                                                                                                                      // 4496\n\t\tif (fixedObj && fixed.post ) {                                                                                       // 4497\n\t\t\tadd( fixed.post );                                                                                                  // 4498\n\t\t}                                                                                                                    // 4499\n\t                                                                                                                      // 4500\n\t\tfor ( i=0 ; i<nestedSort.length ; i++ )                                                                              // 4501\n\t\t{                                                                                                                    // 4502\n\t\t\tsrcCol = nestedSort[i][0];                                                                                          // 4503\n\t\t\taDataSort = aoColumns[ srcCol ].aDataSort;                                                                          // 4504\n\t                                                                                                                      // 4505\n\t\t\tfor ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )                                                                   // 4506\n\t\t\t{                                                                                                                   // 4507\n\t\t\t\tiCol = aDataSort[k];                                                                                               // 4508\n\t\t\t\tsType = aoColumns[ iCol ].sType || 'string';                                                                       // 4509\n\t                                                                                                                      // 4510\n\t\t\t\tif ( nestedSort[i]._idx === undefined ) {                                                                          // 4511\n\t\t\t\t\tnestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );                                    // 4512\n\t\t\t\t}                                                                                                                  // 4513\n\t                                                                                                                      // 4514\n\t\t\t\taSort.push( {                                                                                                      // 4515\n\t\t\t\t\tsrc:       srcCol,                                                                                                // 4516\n\t\t\t\t\tcol:       iCol,                                                                                                  // 4517\n\t\t\t\t\tdir:       nestedSort[i][1],                                                                                      // 4518\n\t\t\t\t\tindex:     nestedSort[i]._idx,                                                                                    // 4519\n\t\t\t\t\ttype:      sType,                                                                                                 // 4520\n\t\t\t\t\tformatter: DataTable.ext.type.order[ sType+\"-pre\" ]                                                               // 4521\n\t\t\t\t} );                                                                                                               // 4522\n\t\t\t}                                                                                                                   // 4523\n\t\t}                                                                                                                    // 4524\n\t                                                                                                                      // 4525\n\t\treturn aSort;                                                                                                        // 4526\n\t}                                                                                                                     // 4527\n\t                                                                                                                      // 4528\n\t/**                                                                                                                   // 4529\n\t * Change the order of the table                                                                                      // 4530\n\t *  @param {object} oSettings dataTables settings object                                                              // 4531\n\t *  @memberof DataTable#oApi                                                                                          // 4532\n\t *  @todo This really needs split up!                                                                                 // 4533\n\t */                                                                                                                   // 4534\n\tfunction _fnSort ( oSettings )                                                                                        // 4535\n\t{                                                                                                                     // 4536\n\t\tvar                                                                                                                  // 4537\n\t\t\ti, ien, iLen, j, jLen, k, kLen,                                                                                     // 4538\n\t\t\tsDataType, nTh,                                                                                                     // 4539\n\t\t\taiOrig = [],                                                                                                        // 4540\n\t\t\toExtSort = DataTable.ext.type.order,                                                                                // 4541\n\t\t\taoData = oSettings.aoData,                                                                                          // 4542\n\t\t\taoColumns = oSettings.aoColumns,                                                                                    // 4543\n\t\t\taDataSort, data, iCol, sType, oSort,                                                                                // 4544\n\t\t\tformatters = 0,                                                                                                     // 4545\n\t\t\tsortCol,                                                                                                            // 4546\n\t\t\tdisplayMaster = oSettings.aiDisplayMaster,                                                                          // 4547\n\t\t\taSort;                                                                                                              // 4548\n\t                                                                                                                      // 4549\n\t\t// Resolve any column types that are unknown due to addition or invalidation                                         // 4550\n\t\t// @todo Can this be moved into a 'data-ready' handler which is called when                                          // 4551\n\t\t//   data is going to be used in the table?                                                                          // 4552\n\t\t_fnColumnTypes( oSettings );                                                                                         // 4553\n\t                                                                                                                      // 4554\n\t\taSort = _fnSortFlatten( oSettings );                                                                                 // 4555\n\t                                                                                                                      // 4556\n\t\tfor ( i=0, ien=aSort.length ; i<ien ; i++ ) {                                                                        // 4557\n\t\t\tsortCol = aSort[i];                                                                                                 // 4558\n\t                                                                                                                      // 4559\n\t\t\t// Track if we can use the fast sort algorithm                                                                      // 4560\n\t\t\tif ( sortCol.formatter ) {                                                                                          // 4561\n\t\t\t\tformatters++;                                                                                                      // 4562\n\t\t\t}                                                                                                                   // 4563\n\t                                                                                                                      // 4564\n\t\t\t// Load the data needed for the sort, for each cell                                                                 // 4565\n\t\t\t_fnSortData( oSettings, sortCol.col );                                                                              // 4566\n\t\t}                                                                                                                    // 4567\n\t                                                                                                                      // 4568\n\t\t/* No sorting required if server-side or no sorting array */                                                         // 4569\n\t\tif ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )                                                     // 4570\n\t\t{                                                                                                                    // 4571\n\t\t\t// Create a value - key array of the current row positions such that we can use their                               // 4572\n\t\t\t// current position during the sort, if values match, in order to perform stable sorting                            // 4573\n\t\t\tfor ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {                                                             // 4574\n\t\t\t\taiOrig[ displayMaster[i] ] = i;                                                                                    // 4575\n\t\t\t}                                                                                                                   // 4576\n\t                                                                                                                      // 4577\n\t\t\t/* Do the sort - here we want multi-column sorting based on a given data source (column)                            // 4578\n\t\t\t * and sorting function (from oSort) in a certain direction. It's reasonably complex to                             // 4579\n\t\t\t * follow on it's own, but this is what we want (example two column sorting):                                       // 4580\n\t\t\t *  fnLocalSorting = function(a,b){                                                                                 // 4581\n\t\t\t *    var iTest;                                                                                                    // 4582\n\t\t\t *    iTest = oSort['string-asc']('data11', 'data12');                                                              // 4583\n\t\t\t *      if (iTest !== 0)                                                                                            // 4584\n\t\t\t *        return iTest;                                                                                             // 4585\n\t\t\t *    iTest = oSort['numeric-desc']('data21', 'data22');                                                            // 4586\n\t\t\t *    if (iTest !== 0)                                                                                              // 4587\n\t\t\t *      return iTest;                                                                                               // 4588\n\t\t\t *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );                                                          // 4589\n\t\t\t *  }                                                                                                               // 4590\n\t\t\t * Basically we have a test for each sorting column, if the data in that column is equal,                           // 4591\n\t\t\t * test the next column. If all columns match, then we use a numeric sort on the row                                // 4592\n\t\t\t * positions in the original data array to provide a stable sort.                                                   // 4593\n\t\t\t *                                                                                                                  // 4594\n\t\t\t * Note - I know it seems excessive to have two sorting methods, but the first is around                            // 4595\n\t\t\t * 15% faster, so the second is only maintained for backwards compatibility with sorting                            // 4596\n\t\t\t * methods which do not have a pre-sort formatting function.                                                        // 4597\n\t\t\t */                                                                                                                 // 4598\n\t\t\tif ( formatters === aSort.length ) {                                                                                // 4599\n\t\t\t\t// All sort types have formatting functions                                                                        // 4600\n\t\t\t\tdisplayMaster.sort( function ( a, b ) {                                                                            // 4601\n\t\t\t\t\tvar                                                                                                               // 4602\n\t\t\t\t\t\tx, y, k, test, sort,                                                                                             // 4603\n\t\t\t\t\t\tlen=aSort.length,                                                                                                // 4604\n\t\t\t\t\t\tdataA = aoData[a]._aSortData,                                                                                    // 4605\n\t\t\t\t\t\tdataB = aoData[b]._aSortData;                                                                                    // 4606\n\t                                                                                                                      // 4607\n\t\t\t\t\tfor ( k=0 ; k<len ; k++ ) {                                                                                       // 4608\n\t\t\t\t\t\tsort = aSort[k];                                                                                                 // 4609\n\t                                                                                                                      // 4610\n\t\t\t\t\t\tx = dataA[ sort.col ];                                                                                           // 4611\n\t\t\t\t\t\ty = dataB[ sort.col ];                                                                                           // 4612\n\t                                                                                                                      // 4613\n\t\t\t\t\t\ttest = x<y ? -1 : x>y ? 1 : 0;                                                                                   // 4614\n\t\t\t\t\t\tif ( test !== 0 ) {                                                                                              // 4615\n\t\t\t\t\t\t\treturn sort.dir === 'asc' ? test : -test;                                                                       // 4616\n\t\t\t\t\t\t}                                                                                                                // 4617\n\t\t\t\t\t}                                                                                                                 // 4618\n\t                                                                                                                      // 4619\n\t\t\t\t\tx = aiOrig[a];                                                                                                    // 4620\n\t\t\t\t\ty = aiOrig[b];                                                                                                    // 4621\n\t\t\t\t\treturn x<y ? -1 : x>y ? 1 : 0;                                                                                    // 4622\n\t\t\t\t} );                                                                                                               // 4623\n\t\t\t}                                                                                                                   // 4624\n\t\t\telse {                                                                                                              // 4625\n\t\t\t\t// Depreciated - remove in 1.11 (providing a plug-in option)                                                       // 4626\n\t\t\t\t// Not all sort types have formatting methods, so we have to call their sorting                                    // 4627\n\t\t\t\t// methods.                                                                                                        // 4628\n\t\t\t\tdisplayMaster.sort( function ( a, b ) {                                                                            // 4629\n\t\t\t\t\tvar                                                                                                               // 4630\n\t\t\t\t\t\tx, y, k, l, test, sort, fn,                                                                                      // 4631\n\t\t\t\t\t\tlen=aSort.length,                                                                                                // 4632\n\t\t\t\t\t\tdataA = aoData[a]._aSortData,                                                                                    // 4633\n\t\t\t\t\t\tdataB = aoData[b]._aSortData;                                                                                    // 4634\n\t                                                                                                                      // 4635\n\t\t\t\t\tfor ( k=0 ; k<len ; k++ ) {                                                                                       // 4636\n\t\t\t\t\t\tsort = aSort[k];                                                                                                 // 4637\n\t                                                                                                                      // 4638\n\t\t\t\t\t\tx = dataA[ sort.col ];                                                                                           // 4639\n\t\t\t\t\t\ty = dataB[ sort.col ];                                                                                           // 4640\n\t                                                                                                                      // 4641\n\t\t\t\t\t\tfn = oExtSort[ sort.type+\"-\"+sort.dir ] || oExtSort[ \"string-\"+sort.dir ];                                       // 4642\n\t\t\t\t\t\ttest = fn( x, y );                                                                                               // 4643\n\t\t\t\t\t\tif ( test !== 0 ) {                                                                                              // 4644\n\t\t\t\t\t\t\treturn test;                                                                                                    // 4645\n\t\t\t\t\t\t}                                                                                                                // 4646\n\t\t\t\t\t}                                                                                                                 // 4647\n\t                                                                                                                      // 4648\n\t\t\t\t\tx = aiOrig[a];                                                                                                    // 4649\n\t\t\t\t\ty = aiOrig[b];                                                                                                    // 4650\n\t\t\t\t\treturn x<y ? -1 : x>y ? 1 : 0;                                                                                    // 4651\n\t\t\t\t} );                                                                                                               // 4652\n\t\t\t}                                                                                                                   // 4653\n\t\t}                                                                                                                    // 4654\n\t                                                                                                                      // 4655\n\t\t/* Tell the draw function that we have sorted the data */                                                            // 4656\n\t\toSettings.bSorted = true;                                                                                            // 4657\n\t}                                                                                                                     // 4658\n\t                                                                                                                      // 4659\n\t                                                                                                                      // 4660\n\tfunction _fnSortAria ( settings )                                                                                     // 4661\n\t{                                                                                                                     // 4662\n\t\tvar label;                                                                                                           // 4663\n\t\tvar nextSort;                                                                                                        // 4664\n\t\tvar columns = settings.aoColumns;                                                                                    // 4665\n\t\tvar aSort = _fnSortFlatten( settings );                                                                              // 4666\n\t\tvar oAria = settings.oLanguage.oAria;                                                                                // 4667\n\t                                                                                                                      // 4668\n\t\t// ARIA attributes - need to loop all columns, to update all (removing old                                           // 4669\n\t\t// attributes as needed)                                                                                             // 4670\n\t\tfor ( var i=0, iLen=columns.length ; i<iLen ; i++ )                                                                  // 4671\n\t\t{                                                                                                                    // 4672\n\t\t\tvar col = columns[i];                                                                                               // 4673\n\t\t\tvar asSorting = col.asSorting;                                                                                      // 4674\n\t\t\tvar sTitle = col.sTitle.replace( /<.*?>/g, \"\" );                                                                    // 4675\n\t\t\tvar th = col.nTh;                                                                                                   // 4676\n\t                                                                                                                      // 4677\n\t\t\t// IE7 is throwing an error when setting these properties with jQuery's                                             // 4678\n\t\t\t// attr() and removeAttr() methods...                                                                               // 4679\n\t\t\tth.removeAttribute('aria-sort');                                                                                    // 4680\n\t                                                                                                                      // 4681\n\t\t\t/* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */                         // 4682\n\t\t\tif ( col.bSortable ) {                                                                                              // 4683\n\t\t\t\tif ( aSort.length > 0 && aSort[0].col == i ) {                                                                     // 4684\n\t\t\t\t\tth.setAttribute('aria-sort', aSort[0].dir==\"asc\" ? \"ascending\" : \"descending\" );                                  // 4685\n\t\t\t\t\tnextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];                                                         // 4686\n\t\t\t\t}                                                                                                                  // 4687\n\t\t\t\telse {                                                                                                             // 4688\n\t\t\t\t\tnextSort = asSorting[0];                                                                                          // 4689\n\t\t\t\t}                                                                                                                  // 4690\n\t                                                                                                                      // 4691\n\t\t\t\tlabel = sTitle + ( nextSort === \"asc\" ?                                                                            // 4692\n\t\t\t\t\toAria.sSortAscending :                                                                                            // 4693\n\t\t\t\t\toAria.sSortDescending                                                                                             // 4694\n\t\t\t\t);                                                                                                                 // 4695\n\t\t\t}                                                                                                                   // 4696\n\t\t\telse {                                                                                                              // 4697\n\t\t\t\tlabel = sTitle;                                                                                                    // 4698\n\t\t\t}                                                                                                                   // 4699\n\t                                                                                                                      // 4700\n\t\t\tth.setAttribute('aria-label', label);                                                                               // 4701\n\t\t}                                                                                                                    // 4702\n\t}                                                                                                                     // 4703\n\t                                                                                                                      // 4704\n\t                                                                                                                      // 4705\n\t/**                                                                                                                   // 4706\n\t * Function to run on user sort request                                                                               // 4707\n\t *  @param {object} settings dataTables settings object                                                               // 4708\n\t *  @param {node} attachTo node to attach the handler to                                                              // 4709\n\t *  @param {int} colIdx column sorting index                                                                          // 4710\n\t *  @param {boolean} [append=false] Append the requested sort to the existing                                         // 4711\n\t *    sort if true (i.e. multi-column sort)                                                                           // 4712\n\t *  @param {function} [callback] callback function                                                                    // 4713\n\t *  @memberof DataTable#oApi                                                                                          // 4714\n\t */                                                                                                                   // 4715\n\tfunction _fnSortListener ( settings, colIdx, append, callback )                                                       // 4716\n\t{                                                                                                                     // 4717\n\t\tvar col = settings.aoColumns[ colIdx ];                                                                              // 4718\n\t\tvar sorting = settings.aaSorting;                                                                                    // 4719\n\t\tvar asSorting = col.asSorting;                                                                                       // 4720\n\t\tvar nextSortIdx;                                                                                                     // 4721\n\t\tvar next = function ( a, overflow ) {                                                                                // 4722\n\t\t\tvar idx = a._idx;                                                                                                   // 4723\n\t\t\tif ( idx === undefined ) {                                                                                          // 4724\n\t\t\t\tidx = $.inArray( a[1], asSorting );                                                                                // 4725\n\t\t\t}                                                                                                                   // 4726\n\t                                                                                                                      // 4727\n\t\t\treturn idx+1 < asSorting.length ?                                                                                   // 4728\n\t\t\t\tidx+1 :                                                                                                            // 4729\n\t\t\t\toverflow ?                                                                                                         // 4730\n\t\t\t\t\tnull :                                                                                                            // 4731\n\t\t\t\t\t0;                                                                                                                // 4732\n\t\t};                                                                                                                   // 4733\n\t                                                                                                                      // 4734\n\t\t// Convert to 2D array if needed                                                                                     // 4735\n\t\tif ( typeof sorting[0] === 'number' ) {                                                                              // 4736\n\t\t\tsorting = settings.aaSorting = [ sorting ];                                                                         // 4737\n\t\t}                                                                                                                    // 4738\n\t                                                                                                                      // 4739\n\t\t// If appending the sort then we are multi-column sorting                                                            // 4740\n\t\tif ( append && settings.oFeatures.bSortMulti ) {                                                                     // 4741\n\t\t\t// Are we already doing some kind of sort on this column?                                                           // 4742\n\t\t\tvar sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );                                                            // 4743\n\t                                                                                                                      // 4744\n\t\t\tif ( sortIdx !== -1 ) {                                                                                             // 4745\n\t\t\t\t// Yes, modify the sort                                                                                            // 4746\n\t\t\t\tnextSortIdx = next( sorting[sortIdx], true );                                                                      // 4747\n\t                                                                                                                      // 4748\n\t\t\t\tif ( nextSortIdx === null && sorting.length === 1 ) {                                                              // 4749\n\t\t\t\t\tnextSortIdx = 0; // can't remove sorting completely                                                               // 4750\n\t\t\t\t}                                                                                                                  // 4751\n\t                                                                                                                      // 4752\n\t\t\t\tif ( nextSortIdx === null ) {                                                                                      // 4753\n\t\t\t\t\tsorting.splice( sortIdx, 1 );                                                                                     // 4754\n\t\t\t\t}                                                                                                                  // 4755\n\t\t\t\telse {                                                                                                             // 4756\n\t\t\t\t\tsorting[sortIdx][1] = asSorting[ nextSortIdx ];                                                                   // 4757\n\t\t\t\t\tsorting[sortIdx]._idx = nextSortIdx;                                                                              // 4758\n\t\t\t\t}                                                                                                                  // 4759\n\t\t\t}                                                                                                                   // 4760\n\t\t\telse {                                                                                                              // 4761\n\t\t\t\t// No sort on this column yet                                                                                      // 4762\n\t\t\t\tsorting.push( [ colIdx, asSorting[0], 0 ] );                                                                       // 4763\n\t\t\t\tsorting[sorting.length-1]._idx = 0;                                                                                // 4764\n\t\t\t}                                                                                                                   // 4765\n\t\t}                                                                                                                    // 4766\n\t\telse if ( sorting.length && sorting[0][0] == colIdx ) {                                                              // 4767\n\t\t\t// Single column - already sorting on this column, modify the sort                                                  // 4768\n\t\t\tnextSortIdx = next( sorting[0] );                                                                                   // 4769\n\t                                                                                                                      // 4770\n\t\t\tsorting.length = 1;                                                                                                 // 4771\n\t\t\tsorting[0][1] = asSorting[ nextSortIdx ];                                                                           // 4772\n\t\t\tsorting[0]._idx = nextSortIdx;                                                                                      // 4773\n\t\t}                                                                                                                    // 4774\n\t\telse {                                                                                                               // 4775\n\t\t\t// Single column - sort only on this column                                                                         // 4776\n\t\t\tsorting.length = 0;                                                                                                 // 4777\n\t\t\tsorting.push( [ colIdx, asSorting[0] ] );                                                                           // 4778\n\t\t\tsorting[0]._idx = 0;                                                                                                // 4779\n\t\t}                                                                                                                    // 4780\n\t                                                                                                                      // 4781\n\t\t// Run the sort by calling a full redraw                                                                             // 4782\n\t\t_fnReDraw( settings );                                                                                               // 4783\n\t                                                                                                                      // 4784\n\t\t// callback used for async user interaction                                                                          // 4785\n\t\tif ( typeof callback == 'function' ) {                                                                               // 4786\n\t\t\tcallback( settings );                                                                                               // 4787\n\t\t}                                                                                                                    // 4788\n\t}                                                                                                                     // 4789\n\t                                                                                                                      // 4790\n\t                                                                                                                      // 4791\n\t/**                                                                                                                   // 4792\n\t * Attach a sort handler (click) to a node                                                                            // 4793\n\t *  @param {object} settings dataTables settings object                                                               // 4794\n\t *  @param {node} attachTo node to attach the handler to                                                              // 4795\n\t *  @param {int} colIdx column sorting index                                                                          // 4796\n\t *  @param {function} [callback] callback function                                                                    // 4797\n\t *  @memberof DataTable#oApi                                                                                          // 4798\n\t */                                                                                                                   // 4799\n\tfunction _fnSortAttachListener ( settings, attachTo, colIdx, callback )                                               // 4800\n\t{                                                                                                                     // 4801\n\t\tvar col = settings.aoColumns[ colIdx ];                                                                              // 4802\n\t                                                                                                                      // 4803\n\t\t_fnBindAction( attachTo, {}, function (e) {                                                                          // 4804\n\t\t\t/* If the column is not sortable - don't to anything */                                                             // 4805\n\t\t\tif ( col.bSortable === false ) {                                                                                    // 4806\n\t\t\t\treturn;                                                                                                            // 4807\n\t\t\t}                                                                                                                   // 4808\n\t                                                                                                                      // 4809\n\t\t\t// If processing is enabled use a timeout to allow the processing                                                   // 4810\n\t\t\t// display to be shown - otherwise to it synchronously                                                              // 4811\n\t\t\tif ( settings.oFeatures.bProcessing ) {                                                                             // 4812\n\t\t\t\t_fnProcessingDisplay( settings, true );                                                                            // 4813\n\t                                                                                                                      // 4814\n\t\t\t\tsetTimeout( function() {                                                                                           // 4815\n\t\t\t\t\t_fnSortListener( settings, colIdx, e.shiftKey, callback );                                                        // 4816\n\t                                                                                                                      // 4817\n\t\t\t\t\t// In server-side processing, the draw callback will remove the                                                   // 4818\n\t\t\t\t\t// processing display                                                                                             // 4819\n\t\t\t\t\tif ( _fnDataSource( settings ) !== 'ssp' ) {                                                                      // 4820\n\t\t\t\t\t\t_fnProcessingDisplay( settings, false );                                                                         // 4821\n\t\t\t\t\t}                                                                                                                 // 4822\n\t\t\t\t}, 0 );                                                                                                            // 4823\n\t\t\t}                                                                                                                   // 4824\n\t\t\telse {                                                                                                              // 4825\n\t\t\t\t_fnSortListener( settings, colIdx, e.shiftKey, callback );                                                         // 4826\n\t\t\t}                                                                                                                   // 4827\n\t\t} );                                                                                                                 // 4828\n\t}                                                                                                                     // 4829\n\t                                                                                                                      // 4830\n\t                                                                                                                      // 4831\n\t/**                                                                                                                   // 4832\n\t * Set the sorting classes on table's body, Note: it is safe to call this function                                    // 4833\n\t * when bSort and bSortClasses are false                                                                              // 4834\n\t *  @param {object} oSettings dataTables settings object                                                              // 4835\n\t *  @memberof DataTable#oApi                                                                                          // 4836\n\t */                                                                                                                   // 4837\n\tfunction _fnSortingClasses( settings )                                                                                // 4838\n\t{                                                                                                                     // 4839\n\t\tvar oldSort = settings.aLastSort;                                                                                    // 4840\n\t\tvar sortClass = settings.oClasses.sSortColumn;                                                                       // 4841\n\t\tvar sort = _fnSortFlatten( settings );                                                                               // 4842\n\t\tvar features = settings.oFeatures;                                                                                   // 4843\n\t\tvar i, ien, colIdx;                                                                                                  // 4844\n\t                                                                                                                      // 4845\n\t\tif ( features.bSort && features.bSortClasses ) {                                                                     // 4846\n\t\t\t// Remove old sorting classes                                                                                       // 4847\n\t\t\tfor ( i=0, ien=oldSort.length ; i<ien ; i++ ) {                                                                     // 4848\n\t\t\t\tcolIdx = oldSort[i].src;                                                                                           // 4849\n\t                                                                                                                      // 4850\n\t\t\t\t// Remove column sorting                                                                                           // 4851\n\t\t\t\t$( _pluck( settings.aoData, 'anCells', colIdx ) )                                                                  // 4852\n\t\t\t\t\t.removeClass( sortClass + (i<2 ? i+1 : 3) );                                                                      // 4853\n\t\t\t}                                                                                                                   // 4854\n\t                                                                                                                      // 4855\n\t\t\t// Add new column sorting                                                                                           // 4856\n\t\t\tfor ( i=0, ien=sort.length ; i<ien ; i++ ) {                                                                        // 4857\n\t\t\t\tcolIdx = sort[i].src;                                                                                              // 4858\n\t                                                                                                                      // 4859\n\t\t\t\t$( _pluck( settings.aoData, 'anCells', colIdx ) )                                                                  // 4860\n\t\t\t\t\t.addClass( sortClass + (i<2 ? i+1 : 3) );                                                                         // 4861\n\t\t\t}                                                                                                                   // 4862\n\t\t}                                                                                                                    // 4863\n\t                                                                                                                      // 4864\n\t\tsettings.aLastSort = sort;                                                                                           // 4865\n\t}                                                                                                                     // 4866\n\t                                                                                                                      // 4867\n\t                                                                                                                      // 4868\n\t// Get the data to sort a column, be it from cache, fresh (populating the                                             // 4869\n\t// cache), or from a sort formatter                                                                                   // 4870\n\tfunction _fnSortData( settings, idx )                                                                                 // 4871\n\t{                                                                                                                     // 4872\n\t\t// Custom sorting function - provided by the sort data type                                                          // 4873\n\t\tvar column = settings.aoColumns[ idx ];                                                                              // 4874\n\t\tvar customSort = DataTable.ext.order[ column.sSortDataType ];                                                        // 4875\n\t\tvar customData;                                                                                                      // 4876\n\t                                                                                                                      // 4877\n\t\tif ( customSort ) {                                                                                                  // 4878\n\t\t\tcustomData = customSort.call( settings.oInstance, settings, idx,                                                    // 4879\n\t\t\t\t_fnColumnIndexToVisible( settings, idx )                                                                           // 4880\n\t\t\t);                                                                                                                  // 4881\n\t\t}                                                                                                                    // 4882\n\t                                                                                                                      // 4883\n\t\t// Use / populate cache                                                                                              // 4884\n\t\tvar row, cellData;                                                                                                   // 4885\n\t\tvar formatter = DataTable.ext.type.order[ column.sType+\"-pre\" ];                                                     // 4886\n\t                                                                                                                      // 4887\n\t\tfor ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {                                                          // 4888\n\t\t\trow = settings.aoData[i];                                                                                           // 4889\n\t                                                                                                                      // 4890\n\t\t\tif ( ! row._aSortData ) {                                                                                           // 4891\n\t\t\t\trow._aSortData = [];                                                                                               // 4892\n\t\t\t}                                                                                                                   // 4893\n\t                                                                                                                      // 4894\n\t\t\tif ( ! row._aSortData[idx] || customSort ) {                                                                        // 4895\n\t\t\t\tcellData = customSort ?                                                                                            // 4896\n\t\t\t\t\tcustomData[i] : // If there was a custom sort function, use data from there                                       // 4897\n\t\t\t\t\t_fnGetCellData( settings, i, idx, 'sort' );                                                                       // 4898\n\t                                                                                                                      // 4899\n\t\t\t\trow._aSortData[ idx ] = formatter ?                                                                                // 4900\n\t\t\t\t\tformatter( cellData ) :                                                                                           // 4901\n\t\t\t\t\tcellData;                                                                                                         // 4902\n\t\t\t}                                                                                                                   // 4903\n\t\t}                                                                                                                    // 4904\n\t}                                                                                                                     // 4905\n\t                                                                                                                      // 4906\n\t                                                                                                                      // 4907\n\t                                                                                                                      // 4908\n\t/**                                                                                                                   // 4909\n\t * Save the state of a table                                                                                          // 4910\n\t *  @param {object} oSettings dataTables settings object                                                              // 4911\n\t *  @memberof DataTable#oApi                                                                                          // 4912\n\t */                                                                                                                   // 4913\n\tfunction _fnSaveState ( settings )                                                                                    // 4914\n\t{                                                                                                                     // 4915\n\t\tif ( !settings.oFeatures.bStateSave || settings.bDestroying )                                                        // 4916\n\t\t{                                                                                                                    // 4917\n\t\t\treturn;                                                                                                             // 4918\n\t\t}                                                                                                                    // 4919\n\t                                                                                                                      // 4920\n\t\t/* Store the interesting variables */                                                                                // 4921\n\t\tvar state = {                                                                                                        // 4922\n\t\t\ttime:    +new Date(),                                                                                               // 4923\n\t\t\tstart:   settings._iDisplayStart,                                                                                   // 4924\n\t\t\tlength:  settings._iDisplayLength,                                                                                  // 4925\n\t\t\torder:   $.extend( true, [], settings.aaSorting ),                                                                  // 4926\n\t\t\tsearch:  _fnSearchToCamel( settings.oPreviousSearch ),                                                              // 4927\n\t\t\tcolumns: $.map( settings.aoColumns, function ( col, i ) {                                                           // 4928\n\t\t\t\treturn {                                                                                                           // 4929\n\t\t\t\t\tvisible: col.bVisible,                                                                                            // 4930\n\t\t\t\t\tsearch: _fnSearchToCamel( settings.aoPreSearchCols[i] )                                                           // 4931\n\t\t\t\t};                                                                                                                 // 4932\n\t\t\t} )                                                                                                                 // 4933\n\t\t};                                                                                                                   // 4934\n\t                                                                                                                      // 4935\n\t\t_fnCallbackFire( settings, \"aoStateSaveParams\", 'stateSaveParams', [settings, state] );                              // 4936\n\t                                                                                                                      // 4937\n\t\tsettings.oSavedState = state;                                                                                        // 4938\n\t\tsettings.fnStateSaveCallback.call( settings.oInstance, settings, state );                                            // 4939\n\t}                                                                                                                     // 4940\n\t                                                                                                                      // 4941\n\t                                                                                                                      // 4942\n\t/**                                                                                                                   // 4943\n\t * Attempt to load a saved table state                                                                                // 4944\n\t *  @param {object} oSettings dataTables settings object                                                              // 4945\n\t *  @param {object} oInit DataTables init object so we can override settings                                          // 4946\n\t *  @memberof DataTable#oApi                                                                                          // 4947\n\t */                                                                                                                   // 4948\n\tfunction _fnLoadState ( settings, oInit )                                                                             // 4949\n\t{                                                                                                                     // 4950\n\t\tvar i, ien;                                                                                                          // 4951\n\t\tvar columns = settings.aoColumns;                                                                                    // 4952\n\t                                                                                                                      // 4953\n\t\tif ( ! settings.oFeatures.bStateSave ) {                                                                             // 4954\n\t\t\treturn;                                                                                                             // 4955\n\t\t}                                                                                                                    // 4956\n\t                                                                                                                      // 4957\n\t\tvar state = settings.fnStateLoadCallback.call( settings.oInstance, settings );                                       // 4958\n\t\tif ( ! state || ! state.time ) {                                                                                     // 4959\n\t\t\treturn;                                                                                                             // 4960\n\t\t}                                                                                                                    // 4961\n\t                                                                                                                      // 4962\n\t\t/* Allow custom and plug-in manipulation functions to alter the saved data set and                                   // 4963\n\t\t * cancelling of loading by returning false                                                                          // 4964\n\t\t */                                                                                                                  // 4965\n\t\tvar abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, state] );            // 4966\n\t\tif ( $.inArray( false, abStateLoad ) !== -1 ) {                                                                      // 4967\n\t\t\treturn;                                                                                                             // 4968\n\t\t}                                                                                                                    // 4969\n\t                                                                                                                      // 4970\n\t\t/* Reject old data */                                                                                                // 4971\n\t\tvar duration = settings.iStateDuration;                                                                              // 4972\n\t\tif ( duration > 0 && state.time < +new Date() - (duration*1000) ) {                                                  // 4973\n\t\t\treturn;                                                                                                             // 4974\n\t\t}                                                                                                                    // 4975\n\t                                                                                                                      // 4976\n\t\t// Number of columns have changed - all bets are off, no restore of settings                                         // 4977\n\t\tif ( columns.length !== state.columns.length ) {                                                                     // 4978\n\t\t\treturn;                                                                                                             // 4979\n\t\t}                                                                                                                    // 4980\n\t                                                                                                                      // 4981\n\t\t// Store the saved state so it might be accessed at any time                                                         // 4982\n\t\tsettings.oLoadedState = $.extend( true, {}, state );                                                                 // 4983\n\t                                                                                                                      // 4984\n\t\t// Restore key features - todo - for 1.11 this needs to be done by                                                   // 4985\n\t\t// subscribed events                                                                                                 // 4986\n\t\tif ( state.start !== undefined ) {                                                                                   // 4987\n\t\t\tsettings._iDisplayStart    = state.start;                                                                           // 4988\n\t\t\tsettings.iInitDisplayStart = state.start;                                                                           // 4989\n\t\t}                                                                                                                    // 4990\n\t\tif ( state.length !== undefined ) {                                                                                  // 4991\n\t\t\tsettings._iDisplayLength   = state.length;                                                                          // 4992\n\t\t}                                                                                                                    // 4993\n\t                                                                                                                      // 4994\n\t\t// Order                                                                                                             // 4995\n\t\tif ( state.order !== undefined ) {                                                                                   // 4996\n\t\t\tsettings.aaSorting = [];                                                                                            // 4997\n\t\t\t$.each( state.order, function ( i, col ) {                                                                          // 4998\n\t\t\t\tsettings.aaSorting.push( col[0] >= columns.length ?                                                                // 4999\n\t\t\t\t\t[ 0, col[1] ] :                                                                                                   // 5000\n\t\t\t\t\tcol                                                                                                               // 5001\n\t\t\t\t);                                                                                                                 // 5002\n\t\t\t} );                                                                                                                // 5003\n\t\t}                                                                                                                    // 5004\n\t                                                                                                                      // 5005\n\t\t// Search                                                                                                            // 5006\n\t\tif ( state.search !== undefined ) {                                                                                  // 5007\n\t\t\t$.extend( settings.oPreviousSearch, _fnSearchToHung( state.search ) );                                              // 5008\n\t\t}                                                                                                                    // 5009\n\t                                                                                                                      // 5010\n\t\t// Columns                                                                                                           // 5011\n\t\tfor ( i=0, ien=state.columns.length ; i<ien ; i++ ) {                                                                // 5012\n\t\t\tvar col = state.columns[i];                                                                                         // 5013\n\t                                                                                                                      // 5014\n\t\t\t// Visibility                                                                                                       // 5015\n\t\t\tif ( col.visible !== undefined ) {                                                                                  // 5016\n\t\t\t\tcolumns[i].bVisible = col.visible;                                                                                 // 5017\n\t\t\t}                                                                                                                   // 5018\n\t                                                                                                                      // 5019\n\t\t\t// Search                                                                                                           // 5020\n\t\t\tif ( col.search !== undefined ) {                                                                                   // 5021\n\t\t\t\t$.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );                                            // 5022\n\t\t\t}                                                                                                                   // 5023\n\t\t}                                                                                                                    // 5024\n\t                                                                                                                      // 5025\n\t\t_fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, state] );                                      // 5026\n\t}                                                                                                                     // 5027\n\t                                                                                                                      // 5028\n\t                                                                                                                      // 5029\n\t/**                                                                                                                   // 5030\n\t * Return the settings object for a particular table                                                                  // 5031\n\t *  @param {node} table table we are using as a dataTable                                                             // 5032\n\t *  @returns {object} Settings object - or null if not found                                                          // 5033\n\t *  @memberof DataTable#oApi                                                                                          // 5034\n\t */                                                                                                                   // 5035\n\tfunction _fnSettingsFromNode ( table )                                                                                // 5036\n\t{                                                                                                                     // 5037\n\t\tvar settings = DataTable.settings;                                                                                   // 5038\n\t\tvar idx = $.inArray( table, _pluck( settings, 'nTable' ) );                                                          // 5039\n\t                                                                                                                      // 5040\n\t\treturn idx !== -1 ?                                                                                                  // 5041\n\t\t\tsettings[ idx ] :                                                                                                   // 5042\n\t\t\tnull;                                                                                                               // 5043\n\t}                                                                                                                     // 5044\n\t                                                                                                                      // 5045\n\t                                                                                                                      // 5046\n\t/**                                                                                                                   // 5047\n\t * Log an error message                                                                                               // 5048\n\t *  @param {object} settings dataTables settings object                                                               // 5049\n\t *  @param {int} level log error messages, or display them to the user                                                // 5050\n\t *  @param {string} msg error message                                                                                 // 5051\n\t *  @param {int} tn Technical note id to get more information about the error.                                        // 5052\n\t *  @memberof DataTable#oApi                                                                                          // 5053\n\t */                                                                                                                   // 5054\n\tfunction _fnLog( settings, level, msg, tn )                                                                           // 5055\n\t{                                                                                                                     // 5056\n\t\tmsg = 'DataTables warning: '+                                                                                        // 5057\n\t\t\t(settings!==null ? 'table id='+settings.sTableId+' - ' : '')+msg;                                                   // 5058\n\t                                                                                                                      // 5059\n\t\tif ( tn ) {                                                                                                          // 5060\n\t\t\tmsg += '. For more information about this error, please see '+                                                      // 5061\n\t\t\t'http://datatables.net/tn/'+tn;                                                                                     // 5062\n\t\t}                                                                                                                    // 5063\n\t                                                                                                                      // 5064\n\t\tif ( ! level  ) {                                                                                                    // 5065\n\t\t\t// Backwards compatibility pre 1.10                                                                                 // 5066\n\t\t\tvar ext = DataTable.ext;                                                                                            // 5067\n\t\t\tvar type = ext.sErrMode || ext.errMode;                                                                             // 5068\n\t                                                                                                                      // 5069\n\t\t\t_fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );                                                  // 5070\n\t                                                                                                                      // 5071\n\t\t\tif ( type == 'alert' ) {                                                                                            // 5072\n\t\t\t\talert( msg );                                                                                                      // 5073\n\t\t\t}                                                                                                                   // 5074\n\t\t\telse if ( type == 'throw' ) {                                                                                       // 5075\n\t\t\t\tthrow new Error(msg);                                                                                              // 5076\n\t\t\t}                                                                                                                   // 5077\n\t\t\telse if ( typeof type == 'function' ) {                                                                             // 5078\n\t\t\t\ttype( settings, tn, msg );                                                                                         // 5079\n\t\t\t}                                                                                                                   // 5080\n\t\t}                                                                                                                    // 5081\n\t\telse if ( window.console && console.log ) {                                                                          // 5082\n\t\t\tconsole.log( msg );                                                                                                 // 5083\n\t\t}                                                                                                                    // 5084\n\t}                                                                                                                     // 5085\n\t                                                                                                                      // 5086\n\t                                                                                                                      // 5087\n\t/**                                                                                                                   // 5088\n\t * See if a property is defined on one object, if so assign it to the other object                                    // 5089\n\t *  @param {object} ret target object                                                                                 // 5090\n\t *  @param {object} src source object                                                                                 // 5091\n\t *  @param {string} name property                                                                                     // 5092\n\t *  @param {string} [mappedName] name to map too - optional, name used if not given                                   // 5093\n\t *  @memberof DataTable#oApi                                                                                          // 5094\n\t */                                                                                                                   // 5095\n\tfunction _fnMap( ret, src, name, mappedName )                                                                         // 5096\n\t{                                                                                                                     // 5097\n\t\tif ( $.isArray( name ) ) {                                                                                           // 5098\n\t\t\t$.each( name, function (i, val) {                                                                                   // 5099\n\t\t\t\tif ( $.isArray( val ) ) {                                                                                          // 5100\n\t\t\t\t\t_fnMap( ret, src, val[0], val[1] );                                                                               // 5101\n\t\t\t\t}                                                                                                                  // 5102\n\t\t\t\telse {                                                                                                             // 5103\n\t\t\t\t\t_fnMap( ret, src, val );                                                                                          // 5104\n\t\t\t\t}                                                                                                                  // 5105\n\t\t\t} );                                                                                                                // 5106\n\t                                                                                                                      // 5107\n\t\t\treturn;                                                                                                             // 5108\n\t\t}                                                                                                                    // 5109\n\t                                                                                                                      // 5110\n\t\tif ( mappedName === undefined ) {                                                                                    // 5111\n\t\t\tmappedName = name;                                                                                                  // 5112\n\t\t}                                                                                                                    // 5113\n\t                                                                                                                      // 5114\n\t\tif ( src[name] !== undefined ) {                                                                                     // 5115\n\t\t\tret[mappedName] = src[name];                                                                                        // 5116\n\t\t}                                                                                                                    // 5117\n\t}                                                                                                                     // 5118\n\t                                                                                                                      // 5119\n\t                                                                                                                      // 5120\n\t/**                                                                                                                   // 5121\n\t * Extend objects - very similar to jQuery.extend, but deep copy objects, and                                         // 5122\n\t * shallow copy arrays. The reason we need to do this, is that we don't want to                                       // 5123\n\t * deep copy array init values (such as aaSorting) since the dev wouldn't be                                          // 5124\n\t * able to override them, but we do want to deep copy arrays.                                                         // 5125\n\t *  @param {object} out Object to extend                                                                              // 5126\n\t *  @param {object} extender Object from which the properties will be applied to                                      // 5127\n\t *      out                                                                                                           // 5128\n\t *  @param {boolean} breakRefs If true, then arrays will be sliced to take an                                         // 5129\n\t *      independent copy with the exception of the `data` or `aaData` parameters                                      // 5130\n\t *      if they are present. This is so you can pass in a collection to                                               // 5131\n\t *      DataTables and have that used as your data source without breaking the                                        // 5132\n\t *      references                                                                                                    // 5133\n\t *  @returns {object} out Reference, just for convenience - out === the return.                                       // 5134\n\t *  @memberof DataTable#oApi                                                                                          // 5135\n\t *  @todo This doesn't take account of arrays inside the deep copied objects.                                         // 5136\n\t */                                                                                                                   // 5137\n\tfunction _fnExtend( out, extender, breakRefs )                                                                        // 5138\n\t{                                                                                                                     // 5139\n\t\tvar val;                                                                                                             // 5140\n\t                                                                                                                      // 5141\n\t\tfor ( var prop in extender ) {                                                                                       // 5142\n\t\t\tif ( extender.hasOwnProperty(prop) ) {                                                                              // 5143\n\t\t\t\tval = extender[prop];                                                                                              // 5144\n\t                                                                                                                      // 5145\n\t\t\t\tif ( $.isPlainObject( val ) ) {                                                                                    // 5146\n\t\t\t\t\tif ( ! $.isPlainObject( out[prop] ) ) {                                                                           // 5147\n\t\t\t\t\t\tout[prop] = {};                                                                                                  // 5148\n\t\t\t\t\t}                                                                                                                 // 5149\n\t\t\t\t\t$.extend( true, out[prop], val );                                                                                 // 5150\n\t\t\t\t}                                                                                                                  // 5151\n\t\t\t\telse if ( breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val) ) {                                  // 5152\n\t\t\t\t\tout[prop] = val.slice();                                                                                          // 5153\n\t\t\t\t}                                                                                                                  // 5154\n\t\t\t\telse {                                                                                                             // 5155\n\t\t\t\t\tout[prop] = val;                                                                                                  // 5156\n\t\t\t\t}                                                                                                                  // 5157\n\t\t\t}                                                                                                                   // 5158\n\t\t}                                                                                                                    // 5159\n\t                                                                                                                      // 5160\n\t\treturn out;                                                                                                          // 5161\n\t}                                                                                                                     // 5162\n\t                                                                                                                      // 5163\n\t                                                                                                                      // 5164\n\t/**                                                                                                                   // 5165\n\t * Bind an event handers to allow a click or return key to activate the callback.                                     // 5166\n\t * This is good for accessibility since a return on the keyboard will have the                                        // 5167\n\t * same effect as a click, if the element has focus.                                                                  // 5168\n\t *  @param {element} n Element to bind the action to                                                                  // 5169\n\t *  @param {object} oData Data object to pass to the triggered function                                               // 5170\n\t *  @param {function} fn Callback function for when the event is triggered                                            // 5171\n\t *  @memberof DataTable#oApi                                                                                          // 5172\n\t */                                                                                                                   // 5173\n\tfunction _fnBindAction( n, oData, fn )                                                                                // 5174\n\t{                                                                                                                     // 5175\n\t\t$(n)                                                                                                                 // 5176\n\t\t\t.bind( 'click.DT', oData, function (e) {                                                                            // 5177\n\t\t\t\t\tn.blur(); // Remove focus outline for mouse users                                                                 // 5178\n\t\t\t\t\tfn(e);                                                                                                            // 5179\n\t\t\t\t} )                                                                                                                // 5180\n\t\t\t.bind( 'keypress.DT', oData, function (e){                                                                          // 5181\n\t\t\t\t\tif ( e.which === 13 ) {                                                                                           // 5182\n\t\t\t\t\t\te.preventDefault();                                                                                              // 5183\n\t\t\t\t\t\tfn(e);                                                                                                           // 5184\n\t\t\t\t\t}                                                                                                                 // 5185\n\t\t\t\t} )                                                                                                                // 5186\n\t\t\t.bind( 'selectstart.DT', function () {                                                                              // 5187\n\t\t\t\t\t/* Take the brutal approach to cancelling text selection */                                                       // 5188\n\t\t\t\t\treturn false;                                                                                                     // 5189\n\t\t\t\t} );                                                                                                               // 5190\n\t}                                                                                                                     // 5191\n\t                                                                                                                      // 5192\n\t                                                                                                                      // 5193\n\t/**                                                                                                                   // 5194\n\t * Register a callback function. Easily allows a callback function to be added to                                     // 5195\n\t * an array store of callback functions that can then all be called together.                                         // 5196\n\t *  @param {object} oSettings dataTables settings object                                                              // 5197\n\t *  @param {string} sStore Name of the array storage for the callbacks in oSettings                                   // 5198\n\t *  @param {function} fn Function to be called back                                                                   // 5199\n\t *  @param {string} sName Identifying name for the callback (i.e. a label)                                            // 5200\n\t *  @memberof DataTable#oApi                                                                                          // 5201\n\t */                                                                                                                   // 5202\n\tfunction _fnCallbackReg( oSettings, sStore, fn, sName )                                                               // 5203\n\t{                                                                                                                     // 5204\n\t\tif ( fn )                                                                                                            // 5205\n\t\t{                                                                                                                    // 5206\n\t\t\toSettings[sStore].push( {                                                                                           // 5207\n\t\t\t\t\"fn\": fn,                                                                                                          // 5208\n\t\t\t\t\"sName\": sName                                                                                                     // 5209\n\t\t\t} );                                                                                                                // 5210\n\t\t}                                                                                                                    // 5211\n\t}                                                                                                                     // 5212\n\t                                                                                                                      // 5213\n\t                                                                                                                      // 5214\n\t/**                                                                                                                   // 5215\n\t * Fire callback functions and trigger events. Note that the loop over the                                            // 5216\n\t * callback array store is done backwards! Further note that you do not want to                                       // 5217\n\t * fire off triggers in time sensitive applications (for example cell creation)                                       // 5218\n\t * as its slow.                                                                                                       // 5219\n\t *  @param {object} settings dataTables settings object                                                               // 5220\n\t *  @param {string} callbackArr Name of the array storage for the callbacks in                                        // 5221\n\t *      oSettings                                                                                                     // 5222\n\t *  @param {string} eventName Name of the jQuery custom event to trigger. If                                          // 5223\n\t *      null no trigger is fired                                                                                      // 5224\n\t *  @param {array} args Array of arguments to pass to the callback function /                                         // 5225\n\t *      trigger                                                                                                       // 5226\n\t *  @memberof DataTable#oApi                                                                                          // 5227\n\t */                                                                                                                   // 5228\n\tfunction _fnCallbackFire( settings, callbackArr, eventName, args )                                                    // 5229\n\t{                                                                                                                     // 5230\n\t\tvar ret = [];                                                                                                        // 5231\n\t                                                                                                                      // 5232\n\t\tif ( callbackArr ) {                                                                                                 // 5233\n\t\t\tret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {                                           // 5234\n\t\t\t\treturn val.fn.apply( settings.oInstance, args );                                                                   // 5235\n\t\t\t} );                                                                                                                // 5236\n\t\t}                                                                                                                    // 5237\n\t                                                                                                                      // 5238\n\t\tif ( eventName !== null ) {                                                                                          // 5239\n\t\t\tvar e = $.Event( eventName+'.dt' );                                                                                 // 5240\n\t                                                                                                                      // 5241\n\t\t\t$(settings.nTable).trigger( e, args );                                                                              // 5242\n\t                                                                                                                      // 5243\n\t\t\tret.push( e.result );                                                                                               // 5244\n\t\t}                                                                                                                    // 5245\n\t                                                                                                                      // 5246\n\t\treturn ret;                                                                                                          // 5247\n\t}                                                                                                                     // 5248\n\t                                                                                                                      // 5249\n\t                                                                                                                      // 5250\n\tfunction _fnLengthOverflow ( settings )                                                                               // 5251\n\t{                                                                                                                     // 5252\n\t\tvar                                                                                                                  // 5253\n\t\t\tstart = settings._iDisplayStart,                                                                                    // 5254\n\t\t\tend = settings.fnDisplayEnd(),                                                                                      // 5255\n\t\t\tlen = settings._iDisplayLength;                                                                                     // 5256\n\t                                                                                                                      // 5257\n\t\t/* If we have space to show extra rows (backing up from the end point - then do so */                                // 5258\n\t\tif ( start >= end )                                                                                                  // 5259\n\t\t{                                                                                                                    // 5260\n\t\t\tstart = end - len;                                                                                                  // 5261\n\t\t}                                                                                                                    // 5262\n\t                                                                                                                      // 5263\n\t\t// Keep the start record on the current page                                                                         // 5264\n\t\tstart -= (start % len);                                                                                              // 5265\n\t                                                                                                                      // 5266\n\t\tif ( len === -1 || start < 0 )                                                                                       // 5267\n\t\t{                                                                                                                    // 5268\n\t\t\tstart = 0;                                                                                                          // 5269\n\t\t}                                                                                                                    // 5270\n\t                                                                                                                      // 5271\n\t\tsettings._iDisplayStart = start;                                                                                     // 5272\n\t}                                                                                                                     // 5273\n\t                                                                                                                      // 5274\n\t                                                                                                                      // 5275\n\tfunction _fnRenderer( settings, type )                                                                                // 5276\n\t{                                                                                                                     // 5277\n\t\tvar renderer = settings.renderer;                                                                                    // 5278\n\t\tvar host = DataTable.ext.renderer[type];                                                                             // 5279\n\t                                                                                                                      // 5280\n\t\tif ( $.isPlainObject( renderer ) && renderer[type] ) {                                                               // 5281\n\t\t\t// Specific renderer for this type. If available use it, otherwise use                                              // 5282\n\t\t\t// the default.                                                                                                     // 5283\n\t\t\treturn host[renderer[type]] || host._;                                                                              // 5284\n\t\t}                                                                                                                    // 5285\n\t\telse if ( typeof renderer === 'string' ) {                                                                           // 5286\n\t\t\t// Common renderer - if there is one available for this type use it,                                                // 5287\n\t\t\t// otherwise use the default                                                                                        // 5288\n\t\t\treturn host[renderer] || host._;                                                                                    // 5289\n\t\t}                                                                                                                    // 5290\n\t                                                                                                                      // 5291\n\t\t// Use the default                                                                                                   // 5292\n\t\treturn host._;                                                                                                       // 5293\n\t}                                                                                                                     // 5294\n\t                                                                                                                      // 5295\n\t                                                                                                                      // 5296\n\t/**                                                                                                                   // 5297\n\t * Detect the data source being used for the table. Used to simplify the code                                         // 5298\n\t * a little (ajax) and to make it compress a little smaller.                                                          // 5299\n\t *                                                                                                                    // 5300\n\t *  @param {object} settings dataTables settings object                                                               // 5301\n\t *  @returns {string} Data source                                                                                     // 5302\n\t *  @memberof DataTable#oApi                                                                                          // 5303\n\t */                                                                                                                   // 5304\n\tfunction _fnDataSource ( settings )                                                                                   // 5305\n\t{                                                                                                                     // 5306\n\t\tif ( settings.oFeatures.bServerSide ) {                                                                              // 5307\n\t\t\treturn 'ssp';                                                                                                       // 5308\n\t\t}                                                                                                                    // 5309\n\t\telse if ( settings.ajax || settings.sAjaxSource ) {                                                                  // 5310\n\t\t\treturn 'ajax';                                                                                                      // 5311\n\t\t}                                                                                                                    // 5312\n\t\treturn 'dom';                                                                                                        // 5313\n\t}                                                                                                                     // 5314\n\t                                                                                                                      // 5315\n                                                                                                                       // 5316\n\tDataTable = function( options )                                                                                       // 5317\n\t{                                                                                                                     // 5318\n\t\t/**                                                                                                                  // 5319\n\t\t * Perform a jQuery selector action on the table's TR elements (from the tbody) and                                  // 5320\n\t\t * return the resulting jQuery object.                                                                               // 5321\n\t\t *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on                               // 5322\n\t\t *  @param {object} [oOpts] Optional parameters for modifying the rows to be included                                // 5323\n\t\t *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter                              // 5324\n\t\t *    criterion (\"applied\") or all TR elements (i.e. no filter).                                                     // 5325\n\t\t *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.                           // 5326\n\t\t *    Can be either 'current', whereby the current sorting of the table is used, or                                  // 5327\n\t\t *    'original' whereby the original order the data was read into the table is used.                                // 5328\n\t\t *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page                             // 5329\n\t\t *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be                                 // 5330\n\t\t *    'current' and filter is 'applied', regardless of what they might be given as.                                  // 5331\n\t\t *  @returns {object} jQuery object, filtered by the given selector.                                                 // 5332\n\t\t *  @dtopt API                                                                                                       // 5333\n\t\t *  @deprecated Since v1.10                                                                                          // 5334\n\t\t *                                                                                                                   // 5335\n\t\t *  @example                                                                                                         // 5336\n\t\t *    $(document).ready(function() {                                                                                 // 5337\n\t\t *      var oTable = $('#example').dataTable();                                                                      // 5338\n\t\t *                                                                                                                   // 5339\n\t\t *      // Highlight every second row                                                                                // 5340\n\t\t *      oTable.$('tr:odd').css('backgroundColor', 'blue');                                                           // 5341\n\t\t *    } );                                                                                                           // 5342\n\t\t *                                                                                                                   // 5343\n\t\t *  @example                                                                                                         // 5344\n\t\t *    $(document).ready(function() {                                                                                 // 5345\n\t\t *      var oTable = $('#example').dataTable();                                                                      // 5346\n\t\t *                                                                                                                   // 5347\n\t\t *      // Filter to rows with 'Webkit' in them, add a background colour and then                                    // 5348\n\t\t *      // remove the filter, thus highlighting the 'Webkit' rows only.                                              // 5349\n\t\t *      oTable.fnFilter('Webkit');                                                                                   // 5350\n\t\t *      oTable.$('tr', {\"search\": \"applied\"}).css('backgroundColor', 'blue');                                        // 5351\n\t\t *      oTable.fnFilter('');                                                                                         // 5352\n\t\t *    } );                                                                                                           // 5353\n\t\t */                                                                                                                  // 5354\n\t\tthis.$ = function ( sSelector, oOpts )                                                                               // 5355\n\t\t{                                                                                                                    // 5356\n\t\t\treturn this.api(true).$( sSelector, oOpts );                                                                        // 5357\n\t\t};                                                                                                                   // 5358\n\t\t                                                                                                                     // 5359\n\t\t                                                                                                                     // 5360\n\t\t/**                                                                                                                  // 5361\n\t\t * Almost identical to $ in operation, but in this case returns the data for the matched                             // 5362\n\t\t * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes                            // 5363\n\t\t * rather than any descendants, so the data can be obtained for the row/cell. If matching                            // 5364\n\t\t * rows are found, the data returned is the original data array/object that was used to                              // 5365\n\t\t * create the row (or a generated array if from a DOM source).                                                       // 5366\n\t\t *                                                                                                                   // 5367\n\t\t * This method is often useful in-combination with $ where both functions are given the                              // 5368\n\t\t * same parameters and the array indexes will match identically.                                                     // 5369\n\t\t *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on                               // 5370\n\t\t *  @param {object} [oOpts] Optional parameters for modifying the rows to be included                                // 5371\n\t\t *  @param {string} [oOpts.filter=none] Select elements that meet the current filter                                 // 5372\n\t\t *    criterion (\"applied\") or all elements (i.e. no filter).                                                        // 5373\n\t\t *  @param {string} [oOpts.order=current] Order of the data in the processed array.                                  // 5374\n\t\t *    Can be either 'current', whereby the current sorting of the table is used, or                                  // 5375\n\t\t *    'original' whereby the original order the data was read into the table is used.                                // 5376\n\t\t *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page                             // 5377\n\t\t *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be                                 // 5378\n\t\t *    'current' and filter is 'applied', regardless of what they might be given as.                                  // 5379\n\t\t *  @returns {array} Data for the matched elements. If any elements, as a result of the                              // 5380\n\t\t *    selector, were not TR, TD or TH elements in the DataTable, they will have a null                               // 5381\n\t\t *    entry in the array.                                                                                            // 5382\n\t\t *  @dtopt API                                                                                                       // 5383\n\t\t *  @deprecated Since v1.10                                                                                          // 5384\n\t\t *                                                                                                                   // 5385\n\t\t *  @example                                                                                                         // 5386\n\t\t *    $(document).ready(function() {                                                                                 // 5387\n\t\t *      var oTable = $('#example').dataTable();                                                                      // 5388\n\t\t *                                                                                                                   // 5389\n\t\t *      // Get the data from the first row in the table                                                              // 5390\n\t\t *      var data = oTable._('tr:first');                                                                             // 5391\n\t\t *                                                                                                                   // 5392\n\t\t *      // Do something useful with the data                                                                         // 5393\n\t\t *      alert( \"First cell is: \"+data[0] );                                                                          // 5394\n\t\t *    } );                                                                                                           // 5395\n\t\t *                                                                                                                   // 5396\n\t\t *  @example                                                                                                         // 5397\n\t\t *    $(document).ready(function() {                                                                                 // 5398\n\t\t *      var oTable = $('#example').dataTable();                                                                      // 5399\n\t\t *                                                                                                                   // 5400\n\t\t *      // Filter to 'Webkit' and get all data for                                                                   // 5401\n\t\t *      oTable.fnFilter('Webkit');                                                                                   // 5402\n\t\t *      var data = oTable._('tr', {\"search\": \"applied\"});                                                            // 5403\n\t\t *                                                                                                                   // 5404\n\t\t *      // Do something with the data                                                                                // 5405\n\t\t *      alert( data.length+\" rows matched the search\" );                                                             // 5406\n\t\t *    } );                                                                                                           // 5407\n\t\t */                                                                                                                  // 5408\n\t\tthis._ = function ( sSelector, oOpts )                                                                               // 5409\n\t\t{                                                                                                                    // 5410\n\t\t\treturn this.api(true).rows( sSelector, oOpts ).data();                                                              // 5411\n\t\t};                                                                                                                   // 5412\n\t\t                                                                                                                     // 5413\n\t\t                                                                                                                     // 5414\n\t\t/**                                                                                                                  // 5415\n\t\t * Create a DataTables Api instance, with the currently selected tables for                                          // 5416\n\t\t * the Api's context.                                                                                                // 5417\n\t\t * @param {boolean} [traditional=false] Set the API instance's context to be                                         // 5418\n\t\t *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was                                      // 5419\n\t\t *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),                                       // 5420\n\t\t *   or if all tables captured in the jQuery object should be used.                                                  // 5421\n\t\t * @return {DataTables.Api}                                                                                          // 5422\n\t\t */                                                                                                                  // 5423\n\t\tthis.api = function ( traditional )                                                                                  // 5424\n\t\t{                                                                                                                    // 5425\n\t\t\treturn traditional ?                                                                                                // 5426\n\t\t\t\tnew _Api(                                                                                                          // 5427\n\t\t\t\t\t_fnSettingsFromNode( this[ _ext.iApiIndex ] )                                                                     // 5428\n\t\t\t\t) :                                                                                                                // 5429\n\t\t\t\tnew _Api( this );                                                                                                  // 5430\n\t\t};                                                                                                                   // 5431\n\t\t                                                                                                                     // 5432\n\t\t                                                                                                                     // 5433\n\t\t/**                                                                                                                  // 5434\n\t\t * Add a single new row or multiple rows of data to the table. Please note                                           // 5435\n\t\t * that this is suitable for client-side processing only - if you are using                                          // 5436\n\t\t * server-side processing (i.e. \"bServerSide\": true), then to add data, you                                          // 5437\n\t\t * must add it to the data source, i.e. the server-side, through an Ajax call.                                       // 5438\n\t\t *  @param {array|object} data The data to be added to the table. This can be:                                       // 5439\n\t\t *    <ul>                                                                                                           // 5440\n\t\t *      <li>1D array of data - add a single row with the data provided</li>                                          // 5441\n\t\t *      <li>2D array of arrays - add multiple rows in a single call</li>                                             // 5442\n\t\t *      <li>object - data object when using <i>mData</i></li>                                                        // 5443\n\t\t *      <li>array of objects - multiple data objects when using <i>mData</i></li>                                    // 5444\n\t\t *    </ul>                                                                                                          // 5445\n\t\t *  @param {bool} [redraw=true] redraw the table or not                                                              // 5446\n\t\t *  @returns {array} An array of integers, representing the list of indexes in                                       // 5447\n\t\t *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to                                     // 5448\n\t\t *    the table.                                                                                                     // 5449\n\t\t *  @dtopt API                                                                                                       // 5450\n\t\t *  @deprecated Since v1.10                                                                                          // 5451\n\t\t *                                                                                                                   // 5452\n\t\t *  @example                                                                                                         // 5453\n\t\t *    // Global var for counter                                                                                      // 5454\n\t\t *    var giCount = 2;                                                                                               // 5455\n\t\t *                                                                                                                   // 5456\n\t\t *    $(document).ready(function() {                                                                                 // 5457\n\t\t *      $('#example').dataTable();                                                                                   // 5458\n\t\t *    } );                                                                                                           // 5459\n\t\t *                                                                                                                   // 5460\n\t\t *    function fnClickAddRow() {                                                                                     // 5461\n\t\t *      $('#example').dataTable().fnAddData( [                                                                       // 5462\n\t\t *        giCount+\".1\",                                                                                              // 5463\n\t\t *        giCount+\".2\",                                                                                              // 5464\n\t\t *        giCount+\".3\",                                                                                              // 5465\n\t\t *        giCount+\".4\" ]                                                                                             // 5466\n\t\t *      );                                                                                                           // 5467\n\t\t *                                                                                                                   // 5468\n\t\t *      giCount++;                                                                                                   // 5469\n\t\t *    }                                                                                                              // 5470\n\t\t */                                                                                                                  // 5471\n\t\tthis.fnAddData = function( data, redraw )                                                                            // 5472\n\t\t{                                                                                                                    // 5473\n\t\t\tvar api = this.api( true );                                                                                         // 5474\n\t\t                                                                                                                     // 5475\n\t\t\t/* Check if we want to add multiple rows or not */                                                                  // 5476\n\t\t\tvar rows = $.isArray(data) && ( $.isArray(data[0]) || $.isPlainObject(data[0]) ) ?                                  // 5477\n\t\t\t\tapi.rows.add( data ) :                                                                                             // 5478\n\t\t\t\tapi.row.add( data );                                                                                               // 5479\n\t\t                                                                                                                     // 5480\n\t\t\tif ( redraw === undefined || redraw ) {                                                                             // 5481\n\t\t\t\tapi.draw();                                                                                                        // 5482\n\t\t\t}                                                                                                                   // 5483\n\t\t                                                                                                                     // 5484\n\t\t\treturn rows.flatten().toArray();                                                                                    // 5485\n\t\t};                                                                                                                   // 5486\n\t\t                                                                                                                     // 5487\n\t\t                                                                                                                     // 5488\n\t\t/**                                                                                                                  // 5489\n\t\t * This function will make DataTables recalculate the column sizes, based on the data                                // 5490\n\t\t * contained in the table and the sizes applied to the columns (in the DOM, CSS or                                   // 5491\n\t\t * through the sWidth parameter). This can be useful when the width of the table's                                   // 5492\n\t\t * parent element changes (for example a window resize).                                                             // 5493\n\t\t *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to                              // 5494\n\t\t *  @dtopt API                                                                                                       // 5495\n\t\t *  @deprecated Since v1.10                                                                                          // 5496\n\t\t *                                                                                                                   // 5497\n\t\t *  @example                                                                                                         // 5498\n\t\t *    $(document).ready(function() {                                                                                 // 5499\n\t\t *      var oTable = $('#example').dataTable( {                                                                      // 5500\n\t\t *        \"sScrollY\": \"200px\",                                                                                       // 5501\n\t\t *        \"bPaginate\": false                                                                                         // 5502\n\t\t *      } );                                                                                                         // 5503\n\t\t *                                                                                                                   // 5504\n\t\t *      $(window).bind('resize', function () {                                                                       // 5505\n\t\t *        oTable.fnAdjustColumnSizing();                                                                             // 5506\n\t\t *      } );                                                                                                         // 5507\n\t\t *    } );                                                                                                           // 5508\n\t\t */                                                                                                                  // 5509\n\t\tthis.fnAdjustColumnSizing = function ( bRedraw )                                                                     // 5510\n\t\t{                                                                                                                    // 5511\n\t\t\tvar api = this.api( true ).columns.adjust();                                                                        // 5512\n\t\t\tvar settings = api.settings()[0];                                                                                   // 5513\n\t\t\tvar scroll = settings.oScroll;                                                                                      // 5514\n\t\t                                                                                                                     // 5515\n\t\t\tif ( bRedraw === undefined || bRedraw ) {                                                                           // 5516\n\t\t\t\tapi.draw( false );                                                                                                 // 5517\n\t\t\t}                                                                                                                   // 5518\n\t\t\telse if ( scroll.sX !== \"\" || scroll.sY !== \"\" ) {                                                                  // 5519\n\t\t\t\t/* If not redrawing, but scrolling, we want to apply the new column sizes anyway */                                // 5520\n\t\t\t\t_fnScrollDraw( settings );                                                                                         // 5521\n\t\t\t}                                                                                                                   // 5522\n\t\t};                                                                                                                   // 5523\n\t\t                                                                                                                     // 5524\n\t\t                                                                                                                     // 5525\n\t\t/**                                                                                                                  // 5526\n\t\t * Quickly and simply clear a table                                                                                  // 5527\n\t\t *  @param {bool} [bRedraw=true] redraw the table or not                                                             // 5528\n\t\t *  @dtopt API                                                                                                       // 5529\n\t\t *  @deprecated Since v1.10                                                                                          // 5530\n\t\t *                                                                                                                   // 5531\n\t\t *  @example                                                                                                         // 5532\n\t\t *    $(document).ready(function() {                                                                                 // 5533\n\t\t *      var oTable = $('#example').dataTable();                                                                      // 5534\n\t\t *                                                                                                                   // 5535\n\t\t *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)                             // 5536\n\t\t *      oTable.fnClearTable();                                                                                       // 5537\n\t\t *    } );                                                                                                           // 5538\n\t\t */                                                                                                                  // 5539\n\t\tthis.fnClearTable = function( bRedraw )                                                                              // 5540\n\t\t{                                                                                                                    // 5541\n\t\t\tvar api = this.api( true ).clear();                                                                                 // 5542\n\t\t                                                                                                                     // 5543\n\t\t\tif ( bRedraw === undefined || bRedraw ) {                                                                           // 5544\n\t\t\t\tapi.draw();                                                                                                        // 5545\n\t\t\t}                                                                                                                   // 5546\n\t\t};                                                                                                                   // 5547\n\t\t                                                                                                                     // 5548\n\t\t                                                                                                                     // 5549\n\t\t/**                                                                                                                  // 5550\n\t\t * The exact opposite of 'opening' a row, this function will close any rows which                                    // 5551\n\t\t * are currently 'open'.                                                                                             // 5552\n\t\t *  @param {node} nTr the table row to 'close'                                                                       // 5553\n\t\t *  @returns {int} 0 on success, or 1 if failed (can't find the row)                                                 // 5554\n\t\t *  @dtopt API                                                                                                       // 5555\n\t\t *  @deprecated Since v1.10                                                                                          // 5556\n\t\t *                                                                                                                   // 5557\n\t\t *  @example                                                                                                         // 5558\n\t\t *    $(document).ready(function() {                                                                                 // 5559\n\t\t *      var oTable;                                                                                                  // 5560\n\t\t *                                                                                                                   // 5561\n\t\t *      // 'open' an information row when a row is clicked on                                                        // 5562\n\t\t *      $('#example tbody tr').click( function () {                                                                  // 5563\n\t\t *        if ( oTable.fnIsOpen(this) ) {                                                                             // 5564\n\t\t *          oTable.fnClose( this );                                                                                  // 5565\n\t\t *        } else {                                                                                                   // 5566\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );                                               // 5567\n\t\t *        }                                                                                                          // 5568\n\t\t *      } );                                                                                                         // 5569\n\t\t *                                                                                                                   // 5570\n\t\t *      oTable = $('#example').dataTable();                                                                          // 5571\n\t\t *    } );                                                                                                           // 5572\n\t\t */                                                                                                                  // 5573\n\t\tthis.fnClose = function( nTr )                                                                                       // 5574\n\t\t{                                                                                                                    // 5575\n\t\t\tthis.api( true ).row( nTr ).child.hide();                                                                           // 5576\n\t\t};                                                                                                                   // 5577\n\t\t                                                                                                                     // 5578\n\t\t                                                                                                                     // 5579\n\t\t/**                                                                                                                  // 5580\n\t\t * Remove a row for the table                                                                                        // 5581\n\t\t *  @param {mixed} target The index of the row from aoData to be deleted, or                                         // 5582\n\t\t *    the TR element you want to delete                                                                              // 5583\n\t\t *  @param {function|null} [callBack] Callback function                                                              // 5584\n\t\t *  @param {bool} [redraw=true] Redraw the table or not                                                              // 5585\n\t\t *  @returns {array} The row that was deleted                                                                        // 5586\n\t\t *  @dtopt API                                                                                                       // 5587\n\t\t *  @deprecated Since v1.10                                                                                          // 5588\n\t\t *                                                                                                                   // 5589\n\t\t *  @example                                                                                                         // 5590\n\t\t *    $(document).ready(function() {                                                                                 // 5591\n\t\t *      var oTable = $('#example').dataTable();                                                                      // 5592\n\t\t *                                                                                                                   // 5593\n\t\t *      // Immediately remove the first row                                                                          // 5594\n\t\t *      oTable.fnDeleteRow( 0 );                                                                                     // 5595\n\t\t *    } );                                                                                                           // 5596\n\t\t */                                                                                                                  // 5597\n\t\tthis.fnDeleteRow = function( target, callback, redraw )                                                              // 5598\n\t\t{                                                                                                                    // 5599\n\t\t\tvar api = this.api( true );                                                                                         // 5600\n\t\t\tvar rows = api.rows( target );                                                                                      // 5601\n\t\t\tvar settings = rows.settings()[0];                                                                                  // 5602\n\t\t\tvar data = settings.aoData[ rows[0][0] ];                                                                           // 5603\n\t\t                                                                                                                     // 5604\n\t\t\trows.remove();                                                                                                      // 5605\n\t\t                                                                                                                     // 5606\n\t\t\tif ( callback ) {                                                                                                   // 5607\n\t\t\t\tcallback.call( this, settings, data );                                                                             // 5608\n\t\t\t}                                                                                                                   // 5609\n\t\t                                                                                                                     // 5610\n\t\t\tif ( redraw === undefined || redraw ) {                                                                             // 5611\n\t\t\t\tapi.draw();                                                                                                        // 5612\n\t\t\t}                                                                                                                   // 5613\n\t\t                                                                                                                     // 5614\n\t\t\treturn data;                                                                                                        // 5615\n\t\t};                                                                                                                   // 5616\n\t\t                                                                                                                     // 5617\n\t\t                                                                                                                     // 5618\n\t\t/**                                                                                                                  // 5619\n\t\t * Restore the table to it's original state in the DOM by removing all of DataTables                                 // 5620\n\t\t * enhancements, alterations to the DOM structure of the table and event listeners.                                  // 5621\n\t\t *  @param {boolean} [remove=false] Completely remove the table from the DOM                                         // 5622\n\t\t *  @dtopt API                                                                                                       // 5623\n\t\t *  @deprecated Since v1.10                                                                                          // 5624\n\t\t *                                                                                                                   // 5625\n\t\t *  @example                                                                                                         // 5626\n\t\t *    $(document).ready(function() {                                                                                 // 5627\n\t\t *      // This example is fairly pointless in reality, but shows how fnDestroy can be used                          // 5628\n\t\t *      var oTable = $('#example').dataTable();                                                                      // 5629\n\t\t *      oTable.fnDestroy();                                                                                          // 5630\n\t\t *    } );                                                                                                           // 5631\n\t\t */                                                                                                                  // 5632\n\t\tthis.fnDestroy = function ( remove )                                                                                 // 5633\n\t\t{                                                                                                                    // 5634\n\t\t\tthis.api( true ).destroy( remove );                                                                                 // 5635\n\t\t};                                                                                                                   // 5636\n\t\t                                                                                                                     // 5637\n\t\t                                                                                                                     // 5638\n\t\t/**                                                                                                                  // 5639\n\t\t * Redraw the table                                                                                                  // 5640\n\t\t *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.                       // 5641\n\t\t *  @dtopt API                                                                                                       // 5642\n\t\t *  @deprecated Since v1.10                                                                                          // 5643\n\t\t *                                                                                                                   // 5644\n\t\t *  @example                                                                                                         // 5645\n\t\t *    $(document).ready(function() {                                                                                 // 5646\n\t\t *      var oTable = $('#example').dataTable();                                                                      // 5647\n\t\t *                                                                                                                   // 5648\n\t\t *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)                              // 5649\n\t\t *      oTable.fnDraw();                                                                                             // 5650\n\t\t *    } );                                                                                                           // 5651\n\t\t */                                                                                                                  // 5652\n\t\tthis.fnDraw = function( complete )                                                                                   // 5653\n\t\t{                                                                                                                    // 5654\n\t\t\t// Note that this isn't an exact match to the old call to _fnDraw - it takes                                        // 5655\n\t\t\t// into account the new data, but can hold position.                                                                // 5656\n\t\t\tthis.api( true ).draw( complete );                                                                                  // 5657\n\t\t};                                                                                                                   // 5658\n\t\t                                                                                                                     // 5659\n\t\t                                                                                                                     // 5660\n\t\t/**                                                                                                                  // 5661\n\t\t * Filter the input based on data                                                                                    // 5662\n\t\t *  @param {string} sInput String to filter the table on                                                             // 5663\n\t\t *  @param {int|null} [iColumn] Column to limit filtering to                                                         // 5664\n\t\t *  @param {bool} [bRegex=false] Treat as regular expression or not                                                  // 5665\n\t\t *  @param {bool} [bSmart=true] Perform smart filtering or not                                                       // 5666\n\t\t *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)                              // 5667\n\t\t *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)                         // 5668\n\t\t *  @dtopt API                                                                                                       // 5669\n\t\t *  @deprecated Since v1.10                                                                                          // 5670\n\t\t *                                                                                                                   // 5671\n\t\t *  @example                                                                                                         // 5672\n\t\t *    $(document).ready(function() {                                                                                 // 5673\n\t\t *      var oTable = $('#example').dataTable();                                                                      // 5674\n\t\t *                                                                                                                   // 5675\n\t\t *      // Sometime later - filter...                                                                                // 5676\n\t\t *      oTable.fnFilter( 'test string' );                                                                            // 5677\n\t\t *    } );                                                                                                           // 5678\n\t\t */                                                                                                                  // 5679\n\t\tthis.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )                           // 5680\n\t\t{                                                                                                                    // 5681\n\t\t\tvar api = this.api( true );                                                                                         // 5682\n\t\t                                                                                                                     // 5683\n\t\t\tif ( iColumn === null || iColumn === undefined ) {                                                                  // 5684\n\t\t\t\tapi.search( sInput, bRegex, bSmart, bCaseInsensitive );                                                            // 5685\n\t\t\t}                                                                                                                   // 5686\n\t\t\telse {                                                                                                              // 5687\n\t\t\t\tapi.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );                                          // 5688\n\t\t\t}                                                                                                                   // 5689\n\t\t                                                                                                                     // 5690\n\t\t\tapi.draw();                                                                                                         // 5691\n\t\t};                                                                                                                   // 5692\n\t\t                                                                                                                     // 5693\n\t\t                                                                                                                     // 5694\n\t\t/**                                                                                                                  // 5695\n\t\t * Get the data for the whole table, an individual row or an individual cell based on the                            // 5696\n\t\t * provided parameters.                                                                                              // 5697\n\t\t *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as                                // 5698\n\t\t *    a TR node then the data source for the whole row will be returned. If given as a                               // 5699\n\t\t *    TD/TH cell node then iCol will be automatically calculated and the data for the                                // 5700\n\t\t *    cell returned. If given as an integer, then this is treated as the aoData internal                             // 5701\n\t\t *    data index for the row (see fnGetPosition) and the data for that row used.                                     // 5702\n\t\t *  @param {int} [col] Optional column index that you want the data of.                                              // 5703\n\t\t *  @returns {array|object|string} If mRow is undefined, then the data for all rows is                               // 5704\n\t\t *    returned. If mRow is defined, just data for that row, and is iCol is                                           // 5705\n\t\t *    defined, only data for the designated cell is returned.                                                        // 5706\n\t\t *  @dtopt API                                                                                                       // 5707\n\t\t *  @deprecated Since v1.10                                                                                          // 5708\n\t\t *                                                                                                                   // 5709\n\t\t *  @example                                                                                                         // 5710\n\t\t *    // Row data                                                                                                    // 5711\n\t\t *    $(document).ready(function() {                                                                                 // 5712\n\t\t *      oTable = $('#example').dataTable();                                                                          // 5713\n\t\t *                                                                                                                   // 5714\n\t\t *      oTable.$('tr').click( function () {                                                                          // 5715\n\t\t *        var data = oTable.fnGetData( this );                                                                       // 5716\n\t\t *        // ... do something with the array / object of data for the row                                            // 5717\n\t\t *      } );                                                                                                         // 5718\n\t\t *    } );                                                                                                           // 5719\n\t\t *                                                                                                                   // 5720\n\t\t *  @example                                                                                                         // 5721\n\t\t *    // Individual cell data                                                                                        // 5722\n\t\t *    $(document).ready(function() {                                                                                 // 5723\n\t\t *      oTable = $('#example').dataTable();                                                                          // 5724\n\t\t *                                                                                                                   // 5725\n\t\t *      oTable.$('td').click( function () {                                                                          // 5726\n\t\t *        var sData = oTable.fnGetData( this );                                                                      // 5727\n\t\t *        alert( 'The cell clicked on had the value of '+sData );                                                    // 5728\n\t\t *      } );                                                                                                         // 5729\n\t\t *    } );                                                                                                           // 5730\n\t\t */                                                                                                                  // 5731\n\t\tthis.fnGetData = function( src, col )                                                                                // 5732\n\t\t{                                                                                                                    // 5733\n\t\t\tvar api = this.api( true );                                                                                         // 5734\n\t\t                                                                                                                     // 5735\n\t\t\tif ( src !== undefined ) {                                                                                          // 5736\n\t\t\t\tvar type = src.nodeName ? src.nodeName.toLowerCase() : '';                                                         // 5737\n\t\t                                                                                                                     // 5738\n\t\t\t\treturn col !== undefined || type == 'td' || type == 'th' ?                                                         // 5739\n\t\t\t\t\tapi.cell( src, col ).data() :                                                                                     // 5740\n\t\t\t\t\tapi.row( src ).data() || null;                                                                                    // 5741\n\t\t\t}                                                                                                                   // 5742\n\t\t                                                                                                                     // 5743\n\t\t\treturn api.data().toArray();                                                                                        // 5744\n\t\t};                                                                                                                   // 5745\n\t\t                                                                                                                     // 5746\n\t\t                                                                                                                     // 5747\n\t\t/**                                                                                                                  // 5748\n\t\t * Get an array of the TR nodes that are used in the table's body. Note that you will                                // 5749\n\t\t * typically want to use the '$' API method in preference to this as it is more                                      // 5750\n\t\t * flexible.                                                                                                         // 5751\n\t\t *  @param {int} [iRow] Optional row index for the TR element you want                                               // 5752\n\t\t *  @returns {array|node} If iRow is undefined, returns an array of all TR elements                                  // 5753\n\t\t *    in the table's body, or iRow is defined, just the TR element requested.                                        // 5754\n\t\t *  @dtopt API                                                                                                       // 5755\n\t\t *  @deprecated Since v1.10                                                                                          // 5756\n\t\t *                                                                                                                   // 5757\n\t\t *  @example                                                                                                         // 5758\n\t\t *    $(document).ready(function() {                                                                                 // 5759\n\t\t *      var oTable = $('#example').dataTable();                                                                      // 5760\n\t\t *                                                                                                                   // 5761\n\t\t *      // Get the nodes from the table                                                                              // 5762\n\t\t *      var nNodes = oTable.fnGetNodes( );                                                                           // 5763\n\t\t *    } );                                                                                                           // 5764\n\t\t */                                                                                                                  // 5765\n\t\tthis.fnGetNodes = function( iRow )                                                                                   // 5766\n\t\t{                                                                                                                    // 5767\n\t\t\tvar api = this.api( true );                                                                                         // 5768\n\t\t                                                                                                                     // 5769\n\t\t\treturn iRow !== undefined ?                                                                                         // 5770\n\t\t\t\tapi.row( iRow ).node() :                                                                                           // 5771\n\t\t\t\tapi.rows().nodes().flatten().toArray();                                                                            // 5772\n\t\t};                                                                                                                   // 5773\n\t\t                                                                                                                     // 5774\n\t\t                                                                                                                     // 5775\n\t\t/**                                                                                                                  // 5776\n\t\t * Get the array indexes of a particular cell from it's DOM element                                                  // 5777\n\t\t * and column index including hidden columns                                                                         // 5778\n\t\t *  @param {node} node this can either be a TR, TD or TH in the table's body                                         // 5779\n\t\t *  @returns {int} If nNode is given as a TR, then a single index is returned, or                                    // 5780\n\t\t *    if given as a cell, an array of [row index, column index (visible),                                            // 5781\n\t\t *    column index (all)] is given.                                                                                  // 5782\n\t\t *  @dtopt API                                                                                                       // 5783\n\t\t *  @deprecated Since v1.10                                                                                          // 5784\n\t\t *                                                                                                                   // 5785\n\t\t *  @example                                                                                                         // 5786\n\t\t *    $(document).ready(function() {                                                                                 // 5787\n\t\t *      $('#example tbody td').click( function () {                                                                  // 5788\n\t\t *        // Get the position of the current data from the node                                                      // 5789\n\t\t *        var aPos = oTable.fnGetPosition( this );                                                                   // 5790\n\t\t *                                                                                                                   // 5791\n\t\t *        // Get the data array for this row                                                                         // 5792\n\t\t *        var aData = oTable.fnGetData( aPos[0] );                                                                   // 5793\n\t\t *                                                                                                                   // 5794\n\t\t *        // Update the data array and return the value                                                              // 5795\n\t\t *        aData[ aPos[1] ] = 'clicked';                                                                              // 5796\n\t\t *        this.innerHTML = 'clicked';                                                                                // 5797\n\t\t *      } );                                                                                                         // 5798\n\t\t *                                                                                                                   // 5799\n\t\t *      // Init DataTables                                                                                           // 5800\n\t\t *      oTable = $('#example').dataTable();                                                                          // 5801\n\t\t *    } );                                                                                                           // 5802\n\t\t */                                                                                                                  // 5803\n\t\tthis.fnGetPosition = function( node )                                                                                // 5804\n\t\t{                                                                                                                    // 5805\n\t\t\tvar api = this.api( true );                                                                                         // 5806\n\t\t\tvar nodeName = node.nodeName.toUpperCase();                                                                         // 5807\n\t\t                                                                                                                     // 5808\n\t\t\tif ( nodeName == 'TR' ) {                                                                                           // 5809\n\t\t\t\treturn api.row( node ).index();                                                                                    // 5810\n\t\t\t}                                                                                                                   // 5811\n\t\t\telse if ( nodeName == 'TD' || nodeName == 'TH' ) {                                                                  // 5812\n\t\t\t\tvar cell = api.cell( node ).index();                                                                               // 5813\n\t\t                                                                                                                     // 5814\n\t\t\t\treturn [                                                                                                           // 5815\n\t\t\t\t\tcell.row,                                                                                                         // 5816\n\t\t\t\t\tcell.columnVisible,                                                                                               // 5817\n\t\t\t\t\tcell.column                                                                                                       // 5818\n\t\t\t\t];                                                                                                                 // 5819\n\t\t\t}                                                                                                                   // 5820\n\t\t\treturn null;                                                                                                        // 5821\n\t\t};                                                                                                                   // 5822\n\t\t                                                                                                                     // 5823\n\t\t                                                                                                                     // 5824\n\t\t/**                                                                                                                  // 5825\n\t\t * Check to see if a row is 'open' or not.                                                                           // 5826\n\t\t *  @param {node} nTr the table row to check                                                                         // 5827\n\t\t *  @returns {boolean} true if the row is currently open, false otherwise                                            // 5828\n\t\t *  @dtopt API                                                                                                       // 5829\n\t\t *  @deprecated Since v1.10                                                                                          // 5830\n\t\t *                                                                                                                   // 5831\n\t\t *  @example                                                                                                         // 5832\n\t\t *    $(document).ready(function() {                                                                                 // 5833\n\t\t *      var oTable;                                                                                                  // 5834\n\t\t *                                                                                                                   // 5835\n\t\t *      // 'open' an information row when a row is clicked on                                                        // 5836\n\t\t *      $('#example tbody tr').click( function () {                                                                  // 5837\n\t\t *        if ( oTable.fnIsOpen(this) ) {                                                                             // 5838\n\t\t *          oTable.fnClose( this );                                                                                  // 5839\n\t\t *        } else {                                                                                                   // 5840\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );                                               // 5841\n\t\t *        }                                                                                                          // 5842\n\t\t *      } );                                                                                                         // 5843\n\t\t *                                                                                                                   // 5844\n\t\t *      oTable = $('#example').dataTable();                                                                          // 5845\n\t\t *    } );                                                                                                           // 5846\n\t\t */                                                                                                                  // 5847\n\t\tthis.fnIsOpen = function( nTr )                                                                                      // 5848\n\t\t{                                                                                                                    // 5849\n\t\t\treturn this.api( true ).row( nTr ).child.isShown();                                                                 // 5850\n\t\t};                                                                                                                   // 5851\n\t\t                                                                                                                     // 5852\n\t\t                                                                                                                     // 5853\n\t\t/**                                                                                                                  // 5854\n\t\t * This function will place a new row directly after a row which is currently                                        // 5855\n\t\t * on display on the page, with the HTML contents that is passed into the                                            // 5856\n\t\t * function. This can be used, for example, to ask for confirmation that a                                           // 5857\n\t\t * particular record should be deleted.                                                                              // 5858\n\t\t *  @param {node} nTr The table row to 'open'                                                                        // 5859\n\t\t *  @param {string|node|jQuery} mHtml The HTML to put into the row                                                   // 5860\n\t\t *  @param {string} sClass Class to give the new TD cell                                                             // 5861\n\t\t *  @returns {node} The row opened. Note that if the table row passed in as the                                      // 5862\n\t\t *    first parameter, is not found in the table, this method will silently                                          // 5863\n\t\t *    return.                                                                                                        // 5864\n\t\t *  @dtopt API                                                                                                       // 5865\n\t\t *  @deprecated Since v1.10                                                                                          // 5866\n\t\t *                                                                                                                   // 5867\n\t\t *  @example                                                                                                         // 5868\n\t\t *    $(document).ready(function() {                                                                                 // 5869\n\t\t *      var oTable;                                                                                                  // 5870\n\t\t *                                                                                                                   // 5871\n\t\t *      // 'open' an information row when a row is clicked on                                                        // 5872\n\t\t *      $('#example tbody tr').click( function () {                                                                  // 5873\n\t\t *        if ( oTable.fnIsOpen(this) ) {                                                                             // 5874\n\t\t *          oTable.fnClose( this );                                                                                  // 5875\n\t\t *        } else {                                                                                                   // 5876\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );                                               // 5877\n\t\t *        }                                                                                                          // 5878\n\t\t *      } );                                                                                                         // 5879\n\t\t *                                                                                                                   // 5880\n\t\t *      oTable = $('#example').dataTable();                                                                          // 5881\n\t\t *    } );                                                                                                           // 5882\n\t\t */                                                                                                                  // 5883\n\t\tthis.fnOpen = function( nTr, mHtml, sClass )                                                                         // 5884\n\t\t{                                                                                                                    // 5885\n\t\t\treturn this.api( true )                                                                                             // 5886\n\t\t\t\t.row( nTr )                                                                                                        // 5887\n\t\t\t\t.child( mHtml, sClass )                                                                                            // 5888\n\t\t\t\t.show()                                                                                                            // 5889\n\t\t\t\t.child()[0];                                                                                                       // 5890\n\t\t};                                                                                                                   // 5891\n\t\t                                                                                                                     // 5892\n\t\t                                                                                                                     // 5893\n\t\t/**                                                                                                                  // 5894\n\t\t * Change the pagination - provides the internal logic for pagination in a simple API                                // 5895\n\t\t * function. With this function you can have a DataTables table go to the next,                                      // 5896\n\t\t * previous, first or last pages.                                                                                    // 5897\n\t\t *  @param {string|int} mAction Paging action to take: \"first\", \"previous\", \"next\" or \"last\"                         // 5898\n\t\t *    or page number to jump to (integer), note that page 0 is the first page.                                       // 5899\n\t\t *  @param {bool} [bRedraw=true] Redraw the table or not                                                             // 5900\n\t\t *  @dtopt API                                                                                                       // 5901\n\t\t *  @deprecated Since v1.10                                                                                          // 5902\n\t\t *                                                                                                                   // 5903\n\t\t *  @example                                                                                                         // 5904\n\t\t *    $(document).ready(function() {                                                                                 // 5905\n\t\t *      var oTable = $('#example').dataTable();                                                                      // 5906\n\t\t *      oTable.fnPageChange( 'next' );                                                                               // 5907\n\t\t *    } );                                                                                                           // 5908\n\t\t */                                                                                                                  // 5909\n\t\tthis.fnPageChange = function ( mAction, bRedraw )                                                                    // 5910\n\t\t{                                                                                                                    // 5911\n\t\t\tvar api = this.api( true ).page( mAction );                                                                         // 5912\n\t\t                                                                                                                     // 5913\n\t\t\tif ( bRedraw === undefined || bRedraw ) {                                                                           // 5914\n\t\t\t\tapi.draw(false);                                                                                                   // 5915\n\t\t\t}                                                                                                                   // 5916\n\t\t};                                                                                                                   // 5917\n\t\t                                                                                                                     // 5918\n\t\t                                                                                                                     // 5919\n\t\t/**                                                                                                                  // 5920\n\t\t * Show a particular column                                                                                          // 5921\n\t\t *  @param {int} iCol The column whose display should be changed                                                     // 5922\n\t\t *  @param {bool} bShow Show (true) or hide (false) the column                                                       // 5923\n\t\t *  @param {bool} [bRedraw=true] Redraw the table or not                                                             // 5924\n\t\t *  @dtopt API                                                                                                       // 5925\n\t\t *  @deprecated Since v1.10                                                                                          // 5926\n\t\t *                                                                                                                   // 5927\n\t\t *  @example                                                                                                         // 5928\n\t\t *    $(document).ready(function() {                                                                                 // 5929\n\t\t *      var oTable = $('#example').dataTable();                                                                      // 5930\n\t\t *                                                                                                                   // 5931\n\t\t *      // Hide the second column after initialisation                                                               // 5932\n\t\t *      oTable.fnSetColumnVis( 1, false );                                                                           // 5933\n\t\t *    } );                                                                                                           // 5934\n\t\t */                                                                                                                  // 5935\n\t\tthis.fnSetColumnVis = function ( iCol, bShow, bRedraw )                                                              // 5936\n\t\t{                                                                                                                    // 5937\n\t\t\tvar api = this.api( true ).column( iCol ).visible( bShow );                                                         // 5938\n\t\t                                                                                                                     // 5939\n\t\t\tif ( bRedraw === undefined || bRedraw ) {                                                                           // 5940\n\t\t\t\tapi.columns.adjust().draw();                                                                                       // 5941\n\t\t\t}                                                                                                                   // 5942\n\t\t};                                                                                                                   // 5943\n\t\t                                                                                                                     // 5944\n\t\t                                                                                                                     // 5945\n\t\t/**                                                                                                                  // 5946\n\t\t * Get the settings for a particular table for external manipulation                                                 // 5947\n\t\t *  @returns {object} DataTables settings object. See                                                                // 5948\n\t\t *    {@link DataTable.models.oSettings}                                                                             // 5949\n\t\t *  @dtopt API                                                                                                       // 5950\n\t\t *  @deprecated Since v1.10                                                                                          // 5951\n\t\t *                                                                                                                   // 5952\n\t\t *  @example                                                                                                         // 5953\n\t\t *    $(document).ready(function() {                                                                                 // 5954\n\t\t *      var oTable = $('#example').dataTable();                                                                      // 5955\n\t\t *      var oSettings = oTable.fnSettings();                                                                         // 5956\n\t\t *                                                                                                                   // 5957\n\t\t *      // Show an example parameter from the settings                                                               // 5958\n\t\t *      alert( oSettings._iDisplayStart );                                                                           // 5959\n\t\t *    } );                                                                                                           // 5960\n\t\t */                                                                                                                  // 5961\n\t\tthis.fnSettings = function()                                                                                         // 5962\n\t\t{                                                                                                                    // 5963\n\t\t\treturn _fnSettingsFromNode( this[_ext.iApiIndex] );                                                                 // 5964\n\t\t};                                                                                                                   // 5965\n\t\t                                                                                                                     // 5966\n\t\t                                                                                                                     // 5967\n\t\t/**                                                                                                                  // 5968\n\t\t * Sort the table by a particular column                                                                             // 5969\n\t\t *  @param {int} iCol the data index to sort on. Note that this will not match the                                   // 5970\n\t\t *    'display index' if you have hidden data entries                                                                // 5971\n\t\t *  @dtopt API                                                                                                       // 5972\n\t\t *  @deprecated Since v1.10                                                                                          // 5973\n\t\t *                                                                                                                   // 5974\n\t\t *  @example                                                                                                         // 5975\n\t\t *    $(document).ready(function() {                                                                                 // 5976\n\t\t *      var oTable = $('#example').dataTable();                                                                      // 5977\n\t\t *                                                                                                                   // 5978\n\t\t *      // Sort immediately with columns 0 and 1                                                                     // 5979\n\t\t *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );                                                                   // 5980\n\t\t *    } );                                                                                                           // 5981\n\t\t */                                                                                                                  // 5982\n\t\tthis.fnSort = function( aaSort )                                                                                     // 5983\n\t\t{                                                                                                                    // 5984\n\t\t\tthis.api( true ).order( aaSort ).draw();                                                                            // 5985\n\t\t};                                                                                                                   // 5986\n\t\t                                                                                                                     // 5987\n\t\t                                                                                                                     // 5988\n\t\t/**                                                                                                                  // 5989\n\t\t * Attach a sort listener to an element for a given column                                                           // 5990\n\t\t *  @param {node} nNode the element to attach the sort listener to                                                   // 5991\n\t\t *  @param {int} iColumn the column that a click on this node will sort on                                           // 5992\n\t\t *  @param {function} [fnCallback] callback function when sort is run                                                // 5993\n\t\t *  @dtopt API                                                                                                       // 5994\n\t\t *  @deprecated Since v1.10                                                                                          // 5995\n\t\t *                                                                                                                   // 5996\n\t\t *  @example                                                                                                         // 5997\n\t\t *    $(document).ready(function() {                                                                                 // 5998\n\t\t *      var oTable = $('#example').dataTable();                                                                      // 5999\n\t\t *                                                                                                                   // 6000\n\t\t *      // Sort on column 1, when 'sorter' is clicked on                                                             // 6001\n\t\t *      oTable.fnSortListener( document.getElementById('sorter'), 1 );                                               // 6002\n\t\t *    } );                                                                                                           // 6003\n\t\t */                                                                                                                  // 6004\n\t\tthis.fnSortListener = function( nNode, iColumn, fnCallback )                                                         // 6005\n\t\t{                                                                                                                    // 6006\n\t\t\tthis.api( true ).order.listener( nNode, iColumn, fnCallback );                                                      // 6007\n\t\t};                                                                                                                   // 6008\n\t\t                                                                                                                     // 6009\n\t\t                                                                                                                     // 6010\n\t\t/**                                                                                                                  // 6011\n\t\t * Update a table cell or row - this method will accept either a single value to                                     // 6012\n\t\t * update the cell with, an array of values with one element for each column or                                      // 6013\n\t\t * an object in the same format as the original data source. The function is                                         // 6014\n\t\t * self-referencing in order to make the multi column updates easier.                                                // 6015\n\t\t *  @param {object|array|string} mData Data to update the cell/row with                                              // 6016\n\t\t *  @param {node|int} mRow TR element you want to update or the aoData index                                         // 6017\n\t\t *  @param {int} [iColumn] The column to update, give as null or undefined to                                        // 6018\n\t\t *    update a whole row.                                                                                            // 6019\n\t\t *  @param {bool} [bRedraw=true] Redraw the table or not                                                             // 6020\n\t\t *  @param {bool} [bAction=true] Perform pre-draw actions or not                                                     // 6021\n\t\t *  @returns {int} 0 on success, 1 on error                                                                          // 6022\n\t\t *  @dtopt API                                                                                                       // 6023\n\t\t *  @deprecated Since v1.10                                                                                          // 6024\n\t\t *                                                                                                                   // 6025\n\t\t *  @example                                                                                                         // 6026\n\t\t *    $(document).ready(function() {                                                                                 // 6027\n\t\t *      var oTable = $('#example').dataTable();                                                                      // 6028\n\t\t *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell                                                    // 6029\n\t\t *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row                                       // 6030\n\t\t *    } );                                                                                                           // 6031\n\t\t */                                                                                                                  // 6032\n\t\tthis.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )                                                   // 6033\n\t\t{                                                                                                                    // 6034\n\t\t\tvar api = this.api( true );                                                                                         // 6035\n\t\t                                                                                                                     // 6036\n\t\t\tif ( iColumn === undefined || iColumn === null ) {                                                                  // 6037\n\t\t\t\tapi.row( mRow ).data( mData );                                                                                     // 6038\n\t\t\t}                                                                                                                   // 6039\n\t\t\telse {                                                                                                              // 6040\n\t\t\t\tapi.cell( mRow, iColumn ).data( mData );                                                                           // 6041\n\t\t\t}                                                                                                                   // 6042\n\t\t                                                                                                                     // 6043\n\t\t\tif ( bAction === undefined || bAction ) {                                                                           // 6044\n\t\t\t\tapi.columns.adjust();                                                                                              // 6045\n\t\t\t}                                                                                                                   // 6046\n\t\t                                                                                                                     // 6047\n\t\t\tif ( bRedraw === undefined || bRedraw ) {                                                                           // 6048\n\t\t\t\tapi.draw();                                                                                                        // 6049\n\t\t\t}                                                                                                                   // 6050\n\t\t\treturn 0;                                                                                                           // 6051\n\t\t};                                                                                                                   // 6052\n\t\t                                                                                                                     // 6053\n\t\t                                                                                                                     // 6054\n\t\t/**                                                                                                                  // 6055\n\t\t * Provide a common method for plug-ins to check the version of DataTables being used, in order                      // 6056\n\t\t * to ensure compatibility.                                                                                          // 6057\n\t\t *  @param {string} sVersion Version string to check for, in the format \"X.Y.Z\". Note that the                       // 6058\n\t\t *    formats \"X\" and \"X.Y\" are also acceptable.                                                                     // 6059\n\t\t *  @returns {boolean} true if this version of DataTables is greater or equal to the required                        // 6060\n\t\t *    version, or false if this version of DataTales is not suitable                                                 // 6061\n\t\t *  @method                                                                                                          // 6062\n\t\t *  @dtopt API                                                                                                       // 6063\n\t\t *  @deprecated Since v1.10                                                                                          // 6064\n\t\t *                                                                                                                   // 6065\n\t\t *  @example                                                                                                         // 6066\n\t\t *    $(document).ready(function() {                                                                                 // 6067\n\t\t *      var oTable = $('#example').dataTable();                                                                      // 6068\n\t\t *      alert( oTable.fnVersionCheck( '1.9.0' ) );                                                                   // 6069\n\t\t *    } );                                                                                                           // 6070\n\t\t */                                                                                                                  // 6071\n\t\tthis.fnVersionCheck = _ext.fnVersionCheck;                                                                           // 6072\n\t\t                                                                                                                     // 6073\n                                                                                                                       // 6074\n\t\tvar _that = this;                                                                                                    // 6075\n\t\tvar emptyInit = options === undefined;                                                                               // 6076\n\t\tvar len = this.length;                                                                                               // 6077\n                                                                                                                       // 6078\n\t\tif ( emptyInit ) {                                                                                                   // 6079\n\t\t\toptions = {};                                                                                                       // 6080\n\t\t}                                                                                                                    // 6081\n                                                                                                                       // 6082\n\t\tthis.oApi = this.internal = _ext.internal;                                                                           // 6083\n                                                                                                                       // 6084\n\t\t// Extend with old style plug-in API methods                                                                         // 6085\n\t\tfor ( var fn in DataTable.ext.internal ) {                                                                           // 6086\n\t\t\tif ( fn ) {                                                                                                         // 6087\n\t\t\t\tthis[fn] = _fnExternApiFunc(fn);                                                                                   // 6088\n\t\t\t}                                                                                                                   // 6089\n\t\t}                                                                                                                    // 6090\n                                                                                                                       // 6091\n\t\tthis.each(function() {                                                                                               // 6092\n\t\t\t// For each initialisation we want to give it a clean initialisation                                                // 6093\n\t\t\t// object that can be bashed around                                                                                 // 6094\n\t\t\tvar o = {};                                                                                                         // 6095\n\t\t\tvar oInit = len > 1 ? // optimisation for single table case                                                         // 6096\n\t\t\t\t_fnExtend( o, options, true ) :                                                                                    // 6097\n\t\t\t\toptions;                                                                                                           // 6098\n                                                                                                                       // 6099\n\t\t\t/*global oInit,_that,emptyInit*/                                                                                    // 6100\n\t\t\tvar i=0, iLen, j, jLen, k, kLen;                                                                                    // 6101\n\t\t\tvar sId = this.getAttribute( 'id' );                                                                                // 6102\n\t\t\tvar bInitHandedOff = false;                                                                                         // 6103\n\t\t\tvar defaults = DataTable.defaults;                                                                                  // 6104\n\t\t\tvar $this = $(this);                                                                                                // 6105\n\t\t\t                                                                                                                    // 6106\n\t\t\t                                                                                                                    // 6107\n\t\t\t/* Sanity check */                                                                                                  // 6108\n\t\t\tif ( this.nodeName.toLowerCase() != 'table' )                                                                       // 6109\n\t\t\t{                                                                                                                   // 6110\n\t\t\t\t_fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );                                         // 6111\n\t\t\t\treturn;                                                                                                            // 6112\n\t\t\t}                                                                                                                   // 6113\n\t\t\t                                                                                                                    // 6114\n\t\t\t/* Backwards compatibility for the defaults */                                                                      // 6115\n\t\t\t_fnCompatOpts( defaults );                                                                                          // 6116\n\t\t\t_fnCompatCols( defaults.column );                                                                                   // 6117\n\t\t\t                                                                                                                    // 6118\n\t\t\t/* Convert the camel-case defaults to Hungarian */                                                                  // 6119\n\t\t\t_fnCamelToHungarian( defaults, defaults, true );                                                                    // 6120\n\t\t\t_fnCamelToHungarian( defaults.column, defaults.column, true );                                                      // 6121\n\t\t\t                                                                                                                    // 6122\n\t\t\t/* Setting up the initialisation object */                                                                          // 6123\n\t\t\t_fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ) );                                                   // 6124\n\t\t\t                                                                                                                    // 6125\n\t\t\t                                                                                                                    // 6126\n\t\t\t                                                                                                                    // 6127\n\t\t\t/* Check to see if we are re-initialising a table */                                                                // 6128\n\t\t\tvar allSettings = DataTable.settings;                                                                               // 6129\n\t\t\tfor ( i=0, iLen=allSettings.length ; i<iLen ; i++ )                                                                 // 6130\n\t\t\t{                                                                                                                   // 6131\n\t\t\t\tvar s = allSettings[i];                                                                                            // 6132\n\t\t\t                                                                                                                    // 6133\n\t\t\t\t/* Base check on table node */                                                                                     // 6134\n\t\t\t\tif ( s.nTable == this || s.nTHead.parentNode == this || (s.nTFoot && s.nTFoot.parentNode == this) )                // 6135\n\t\t\t\t{                                                                                                                  // 6136\n\t\t\t\t\tvar bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;                             // 6137\n\t\t\t\t\tvar bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;                                 // 6138\n\t\t\t                                                                                                                    // 6139\n\t\t\t\t\tif ( emptyInit || bRetrieve )                                                                                     // 6140\n\t\t\t\t\t{                                                                                                                 // 6141\n\t\t\t\t\t\treturn s.oInstance;                                                                                              // 6142\n\t\t\t\t\t}                                                                                                                 // 6143\n\t\t\t\t\telse if ( bDestroy )                                                                                              // 6144\n\t\t\t\t\t{                                                                                                                 // 6145\n\t\t\t\t\t\ts.oInstance.fnDestroy();                                                                                         // 6146\n\t\t\t\t\t\tbreak;                                                                                                           // 6147\n\t\t\t\t\t}                                                                                                                 // 6148\n\t\t\t\t\telse                                                                                                              // 6149\n\t\t\t\t\t{                                                                                                                 // 6150\n\t\t\t\t\t\t_fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );                                                              // 6151\n\t\t\t\t\t\treturn;                                                                                                          // 6152\n\t\t\t\t\t}                                                                                                                 // 6153\n\t\t\t\t}                                                                                                                  // 6154\n\t\t\t                                                                                                                    // 6155\n\t\t\t\t/* If the element we are initialising has the same ID as a table which was previously                              // 6156\n\t\t\t\t * initialised, but the table nodes don't match (from before) then we destroy the old                              // 6157\n\t\t\t\t * instance by simply deleting it. This is under the assumption that the table has been                            // 6158\n\t\t\t\t * destroyed by other methods. Anyone using non-id selectors will need to do this manually                         // 6159\n\t\t\t\t */                                                                                                                // 6160\n\t\t\t\tif ( s.sTableId == this.id )                                                                                       // 6161\n\t\t\t\t{                                                                                                                  // 6162\n\t\t\t\t\tallSettings.splice( i, 1 );                                                                                       // 6163\n\t\t\t\t\tbreak;                                                                                                            // 6164\n\t\t\t\t}                                                                                                                  // 6165\n\t\t\t}                                                                                                                   // 6166\n\t\t\t                                                                                                                    // 6167\n\t\t\t/* Ensure the table has an ID - required for accessibility */                                                       // 6168\n\t\t\tif ( sId === null || sId === \"\" )                                                                                   // 6169\n\t\t\t{                                                                                                                   // 6170\n\t\t\t\tsId = \"DataTables_Table_\"+(DataTable.ext._unique++);                                                               // 6171\n\t\t\t\tthis.id = sId;                                                                                                     // 6172\n\t\t\t}                                                                                                                   // 6173\n\t\t\t                                                                                                                    // 6174\n\t\t\t/* Create the settings object for this table and set some of the default parameters */                              // 6175\n\t\t\tvar oSettings = $.extend( true, {}, DataTable.models.oSettings, {                                                   // 6176\n\t\t\t\t\"sDestroyWidth\": $this[0].style.width,                                                                             // 6177\n\t\t\t\t\"sInstance\":     sId,                                                                                              // 6178\n\t\t\t\t\"sTableId\":      sId                                                                                               // 6179\n\t\t\t} );                                                                                                                // 6180\n\t\t\toSettings.nTable = this;                                                                                            // 6181\n\t\t\toSettings.oApi   = _that.internal;                                                                                  // 6182\n\t\t\toSettings.oInit  = oInit;                                                                                           // 6183\n\t\t\t                                                                                                                    // 6184\n\t\t\tallSettings.push( oSettings );                                                                                      // 6185\n\t\t\t                                                                                                                    // 6186\n\t\t\t// Need to add the instance after the instance after the settings object has been added                             // 6187\n\t\t\t// to the settings array, so we can self reference the table instance if more than one                              // 6188\n\t\t\toSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();                                               // 6189\n\t\t\t                                                                                                                    // 6190\n\t\t\t// Backwards compatibility, before we apply all the defaults                                                        // 6191\n\t\t\t_fnCompatOpts( oInit );                                                                                             // 6192\n\t\t\t                                                                                                                    // 6193\n\t\t\tif ( oInit.oLanguage )                                                                                              // 6194\n\t\t\t{                                                                                                                   // 6195\n\t\t\t\t_fnLanguageCompat( oInit.oLanguage );                                                                              // 6196\n\t\t\t}                                                                                                                   // 6197\n\t\t\t                                                                                                                    // 6198\n\t\t\t// If the length menu is given, but the init display length is not, use the length menu                             // 6199\n\t\t\tif ( oInit.aLengthMenu && ! oInit.iDisplayLength )                                                                  // 6200\n\t\t\t{                                                                                                                   // 6201\n\t\t\t\toInit.iDisplayLength = $.isArray( oInit.aLengthMenu[0] ) ?                                                         // 6202\n\t\t\t\t\toInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];                                                                   // 6203\n\t\t\t}                                                                                                                   // 6204\n\t\t\t                                                                                                                    // 6205\n\t\t\t// Apply the defaults and init options to make a single init object will all                                        // 6206\n\t\t\t// options defined from defaults and instance options.                                                              // 6207\n\t\t\toInit = _fnExtend( $.extend( true, {}, defaults ), oInit );                                                         // 6208\n\t\t\t                                                                                                                    // 6209\n\t\t\t                                                                                                                    // 6210\n\t\t\t// Map the initialisation options onto the settings object                                                          // 6211\n\t\t\t_fnMap( oSettings.oFeatures, oInit, [                                                                               // 6212\n\t\t\t\t\"bPaginate\",                                                                                                       // 6213\n\t\t\t\t\"bLengthChange\",                                                                                                   // 6214\n\t\t\t\t\"bFilter\",                                                                                                         // 6215\n\t\t\t\t\"bSort\",                                                                                                           // 6216\n\t\t\t\t\"bSortMulti\",                                                                                                      // 6217\n\t\t\t\t\"bInfo\",                                                                                                           // 6218\n\t\t\t\t\"bProcessing\",                                                                                                     // 6219\n\t\t\t\t\"bAutoWidth\",                                                                                                      // 6220\n\t\t\t\t\"bSortClasses\",                                                                                                    // 6221\n\t\t\t\t\"bServerSide\",                                                                                                     // 6222\n\t\t\t\t\"bDeferRender\"                                                                                                     // 6223\n\t\t\t] );                                                                                                                // 6224\n\t\t\t_fnMap( oSettings, oInit, [                                                                                         // 6225\n\t\t\t\t\"asStripeClasses\",                                                                                                 // 6226\n\t\t\t\t\"ajax\",                                                                                                            // 6227\n\t\t\t\t\"fnServerData\",                                                                                                    // 6228\n\t\t\t\t\"fnFormatNumber\",                                                                                                  // 6229\n\t\t\t\t\"sServerMethod\",                                                                                                   // 6230\n\t\t\t\t\"aaSorting\",                                                                                                       // 6231\n\t\t\t\t\"aaSortingFixed\",                                                                                                  // 6232\n\t\t\t\t\"aLengthMenu\",                                                                                                     // 6233\n\t\t\t\t\"sPaginationType\",                                                                                                 // 6234\n\t\t\t\t\"sAjaxSource\",                                                                                                     // 6235\n\t\t\t\t\"sAjaxDataProp\",                                                                                                   // 6236\n\t\t\t\t\"iStateDuration\",                                                                                                  // 6237\n\t\t\t\t\"sDom\",                                                                                                            // 6238\n\t\t\t\t\"bSortCellsTop\",                                                                                                   // 6239\n\t\t\t\t\"iTabIndex\",                                                                                                       // 6240\n\t\t\t\t\"fnStateLoadCallback\",                                                                                             // 6241\n\t\t\t\t\"fnStateSaveCallback\",                                                                                             // 6242\n\t\t\t\t\"renderer\",                                                                                                        // 6243\n\t\t\t\t\"searchDelay\",                                                                                                     // 6244\n\t\t\t\t[ \"iCookieDuration\", \"iStateDuration\" ], // backwards compat                                                       // 6245\n\t\t\t\t[ \"oSearch\", \"oPreviousSearch\" ],                                                                                  // 6246\n\t\t\t\t[ \"aoSearchCols\", \"aoPreSearchCols\" ],                                                                             // 6247\n\t\t\t\t[ \"iDisplayLength\", \"_iDisplayLength\" ],                                                                           // 6248\n\t\t\t\t[ \"bJQueryUI\", \"bJUI\" ]                                                                                            // 6249\n\t\t\t] );                                                                                                                // 6250\n\t\t\t_fnMap( oSettings.oScroll, oInit, [                                                                                 // 6251\n\t\t\t\t[ \"sScrollX\", \"sX\" ],                                                                                              // 6252\n\t\t\t\t[ \"sScrollXInner\", \"sXInner\" ],                                                                                    // 6253\n\t\t\t\t[ \"sScrollY\", \"sY\" ],                                                                                              // 6254\n\t\t\t\t[ \"bScrollCollapse\", \"bCollapse\" ]                                                                                 // 6255\n\t\t\t] );                                                                                                                // 6256\n\t\t\t_fnMap( oSettings.oLanguage, oInit, \"fnInfoCallback\" );                                                             // 6257\n\t\t\t                                                                                                                    // 6258\n\t\t\t/* Callback functions which are array driven */                                                                     // 6259\n\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );                             // 6260\n\t\t\t_fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );                             // 6261\n\t\t\t_fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );                             // 6262\n\t\t\t_fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );                             // 6263\n\t\t\t_fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );                             // 6264\n\t\t\t_fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );                             // 6265\n\t\t\t_fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );                             // 6266\n\t\t\t_fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );                             // 6267\n\t\t\t_fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );                             // 6268\n\t\t\t_fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );                             // 6269\n\t\t\t_fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );                             // 6270\n\t\t\t                                                                                                                    // 6271\n\t\t\tvar oClasses = oSettings.oClasses;                                                                                  // 6272\n\t\t\t                                                                                                                    // 6273\n\t\t\t// @todo Remove in 1.11                                                                                             // 6274\n\t\t\tif ( oInit.bJQueryUI )                                                                                              // 6275\n\t\t\t{                                                                                                                   // 6276\n\t\t\t\t/* Use the JUI classes object for display. You could clone the oStdClasses object if                               // 6277\n\t\t\t\t * you want to have multiple tables with multiple independent classes                                              // 6278\n\t\t\t\t */                                                                                                                // 6279\n\t\t\t\t$.extend( oClasses, DataTable.ext.oJUIClasses, oInit.oClasses );                                                   // 6280\n\t\t\t                                                                                                                    // 6281\n\t\t\t\tif ( oInit.sDom === defaults.sDom && defaults.sDom === \"lfrtip\" )                                                  // 6282\n\t\t\t\t{                                                                                                                  // 6283\n\t\t\t\t\t/* Set the DOM to use a layout suitable for jQuery UI's theming */                                                // 6284\n\t\t\t\t\toSettings.sDom = '<\"H\"lfr>t<\"F\"ip>';                                                                              // 6285\n\t\t\t\t}                                                                                                                  // 6286\n\t\t\t                                                                                                                    // 6287\n\t\t\t\tif ( ! oSettings.renderer ) {                                                                                      // 6288\n\t\t\t\t\toSettings.renderer = 'jqueryui';                                                                                  // 6289\n\t\t\t\t}                                                                                                                  // 6290\n\t\t\t\telse if ( $.isPlainObject( oSettings.renderer ) && ! oSettings.renderer.header ) {                                 // 6291\n\t\t\t\t\toSettings.renderer.header = 'jqueryui';                                                                           // 6292\n\t\t\t\t}                                                                                                                  // 6293\n\t\t\t}                                                                                                                   // 6294\n\t\t\telse                                                                                                                // 6295\n\t\t\t{                                                                                                                   // 6296\n\t\t\t\t$.extend( oClasses, DataTable.ext.classes, oInit.oClasses );                                                       // 6297\n\t\t\t}                                                                                                                   // 6298\n\t\t\t$this.addClass( oClasses.sTable );                                                                                  // 6299\n\t\t\t                                                                                                                    // 6300\n\t\t\t/* Calculate the scroll bar width and cache it for use later on */                                                  // 6301\n\t\t\tif ( oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\" )                                                   // 6302\n\t\t\t{                                                                                                                   // 6303\n\t\t\t\toSettings.oScroll.iBarWidth = _fnScrollBarWidth();                                                                 // 6304\n\t\t\t}                                                                                                                   // 6305\n\t\t\tif ( oSettings.oScroll.sX === true ) { // Easy initialisation of x-scrolling                                        // 6306\n\t\t\t\toSettings.oScroll.sX = '100%';                                                                                     // 6307\n\t\t\t}                                                                                                                   // 6308\n\t\t\t                                                                                                                    // 6309\n\t\t\tif ( oSettings.iInitDisplayStart === undefined )                                                                    // 6310\n\t\t\t{                                                                                                                   // 6311\n\t\t\t\t/* Display start point, taking into account the save saving */                                                     // 6312\n\t\t\t\toSettings.iInitDisplayStart = oInit.iDisplayStart;                                                                 // 6313\n\t\t\t\toSettings._iDisplayStart = oInit.iDisplayStart;                                                                    // 6314\n\t\t\t}                                                                                                                   // 6315\n\t\t\t                                                                                                                    // 6316\n\t\t\tif ( oInit.iDeferLoading !== null )                                                                                 // 6317\n\t\t\t{                                                                                                                   // 6318\n\t\t\t\toSettings.bDeferLoading = true;                                                                                    // 6319\n\t\t\t\tvar tmp = $.isArray( oInit.iDeferLoading );                                                                        // 6320\n\t\t\t\toSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;                                   // 6321\n\t\t\t\toSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;                                     // 6322\n\t\t\t}                                                                                                                   // 6323\n\t\t\t                                                                                                                    // 6324\n\t\t\t/* Language definitions */                                                                                          // 6325\n\t\t\tvar oLanguage = oSettings.oLanguage;                                                                                // 6326\n\t\t\t$.extend( true, oLanguage, oInit.oLanguage );                                                                       // 6327\n\t\t\t                                                                                                                    // 6328\n\t\t\tif ( oLanguage.sUrl !== \"\" )                                                                                        // 6329\n\t\t\t{                                                                                                                   // 6330\n\t\t\t\t/* Get the language definitions from a file - because this Ajax call makes the language                            // 6331\n\t\t\t\t * get async to the remainder of this function we use bInitHandedOff to indicate that                              // 6332\n\t\t\t\t * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor                           // 6333\n\t\t\t\t */                                                                                                                // 6334\n\t\t\t\t$.ajax( {                                                                                                          // 6335\n\t\t\t\t\tdataType: 'json',                                                                                                 // 6336\n\t\t\t\t\turl: oLanguage.sUrl,                                                                                              // 6337\n\t\t\t\t\tsuccess: function ( json ) {                                                                                      // 6338\n\t\t\t\t\t\t_fnLanguageCompat( json );                                                                                       // 6339\n\t\t\t\t\t\t_fnCamelToHungarian( defaults.oLanguage, json );                                                                 // 6340\n\t\t\t\t\t\t$.extend( true, oLanguage, json );                                                                               // 6341\n\t\t\t\t\t\t_fnInitialise( oSettings );                                                                                      // 6342\n\t\t\t\t\t},                                                                                                                // 6343\n\t\t\t\t\terror: function () {                                                                                              // 6344\n\t\t\t\t\t\t// Error occurred loading language file, continue on as best we can                                              // 6345\n\t\t\t\t\t\t_fnInitialise( oSettings );                                                                                      // 6346\n\t\t\t\t\t}                                                                                                                 // 6347\n\t\t\t\t} );                                                                                                               // 6348\n\t\t\t\tbInitHandedOff = true;                                                                                             // 6349\n\t\t\t}                                                                                                                   // 6350\n\t\t\t                                                                                                                    // 6351\n\t\t\t/*                                                                                                                  // 6352\n\t\t\t * Stripes                                                                                                          // 6353\n\t\t\t */                                                                                                                 // 6354\n\t\t\tif ( oInit.asStripeClasses === null )                                                                               // 6355\n\t\t\t{                                                                                                                   // 6356\n\t\t\t\toSettings.asStripeClasses =[                                                                                       // 6357\n\t\t\t\t\toClasses.sStripeOdd,                                                                                              // 6358\n\t\t\t\t\toClasses.sStripeEven                                                                                              // 6359\n\t\t\t\t];                                                                                                                 // 6360\n\t\t\t}                                                                                                                   // 6361\n\t\t\t                                                                                                                    // 6362\n\t\t\t/* Remove row stripe classes if they are already on the table row */                                                // 6363\n\t\t\tvar stripeClasses = oSettings.asStripeClasses;                                                                      // 6364\n\t\t\tvar rowOne = $this.children('tbody').find('tr').eq(0);                                                              // 6365\n\t\t\tif ( $.inArray( true, $.map( stripeClasses, function(el, i) {                                                       // 6366\n\t\t\t\treturn rowOne.hasClass(el);                                                                                        // 6367\n\t\t\t} ) ) !== -1 ) {                                                                                                    // 6368\n\t\t\t\t$('tbody tr', this).removeClass( stripeClasses.join(' ') );                                                        // 6369\n\t\t\t\toSettings.asDestroyStripes = stripeClasses.slice();                                                                // 6370\n\t\t\t}                                                                                                                   // 6371\n\t\t\t                                                                                                                    // 6372\n\t\t\t/*                                                                                                                  // 6373\n\t\t\t * Columns                                                                                                          // 6374\n\t\t\t * See if we should load columns automatically or use defined ones                                                  // 6375\n\t\t\t */                                                                                                                 // 6376\n\t\t\tvar anThs = [];                                                                                                     // 6377\n\t\t\tvar aoColumnsInit;                                                                                                  // 6378\n\t\t\tvar nThead = this.getElementsByTagName('thead');                                                                    // 6379\n\t\t\tif ( nThead.length !== 0 )                                                                                          // 6380\n\t\t\t{                                                                                                                   // 6381\n\t\t\t\t_fnDetectHeader( oSettings.aoHeader, nThead[0] );                                                                  // 6382\n\t\t\t\tanThs = _fnGetUniqueThs( oSettings );                                                                              // 6383\n\t\t\t}                                                                                                                   // 6384\n\t\t\t                                                                                                                    // 6385\n\t\t\t/* If not given a column array, generate one with nulls */                                                          // 6386\n\t\t\tif ( oInit.aoColumns === null )                                                                                     // 6387\n\t\t\t{                                                                                                                   // 6388\n\t\t\t\taoColumnsInit = [];                                                                                                // 6389\n\t\t\t\tfor ( i=0, iLen=anThs.length ; i<iLen ; i++ )                                                                      // 6390\n\t\t\t\t{                                                                                                                  // 6391\n\t\t\t\t\taoColumnsInit.push( null );                                                                                       // 6392\n\t\t\t\t}                                                                                                                  // 6393\n\t\t\t}                                                                                                                   // 6394\n\t\t\telse                                                                                                                // 6395\n\t\t\t{                                                                                                                   // 6396\n\t\t\t\taoColumnsInit = oInit.aoColumns;                                                                                   // 6397\n\t\t\t}                                                                                                                   // 6398\n\t\t\t                                                                                                                    // 6399\n\t\t\t/* Add the columns */                                                                                               // 6400\n\t\t\tfor ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )                                                               // 6401\n\t\t\t{                                                                                                                   // 6402\n\t\t\t\t_fnAddColumn( oSettings, anThs ? anThs[i] : null );                                                                // 6403\n\t\t\t}                                                                                                                   // 6404\n\t\t\t                                                                                                                    // 6405\n\t\t\t/* Apply the column definitions */                                                                                  // 6406\n\t\t\t_fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {                           // 6407\n\t\t\t\t_fnColumnOptions( oSettings, iCol, oDef );                                                                         // 6408\n\t\t\t} );                                                                                                                // 6409\n\t\t\t                                                                                                                    // 6410\n\t\t\t/* HTML5 attribute detection - build an mData object automatically if the                                           // 6411\n\t\t\t * attributes are found                                                                                             // 6412\n\t\t\t */                                                                                                                 // 6413\n\t\t\tif ( rowOne.length ) {                                                                                              // 6414\n\t\t\t\tvar a = function ( cell, name ) {                                                                                  // 6415\n\t\t\t\t\treturn cell.getAttribute( 'data-'+name ) !== null ? name : null;                                                  // 6416\n\t\t\t\t};                                                                                                                 // 6417\n\t\t\t                                                                                                                    // 6418\n\t\t\t\t$.each( _fnGetRowElements( oSettings, rowOne[0] ).cells, function (i, cell) {                                      // 6419\n\t\t\t\t\tvar col = oSettings.aoColumns[i];                                                                                 // 6420\n\t\t\t                                                                                                                    // 6421\n\t\t\t\t\tif ( col.mData === i ) {                                                                                          // 6422\n\t\t\t\t\t\tvar sort = a( cell, 'sort' ) || a( cell, 'order' );                                                              // 6423\n\t\t\t\t\t\tvar filter = a( cell, 'filter' ) || a( cell, 'search' );                                                         // 6424\n\t\t\t                                                                                                                    // 6425\n\t\t\t\t\t\tif ( sort !== null || filter !== null ) {                                                                        // 6426\n\t\t\t\t\t\t\tcol.mData = {                                                                                                   // 6427\n\t\t\t\t\t\t\t\t_:      i+'.display',                                                                                          // 6428\n\t\t\t\t\t\t\t\tsort:   sort !== null   ? i+'.@data-'+sort   : undefined,                                                      // 6429\n\t\t\t\t\t\t\t\ttype:   sort !== null   ? i+'.@data-'+sort   : undefined,                                                      // 6430\n\t\t\t\t\t\t\t\tfilter: filter !== null ? i+'.@data-'+filter : undefined                                                       // 6431\n\t\t\t\t\t\t\t};                                                                                                              // 6432\n\t\t\t                                                                                                                    // 6433\n\t\t\t\t\t\t\t_fnColumnOptions( oSettings, i );                                                                               // 6434\n\t\t\t\t\t\t}                                                                                                                // 6435\n\t\t\t\t\t}                                                                                                                 // 6436\n\t\t\t\t} );                                                                                                               // 6437\n\t\t\t}                                                                                                                   // 6438\n\t\t\t                                                                                                                    // 6439\n\t\t\tvar features = oSettings.oFeatures;                                                                                 // 6440\n\t\t\t                                                                                                                    // 6441\n\t\t\t/* Must be done after everything which can be overridden by the state saving! */                                    // 6442\n\t\t\tif ( oInit.bStateSave )                                                                                             // 6443\n\t\t\t{                                                                                                                   // 6444\n\t\t\t\tfeatures.bStateSave = true;                                                                                        // 6445\n\t\t\t\t_fnLoadState( oSettings, oInit );                                                                                  // 6446\n\t\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );                                         // 6447\n\t\t\t}                                                                                                                   // 6448\n\t\t\t                                                                                                                    // 6449\n\t\t\t                                                                                                                    // 6450\n\t\t\t/*                                                                                                                  // 6451\n\t\t\t * Sorting                                                                                                          // 6452\n\t\t\t * @todo For modularisation (1.11) this needs to do into a sort start up handler                                    // 6453\n\t\t\t */                                                                                                                 // 6454\n\t\t\t                                                                                                                    // 6455\n\t\t\t// If aaSorting is not defined, then we use the first indicator in asSorting                                        // 6456\n\t\t\t// in case that has been altered, so the default sort reflects that option                                          // 6457\n\t\t\tif ( oInit.aaSorting === undefined )                                                                                // 6458\n\t\t\t{                                                                                                                   // 6459\n\t\t\t\tvar sorting = oSettings.aaSorting;                                                                                 // 6460\n\t\t\t\tfor ( i=0, iLen=sorting.length ; i<iLen ; i++ )                                                                    // 6461\n\t\t\t\t{                                                                                                                  // 6462\n\t\t\t\t\tsorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];                                                            // 6463\n\t\t\t\t}                                                                                                                  // 6464\n\t\t\t}                                                                                                                   // 6465\n\t\t\t                                                                                                                    // 6466\n\t\t\t/* Do a first pass on the sorting classes (allows any size changes to be taken into                                 // 6467\n\t\t\t * account, and also will apply sorting disabled classes if disabled                                                // 6468\n\t\t\t */                                                                                                                 // 6469\n\t\t\t_fnSortingClasses( oSettings );                                                                                     // 6470\n\t\t\t                                                                                                                    // 6471\n\t\t\tif ( features.bSort )                                                                                               // 6472\n\t\t\t{                                                                                                                   // 6473\n\t\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', function () {                                                         // 6474\n\t\t\t\t\tif ( oSettings.bSorted ) {                                                                                        // 6475\n\t\t\t\t\t\tvar aSort = _fnSortFlatten( oSettings );                                                                         // 6476\n\t\t\t\t\t\tvar sortedColumns = {};                                                                                          // 6477\n\t\t\t                                                                                                                    // 6478\n\t\t\t\t\t\t$.each( aSort, function (i, val) {                                                                               // 6479\n\t\t\t\t\t\t\tsortedColumns[ val.src ] = val.dir;                                                                             // 6480\n\t\t\t\t\t\t} );                                                                                                             // 6481\n\t\t\t                                                                                                                    // 6482\n\t\t\t\t\t\t_fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );                                  // 6483\n\t\t\t\t\t\t_fnSortAria( oSettings );                                                                                        // 6484\n\t\t\t\t\t}                                                                                                                 // 6485\n\t\t\t\t} );                                                                                                               // 6486\n\t\t\t}                                                                                                                   // 6487\n\t\t\t                                                                                                                    // 6488\n\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', function () {                                                          // 6489\n\t\t\t\tif ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {                        // 6490\n\t\t\t\t\t_fnSortingClasses( oSettings );                                                                                   // 6491\n\t\t\t\t}                                                                                                                  // 6492\n\t\t\t}, 'sc' );                                                                                                          // 6493\n\t\t\t                                                                                                                    // 6494\n\t\t\t                                                                                                                    // 6495\n\t\t\t/*                                                                                                                  // 6496\n\t\t\t * Final init                                                                                                       // 6497\n\t\t\t * Cache the header, body and footer as required, creating them if needed                                           // 6498\n\t\t\t */                                                                                                                 // 6499\n\t\t\t                                                                                                                    // 6500\n\t\t\t/* Browser support detection */                                                                                     // 6501\n\t\t\t_fnBrowserDetect( oSettings );                                                                                      // 6502\n\t\t\t                                                                                                                    // 6503\n\t\t\t// Work around for Webkit bug 83867 - store the caption-side before removing from doc                               // 6504\n\t\t\tvar captions = $this.children('caption').each( function () {                                                        // 6505\n\t\t\t\tthis._captionSide = $this.css('caption-side');                                                                     // 6506\n\t\t\t} );                                                                                                                // 6507\n\t\t\t                                                                                                                    // 6508\n\t\t\tvar thead = $this.children('thead');                                                                                // 6509\n\t\t\tif ( thead.length === 0 )                                                                                           // 6510\n\t\t\t{                                                                                                                   // 6511\n\t\t\t\tthead = $('<thead/>').appendTo(this);                                                                              // 6512\n\t\t\t}                                                                                                                   // 6513\n\t\t\toSettings.nTHead = thead[0];                                                                                        // 6514\n\t\t\t                                                                                                                    // 6515\n\t\t\tvar tbody = $this.children('tbody');                                                                                // 6516\n\t\t\tif ( tbody.length === 0 )                                                                                           // 6517\n\t\t\t{                                                                                                                   // 6518\n\t\t\t\ttbody = $('<tbody/>').appendTo(this);                                                                              // 6519\n\t\t\t}                                                                                                                   // 6520\n\t\t\toSettings.nTBody = tbody[0];                                                                                        // 6521\n\t\t\t                                                                                                                    // 6522\n\t\t\tvar tfoot = $this.children('tfoot');                                                                                // 6523\n\t\t\tif ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\") )    // 6524\n\t\t\t{                                                                                                                   // 6525\n\t\t\t\t// If we are a scrolling table, and no footer has been given, then we need to create                               // 6526\n\t\t\t\t// a tfoot element for the caption element to be appended to                                                       // 6527\n\t\t\t\ttfoot = $('<tfoot/>').appendTo(this);                                                                              // 6528\n\t\t\t}                                                                                                                   // 6529\n\t\t\t                                                                                                                    // 6530\n\t\t\tif ( tfoot.length === 0 || tfoot.children().length === 0 ) {                                                        // 6531\n\t\t\t\t$this.addClass( oClasses.sNoFooter );                                                                              // 6532\n\t\t\t}                                                                                                                   // 6533\n\t\t\telse if ( tfoot.length > 0 ) {                                                                                      // 6534\n\t\t\t\toSettings.nTFoot = tfoot[0];                                                                                       // 6535\n\t\t\t\t_fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );                                                           // 6536\n\t\t\t}                                                                                                                   // 6537\n\t\t\t                                                                                                                    // 6538\n\t\t\t/* Check if there is data passing into the constructor */                                                           // 6539\n\t\t\tif ( oInit.aaData )                                                                                                 // 6540\n\t\t\t{                                                                                                                   // 6541\n\t\t\t\tfor ( i=0 ; i<oInit.aaData.length ; i++ )                                                                          // 6542\n\t\t\t\t{                                                                                                                  // 6543\n\t\t\t\t\t_fnAddData( oSettings, oInit.aaData[ i ] );                                                                       // 6544\n\t\t\t\t}                                                                                                                  // 6545\n\t\t\t}                                                                                                                   // 6546\n\t\t\telse if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' )                                          // 6547\n\t\t\t{                                                                                                                   // 6548\n\t\t\t\t/* Grab the data from the page - only do this when deferred loading or no Ajax                                     // 6549\n\t\t\t\t * source since there is no point in reading the DOM data if we are then going                                     // 6550\n\t\t\t\t * to replace it with Ajax data                                                                                    // 6551\n\t\t\t\t */                                                                                                                // 6552\n\t\t\t\t_fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );                                                         // 6553\n\t\t\t}                                                                                                                   // 6554\n\t\t\t                                                                                                                    // 6555\n\t\t\t/* Copy the data index array */                                                                                     // 6556\n\t\t\toSettings.aiDisplay = oSettings.aiDisplayMaster.slice();                                                            // 6557\n\t\t\t                                                                                                                    // 6558\n\t\t\t/* Initialisation complete - table can be drawn */                                                                  // 6559\n\t\t\toSettings.bInitialised = true;                                                                                      // 6560\n\t\t\t                                                                                                                    // 6561\n\t\t\t/* Check if we need to initialise the table (it might not have been handed off to the                               // 6562\n\t\t\t * language processor)                                                                                              // 6563\n\t\t\t */                                                                                                                 // 6564\n\t\t\tif ( bInitHandedOff === false )                                                                                     // 6565\n\t\t\t{                                                                                                                   // 6566\n\t\t\t\t_fnInitialise( oSettings );                                                                                        // 6567\n\t\t\t}                                                                                                                   // 6568\n\t\t} );                                                                                                                 // 6569\n\t\t_that = null;                                                                                                        // 6570\n\t\treturn this;                                                                                                         // 6571\n\t};                                                                                                                    // 6572\n                                                                                                                       // 6573\n\t                                                                                                                      // 6574\n\t                                                                                                                      // 6575\n\t/**                                                                                                                   // 6576\n\t * Computed structure of the DataTables API, defined by the options passed to                                         // 6577\n\t * `DataTable.Api.register()` when building the API.                                                                  // 6578\n\t *                                                                                                                    // 6579\n\t * The structure is built in order to speed creation and extension of the Api                                         // 6580\n\t * objects since the extensions are effectively pre-parsed.                                                           // 6581\n\t *                                                                                                                    // 6582\n\t * The array is an array of objects with the following structure, where this                                          // 6583\n\t * base array represents the Api prototype base:                                                                      // 6584\n\t *                                                                                                                    // 6585\n\t *     [                                                                                                              // 6586\n\t *       {                                                                                                            // 6587\n\t *         name:      'data'                -- string   - Property name                                               // 6588\n\t *         val:       function () {},       -- function - Api method (or undefined if just an object                  // 6589\n\t *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n\t *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property      // 6591\n\t *       },                                                                                                           // 6592\n\t *       {                                                                                                            // 6593\n\t *         name:     'row'                                                                                            // 6594\n\t *         val:       {},                                                                                             // 6595\n\t *         methodExt: [ ... ],                                                                                        // 6596\n\t *         propExt:   [                                                                                               // 6597\n\t *           {                                                                                                        // 6598\n\t *             name:      'data'                                                                                      // 6599\n\t *             val:       function () {},                                                                             // 6600\n\t *             methodExt: [ ... ],                                                                                    // 6601\n\t *             propExt:   [ ... ]                                                                                     // 6602\n\t *           },                                                                                                       // 6603\n\t *           ...                                                                                                      // 6604\n\t *         ]                                                                                                          // 6605\n\t *       }                                                                                                            // 6606\n\t *     ]                                                                                                              // 6607\n\t *                                                                                                                    // 6608\n\t * @type {Array}                                                                                                      // 6609\n\t * @ignore                                                                                                            // 6610\n\t */                                                                                                                   // 6611\n\tvar __apiStruct = [];                                                                                                 // 6612\n\t                                                                                                                      // 6613\n\t                                                                                                                      // 6614\n\t/**                                                                                                                   // 6615\n\t * `Array.prototype` reference.                                                                                       // 6616\n\t *                                                                                                                    // 6617\n\t * @type object                                                                                                       // 6618\n\t * @ignore                                                                                                            // 6619\n\t */                                                                                                                   // 6620\n\tvar __arrayProto = Array.prototype;                                                                                   // 6621\n\t                                                                                                                      // 6622\n\t                                                                                                                      // 6623\n\t/**                                                                                                                   // 6624\n\t * Abstraction for `context` parameter of the `Api` constructor to allow it to                                        // 6625\n\t * take several different forms for ease of use.                                                                      // 6626\n\t *                                                                                                                    // 6627\n\t * Each of the input parameter types will be converted to a DataTables settings                                       // 6628\n\t * object where possible.                                                                                             // 6629\n\t *                                                                                                                    // 6630\n\t * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one                                         // 6631\n\t *   of:                                                                                                              // 6632\n\t *                                                                                                                    // 6633\n\t *   * `string` - jQuery selector. Any DataTables' matching the given selector                                        // 6634\n\t *     with be found and used.                                                                                        // 6635\n\t *   * `node` - `TABLE` node which has already been formed into a DataTable.                                          // 6636\n\t *   * `jQuery` - A jQuery object of `TABLE` nodes.                                                                   // 6637\n\t *   * `object` - DataTables settings object                                                                          // 6638\n\t *   * `DataTables.Api` - API instance                                                                                // 6639\n\t * @return {array|null} Matching DataTables settings objects. `null` or                                               // 6640\n\t *   `undefined` is returned if no matching DataTable is found.                                                       // 6641\n\t * @ignore                                                                                                            // 6642\n\t */                                                                                                                   // 6643\n\tvar _toSettings = function ( mixed )                                                                                  // 6644\n\t{                                                                                                                     // 6645\n\t\tvar idx, jq;                                                                                                         // 6646\n\t\tvar settings = DataTable.settings;                                                                                   // 6647\n\t\tvar tables = $.map( settings, function (el, i) {                                                                     // 6648\n\t\t\treturn el.nTable;                                                                                                   // 6649\n\t\t} );                                                                                                                 // 6650\n\t                                                                                                                      // 6651\n\t\tif ( ! mixed ) {                                                                                                     // 6652\n\t\t\treturn [];                                                                                                          // 6653\n\t\t}                                                                                                                    // 6654\n\t\telse if ( mixed.nTable && mixed.oApi ) {                                                                             // 6655\n\t\t\t// DataTables settings object                                                                                       // 6656\n\t\t\treturn [ mixed ];                                                                                                   // 6657\n\t\t}                                                                                                                    // 6658\n\t\telse if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {                                             // 6659\n\t\t\t// Table node                                                                                                       // 6660\n\t\t\tidx = $.inArray( mixed, tables );                                                                                   // 6661\n\t\t\treturn idx !== -1 ? [ settings[idx] ] : null;                                                                       // 6662\n\t\t}                                                                                                                    // 6663\n\t\telse if ( mixed && typeof mixed.settings === 'function' ) {                                                          // 6664\n\t\t\treturn mixed.settings().toArray();                                                                                  // 6665\n\t\t}                                                                                                                    // 6666\n\t\telse if ( typeof mixed === 'string' ) {                                                                              // 6667\n\t\t\t// jQuery selector                                                                                                  // 6668\n\t\t\tjq = $(mixed);                                                                                                      // 6669\n\t\t}                                                                                                                    // 6670\n\t\telse if ( mixed instanceof $ ) {                                                                                     // 6671\n\t\t\t// jQuery object (also DataTables instance)                                                                         // 6672\n\t\t\tjq = mixed;                                                                                                         // 6673\n\t\t}                                                                                                                    // 6674\n\t                                                                                                                      // 6675\n\t\tif ( jq ) {                                                                                                          // 6676\n\t\t\treturn jq.map( function(i) {                                                                                        // 6677\n\t\t\t\tidx = $.inArray( this, tables );                                                                                   // 6678\n\t\t\t\treturn idx !== -1 ? settings[idx] : null;                                                                          // 6679\n\t\t\t} ).toArray();                                                                                                      // 6680\n\t\t}                                                                                                                    // 6681\n\t};                                                                                                                    // 6682\n\t                                                                                                                      // 6683\n\t                                                                                                                      // 6684\n\t/**                                                                                                                   // 6685\n\t * DataTables API class - used to control and interface with  one or more                                             // 6686\n\t * DataTables enhanced tables.                                                                                        // 6687\n\t *                                                                                                                    // 6688\n\t * The API class is heavily based on jQuery, presenting a chainable interface                                         // 6689\n\t * that you can use to interact with tables. Each instance of the API class has                                       // 6690\n\t * a \"context\" - i.e. the tables that it will operate on. This could be a single                                      // 6691\n\t * table, all tables on a page or a sub-set thereof.                                                                  // 6692\n\t *                                                                                                                    // 6693\n\t * Additionally the API is designed to allow you to easily work with the data in                                      // 6694\n\t * the tables, retrieving and manipulating it as required. This is done by                                            // 6695\n\t * presenting the API class as an array like interface. The contents of the                                           // 6696\n\t * array depend upon the actions requested by each method (for example                                                // 6697\n\t * `rows().nodes()` will return an array of nodes, while `rows().data()` will                                         // 6698\n\t * return an array of objects or arrays depending upon your table's                                                   // 6699\n\t * configuration). The API object has a number of array like methods (`push`,                                         // 6700\n\t * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,                                       // 6701\n\t * `unique` etc) to assist your working with the data held in a table.                                                // 6702\n\t *                                                                                                                    // 6703\n\t * Most methods (those which return an Api instance) are chainable, which means                                       // 6704\n\t * the return from a method call also has all of the methods available that the                                       // 6705\n\t * top level object had. For example, these two calls are equivalent:                                                 // 6706\n\t *                                                                                                                    // 6707\n\t *     // Not chained                                                                                                 // 6708\n\t *     api.row.add( {...} );                                                                                          // 6709\n\t *     api.draw();                                                                                                    // 6710\n\t *                                                                                                                    // 6711\n\t *     // Chained                                                                                                     // 6712\n\t *     api.row.add( {...} ).draw();                                                                                   // 6713\n\t *                                                                                                                    // 6714\n\t * @class DataTable.Api                                                                                               // 6715\n\t * @param {array|object|string|jQuery} context DataTable identifier. This is                                          // 6716\n\t *   used to define which DataTables enhanced tables this API will operate on.                                        // 6717\n\t *   Can be one of:                                                                                                   // 6718\n\t *                                                                                                                    // 6719\n\t *   * `string` - jQuery selector. Any DataTables' matching the given selector                                        // 6720\n\t *     with be found and used.                                                                                        // 6721\n\t *   * `node` - `TABLE` node which has already been formed into a DataTable.                                          // 6722\n\t *   * `jQuery` - A jQuery object of `TABLE` nodes.                                                                   // 6723\n\t *   * `object` - DataTables settings object                                                                          // 6724\n\t * @param {array} [data] Data to initialise the Api instance with.                                                    // 6725\n\t *                                                                                                                    // 6726\n\t * @example                                                                                                           // 6727\n\t *   // Direct initialisation during DataTables construction                                                          // 6728\n\t *   var api = $('#example').DataTable();                                                                             // 6729\n\t *                                                                                                                    // 6730\n\t * @example                                                                                                           // 6731\n\t *   // Initialisation using a DataTables jQuery object                                                               // 6732\n\t *   var api = $('#example').dataTable().api();                                                                       // 6733\n\t *                                                                                                                    // 6734\n\t * @example                                                                                                           // 6735\n\t *   // Initialisation as a constructor                                                                               // 6736\n\t *   var api = new $.fn.DataTable.Api( 'table.dataTable' );                                                           // 6737\n\t */                                                                                                                   // 6738\n\t_Api = function ( context, data )                                                                                     // 6739\n\t{                                                                                                                     // 6740\n\t\tif ( ! (this instanceof _Api) ) {                                                                                    // 6741\n\t\t\treturn new _Api( context, data );                                                                                   // 6742\n\t\t}                                                                                                                    // 6743\n\t                                                                                                                      // 6744\n\t\tvar settings = [];                                                                                                   // 6745\n\t\tvar ctxSettings = function ( o ) {                                                                                   // 6746\n\t\t\tvar a = _toSettings( o );                                                                                           // 6747\n\t\t\tif ( a ) {                                                                                                          // 6748\n\t\t\t\tsettings.push.apply( settings, a );                                                                                // 6749\n\t\t\t}                                                                                                                   // 6750\n\t\t};                                                                                                                   // 6751\n\t                                                                                                                      // 6752\n\t\tif ( $.isArray( context ) ) {                                                                                        // 6753\n\t\t\tfor ( var i=0, ien=context.length ; i<ien ; i++ ) {                                                                 // 6754\n\t\t\t\tctxSettings( context[i] );                                                                                         // 6755\n\t\t\t}                                                                                                                   // 6756\n\t\t}                                                                                                                    // 6757\n\t\telse {                                                                                                               // 6758\n\t\t\tctxSettings( context );                                                                                             // 6759\n\t\t}                                                                                                                    // 6760\n\t                                                                                                                      // 6761\n\t\t// Remove duplicates                                                                                                 // 6762\n\t\tthis.context = _unique( settings );                                                                                  // 6763\n\t                                                                                                                      // 6764\n\t\t// Initial data                                                                                                      // 6765\n\t\tif ( data ) {                                                                                                        // 6766\n\t\t\tthis.push.apply( this, data.toArray ? data.toArray() : data );                                                      // 6767\n\t\t}                                                                                                                    // 6768\n\t                                                                                                                      // 6769\n\t\t// selector                                                                                                          // 6770\n\t\tthis.selector = {                                                                                                    // 6771\n\t\t\trows: null,                                                                                                         // 6772\n\t\t\tcols: null,                                                                                                         // 6773\n\t\t\topts: null                                                                                                          // 6774\n\t\t};                                                                                                                   // 6775\n\t                                                                                                                      // 6776\n\t\t_Api.extend( this, this, __apiStruct );                                                                              // 6777\n\t};                                                                                                                    // 6778\n\t                                                                                                                      // 6779\n\tDataTable.Api = _Api;                                                                                                 // 6780\n\t                                                                                                                      // 6781\n\t_Api.prototype = /** @lends DataTables.Api */{                                                                        // 6782\n\t\tany: function ()                                                                                                     // 6783\n\t\t{                                                                                                                    // 6784\n\t\t\treturn this.flatten().length !== 0;                                                                                 // 6785\n\t\t},                                                                                                                   // 6786\n\t                                                                                                                      // 6787\n\t                                                                                                                      // 6788\n\t\tconcat:  __arrayProto.concat,                                                                                        // 6789\n\t                                                                                                                      // 6790\n\t                                                                                                                      // 6791\n\t\tcontext: [], // array of table settings objects                                                                      // 6792\n\t                                                                                                                      // 6793\n\t                                                                                                                      // 6794\n\t\teach: function ( fn )                                                                                                // 6795\n\t\t{                                                                                                                    // 6796\n\t\t\tfor ( var i=0, ien=this.length ; i<ien; i++ ) {                                                                     // 6797\n\t\t\t\tfn.call( this, this[i], i, this );                                                                                 // 6798\n\t\t\t}                                                                                                                   // 6799\n\t                                                                                                                      // 6800\n\t\t\treturn this;                                                                                                        // 6801\n\t\t},                                                                                                                   // 6802\n\t                                                                                                                      // 6803\n\t                                                                                                                      // 6804\n\t\teq: function ( idx )                                                                                                 // 6805\n\t\t{                                                                                                                    // 6806\n\t\t\tvar ctx = this.context;                                                                                             // 6807\n\t                                                                                                                      // 6808\n\t\t\treturn ctx.length > idx ?                                                                                           // 6809\n\t\t\t\tnew _Api( ctx[idx], this[idx] ) :                                                                                  // 6810\n\t\t\t\tnull;                                                                                                              // 6811\n\t\t},                                                                                                                   // 6812\n\t                                                                                                                      // 6813\n\t                                                                                                                      // 6814\n\t\tfilter: function ( fn )                                                                                              // 6815\n\t\t{                                                                                                                    // 6816\n\t\t\tvar a = [];                                                                                                         // 6817\n\t                                                                                                                      // 6818\n\t\t\tif ( __arrayProto.filter ) {                                                                                        // 6819\n\t\t\t\ta = __arrayProto.filter.call( this, fn, this );                                                                    // 6820\n\t\t\t}                                                                                                                   // 6821\n\t\t\telse {                                                                                                              // 6822\n\t\t\t\t// Compatibility for browsers without EMCA-252-5 (JS 1.6)                                                          // 6823\n\t\t\t\tfor ( var i=0, ien=this.length ; i<ien ; i++ ) {                                                                   // 6824\n\t\t\t\t\tif ( fn.call( this, this[i], i, this ) ) {                                                                        // 6825\n\t\t\t\t\t\ta.push( this[i] );                                                                                               // 6826\n\t\t\t\t\t}                                                                                                                 // 6827\n\t\t\t\t}                                                                                                                  // 6828\n\t\t\t}                                                                                                                   // 6829\n\t                                                                                                                      // 6830\n\t\t\treturn new _Api( this.context, a );                                                                                 // 6831\n\t\t},                                                                                                                   // 6832\n\t                                                                                                                      // 6833\n\t                                                                                                                      // 6834\n\t\tflatten: function ()                                                                                                 // 6835\n\t\t{                                                                                                                    // 6836\n\t\t\tvar a = [];                                                                                                         // 6837\n\t\t\treturn new _Api( this.context, a.concat.apply( a, this.toArray() ) );                                               // 6838\n\t\t},                                                                                                                   // 6839\n\t                                                                                                                      // 6840\n\t                                                                                                                      // 6841\n\t\tjoin:    __arrayProto.join,                                                                                          // 6842\n\t                                                                                                                      // 6843\n\t                                                                                                                      // 6844\n\t\tindexOf: __arrayProto.indexOf || function (obj, start)                                                               // 6845\n\t\t{                                                                                                                    // 6846\n\t\t\tfor ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {                                                         // 6847\n\t\t\t\tif ( this[i] === obj ) {                                                                                           // 6848\n\t\t\t\t\treturn i;                                                                                                         // 6849\n\t\t\t\t}                                                                                                                  // 6850\n\t\t\t}                                                                                                                   // 6851\n\t\t\treturn -1;                                                                                                          // 6852\n\t\t},                                                                                                                   // 6853\n\t                                                                                                                      // 6854\n\t\titerator: function ( flatten, type, fn, alwaysNew ) {                                                                // 6855\n\t\t\tvar                                                                                                                 // 6856\n\t\t\t\ta = [], ret,                                                                                                       // 6857\n\t\t\t\ti, ien, j, jen,                                                                                                    // 6858\n\t\t\t\tcontext = this.context,                                                                                            // 6859\n\t\t\t\trows, items, item,                                                                                                 // 6860\n\t\t\t\tselector = this.selector;                                                                                          // 6861\n\t                                                                                                                      // 6862\n\t\t\t// Argument shifting                                                                                                // 6863\n\t\t\tif ( typeof flatten === 'string' ) {                                                                                // 6864\n\t\t\t\talwaysNew = fn;                                                                                                    // 6865\n\t\t\t\tfn = type;                                                                                                         // 6866\n\t\t\t\ttype = flatten;                                                                                                    // 6867\n\t\t\t\tflatten = false;                                                                                                   // 6868\n\t\t\t}                                                                                                                   // 6869\n\t                                                                                                                      // 6870\n\t\t\tfor ( i=0, ien=context.length ; i<ien ; i++ ) {                                                                     // 6871\n\t\t\t\tvar apiInst = new _Api( context[i] );                                                                              // 6872\n\t                                                                                                                      // 6873\n\t\t\t\tif ( type === 'table' ) {                                                                                          // 6874\n\t\t\t\t\tret = fn.call( apiInst, context[i], i );                                                                          // 6875\n\t                                                                                                                      // 6876\n\t\t\t\t\tif ( ret !== undefined ) {                                                                                        // 6877\n\t\t\t\t\t\ta.push( ret );                                                                                                   // 6878\n\t\t\t\t\t}                                                                                                                 // 6879\n\t\t\t\t}                                                                                                                  // 6880\n\t\t\t\telse if ( type === 'columns' || type === 'rows' ) {                                                                // 6881\n\t\t\t\t\t// this has same length as context - one entry for each table                                                     // 6882\n\t\t\t\t\tret = fn.call( apiInst, context[i], this[i], i );                                                                 // 6883\n\t                                                                                                                      // 6884\n\t\t\t\t\tif ( ret !== undefined ) {                                                                                        // 6885\n\t\t\t\t\t\ta.push( ret );                                                                                                   // 6886\n\t\t\t\t\t}                                                                                                                 // 6887\n\t\t\t\t}                                                                                                                  // 6888\n\t\t\t\telse if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {                     // 6889\n\t\t\t\t\t// columns and rows share the same structure.                                                                     // 6890\n\t\t\t\t\t// 'this' is an array of column indexes for each context                                                          // 6891\n\t\t\t\t\titems = this[i];                                                                                                  // 6892\n\t                                                                                                                      // 6893\n\t\t\t\t\tif ( type === 'column-rows' ) {                                                                                   // 6894\n\t\t\t\t\t\trows = _selector_row_indexes( context[i], selector.opts );                                                       // 6895\n\t\t\t\t\t}                                                                                                                 // 6896\n\t                                                                                                                      // 6897\n\t\t\t\t\tfor ( j=0, jen=items.length ; j<jen ; j++ ) {                                                                     // 6898\n\t\t\t\t\t\titem = items[j];                                                                                                 // 6899\n\t                                                                                                                      // 6900\n\t\t\t\t\t\tif ( type === 'cell' ) {                                                                                         // 6901\n\t\t\t\t\t\t\tret = fn.call( apiInst, context[i], item.row, item.column, i, j );                                              // 6902\n\t\t\t\t\t\t}                                                                                                                // 6903\n\t\t\t\t\t\telse {                                                                                                           // 6904\n\t\t\t\t\t\t\tret = fn.call( apiInst, context[i], item, i, j, rows );                                                         // 6905\n\t\t\t\t\t\t}                                                                                                                // 6906\n\t                                                                                                                      // 6907\n\t\t\t\t\t\tif ( ret !== undefined ) {                                                                                       // 6908\n\t\t\t\t\t\t\ta.push( ret );                                                                                                  // 6909\n\t\t\t\t\t\t}                                                                                                                // 6910\n\t\t\t\t\t}                                                                                                                 // 6911\n\t\t\t\t}                                                                                                                  // 6912\n\t\t\t}                                                                                                                   // 6913\n\t                                                                                                                      // 6914\n\t\t\tif ( a.length || alwaysNew ) {                                                                                      // 6915\n\t\t\t\tvar api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );                                              // 6916\n\t\t\t\tvar apiSelector = api.selector;                                                                                    // 6917\n\t\t\t\tapiSelector.rows = selector.rows;                                                                                  // 6918\n\t\t\t\tapiSelector.cols = selector.cols;                                                                                  // 6919\n\t\t\t\tapiSelector.opts = selector.opts;                                                                                  // 6920\n\t\t\t\treturn api;                                                                                                        // 6921\n\t\t\t}                                                                                                                   // 6922\n\t\t\treturn this;                                                                                                        // 6923\n\t\t},                                                                                                                   // 6924\n\t                                                                                                                      // 6925\n\t                                                                                                                      // 6926\n\t\tlastIndexOf: __arrayProto.lastIndexOf || function (obj, start)                                                       // 6927\n\t\t{                                                                                                                    // 6928\n\t\t\t// Bit cheeky...                                                                                                    // 6929\n\t\t\treturn this.indexOf.apply( this.toArray.reverse(), arguments );                                                     // 6930\n\t\t},                                                                                                                   // 6931\n\t                                                                                                                      // 6932\n\t                                                                                                                      // 6933\n\t\tlength:  0,                                                                                                          // 6934\n\t                                                                                                                      // 6935\n\t                                                                                                                      // 6936\n\t\tmap: function ( fn )                                                                                                 // 6937\n\t\t{                                                                                                                    // 6938\n\t\t\tvar a = [];                                                                                                         // 6939\n\t                                                                                                                      // 6940\n\t\t\tif ( __arrayProto.map ) {                                                                                           // 6941\n\t\t\t\ta = __arrayProto.map.call( this, fn, this );                                                                       // 6942\n\t\t\t}                                                                                                                   // 6943\n\t\t\telse {                                                                                                              // 6944\n\t\t\t\t// Compatibility for browsers without EMCA-252-5 (JS 1.6)                                                          // 6945\n\t\t\t\tfor ( var i=0, ien=this.length ; i<ien ; i++ ) {                                                                   // 6946\n\t\t\t\t\ta.push( fn.call( this, this[i], i ) );                                                                            // 6947\n\t\t\t\t}                                                                                                                  // 6948\n\t\t\t}                                                                                                                   // 6949\n\t                                                                                                                      // 6950\n\t\t\treturn new _Api( this.context, a );                                                                                 // 6951\n\t\t},                                                                                                                   // 6952\n\t                                                                                                                      // 6953\n\t                                                                                                                      // 6954\n\t\tpluck: function ( prop )                                                                                             // 6955\n\t\t{                                                                                                                    // 6956\n\t\t\treturn this.map( function ( el ) {                                                                                  // 6957\n\t\t\t\treturn el[ prop ];                                                                                                 // 6958\n\t\t\t} );                                                                                                                // 6959\n\t\t},                                                                                                                   // 6960\n\t                                                                                                                      // 6961\n\t\tpop:     __arrayProto.pop,                                                                                           // 6962\n\t                                                                                                                      // 6963\n\t                                                                                                                      // 6964\n\t\tpush:    __arrayProto.push,                                                                                          // 6965\n\t                                                                                                                      // 6966\n\t                                                                                                                      // 6967\n\t\t// Does not return an API instance                                                                                   // 6968\n\t\treduce: __arrayProto.reduce || function ( fn, init )                                                                 // 6969\n\t\t{                                                                                                                    // 6970\n\t\t\treturn _fnReduce( this, fn, init, 0, this.length, 1 );                                                              // 6971\n\t\t},                                                                                                                   // 6972\n\t                                                                                                                      // 6973\n\t                                                                                                                      // 6974\n\t\treduceRight: __arrayProto.reduceRight || function ( fn, init )                                                       // 6975\n\t\t{                                                                                                                    // 6976\n\t\t\treturn _fnReduce( this, fn, init, this.length-1, -1, -1 );                                                          // 6977\n\t\t},                                                                                                                   // 6978\n\t                                                                                                                      // 6979\n\t                                                                                                                      // 6980\n\t\treverse: __arrayProto.reverse,                                                                                       // 6981\n\t                                                                                                                      // 6982\n\t                                                                                                                      // 6983\n\t\t// Object with rows, columns and opts                                                                                // 6984\n\t\tselector: null,                                                                                                      // 6985\n\t                                                                                                                      // 6986\n\t                                                                                                                      // 6987\n\t\tshift:   __arrayProto.shift,                                                                                         // 6988\n\t                                                                                                                      // 6989\n\t                                                                                                                      // 6990\n\t\tsort:    __arrayProto.sort, // ? name - order?                                                                       // 6991\n\t                                                                                                                      // 6992\n\t                                                                                                                      // 6993\n\t\tsplice:  __arrayProto.splice,                                                                                        // 6994\n\t                                                                                                                      // 6995\n\t                                                                                                                      // 6996\n\t\ttoArray: function ()                                                                                                 // 6997\n\t\t{                                                                                                                    // 6998\n\t\t\treturn __arrayProto.slice.call( this );                                                                             // 6999\n\t\t},                                                                                                                   // 7000\n\t                                                                                                                      // 7001\n\t                                                                                                                      // 7002\n\t\tto$: function ()                                                                                                     // 7003\n\t\t{                                                                                                                    // 7004\n\t\t\treturn $( this );                                                                                                   // 7005\n\t\t},                                                                                                                   // 7006\n\t                                                                                                                      // 7007\n\t                                                                                                                      // 7008\n\t\ttoJQuery: function ()                                                                                                // 7009\n\t\t{                                                                                                                    // 7010\n\t\t\treturn $( this );                                                                                                   // 7011\n\t\t},                                                                                                                   // 7012\n\t                                                                                                                      // 7013\n\t                                                                                                                      // 7014\n\t\tunique: function ()                                                                                                  // 7015\n\t\t{                                                                                                                    // 7016\n\t\t\treturn new _Api( this.context, _unique(this) );                                                                     // 7017\n\t\t},                                                                                                                   // 7018\n\t                                                                                                                      // 7019\n\t                                                                                                                      // 7020\n\t\tunshift: __arrayProto.unshift                                                                                        // 7021\n\t};                                                                                                                    // 7022\n\t                                                                                                                      // 7023\n\t                                                                                                                      // 7024\n\t_Api.extend = function ( scope, obj, ext )                                                                            // 7025\n\t{                                                                                                                     // 7026\n\t\t// Only extend API instances and static properties of the API                                                        // 7027\n\t\tif ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {                                  // 7028\n\t\t\treturn;                                                                                                             // 7029\n\t\t}                                                                                                                    // 7030\n\t                                                                                                                      // 7031\n\t\tvar                                                                                                                  // 7032\n\t\t\ti, ien,                                                                                                             // 7033\n\t\t\tj, jen,                                                                                                             // 7034\n\t\t\tstruct, inner,                                                                                                      // 7035\n\t\t\tmethodScoping = function ( scope, fn, struc ) {                                                                     // 7036\n\t\t\t\treturn function () {                                                                                               // 7037\n\t\t\t\t\tvar ret = fn.apply( scope, arguments );                                                                           // 7038\n\t                                                                                                                      // 7039\n\t\t\t\t\t// Method extension                                                                                               // 7040\n\t\t\t\t\t_Api.extend( ret, ret, struc.methodExt );                                                                         // 7041\n\t\t\t\t\treturn ret;                                                                                                       // 7042\n\t\t\t\t};                                                                                                                 // 7043\n\t\t\t};                                                                                                                  // 7044\n\t                                                                                                                      // 7045\n\t\tfor ( i=0, ien=ext.length ; i<ien ; i++ ) {                                                                          // 7046\n\t\t\tstruct = ext[i];                                                                                                    // 7047\n\t                                                                                                                      // 7048\n\t\t\t// Value                                                                                                            // 7049\n\t\t\tobj[ struct.name ] = typeof struct.val === 'function' ?                                                             // 7050\n\t\t\t\tmethodScoping( scope, struct.val, struct ) :                                                                       // 7051\n\t\t\t\t$.isPlainObject( struct.val ) ?                                                                                    // 7052\n\t\t\t\t\t{} :                                                                                                              // 7053\n\t\t\t\t\tstruct.val;                                                                                                       // 7054\n\t                                                                                                                      // 7055\n\t\t\tobj[ struct.name ].__dt_wrapper = true;                                                                             // 7056\n\t                                                                                                                      // 7057\n\t\t\t// Property extension                                                                                               // 7058\n\t\t\t_Api.extend( scope, obj[ struct.name ], struct.propExt );                                                           // 7059\n\t\t}                                                                                                                    // 7060\n\t};                                                                                                                    // 7061\n\t                                                                                                                      // 7062\n\t                                                                                                                      // 7063\n\t// @todo - Is there need for an augment function?                                                                     // 7064\n\t// _Api.augment = function ( inst, name )                                                                             // 7065\n\t// {                                                                                                                  // 7066\n\t// \t// Find src object in the structure from the name                                                                 // 7067\n\t// \tvar parts = name.split('.');                                                                                      // 7068\n\t                                                                                                                      // 7069\n\t// \t_Api.extend( inst, obj );                                                                                         // 7070\n\t// };                                                                                                                 // 7071\n\t                                                                                                                      // 7072\n\t                                                                                                                      // 7073\n\t//     [                                                                                                              // 7074\n\t//       {                                                                                                            // 7075\n\t//         name:      'data'                -- string   - Property name                                               // 7076\n\t//         val:       function () {},       -- function - Api method (or undefined if just an object                  // 7077\n\t//         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n\t//         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property      // 7079\n\t//       },                                                                                                           // 7080\n\t//       {                                                                                                            // 7081\n\t//         name:     'row'                                                                                            // 7082\n\t//         val:       {},                                                                                             // 7083\n\t//         methodExt: [ ... ],                                                                                        // 7084\n\t//         propExt:   [                                                                                               // 7085\n\t//           {                                                                                                        // 7086\n\t//             name:      'data'                                                                                      // 7087\n\t//             val:       function () {},                                                                             // 7088\n\t//             methodExt: [ ... ],                                                                                    // 7089\n\t//             propExt:   [ ... ]                                                                                     // 7090\n\t//           },                                                                                                       // 7091\n\t//           ...                                                                                                      // 7092\n\t//         ]                                                                                                          // 7093\n\t//       }                                                                                                            // 7094\n\t//     ]                                                                                                              // 7095\n\t                                                                                                                      // 7096\n\t_Api.register = _api_register = function ( name, val )                                                                // 7097\n\t{                                                                                                                     // 7098\n\t\tif ( $.isArray( name ) ) {                                                                                           // 7099\n\t\t\tfor ( var j=0, jen=name.length ; j<jen ; j++ ) {                                                                    // 7100\n\t\t\t\t_Api.register( name[j], val );                                                                                     // 7101\n\t\t\t}                                                                                                                   // 7102\n\t\t\treturn;                                                                                                             // 7103\n\t\t}                                                                                                                    // 7104\n\t                                                                                                                      // 7105\n\t\tvar                                                                                                                  // 7106\n\t\t\ti, ien,                                                                                                             // 7107\n\t\t\their = name.split('.'),                                                                                             // 7108\n\t\t\tstruct = __apiStruct,                                                                                               // 7109\n\t\t\tkey, method;                                                                                                        // 7110\n\t                                                                                                                      // 7111\n\t\tvar find = function ( src, name ) {                                                                                  // 7112\n\t\t\tfor ( var i=0, ien=src.length ; i<ien ; i++ ) {                                                                     // 7113\n\t\t\t\tif ( src[i].name === name ) {                                                                                      // 7114\n\t\t\t\t\treturn src[i];                                                                                                    // 7115\n\t\t\t\t}                                                                                                                  // 7116\n\t\t\t}                                                                                                                   // 7117\n\t\t\treturn null;                                                                                                        // 7118\n\t\t};                                                                                                                   // 7119\n\t                                                                                                                      // 7120\n\t\tfor ( i=0, ien=heir.length ; i<ien ; i++ ) {                                                                         // 7121\n\t\t\tmethod = heir[i].indexOf('()') !== -1;                                                                              // 7122\n\t\t\tkey = method ?                                                                                                      // 7123\n\t\t\t\their[i].replace('()', '') :                                                                                        // 7124\n\t\t\t\their[i];                                                                                                           // 7125\n\t                                                                                                                      // 7126\n\t\t\tvar src = find( struct, key );                                                                                      // 7127\n\t\t\tif ( ! src ) {                                                                                                      // 7128\n\t\t\t\tsrc = {                                                                                                            // 7129\n\t\t\t\t\tname:      key,                                                                                                   // 7130\n\t\t\t\t\tval:       {},                                                                                                    // 7131\n\t\t\t\t\tmethodExt: [],                                                                                                    // 7132\n\t\t\t\t\tpropExt:   []                                                                                                     // 7133\n\t\t\t\t};                                                                                                                 // 7134\n\t\t\t\tstruct.push( src );                                                                                                // 7135\n\t\t\t}                                                                                                                   // 7136\n\t                                                                                                                      // 7137\n\t\t\tif ( i === ien-1 ) {                                                                                                // 7138\n\t\t\t\tsrc.val = val;                                                                                                     // 7139\n\t\t\t}                                                                                                                   // 7140\n\t\t\telse {                                                                                                              // 7141\n\t\t\t\tstruct = method ?                                                                                                  // 7142\n\t\t\t\t\tsrc.methodExt :                                                                                                   // 7143\n\t\t\t\t\tsrc.propExt;                                                                                                      // 7144\n\t\t\t}                                                                                                                   // 7145\n\t\t}                                                                                                                    // 7146\n\t};                                                                                                                    // 7147\n\t                                                                                                                      // 7148\n\t                                                                                                                      // 7149\n\t_Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {                              // 7150\n\t\t_Api.register( pluralName, val );                                                                                    // 7151\n\t                                                                                                                      // 7152\n\t\t_Api.register( singularName, function () {                                                                           // 7153\n\t\t\tvar ret = val.apply( this, arguments );                                                                             // 7154\n\t                                                                                                                      // 7155\n\t\t\tif ( ret === this ) {                                                                                               // 7156\n\t\t\t\t// Returned item is the API instance that was passed in, return it                                                 // 7157\n\t\t\t\treturn this;                                                                                                       // 7158\n\t\t\t}                                                                                                                   // 7159\n\t\t\telse if ( ret instanceof _Api ) {                                                                                   // 7160\n\t\t\t\t// New API instance returned, want the value from the first item                                                   // 7161\n\t\t\t\t// in the returned array for the singular result.                                                                  // 7162\n\t\t\t\treturn ret.length ?                                                                                                // 7163\n\t\t\t\t\t$.isArray( ret[0] ) ?                                                                                             // 7164\n\t\t\t\t\t\tnew _Api( ret.context, ret[0] ) : // Array results are 'enhanced'                                                // 7165\n\t\t\t\t\t\tret[0] :                                                                                                         // 7166\n\t\t\t\t\tundefined;                                                                                                        // 7167\n\t\t\t}                                                                                                                   // 7168\n\t                                                                                                                      // 7169\n\t\t\t// Non-API return - just fire it back                                                                               // 7170\n\t\t\treturn ret;                                                                                                         // 7171\n\t\t} );                                                                                                                 // 7172\n\t};                                                                                                                    // 7173\n\t                                                                                                                      // 7174\n\t                                                                                                                      // 7175\n\t/**                                                                                                                   // 7176\n\t * Selector for HTML tables. Apply the given selector to the give array of                                            // 7177\n\t * DataTables settings objects.                                                                                       // 7178\n\t *                                                                                                                    // 7179\n\t * @param {string|integer} [selector] jQuery selector string or integer                                               // 7180\n\t * @param  {array} Array of DataTables settings objects to be filtered                                                // 7181\n\t * @return {array}                                                                                                    // 7182\n\t * @ignore                                                                                                            // 7183\n\t */                                                                                                                   // 7184\n\tvar __table_selector = function ( selector, a )                                                                       // 7185\n\t{                                                                                                                     // 7186\n\t\t// Integer is used to pick out a table by index                                                                      // 7187\n\t\tif ( typeof selector === 'number' ) {                                                                                // 7188\n\t\t\treturn [ a[ selector ] ];                                                                                           // 7189\n\t\t}                                                                                                                    // 7190\n\t                                                                                                                      // 7191\n\t\t// Perform a jQuery selector on the table nodes                                                                      // 7192\n\t\tvar nodes = $.map( a, function (el, i) {                                                                             // 7193\n\t\t\treturn el.nTable;                                                                                                   // 7194\n\t\t} );                                                                                                                 // 7195\n\t                                                                                                                      // 7196\n\t\treturn $(nodes)                                                                                                      // 7197\n\t\t\t.filter( selector )                                                                                                 // 7198\n\t\t\t.map( function (i) {                                                                                                // 7199\n\t\t\t\t// Need to translate back from the table node to the settings                                                      // 7200\n\t\t\t\tvar idx = $.inArray( this, nodes );                                                                                // 7201\n\t\t\t\treturn a[ idx ];                                                                                                   // 7202\n\t\t\t} )                                                                                                                 // 7203\n\t\t\t.toArray();                                                                                                         // 7204\n\t};                                                                                                                    // 7205\n\t                                                                                                                      // 7206\n\t                                                                                                                      // 7207\n\t                                                                                                                      // 7208\n\t/**                                                                                                                   // 7209\n\t * Context selector for the API's context (i.e. the tables the API instance                                           // 7210\n\t * refers to.                                                                                                         // 7211\n\t *                                                                                                                    // 7212\n\t * @name    DataTable.Api#tables                                                                                      // 7213\n\t * @param {string|integer} [selector] Selector to pick which tables the iterator                                      // 7214\n\t *   should operate on. If not given, all tables in the current context are                                           // 7215\n\t *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to                                         // 7216\n\t *   select multiple tables or as an integer to select a single table.                                                // 7217\n\t * @returns {DataTable.Api} Returns a new API instance if a selector is given.                                        // 7218\n\t */                                                                                                                   // 7219\n\t_api_register( 'tables()', function ( selector ) {                                                                    // 7220\n\t\t// A new instance is created if there was a selector specified                                                       // 7221\n\t\treturn selector ?                                                                                                    // 7222\n\t\t\tnew _Api( __table_selector( selector, this.context ) ) :                                                            // 7223\n\t\t\tthis;                                                                                                               // 7224\n\t} );                                                                                                                  // 7225\n\t                                                                                                                      // 7226\n\t                                                                                                                      // 7227\n\t_api_register( 'table()', function ( selector ) {                                                                     // 7228\n\t\tvar tables = this.tables( selector );                                                                                // 7229\n\t\tvar ctx = tables.context;                                                                                            // 7230\n\t                                                                                                                      // 7231\n\t\t// Truncate to the first matched table                                                                               // 7232\n\t\treturn ctx.length ?                                                                                                  // 7233\n\t\t\tnew _Api( ctx[0] ) :                                                                                                // 7234\n\t\t\ttables;                                                                                                             // 7235\n\t} );                                                                                                                  // 7236\n\t                                                                                                                      // 7237\n\t                                                                                                                      // 7238\n\t_api_registerPlural( 'tables().nodes()', 'table().node()' , function () {                                             // 7239\n\t\treturn this.iterator( 'table', function ( ctx ) {                                                                    // 7240\n\t\t\treturn ctx.nTable;                                                                                                  // 7241\n\t\t}, 1 );                                                                                                              // 7242\n\t} );                                                                                                                  // 7243\n\t                                                                                                                      // 7244\n\t                                                                                                                      // 7245\n\t_api_registerPlural( 'tables().body()', 'table().body()' , function () {                                              // 7246\n\t\treturn this.iterator( 'table', function ( ctx ) {                                                                    // 7247\n\t\t\treturn ctx.nTBody;                                                                                                  // 7248\n\t\t}, 1 );                                                                                                              // 7249\n\t} );                                                                                                                  // 7250\n\t                                                                                                                      // 7251\n\t                                                                                                                      // 7252\n\t_api_registerPlural( 'tables().header()', 'table().header()' , function () {                                          // 7253\n\t\treturn this.iterator( 'table', function ( ctx ) {                                                                    // 7254\n\t\t\treturn ctx.nTHead;                                                                                                  // 7255\n\t\t}, 1 );                                                                                                              // 7256\n\t} );                                                                                                                  // 7257\n\t                                                                                                                      // 7258\n\t                                                                                                                      // 7259\n\t_api_registerPlural( 'tables().footer()', 'table().footer()' , function () {                                          // 7260\n\t\treturn this.iterator( 'table', function ( ctx ) {                                                                    // 7261\n\t\t\treturn ctx.nTFoot;                                                                                                  // 7262\n\t\t}, 1 );                                                                                                              // 7263\n\t} );                                                                                                                  // 7264\n\t                                                                                                                      // 7265\n\t                                                                                                                      // 7266\n\t_api_registerPlural( 'tables().containers()', 'table().container()' , function () {                                   // 7267\n\t\treturn this.iterator( 'table', function ( ctx ) {                                                                    // 7268\n\t\t\treturn ctx.nTableWrapper;                                                                                           // 7269\n\t\t}, 1 );                                                                                                              // 7270\n\t} );                                                                                                                  // 7271\n\t                                                                                                                      // 7272\n\t                                                                                                                      // 7273\n\t                                                                                                                      // 7274\n\t/**                                                                                                                   // 7275\n\t * Redraw the tables in the current context.                                                                          // 7276\n\t *                                                                                                                    // 7277\n\t * @param {boolean} [reset=true] Reset (default) or hold the current paging                                           // 7278\n\t *   position. A full re-sort and re-filter is performed when this method is                                          // 7279\n\t *   called, which is why the pagination reset is the default action.                                                 // 7280\n\t * @returns {DataTables.Api} this                                                                                     // 7281\n\t */                                                                                                                   // 7282\n\t_api_register( 'draw()', function ( resetPaging ) {                                                                   // 7283\n\t\treturn this.iterator( 'table', function ( settings ) {                                                               // 7284\n\t\t\t_fnReDraw( settings, resetPaging===false );                                                                         // 7285\n\t\t} );                                                                                                                 // 7286\n\t} );                                                                                                                  // 7287\n\t                                                                                                                      // 7288\n\t                                                                                                                      // 7289\n\t                                                                                                                      // 7290\n\t/**                                                                                                                   // 7291\n\t * Get the current page index.                                                                                        // 7292\n\t *                                                                                                                    // 7293\n\t * @return {integer} Current page index (zero based)                                                                  // 7294\n\t *//**                                                                                                                // 7295\n\t * Set the current page.                                                                                              // 7296\n\t *                                                                                                                    // 7297\n\t * Note that if you attempt to show a page which does not exist, DataTables will                                      // 7298\n\t * not throw an error, but rather reset the paging.                                                                   // 7299\n\t *                                                                                                                    // 7300\n\t * @param {integer|string} action The paging action to take. This can be one of:                                      // 7301\n\t *  * `integer` - The page index to jump to                                                                           // 7302\n\t *  * `string` - An action to take:                                                                                   // 7303\n\t *    * `first` - Jump to first page.                                                                                 // 7304\n\t *    * `next` - Jump to the next page                                                                                // 7305\n\t *    * `previous` - Jump to previous page                                                                            // 7306\n\t *    * `last` - Jump to the last page.                                                                               // 7307\n\t * @returns {DataTables.Api} this                                                                                     // 7308\n\t */                                                                                                                   // 7309\n\t_api_register( 'page()', function ( action ) {                                                                        // 7310\n\t\tif ( action === undefined ) {                                                                                        // 7311\n\t\t\treturn this.page.info().page; // not an expensive call                                                              // 7312\n\t\t}                                                                                                                    // 7313\n\t                                                                                                                      // 7314\n\t\t// else, have an action to take on all tables                                                                        // 7315\n\t\treturn this.iterator( 'table', function ( settings ) {                                                               // 7316\n\t\t\t_fnPageChange( settings, action );                                                                                  // 7317\n\t\t} );                                                                                                                 // 7318\n\t} );                                                                                                                  // 7319\n\t                                                                                                                      // 7320\n\t                                                                                                                      // 7321\n\t/**                                                                                                                   // 7322\n\t * Paging information for the first table in the current context.                                                     // 7323\n\t *                                                                                                                    // 7324\n\t * If you require paging information for another table, use the `table()` method                                      // 7325\n\t * with a suitable selector.                                                                                          // 7326\n\t *                                                                                                                    // 7327\n\t * @return {object} Object with the following properties set:                                                         // 7328\n\t *  * `page` - Current page index (zero based - i.e. the first page is `0`)                                           // 7329\n\t *  * `pages` - Total number of pages                                                                                 // 7330\n\t *  * `start` - Display index for the first record shown on the current page                                          // 7331\n\t *  * `end` - Display index for the last record shown on the current page                                             // 7332\n\t *  * `length` - Display length (number of records). Note that generally `start                                       // 7333\n\t *    + length = end`, but this is not always true, for example if there are                                          // 7334\n\t *    only 2 records to show on the final page, with a length of 10.                                                  // 7335\n\t *  * `recordsTotal` - Full data set length                                                                           // 7336\n\t *  * `recordsDisplay` - Data set length once the current filtering criterion                                         // 7337\n\t *    are applied.                                                                                                    // 7338\n\t */                                                                                                                   // 7339\n\t_api_register( 'page.info()', function ( action ) {                                                                   // 7340\n\t\tif ( this.context.length === 0 ) {                                                                                   // 7341\n\t\t\treturn undefined;                                                                                                   // 7342\n\t\t}                                                                                                                    // 7343\n\t                                                                                                                      // 7344\n\t\tvar                                                                                                                  // 7345\n\t\t\tsettings   = this.context[0],                                                                                       // 7346\n\t\t\tstart      = settings._iDisplayStart,                                                                               // 7347\n\t\t\tlen        = settings._iDisplayLength,                                                                              // 7348\n\t\t\tvisRecords = settings.fnRecordsDisplay(),                                                                           // 7349\n\t\t\tall        = len === -1;                                                                                            // 7350\n\t                                                                                                                      // 7351\n\t\treturn {                                                                                                             // 7352\n\t\t\t\"page\":           all ? 0 : Math.floor( start / len ),                                                              // 7353\n\t\t\t\"pages\":          all ? 1 : Math.ceil( visRecords / len ),                                                          // 7354\n\t\t\t\"start\":          start,                                                                                            // 7355\n\t\t\t\"end\":            settings.fnDisplayEnd(),                                                                          // 7356\n\t\t\t\"length\":         len,                                                                                              // 7357\n\t\t\t\"recordsTotal\":   settings.fnRecordsTotal(),                                                                        // 7358\n\t\t\t\"recordsDisplay\": visRecords                                                                                        // 7359\n\t\t};                                                                                                                   // 7360\n\t} );                                                                                                                  // 7361\n\t                                                                                                                      // 7362\n\t                                                                                                                      // 7363\n\t/**                                                                                                                   // 7364\n\t * Get the current page length.                                                                                       // 7365\n\t *                                                                                                                    // 7366\n\t * @return {integer} Current page length. Note `-1` indicates that all records                                        // 7367\n\t *   are to be shown.                                                                                                 // 7368\n\t *//**                                                                                                                // 7369\n\t * Set the current page length.                                                                                       // 7370\n\t *                                                                                                                    // 7371\n\t * @param {integer} Page length to set. Use `-1` to show all records.                                                 // 7372\n\t * @returns {DataTables.Api} this                                                                                     // 7373\n\t */                                                                                                                   // 7374\n\t_api_register( 'page.len()', function ( len ) {                                                                       // 7375\n\t\t// Note that we can't call this function 'length()' because `length`                                                 // 7376\n\t\t// is a Javascript property of functions which defines how many arguments                                            // 7377\n\t\t// the function expects.                                                                                             // 7378\n\t\tif ( len === undefined ) {                                                                                           // 7379\n\t\t\treturn this.context.length !== 0 ?                                                                                  // 7380\n\t\t\t\tthis.context[0]._iDisplayLength :                                                                                  // 7381\n\t\t\t\tundefined;                                                                                                         // 7382\n\t\t}                                                                                                                    // 7383\n\t                                                                                                                      // 7384\n\t\t// else, set the page length                                                                                         // 7385\n\t\treturn this.iterator( 'table', function ( settings ) {                                                               // 7386\n\t\t\t_fnLengthChange( settings, len );                                                                                   // 7387\n\t\t} );                                                                                                                 // 7388\n\t} );                                                                                                                  // 7389\n\t                                                                                                                      // 7390\n\t                                                                                                                      // 7391\n\t                                                                                                                      // 7392\n\tvar __reload = function ( settings, holdPosition, callback ) {                                                        // 7393\n\t\t// Use the draw event to trigger a callback                                                                          // 7394\n\t\tif ( callback ) {                                                                                                    // 7395\n\t\t\tvar api = new _Api( settings );                                                                                     // 7396\n\t                                                                                                                      // 7397\n\t\t\tapi.one( 'draw', function () {                                                                                      // 7398\n\t\t\t\tcallback( api.ajax.json() );                                                                                       // 7399\n\t\t\t} );                                                                                                                // 7400\n\t\t}                                                                                                                    // 7401\n\t                                                                                                                      // 7402\n\t\tif ( _fnDataSource( settings ) == 'ssp' ) {                                                                          // 7403\n\t\t\t_fnReDraw( settings, holdPosition );                                                                                // 7404\n\t\t}                                                                                                                    // 7405\n\t\telse {                                                                                                               // 7406\n\t\t\t// Trigger xhr                                                                                                      // 7407\n\t\t\t_fnProcessingDisplay( settings, true );                                                                             // 7408\n\t                                                                                                                      // 7409\n\t\t\t_fnBuildAjax( settings, [], function( json ) {                                                                      // 7410\n\t\t\t\t_fnClearTable( settings );                                                                                         // 7411\n\t                                                                                                                      // 7412\n\t\t\t\tvar data = _fnAjaxDataSrc( settings, json );                                                                       // 7413\n\t\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {                                                                   // 7414\n\t\t\t\t\t_fnAddData( settings, data[i] );                                                                                  // 7415\n\t\t\t\t}                                                                                                                  // 7416\n\t                                                                                                                      // 7417\n\t\t\t\t_fnReDraw( settings, holdPosition );                                                                               // 7418\n\t\t\t\t_fnProcessingDisplay( settings, false );                                                                           // 7419\n\t\t\t} );                                                                                                                // 7420\n\t\t}                                                                                                                    // 7421\n\t};                                                                                                                    // 7422\n\t                                                                                                                      // 7423\n\t                                                                                                                      // 7424\n\t/**                                                                                                                   // 7425\n\t * Get the JSON response from the last Ajax request that DataTables made to the                                       // 7426\n\t * server. Note that this returns the JSON from the first table in the current                                        // 7427\n\t * context.                                                                                                           // 7428\n\t *                                                                                                                    // 7429\n\t * @return {object} JSON received from the server.                                                                    // 7430\n\t */                                                                                                                   // 7431\n\t_api_register( 'ajax.json()', function () {                                                                           // 7432\n\t\tvar ctx = this.context;                                                                                              // 7433\n\t                                                                                                                      // 7434\n\t\tif ( ctx.length > 0 ) {                                                                                              // 7435\n\t\t\treturn ctx[0].json;                                                                                                 // 7436\n\t\t}                                                                                                                    // 7437\n\t                                                                                                                      // 7438\n\t\t// else return undefined;                                                                                            // 7439\n\t} );                                                                                                                  // 7440\n\t                                                                                                                      // 7441\n\t                                                                                                                      // 7442\n\t/**                                                                                                                   // 7443\n\t * Get the data submitted in the last Ajax request                                                                    // 7444\n\t */                                                                                                                   // 7445\n\t_api_register( 'ajax.params()', function () {                                                                         // 7446\n\t\tvar ctx = this.context;                                                                                              // 7447\n\t                                                                                                                      // 7448\n\t\tif ( ctx.length > 0 ) {                                                                                              // 7449\n\t\t\treturn ctx[0].oAjaxData;                                                                                            // 7450\n\t\t}                                                                                                                    // 7451\n\t                                                                                                                      // 7452\n\t\t// else return undefined;                                                                                            // 7453\n\t} );                                                                                                                  // 7454\n\t                                                                                                                      // 7455\n\t                                                                                                                      // 7456\n\t/**                                                                                                                   // 7457\n\t * Reload tables from the Ajax data source. Note that this function will                                              // 7458\n\t * automatically re-draw the table when the remote data has been loaded.                                              // 7459\n\t *                                                                                                                    // 7460\n\t * @param {boolean} [reset=true] Reset (default) or hold the current paging                                           // 7461\n\t *   position. A full re-sort and re-filter is performed when this method is                                          // 7462\n\t *   called, which is why the pagination reset is the default action.                                                 // 7463\n\t * @returns {DataTables.Api} this                                                                                     // 7464\n\t */                                                                                                                   // 7465\n\t_api_register( 'ajax.reload()', function ( callback, resetPaging ) {                                                  // 7466\n\t\treturn this.iterator( 'table', function (settings) {                                                                 // 7467\n\t\t\t__reload( settings, resetPaging===false, callback );                                                                // 7468\n\t\t} );                                                                                                                 // 7469\n\t} );                                                                                                                  // 7470\n\t                                                                                                                      // 7471\n\t                                                                                                                      // 7472\n\t/**                                                                                                                   // 7473\n\t * Get the current Ajax URL. Note that this returns the URL from the first                                            // 7474\n\t * table in the current context.                                                                                      // 7475\n\t *                                                                                                                    // 7476\n\t * @return {string} Current Ajax source URL                                                                           // 7477\n\t *//**                                                                                                                // 7478\n\t * Set the Ajax URL. Note that this will set the URL for all tables in the                                            // 7479\n\t * current context.                                                                                                   // 7480\n\t *                                                                                                                    // 7481\n\t * @param {string} url URL to set.                                                                                    // 7482\n\t * @returns {DataTables.Api} this                                                                                     // 7483\n\t */                                                                                                                   // 7484\n\t_api_register( 'ajax.url()', function ( url ) {                                                                       // 7485\n\t\tvar ctx = this.context;                                                                                              // 7486\n\t                                                                                                                      // 7487\n\t\tif ( url === undefined ) {                                                                                           // 7488\n\t\t\t// get                                                                                                              // 7489\n\t\t\tif ( ctx.length === 0 ) {                                                                                           // 7490\n\t\t\t\treturn undefined;                                                                                                  // 7491\n\t\t\t}                                                                                                                   // 7492\n\t\t\tctx = ctx[0];                                                                                                       // 7493\n\t                                                                                                                      // 7494\n\t\t\treturn ctx.ajax ?                                                                                                   // 7495\n\t\t\t\t$.isPlainObject( ctx.ajax ) ?                                                                                      // 7496\n\t\t\t\t\tctx.ajax.url :                                                                                                    // 7497\n\t\t\t\t\tctx.ajax :                                                                                                        // 7498\n\t\t\t\tctx.sAjaxSource;                                                                                                   // 7499\n\t\t}                                                                                                                    // 7500\n\t                                                                                                                      // 7501\n\t\t// set                                                                                                               // 7502\n\t\treturn this.iterator( 'table', function ( settings ) {                                                               // 7503\n\t\t\tif ( $.isPlainObject( settings.ajax ) ) {                                                                           // 7504\n\t\t\t\tsettings.ajax.url = url;                                                                                           // 7505\n\t\t\t}                                                                                                                   // 7506\n\t\t\telse {                                                                                                              // 7507\n\t\t\t\tsettings.ajax = url;                                                                                               // 7508\n\t\t\t}                                                                                                                   // 7509\n\t\t\t// No need to consider sAjaxSource here since DataTables gives priority                                             // 7510\n\t\t\t// to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any                                                // 7511\n\t\t\t// value of `sAjaxSource` redundant.                                                                                // 7512\n\t\t} );                                                                                                                 // 7513\n\t} );                                                                                                                  // 7514\n\t                                                                                                                      // 7515\n\t                                                                                                                      // 7516\n\t/**                                                                                                                   // 7517\n\t * Load data from the newly set Ajax URL. Note that this method is only                                               // 7518\n\t * available when `ajax.url()` is used to set a URL. Additionally, this method                                        // 7519\n\t * has the same effect as calling `ajax.reload()` but is provided for                                                 // 7520\n\t * convenience when setting a new URL. Like `ajax.reload()` it will                                                   // 7521\n\t * automatically redraw the table once the remote data has been loaded.                                               // 7522\n\t *                                                                                                                    // 7523\n\t * @returns {DataTables.Api} this                                                                                     // 7524\n\t */                                                                                                                   // 7525\n\t_api_register( 'ajax.url().load()', function ( callback, resetPaging ) {                                              // 7526\n\t\t// Same as a reload, but makes sense to present it for easy access after a                                           // 7527\n\t\t// url change                                                                                                        // 7528\n\t\treturn this.iterator( 'table', function ( ctx ) {                                                                    // 7529\n\t\t\t__reload( ctx, resetPaging===false, callback );                                                                     // 7530\n\t\t} );                                                                                                                 // 7531\n\t} );                                                                                                                  // 7532\n\t                                                                                                                      // 7533\n\t                                                                                                                      // 7534\n\t                                                                                                                      // 7535\n\t                                                                                                                      // 7536\n\tvar _selector_run = function ( type, selector, selectFn, settings, opts )                                             // 7537\n\t{                                                                                                                     // 7538\n\t\tvar                                                                                                                  // 7539\n\t\t\tout = [], res,                                                                                                      // 7540\n\t\t\ta, i, ien, j, jen,                                                                                                  // 7541\n\t\t\tselectorType = typeof selector;                                                                                     // 7542\n\t                                                                                                                      // 7543\n\t\t// Can't just check for isArray here, as an API or jQuery instance might be                                          // 7544\n\t\t// given with their array like look                                                                                  // 7545\n\t\tif ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined ) {     // 7546\n\t\t\tselector = [ selector ];                                                                                            // 7547\n\t\t}                                                                                                                    // 7548\n\t                                                                                                                      // 7549\n\t\tfor ( i=0, ien=selector.length ; i<ien ; i++ ) {                                                                     // 7550\n\t\t\ta = selector[i] && selector[i].split ?                                                                              // 7551\n\t\t\t\tselector[i].split(',') :                                                                                           // 7552\n\t\t\t\t[ selector[i] ];                                                                                                   // 7553\n\t                                                                                                                      // 7554\n\t\t\tfor ( j=0, jen=a.length ; j<jen ; j++ ) {                                                                           // 7555\n\t\t\t\tres = selectFn( typeof a[j] === 'string' ? $.trim(a[j]) : a[j] );                                                  // 7556\n\t                                                                                                                      // 7557\n\t\t\t\tif ( res && res.length ) {                                                                                         // 7558\n\t\t\t\t\tout.push.apply( out, res );                                                                                       // 7559\n\t\t\t\t}                                                                                                                  // 7560\n\t\t\t}                                                                                                                   // 7561\n\t\t}                                                                                                                    // 7562\n\t                                                                                                                      // 7563\n\t\t// selector extensions                                                                                               // 7564\n\t\tvar ext = _ext.selector[ type ];                                                                                     // 7565\n\t\tif ( ext.length ) {                                                                                                  // 7566\n\t\t\tfor ( i=0, ien=ext.length ; i<ien ; i++ ) {                                                                         // 7567\n\t\t\t\tout = ext[i]( settings, opts, out );                                                                               // 7568\n\t\t\t}                                                                                                                   // 7569\n\t\t}                                                                                                                    // 7570\n\t                                                                                                                      // 7571\n\t\treturn out;                                                                                                          // 7572\n\t};                                                                                                                    // 7573\n\t                                                                                                                      // 7574\n\t                                                                                                                      // 7575\n\tvar _selector_opts = function ( opts )                                                                                // 7576\n\t{                                                                                                                     // 7577\n\t\tif ( ! opts ) {                                                                                                      // 7578\n\t\t\topts = {};                                                                                                          // 7579\n\t\t}                                                                                                                    // 7580\n\t                                                                                                                      // 7581\n\t\t// Backwards compatibility for 1.9- which used the terminology filter rather                                         // 7582\n\t\t// than search                                                                                                       // 7583\n\t\tif ( opts.filter && opts.search === undefined ) {                                                                    // 7584\n\t\t\topts.search = opts.filter;                                                                                          // 7585\n\t\t}                                                                                                                    // 7586\n\t                                                                                                                      // 7587\n\t\treturn $.extend( {                                                                                                   // 7588\n\t\t\tsearch: 'none',                                                                                                     // 7589\n\t\t\torder: 'current',                                                                                                   // 7590\n\t\t\tpage: 'all'                                                                                                         // 7591\n\t\t}, opts );                                                                                                           // 7592\n\t};                                                                                                                    // 7593\n\t                                                                                                                      // 7594\n\t                                                                                                                      // 7595\n\tvar _selector_first = function ( inst )                                                                               // 7596\n\t{                                                                                                                     // 7597\n\t\t// Reduce the API instance to the first item found                                                                   // 7598\n\t\tfor ( var i=0, ien=inst.length ; i<ien ; i++ ) {                                                                     // 7599\n\t\t\tif ( inst[i].length > 0 ) {                                                                                         // 7600\n\t\t\t\t// Assign the first element to the first item in the instance                                                      // 7601\n\t\t\t\t// and truncate the instance and context                                                                           // 7602\n\t\t\t\tinst[0] = inst[i];                                                                                                 // 7603\n\t\t\t\tinst[0].length = 1;                                                                                                // 7604\n\t\t\t\tinst.length = 1;                                                                                                   // 7605\n\t\t\t\tinst.context = [ inst.context[i] ];                                                                                // 7606\n\t                                                                                                                      // 7607\n\t\t\t\treturn inst;                                                                                                       // 7608\n\t\t\t}                                                                                                                   // 7609\n\t\t}                                                                                                                    // 7610\n\t                                                                                                                      // 7611\n\t\t// Not found - return an empty instance                                                                              // 7612\n\t\tinst.length = 0;                                                                                                     // 7613\n\t\treturn inst;                                                                                                         // 7614\n\t};                                                                                                                    // 7615\n\t                                                                                                                      // 7616\n\t                                                                                                                      // 7617\n\tvar _selector_row_indexes = function ( settings, opts )                                                               // 7618\n\t{                                                                                                                     // 7619\n\t\tvar                                                                                                                  // 7620\n\t\t\ti, ien, tmp, a=[],                                                                                                  // 7621\n\t\t\tdisplayFiltered = settings.aiDisplay,                                                                               // 7622\n\t\t\tdisplayMaster = settings.aiDisplayMaster;                                                                           // 7623\n\t                                                                                                                      // 7624\n\t\tvar                                                                                                                  // 7625\n\t\t\tsearch = opts.search,  // none, applied, removed                                                                    // 7626\n\t\t\torder  = opts.order,   // applied, current, index (original - compatibility with 1.9)                               // 7627\n\t\t\tpage   = opts.page;    // all, current                                                                              // 7628\n\t                                                                                                                      // 7629\n\t\tif ( _fnDataSource( settings ) == 'ssp' ) {                                                                          // 7630\n\t\t\t// In server-side processing mode, most options are irrelevant since                                                // 7631\n\t\t\t// rows not shown don't exist and the index order is the applied order                                              // 7632\n\t\t\t// Removed is a special case - for consistency just return an empty                                                 // 7633\n\t\t\t// array                                                                                                            // 7634\n\t\t\treturn search === 'removed' ?                                                                                       // 7635\n\t\t\t\t[] :                                                                                                               // 7636\n\t\t\t\t_range( 0, displayMaster.length );                                                                                 // 7637\n\t\t}                                                                                                                    // 7638\n\t\telse if ( page == 'current' ) {                                                                                      // 7639\n\t\t\t// Current page implies that order=current and fitler=applied, since it is                                          // 7640\n\t\t\t// fairly senseless otherwise, regardless of what order and search actually                                         // 7641\n\t\t\t// are                                                                                                              // 7642\n\t\t\tfor ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {                                      // 7643\n\t\t\t\ta.push( displayFiltered[i] );                                                                                      // 7644\n\t\t\t}                                                                                                                   // 7645\n\t\t}                                                                                                                    // 7646\n\t\telse if ( order == 'current' || order == 'applied' ) {                                                               // 7647\n\t\t\ta = search == 'none' ?                                                                                              // 7648\n\t\t\t\tdisplayMaster.slice() :                      // no search                                                          // 7649\n\t\t\t\tsearch == 'applied' ?                                                                                              // 7650\n\t\t\t\t\tdisplayFiltered.slice() :                // applied search                                                        // 7651\n\t\t\t\t\t$.map( displayMaster, function (el, i) { // removed search                                                        // 7652\n\t\t\t\t\t\treturn $.inArray( el, displayFiltered ) === -1 ? el : null;                                                      // 7653\n\t\t\t\t\t} );                                                                                                              // 7654\n\t\t}                                                                                                                    // 7655\n\t\telse if ( order == 'index' || order == 'original' ) {                                                                // 7656\n\t\t\tfor ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {                                                             // 7657\n\t\t\t\tif ( search == 'none' ) {                                                                                          // 7658\n\t\t\t\t\ta.push( i );                                                                                                      // 7659\n\t\t\t\t}                                                                                                                  // 7660\n\t\t\t\telse { // applied | removed                                                                                        // 7661\n\t\t\t\t\ttmp = $.inArray( i, displayFiltered );                                                                            // 7662\n\t                                                                                                                      // 7663\n\t\t\t\t\tif ((tmp === -1 && search == 'removed') ||                                                                        // 7664\n\t\t\t\t\t\t(tmp >= 0   && search == 'applied') )                                                                            // 7665\n\t\t\t\t\t{                                                                                                                 // 7666\n\t\t\t\t\t\ta.push( i );                                                                                                     // 7667\n\t\t\t\t\t}                                                                                                                 // 7668\n\t\t\t\t}                                                                                                                  // 7669\n\t\t\t}                                                                                                                   // 7670\n\t\t}                                                                                                                    // 7671\n\t                                                                                                                      // 7672\n\t\treturn a;                                                                                                            // 7673\n\t};                                                                                                                    // 7674\n\t                                                                                                                      // 7675\n\t                                                                                                                      // 7676\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                        // 7677\n\t * Rows                                                                                                               // 7678\n\t *                                                                                                                    // 7679\n\t * {}          - no selector - use all available rows                                                                 // 7680\n\t * {integer}   - row aoData index                                                                                     // 7681\n\t * {node}      - TR node                                                                                              // 7682\n\t * {string}    - jQuery selector to apply to the TR elements                                                          // 7683\n\t * {array}     - jQuery array of nodes, or simply an array of TR nodes                                                // 7684\n\t *                                                                                                                    // 7685\n\t */                                                                                                                   // 7686\n\t                                                                                                                      // 7687\n\t                                                                                                                      // 7688\n\tvar __row_selector = function ( settings, selector, opts )                                                            // 7689\n\t{                                                                                                                     // 7690\n\t\tvar run = function ( sel ) {                                                                                         // 7691\n\t\t\tvar selInt = _intVal( sel );                                                                                        // 7692\n\t\t\tvar i, ien;                                                                                                         // 7693\n\t                                                                                                                      // 7694\n\t\t\t// Short cut - selector is a number and no options provided (default is                                             // 7695\n\t\t\t// all records, so no need to check if the index is in there, since it                                              // 7696\n\t\t\t// must be - dev error if the index doesn't exist).                                                                 // 7697\n\t\t\tif ( selInt !== null && ! opts ) {                                                                                  // 7698\n\t\t\t\treturn [ selInt ];                                                                                                 // 7699\n\t\t\t}                                                                                                                   // 7700\n\t                                                                                                                      // 7701\n\t\t\tvar rows = _selector_row_indexes( settings, opts );                                                                 // 7702\n\t                                                                                                                      // 7703\n\t\t\tif ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {                                                        // 7704\n\t\t\t\t// Selector - integer                                                                                              // 7705\n\t\t\t\treturn [ selInt ];                                                                                                 // 7706\n\t\t\t}                                                                                                                   // 7707\n\t\t\telse if ( ! sel ) {                                                                                                 // 7708\n\t\t\t\t// Selector - none                                                                                                 // 7709\n\t\t\t\treturn rows;                                                                                                       // 7710\n\t\t\t}                                                                                                                   // 7711\n\t                                                                                                                      // 7712\n\t\t\t// Selector - function                                                                                              // 7713\n\t\t\tif ( typeof sel === 'function' ) {                                                                                  // 7714\n\t\t\t\treturn $.map( rows, function (idx) {                                                                               // 7715\n\t\t\t\t\tvar row = settings.aoData[ idx ];                                                                                 // 7716\n\t\t\t\t\treturn sel( idx, row._aData, row.nTr ) ? idx : null;                                                              // 7717\n\t\t\t\t} );                                                                                                               // 7718\n\t\t\t}                                                                                                                   // 7719\n\t                                                                                                                      // 7720\n\t\t\t// Get nodes in the order from the `rows` array with null values removed                                            // 7721\n\t\t\tvar nodes = _removeEmpty(                                                                                           // 7722\n\t\t\t\t_pluck_order( settings.aoData, rows, 'nTr' )                                                                       // 7723\n\t\t\t);                                                                                                                  // 7724\n\t                                                                                                                      // 7725\n\t\t\t// Selector - node                                                                                                  // 7726\n\t\t\tif ( sel.nodeName ) {                                                                                               // 7727\n\t\t\t\tif ( $.inArray( sel, nodes ) !== -1 ) {                                                                            // 7728\n\t\t\t\t\treturn [ sel._DT_RowIndex ]; // sel is a TR node that is in the table                                             // 7729\n\t\t\t\t\t                             // and DataTables adds a prop for fast lookup                                        // 7730\n\t\t\t\t}                                                                                                                  // 7731\n\t\t\t}                                                                                                                   // 7732\n\t                                                                                                                      // 7733\n\t\t\t// Selector - jQuery selector string, array of nodes or jQuery object/                                              // 7734\n\t\t\t// As jQuery's .filter() allows jQuery objects to be passed in filter,                                              // 7735\n\t\t\t// it also allows arrays, so this will cope with all three options                                                  // 7736\n\t\t\treturn $(nodes)                                                                                                     // 7737\n\t\t\t\t.filter( sel )                                                                                                     // 7738\n\t\t\t\t.map( function () {                                                                                                // 7739\n\t\t\t\t\treturn this._DT_RowIndex;                                                                                         // 7740\n\t\t\t\t} )                                                                                                                // 7741\n\t\t\t\t.toArray();                                                                                                        // 7742\n\t\t};                                                                                                                   // 7743\n\t                                                                                                                      // 7744\n\t\treturn _selector_run( 'row', selector, run, settings, opts );                                                        // 7745\n\t};                                                                                                                    // 7746\n\t                                                                                                                      // 7747\n\t                                                                                                                      // 7748\n\t_api_register( 'rows()', function ( selector, opts ) {                                                                // 7749\n\t\t// argument shifting                                                                                                 // 7750\n\t\tif ( selector === undefined ) {                                                                                      // 7751\n\t\t\tselector = '';                                                                                                      // 7752\n\t\t}                                                                                                                    // 7753\n\t\telse if ( $.isPlainObject( selector ) ) {                                                                            // 7754\n\t\t\topts = selector;                                                                                                    // 7755\n\t\t\tselector = '';                                                                                                      // 7756\n\t\t}                                                                                                                    // 7757\n\t                                                                                                                      // 7758\n\t\topts = _selector_opts( opts );                                                                                       // 7759\n\t                                                                                                                      // 7760\n\t\tvar inst = this.iterator( 'table', function ( settings ) {                                                           // 7761\n\t\t\treturn __row_selector( settings, selector, opts );                                                                  // 7762\n\t\t}, 1 );                                                                                                              // 7763\n\t                                                                                                                      // 7764\n\t\t// Want argument shifting here and in __row_selector?                                                                // 7765\n\t\tinst.selector.rows = selector;                                                                                       // 7766\n\t\tinst.selector.opts = opts;                                                                                           // 7767\n\t                                                                                                                      // 7768\n\t\treturn inst;                                                                                                         // 7769\n\t} );                                                                                                                  // 7770\n\t                                                                                                                      // 7771\n\t_api_register( 'rows().nodes()', function () {                                                                        // 7772\n\t\treturn this.iterator( 'row', function ( settings, row ) {                                                            // 7773\n\t\t\treturn settings.aoData[ row ].nTr || undefined;                                                                     // 7774\n\t\t}, 1 );                                                                                                              // 7775\n\t} );                                                                                                                  // 7776\n\t                                                                                                                      // 7777\n\t_api_register( 'rows().data()', function () {                                                                         // 7778\n\t\treturn this.iterator( true, 'rows', function ( settings, rows ) {                                                    // 7779\n\t\t\treturn _pluck_order( settings.aoData, rows, '_aData' );                                                             // 7780\n\t\t}, 1 );                                                                                                              // 7781\n\t} );                                                                                                                  // 7782\n\t                                                                                                                      // 7783\n\t_api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {                                           // 7784\n\t\treturn this.iterator( 'row', function ( settings, row ) {                                                            // 7785\n\t\t\tvar r = settings.aoData[ row ];                                                                                     // 7786\n\t\t\treturn type === 'search' ? r._aFilterData : r._aSortData;                                                           // 7787\n\t\t}, 1 );                                                                                                              // 7788\n\t} );                                                                                                                  // 7789\n\t                                                                                                                      // 7790\n\t_api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {                                  // 7791\n\t\treturn this.iterator( 'row', function ( settings, row ) {                                                            // 7792\n\t\t\t_fnInvalidate( settings, row, src );                                                                                // 7793\n\t\t} );                                                                                                                 // 7794\n\t} );                                                                                                                  // 7795\n\t                                                                                                                      // 7796\n\t_api_registerPlural( 'rows().indexes()', 'row().index()', function () {                                               // 7797\n\t\treturn this.iterator( 'row', function ( settings, row ) {                                                            // 7798\n\t\t\treturn row;                                                                                                         // 7799\n\t\t}, 1 );                                                                                                              // 7800\n\t} );                                                                                                                  // 7801\n\t                                                                                                                      // 7802\n\t_api_registerPlural( 'rows().remove()', 'row().remove()', function () {                                               // 7803\n\t\tvar that = this;                                                                                                     // 7804\n\t                                                                                                                      // 7805\n\t\treturn this.iterator( 'row', function ( settings, row, thatIdx ) {                                                   // 7806\n\t\t\tvar data = settings.aoData;                                                                                         // 7807\n\t                                                                                                                      // 7808\n\t\t\tdata.splice( row, 1 );                                                                                              // 7809\n\t                                                                                                                      // 7810\n\t\t\t// Update the _DT_RowIndex parameter on all rows in the table                                                       // 7811\n\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {                                                                    // 7812\n\t\t\t\tif ( data[i].nTr !== null ) {                                                                                      // 7813\n\t\t\t\t\tdata[i].nTr._DT_RowIndex = i;                                                                                     // 7814\n\t\t\t\t}                                                                                                                  // 7815\n\t\t\t}                                                                                                                   // 7816\n\t                                                                                                                      // 7817\n\t\t\t// Remove the target row from the search array                                                                      // 7818\n\t\t\tvar displayIndex = $.inArray( row, settings.aiDisplay );                                                            // 7819\n\t                                                                                                                      // 7820\n\t\t\t// Delete from the display arrays                                                                                   // 7821\n\t\t\t_fnDeleteIndex( settings.aiDisplayMaster, row );                                                                    // 7822\n\t\t\t_fnDeleteIndex( settings.aiDisplay, row );                                                                          // 7823\n\t\t\t_fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes                                            // 7824\n\t                                                                                                                      // 7825\n\t\t\t// Check for an 'overflow' they case for displaying the table                                                       // 7826\n\t\t\t_fnLengthOverflow( settings );                                                                                      // 7827\n\t\t} );                                                                                                                 // 7828\n\t} );                                                                                                                  // 7829\n\t                                                                                                                      // 7830\n\t                                                                                                                      // 7831\n\t_api_register( 'rows.add()', function ( rows ) {                                                                      // 7832\n\t\tvar newRows = this.iterator( 'table', function ( settings ) {                                                        // 7833\n\t\t\t\tvar row, i, ien;                                                                                                   // 7834\n\t\t\t\tvar out = [];                                                                                                      // 7835\n\t                                                                                                                      // 7836\n\t\t\t\tfor ( i=0, ien=rows.length ; i<ien ; i++ ) {                                                                       // 7837\n\t\t\t\t\trow = rows[i];                                                                                                    // 7838\n\t                                                                                                                      // 7839\n\t\t\t\t\tif ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {                                                      // 7840\n\t\t\t\t\t\tout.push( _fnAddTr( settings, row )[0] );                                                                        // 7841\n\t\t\t\t\t}                                                                                                                 // 7842\n\t\t\t\t\telse {                                                                                                            // 7843\n\t\t\t\t\t\tout.push( _fnAddData( settings, row ) );                                                                         // 7844\n\t\t\t\t\t}                                                                                                                 // 7845\n\t\t\t\t}                                                                                                                  // 7846\n\t                                                                                                                      // 7847\n\t\t\t\treturn out;                                                                                                        // 7848\n\t\t\t}, 1 );                                                                                                             // 7849\n\t                                                                                                                      // 7850\n\t\t// Return an Api.rows() extended instance, so rows().nodes() etc can be used                                         // 7851\n\t\tvar modRows = this.rows( -1 );                                                                                       // 7852\n\t\tmodRows.pop();                                                                                                       // 7853\n\t\tmodRows.push.apply( modRows, newRows.toArray() );                                                                    // 7854\n\t                                                                                                                      // 7855\n\t\treturn modRows;                                                                                                      // 7856\n\t} );                                                                                                                  // 7857\n\t                                                                                                                      // 7858\n\t                                                                                                                      // 7859\n\t                                                                                                                      // 7860\n\t                                                                                                                      // 7861\n\t                                                                                                                      // 7862\n\t/**                                                                                                                   // 7863\n\t *                                                                                                                    // 7864\n\t */                                                                                                                   // 7865\n\t_api_register( 'row()', function ( selector, opts ) {                                                                 // 7866\n\t\treturn _selector_first( this.rows( selector, opts ) );                                                               // 7867\n\t} );                                                                                                                  // 7868\n\t                                                                                                                      // 7869\n\t                                                                                                                      // 7870\n\t_api_register( 'row().data()', function ( data ) {                                                                    // 7871\n\t\tvar ctx = this.context;                                                                                              // 7872\n\t                                                                                                                      // 7873\n\t\tif ( data === undefined ) {                                                                                          // 7874\n\t\t\t// Get                                                                                                              // 7875\n\t\t\treturn ctx.length && this.length ?                                                                                  // 7876\n\t\t\t\tctx[0].aoData[ this[0] ]._aData :                                                                                  // 7877\n\t\t\t\tundefined;                                                                                                         // 7878\n\t\t}                                                                                                                    // 7879\n\t                                                                                                                      // 7880\n\t\t// Set                                                                                                               // 7881\n\t\tctx[0].aoData[ this[0] ]._aData = data;                                                                              // 7882\n\t                                                                                                                      // 7883\n\t\t// Automatically invalidate                                                                                          // 7884\n\t\t_fnInvalidate( ctx[0], this[0], 'data' );                                                                            // 7885\n\t                                                                                                                      // 7886\n\t\treturn this;                                                                                                         // 7887\n\t} );                                                                                                                  // 7888\n\t                                                                                                                      // 7889\n\t                                                                                                                      // 7890\n\t_api_register( 'row().node()', function () {                                                                          // 7891\n\t\tvar ctx = this.context;                                                                                              // 7892\n\t                                                                                                                      // 7893\n\t\treturn ctx.length && this.length ?                                                                                   // 7894\n\t\t\tctx[0].aoData[ this[0] ].nTr || null :                                                                              // 7895\n\t\t\tnull;                                                                                                               // 7896\n\t} );                                                                                                                  // 7897\n\t                                                                                                                      // 7898\n\t                                                                                                                      // 7899\n\t_api_register( 'row.add()', function ( row ) {                                                                        // 7900\n\t\t// Allow a jQuery object to be passed in - only a single row is added from                                           // 7901\n\t\t// it though - the first element in the set                                                                          // 7902\n\t\tif ( row instanceof $ && row.length ) {                                                                              // 7903\n\t\t\trow = row[0];                                                                                                       // 7904\n\t\t}                                                                                                                    // 7905\n\t                                                                                                                      // 7906\n\t\tvar rows = this.iterator( 'table', function ( settings ) {                                                           // 7907\n\t\t\tif ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {                                                        // 7908\n\t\t\t\treturn _fnAddTr( settings, row )[0];                                                                               // 7909\n\t\t\t}                                                                                                                   // 7910\n\t\t\treturn _fnAddData( settings, row );                                                                                 // 7911\n\t\t} );                                                                                                                 // 7912\n\t                                                                                                                      // 7913\n\t\t// Return an Api.rows() extended instance, with the newly added row selected                                         // 7914\n\t\treturn this.row( rows[0] );                                                                                          // 7915\n\t} );                                                                                                                  // 7916\n\t                                                                                                                      // 7917\n\t                                                                                                                      // 7918\n\t                                                                                                                      // 7919\n\tvar __details_add = function ( ctx, row, data, klass )                                                                // 7920\n\t{                                                                                                                     // 7921\n\t\t// Convert to array of TR elements                                                                                   // 7922\n\t\tvar rows = [];                                                                                                       // 7923\n\t\tvar addRow = function ( r, k ) {                                                                                     // 7924\n\t\t\t// Recursion to allow for arrays of jQuery objects                                                                  // 7925\n\t\t\tif ( $.isArray( r ) || r instanceof $ ) {                                                                           // 7926\n\t\t\t\tfor ( var i=0, ien=r.length ; i<ien ; i++ ) {                                                                      // 7927\n\t\t\t\t\taddRow( r[i], k );                                                                                                // 7928\n\t\t\t\t}                                                                                                                  // 7929\n\t\t\t\treturn;                                                                                                            // 7930\n\t\t\t}                                                                                                                   // 7931\n\t                                                                                                                      // 7932\n\t\t\t// If we get a TR element, then just add it directly - up to the dev                                                // 7933\n\t\t\t// to add the correct number of columns etc                                                                         // 7934\n\t\t\tif ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {                                                            // 7935\n\t\t\t\trows.push( r );                                                                                                    // 7936\n\t\t\t}                                                                                                                   // 7937\n\t\t\telse {                                                                                                              // 7938\n\t\t\t\t// Otherwise create a row with a wrapper                                                                           // 7939\n\t\t\t\tvar created = $('<tr><td/></tr>').addClass( k );                                                                   // 7940\n\t\t\t\t$('td', created)                                                                                                   // 7941\n\t\t\t\t\t.addClass( k )                                                                                                    // 7942\n\t\t\t\t\t.html( r )                                                                                                        // 7943\n\t\t\t\t\t[0].colSpan = _fnVisbleColumns( ctx );                                                                            // 7944\n\t                                                                                                                      // 7945\n\t\t\t\trows.push( created[0] );                                                                                           // 7946\n\t\t\t}                                                                                                                   // 7947\n\t\t};                                                                                                                   // 7948\n\t                                                                                                                      // 7949\n\t\taddRow( data, klass );                                                                                               // 7950\n\t                                                                                                                      // 7951\n\t\tif ( row._details ) {                                                                                                // 7952\n\t\t\trow._details.remove();                                                                                              // 7953\n\t\t}                                                                                                                    // 7954\n\t                                                                                                                      // 7955\n\t\trow._details = $(rows);                                                                                              // 7956\n\t                                                                                                                      // 7957\n\t\t// If the children were already shown, that state should be retained                                                 // 7958\n\t\tif ( row._detailsShow ) {                                                                                            // 7959\n\t\t\trow._details.insertAfter( row.nTr );                                                                                // 7960\n\t\t}                                                                                                                    // 7961\n\t};                                                                                                                    // 7962\n\t                                                                                                                      // 7963\n\t                                                                                                                      // 7964\n\tvar __details_remove = function ( api, idx )                                                                          // 7965\n\t{                                                                                                                     // 7966\n\t\tvar ctx = api.context;                                                                                               // 7967\n\t                                                                                                                      // 7968\n\t\tif ( ctx.length ) {                                                                                                  // 7969\n\t\t\tvar row = ctx[0].aoData[ idx !== undefined ? idx : api[0] ];                                                        // 7970\n\t                                                                                                                      // 7971\n\t\t\tif ( row._details ) {                                                                                               // 7972\n\t\t\t\trow._details.remove();                                                                                             // 7973\n\t                                                                                                                      // 7974\n\t\t\t\trow._detailsShow = undefined;                                                                                      // 7975\n\t\t\t\trow._details = undefined;                                                                                          // 7976\n\t\t\t}                                                                                                                   // 7977\n\t\t}                                                                                                                    // 7978\n\t};                                                                                                                    // 7979\n\t                                                                                                                      // 7980\n\t                                                                                                                      // 7981\n\tvar __details_display = function ( api, show ) {                                                                      // 7982\n\t\tvar ctx = api.context;                                                                                               // 7983\n\t                                                                                                                      // 7984\n\t\tif ( ctx.length && api.length ) {                                                                                    // 7985\n\t\t\tvar row = ctx[0].aoData[ api[0] ];                                                                                  // 7986\n\t                                                                                                                      // 7987\n\t\t\tif ( row._details ) {                                                                                               // 7988\n\t\t\t\trow._detailsShow = show;                                                                                           // 7989\n\t                                                                                                                      // 7990\n\t\t\t\tif ( show ) {                                                                                                      // 7991\n\t\t\t\t\trow._details.insertAfter( row.nTr );                                                                              // 7992\n\t\t\t\t}                                                                                                                  // 7993\n\t\t\t\telse {                                                                                                             // 7994\n\t\t\t\t\trow._details.detach();                                                                                            // 7995\n\t\t\t\t}                                                                                                                  // 7996\n\t                                                                                                                      // 7997\n\t\t\t\t__details_events( ctx[0] );                                                                                        // 7998\n\t\t\t}                                                                                                                   // 7999\n\t\t}                                                                                                                    // 8000\n\t};                                                                                                                    // 8001\n\t                                                                                                                      // 8002\n\t                                                                                                                      // 8003\n\tvar __details_events = function ( settings )                                                                          // 8004\n\t{                                                                                                                     // 8005\n\t\tvar api = new _Api( settings );                                                                                      // 8006\n\t\tvar namespace = '.dt.DT_details';                                                                                    // 8007\n\t\tvar drawEvent = 'draw'+namespace;                                                                                    // 8008\n\t\tvar colvisEvent = 'column-visibility'+namespace;                                                                     // 8009\n\t\tvar destroyEvent = 'destroy'+namespace;                                                                              // 8010\n\t\tvar data = settings.aoData;                                                                                          // 8011\n\t                                                                                                                      // 8012\n\t\tapi.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );                                                           // 8013\n\t                                                                                                                      // 8014\n\t\tif ( _pluck( data, '_details' ).length > 0 ) {                                                                       // 8015\n\t\t\t// On each draw, insert the required elements into the document                                                     // 8016\n\t\t\tapi.on( drawEvent, function ( e, ctx ) {                                                                            // 8017\n\t\t\t\tif ( settings !== ctx ) {                                                                                          // 8018\n\t\t\t\t\treturn;                                                                                                           // 8019\n\t\t\t\t}                                                                                                                  // 8020\n\t                                                                                                                      // 8021\n\t\t\t\tapi.rows( {page:'current'} ).eq(0).each( function (idx) {                                                          // 8022\n\t\t\t\t\t// Internal data grab                                                                                             // 8023\n\t\t\t\t\tvar row = data[ idx ];                                                                                            // 8024\n\t                                                                                                                      // 8025\n\t\t\t\t\tif ( row._detailsShow ) {                                                                                         // 8026\n\t\t\t\t\t\trow._details.insertAfter( row.nTr );                                                                             // 8027\n\t\t\t\t\t}                                                                                                                 // 8028\n\t\t\t\t} );                                                                                                               // 8029\n\t\t\t} );                                                                                                                // 8030\n\t                                                                                                                      // 8031\n\t\t\t// Column visibility change - update the colspan                                                                    // 8032\n\t\t\tapi.on( colvisEvent, function ( e, ctx, idx, vis ) {                                                                // 8033\n\t\t\t\tif ( settings !== ctx ) {                                                                                          // 8034\n\t\t\t\t\treturn;                                                                                                           // 8035\n\t\t\t\t}                                                                                                                  // 8036\n\t                                                                                                                      // 8037\n\t\t\t\t// Update the colspan for the details rows (note, only if it already has                                           // 8038\n\t\t\t\t// a colspan)                                                                                                      // 8039\n\t\t\t\tvar row, visible = _fnVisbleColumns( ctx );                                                                        // 8040\n\t                                                                                                                      // 8041\n\t\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {                                                                   // 8042\n\t\t\t\t\trow = data[i];                                                                                                    // 8043\n\t                                                                                                                      // 8044\n\t\t\t\t\tif ( row._details ) {                                                                                             // 8045\n\t\t\t\t\t\trow._details.children('td[colspan]').attr('colspan', visible );                                                  // 8046\n\t\t\t\t\t}                                                                                                                 // 8047\n\t\t\t\t}                                                                                                                  // 8048\n\t\t\t} );                                                                                                                // 8049\n\t                                                                                                                      // 8050\n\t\t\t// Table destroyed - nuke any child rows                                                                            // 8051\n\t\t\tapi.on( destroyEvent, function ( e, ctx ) {                                                                         // 8052\n\t\t\t\tif ( settings !== ctx ) {                                                                                          // 8053\n\t\t\t\t\treturn;                                                                                                           // 8054\n\t\t\t\t}                                                                                                                  // 8055\n\t                                                                                                                      // 8056\n\t\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {                                                                   // 8057\n\t\t\t\t\tif ( data[i]._details ) {                                                                                         // 8058\n\t\t\t\t\t\t__details_remove( api, i );                                                                                      // 8059\n\t\t\t\t\t}                                                                                                                 // 8060\n\t\t\t\t}                                                                                                                  // 8061\n\t\t\t} );                                                                                                                // 8062\n\t\t}                                                                                                                    // 8063\n\t};                                                                                                                    // 8064\n\t                                                                                                                      // 8065\n\t// Strings for the method names to help minification                                                                  // 8066\n\tvar _emp = '';                                                                                                        // 8067\n\tvar _child_obj = _emp+'row().child';                                                                                  // 8068\n\tvar _child_mth = _child_obj+'()';                                                                                     // 8069\n\t                                                                                                                      // 8070\n\t// data can be:                                                                                                       // 8071\n\t//  tr                                                                                                                // 8072\n\t//  string                                                                                                            // 8073\n\t//  jQuery or array of any of the above                                                                               // 8074\n\t_api_register( _child_mth, function ( data, klass ) {                                                                 // 8075\n\t\tvar ctx = this.context;                                                                                              // 8076\n\t                                                                                                                      // 8077\n\t\tif ( data === undefined ) {                                                                                          // 8078\n\t\t\t// get                                                                                                              // 8079\n\t\t\treturn ctx.length && this.length ?                                                                                  // 8080\n\t\t\t\tctx[0].aoData[ this[0] ]._details :                                                                                // 8081\n\t\t\t\tundefined;                                                                                                         // 8082\n\t\t}                                                                                                                    // 8083\n\t\telse if ( data === true ) {                                                                                          // 8084\n\t\t\t// show                                                                                                             // 8085\n\t\t\tthis.child.show();                                                                                                  // 8086\n\t\t}                                                                                                                    // 8087\n\t\telse if ( data === false ) {                                                                                         // 8088\n\t\t\t// remove                                                                                                           // 8089\n\t\t\t__details_remove( this );                                                                                           // 8090\n\t\t}                                                                                                                    // 8091\n\t\telse if ( ctx.length && this.length ) {                                                                              // 8092\n\t\t\t// set                                                                                                              // 8093\n\t\t\t__details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );                                                     // 8094\n\t\t}                                                                                                                    // 8095\n\t                                                                                                                      // 8096\n\t\treturn this;                                                                                                         // 8097\n\t} );                                                                                                                  // 8098\n\t                                                                                                                      // 8099\n\t                                                                                                                      // 8100\n\t_api_register( [                                                                                                      // 8101\n\t\t_child_obj+'.show()',                                                                                                // 8102\n\t\t_child_mth+'.show()' // only when `child()` was called with parameters (without                                      // 8103\n\t], function ( show ) {   // it returns an object and this method is not executed)                                     // 8104\n\t\t__details_display( this, true );                                                                                     // 8105\n\t\treturn this;                                                                                                         // 8106\n\t} );                                                                                                                  // 8107\n\t                                                                                                                      // 8108\n\t                                                                                                                      // 8109\n\t_api_register( [                                                                                                      // 8110\n\t\t_child_obj+'.hide()',                                                                                                // 8111\n\t\t_child_mth+'.hide()' // only when `child()` was called with parameters (without                                      // 8112\n\t], function () {         // it returns an object and this method is not executed)                                     // 8113\n\t\t__details_display( this, false );                                                                                    // 8114\n\t\treturn this;                                                                                                         // 8115\n\t} );                                                                                                                  // 8116\n\t                                                                                                                      // 8117\n\t                                                                                                                      // 8118\n\t_api_register( [                                                                                                      // 8119\n\t\t_child_obj+'.remove()',                                                                                              // 8120\n\t\t_child_mth+'.remove()' // only when `child()` was called with parameters (without                                    // 8121\n\t], function () {           // it returns an object and this method is not executed)                                   // 8122\n\t\t__details_remove( this );                                                                                            // 8123\n\t\treturn this;                                                                                                         // 8124\n\t} );                                                                                                                  // 8125\n\t                                                                                                                      // 8126\n\t                                                                                                                      // 8127\n\t_api_register( _child_obj+'.isShown()', function () {                                                                 // 8128\n\t\tvar ctx = this.context;                                                                                              // 8129\n\t                                                                                                                      // 8130\n\t\tif ( ctx.length && this.length ) {                                                                                   // 8131\n\t\t\t// _detailsShown as false or undefined will fall through to return false                                            // 8132\n\t\t\treturn ctx[0].aoData[ this[0] ]._detailsShow || false;                                                              // 8133\n\t\t}                                                                                                                    // 8134\n\t\treturn false;                                                                                                        // 8135\n\t} );                                                                                                                  // 8136\n\t                                                                                                                      // 8137\n\t                                                                                                                      // 8138\n\t                                                                                                                      // 8139\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                        // 8140\n\t * Columns                                                                                                            // 8141\n\t *                                                                                                                    // 8142\n\t * {integer}           - column index (>=0 count from left, <0 count from right)                                      // 8143\n\t * \"{integer}:visIdx\"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)\n\t * \"{integer}:visible\" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)                       // 8145\n\t * \"{string}:name\"     - column name                                                                                  // 8146\n\t * \"{string}\"          - jQuery selector on column header nodes                                                       // 8147\n\t *                                                                                                                    // 8148\n\t */                                                                                                                   // 8149\n\t                                                                                                                      // 8150\n\t// can be an array of these items, comma separated list, or an array of comma                                         // 8151\n\t// separated lists                                                                                                    // 8152\n\t                                                                                                                      // 8153\n\tvar __re_column_selector = /^(.+):(name|visIdx|visible)$/;                                                            // 8154\n\t                                                                                                                      // 8155\n\t                                                                                                                      // 8156\n\t// r1 and r2 are redundant - but it means that the parameters match for the                                           // 8157\n\t// iterator callback in columns().data()                                                                              // 8158\n\tvar __columnData = function ( settings, column, r1, r2, rows ) {                                                      // 8159\n\t\tvar a = [];                                                                                                          // 8160\n\t\tfor ( var row=0, ien=rows.length ; row<ien ; row++ ) {                                                               // 8161\n\t\t\ta.push( _fnGetCellData( settings, rows[row], column ) );                                                            // 8162\n\t\t}                                                                                                                    // 8163\n\t\treturn a;                                                                                                            // 8164\n\t};                                                                                                                    // 8165\n\t                                                                                                                      // 8166\n\t                                                                                                                      // 8167\n\tvar __column_selector = function ( settings, selector, opts )                                                         // 8168\n\t{                                                                                                                     // 8169\n\t\tvar                                                                                                                  // 8170\n\t\t\tcolumns = settings.aoColumns,                                                                                       // 8171\n\t\t\tnames = _pluck( columns, 'sName' ),                                                                                 // 8172\n\t\t\tnodes = _pluck( columns, 'nTh' );                                                                                   // 8173\n\t                                                                                                                      // 8174\n\t\tvar run = function ( s ) {                                                                                           // 8175\n\t\t\tvar selInt = _intVal( s );                                                                                          // 8176\n\t                                                                                                                      // 8177\n\t\t\t// Selector - all                                                                                                   // 8178\n\t\t\tif ( s === '' ) {                                                                                                   // 8179\n\t\t\t\treturn _range( columns.length );                                                                                   // 8180\n\t\t\t}                                                                                                                   // 8181\n\t\t\t                                                                                                                    // 8182\n\t\t\t// Selector - index                                                                                                 // 8183\n\t\t\tif ( selInt !== null ) {                                                                                            // 8184\n\t\t\t\treturn [ selInt >= 0 ?                                                                                             // 8185\n\t\t\t\t\tselInt : // Count from left                                                                                       // 8186\n\t\t\t\t\tcolumns.length + selInt // Count from right (+ because its a negative value)                                      // 8187\n\t\t\t\t];                                                                                                                 // 8188\n\t\t\t}                                                                                                                   // 8189\n\t\t\t                                                                                                                    // 8190\n\t\t\t// Selector = function                                                                                              // 8191\n\t\t\tif ( typeof s === 'function' ) {                                                                                    // 8192\n\t\t\t\tvar rows = _selector_row_indexes( settings, opts );                                                                // 8193\n\t                                                                                                                      // 8194\n\t\t\t\treturn $.map( columns, function (col, idx) {                                                                       // 8195\n\t\t\t\t\treturn s(                                                                                                         // 8196\n\t\t\t\t\t\t\tidx,                                                                                                            // 8197\n\t\t\t\t\t\t\t__columnData( settings, idx, 0, 0, rows ),                                                                      // 8198\n\t\t\t\t\t\t\tnodes[ idx ]                                                                                                    // 8199\n\t\t\t\t\t\t) ? idx : null;                                                                                                  // 8200\n\t\t\t\t} );                                                                                                               // 8201\n\t\t\t}                                                                                                                   // 8202\n\t                                                                                                                      // 8203\n\t\t\t// jQuery or string selector                                                                                        // 8204\n\t\t\tvar match = typeof s === 'string' ?                                                                                 // 8205\n\t\t\t\ts.match( __re_column_selector ) :                                                                                  // 8206\n\t\t\t\t'';                                                                                                                // 8207\n\t                                                                                                                      // 8208\n\t\t\tif ( match ) {                                                                                                      // 8209\n\t\t\t\tswitch( match[2] ) {                                                                                               // 8210\n\t\t\t\t\tcase 'visIdx':                                                                                                    // 8211\n\t\t\t\t\tcase 'visible':                                                                                                   // 8212\n\t\t\t\t\t\tvar idx = parseInt( match[1], 10 );                                                                              // 8213\n\t\t\t\t\t\t// Visible index given, convert to column index                                                                  // 8214\n\t\t\t\t\t\tif ( idx < 0 ) {                                                                                                 // 8215\n\t\t\t\t\t\t\t// Counting from the right                                                                                      // 8216\n\t\t\t\t\t\t\tvar visColumns = $.map( columns, function (col,i) {                                                             // 8217\n\t\t\t\t\t\t\t\treturn col.bVisible ? i : null;                                                                                // 8218\n\t\t\t\t\t\t\t} );                                                                                                            // 8219\n\t\t\t\t\t\t\treturn [ visColumns[ visColumns.length + idx ] ];                                                               // 8220\n\t\t\t\t\t\t}                                                                                                                // 8221\n\t\t\t\t\t\t// Counting from the left                                                                                        // 8222\n\t\t\t\t\t\treturn [ _fnVisibleToColumnIndex( settings, idx ) ];                                                             // 8223\n\t                                                                                                                      // 8224\n\t\t\t\t\tcase 'name':                                                                                                      // 8225\n\t\t\t\t\t\t// match by name. `names` is column index complete and in order                                                  // 8226\n\t\t\t\t\t\treturn $.map( names, function (name, i) {                                                                        // 8227\n\t\t\t\t\t\t\treturn name === match[1] ? i : null;                                                                            // 8228\n\t\t\t\t\t\t} );                                                                                                             // 8229\n\t\t\t\t}                                                                                                                  // 8230\n\t\t\t}                                                                                                                   // 8231\n\t\t\telse {                                                                                                              // 8232\n\t\t\t\t// jQuery selector on the TH elements for the columns                                                              // 8233\n\t\t\t\treturn $( nodes )                                                                                                  // 8234\n\t\t\t\t\t.filter( s )                                                                                                      // 8235\n\t\t\t\t\t.map( function () {                                                                                               // 8236\n\t\t\t\t\t\treturn $.inArray( this, nodes ); // `nodes` is column index complete and in order                                // 8237\n\t\t\t\t\t} )                                                                                                               // 8238\n\t\t\t\t\t.toArray();                                                                                                       // 8239\n\t\t\t}                                                                                                                   // 8240\n\t\t};                                                                                                                   // 8241\n\t                                                                                                                      // 8242\n\t\treturn _selector_run( 'column', selector, run, settings, opts );                                                     // 8243\n\t};                                                                                                                    // 8244\n\t                                                                                                                      // 8245\n\t                                                                                                                      // 8246\n\tvar __setColumnVis = function ( settings, column, vis, recalc ) {                                                     // 8247\n\t\tvar                                                                                                                  // 8248\n\t\t\tcols = settings.aoColumns,                                                                                          // 8249\n\t\t\tcol  = cols[ column ],                                                                                              // 8250\n\t\t\tdata = settings.aoData,                                                                                             // 8251\n\t\t\trow, cells, i, ien, tr;                                                                                             // 8252\n\t                                                                                                                      // 8253\n\t\t// Get                                                                                                               // 8254\n\t\tif ( vis === undefined ) {                                                                                           // 8255\n\t\t\treturn col.bVisible;                                                                                                // 8256\n\t\t}                                                                                                                    // 8257\n\t                                                                                                                      // 8258\n\t\t// Set                                                                                                               // 8259\n\t\t// No change                                                                                                         // 8260\n\t\tif ( col.bVisible === vis ) {                                                                                        // 8261\n\t\t\treturn;                                                                                                             // 8262\n\t\t}                                                                                                                    // 8263\n\t                                                                                                                      // 8264\n\t\tif ( vis ) {                                                                                                         // 8265\n\t\t\t// Insert column                                                                                                    // 8266\n\t\t\t// Need to decide if we should use appendChild or insertBefore                                                      // 8267\n\t\t\tvar insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );                                           // 8268\n\t                                                                                                                      // 8269\n\t\t\tfor ( i=0, ien=data.length ; i<ien ; i++ ) {                                                                        // 8270\n\t\t\t\ttr = data[i].nTr;                                                                                                  // 8271\n\t\t\t\tcells = data[i].anCells;                                                                                           // 8272\n\t                                                                                                                      // 8273\n\t\t\t\tif ( tr ) {                                                                                                        // 8274\n\t\t\t\t\t// insertBefore can act like appendChild if 2nd arg is null                                                       // 8275\n\t\t\t\t\ttr.insertBefore( cells[ column ], cells[ insertBefore ] || null );                                                // 8276\n\t\t\t\t}                                                                                                                  // 8277\n\t\t\t}                                                                                                                   // 8278\n\t\t}                                                                                                                    // 8279\n\t\telse {                                                                                                               // 8280\n\t\t\t// Remove column                                                                                                    // 8281\n\t\t\t$( _pluck( settings.aoData, 'anCells', column ) ).detach();                                                         // 8282\n\t\t}                                                                                                                    // 8283\n\t                                                                                                                      // 8284\n\t\t// Common actions                                                                                                    // 8285\n\t\tcol.bVisible = vis;                                                                                                  // 8286\n\t\t_fnDrawHead( settings, settings.aoHeader );                                                                          // 8287\n\t\t_fnDrawHead( settings, settings.aoFooter );                                                                          // 8288\n\t                                                                                                                      // 8289\n\t\tif ( recalc === undefined || recalc ) {                                                                              // 8290\n\t\t\t// Automatically adjust column sizing                                                                               // 8291\n\t\t\t_fnAdjustColumnSizing( settings );                                                                                  // 8292\n\t                                                                                                                      // 8293\n\t\t\t// Realign columns for scrolling                                                                                    // 8294\n\t\t\tif ( settings.oScroll.sX || settings.oScroll.sY ) {                                                                 // 8295\n\t\t\t\t_fnScrollDraw( settings );                                                                                         // 8296\n\t\t\t}                                                                                                                   // 8297\n\t\t}                                                                                                                    // 8298\n\t                                                                                                                      // 8299\n\t\t_fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis] );                                     // 8300\n\t                                                                                                                      // 8301\n\t\t_fnSaveState( settings );                                                                                            // 8302\n\t};                                                                                                                    // 8303\n\t                                                                                                                      // 8304\n\t                                                                                                                      // 8305\n\t_api_register( 'columns()', function ( selector, opts ) {                                                             // 8306\n\t\t// argument shifting                                                                                                 // 8307\n\t\tif ( selector === undefined ) {                                                                                      // 8308\n\t\t\tselector = '';                                                                                                      // 8309\n\t\t}                                                                                                                    // 8310\n\t\telse if ( $.isPlainObject( selector ) ) {                                                                            // 8311\n\t\t\topts = selector;                                                                                                    // 8312\n\t\t\tselector = '';                                                                                                      // 8313\n\t\t}                                                                                                                    // 8314\n\t                                                                                                                      // 8315\n\t\topts = _selector_opts( opts );                                                                                       // 8316\n\t                                                                                                                      // 8317\n\t\tvar inst = this.iterator( 'table', function ( settings ) {                                                           // 8318\n\t\t\treturn __column_selector( settings, selector, opts );                                                               // 8319\n\t\t}, 1 );                                                                                                              // 8320\n\t                                                                                                                      // 8321\n\t\t// Want argument shifting here and in _row_selector?                                                                 // 8322\n\t\tinst.selector.cols = selector;                                                                                       // 8323\n\t\tinst.selector.opts = opts;                                                                                           // 8324\n\t                                                                                                                      // 8325\n\t\treturn inst;                                                                                                         // 8326\n\t} );                                                                                                                  // 8327\n\t                                                                                                                      // 8328\n\t_api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {                         // 8329\n\t\treturn this.iterator( 'column', function ( settings, column ) {                                                      // 8330\n\t\t\treturn settings.aoColumns[column].nTh;                                                                              // 8331\n\t\t}, 1 );                                                                                                              // 8332\n\t} );                                                                                                                  // 8333\n\t                                                                                                                      // 8334\n\t_api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {                         // 8335\n\t\treturn this.iterator( 'column', function ( settings, column ) {                                                      // 8336\n\t\t\treturn settings.aoColumns[column].nTf;                                                                              // 8337\n\t\t}, 1 );                                                                                                              // 8338\n\t} );                                                                                                                  // 8339\n\t                                                                                                                      // 8340\n\t_api_registerPlural( 'columns().data()', 'column().data()', function () {                                             // 8341\n\t\treturn this.iterator( 'column-rows', __columnData, 1 );                                                              // 8342\n\t} );                                                                                                                  // 8343\n\t                                                                                                                      // 8344\n\t_api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {                                       // 8345\n\t\treturn this.iterator( 'column', function ( settings, column ) {                                                      // 8346\n\t\t\treturn settings.aoColumns[column].mData;                                                                            // 8347\n\t\t}, 1 );                                                                                                              // 8348\n\t} );                                                                                                                  // 8349\n\t                                                                                                                      // 8350\n\t_api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {                                     // 8351\n\t\treturn this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {                                     // 8352\n\t\t\treturn _pluck_order( settings.aoData, rows,                                                                         // 8353\n\t\t\t\ttype === 'search' ? '_aFilterData' : '_aSortData', column                                                          // 8354\n\t\t\t);                                                                                                                  // 8355\n\t\t}, 1 );                                                                                                              // 8356\n\t} );                                                                                                                  // 8357\n\t                                                                                                                      // 8358\n\t_api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {                                           // 8359\n\t\treturn this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {                                     // 8360\n\t\t\treturn _pluck_order( settings.aoData, rows, 'anCells', column ) ;                                                   // 8361\n\t\t}, 1 );                                                                                                              // 8362\n\t} );                                                                                                                  // 8363\n\t                                                                                                                      // 8364\n\t_api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {                            // 8365\n\t\treturn this.iterator( 'column', function ( settings, column ) {                                                      // 8366\n\t\t\tif ( vis === undefined ) {                                                                                          // 8367\n\t\t\t\treturn settings.aoColumns[ column ].bVisible;                                                                      // 8368\n\t\t\t} // else                                                                                                           // 8369\n\t\t\t__setColumnVis( settings, column, vis, calc );                                                                      // 8370\n\t\t} );                                                                                                                 // 8371\n\t} );                                                                                                                  // 8372\n\t                                                                                                                      // 8373\n\t_api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {                                   // 8374\n\t\treturn this.iterator( 'column', function ( settings, column ) {                                                      // 8375\n\t\t\treturn type === 'visible' ?                                                                                         // 8376\n\t\t\t\t_fnColumnIndexToVisible( settings, column ) :                                                                      // 8377\n\t\t\t\tcolumn;                                                                                                            // 8378\n\t\t}, 1 );                                                                                                              // 8379\n\t} );                                                                                                                  // 8380\n\t                                                                                                                      // 8381\n\t_api_register( 'columns.adjust()', function () {                                                                      // 8382\n\t\treturn this.iterator( 'table', function ( settings ) {                                                               // 8383\n\t\t\t_fnAdjustColumnSizing( settings );                                                                                  // 8384\n\t\t}, 1 );                                                                                                              // 8385\n\t} );                                                                                                                  // 8386\n\t                                                                                                                      // 8387\n\t_api_register( 'column.index()', function ( type, idx ) {                                                             // 8388\n\t\tif ( this.context.length !== 0 ) {                                                                                   // 8389\n\t\t\tvar ctx = this.context[0];                                                                                          // 8390\n\t                                                                                                                      // 8391\n\t\t\tif ( type === 'fromVisible' || type === 'toData' ) {                                                                // 8392\n\t\t\t\treturn _fnVisibleToColumnIndex( ctx, idx );                                                                        // 8393\n\t\t\t}                                                                                                                   // 8394\n\t\t\telse if ( type === 'fromData' || type === 'toVisible' ) {                                                           // 8395\n\t\t\t\treturn _fnColumnIndexToVisible( ctx, idx );                                                                        // 8396\n\t\t\t}                                                                                                                   // 8397\n\t\t}                                                                                                                    // 8398\n\t} );                                                                                                                  // 8399\n\t                                                                                                                      // 8400\n\t_api_register( 'column()', function ( selector, opts ) {                                                              // 8401\n\t\treturn _selector_first( this.columns( selector, opts ) );                                                            // 8402\n\t} );                                                                                                                  // 8403\n\t                                                                                                                      // 8404\n\t                                                                                                                      // 8405\n\t                                                                                                                      // 8406\n\t                                                                                                                      // 8407\n\tvar __cell_selector = function ( settings, selector, opts )                                                           // 8408\n\t{                                                                                                                     // 8409\n\t\tvar data = settings.aoData;                                                                                          // 8410\n\t\tvar rows = _selector_row_indexes( settings, opts );                                                                  // 8411\n\t\tvar cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );                                                   // 8412\n\t\tvar allCells = $( [].concat.apply([], cells) );                                                                      // 8413\n\t\tvar row;                                                                                                             // 8414\n\t\tvar columns = settings.aoColumns.length;                                                                             // 8415\n\t\tvar a, i, ien, j, o, host;                                                                                           // 8416\n\t                                                                                                                      // 8417\n\t\tvar run = function ( s ) {                                                                                           // 8418\n\t\t\tvar fnSelector = typeof s === 'function';                                                                           // 8419\n\t                                                                                                                      // 8420\n\t\t\tif ( s === null || s === undefined || fnSelector ) {                                                                // 8421\n\t\t\t\t// All cells and function selectors                                                                                // 8422\n\t\t\t\ta = [];                                                                                                            // 8423\n\t                                                                                                                      // 8424\n\t\t\t\tfor ( i=0, ien=rows.length ; i<ien ; i++ ) {                                                                       // 8425\n\t\t\t\t\trow = rows[i];                                                                                                    // 8426\n\t                                                                                                                      // 8427\n\t\t\t\t\tfor ( j=0 ; j<columns ; j++ ) {                                                                                   // 8428\n\t\t\t\t\t\to = {                                                                                                            // 8429\n\t\t\t\t\t\t\trow: row,                                                                                                       // 8430\n\t\t\t\t\t\t\tcolumn: j                                                                                                       // 8431\n\t\t\t\t\t\t};                                                                                                               // 8432\n\t                                                                                                                      // 8433\n\t\t\t\t\t\tif ( fnSelector ) {                                                                                              // 8434\n\t\t\t\t\t\t\t// Selector - function                                                                                          // 8435\n\t\t\t\t\t\t\thost = settings.aoData[ row ];                                                                                  // 8436\n\t                                                                                                                      // 8437\n\t\t\t\t\t\t\tif ( s( o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null ) ) {                        // 8438\n\t\t\t\t\t\t\t\ta.push( o );                                                                                                   // 8439\n\t\t\t\t\t\t\t}                                                                                                               // 8440\n\t\t\t\t\t\t}                                                                                                                // 8441\n\t\t\t\t\t\telse {                                                                                                           // 8442\n\t\t\t\t\t\t\t// Selector - all                                                                                               // 8443\n\t\t\t\t\t\t\ta.push( o );                                                                                                    // 8444\n\t\t\t\t\t\t}                                                                                                                // 8445\n\t\t\t\t\t}                                                                                                                 // 8446\n\t\t\t\t}                                                                                                                  // 8447\n\t                                                                                                                      // 8448\n\t\t\t\treturn a;                                                                                                          // 8449\n\t\t\t}                                                                                                                   // 8450\n\t\t\t                                                                                                                    // 8451\n\t\t\t// Selector - index                                                                                                 // 8452\n\t\t\tif ( $.isPlainObject( s ) ) {                                                                                       // 8453\n\t\t\t\treturn [s];                                                                                                        // 8454\n\t\t\t}                                                                                                                   // 8455\n\t                                                                                                                      // 8456\n\t\t\t// Selector - jQuery filtered cells                                                                                 // 8457\n\t\t\treturn allCells                                                                                                     // 8458\n\t\t\t\t.filter( s )                                                                                                       // 8459\n\t\t\t\t.map( function (i, el) {                                                                                           // 8460\n\t\t\t\t\trow = el.parentNode._DT_RowIndex;                                                                                 // 8461\n\t                                                                                                                      // 8462\n\t\t\t\t\treturn {                                                                                                          // 8463\n\t\t\t\t\t\trow: row,                                                                                                        // 8464\n\t\t\t\t\t\tcolumn: $.inArray( el, data[ row ].anCells )                                                                     // 8465\n\t\t\t\t\t};                                                                                                                // 8466\n\t\t\t\t} )                                                                                                                // 8467\n\t\t\t\t.toArray();                                                                                                        // 8468\n\t\t};                                                                                                                   // 8469\n\t                                                                                                                      // 8470\n\t\treturn _selector_run( 'cell', selector, run, settings, opts );                                                       // 8471\n\t};                                                                                                                    // 8472\n\t                                                                                                                      // 8473\n\t                                                                                                                      // 8474\n\t                                                                                                                      // 8475\n\t                                                                                                                      // 8476\n\t_api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {                                            // 8477\n\t\t// Argument shifting                                                                                                 // 8478\n\t\tif ( $.isPlainObject( rowSelector ) ) {                                                                              // 8479\n\t\t\t// Indexes                                                                                                          // 8480\n\t\t\tif ( rowSelector.row === undefined ) {                                                                              // 8481\n\t\t\t\t// Selector options in first parameter                                                                             // 8482\n\t\t\t\topts = rowSelector;                                                                                                // 8483\n\t\t\t\trowSelector = null;                                                                                                // 8484\n\t\t\t}                                                                                                                   // 8485\n\t\t\telse {                                                                                                              // 8486\n\t\t\t\t// Cell index objects in first parameter                                                                           // 8487\n\t\t\t\topts = columnSelector;                                                                                             // 8488\n\t\t\t\tcolumnSelector = null;                                                                                             // 8489\n\t\t\t}                                                                                                                   // 8490\n\t\t}                                                                                                                    // 8491\n\t\tif ( $.isPlainObject( columnSelector ) ) {                                                                           // 8492\n\t\t\topts = columnSelector;                                                                                              // 8493\n\t\t\tcolumnSelector = null;                                                                                              // 8494\n\t\t}                                                                                                                    // 8495\n\t                                                                                                                      // 8496\n\t\t// Cell selector                                                                                                     // 8497\n\t\tif ( columnSelector === null || columnSelector === undefined ) {                                                     // 8498\n\t\t\treturn this.iterator( 'table', function ( settings ) {                                                              // 8499\n\t\t\t\treturn __cell_selector( settings, rowSelector, _selector_opts( opts ) );                                           // 8500\n\t\t\t} );                                                                                                                // 8501\n\t\t}                                                                                                                    // 8502\n\t                                                                                                                      // 8503\n\t\t// Row + column selector                                                                                             // 8504\n\t\tvar columns = this.columns( columnSelector, opts );                                                                  // 8505\n\t\tvar rows = this.rows( rowSelector, opts );                                                                           // 8506\n\t\tvar a, i, ien, j, jen;                                                                                               // 8507\n\t                                                                                                                      // 8508\n\t\tvar cells = this.iterator( 'table', function ( settings, idx ) {                                                     // 8509\n\t\t\ta = [];                                                                                                             // 8510\n\t                                                                                                                      // 8511\n\t\t\tfor ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {                                                                   // 8512\n\t\t\t\tfor ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {                                                               // 8513\n\t\t\t\t\ta.push( {                                                                                                         // 8514\n\t\t\t\t\t\trow:    rows[idx][i],                                                                                            // 8515\n\t\t\t\t\t\tcolumn: columns[idx][j]                                                                                          // 8516\n\t\t\t\t\t} );                                                                                                              // 8517\n\t\t\t\t}                                                                                                                  // 8518\n\t\t\t}                                                                                                                   // 8519\n\t                                                                                                                      // 8520\n\t\t\treturn a;                                                                                                           // 8521\n\t\t}, 1 );                                                                                                              // 8522\n\t                                                                                                                      // 8523\n\t\t$.extend( cells.selector, {                                                                                          // 8524\n\t\t\tcols: columnSelector,                                                                                               // 8525\n\t\t\trows: rowSelector,                                                                                                  // 8526\n\t\t\topts: opts                                                                                                          // 8527\n\t\t} );                                                                                                                 // 8528\n\t                                                                                                                      // 8529\n\t\treturn cells;                                                                                                        // 8530\n\t} );                                                                                                                  // 8531\n\t                                                                                                                      // 8532\n\t                                                                                                                      // 8533\n\t_api_registerPlural( 'cells().nodes()', 'cell().node()', function () {                                                // 8534\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {                                                   // 8535\n\t\t\tvar cells = settings.aoData[ row ].anCells;                                                                         // 8536\n\t\t\treturn cells ?                                                                                                      // 8537\n\t\t\t\tcells[ column ] :                                                                                                  // 8538\n\t\t\t\tundefined;                                                                                                         // 8539\n\t\t}, 1 );                                                                                                              // 8540\n\t} );                                                                                                                  // 8541\n\t                                                                                                                      // 8542\n\t                                                                                                                      // 8543\n\t_api_register( 'cells().data()', function () {                                                                        // 8544\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {                                                   // 8545\n\t\t\treturn _fnGetCellData( settings, row, column );                                                                     // 8546\n\t\t}, 1 );                                                                                                              // 8547\n\t} );                                                                                                                  // 8548\n\t                                                                                                                      // 8549\n\t                                                                                                                      // 8550\n\t_api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {                                         // 8551\n\t\ttype = type === 'search' ? '_aFilterData' : '_aSortData';                                                            // 8552\n\t                                                                                                                      // 8553\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {                                                   // 8554\n\t\t\treturn settings.aoData[ row ][ type ][ column ];                                                                    // 8555\n\t\t}, 1 );                                                                                                              // 8556\n\t} );                                                                                                                  // 8557\n\t                                                                                                                      // 8558\n\t                                                                                                                      // 8559\n\t_api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {                                       // 8560\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {                                                   // 8561\n\t\t\treturn _fnGetCellData( settings, row, column, type );                                                               // 8562\n\t\t}, 1 );                                                                                                              // 8563\n\t} );                                                                                                                  // 8564\n\t                                                                                                                      // 8565\n\t                                                                                                                      // 8566\n\t_api_registerPlural( 'cells().indexes()', 'cell().index()', function () {                                             // 8567\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {                                                   // 8568\n\t\t\treturn {                                                                                                            // 8569\n\t\t\t\trow: row,                                                                                                          // 8570\n\t\t\t\tcolumn: column,                                                                                                    // 8571\n\t\t\t\tcolumnVisible: _fnColumnIndexToVisible( settings, column )                                                         // 8572\n\t\t\t};                                                                                                                  // 8573\n\t\t}, 1 );                                                                                                              // 8574\n\t} );                                                                                                                  // 8575\n\t                                                                                                                      // 8576\n\t                                                                                                                      // 8577\n\t_api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {                                // 8578\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {                                                   // 8579\n\t\t\t_fnInvalidate( settings, row, src, column );                                                                        // 8580\n\t\t} );                                                                                                                 // 8581\n\t} );                                                                                                                  // 8582\n\t                                                                                                                      // 8583\n\t                                                                                                                      // 8584\n\t                                                                                                                      // 8585\n\t_api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {                                             // 8586\n\t\treturn _selector_first( this.cells( rowSelector, columnSelector, opts ) );                                           // 8587\n\t} );                                                                                                                  // 8588\n\t                                                                                                                      // 8589\n\t                                                                                                                      // 8590\n\t_api_register( 'cell().data()', function ( data ) {                                                                   // 8591\n\t\tvar ctx = this.context;                                                                                              // 8592\n\t\tvar cell = this[0];                                                                                                  // 8593\n\t                                                                                                                      // 8594\n\t\tif ( data === undefined ) {                                                                                          // 8595\n\t\t\t// Get                                                                                                              // 8596\n\t\t\treturn ctx.length && cell.length ?                                                                                  // 8597\n\t\t\t\t_fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :                                                            // 8598\n\t\t\t\tundefined;                                                                                                         // 8599\n\t\t}                                                                                                                    // 8600\n\t                                                                                                                      // 8601\n\t\t// Set                                                                                                               // 8602\n\t\t_fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );                                                         // 8603\n\t\t_fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );                                                        // 8604\n\t                                                                                                                      // 8605\n\t\treturn this;                                                                                                         // 8606\n\t} );                                                                                                                  // 8607\n\t                                                                                                                      // 8608\n\t                                                                                                                      // 8609\n\t                                                                                                                      // 8610\n\t/**                                                                                                                   // 8611\n\t * Get current ordering (sorting) that has been applied to the table.                                                 // 8612\n\t *                                                                                                                    // 8613\n\t * @returns {array} 2D array containing the sorting information for the first                                         // 8614\n\t *   table in the current context. Each element in the parent array represents                                        // 8615\n\t *   a column being sorted upon (i.e. multi-sorting with two columns would have                                       // 8616\n\t *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is                                         // 8617\n\t *   the column index that the sorting condition applies to, the second is the                                        // 8618\n\t *   direction of the sort (`desc` or `asc`) and, optionally, the third is the                                        // 8619\n\t *   index of the sorting order from the `column.sorting` initialisation array.                                       // 8620\n\t *//**                                                                                                                // 8621\n\t * Set the ordering for the table.                                                                                    // 8622\n\t *                                                                                                                    // 8623\n\t * @param {integer} order Column index to sort upon.                                                                  // 8624\n\t * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)                                    // 8625\n\t * @returns {DataTables.Api} this                                                                                     // 8626\n\t *//**                                                                                                                // 8627\n\t * Set the ordering for the table.                                                                                    // 8628\n\t *                                                                                                                    // 8629\n\t * @param {array} order 1D array of sorting information to be applied.                                                // 8630\n\t * @param {array} [...] Optional additional sorting conditions                                                        // 8631\n\t * @returns {DataTables.Api} this                                                                                     // 8632\n\t *//**                                                                                                                // 8633\n\t * Set the ordering for the table.                                                                                    // 8634\n\t *                                                                                                                    // 8635\n\t * @param {array} order 2D array of sorting information to be applied.                                                // 8636\n\t * @returns {DataTables.Api} this                                                                                     // 8637\n\t */                                                                                                                   // 8638\n\t_api_register( 'order()', function ( order, dir ) {                                                                   // 8639\n\t\tvar ctx = this.context;                                                                                              // 8640\n\t                                                                                                                      // 8641\n\t\tif ( order === undefined ) {                                                                                         // 8642\n\t\t\t// get                                                                                                              // 8643\n\t\t\treturn ctx.length !== 0 ?                                                                                           // 8644\n\t\t\t\tctx[0].aaSorting :                                                                                                 // 8645\n\t\t\t\tundefined;                                                                                                         // 8646\n\t\t}                                                                                                                    // 8647\n\t                                                                                                                      // 8648\n\t\t// set                                                                                                               // 8649\n\t\tif ( typeof order === 'number' ) {                                                                                   // 8650\n\t\t\t// Simple column / direction passed in                                                                              // 8651\n\t\t\torder = [ [ order, dir ] ];                                                                                         // 8652\n\t\t}                                                                                                                    // 8653\n\t\telse if ( ! $.isArray( order[0] ) ) {                                                                                // 8654\n\t\t\t// Arguments passed in (list of 1D arrays)                                                                          // 8655\n\t\t\torder = Array.prototype.slice.call( arguments );                                                                    // 8656\n\t\t}                                                                                                                    // 8657\n\t\t// otherwise a 2D array was passed in                                                                                // 8658\n\t                                                                                                                      // 8659\n\t\treturn this.iterator( 'table', function ( settings ) {                                                               // 8660\n\t\t\tsettings.aaSorting = order.slice();                                                                                 // 8661\n\t\t} );                                                                                                                 // 8662\n\t} );                                                                                                                  // 8663\n\t                                                                                                                      // 8664\n\t                                                                                                                      // 8665\n\t/**                                                                                                                   // 8666\n\t * Attach a sort listener to an element for a given column                                                            // 8667\n\t *                                                                                                                    // 8668\n\t * @param {node|jQuery|string} node Identifier for the element(s) to attach the                                       // 8669\n\t *   listener to. This can take the form of a single DOM node, a jQuery                                               // 8670\n\t *   collection of nodes or a jQuery selector which will identify the node(s).                                        // 8671\n\t * @param {integer} column the column that a click on this node will sort on                                          // 8672\n\t * @param {function} [callback] callback function when sort is run                                                    // 8673\n\t * @returns {DataTables.Api} this                                                                                     // 8674\n\t */                                                                                                                   // 8675\n\t_api_register( 'order.listener()', function ( node, column, callback ) {                                              // 8676\n\t\treturn this.iterator( 'table', function ( settings ) {                                                               // 8677\n\t\t\t_fnSortAttachListener( settings, node, column, callback );                                                          // 8678\n\t\t} );                                                                                                                 // 8679\n\t} );                                                                                                                  // 8680\n\t                                                                                                                      // 8681\n\t                                                                                                                      // 8682\n\t// Order by the selected column(s)                                                                                    // 8683\n\t_api_register( [                                                                                                      // 8684\n\t\t'columns().order()',                                                                                                 // 8685\n\t\t'column().order()'                                                                                                   // 8686\n\t], function ( dir ) {                                                                                                 // 8687\n\t\tvar that = this;                                                                                                     // 8688\n\t                                                                                                                      // 8689\n\t\treturn this.iterator( 'table', function ( settings, i ) {                                                            // 8690\n\t\t\tvar sort = [];                                                                                                      // 8691\n\t                                                                                                                      // 8692\n\t\t\t$.each( that[i], function (j, col) {                                                                                // 8693\n\t\t\t\tsort.push( [ col, dir ] );                                                                                         // 8694\n\t\t\t} );                                                                                                                // 8695\n\t                                                                                                                      // 8696\n\t\t\tsettings.aaSorting = sort;                                                                                          // 8697\n\t\t} );                                                                                                                 // 8698\n\t} );                                                                                                                  // 8699\n\t                                                                                                                      // 8700\n\t                                                                                                                      // 8701\n\t                                                                                                                      // 8702\n\t_api_register( 'search()', function ( input, regex, smart, caseInsen ) {                                              // 8703\n\t\tvar ctx = this.context;                                                                                              // 8704\n\t                                                                                                                      // 8705\n\t\tif ( input === undefined ) {                                                                                         // 8706\n\t\t\t// get                                                                                                              // 8707\n\t\t\treturn ctx.length !== 0 ?                                                                                           // 8708\n\t\t\t\tctx[0].oPreviousSearch.sSearch :                                                                                   // 8709\n\t\t\t\tundefined;                                                                                                         // 8710\n\t\t}                                                                                                                    // 8711\n\t                                                                                                                      // 8712\n\t\t// set                                                                                                               // 8713\n\t\treturn this.iterator( 'table', function ( settings ) {                                                               // 8714\n\t\t\tif ( ! settings.oFeatures.bFilter ) {                                                                               // 8715\n\t\t\t\treturn;                                                                                                            // 8716\n\t\t\t}                                                                                                                   // 8717\n\t                                                                                                                      // 8718\n\t\t\t_fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {                                              // 8719\n\t\t\t\t\"sSearch\": input+\"\",                                                                                               // 8720\n\t\t\t\t\"bRegex\":  regex === null ? false : regex,                                                                         // 8721\n\t\t\t\t\"bSmart\":  smart === null ? true  : smart,                                                                         // 8722\n\t\t\t\t\"bCaseInsensitive\": caseInsen === null ? true : caseInsen                                                          // 8723\n\t\t\t} ), 1 );                                                                                                           // 8724\n\t\t} );                                                                                                                 // 8725\n\t} );                                                                                                                  // 8726\n\t                                                                                                                      // 8727\n\t                                                                                                                      // 8728\n\t_api_registerPlural(                                                                                                  // 8729\n\t\t'columns().search()',                                                                                                // 8730\n\t\t'column().search()',                                                                                                 // 8731\n\t\tfunction ( input, regex, smart, caseInsen ) {                                                                        // 8732\n\t\t\treturn this.iterator( 'column', function ( settings, column ) {                                                     // 8733\n\t\t\t\tvar preSearch = settings.aoPreSearchCols;                                                                          // 8734\n\t                                                                                                                      // 8735\n\t\t\t\tif ( input === undefined ) {                                                                                       // 8736\n\t\t\t\t\t// get                                                                                                            // 8737\n\t\t\t\t\treturn preSearch[ column ].sSearch;                                                                               // 8738\n\t\t\t\t}                                                                                                                  // 8739\n\t                                                                                                                      // 8740\n\t\t\t\t// set                                                                                                             // 8741\n\t\t\t\tif ( ! settings.oFeatures.bFilter ) {                                                                              // 8742\n\t\t\t\t\treturn;                                                                                                           // 8743\n\t\t\t\t}                                                                                                                  // 8744\n\t                                                                                                                      // 8745\n\t\t\t\t$.extend( preSearch[ column ], {                                                                                   // 8746\n\t\t\t\t\t\"sSearch\": input+\"\",                                                                                              // 8747\n\t\t\t\t\t\"bRegex\":  regex === null ? false : regex,                                                                        // 8748\n\t\t\t\t\t\"bSmart\":  smart === null ? true  : smart,                                                                        // 8749\n\t\t\t\t\t\"bCaseInsensitive\": caseInsen === null ? true : caseInsen                                                         // 8750\n\t\t\t\t} );                                                                                                               // 8751\n\t                                                                                                                      // 8752\n\t\t\t\t_fnFilterComplete( settings, settings.oPreviousSearch, 1 );                                                        // 8753\n\t\t\t} );                                                                                                                // 8754\n\t\t}                                                                                                                    // 8755\n\t);                                                                                                                    // 8756\n\t                                                                                                                      // 8757\n\t/*                                                                                                                    // 8758\n\t * State API methods                                                                                                  // 8759\n\t */                                                                                                                   // 8760\n\t                                                                                                                      // 8761\n\t_api_register( 'state()', function () {                                                                               // 8762\n\t\treturn this.context.length ?                                                                                         // 8763\n\t\t\tthis.context[0].oSavedState :                                                                                       // 8764\n\t\t\tnull;                                                                                                               // 8765\n\t} );                                                                                                                  // 8766\n\t                                                                                                                      // 8767\n\t                                                                                                                      // 8768\n\t_api_register( 'state.clear()', function () {                                                                         // 8769\n\t\treturn this.iterator( 'table', function ( settings ) {                                                               // 8770\n\t\t\t// Save an empty object                                                                                             // 8771\n\t\t\tsettings.fnStateSaveCallback.call( settings.oInstance, settings, {} );                                              // 8772\n\t\t} );                                                                                                                 // 8773\n\t} );                                                                                                                  // 8774\n\t                                                                                                                      // 8775\n\t                                                                                                                      // 8776\n\t_api_register( 'state.loaded()', function () {                                                                        // 8777\n\t\treturn this.context.length ?                                                                                         // 8778\n\t\t\tthis.context[0].oLoadedState :                                                                                      // 8779\n\t\t\tnull;                                                                                                               // 8780\n\t} );                                                                                                                  // 8781\n\t                                                                                                                      // 8782\n\t                                                                                                                      // 8783\n\t_api_register( 'state.save()', function () {                                                                          // 8784\n\t\treturn this.iterator( 'table', function ( settings ) {                                                               // 8785\n\t\t\t_fnSaveState( settings );                                                                                           // 8786\n\t\t} );                                                                                                                 // 8787\n\t} );                                                                                                                  // 8788\n\t                                                                                                                      // 8789\n\t                                                                                                                      // 8790\n\t                                                                                                                      // 8791\n\t/**                                                                                                                   // 8792\n\t * Provide a common method for plug-ins to check the version of DataTables being                                      // 8793\n\t * used, in order to ensure compatibility.                                                                            // 8794\n\t *                                                                                                                    // 8795\n\t *  @param {string} version Version string to check for, in the format \"X.Y.Z\".                                       // 8796\n\t *    Note that the formats \"X\" and \"X.Y\" are also acceptable.                                                        // 8797\n\t *  @returns {boolean} true if this version of DataTables is greater or equal to                                      // 8798\n\t *    the required version, or false if this version of DataTales is not                                              // 8799\n\t *    suitable                                                                                                        // 8800\n\t *  @static                                                                                                           // 8801\n\t *  @dtopt API-Static                                                                                                 // 8802\n\t *                                                                                                                    // 8803\n\t *  @example                                                                                                          // 8804\n\t *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );                                                                // 8805\n\t */                                                                                                                   // 8806\n\tDataTable.versionCheck = DataTable.fnVersionCheck = function( version )                                               // 8807\n\t{                                                                                                                     // 8808\n\t\tvar aThis = DataTable.version.split('.');                                                                            // 8809\n\t\tvar aThat = version.split('.');                                                                                      // 8810\n\t\tvar iThis, iThat;                                                                                                    // 8811\n\t                                                                                                                      // 8812\n\t\tfor ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {                                                                  // 8813\n\t\t\tiThis = parseInt( aThis[i], 10 ) || 0;                                                                              // 8814\n\t\t\tiThat = parseInt( aThat[i], 10 ) || 0;                                                                              // 8815\n\t                                                                                                                      // 8816\n\t\t\t// Parts are the same, keep comparing                                                                               // 8817\n\t\t\tif (iThis === iThat) {                                                                                              // 8818\n\t\t\t\tcontinue;                                                                                                          // 8819\n\t\t\t}                                                                                                                   // 8820\n\t                                                                                                                      // 8821\n\t\t\t// Parts are different, return immediately                                                                          // 8822\n\t\t\treturn iThis > iThat;                                                                                               // 8823\n\t\t}                                                                                                                    // 8824\n\t                                                                                                                      // 8825\n\t\treturn true;                                                                                                         // 8826\n\t};                                                                                                                    // 8827\n\t                                                                                                                      // 8828\n\t                                                                                                                      // 8829\n\t/**                                                                                                                   // 8830\n\t * Check if a `<table>` node is a DataTable table already or not.                                                     // 8831\n\t *                                                                                                                    // 8832\n\t *  @param {node|jquery|string} table Table node, jQuery object or jQuery                                             // 8833\n\t *      selector for the table to test. Note that if more than more than one                                          // 8834\n\t *      table is passed on, only the first will be checked                                                            // 8835\n\t *  @returns {boolean} true the table given is a DataTable, or false otherwise                                        // 8836\n\t *  @static                                                                                                           // 8837\n\t *  @dtopt API-Static                                                                                                 // 8838\n\t *                                                                                                                    // 8839\n\t *  @example                                                                                                          // 8840\n\t *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {                                                             // 8841\n\t *      $('#example').dataTable();                                                                                    // 8842\n\t *    }                                                                                                               // 8843\n\t */                                                                                                                   // 8844\n\tDataTable.isDataTable = DataTable.fnIsDataTable = function ( table )                                                  // 8845\n\t{                                                                                                                     // 8846\n\t\tvar t = $(table).get(0);                                                                                             // 8847\n\t\tvar is = false;                                                                                                      // 8848\n\t                                                                                                                      // 8849\n\t\t$.each( DataTable.settings, function (i, o) {                                                                        // 8850\n\t\t\tvar head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;                                                     // 8851\n\t\t\tvar foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;                                                     // 8852\n\t                                                                                                                      // 8853\n\t\t\tif ( o.nTable === t || head === t || foot === t ) {                                                                 // 8854\n\t\t\t\tis = true;                                                                                                         // 8855\n\t\t\t}                                                                                                                   // 8856\n\t\t} );                                                                                                                 // 8857\n\t                                                                                                                      // 8858\n\t\treturn is;                                                                                                           // 8859\n\t};                                                                                                                    // 8860\n\t                                                                                                                      // 8861\n\t                                                                                                                      // 8862\n\t/**                                                                                                                   // 8863\n\t * Get all DataTable tables that have been initialised - optionally you can                                           // 8864\n\t * select to get only currently visible tables.                                                                       // 8865\n\t *                                                                                                                    // 8866\n\t *  @param {boolean} [visible=false] Flag to indicate if you want all (default)                                       // 8867\n\t *    or visible tables only.                                                                                         // 8868\n\t *  @returns {array} Array of `table` nodes (not DataTable instances) which are                                       // 8869\n\t *    DataTables                                                                                                      // 8870\n\t *  @static                                                                                                           // 8871\n\t *  @dtopt API-Static                                                                                                 // 8872\n\t *                                                                                                                    // 8873\n\t *  @example                                                                                                          // 8874\n\t *    $.each( $.fn.dataTable.tables(true), function () {                                                              // 8875\n\t *      $(table).DataTable().columns.adjust();                                                                        // 8876\n\t *    } );                                                                                                            // 8877\n\t */                                                                                                                   // 8878\n\tDataTable.tables = DataTable.fnTables = function ( visible )                                                          // 8879\n\t{                                                                                                                     // 8880\n\t\treturn $.map( DataTable.settings, function (o) {                                                                     // 8881\n\t\t\tif ( !visible || (visible && $(o.nTable).is(':visible')) ) {                                                        // 8882\n\t\t\t\treturn o.nTable;                                                                                                   // 8883\n\t\t\t}                                                                                                                   // 8884\n\t\t} );                                                                                                                 // 8885\n\t};                                                                                                                    // 8886\n\t                                                                                                                      // 8887\n\t                                                                                                                      // 8888\n\t/**                                                                                                                   // 8889\n\t * DataTables utility methods                                                                                         // 8890\n\t *                                                                                                                    // 8891\n\t * This namespace provides helper methods that DataTables uses internally to                                          // 8892\n\t * create a DataTable, but which are not exclusively used only for DataTables.                                        // 8893\n\t * These methods can be used by extension authors to save the duplication of                                          // 8894\n\t * code.                                                                                                              // 8895\n\t *                                                                                                                    // 8896\n\t *  @namespace                                                                                                        // 8897\n\t */                                                                                                                   // 8898\n\tDataTable.util = {                                                                                                    // 8899\n\t\t/**                                                                                                                  // 8900\n\t\t * Throttle the calls to a function. Arguments and context are maintained                                            // 8901\n\t\t * for the throttled function.                                                                                       // 8902\n\t\t *                                                                                                                   // 8903\n\t\t * @param {function} fn Function to be called                                                                        // 8904\n\t\t * @param {integer} freq Call frequency in mS                                                                        // 8905\n\t\t * @return {function} Wrapped function                                                                               // 8906\n\t\t */                                                                                                                  // 8907\n\t\tthrottle: _fnThrottle,                                                                                               // 8908\n\t                                                                                                                      // 8909\n\t                                                                                                                      // 8910\n\t\t/**                                                                                                                  // 8911\n\t\t * Escape a string such that it can be used in a regular expression                                                  // 8912\n\t\t *                                                                                                                   // 8913\n\t\t *  @param {string} sVal string to escape                                                                            // 8914\n\t\t *  @returns {string} escaped string                                                                                 // 8915\n\t\t */                                                                                                                  // 8916\n\t\tescapeRegex: _fnEscapeRegex                                                                                          // 8917\n\t};                                                                                                                    // 8918\n\t                                                                                                                      // 8919\n\t                                                                                                                      // 8920\n\t/**                                                                                                                   // 8921\n\t * Convert from camel case parameters to Hungarian notation. This is made public                                      // 8922\n\t * for the extensions to provide the same ability as DataTables core to accept                                        // 8923\n\t * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase                                              // 8924\n\t * parameters.                                                                                                        // 8925\n\t *                                                                                                                    // 8926\n\t *  @param {object} src The model object which holds all parameters that can be                                       // 8927\n\t *    mapped.                                                                                                         // 8928\n\t *  @param {object} user The object to convert from camel case to Hungarian.                                          // 8929\n\t *  @param {boolean} force When set to `true`, properties which already have a                                        // 8930\n\t *    Hungarian value in the `user` object will be overwritten. Otherwise they                                        // 8931\n\t *    won't be.                                                                                                       // 8932\n\t */                                                                                                                   // 8933\n\tDataTable.camelToHungarian = _fnCamelToHungarian;                                                                     // 8934\n\t                                                                                                                      // 8935\n\t                                                                                                                      // 8936\n\t                                                                                                                      // 8937\n\t/**                                                                                                                   // 8938\n\t *                                                                                                                    // 8939\n\t */                                                                                                                   // 8940\n\t_api_register( '$()', function ( selector, opts ) {                                                                   // 8941\n\t\tvar                                                                                                                  // 8942\n\t\t\trows   = this.rows( opts ).nodes(), // Get all rows                                                                 // 8943\n\t\t\tjqRows = $(rows);                                                                                                   // 8944\n\t                                                                                                                      // 8945\n\t\treturn $( [].concat(                                                                                                 // 8946\n\t\t\tjqRows.filter( selector ).toArray(),                                                                                // 8947\n\t\t\tjqRows.find( selector ).toArray()                                                                                   // 8948\n\t\t) );                                                                                                                 // 8949\n\t} );                                                                                                                  // 8950\n\t                                                                                                                      // 8951\n\t                                                                                                                      // 8952\n\t// jQuery functions to operate on the tables                                                                          // 8953\n\t$.each( [ 'on', 'one', 'off' ], function (i, key) {                                                                   // 8954\n\t\t_api_register( key+'()', function ( /* event, handler */ ) {                                                         // 8955\n\t\t\tvar args = Array.prototype.slice.call(arguments);                                                                   // 8956\n\t                                                                                                                      // 8957\n\t\t\t// Add the `dt` namespace automatically if it isn't already present                                                 // 8958\n\t\t\tif ( ! args[0].match(/\\.dt\\b/) ) {                                                                                  // 8959\n\t\t\t\targs[0] += '.dt';                                                                                                  // 8960\n\t\t\t}                                                                                                                   // 8961\n\t                                                                                                                      // 8962\n\t\t\tvar inst = $( this.tables().nodes() );                                                                              // 8963\n\t\t\tinst[key].apply( inst, args );                                                                                      // 8964\n\t\t\treturn this;                                                                                                        // 8965\n\t\t} );                                                                                                                 // 8966\n\t} );                                                                                                                  // 8967\n\t                                                                                                                      // 8968\n\t                                                                                                                      // 8969\n\t_api_register( 'clear()', function () {                                                                               // 8970\n\t\treturn this.iterator( 'table', function ( settings ) {                                                               // 8971\n\t\t\t_fnClearTable( settings );                                                                                          // 8972\n\t\t} );                                                                                                                 // 8973\n\t} );                                                                                                                  // 8974\n\t                                                                                                                      // 8975\n\t                                                                                                                      // 8976\n\t_api_register( 'settings()', function () {                                                                            // 8977\n\t\treturn new _Api( this.context, this.context );                                                                       // 8978\n\t} );                                                                                                                  // 8979\n\t                                                                                                                      // 8980\n\t                                                                                                                      // 8981\n\t_api_register( 'init()', function () {                                                                                // 8982\n\t\tvar ctx = this.context;                                                                                              // 8983\n\t\treturn ctx.length ? ctx[0].oInit : null;                                                                             // 8984\n\t} );                                                                                                                  // 8985\n\t                                                                                                                      // 8986\n\t                                                                                                                      // 8987\n\t_api_register( 'data()', function () {                                                                                // 8988\n\t\treturn this.iterator( 'table', function ( settings ) {                                                               // 8989\n\t\t\treturn _pluck( settings.aoData, '_aData' );                                                                         // 8990\n\t\t} ).flatten();                                                                                                       // 8991\n\t} );                                                                                                                  // 8992\n\t                                                                                                                      // 8993\n\t                                                                                                                      // 8994\n\t_api_register( 'destroy()', function ( remove ) {                                                                     // 8995\n\t\tremove = remove || false;                                                                                            // 8996\n\t                                                                                                                      // 8997\n\t\treturn this.iterator( 'table', function ( settings ) {                                                               // 8998\n\t\t\tvar orig      = settings.nTableWrapper.parentNode;                                                                  // 8999\n\t\t\tvar classes   = settings.oClasses;                                                                                  // 9000\n\t\t\tvar table     = settings.nTable;                                                                                    // 9001\n\t\t\tvar tbody     = settings.nTBody;                                                                                    // 9002\n\t\t\tvar thead     = settings.nTHead;                                                                                    // 9003\n\t\t\tvar tfoot     = settings.nTFoot;                                                                                    // 9004\n\t\t\tvar jqTable   = $(table);                                                                                           // 9005\n\t\t\tvar jqTbody   = $(tbody);                                                                                           // 9006\n\t\t\tvar jqWrapper = $(settings.nTableWrapper);                                                                          // 9007\n\t\t\tvar rows      = $.map( settings.aoData, function (r) { return r.nTr; } );                                           // 9008\n\t\t\tvar i, ien;                                                                                                         // 9009\n\t                                                                                                                      // 9010\n\t\t\t// Flag to note that the table is currently being destroyed - no action                                             // 9011\n\t\t\t// should be taken                                                                                                  // 9012\n\t\t\tsettings.bDestroying = true;                                                                                        // 9013\n\t                                                                                                                      // 9014\n\t\t\t// Fire off the destroy callbacks for plug-ins etc                                                                  // 9015\n\t\t\t_fnCallbackFire( settings, \"aoDestroyCallback\", \"destroy\", [settings] );                                            // 9016\n\t                                                                                                                      // 9017\n\t\t\t// If not being removed from the document, make all columns visible                                                 // 9018\n\t\t\tif ( ! remove ) {                                                                                                   // 9019\n\t\t\t\tnew _Api( settings ).columns().visible( true );                                                                    // 9020\n\t\t\t}                                                                                                                   // 9021\n\t                                                                                                                      // 9022\n\t\t\t// Blitz all `DT` namespaced events (these are internal events, the                                                 // 9023\n\t\t\t// lowercase, `dt` events are user subscribed and they are responsible                                              // 9024\n\t\t\t// for removing them                                                                                                // 9025\n\t\t\tjqWrapper.unbind('.DT').find(':not(tbody *)').unbind('.DT');                                                        // 9026\n\t\t\t$(window).unbind('.DT-'+settings.sInstance);                                                                        // 9027\n\t                                                                                                                      // 9028\n\t\t\t// When scrolling we had to break the table up - restore it                                                         // 9029\n\t\t\tif ( table != thead.parentNode ) {                                                                                  // 9030\n\t\t\t\tjqTable.children('thead').detach();                                                                                // 9031\n\t\t\t\tjqTable.append( thead );                                                                                           // 9032\n\t\t\t}                                                                                                                   // 9033\n\t                                                                                                                      // 9034\n\t\t\tif ( tfoot && table != tfoot.parentNode ) {                                                                         // 9035\n\t\t\t\tjqTable.children('tfoot').detach();                                                                                // 9036\n\t\t\t\tjqTable.append( tfoot );                                                                                           // 9037\n\t\t\t}                                                                                                                   // 9038\n\t                                                                                                                      // 9039\n\t\t\t// Remove the DataTables generated nodes, events and classes                                                        // 9040\n\t\t\tjqTable.detach();                                                                                                   // 9041\n\t\t\tjqWrapper.detach();                                                                                                 // 9042\n\t                                                                                                                      // 9043\n\t\t\tsettings.aaSorting = [];                                                                                            // 9044\n\t\t\tsettings.aaSortingFixed = [];                                                                                       // 9045\n\t\t\t_fnSortingClasses( settings );                                                                                      // 9046\n\t                                                                                                                      // 9047\n\t\t\t$( rows ).removeClass( settings.asStripeClasses.join(' ') );                                                        // 9048\n\t                                                                                                                      // 9049\n\t\t\t$('th, td', thead).removeClass( classes.sSortable+' '+                                                              // 9050\n\t\t\t\tclasses.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone                                           // 9051\n\t\t\t);                                                                                                                  // 9052\n\t                                                                                                                      // 9053\n\t\t\tif ( settings.bJUI ) {                                                                                              // 9054\n\t\t\t\t$('th span.'+classes.sSortIcon+ ', td span.'+classes.sSortIcon, thead).detach();                                   // 9055\n\t\t\t\t$('th, td', thead).each( function () {                                                                             // 9056\n\t\t\t\t\tvar wrapper = $('div.'+classes.sSortJUIWrapper, this);                                                            // 9057\n\t\t\t\t\t$(this).append( wrapper.contents() );                                                                             // 9058\n\t\t\t\t\twrapper.detach();                                                                                                 // 9059\n\t\t\t\t} );                                                                                                               // 9060\n\t\t\t}                                                                                                                   // 9061\n\t                                                                                                                      // 9062\n\t\t\tif ( ! remove && orig ) {                                                                                           // 9063\n\t\t\t\t// insertBefore acts like appendChild if !arg[1]                                                                   // 9064\n\t\t\t\torig.insertBefore( table, settings.nTableReinsertBefore );                                                         // 9065\n\t\t\t}                                                                                                                   // 9066\n\t                                                                                                                      // 9067\n\t\t\t// Add the TR elements back into the table in their original order                                                  // 9068\n\t\t\tjqTbody.children().detach();                                                                                        // 9069\n\t\t\tjqTbody.append( rows );                                                                                             // 9070\n\t                                                                                                                      // 9071\n\t\t\t// Restore the width of the original table - was read from the style property,                                      // 9072\n\t\t\t// so we can restore directly to that                                                                               // 9073\n\t\t\tjqTable                                                                                                             // 9074\n\t\t\t\t.css( 'width', settings.sDestroyWidth )                                                                            // 9075\n\t\t\t\t.removeClass( classes.sTable );                                                                                    // 9076\n\t                                                                                                                      // 9077\n\t\t\t// If the were originally stripe classes - then we add them back here.                                              // 9078\n\t\t\t// Note this is not fool proof (for example if not all rows had stripe                                              // 9079\n\t\t\t// classes - but it's a good effort without getting carried away                                                    // 9080\n\t\t\tien = settings.asDestroyStripes.length;                                                                             // 9081\n\t                                                                                                                      // 9082\n\t\t\tif ( ien ) {                                                                                                        // 9083\n\t\t\t\tjqTbody.children().each( function (i) {                                                                            // 9084\n\t\t\t\t\t$(this).addClass( settings.asDestroyStripes[i % ien] );                                                           // 9085\n\t\t\t\t} );                                                                                                               // 9086\n\t\t\t}                                                                                                                   // 9087\n\t                                                                                                                      // 9088\n\t\t\t/* Remove the settings object from the settings array */                                                            // 9089\n\t\t\tvar idx = $.inArray( settings, DataTable.settings );                                                                // 9090\n\t\t\tif ( idx !== -1 ) {                                                                                                 // 9091\n\t\t\t\tDataTable.settings.splice( idx, 1 );                                                                               // 9092\n\t\t\t}                                                                                                                   // 9093\n\t\t} );                                                                                                                 // 9094\n\t} );                                                                                                                  // 9095\n\t                                                                                                                      // 9096\n\t                                                                                                                      // 9097\n\t// Add the `every()` method for rows, columns and cells in a compact form                                             // 9098\n\t$.each( [ 'column', 'row', 'cell' ], function ( i, type ) {                                                           // 9099\n\t\t_api_register( type+'s().every()', function ( fn ) {                                                                 // 9100\n\t\t\treturn this.iterator( type, function ( settings, idx, idx2 ) {                                                      // 9101\n\t\t\t\t// idx2 is undefined for rows and columns.                                                                         // 9102\n\t\t\t\tfn.call( new _Api( settings )[ type ]( idx, idx2 ) );                                                              // 9103\n\t\t\t} );                                                                                                                // 9104\n\t\t} );                                                                                                                 // 9105\n\t} );                                                                                                                  // 9106\n\t                                                                                                                      // 9107\n\t                                                                                                                      // 9108\n\t// i18n method for extensions to be able to use the language object from the                                          // 9109\n\t// DataTable                                                                                                          // 9110\n\t_api_register( 'i18n()', function ( token, def, plural ) {                                                            // 9111\n\t\tvar ctx = this.context[0];                                                                                           // 9112\n\t\tvar resolved = _fnGetObjectDataFn( token )( ctx.oLanguage );                                                         // 9113\n\t                                                                                                                      // 9114\n\t\tif ( resolved === undefined ) {                                                                                      // 9115\n\t\t\tresolved = def;                                                                                                     // 9116\n\t\t}                                                                                                                    // 9117\n\t                                                                                                                      // 9118\n\t\tif ( plural !== undefined && $.isPlainObject( resolved ) ) {                                                         // 9119\n\t\t\tresolved = resolved[ plural ] !== undefined ?                                                                       // 9120\n\t\t\t\tresolved[ plural ] :                                                                                               // 9121\n\t\t\t\tresolved._;                                                                                                        // 9122\n\t\t}                                                                                                                    // 9123\n\t                                                                                                                      // 9124\n\t\treturn resolved.replace( '%d', plural ); // nb: plural might be undefined,                                           // 9125\n\t} );                                                                                                                  // 9126\n                                                                                                                       // 9127\n\t/**                                                                                                                   // 9128\n\t * Version string for plug-ins to check compatibility. Allowed format is                                              // 9129\n\t * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used                                        // 9130\n\t * only for non-release builds. See http://semver.org/ for more information.                                          // 9131\n\t *  @member                                                                                                           // 9132\n\t *  @type string                                                                                                      // 9133\n\t *  @default Version number                                                                                           // 9134\n\t */                                                                                                                   // 9135\n\tDataTable.version = \"1.10.7\";                                                                                         // 9136\n                                                                                                                       // 9137\n\t/**                                                                                                                   // 9138\n\t * Private data store, containing all of the settings objects that are                                                // 9139\n\t * created for the tables on a given page.                                                                            // 9140\n\t *                                                                                                                    // 9141\n\t * Note that the `DataTable.settings` object is aliased to                                                            // 9142\n\t * `jQuery.fn.dataTableExt` through which it may be accessed and                                                      // 9143\n\t * manipulated, or `jQuery.fn.dataTable.settings`.                                                                    // 9144\n\t *  @member                                                                                                           // 9145\n\t *  @type array                                                                                                       // 9146\n\t *  @default []                                                                                                       // 9147\n\t *  @private                                                                                                          // 9148\n\t */                                                                                                                   // 9149\n\tDataTable.settings = [];                                                                                              // 9150\n                                                                                                                       // 9151\n\t/**                                                                                                                   // 9152\n\t * Object models container, for the various models that DataTables has                                                // 9153\n\t * available to it. These models define the objects that are used to hold                                             // 9154\n\t * the active state and configuration of the table.                                                                   // 9155\n\t *  @namespace                                                                                                        // 9156\n\t */                                                                                                                   // 9157\n\tDataTable.models = {};                                                                                                // 9158\n\t                                                                                                                      // 9159\n\t                                                                                                                      // 9160\n\t                                                                                                                      // 9161\n\t/**                                                                                                                   // 9162\n\t * Template object for the way in which DataTables holds information about                                            // 9163\n\t * search information for the global filter and individual column filters.                                            // 9164\n\t *  @namespace                                                                                                        // 9165\n\t */                                                                                                                   // 9166\n\tDataTable.models.oSearch = {                                                                                          // 9167\n\t\t/**                                                                                                                  // 9168\n\t\t * Flag to indicate if the filtering should be case insensitive or not                                               // 9169\n\t\t *  @type boolean                                                                                                    // 9170\n\t\t *  @default true                                                                                                    // 9171\n\t\t */                                                                                                                  // 9172\n\t\t\"bCaseInsensitive\": true,                                                                                            // 9173\n\t                                                                                                                      // 9174\n\t\t/**                                                                                                                  // 9175\n\t\t * Applied search term                                                                                               // 9176\n\t\t *  @type string                                                                                                     // 9177\n\t\t *  @default <i>Empty string</i>                                                                                     // 9178\n\t\t */                                                                                                                  // 9179\n\t\t\"sSearch\": \"\",                                                                                                       // 9180\n\t                                                                                                                      // 9181\n\t\t/**                                                                                                                  // 9182\n\t\t * Flag to indicate if the search term should be interpreted as a                                                    // 9183\n\t\t * regular expression (true) or not (false) and therefore and special                                                // 9184\n\t\t * regex characters escaped.                                                                                         // 9185\n\t\t *  @type boolean                                                                                                    // 9186\n\t\t *  @default false                                                                                                   // 9187\n\t\t */                                                                                                                  // 9188\n\t\t\"bRegex\": false,                                                                                                     // 9189\n\t                                                                                                                      // 9190\n\t\t/**                                                                                                                  // 9191\n\t\t * Flag to indicate if DataTables is to use its smart filtering or not.                                              // 9192\n\t\t *  @type boolean                                                                                                    // 9193\n\t\t *  @default true                                                                                                    // 9194\n\t\t */                                                                                                                  // 9195\n\t\t\"bSmart\": true                                                                                                       // 9196\n\t};                                                                                                                    // 9197\n\t                                                                                                                      // 9198\n\t                                                                                                                      // 9199\n\t                                                                                                                      // 9200\n\t                                                                                                                      // 9201\n\t/**                                                                                                                   // 9202\n\t * Template object for the way in which DataTables holds information about                                            // 9203\n\t * each individual row. This is the object format used for the settings                                               // 9204\n\t * aoData array.                                                                                                      // 9205\n\t *  @namespace                                                                                                        // 9206\n\t */                                                                                                                   // 9207\n\tDataTable.models.oRow = {                                                                                             // 9208\n\t\t/**                                                                                                                  // 9209\n\t\t * TR element for the row                                                                                            // 9210\n\t\t *  @type node                                                                                                       // 9211\n\t\t *  @default null                                                                                                    // 9212\n\t\t */                                                                                                                  // 9213\n\t\t\"nTr\": null,                                                                                                         // 9214\n\t                                                                                                                      // 9215\n\t\t/**                                                                                                                  // 9216\n\t\t * Array of TD elements for each row. This is null until the row has been                                            // 9217\n\t\t * created.                                                                                                          // 9218\n\t\t *  @type array nodes                                                                                                // 9219\n\t\t *  @default []                                                                                                      // 9220\n\t\t */                                                                                                                  // 9221\n\t\t\"anCells\": null,                                                                                                     // 9222\n\t                                                                                                                      // 9223\n\t\t/**                                                                                                                  // 9224\n\t\t * Data object from the original data source for the row. This is either                                             // 9225\n\t\t * an array if using the traditional form of DataTables, or an object if                                             // 9226\n\t\t * using mData options. The exact type will depend on the passed in                                                  // 9227\n\t\t * data from the data source, or will be an array if using DOM a data                                                // 9228\n\t\t * source.                                                                                                           // 9229\n\t\t *  @type array|object                                                                                               // 9230\n\t\t *  @default []                                                                                                      // 9231\n\t\t */                                                                                                                  // 9232\n\t\t\"_aData\": [],                                                                                                        // 9233\n\t                                                                                                                      // 9234\n\t\t/**                                                                                                                  // 9235\n\t\t * Sorting data cache - this array is ostensibly the same length as the                                              // 9236\n\t\t * number of columns (although each index is generated only as it is                                                 // 9237\n\t\t * needed), and holds the data that is used for sorting each column in the                                           // 9238\n\t\t * row. We do this cache generation at the start of the sort in order that                                           // 9239\n\t\t * the formatting of the sort data need be done only once for each cell                                              // 9240\n\t\t * per sort. This array should not be read from or written to by anything                                            // 9241\n\t\t * other than the master sorting methods.                                                                            // 9242\n\t\t *  @type array                                                                                                      // 9243\n\t\t *  @default null                                                                                                    // 9244\n\t\t *  @private                                                                                                         // 9245\n\t\t */                                                                                                                  // 9246\n\t\t\"_aSortData\": null,                                                                                                  // 9247\n\t                                                                                                                      // 9248\n\t\t/**                                                                                                                  // 9249\n\t\t * Per cell filtering data cache. As per the sort data cache, used to                                                // 9250\n\t\t * increase the performance of the filtering in DataTables                                                           // 9251\n\t\t *  @type array                                                                                                      // 9252\n\t\t *  @default null                                                                                                    // 9253\n\t\t *  @private                                                                                                         // 9254\n\t\t */                                                                                                                  // 9255\n\t\t\"_aFilterData\": null,                                                                                                // 9256\n\t                                                                                                                      // 9257\n\t\t/**                                                                                                                  // 9258\n\t\t * Filtering data cache. This is the same as the cell filtering cache, but                                           // 9259\n\t\t * in this case a string rather than an array. This is easily computed with                                          // 9260\n\t\t * a join on `_aFilterData`, but is provided as a cache so the join isn't                                            // 9261\n\t\t * needed on every search (memory traded for performance)                                                            // 9262\n\t\t *  @type array                                                                                                      // 9263\n\t\t *  @default null                                                                                                    // 9264\n\t\t *  @private                                                                                                         // 9265\n\t\t */                                                                                                                  // 9266\n\t\t\"_sFilterRow\": null,                                                                                                 // 9267\n\t                                                                                                                      // 9268\n\t\t/**                                                                                                                  // 9269\n\t\t * Cache of the class name that DataTables has applied to the row, so we                                             // 9270\n\t\t * can quickly look at this variable rather than needing to do a DOM check                                           // 9271\n\t\t * on className for the nTr property.                                                                                // 9272\n\t\t *  @type string                                                                                                     // 9273\n\t\t *  @default <i>Empty string</i>                                                                                     // 9274\n\t\t *  @private                                                                                                         // 9275\n\t\t */                                                                                                                  // 9276\n\t\t\"_sRowStripe\": \"\",                                                                                                   // 9277\n\t                                                                                                                      // 9278\n\t\t/**                                                                                                                  // 9279\n\t\t * Denote if the original data source was from the DOM, or the data source                                           // 9280\n\t\t * object. This is used for invalidating data, so DataTables can                                                     // 9281\n\t\t * automatically read data from the original source, unless uninstructed                                             // 9282\n\t\t * otherwise.                                                                                                        // 9283\n\t\t *  @type string                                                                                                     // 9284\n\t\t *  @default null                                                                                                    // 9285\n\t\t *  @private                                                                                                         // 9286\n\t\t */                                                                                                                  // 9287\n\t\t\"src\": null                                                                                                          // 9288\n\t};                                                                                                                    // 9289\n\t                                                                                                                      // 9290\n\t                                                                                                                      // 9291\n\t/**                                                                                                                   // 9292\n\t * Template object for the column information object in DataTables. This object                                       // 9293\n\t * is held in the settings aoColumns array and contains all the information that                                      // 9294\n\t * DataTables needs about each individual column.                                                                     // 9295\n\t *                                                                                                                    // 9296\n\t * Note that this object is related to {@link DataTable.defaults.column}                                              // 9297\n\t * but this one is the internal data store for DataTables's cache of columns.                                         // 9298\n\t * It should NOT be manipulated outside of DataTables. Any configuration should                                       // 9299\n\t * be done through the initialisation options.                                                                        // 9300\n\t *  @namespace                                                                                                        // 9301\n\t */                                                                                                                   // 9302\n\tDataTable.models.oColumn = {                                                                                          // 9303\n\t\t/**                                                                                                                  // 9304\n\t\t * Column index. This could be worked out on-the-fly with $.inArray, but it                                          // 9305\n\t\t * is faster to just hold it as a variable                                                                           // 9306\n\t\t *  @type integer                                                                                                    // 9307\n\t\t *  @default null                                                                                                    // 9308\n\t\t */                                                                                                                  // 9309\n\t\t\"idx\": null,                                                                                                         // 9310\n\t                                                                                                                      // 9311\n\t\t/**                                                                                                                  // 9312\n\t\t * A list of the columns that sorting should occur on when this column                                               // 9313\n\t\t * is sorted. That this property is an array allows multi-column sorting                                             // 9314\n\t\t * to be defined for a column (for example first name / last name columns                                            // 9315\n\t\t * would benefit from this). The values are integers pointing to the                                                 // 9316\n\t\t * columns to be sorted on (typically it will be a single integer pointing                                           // 9317\n\t\t * at itself, but that doesn't need to be the case).                                                                 // 9318\n\t\t *  @type array                                                                                                      // 9319\n\t\t */                                                                                                                  // 9320\n\t\t\"aDataSort\": null,                                                                                                   // 9321\n\t                                                                                                                      // 9322\n\t\t/**                                                                                                                  // 9323\n\t\t * Define the sorting directions that are applied to the column, in sequence                                         // 9324\n\t\t * as the column is repeatedly sorted upon - i.e. the first value is used                                            // 9325\n\t\t * as the sorting direction when the column if first sorted (clicked on).                                            // 9326\n\t\t * Sort it again (click again) and it will move on to the next index.                                                // 9327\n\t\t * Repeat until loop.                                                                                                // 9328\n\t\t *  @type array                                                                                                      // 9329\n\t\t */                                                                                                                  // 9330\n\t\t\"asSorting\": null,                                                                                                   // 9331\n\t                                                                                                                      // 9332\n\t\t/**                                                                                                                  // 9333\n\t\t * Flag to indicate if the column is searchable, and thus should be included                                         // 9334\n\t\t * in the filtering or not.                                                                                          // 9335\n\t\t *  @type boolean                                                                                                    // 9336\n\t\t */                                                                                                                  // 9337\n\t\t\"bSearchable\": null,                                                                                                 // 9338\n\t                                                                                                                      // 9339\n\t\t/**                                                                                                                  // 9340\n\t\t * Flag to indicate if the column is sortable or not.                                                                // 9341\n\t\t *  @type boolean                                                                                                    // 9342\n\t\t */                                                                                                                  // 9343\n\t\t\"bSortable\": null,                                                                                                   // 9344\n\t                                                                                                                      // 9345\n\t\t/**                                                                                                                  // 9346\n\t\t * Flag to indicate if the column is currently visible in the table or not                                           // 9347\n\t\t *  @type boolean                                                                                                    // 9348\n\t\t */                                                                                                                  // 9349\n\t\t\"bVisible\": null,                                                                                                    // 9350\n\t                                                                                                                      // 9351\n\t\t/**                                                                                                                  // 9352\n\t\t * Store for manual type assignment using the `column.type` option. This                                             // 9353\n\t\t * is held in store so we can manipulate the column's `sType` property.                                              // 9354\n\t\t *  @type string                                                                                                     // 9355\n\t\t *  @default null                                                                                                    // 9356\n\t\t *  @private                                                                                                         // 9357\n\t\t */                                                                                                                  // 9358\n\t\t\"_sManualType\": null,                                                                                                // 9359\n\t                                                                                                                      // 9360\n\t\t/**                                                                                                                  // 9361\n\t\t * Flag to indicate if HTML5 data attributes should be used as the data                                              // 9362\n\t\t * source for filtering or sorting. True is either are.                                                              // 9363\n\t\t *  @type boolean                                                                                                    // 9364\n\t\t *  @default false                                                                                                   // 9365\n\t\t *  @private                                                                                                         // 9366\n\t\t */                                                                                                                  // 9367\n\t\t\"_bAttrSrc\": false,                                                                                                  // 9368\n\t                                                                                                                      // 9369\n\t\t/**                                                                                                                  // 9370\n\t\t * Developer definable function that is called whenever a cell is created (Ajax source,                              // 9371\n\t\t * etc) or processed for input (DOM source). This can be used as a compliment to mRender                             // 9372\n\t\t * allowing you to modify the DOM element (add background colour for example) when the                               // 9373\n\t\t * element is available.                                                                                             // 9374\n\t\t *  @type function                                                                                                   // 9375\n\t\t *  @param {element} nTd The TD node that has been created                                                           // 9376\n\t\t *  @param {*} sData The Data for the cell                                                                           // 9377\n\t\t *  @param {array|object} oData The data for the whole row                                                           // 9378\n\t\t *  @param {int} iRow The row index for the aoData data store                                                        // 9379\n\t\t *  @default null                                                                                                    // 9380\n\t\t */                                                                                                                  // 9381\n\t\t\"fnCreatedCell\": null,                                                                                               // 9382\n\t                                                                                                                      // 9383\n\t\t/**                                                                                                                  // 9384\n\t\t * Function to get data from a cell in a column. You should <b>never</b>                                             // 9385\n\t\t * access data directly through _aData internally in DataTables - always use                                         // 9386\n\t\t * the method attached to this property. It allows mData to function as                                              // 9387\n\t\t * required. This function is automatically assigned by the column                                                   // 9388\n\t\t * initialisation method                                                                                             // 9389\n\t\t *  @type function                                                                                                   // 9390\n\t\t *  @param {array|object} oData The data array/object for the array                                                  // 9391\n\t\t *    (i.e. aoData[]._aData)                                                                                         // 9392\n\t\t *  @param {string} sSpecific The specific data type you want to get -                                               // 9393\n\t\t *    'display', 'type' 'filter' 'sort'                                                                              // 9394\n\t\t *  @returns {*} The data for the cell from the given row's data                                                     // 9395\n\t\t *  @default null                                                                                                    // 9396\n\t\t */                                                                                                                  // 9397\n\t\t\"fnGetData\": null,                                                                                                   // 9398\n\t                                                                                                                      // 9399\n\t\t/**                                                                                                                  // 9400\n\t\t * Function to set data for a cell in the column. You should <b>never</b>                                            // 9401\n\t\t * set the data directly to _aData internally in DataTables - always use                                             // 9402\n\t\t * this method. It allows mData to function as required. This function                                               // 9403\n\t\t * is automatically assigned by the column initialisation method                                                     // 9404\n\t\t *  @type function                                                                                                   // 9405\n\t\t *  @param {array|object} oData The data array/object for the array                                                  // 9406\n\t\t *    (i.e. aoData[]._aData)                                                                                         // 9407\n\t\t *  @param {*} sValue Value to set                                                                                   // 9408\n\t\t *  @default null                                                                                                    // 9409\n\t\t */                                                                                                                  // 9410\n\t\t\"fnSetData\": null,                                                                                                   // 9411\n\t                                                                                                                      // 9412\n\t\t/**                                                                                                                  // 9413\n\t\t * Property to read the value for the cells in the column from the data                                              // 9414\n\t\t * source array / object. If null, then the default content is used, if a                                            // 9415\n\t\t * function is given then the return from the function is used.                                                      // 9416\n\t\t *  @type function|int|string|null                                                                                   // 9417\n\t\t *  @default null                                                                                                    // 9418\n\t\t */                                                                                                                  // 9419\n\t\t\"mData\": null,                                                                                                       // 9420\n\t                                                                                                                      // 9421\n\t\t/**                                                                                                                  // 9422\n\t\t * Partner property to mData which is used (only when defined) to get                                                // 9423\n\t\t * the data - i.e. it is basically the same as mData, but without the                                                // 9424\n\t\t * 'set' option, and also the data fed to it is the result from mData.                                               // 9425\n\t\t * This is the rendering method to match the data method of mData.                                                   // 9426\n\t\t *  @type function|int|string|null                                                                                   // 9427\n\t\t *  @default null                                                                                                    // 9428\n\t\t */                                                                                                                  // 9429\n\t\t\"mRender\": null,                                                                                                     // 9430\n\t                                                                                                                      // 9431\n\t\t/**                                                                                                                  // 9432\n\t\t * Unique header TH/TD element for this column - this is what the sorting                                            // 9433\n\t\t * listener is attached to (if sorting is enabled.)                                                                  // 9434\n\t\t *  @type node                                                                                                       // 9435\n\t\t *  @default null                                                                                                    // 9436\n\t\t */                                                                                                                  // 9437\n\t\t\"nTh\": null,                                                                                                         // 9438\n\t                                                                                                                      // 9439\n\t\t/**                                                                                                                  // 9440\n\t\t * Unique footer TH/TD element for this column (if there is one). Not used                                           // 9441\n\t\t * in DataTables as such, but can be used for plug-ins to reference the                                              // 9442\n\t\t * footer for each column.                                                                                           // 9443\n\t\t *  @type node                                                                                                       // 9444\n\t\t *  @default null                                                                                                    // 9445\n\t\t */                                                                                                                  // 9446\n\t\t\"nTf\": null,                                                                                                         // 9447\n\t                                                                                                                      // 9448\n\t\t/**                                                                                                                  // 9449\n\t\t * The class to apply to all TD elements in the table's TBODY for the column                                         // 9450\n\t\t *  @type string                                                                                                     // 9451\n\t\t *  @default null                                                                                                    // 9452\n\t\t */                                                                                                                  // 9453\n\t\t\"sClass\": null,                                                                                                      // 9454\n\t                                                                                                                      // 9455\n\t\t/**                                                                                                                  // 9456\n\t\t * When DataTables calculates the column widths to assign to each column,                                            // 9457\n\t\t * it finds the longest string in each column and then constructs a                                                  // 9458\n\t\t * temporary table and reads the widths from that. The problem with this                                             // 9459\n\t\t * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer                                               // 9460\n\t\t * string - thus the calculation can go wrong (doing it properly and putting                                         // 9461\n\t\t * it into an DOM object and measuring that is horribly(!) slow). Thus as                                            // 9462\n\t\t * a \"work around\" we provide this option. It will append its value to the                                           // 9463\n\t\t * text that is found to be the longest string for the column - i.e. padding.                                        // 9464\n\t\t *  @type string                                                                                                     // 9465\n\t\t */                                                                                                                  // 9466\n\t\t\"sContentPadding\": null,                                                                                             // 9467\n\t                                                                                                                      // 9468\n\t\t/**                                                                                                                  // 9469\n\t\t * Allows a default value to be given for a column's data, and will be used                                          // 9470\n\t\t * whenever a null data source is encountered (this can be because mData                                             // 9471\n\t\t * is set to null, or because the data source itself is null).                                                       // 9472\n\t\t *  @type string                                                                                                     // 9473\n\t\t *  @default null                                                                                                    // 9474\n\t\t */                                                                                                                  // 9475\n\t\t\"sDefaultContent\": null,                                                                                             // 9476\n\t                                                                                                                      // 9477\n\t\t/**                                                                                                                  // 9478\n\t\t * Name for the column, allowing reference to the column by name as well as                                          // 9479\n\t\t * by index (needs a lookup to work by name).                                                                        // 9480\n\t\t *  @type string                                                                                                     // 9481\n\t\t */                                                                                                                  // 9482\n\t\t\"sName\": null,                                                                                                       // 9483\n\t                                                                                                                      // 9484\n\t\t/**                                                                                                                  // 9485\n\t\t * Custom sorting data type - defines which of the available plug-ins in                                             // 9486\n\t\t * afnSortData the custom sorting will use - if any is defined.                                                      // 9487\n\t\t *  @type string                                                                                                     // 9488\n\t\t *  @default std                                                                                                     // 9489\n\t\t */                                                                                                                  // 9490\n\t\t\"sSortDataType\": 'std',                                                                                              // 9491\n\t                                                                                                                      // 9492\n\t\t/**                                                                                                                  // 9493\n\t\t * Class to be applied to the header element when sorting on this column                                             // 9494\n\t\t *  @type string                                                                                                     // 9495\n\t\t *  @default null                                                                                                    // 9496\n\t\t */                                                                                                                  // 9497\n\t\t\"sSortingClass\": null,                                                                                               // 9498\n\t                                                                                                                      // 9499\n\t\t/**                                                                                                                  // 9500\n\t\t * Class to be applied to the header element when sorting on this column -                                           // 9501\n\t\t * when jQuery UI theming is used.                                                                                   // 9502\n\t\t *  @type string                                                                                                     // 9503\n\t\t *  @default null                                                                                                    // 9504\n\t\t */                                                                                                                  // 9505\n\t\t\"sSortingClassJUI\": null,                                                                                            // 9506\n\t                                                                                                                      // 9507\n\t\t/**                                                                                                                  // 9508\n\t\t * Title of the column - what is seen in the TH element (nTh).                                                       // 9509\n\t\t *  @type string                                                                                                     // 9510\n\t\t */                                                                                                                  // 9511\n\t\t\"sTitle\": null,                                                                                                      // 9512\n\t                                                                                                                      // 9513\n\t\t/**                                                                                                                  // 9514\n\t\t * Column sorting and filtering type                                                                                 // 9515\n\t\t *  @type string                                                                                                     // 9516\n\t\t *  @default null                                                                                                    // 9517\n\t\t */                                                                                                                  // 9518\n\t\t\"sType\": null,                                                                                                       // 9519\n\t                                                                                                                      // 9520\n\t\t/**                                                                                                                  // 9521\n\t\t * Width of the column                                                                                               // 9522\n\t\t *  @type string                                                                                                     // 9523\n\t\t *  @default null                                                                                                    // 9524\n\t\t */                                                                                                                  // 9525\n\t\t\"sWidth\": null,                                                                                                      // 9526\n\t                                                                                                                      // 9527\n\t\t/**                                                                                                                  // 9528\n\t\t * Width of the column when it was first \"encountered\"                                                               // 9529\n\t\t *  @type string                                                                                                     // 9530\n\t\t *  @default null                                                                                                    // 9531\n\t\t */                                                                                                                  // 9532\n\t\t\"sWidthOrig\": null                                                                                                   // 9533\n\t};                                                                                                                    // 9534\n\t                                                                                                                      // 9535\n\t                                                                                                                      // 9536\n\t/*                                                                                                                    // 9537\n\t * Developer note: The properties of the object below are given in Hungarian                                          // 9538\n\t * notation, that was used as the interface for DataTables prior to v1.10, however                                    // 9539\n\t * from v1.10 onwards the primary interface is camel case. In order to avoid                                          // 9540\n\t * breaking backwards compatibility utterly with this change, the Hungarian                                           // 9541\n\t * version is still, internally the primary interface, but is is not documented                                       // 9542\n\t * - hence the @name tags in each doc comment. This allows a Javascript function                                      // 9543\n\t * to create a map from Hungarian notation to camel case (going the other direction                                   // 9544\n\t * would require each property to be listed, which would at around 3K to the size                                     // 9545\n\t * of DataTables, while this method is about a 0.5K hit.                                                              // 9546\n\t *                                                                                                                    // 9547\n\t * Ultimately this does pave the way for Hungarian notation to be dropped                                             // 9548\n\t * completely, but that is a massive amount of work and will break current                                            // 9549\n\t * installs (therefore is on-hold until v2).                                                                          // 9550\n\t */                                                                                                                   // 9551\n\t                                                                                                                      // 9552\n\t/**                                                                                                                   // 9553\n\t * Initialisation options that can be given to DataTables at initialisation                                           // 9554\n\t * time.                                                                                                              // 9555\n\t *  @namespace                                                                                                        // 9556\n\t */                                                                                                                   // 9557\n\tDataTable.defaults = {                                                                                                // 9558\n\t\t/**                                                                                                                  // 9559\n\t\t * An array of data to use for the table, passed in at initialisation which                                          // 9560\n\t\t * will be used in preference to any data which is already in the DOM. This is                                       // 9561\n\t\t * particularly useful for constructing tables purely in Javascript, for                                             // 9562\n\t\t * example with a custom Ajax call.                                                                                  // 9563\n\t\t *  @type array                                                                                                      // 9564\n\t\t *  @default null                                                                                                    // 9565\n\t\t *                                                                                                                   // 9566\n\t\t *  @dtopt Option                                                                                                    // 9567\n\t\t *  @name DataTable.defaults.data                                                                                    // 9568\n\t\t *                                                                                                                   // 9569\n\t\t *  @example                                                                                                         // 9570\n\t\t *    // Using a 2D array data source                                                                                // 9571\n\t\t *    $(document).ready( function () {                                                                               // 9572\n\t\t *      $('#example').dataTable( {                                                                                   // 9573\n\t\t *        \"data\": [                                                                                                  // 9574\n\t\t *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],                                                 // 9575\n\t\t *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],                                                 // 9576\n\t\t *        ],                                                                                                         // 9577\n\t\t *        \"columns\": [                                                                                               // 9578\n\t\t *          { \"title\": \"Engine\" },                                                                                   // 9579\n\t\t *          { \"title\": \"Browser\" },                                                                                  // 9580\n\t\t *          { \"title\": \"Platform\" },                                                                                 // 9581\n\t\t *          { \"title\": \"Version\" },                                                                                  // 9582\n\t\t *          { \"title\": \"Grade\" }                                                                                     // 9583\n\t\t *        ]                                                                                                          // 9584\n\t\t *      } );                                                                                                         // 9585\n\t\t *    } );                                                                                                           // 9586\n\t\t *                                                                                                                   // 9587\n\t\t *  @example                                                                                                         // 9588\n\t\t *    // Using an array of objects as a data source (`data`)                                                         // 9589\n\t\t *    $(document).ready( function () {                                                                               // 9590\n\t\t *      $('#example').dataTable( {                                                                                   // 9591\n\t\t *        \"data\": [                                                                                                  // 9592\n\t\t *          {                                                                                                        // 9593\n\t\t *            \"engine\":   \"Trident\",                                                                                 // 9594\n\t\t *            \"browser\":  \"Internet Explorer 4.0\",                                                                   // 9595\n\t\t *            \"platform\": \"Win 95+\",                                                                                 // 9596\n\t\t *            \"version\":  4,                                                                                         // 9597\n\t\t *            \"grade\":    \"X\"                                                                                        // 9598\n\t\t *          },                                                                                                       // 9599\n\t\t *          {                                                                                                        // 9600\n\t\t *            \"engine\":   \"Trident\",                                                                                 // 9601\n\t\t *            \"browser\":  \"Internet Explorer 5.0\",                                                                   // 9602\n\t\t *            \"platform\": \"Win 95+\",                                                                                 // 9603\n\t\t *            \"version\":  5,                                                                                         // 9604\n\t\t *            \"grade\":    \"C\"                                                                                        // 9605\n\t\t *          }                                                                                                        // 9606\n\t\t *        ],                                                                                                         // 9607\n\t\t *        \"columns\": [                                                                                               // 9608\n\t\t *          { \"title\": \"Engine\",   \"data\": \"engine\" },                                                               // 9609\n\t\t *          { \"title\": \"Browser\",  \"data\": \"browser\" },                                                              // 9610\n\t\t *          { \"title\": \"Platform\", \"data\": \"platform\" },                                                             // 9611\n\t\t *          { \"title\": \"Version\",  \"data\": \"version\" },                                                              // 9612\n\t\t *          { \"title\": \"Grade\",    \"data\": \"grade\" }                                                                 // 9613\n\t\t *        ]                                                                                                          // 9614\n\t\t *      } );                                                                                                         // 9615\n\t\t *    } );                                                                                                           // 9616\n\t\t */                                                                                                                  // 9617\n\t\t\"aaData\": null,                                                                                                      // 9618\n\t                                                                                                                      // 9619\n\t                                                                                                                      // 9620\n\t\t/**                                                                                                                  // 9621\n\t\t * If ordering is enabled, then DataTables will perform a first pass sort on                                         // 9622\n\t\t * initialisation. You can define which column(s) the sort is performed                                              // 9623\n\t\t * upon, and the sorting direction, with this variable. The `sorting` array                                          // 9624\n\t\t * should contain an array for each column to be sorted initially containing                                         // 9625\n\t\t * the column's index and a direction string ('asc' or 'desc').                                                      // 9626\n\t\t *  @type array                                                                                                      // 9627\n\t\t *  @default [[0,'asc']]                                                                                             // 9628\n\t\t *                                                                                                                   // 9629\n\t\t *  @dtopt Option                                                                                                    // 9630\n\t\t *  @name DataTable.defaults.order                                                                                   // 9631\n\t\t *                                                                                                                   // 9632\n\t\t *  @example                                                                                                         // 9633\n\t\t *    // Sort by 3rd column first, and then 4th column                                                               // 9634\n\t\t *    $(document).ready( function() {                                                                                // 9635\n\t\t *      $('#example').dataTable( {                                                                                   // 9636\n\t\t *        \"order\": [[2,'asc'], [3,'desc']]                                                                           // 9637\n\t\t *      } );                                                                                                         // 9638\n\t\t *    } );                                                                                                           // 9639\n\t\t *                                                                                                                   // 9640\n\t\t *    // No initial sorting                                                                                          // 9641\n\t\t *    $(document).ready( function() {                                                                                // 9642\n\t\t *      $('#example').dataTable( {                                                                                   // 9643\n\t\t *        \"order\": []                                                                                                // 9644\n\t\t *      } );                                                                                                         // 9645\n\t\t *    } );                                                                                                           // 9646\n\t\t */                                                                                                                  // 9647\n\t\t\"aaSorting\": [[0,'asc']],                                                                                            // 9648\n\t                                                                                                                      // 9649\n\t                                                                                                                      // 9650\n\t\t/**                                                                                                                  // 9651\n\t\t * This parameter is basically identical to the `sorting` parameter, but                                             // 9652\n\t\t * cannot be overridden by user interaction with the table. What this means                                          // 9653\n\t\t * is that you could have a column (visible or hidden) which the sorting                                             // 9654\n\t\t * will always be forced on first - any sorting after that (from the user)                                           // 9655\n\t\t * will then be performed as required. This can be useful for grouping rows                                          // 9656\n\t\t * together.                                                                                                         // 9657\n\t\t *  @type array                                                                                                      // 9658\n\t\t *  @default null                                                                                                    // 9659\n\t\t *                                                                                                                   // 9660\n\t\t *  @dtopt Option                                                                                                    // 9661\n\t\t *  @name DataTable.defaults.orderFixed                                                                              // 9662\n\t\t *                                                                                                                   // 9663\n\t\t *  @example                                                                                                         // 9664\n\t\t *    $(document).ready( function() {                                                                                // 9665\n\t\t *      $('#example').dataTable( {                                                                                   // 9666\n\t\t *        \"orderFixed\": [[0,'asc']]                                                                                  // 9667\n\t\t *      } );                                                                                                         // 9668\n\t\t *    } )                                                                                                            // 9669\n\t\t */                                                                                                                  // 9670\n\t\t\"aaSortingFixed\": [],                                                                                                // 9671\n\t                                                                                                                      // 9672\n\t                                                                                                                      // 9673\n\t\t/**                                                                                                                  // 9674\n\t\t * DataTables can be instructed to load data to display in the table from a                                          // 9675\n\t\t * Ajax source. This option defines how that Ajax call is made and where to.                                         // 9676\n\t\t *                                                                                                                   // 9677\n\t\t * The `ajax` property has three different modes of operation, depending on                                          // 9678\n\t\t * how it is defined. These are:                                                                                     // 9679\n\t\t *                                                                                                                   // 9680\n\t\t * * `string` - Set the URL from where the data should be loaded from.                                               // 9681\n\t\t * * `object` - Define properties for `jQuery.ajax`.                                                                 // 9682\n\t\t * * `function` - Custom data get function                                                                           // 9683\n\t\t *                                                                                                                   // 9684\n\t\t * `string`                                                                                                          // 9685\n\t\t * --------                                                                                                          // 9686\n\t\t *                                                                                                                   // 9687\n\t\t * As a string, the `ajax` property simply defines the URL from which                                                // 9688\n\t\t * DataTables will load data.                                                                                        // 9689\n\t\t *                                                                                                                   // 9690\n\t\t * `object`                                                                                                          // 9691\n\t\t * --------                                                                                                          // 9692\n\t\t *                                                                                                                   // 9693\n\t\t * As an object, the parameters in the object are passed to                                                          // 9694\n\t\t * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control                                           // 9695\n\t\t * of the Ajax request. DataTables has a number of default parameters which                                          // 9696\n\t\t * you can override using this option. Please refer to the jQuery                                                    // 9697\n\t\t * documentation for a full description of the options available, although                                           // 9698\n\t\t * the following parameters provide additional options in DataTables or                                              // 9699\n\t\t * require special consideration:                                                                                    // 9700\n\t\t *                                                                                                                   // 9701\n\t\t * * `data` - As with jQuery, `data` can be provided as an object, but it                                            // 9702\n\t\t *   can also be used as a function to manipulate the data DataTables sends                                          // 9703\n\t\t *   to the server. The function takes a single parameter, an object of                                              // 9704\n\t\t *   parameters with the values that DataTables has readied for sending. An                                          // 9705\n\t\t *   object may be returned which will be merged into the DataTables                                                 // 9706\n\t\t *   defaults, or you can add the items to the object that was passed in and                                         // 9707\n\t\t *   not return anything from the function. This supersedes `fnServerParams`                                         // 9708\n\t\t *   from DataTables 1.9-.                                                                                           // 9709\n\t\t *                                                                                                                   // 9710\n\t\t * * `dataSrc` - By default DataTables will look for the property `data` (or                                         // 9711\n\t\t *   `aaData` for compatibility with DataTables 1.9-) when obtaining data                                            // 9712\n\t\t *   from an Ajax source or for server-side processing - this parameter                                              // 9713\n\t\t *   allows that property to be changed. You can use Javascript dotted                                               // 9714\n\t\t *   object notation to get a data source for multiple levels of nesting, or                                         // 9715\n\t\t *   it my be used as a function. As a function it takes a single parameter,                                         // 9716\n\t\t *   the JSON returned from the server, which can be manipulated as                                                  // 9717\n\t\t *   required, with the returned value being that used by DataTables as the                                          // 9718\n\t\t *   data source for the table. This supersedes `sAjaxDataProp` from                                                 // 9719\n\t\t *   DataTables 1.9-.                                                                                                // 9720\n\t\t *                                                                                                                   // 9721\n\t\t * * `success` - Should not be overridden it is used internally in                                                   // 9722\n\t\t *   DataTables. To manipulate / transform the data returned by the server                                           // 9723\n\t\t *   use `ajax.dataSrc`, or use `ajax` as a function (see below).                                                    // 9724\n\t\t *                                                                                                                   // 9725\n\t\t * `function`                                                                                                        // 9726\n\t\t * ----------                                                                                                        // 9727\n\t\t *                                                                                                                   // 9728\n\t\t * As a function, making the Ajax call is left up to yourself allowing                                               // 9729\n\t\t * complete control of the Ajax request. Indeed, if desired, a method other                                          // 9730\n\t\t * than Ajax could be used to obtain the required data, such as Web storage                                          // 9731\n\t\t * or an AIR database.                                                                                               // 9732\n\t\t *                                                                                                                   // 9733\n\t\t * The function is given four parameters and no return is required. The                                              // 9734\n\t\t * parameters are:                                                                                                   // 9735\n\t\t *                                                                                                                   // 9736\n\t\t * 1. _object_ - Data to send to the server                                                                          // 9737\n\t\t * 2. _function_ - Callback function that must be executed when the required                                         // 9738\n\t\t *    data has been obtained. That data should be passed into the callback                                           // 9739\n\t\t *    as the only parameter                                                                                          // 9740\n\t\t * 3. _object_ - DataTables settings object for the table                                                            // 9741\n\t\t *                                                                                                                   // 9742\n\t\t * Note that this supersedes `fnServerData` from DataTables 1.9-.                                                    // 9743\n\t\t *                                                                                                                   // 9744\n\t\t *  @type string|object|function                                                                                     // 9745\n\t\t *  @default null                                                                                                    // 9746\n\t\t *                                                                                                                   // 9747\n\t\t *  @dtopt Option                                                                                                    // 9748\n\t\t *  @name DataTable.defaults.ajax                                                                                    // 9749\n\t\t *  @since 1.10.0                                                                                                    // 9750\n\t\t *                                                                                                                   // 9751\n\t\t * @example                                                                                                          // 9752\n\t\t *   // Get JSON data from a file via Ajax.                                                                          // 9753\n\t\t *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).                             // 9754\n\t\t *   $('#example').dataTable( {                                                                                      // 9755\n\t\t *     \"ajax\": \"data.json\"                                                                                           // 9756\n\t\t *   } );                                                                                                            // 9757\n\t\t *                                                                                                                   // 9758\n\t\t * @example                                                                                                          // 9759\n\t\t *   // Get JSON data from a file via Ajax, using `dataSrc` to change                                                // 9760\n\t\t *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)                                                 // 9761\n\t\t *   $('#example').dataTable( {                                                                                      // 9762\n\t\t *     \"ajax\": {                                                                                                     // 9763\n\t\t *       \"url\": \"data.json\",                                                                                         // 9764\n\t\t *       \"dataSrc\": \"tableData\"                                                                                      // 9765\n\t\t *     }                                                                                                             // 9766\n\t\t *   } );                                                                                                            // 9767\n\t\t *                                                                                                                   // 9768\n\t\t * @example                                                                                                          // 9769\n\t\t *   // Get JSON data from a file via Ajax, using `dataSrc` to read data                                             // 9770\n\t\t *   // from a plain array rather than an array in an object                                                         // 9771\n\t\t *   $('#example').dataTable( {                                                                                      // 9772\n\t\t *     \"ajax\": {                                                                                                     // 9773\n\t\t *       \"url\": \"data.json\",                                                                                         // 9774\n\t\t *       \"dataSrc\": \"\"                                                                                               // 9775\n\t\t *     }                                                                                                             // 9776\n\t\t *   } );                                                                                                            // 9777\n\t\t *                                                                                                                   // 9778\n\t\t * @example                                                                                                          // 9779\n\t\t *   // Manipulate the data returned from the server - add a link to data                                            // 9780\n\t\t *   // (note this can, should, be done using `render` for the column - this                                         // 9781\n\t\t *   // is just a simple example of how the data can be manipulated).                                                // 9782\n\t\t *   $('#example').dataTable( {                                                                                      // 9783\n\t\t *     \"ajax\": {                                                                                                     // 9784\n\t\t *       \"url\": \"data.json\",                                                                                         // 9785\n\t\t *       \"dataSrc\": function ( json ) {                                                                              // 9786\n\t\t *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {                                                          // 9787\n\t\t *           json[i][0] = '<a href=\"/message/'+json[i][0]+'>View message</a>';                                       // 9788\n\t\t *         }                                                                                                         // 9789\n\t\t *         return json;                                                                                              // 9790\n\t\t *       }                                                                                                           // 9791\n\t\t *     }                                                                                                             // 9792\n\t\t *   } );                                                                                                            // 9793\n\t\t *                                                                                                                   // 9794\n\t\t * @example                                                                                                          // 9795\n\t\t *   // Add data to the request                                                                                      // 9796\n\t\t *   $('#example').dataTable( {                                                                                      // 9797\n\t\t *     \"ajax\": {                                                                                                     // 9798\n\t\t *       \"url\": \"data.json\",                                                                                         // 9799\n\t\t *       \"data\": function ( d ) {                                                                                    // 9800\n\t\t *         return {                                                                                                  // 9801\n\t\t *           \"extra_search\": $('#extra').val()                                                                       // 9802\n\t\t *         };                                                                                                        // 9803\n\t\t *       }                                                                                                           // 9804\n\t\t *     }                                                                                                             // 9805\n\t\t *   } );                                                                                                            // 9806\n\t\t *                                                                                                                   // 9807\n\t\t * @example                                                                                                          // 9808\n\t\t *   // Send request as POST                                                                                         // 9809\n\t\t *   $('#example').dataTable( {                                                                                      // 9810\n\t\t *     \"ajax\": {                                                                                                     // 9811\n\t\t *       \"url\": \"data.json\",                                                                                         // 9812\n\t\t *       \"type\": \"POST\"                                                                                              // 9813\n\t\t *     }                                                                                                             // 9814\n\t\t *   } );                                                                                                            // 9815\n\t\t *                                                                                                                   // 9816\n\t\t * @example                                                                                                          // 9817\n\t\t *   // Get the data from localStorage (could interface with a form for                                              // 9818\n\t\t *   // adding, editing and removing rows).                                                                          // 9819\n\t\t *   $('#example').dataTable( {                                                                                      // 9820\n\t\t *     \"ajax\": function (data, callback, settings) {                                                                 // 9821\n\t\t *       callback(                                                                                                   // 9822\n\t\t *         JSON.parse( localStorage.getItem('dataTablesData') )                                                      // 9823\n\t\t *       );                                                                                                          // 9824\n\t\t *     }                                                                                                             // 9825\n\t\t *   } );                                                                                                            // 9826\n\t\t */                                                                                                                  // 9827\n\t\t\"ajax\": null,                                                                                                        // 9828\n\t                                                                                                                      // 9829\n\t                                                                                                                      // 9830\n\t\t/**                                                                                                                  // 9831\n\t\t * This parameter allows you to readily specify the entries in the length drop                                       // 9832\n\t\t * down menu that DataTables shows when pagination is enabled. It can be                                             // 9833\n\t\t * either a 1D array of options which will be used for both the displayed                                            // 9834\n\t\t * option and the value, or a 2D array which will use the array in the first                                         // 9835\n\t\t * position as the value, and the array in the second position as the                                                // 9836\n\t\t * displayed options (useful for language strings such as 'All').                                                    // 9837\n\t\t *                                                                                                                   // 9838\n\t\t * Note that the `pageLength` property will be automatically set to the                                              // 9839\n\t\t * first value given in this array, unless `pageLength` is also provided.                                            // 9840\n\t\t *  @type array                                                                                                      // 9841\n\t\t *  @default [ 10, 25, 50, 100 ]                                                                                     // 9842\n\t\t *                                                                                                                   // 9843\n\t\t *  @dtopt Option                                                                                                    // 9844\n\t\t *  @name DataTable.defaults.lengthMenu                                                                              // 9845\n\t\t *                                                                                                                   // 9846\n\t\t *  @example                                                                                                         // 9847\n\t\t *    $(document).ready( function() {                                                                                // 9848\n\t\t *      $('#example').dataTable( {                                                                                   // 9849\n\t\t *        \"lengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]]                                                      // 9850\n\t\t *      } );                                                                                                         // 9851\n\t\t *    } );                                                                                                           // 9852\n\t\t */                                                                                                                  // 9853\n\t\t\"aLengthMenu\": [ 10, 25, 50, 100 ],                                                                                  // 9854\n\t                                                                                                                      // 9855\n\t                                                                                                                      // 9856\n\t\t/**                                                                                                                  // 9857\n\t\t * The `columns` option in the initialisation parameter allows you to define                                         // 9858\n\t\t * details about the way individual columns behave. For a full list of                                               // 9859\n\t\t * column options that can be set, please see                                                                        // 9860\n\t\t * {@link DataTable.defaults.column}. Note that if you use `columns` to                                              // 9861\n\t\t * define your columns, you must have an entry in the array for every single                                         // 9862\n\t\t * column that you have in your table (these can be null if you don't which                                          // 9863\n\t\t * to specify any options).                                                                                          // 9864\n\t\t *  @member                                                                                                          // 9865\n\t\t *                                                                                                                   // 9866\n\t\t *  @name DataTable.defaults.column                                                                                  // 9867\n\t\t */                                                                                                                  // 9868\n\t\t\"aoColumns\": null,                                                                                                   // 9869\n\t                                                                                                                      // 9870\n\t\t/**                                                                                                                  // 9871\n\t\t * Very similar to `columns`, `columnDefs` allows you to target a specific                                           // 9872\n\t\t * column, multiple columns, or all columns, using the `targets` property of                                         // 9873\n\t\t * each object in the array. This allows great flexibility when creating                                             // 9874\n\t\t * tables, as the `columnDefs` arrays can be of any length, targeting the                                            // 9875\n\t\t * columns you specifically want. `columnDefs` may use any of the column                                             // 9876\n\t\t * options available: {@link DataTable.defaults.column}, but it _must_                                               // 9877\n\t\t * have `targets` defined in each object in the array. Values in the `targets`                                       // 9878\n\t\t * array may be:                                                                                                     // 9879\n\t\t *   <ul>                                                                                                            // 9880\n\t\t *     <li>a string - class name will be matched on the TH for the column</li>                                       // 9881\n\t\t *     <li>0 or a positive integer - column index counting from the left</li>                                        // 9882\n\t\t *     <li>a negative integer - column index counting from the right</li>                                            // 9883\n\t\t *     <li>the string \"_all\" - all columns (i.e. assign a default)</li>                                              // 9884\n\t\t *   </ul>                                                                                                           // 9885\n\t\t *  @member                                                                                                          // 9886\n\t\t *                                                                                                                   // 9887\n\t\t *  @name DataTable.defaults.columnDefs                                                                              // 9888\n\t\t */                                                                                                                  // 9889\n\t\t\"aoColumnDefs\": null,                                                                                                // 9890\n\t                                                                                                                      // 9891\n\t                                                                                                                      // 9892\n\t\t/**                                                                                                                  // 9893\n\t\t * Basically the same as `search`, this parameter defines the individual column                                      // 9894\n\t\t * filtering state at initialisation time. The array must be of the same size                                        // 9895\n\t\t * as the number of columns, and each element be an object with the parameters                                       // 9896\n\t\t * `search` and `escapeRegex` (the latter is optional). 'null' is also                                               // 9897\n\t\t * accepted and the default will be used.                                                                            // 9898\n\t\t *  @type array                                                                                                      // 9899\n\t\t *  @default []                                                                                                      // 9900\n\t\t *                                                                                                                   // 9901\n\t\t *  @dtopt Option                                                                                                    // 9902\n\t\t *  @name DataTable.defaults.searchCols                                                                              // 9903\n\t\t *                                                                                                                   // 9904\n\t\t *  @example                                                                                                         // 9905\n\t\t *    $(document).ready( function() {                                                                                // 9906\n\t\t *      $('#example').dataTable( {                                                                                   // 9907\n\t\t *        \"searchCols\": [                                                                                            // 9908\n\t\t *          null,                                                                                                    // 9909\n\t\t *          { \"search\": \"My filter\" },                                                                               // 9910\n\t\t *          null,                                                                                                    // 9911\n\t\t *          { \"search\": \"^[0-9]\", \"escapeRegex\": false }                                                             // 9912\n\t\t *        ]                                                                                                          // 9913\n\t\t *      } );                                                                                                         // 9914\n\t\t *    } )                                                                                                            // 9915\n\t\t */                                                                                                                  // 9916\n\t\t\"aoSearchCols\": [],                                                                                                  // 9917\n\t                                                                                                                      // 9918\n\t                                                                                                                      // 9919\n\t\t/**                                                                                                                  // 9920\n\t\t * An array of CSS classes that should be applied to displayed rows. This                                            // 9921\n\t\t * array may be of any length, and DataTables will apply each class                                                  // 9922\n\t\t * sequentially, looping when required.                                                                              // 9923\n\t\t *  @type array                                                                                                      // 9924\n\t\t *  @default null <i>Will take the values determined by the `oClasses.stripe*`                                       // 9925\n\t\t *    options</i>                                                                                                    // 9926\n\t\t *                                                                                                                   // 9927\n\t\t *  @dtopt Option                                                                                                    // 9928\n\t\t *  @name DataTable.defaults.stripeClasses                                                                           // 9929\n\t\t *                                                                                                                   // 9930\n\t\t *  @example                                                                                                         // 9931\n\t\t *    $(document).ready( function() {                                                                                // 9932\n\t\t *      $('#example').dataTable( {                                                                                   // 9933\n\t\t *        \"stripeClasses\": [ 'strip1', 'strip2', 'strip3' ]                                                          // 9934\n\t\t *      } );                                                                                                         // 9935\n\t\t *    } )                                                                                                            // 9936\n\t\t */                                                                                                                  // 9937\n\t\t\"asStripeClasses\": null,                                                                                             // 9938\n\t                                                                                                                      // 9939\n\t                                                                                                                      // 9940\n\t\t/**                                                                                                                  // 9941\n\t\t * Enable or disable automatic column width calculation. This can be disabled                                        // 9942\n\t\t * as an optimisation (it takes some time to calculate the widths) if the                                            // 9943\n\t\t * tables widths are passed in using `columns`.                                                                      // 9944\n\t\t *  @type boolean                                                                                                    // 9945\n\t\t *  @default true                                                                                                    // 9946\n\t\t *                                                                                                                   // 9947\n\t\t *  @dtopt Features                                                                                                  // 9948\n\t\t *  @name DataTable.defaults.autoWidth                                                                               // 9949\n\t\t *                                                                                                                   // 9950\n\t\t *  @example                                                                                                         // 9951\n\t\t *    $(document).ready( function () {                                                                               // 9952\n\t\t *      $('#example').dataTable( {                                                                                   // 9953\n\t\t *        \"autoWidth\": false                                                                                         // 9954\n\t\t *      } );                                                                                                         // 9955\n\t\t *    } );                                                                                                           // 9956\n\t\t */                                                                                                                  // 9957\n\t\t\"bAutoWidth\": true,                                                                                                  // 9958\n\t                                                                                                                      // 9959\n\t                                                                                                                      // 9960\n\t\t/**                                                                                                                  // 9961\n\t\t * Deferred rendering can provide DataTables with a huge speed boost when you                                        // 9962\n\t\t * are using an Ajax or JS data source for the table. This option, when set to                                       // 9963\n\t\t * true, will cause DataTables to defer the creation of the table elements for                                       // 9964\n\t\t * each row until they are needed for a draw - saving a significant amount of                                        // 9965\n\t\t * time.                                                                                                             // 9966\n\t\t *  @type boolean                                                                                                    // 9967\n\t\t *  @default false                                                                                                   // 9968\n\t\t *                                                                                                                   // 9969\n\t\t *  @dtopt Features                                                                                                  // 9970\n\t\t *  @name DataTable.defaults.deferRender                                                                             // 9971\n\t\t *                                                                                                                   // 9972\n\t\t *  @example                                                                                                         // 9973\n\t\t *    $(document).ready( function() {                                                                                // 9974\n\t\t *      $('#example').dataTable( {                                                                                   // 9975\n\t\t *        \"ajax\": \"sources/arrays.txt\",                                                                              // 9976\n\t\t *        \"deferRender\": true                                                                                        // 9977\n\t\t *      } );                                                                                                         // 9978\n\t\t *    } );                                                                                                           // 9979\n\t\t */                                                                                                                  // 9980\n\t\t\"bDeferRender\": false,                                                                                               // 9981\n\t                                                                                                                      // 9982\n\t                                                                                                                      // 9983\n\t\t/**                                                                                                                  // 9984\n\t\t * Replace a DataTable which matches the given selector and replace it with                                          // 9985\n\t\t * one which has the properties of the new initialisation object passed. If no                                       // 9986\n\t\t * table matches the selector, then the new DataTable will be constructed as                                         // 9987\n\t\t * per normal.                                                                                                       // 9988\n\t\t *  @type boolean                                                                                                    // 9989\n\t\t *  @default false                                                                                                   // 9990\n\t\t *                                                                                                                   // 9991\n\t\t *  @dtopt Options                                                                                                   // 9992\n\t\t *  @name DataTable.defaults.destroy                                                                                 // 9993\n\t\t *                                                                                                                   // 9994\n\t\t *  @example                                                                                                         // 9995\n\t\t *    $(document).ready( function() {                                                                                // 9996\n\t\t *      $('#example').dataTable( {                                                                                   // 9997\n\t\t *        \"srollY\": \"200px\",                                                                                         // 9998\n\t\t *        \"paginate\": false                                                                                          // 9999\n\t\t *      } );                                                                                                         // 10000\n\t\t *                                                                                                                   // 10001\n\t\t *      // Some time later....                                                                                       // 10002\n\t\t *      $('#example').dataTable( {                                                                                   // 10003\n\t\t *        \"filter\": false,                                                                                           // 10004\n\t\t *        \"destroy\": true                                                                                            // 10005\n\t\t *      } );                                                                                                         // 10006\n\t\t *    } );                                                                                                           // 10007\n\t\t */                                                                                                                  // 10008\n\t\t\"bDestroy\": false,                                                                                                   // 10009\n\t                                                                                                                      // 10010\n\t                                                                                                                      // 10011\n\t\t/**                                                                                                                  // 10012\n\t\t * Enable or disable filtering of data. Filtering in DataTables is \"smart\" in                                        // 10013\n\t\t * that it allows the end user to input multiple words (space separated) and                                         // 10014\n\t\t * will match a row containing those words, even if not in the order that was                                        // 10015\n\t\t * specified (this allow matching across multiple columns). Note that if you                                         // 10016\n\t\t * wish to use filtering in DataTables this must remain 'true' - to remove the                                       // 10017\n\t\t * default filtering input box and retain filtering abilities, please use                                            // 10018\n\t\t * {@link DataTable.defaults.dom}.                                                                                   // 10019\n\t\t *  @type boolean                                                                                                    // 10020\n\t\t *  @default true                                                                                                    // 10021\n\t\t *                                                                                                                   // 10022\n\t\t *  @dtopt Features                                                                                                  // 10023\n\t\t *  @name DataTable.defaults.searching                                                                               // 10024\n\t\t *                                                                                                                   // 10025\n\t\t *  @example                                                                                                         // 10026\n\t\t *    $(document).ready( function () {                                                                               // 10027\n\t\t *      $('#example').dataTable( {                                                                                   // 10028\n\t\t *        \"searching\": false                                                                                         // 10029\n\t\t *      } );                                                                                                         // 10030\n\t\t *    } );                                                                                                           // 10031\n\t\t */                                                                                                                  // 10032\n\t\t\"bFilter\": true,                                                                                                     // 10033\n\t                                                                                                                      // 10034\n\t                                                                                                                      // 10035\n\t\t/**                                                                                                                  // 10036\n\t\t * Enable or disable the table information display. This shows information                                           // 10037\n\t\t * about the data that is currently visible on the page, including information                                       // 10038\n\t\t * about filtered data if that action is being performed.                                                            // 10039\n\t\t *  @type boolean                                                                                                    // 10040\n\t\t *  @default true                                                                                                    // 10041\n\t\t *                                                                                                                   // 10042\n\t\t *  @dtopt Features                                                                                                  // 10043\n\t\t *  @name DataTable.defaults.info                                                                                    // 10044\n\t\t *                                                                                                                   // 10045\n\t\t *  @example                                                                                                         // 10046\n\t\t *    $(document).ready( function () {                                                                               // 10047\n\t\t *      $('#example').dataTable( {                                                                                   // 10048\n\t\t *        \"info\": false                                                                                              // 10049\n\t\t *      } );                                                                                                         // 10050\n\t\t *    } );                                                                                                           // 10051\n\t\t */                                                                                                                  // 10052\n\t\t\"bInfo\": true,                                                                                                       // 10053\n\t                                                                                                                      // 10054\n\t                                                                                                                      // 10055\n\t\t/**                                                                                                                  // 10056\n\t\t * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some                                       // 10057\n\t\t * slightly different and additional mark-up from what DataTables has                                                // 10058\n\t\t * traditionally used).                                                                                              // 10059\n\t\t *  @type boolean                                                                                                    // 10060\n\t\t *  @default false                                                                                                   // 10061\n\t\t *                                                                                                                   // 10062\n\t\t *  @dtopt Features                                                                                                  // 10063\n\t\t *  @name DataTable.defaults.jQueryUI                                                                                // 10064\n\t\t *                                                                                                                   // 10065\n\t\t *  @example                                                                                                         // 10066\n\t\t *    $(document).ready( function() {                                                                                // 10067\n\t\t *      $('#example').dataTable( {                                                                                   // 10068\n\t\t *        \"jQueryUI\": true                                                                                           // 10069\n\t\t *      } );                                                                                                         // 10070\n\t\t *    } );                                                                                                           // 10071\n\t\t */                                                                                                                  // 10072\n\t\t\"bJQueryUI\": false,                                                                                                  // 10073\n\t                                                                                                                      // 10074\n\t                                                                                                                      // 10075\n\t\t/**                                                                                                                  // 10076\n\t\t * Allows the end user to select the size of a formatted page from a select                                          // 10077\n\t\t * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).                                            // 10078\n\t\t *  @type boolean                                                                                                    // 10079\n\t\t *  @default true                                                                                                    // 10080\n\t\t *                                                                                                                   // 10081\n\t\t *  @dtopt Features                                                                                                  // 10082\n\t\t *  @name DataTable.defaults.lengthChange                                                                            // 10083\n\t\t *                                                                                                                   // 10084\n\t\t *  @example                                                                                                         // 10085\n\t\t *    $(document).ready( function () {                                                                               // 10086\n\t\t *      $('#example').dataTable( {                                                                                   // 10087\n\t\t *        \"lengthChange\": false                                                                                      // 10088\n\t\t *      } );                                                                                                         // 10089\n\t\t *    } );                                                                                                           // 10090\n\t\t */                                                                                                                  // 10091\n\t\t\"bLengthChange\": true,                                                                                               // 10092\n\t                                                                                                                      // 10093\n\t                                                                                                                      // 10094\n\t\t/**                                                                                                                  // 10095\n\t\t * Enable or disable pagination.                                                                                     // 10096\n\t\t *  @type boolean                                                                                                    // 10097\n\t\t *  @default true                                                                                                    // 10098\n\t\t *                                                                                                                   // 10099\n\t\t *  @dtopt Features                                                                                                  // 10100\n\t\t *  @name DataTable.defaults.paging                                                                                  // 10101\n\t\t *                                                                                                                   // 10102\n\t\t *  @example                                                                                                         // 10103\n\t\t *    $(document).ready( function () {                                                                               // 10104\n\t\t *      $('#example').dataTable( {                                                                                   // 10105\n\t\t *        \"paging\": false                                                                                            // 10106\n\t\t *      } );                                                                                                         // 10107\n\t\t *    } );                                                                                                           // 10108\n\t\t */                                                                                                                  // 10109\n\t\t\"bPaginate\": true,                                                                                                   // 10110\n\t                                                                                                                      // 10111\n\t                                                                                                                      // 10112\n\t\t/**                                                                                                                  // 10113\n\t\t * Enable or disable the display of a 'processing' indicator when the table is                                       // 10114\n\t\t * being processed (e.g. a sort). This is particularly useful for tables with                                        // 10115\n\t\t * large amounts of data where it can take a noticeable amount of time to sort                                       // 10116\n\t\t * the entries.                                                                                                      // 10117\n\t\t *  @type boolean                                                                                                    // 10118\n\t\t *  @default false                                                                                                   // 10119\n\t\t *                                                                                                                   // 10120\n\t\t *  @dtopt Features                                                                                                  // 10121\n\t\t *  @name DataTable.defaults.processing                                                                              // 10122\n\t\t *                                                                                                                   // 10123\n\t\t *  @example                                                                                                         // 10124\n\t\t *    $(document).ready( function () {                                                                               // 10125\n\t\t *      $('#example').dataTable( {                                                                                   // 10126\n\t\t *        \"processing\": true                                                                                         // 10127\n\t\t *      } );                                                                                                         // 10128\n\t\t *    } );                                                                                                           // 10129\n\t\t */                                                                                                                  // 10130\n\t\t\"bProcessing\": false,                                                                                                // 10131\n\t                                                                                                                      // 10132\n\t                                                                                                                      // 10133\n\t\t/**                                                                                                                  // 10134\n\t\t * Retrieve the DataTables object for the given selector. Note that if the                                           // 10135\n\t\t * table has already been initialised, this parameter will cause DataTables                                          // 10136\n\t\t * to simply return the object that has already been set up - it will not take                                       // 10137\n\t\t * account of any changes you might have made to the initialisation object                                           // 10138\n\t\t * passed to DataTables (setting this parameter to true is an acknowledgement                                        // 10139\n\t\t * that you understand this). `destroy` can be used to reinitialise a table if                                       // 10140\n\t\t * you need.                                                                                                         // 10141\n\t\t *  @type boolean                                                                                                    // 10142\n\t\t *  @default false                                                                                                   // 10143\n\t\t *                                                                                                                   // 10144\n\t\t *  @dtopt Options                                                                                                   // 10145\n\t\t *  @name DataTable.defaults.retrieve                                                                                // 10146\n\t\t *                                                                                                                   // 10147\n\t\t *  @example                                                                                                         // 10148\n\t\t *    $(document).ready( function() {                                                                                // 10149\n\t\t *      initTable();                                                                                                 // 10150\n\t\t *      tableActions();                                                                                              // 10151\n\t\t *    } );                                                                                                           // 10152\n\t\t *                                                                                                                   // 10153\n\t\t *    function initTable ()                                                                                          // 10154\n\t\t *    {                                                                                                              // 10155\n\t\t *      return $('#example').dataTable( {                                                                            // 10156\n\t\t *        \"scrollY\": \"200px\",                                                                                        // 10157\n\t\t *        \"paginate\": false,                                                                                         // 10158\n\t\t *        \"retrieve\": true                                                                                           // 10159\n\t\t *      } );                                                                                                         // 10160\n\t\t *    }                                                                                                              // 10161\n\t\t *                                                                                                                   // 10162\n\t\t *    function tableActions ()                                                                                       // 10163\n\t\t *    {                                                                                                              // 10164\n\t\t *      var table = initTable();                                                                                     // 10165\n\t\t *      // perform API operations with oTable                                                                        // 10166\n\t\t *    }                                                                                                              // 10167\n\t\t */                                                                                                                  // 10168\n\t\t\"bRetrieve\": false,                                                                                                  // 10169\n\t                                                                                                                      // 10170\n\t                                                                                                                      // 10171\n\t\t/**                                                                                                                  // 10172\n\t\t * When vertical (y) scrolling is enabled, DataTables will force the height of                                       // 10173\n\t\t * the table's viewport to the given height at all times (useful for layout).                                        // 10174\n\t\t * However, this can look odd when filtering data down to a small data set,                                          // 10175\n\t\t * and the footer is left \"floating\" further down. This parameter (when                                              // 10176\n\t\t * enabled) will cause DataTables to collapse the table's viewport down when                                         // 10177\n\t\t * the result set will fit within the given Y height.                                                                // 10178\n\t\t *  @type boolean                                                                                                    // 10179\n\t\t *  @default false                                                                                                   // 10180\n\t\t *                                                                                                                   // 10181\n\t\t *  @dtopt Options                                                                                                   // 10182\n\t\t *  @name DataTable.defaults.scrollCollapse                                                                          // 10183\n\t\t *                                                                                                                   // 10184\n\t\t *  @example                                                                                                         // 10185\n\t\t *    $(document).ready( function() {                                                                                // 10186\n\t\t *      $('#example').dataTable( {                                                                                   // 10187\n\t\t *        \"scrollY\": \"200\",                                                                                          // 10188\n\t\t *        \"scrollCollapse\": true                                                                                     // 10189\n\t\t *      } );                                                                                                         // 10190\n\t\t *    } );                                                                                                           // 10191\n\t\t */                                                                                                                  // 10192\n\t\t\"bScrollCollapse\": false,                                                                                            // 10193\n\t                                                                                                                      // 10194\n\t                                                                                                                      // 10195\n\t\t/**                                                                                                                  // 10196\n\t\t * Configure DataTables to use server-side processing. Note that the                                                 // 10197\n\t\t * `ajax` parameter must also be given in order to give DataTables a                                                 // 10198\n\t\t * source to obtain the required data for each draw.                                                                 // 10199\n\t\t *  @type boolean                                                                                                    // 10200\n\t\t *  @default false                                                                                                   // 10201\n\t\t *                                                                                                                   // 10202\n\t\t *  @dtopt Features                                                                                                  // 10203\n\t\t *  @dtopt Server-side                                                                                               // 10204\n\t\t *  @name DataTable.defaults.serverSide                                                                              // 10205\n\t\t *                                                                                                                   // 10206\n\t\t *  @example                                                                                                         // 10207\n\t\t *    $(document).ready( function () {                                                                               // 10208\n\t\t *      $('#example').dataTable( {                                                                                   // 10209\n\t\t *        \"serverSide\": true,                                                                                        // 10210\n\t\t *        \"ajax\": \"xhr.php\"                                                                                          // 10211\n\t\t *      } );                                                                                                         // 10212\n\t\t *    } );                                                                                                           // 10213\n\t\t */                                                                                                                  // 10214\n\t\t\"bServerSide\": false,                                                                                                // 10215\n\t                                                                                                                      // 10216\n\t                                                                                                                      // 10217\n\t\t/**                                                                                                                  // 10218\n\t\t * Enable or disable sorting of columns. Sorting of individual columns can be                                        // 10219\n\t\t * disabled by the `sortable` option for each column.                                                                // 10220\n\t\t *  @type boolean                                                                                                    // 10221\n\t\t *  @default true                                                                                                    // 10222\n\t\t *                                                                                                                   // 10223\n\t\t *  @dtopt Features                                                                                                  // 10224\n\t\t *  @name DataTable.defaults.ordering                                                                                // 10225\n\t\t *                                                                                                                   // 10226\n\t\t *  @example                                                                                                         // 10227\n\t\t *    $(document).ready( function () {                                                                               // 10228\n\t\t *      $('#example').dataTable( {                                                                                   // 10229\n\t\t *        \"ordering\": false                                                                                          // 10230\n\t\t *      } );                                                                                                         // 10231\n\t\t *    } );                                                                                                           // 10232\n\t\t */                                                                                                                  // 10233\n\t\t\"bSort\": true,                                                                                                       // 10234\n\t                                                                                                                      // 10235\n\t                                                                                                                      // 10236\n\t\t/**                                                                                                                  // 10237\n\t\t * Enable or display DataTables' ability to sort multiple columns at the                                             // 10238\n\t\t * same time (activated by shift-click by the user).                                                                 // 10239\n\t\t *  @type boolean                                                                                                    // 10240\n\t\t *  @default true                                                                                                    // 10241\n\t\t *                                                                                                                   // 10242\n\t\t *  @dtopt Options                                                                                                   // 10243\n\t\t *  @name DataTable.defaults.orderMulti                                                                              // 10244\n\t\t *                                                                                                                   // 10245\n\t\t *  @example                                                                                                         // 10246\n\t\t *    // Disable multiple column sorting ability                                                                     // 10247\n\t\t *    $(document).ready( function () {                                                                               // 10248\n\t\t *      $('#example').dataTable( {                                                                                   // 10249\n\t\t *        \"orderMulti\": false                                                                                        // 10250\n\t\t *      } );                                                                                                         // 10251\n\t\t *    } );                                                                                                           // 10252\n\t\t */                                                                                                                  // 10253\n\t\t\"bSortMulti\": true,                                                                                                  // 10254\n\t                                                                                                                      // 10255\n\t                                                                                                                      // 10256\n\t\t/**                                                                                                                  // 10257\n\t\t * Allows control over whether DataTables should use the top (true) unique                                           // 10258\n\t\t * cell that is found for a single column, or the bottom (false - default).                                          // 10259\n\t\t * This is useful when using complex headers.                                                                        // 10260\n\t\t *  @type boolean                                                                                                    // 10261\n\t\t *  @default false                                                                                                   // 10262\n\t\t *                                                                                                                   // 10263\n\t\t *  @dtopt Options                                                                                                   // 10264\n\t\t *  @name DataTable.defaults.orderCellsTop                                                                           // 10265\n\t\t *                                                                                                                   // 10266\n\t\t *  @example                                                                                                         // 10267\n\t\t *    $(document).ready( function() {                                                                                // 10268\n\t\t *      $('#example').dataTable( {                                                                                   // 10269\n\t\t *        \"orderCellsTop\": true                                                                                      // 10270\n\t\t *      } );                                                                                                         // 10271\n\t\t *    } );                                                                                                           // 10272\n\t\t */                                                                                                                  // 10273\n\t\t\"bSortCellsTop\": false,                                                                                              // 10274\n\t                                                                                                                      // 10275\n\t                                                                                                                      // 10276\n\t\t/**                                                                                                                  // 10277\n\t\t * Enable or disable the addition of the classes `sorting\\_1`, `sorting\\_2` and                                      // 10278\n\t\t * `sorting\\_3` to the columns which are currently being sorted on. This is                                          // 10279\n\t\t * presented as a feature switch as it can increase processing time (while                                           // 10280\n\t\t * classes are removed and added) so for large data sets you might want to                                           // 10281\n\t\t * turn this off.                                                                                                    // 10282\n\t\t *  @type boolean                                                                                                    // 10283\n\t\t *  @default true                                                                                                    // 10284\n\t\t *                                                                                                                   // 10285\n\t\t *  @dtopt Features                                                                                                  // 10286\n\t\t *  @name DataTable.defaults.orderClasses                                                                            // 10287\n\t\t *                                                                                                                   // 10288\n\t\t *  @example                                                                                                         // 10289\n\t\t *    $(document).ready( function () {                                                                               // 10290\n\t\t *      $('#example').dataTable( {                                                                                   // 10291\n\t\t *        \"orderClasses\": false                                                                                      // 10292\n\t\t *      } );                                                                                                         // 10293\n\t\t *    } );                                                                                                           // 10294\n\t\t */                                                                                                                  // 10295\n\t\t\"bSortClasses\": true,                                                                                                // 10296\n\t                                                                                                                      // 10297\n\t                                                                                                                      // 10298\n\t\t/**                                                                                                                  // 10299\n\t\t * Enable or disable state saving. When enabled HTML5 `localStorage` will be                                         // 10300\n\t\t * used to save table display information such as pagination information,                                            // 10301\n\t\t * display length, filtering and sorting. As such when the end user reloads                                          // 10302\n\t\t * the page the display display will match what thy had previously set up.                                           // 10303\n\t\t *                                                                                                                   // 10304\n\t\t * Due to the use of `localStorage` the default state saving is not supported                                        // 10305\n\t\t * in IE6 or 7. If state saving is required in those browsers, use                                                   // 10306\n\t\t * `stateSaveCallback` to provide a storage solution such as cookies.                                                // 10307\n\t\t *  @type boolean                                                                                                    // 10308\n\t\t *  @default false                                                                                                   // 10309\n\t\t *                                                                                                                   // 10310\n\t\t *  @dtopt Features                                                                                                  // 10311\n\t\t *  @name DataTable.defaults.stateSave                                                                               // 10312\n\t\t *                                                                                                                   // 10313\n\t\t *  @example                                                                                                         // 10314\n\t\t *    $(document).ready( function () {                                                                               // 10315\n\t\t *      $('#example').dataTable( {                                                                                   // 10316\n\t\t *        \"stateSave\": true                                                                                          // 10317\n\t\t *      } );                                                                                                         // 10318\n\t\t *    } );                                                                                                           // 10319\n\t\t */                                                                                                                  // 10320\n\t\t\"bStateSave\": false,                                                                                                 // 10321\n\t                                                                                                                      // 10322\n\t                                                                                                                      // 10323\n\t\t/**                                                                                                                  // 10324\n\t\t * This function is called when a TR element is created (and all TD child                                            // 10325\n\t\t * elements have been inserted), or registered if using a DOM source, allowing                                       // 10326\n\t\t * manipulation of the TR element (adding classes etc).                                                              // 10327\n\t\t *  @type function                                                                                                   // 10328\n\t\t *  @param {node} row \"TR\" element for the current row                                                               // 10329\n\t\t *  @param {array} data Raw data array for this row                                                                  // 10330\n\t\t *  @param {int} dataIndex The index of this row in the internal aoData array                                        // 10331\n\t\t *                                                                                                                   // 10332\n\t\t *  @dtopt Callbacks                                                                                                 // 10333\n\t\t *  @name DataTable.defaults.createdRow                                                                              // 10334\n\t\t *                                                                                                                   // 10335\n\t\t *  @example                                                                                                         // 10336\n\t\t *    $(document).ready( function() {                                                                                // 10337\n\t\t *      $('#example').dataTable( {                                                                                   // 10338\n\t\t *        \"createdRow\": function( row, data, dataIndex ) {                                                           // 10339\n\t\t *          // Bold the grade for all 'A' grade browsers                                                             // 10340\n\t\t *          if ( data[4] == \"A\" )                                                                                    // 10341\n\t\t *          {                                                                                                        // 10342\n\t\t *            $('td:eq(4)', row).html( '<b>A</b>' );                                                                 // 10343\n\t\t *          }                                                                                                        // 10344\n\t\t *        }                                                                                                          // 10345\n\t\t *      } );                                                                                                         // 10346\n\t\t *    } );                                                                                                           // 10347\n\t\t */                                                                                                                  // 10348\n\t\t\"fnCreatedRow\": null,                                                                                                // 10349\n\t                                                                                                                      // 10350\n\t                                                                                                                      // 10351\n\t\t/**                                                                                                                  // 10352\n\t\t * This function is called on every 'draw' event, and allows you to                                                  // 10353\n\t\t * dynamically modify any aspect you want about the created DOM.                                                     // 10354\n\t\t *  @type function                                                                                                   // 10355\n\t\t *  @param {object} settings DataTables settings object                                                              // 10356\n\t\t *                                                                                                                   // 10357\n\t\t *  @dtopt Callbacks                                                                                                 // 10358\n\t\t *  @name DataTable.defaults.drawCallback                                                                            // 10359\n\t\t *                                                                                                                   // 10360\n\t\t *  @example                                                                                                         // 10361\n\t\t *    $(document).ready( function() {                                                                                // 10362\n\t\t *      $('#example').dataTable( {                                                                                   // 10363\n\t\t *        \"drawCallback\": function( settings ) {                                                                     // 10364\n\t\t *          alert( 'DataTables has redrawn the table' );                                                             // 10365\n\t\t *        }                                                                                                          // 10366\n\t\t *      } );                                                                                                         // 10367\n\t\t *    } );                                                                                                           // 10368\n\t\t */                                                                                                                  // 10369\n\t\t\"fnDrawCallback\": null,                                                                                              // 10370\n\t                                                                                                                      // 10371\n\t                                                                                                                      // 10372\n\t\t/**                                                                                                                  // 10373\n\t\t * Identical to fnHeaderCallback() but for the table footer this function                                            // 10374\n\t\t * allows you to modify the table footer on every 'draw' event.                                                      // 10375\n\t\t *  @type function                                                                                                   // 10376\n\t\t *  @param {node} foot \"TR\" element for the footer                                                                   // 10377\n\t\t *  @param {array} data Full table data (as derived from the original HTML)                                          // 10378\n\t\t *  @param {int} start Index for the current display starting point in the                                           // 10379\n\t\t *    display array                                                                                                  // 10380\n\t\t *  @param {int} end Index for the current display ending point in the                                               // 10381\n\t\t *    display array                                                                                                  // 10382\n\t\t *  @param {array int} display Index array to translate the visual position                                          // 10383\n\t\t *    to the full data array                                                                                         // 10384\n\t\t *                                                                                                                   // 10385\n\t\t *  @dtopt Callbacks                                                                                                 // 10386\n\t\t *  @name DataTable.defaults.footerCallback                                                                          // 10387\n\t\t *                                                                                                                   // 10388\n\t\t *  @example                                                                                                         // 10389\n\t\t *    $(document).ready( function() {                                                                                // 10390\n\t\t *      $('#example').dataTable( {                                                                                   // 10391\n\t\t *        \"footerCallback\": function( tfoot, data, start, end, display ) {                                           // 10392\n\t\t *          tfoot.getElementsByTagName('th')[0].innerHTML = \"Starting index is \"+start;                              // 10393\n\t\t *        }                                                                                                          // 10394\n\t\t *      } );                                                                                                         // 10395\n\t\t *    } )                                                                                                            // 10396\n\t\t */                                                                                                                  // 10397\n\t\t\"fnFooterCallback\": null,                                                                                            // 10398\n\t                                                                                                                      // 10399\n\t                                                                                                                      // 10400\n\t\t/**                                                                                                                  // 10401\n\t\t * When rendering large numbers in the information element for the table                                             // 10402\n\t\t * (i.e. \"Showing 1 to 10 of 57 entries\") DataTables will render large numbers                                       // 10403\n\t\t * to have a comma separator for the 'thousands' units (e.g. 1 million is                                            // 10404\n\t\t * rendered as \"1,000,000\") to help readability for the end user. This                                               // 10405\n\t\t * function will override the default method DataTables uses.                                                        // 10406\n\t\t *  @type function                                                                                                   // 10407\n\t\t *  @member                                                                                                          // 10408\n\t\t *  @param {int} toFormat number to be formatted                                                                     // 10409\n\t\t *  @returns {string} formatted string for DataTables to show the number                                             // 10410\n\t\t *                                                                                                                   // 10411\n\t\t *  @dtopt Callbacks                                                                                                 // 10412\n\t\t *  @name DataTable.defaults.formatNumber                                                                            // 10413\n\t\t *                                                                                                                   // 10414\n\t\t *  @example                                                                                                         // 10415\n\t\t *    // Format a number using a single quote for the separator (note that                                           // 10416\n\t\t *    // this can also be done with the language.thousands option)                                                   // 10417\n\t\t *    $(document).ready( function() {                                                                                // 10418\n\t\t *      $('#example').dataTable( {                                                                                   // 10419\n\t\t *        \"formatNumber\": function ( toFormat ) {                                                                    // 10420\n\t\t *          return toFormat.toString().replace(                                                                      // 10421\n\t\t *            /\\B(?=(\\d{3})+(?!\\d))/g, \"'\"                                                                           // 10422\n\t\t *          );                                                                                                       // 10423\n\t\t *        };                                                                                                         // 10424\n\t\t *      } );                                                                                                         // 10425\n\t\t *    } );                                                                                                           // 10426\n\t\t */                                                                                                                  // 10427\n\t\t\"fnFormatNumber\": function ( toFormat ) {                                                                            // 10428\n\t\t\treturn toFormat.toString().replace(                                                                                 // 10429\n\t\t\t\t/\\B(?=(\\d{3})+(?!\\d))/g,                                                                                           // 10430\n\t\t\t\tthis.oLanguage.sThousands                                                                                          // 10431\n\t\t\t);                                                                                                                  // 10432\n\t\t},                                                                                                                   // 10433\n\t                                                                                                                      // 10434\n\t                                                                                                                      // 10435\n\t\t/**                                                                                                                  // 10436\n\t\t * This function is called on every 'draw' event, and allows you to                                                  // 10437\n\t\t * dynamically modify the header row. This can be used to calculate and                                              // 10438\n\t\t * display useful information about the table.                                                                       // 10439\n\t\t *  @type function                                                                                                   // 10440\n\t\t *  @param {node} head \"TR\" element for the header                                                                   // 10441\n\t\t *  @param {array} data Full table data (as derived from the original HTML)                                          // 10442\n\t\t *  @param {int} start Index for the current display starting point in the                                           // 10443\n\t\t *    display array                                                                                                  // 10444\n\t\t *  @param {int} end Index for the current display ending point in the                                               // 10445\n\t\t *    display array                                                                                                  // 10446\n\t\t *  @param {array int} display Index array to translate the visual position                                          // 10447\n\t\t *    to the full data array                                                                                         // 10448\n\t\t *                                                                                                                   // 10449\n\t\t *  @dtopt Callbacks                                                                                                 // 10450\n\t\t *  @name DataTable.defaults.headerCallback                                                                          // 10451\n\t\t *                                                                                                                   // 10452\n\t\t *  @example                                                                                                         // 10453\n\t\t *    $(document).ready( function() {                                                                                // 10454\n\t\t *      $('#example').dataTable( {                                                                                   // 10455\n\t\t *        \"fheaderCallback\": function( head, data, start, end, display ) {                                           // 10456\n\t\t *          head.getElementsByTagName('th')[0].innerHTML = \"Displaying \"+(end-start)+\" records\";                     // 10457\n\t\t *        }                                                                                                          // 10458\n\t\t *      } );                                                                                                         // 10459\n\t\t *    } )                                                                                                            // 10460\n\t\t */                                                                                                                  // 10461\n\t\t\"fnHeaderCallback\": null,                                                                                            // 10462\n\t                                                                                                                      // 10463\n\t                                                                                                                      // 10464\n\t\t/**                                                                                                                  // 10465\n\t\t * The information element can be used to convey information about the current                                       // 10466\n\t\t * state of the table. Although the internationalisation options presented by                                        // 10467\n\t\t * DataTables are quite capable of dealing with most customisations, there may                                       // 10468\n\t\t * be times where you wish to customise the string further. This callback                                            // 10469\n\t\t * allows you to do exactly that.                                                                                    // 10470\n\t\t *  @type function                                                                                                   // 10471\n\t\t *  @param {object} oSettings DataTables settings object                                                             // 10472\n\t\t *  @param {int} start Starting position in data for the draw                                                        // 10473\n\t\t *  @param {int} end End position in data for the draw                                                               // 10474\n\t\t *  @param {int} max Total number of rows in the table (regardless of                                                // 10475\n\t\t *    filtering)                                                                                                     // 10476\n\t\t *  @param {int} total Total number of rows in the data set, after filtering                                         // 10477\n\t\t *  @param {string} pre The string that DataTables has formatted using it's                                          // 10478\n\t\t *    own rules                                                                                                      // 10479\n\t\t *  @returns {string} The string to be displayed in the information element.                                         // 10480\n\t\t *                                                                                                                   // 10481\n\t\t *  @dtopt Callbacks                                                                                                 // 10482\n\t\t *  @name DataTable.defaults.infoCallback                                                                            // 10483\n\t\t *                                                                                                                   // 10484\n\t\t *  @example                                                                                                         // 10485\n\t\t *    $('#example').dataTable( {                                                                                     // 10486\n\t\t *      \"infoCallback\": function( settings, start, end, max, total, pre ) {                                          // 10487\n\t\t *        return start +\" to \"+ end;                                                                                 // 10488\n\t\t *      }                                                                                                            // 10489\n\t\t *    } );                                                                                                           // 10490\n\t\t */                                                                                                                  // 10491\n\t\t\"fnInfoCallback\": null,                                                                                              // 10492\n\t                                                                                                                      // 10493\n\t                                                                                                                      // 10494\n\t\t/**                                                                                                                  // 10495\n\t\t * Called when the table has been initialised. Normally DataTables will                                              // 10496\n\t\t * initialise sequentially and there will be no need for this function,                                              // 10497\n\t\t * however, this does not hold true when using external language information                                         // 10498\n\t\t * since that is obtained using an async XHR call.                                                                   // 10499\n\t\t *  @type function                                                                                                   // 10500\n\t\t *  @param {object} settings DataTables settings object                                                              // 10501\n\t\t *  @param {object} json The JSON object request from the server - only                                              // 10502\n\t\t *    present if client-side Ajax sourced data is used                                                               // 10503\n\t\t *                                                                                                                   // 10504\n\t\t *  @dtopt Callbacks                                                                                                 // 10505\n\t\t *  @name DataTable.defaults.initComplete                                                                            // 10506\n\t\t *                                                                                                                   // 10507\n\t\t *  @example                                                                                                         // 10508\n\t\t *    $(document).ready( function() {                                                                                // 10509\n\t\t *      $('#example').dataTable( {                                                                                   // 10510\n\t\t *        \"initComplete\": function(settings, json) {                                                                 // 10511\n\t\t *          alert( 'DataTables has finished its initialisation.' );                                                  // 10512\n\t\t *        }                                                                                                          // 10513\n\t\t *      } );                                                                                                         // 10514\n\t\t *    } )                                                                                                            // 10515\n\t\t */                                                                                                                  // 10516\n\t\t\"fnInitComplete\": null,                                                                                              // 10517\n\t                                                                                                                      // 10518\n\t                                                                                                                      // 10519\n\t\t/**                                                                                                                  // 10520\n\t\t * Called at the very start of each table draw and can be used to cancel the                                         // 10521\n\t\t * draw by returning false, any other return (including undefined) results in                                        // 10522\n\t\t * the full draw occurring).                                                                                         // 10523\n\t\t *  @type function                                                                                                   // 10524\n\t\t *  @param {object} settings DataTables settings object                                                              // 10525\n\t\t *  @returns {boolean} False will cancel the draw, anything else (including no                                       // 10526\n\t\t *    return) will allow it to complete.                                                                             // 10527\n\t\t *                                                                                                                   // 10528\n\t\t *  @dtopt Callbacks                                                                                                 // 10529\n\t\t *  @name DataTable.defaults.preDrawCallback                                                                         // 10530\n\t\t *                                                                                                                   // 10531\n\t\t *  @example                                                                                                         // 10532\n\t\t *    $(document).ready( function() {                                                                                // 10533\n\t\t *      $('#example').dataTable( {                                                                                   // 10534\n\t\t *        \"preDrawCallback\": function( settings ) {                                                                  // 10535\n\t\t *          if ( $('#test').val() == 1 ) {                                                                           // 10536\n\t\t *            return false;                                                                                          // 10537\n\t\t *          }                                                                                                        // 10538\n\t\t *        }                                                                                                          // 10539\n\t\t *      } );                                                                                                         // 10540\n\t\t *    } );                                                                                                           // 10541\n\t\t */                                                                                                                  // 10542\n\t\t\"fnPreDrawCallback\": null,                                                                                           // 10543\n\t                                                                                                                      // 10544\n\t                                                                                                                      // 10545\n\t\t/**                                                                                                                  // 10546\n\t\t * This function allows you to 'post process' each row after it have been                                            // 10547\n\t\t * generated for each table draw, but before it is rendered on screen. This                                          // 10548\n\t\t * function might be used for setting the row class name etc.                                                        // 10549\n\t\t *  @type function                                                                                                   // 10550\n\t\t *  @param {node} row \"TR\" element for the current row                                                               // 10551\n\t\t *  @param {array} data Raw data array for this row                                                                  // 10552\n\t\t *  @param {int} displayIndex The display index for the current table draw                                           // 10553\n\t\t *  @param {int} displayIndexFull The index of the data in the full list of                                          // 10554\n\t\t *    rows (after filtering)                                                                                         // 10555\n\t\t *                                                                                                                   // 10556\n\t\t *  @dtopt Callbacks                                                                                                 // 10557\n\t\t *  @name DataTable.defaults.rowCallback                                                                             // 10558\n\t\t *                                                                                                                   // 10559\n\t\t *  @example                                                                                                         // 10560\n\t\t *    $(document).ready( function() {                                                                                // 10561\n\t\t *      $('#example').dataTable( {                                                                                   // 10562\n\t\t *        \"rowCallback\": function( row, data, displayIndex, displayIndexFull ) {                                     // 10563\n\t\t *          // Bold the grade for all 'A' grade browsers                                                             // 10564\n\t\t *          if ( data[4] == \"A\" ) {                                                                                  // 10565\n\t\t *            $('td:eq(4)', row).html( '<b>A</b>' );                                                                 // 10566\n\t\t *          }                                                                                                        // 10567\n\t\t *        }                                                                                                          // 10568\n\t\t *      } );                                                                                                         // 10569\n\t\t *    } );                                                                                                           // 10570\n\t\t */                                                                                                                  // 10571\n\t\t\"fnRowCallback\": null,                                                                                               // 10572\n\t                                                                                                                      // 10573\n\t                                                                                                                      // 10574\n\t\t/**                                                                                                                  // 10575\n\t\t * __Deprecated__ The functionality provided by this parameter has now been                                          // 10576\n\t\t * superseded by that provided through `ajax`, which should be used instead.                                         // 10577\n\t\t *                                                                                                                   // 10578\n\t\t * This parameter allows you to override the default function which obtains                                          // 10579\n\t\t * the data from the server so something more suitable for your application.                                         // 10580\n\t\t * For example you could use POST data, or pull information from a Gears or                                          // 10581\n\t\t * AIR database.                                                                                                     // 10582\n\t\t *  @type function                                                                                                   // 10583\n\t\t *  @member                                                                                                          // 10584\n\t\t *  @param {string} source HTTP source to obtain the data from (`ajax`)                                              // 10585\n\t\t *  @param {array} data A key/value pair object containing the data to send                                          // 10586\n\t\t *    to the server                                                                                                  // 10587\n\t\t *  @param {function} callback to be called on completion of the data get                                            // 10588\n\t\t *    process that will draw the data on the page.                                                                   // 10589\n\t\t *  @param {object} settings DataTables settings object                                                              // 10590\n\t\t *                                                                                                                   // 10591\n\t\t *  @dtopt Callbacks                                                                                                 // 10592\n\t\t *  @dtopt Server-side                                                                                               // 10593\n\t\t *  @name DataTable.defaults.serverData                                                                              // 10594\n\t\t *                                                                                                                   // 10595\n\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.                                                  // 10596\n\t\t */                                                                                                                  // 10597\n\t\t\"fnServerData\": null,                                                                                                // 10598\n\t                                                                                                                      // 10599\n\t                                                                                                                      // 10600\n\t\t/**                                                                                                                  // 10601\n\t\t * __Deprecated__ The functionality provided by this parameter has now been                                          // 10602\n\t\t * superseded by that provided through `ajax`, which should be used instead.                                         // 10603\n\t\t *                                                                                                                   // 10604\n\t\t *  It is often useful to send extra data to the server when making an Ajax                                          // 10605\n\t\t * request - for example custom filtering information, and this callback                                             // 10606\n\t\t * function makes it trivial to send extra information to the server. The                                            // 10607\n\t\t * passed in parameter is the data set that has been constructed by                                                  // 10608\n\t\t * DataTables, and you can add to this or modify it as you require.                                                  // 10609\n\t\t *  @type function                                                                                                   // 10610\n\t\t *  @param {array} data Data array (array of objects which are name/value                                            // 10611\n\t\t *    pairs) that has been constructed by DataTables and will be sent to the                                         // 10612\n\t\t *    server. In the case of Ajax sourced data with server-side processing                                           // 10613\n\t\t *    this will be an empty array, for server-side processing there will be a                                        // 10614\n\t\t *    significant number of parameters!                                                                              // 10615\n\t\t *  @returns {undefined} Ensure that you modify the data array passed in,                                            // 10616\n\t\t *    as this is passed by reference.                                                                                // 10617\n\t\t *                                                                                                                   // 10618\n\t\t *  @dtopt Callbacks                                                                                                 // 10619\n\t\t *  @dtopt Server-side                                                                                               // 10620\n\t\t *  @name DataTable.defaults.serverParams                                                                            // 10621\n\t\t *                                                                                                                   // 10622\n\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.                                                  // 10623\n\t\t */                                                                                                                  // 10624\n\t\t\"fnServerParams\": null,                                                                                              // 10625\n\t                                                                                                                      // 10626\n\t                                                                                                                      // 10627\n\t\t/**                                                                                                                  // 10628\n\t\t * Load the table state. With this function you can define from where, and how, the                                  // 10629\n\t\t * state of a table is loaded. By default DataTables will load from `localStorage`                                   // 10630\n\t\t * but you might wish to use a server-side database or cookies.                                                      // 10631\n\t\t *  @type function                                                                                                   // 10632\n\t\t *  @member                                                                                                          // 10633\n\t\t *  @param {object} settings DataTables settings object                                                              // 10634\n\t\t *  @return {object} The DataTables state object to be loaded                                                        // 10635\n\t\t *                                                                                                                   // 10636\n\t\t *  @dtopt Callbacks                                                                                                 // 10637\n\t\t *  @name DataTable.defaults.stateLoadCallback                                                                       // 10638\n\t\t *                                                                                                                   // 10639\n\t\t *  @example                                                                                                         // 10640\n\t\t *    $(document).ready( function() {                                                                                // 10641\n\t\t *      $('#example').dataTable( {                                                                                   // 10642\n\t\t *        \"stateSave\": true,                                                                                         // 10643\n\t\t *        \"stateLoadCallback\": function (settings) {                                                                 // 10644\n\t\t *          var o;                                                                                                   // 10645\n\t\t *                                                                                                                   // 10646\n\t\t *          // Send an Ajax request to the server to get the data. Note that                                         // 10647\n\t\t *          // this is a synchronous request.                                                                        // 10648\n\t\t *          $.ajax( {                                                                                                // 10649\n\t\t *            \"url\": \"/state_load\",                                                                                  // 10650\n\t\t *            \"async\": false,                                                                                        // 10651\n\t\t *            \"dataType\": \"json\",                                                                                    // 10652\n\t\t *            \"success\": function (json) {                                                                           // 10653\n\t\t *              o = json;                                                                                            // 10654\n\t\t *            }                                                                                                      // 10655\n\t\t *          } );                                                                                                     // 10656\n\t\t *                                                                                                                   // 10657\n\t\t *          return o;                                                                                                // 10658\n\t\t *        }                                                                                                          // 10659\n\t\t *      } );                                                                                                         // 10660\n\t\t *    } );                                                                                                           // 10661\n\t\t */                                                                                                                  // 10662\n\t\t\"fnStateLoadCallback\": function ( settings ) {                                                                       // 10663\n\t\t\ttry {                                                                                                               // 10664\n\t\t\t\treturn JSON.parse(                                                                                                 // 10665\n\t\t\t\t\t(settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(                                         // 10666\n\t\t\t\t\t\t'DataTables_'+settings.sInstance+'_'+location.pathname                                                           // 10667\n\t\t\t\t\t)                                                                                                                 // 10668\n\t\t\t\t);                                                                                                                 // 10669\n\t\t\t} catch (e) {}                                                                                                      // 10670\n\t\t},                                                                                                                   // 10671\n\t                                                                                                                      // 10672\n\t                                                                                                                      // 10673\n\t\t/**                                                                                                                  // 10674\n\t\t * Callback which allows modification of the saved state prior to loading that state.                                // 10675\n\t\t * This callback is called when the table is loading state from the stored data, but                                 // 10676\n\t\t * prior to the settings object being modified by the saved state. Note that for                                     // 10677\n\t\t * plug-in authors, you should use the `stateLoadParams` event to load parameters for                                // 10678\n\t\t * a plug-in.                                                                                                        // 10679\n\t\t *  @type function                                                                                                   // 10680\n\t\t *  @param {object} settings DataTables settings object                                                              // 10681\n\t\t *  @param {object} data The state object that is to be loaded                                                       // 10682\n\t\t *                                                                                                                   // 10683\n\t\t *  @dtopt Callbacks                                                                                                 // 10684\n\t\t *  @name DataTable.defaults.stateLoadParams                                                                         // 10685\n\t\t *                                                                                                                   // 10686\n\t\t *  @example                                                                                                         // 10687\n\t\t *    // Remove a saved filter, so filtering is never loaded                                                         // 10688\n\t\t *    $(document).ready( function() {                                                                                // 10689\n\t\t *      $('#example').dataTable( {                                                                                   // 10690\n\t\t *        \"stateSave\": true,                                                                                         // 10691\n\t\t *        \"stateLoadParams\": function (settings, data) {                                                             // 10692\n\t\t *          data.oSearch.sSearch = \"\";                                                                               // 10693\n\t\t *        }                                                                                                          // 10694\n\t\t *      } );                                                                                                         // 10695\n\t\t *    } );                                                                                                           // 10696\n\t\t *                                                                                                                   // 10697\n\t\t *  @example                                                                                                         // 10698\n\t\t *    // Disallow state loading by returning false                                                                   // 10699\n\t\t *    $(document).ready( function() {                                                                                // 10700\n\t\t *      $('#example').dataTable( {                                                                                   // 10701\n\t\t *        \"stateSave\": true,                                                                                         // 10702\n\t\t *        \"stateLoadParams\": function (settings, data) {                                                             // 10703\n\t\t *          return false;                                                                                            // 10704\n\t\t *        }                                                                                                          // 10705\n\t\t *      } );                                                                                                         // 10706\n\t\t *    } );                                                                                                           // 10707\n\t\t */                                                                                                                  // 10708\n\t\t\"fnStateLoadParams\": null,                                                                                           // 10709\n\t                                                                                                                      // 10710\n\t                                                                                                                      // 10711\n\t\t/**                                                                                                                  // 10712\n\t\t * Callback that is called when the state has been loaded from the state saving method                               // 10713\n\t\t * and the DataTables settings object has been modified as a result of the loaded state.                             // 10714\n\t\t *  @type function                                                                                                   // 10715\n\t\t *  @param {object} settings DataTables settings object                                                              // 10716\n\t\t *  @param {object} data The state object that was loaded                                                            // 10717\n\t\t *                                                                                                                   // 10718\n\t\t *  @dtopt Callbacks                                                                                                 // 10719\n\t\t *  @name DataTable.defaults.stateLoaded                                                                             // 10720\n\t\t *                                                                                                                   // 10721\n\t\t *  @example                                                                                                         // 10722\n\t\t *    // Show an alert with the filtering value that was saved                                                       // 10723\n\t\t *    $(document).ready( function() {                                                                                // 10724\n\t\t *      $('#example').dataTable( {                                                                                   // 10725\n\t\t *        \"stateSave\": true,                                                                                         // 10726\n\t\t *        \"stateLoaded\": function (settings, data) {                                                                 // 10727\n\t\t *          alert( 'Saved filter was: '+data.oSearch.sSearch );                                                      // 10728\n\t\t *        }                                                                                                          // 10729\n\t\t *      } );                                                                                                         // 10730\n\t\t *    } );                                                                                                           // 10731\n\t\t */                                                                                                                  // 10732\n\t\t\"fnStateLoaded\": null,                                                                                               // 10733\n\t                                                                                                                      // 10734\n\t                                                                                                                      // 10735\n\t\t/**                                                                                                                  // 10736\n\t\t * Save the table state. This function allows you to define where and how the state                                  // 10737\n\t\t * information for the table is stored By default DataTables will use `localStorage`                                 // 10738\n\t\t * but you might wish to use a server-side database or cookies.                                                      // 10739\n\t\t *  @type function                                                                                                   // 10740\n\t\t *  @member                                                                                                          // 10741\n\t\t *  @param {object} settings DataTables settings object                                                              // 10742\n\t\t *  @param {object} data The state object to be saved                                                                // 10743\n\t\t *                                                                                                                   // 10744\n\t\t *  @dtopt Callbacks                                                                                                 // 10745\n\t\t *  @name DataTable.defaults.stateSaveCallback                                                                       // 10746\n\t\t *                                                                                                                   // 10747\n\t\t *  @example                                                                                                         // 10748\n\t\t *    $(document).ready( function() {                                                                                // 10749\n\t\t *      $('#example').dataTable( {                                                                                   // 10750\n\t\t *        \"stateSave\": true,                                                                                         // 10751\n\t\t *        \"stateSaveCallback\": function (settings, data) {                                                           // 10752\n\t\t *          // Send an Ajax request to the server with the state object                                              // 10753\n\t\t *          $.ajax( {                                                                                                // 10754\n\t\t *            \"url\": \"/state_save\",                                                                                  // 10755\n\t\t *            \"data\": data,                                                                                          // 10756\n\t\t *            \"dataType\": \"json\",                                                                                    // 10757\n\t\t *            \"method\": \"POST\"                                                                                       // 10758\n\t\t *            \"success\": function () {}                                                                              // 10759\n\t\t *          } );                                                                                                     // 10760\n\t\t *        }                                                                                                          // 10761\n\t\t *      } );                                                                                                         // 10762\n\t\t *    } );                                                                                                           // 10763\n\t\t */                                                                                                                  // 10764\n\t\t\"fnStateSaveCallback\": function ( settings, data ) {                                                                 // 10765\n\t\t\ttry {                                                                                                               // 10766\n\t\t\t\t(settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(                                          // 10767\n\t\t\t\t\t'DataTables_'+settings.sInstance+'_'+location.pathname,                                                           // 10768\n\t\t\t\t\tJSON.stringify( data )                                                                                            // 10769\n\t\t\t\t);                                                                                                                 // 10770\n\t\t\t} catch (e) {}                                                                                                      // 10771\n\t\t},                                                                                                                   // 10772\n\t                                                                                                                      // 10773\n\t                                                                                                                      // 10774\n\t\t/**                                                                                                                  // 10775\n\t\t * Callback which allows modification of the state to be saved. Called when the table                                // 10776\n\t\t * has changed state a new state save is required. This method allows modification of                                // 10777\n\t\t * the state saving object prior to actually doing the save, including addition or                                   // 10778\n\t\t * other state properties or modification. Note that for plug-in authors, you should                                 // 10779\n\t\t * use the `stateSaveParams` event to save parameters for a plug-in.                                                 // 10780\n\t\t *  @type function                                                                                                   // 10781\n\t\t *  @param {object} settings DataTables settings object                                                              // 10782\n\t\t *  @param {object} data The state object to be saved                                                                // 10783\n\t\t *                                                                                                                   // 10784\n\t\t *  @dtopt Callbacks                                                                                                 // 10785\n\t\t *  @name DataTable.defaults.stateSaveParams                                                                         // 10786\n\t\t *                                                                                                                   // 10787\n\t\t *  @example                                                                                                         // 10788\n\t\t *    // Remove a saved filter, so filtering is never saved                                                          // 10789\n\t\t *    $(document).ready( function() {                                                                                // 10790\n\t\t *      $('#example').dataTable( {                                                                                   // 10791\n\t\t *        \"stateSave\": true,                                                                                         // 10792\n\t\t *        \"stateSaveParams\": function (settings, data) {                                                             // 10793\n\t\t *          data.oSearch.sSearch = \"\";                                                                               // 10794\n\t\t *        }                                                                                                          // 10795\n\t\t *      } );                                                                                                         // 10796\n\t\t *    } );                                                                                                           // 10797\n\t\t */                                                                                                                  // 10798\n\t\t\"fnStateSaveParams\": null,                                                                                           // 10799\n\t                                                                                                                      // 10800\n\t                                                                                                                      // 10801\n\t\t/**                                                                                                                  // 10802\n\t\t * Duration for which the saved state information is considered valid. After this period                             // 10803\n\t\t * has elapsed the state will be returned to the default.                                                            // 10804\n\t\t * Value is given in seconds.                                                                                        // 10805\n\t\t *  @type int                                                                                                        // 10806\n\t\t *  @default 7200 <i>(2 hours)</i>                                                                                   // 10807\n\t\t *                                                                                                                   // 10808\n\t\t *  @dtopt Options                                                                                                   // 10809\n\t\t *  @name DataTable.defaults.stateDuration                                                                           // 10810\n\t\t *                                                                                                                   // 10811\n\t\t *  @example                                                                                                         // 10812\n\t\t *    $(document).ready( function() {                                                                                // 10813\n\t\t *      $('#example').dataTable( {                                                                                   // 10814\n\t\t *        \"stateDuration\": 60*60*24; // 1 day                                                                        // 10815\n\t\t *      } );                                                                                                         // 10816\n\t\t *    } )                                                                                                            // 10817\n\t\t */                                                                                                                  // 10818\n\t\t\"iStateDuration\": 7200,                                                                                              // 10819\n\t                                                                                                                      // 10820\n\t                                                                                                                      // 10821\n\t\t/**                                                                                                                  // 10822\n\t\t * When enabled DataTables will not make a request to the server for the first                                       // 10823\n\t\t * page draw - rather it will use the data already on the page (no sorting etc                                       // 10824\n\t\t * will be applied to it), thus saving on an XHR at load time. `deferLoading`                                        // 10825\n\t\t * is used to indicate that deferred loading is required, but it is also used                                        // 10826\n\t\t * to tell DataTables how many records there are in the full table (allowing                                         // 10827\n\t\t * the information element and pagination to be displayed correctly). In the case                                    // 10828\n\t\t * where a filtering is applied to the table on initial load, this can be                                            // 10829\n\t\t * indicated by giving the parameter as an array, where the first element is                                         // 10830\n\t\t * the number of records available after filtering and the second element is the                                     // 10831\n\t\t * number of records without filtering (allowing the table information element                                       // 10832\n\t\t * to be shown correctly).                                                                                           // 10833\n\t\t *  @type int | array                                                                                                // 10834\n\t\t *  @default null                                                                                                    // 10835\n\t\t *                                                                                                                   // 10836\n\t\t *  @dtopt Options                                                                                                   // 10837\n\t\t *  @name DataTable.defaults.deferLoading                                                                            // 10838\n\t\t *                                                                                                                   // 10839\n\t\t *  @example                                                                                                         // 10840\n\t\t *    // 57 records available in the table, no filtering applied                                                     // 10841\n\t\t *    $(document).ready( function() {                                                                                // 10842\n\t\t *      $('#example').dataTable( {                                                                                   // 10843\n\t\t *        \"serverSide\": true,                                                                                        // 10844\n\t\t *        \"ajax\": \"scripts/server_processing.php\",                                                                   // 10845\n\t\t *        \"deferLoading\": 57                                                                                         // 10846\n\t\t *      } );                                                                                                         // 10847\n\t\t *    } );                                                                                                           // 10848\n\t\t *                                                                                                                   // 10849\n\t\t *  @example                                                                                                         // 10850\n\t\t *    // 57 records after filtering, 100 without filtering (an initial filter applied)                               // 10851\n\t\t *    $(document).ready( function() {                                                                                // 10852\n\t\t *      $('#example').dataTable( {                                                                                   // 10853\n\t\t *        \"serverSide\": true,                                                                                        // 10854\n\t\t *        \"ajax\": \"scripts/server_processing.php\",                                                                   // 10855\n\t\t *        \"deferLoading\": [ 57, 100 ],                                                                               // 10856\n\t\t *        \"search\": {                                                                                                // 10857\n\t\t *          \"search\": \"my_filter\"                                                                                    // 10858\n\t\t *        }                                                                                                          // 10859\n\t\t *      } );                                                                                                         // 10860\n\t\t *    } );                                                                                                           // 10861\n\t\t */                                                                                                                  // 10862\n\t\t\"iDeferLoading\": null,                                                                                               // 10863\n\t                                                                                                                      // 10864\n\t                                                                                                                      // 10865\n\t\t/**                                                                                                                  // 10866\n\t\t * Number of rows to display on a single page when using pagination. If                                              // 10867\n\t\t * feature enabled (`lengthChange`) then the end user will be able to override                                       // 10868\n\t\t * this to a custom setting using a pop-up menu.                                                                     // 10869\n\t\t *  @type int                                                                                                        // 10870\n\t\t *  @default 10                                                                                                      // 10871\n\t\t *                                                                                                                   // 10872\n\t\t *  @dtopt Options                                                                                                   // 10873\n\t\t *  @name DataTable.defaults.pageLength                                                                              // 10874\n\t\t *                                                                                                                   // 10875\n\t\t *  @example                                                                                                         // 10876\n\t\t *    $(document).ready( function() {                                                                                // 10877\n\t\t *      $('#example').dataTable( {                                                                                   // 10878\n\t\t *        \"pageLength\": 50                                                                                           // 10879\n\t\t *      } );                                                                                                         // 10880\n\t\t *    } )                                                                                                            // 10881\n\t\t */                                                                                                                  // 10882\n\t\t\"iDisplayLength\": 10,                                                                                                // 10883\n\t                                                                                                                      // 10884\n\t                                                                                                                      // 10885\n\t\t/**                                                                                                                  // 10886\n\t\t * Define the starting point for data display when using DataTables with                                             // 10887\n\t\t * pagination. Note that this parameter is the number of records, rather than                                        // 10888\n\t\t * the page number, so if you have 10 records per page and want to start on                                          // 10889\n\t\t * the third page, it should be \"20\".                                                                                // 10890\n\t\t *  @type int                                                                                                        // 10891\n\t\t *  @default 0                                                                                                       // 10892\n\t\t *                                                                                                                   // 10893\n\t\t *  @dtopt Options                                                                                                   // 10894\n\t\t *  @name DataTable.defaults.displayStart                                                                            // 10895\n\t\t *                                                                                                                   // 10896\n\t\t *  @example                                                                                                         // 10897\n\t\t *    $(document).ready( function() {                                                                                // 10898\n\t\t *      $('#example').dataTable( {                                                                                   // 10899\n\t\t *        \"displayStart\": 20                                                                                         // 10900\n\t\t *      } );                                                                                                         // 10901\n\t\t *    } )                                                                                                            // 10902\n\t\t */                                                                                                                  // 10903\n\t\t\"iDisplayStart\": 0,                                                                                                  // 10904\n\t                                                                                                                      // 10905\n\t                                                                                                                      // 10906\n\t\t/**                                                                                                                  // 10907\n\t\t * By default DataTables allows keyboard navigation of the table (sorting, paging,                                   // 10908\n\t\t * and filtering) by adding a `tabindex` attribute to the required elements. This                                    // 10909\n\t\t * allows you to tab through the controls and press the enter key to activate them.                                  // 10910\n\t\t * The tabindex is default 0, meaning that the tab follows the flow of the document.                                 // 10911\n\t\t * You can overrule this using this parameter if you wish. Use a value of -1 to                                      // 10912\n\t\t * disable built-in keyboard navigation.                                                                             // 10913\n\t\t *  @type int                                                                                                        // 10914\n\t\t *  @default 0                                                                                                       // 10915\n\t\t *                                                                                                                   // 10916\n\t\t *  @dtopt Options                                                                                                   // 10917\n\t\t *  @name DataTable.defaults.tabIndex                                                                                // 10918\n\t\t *                                                                                                                   // 10919\n\t\t *  @example                                                                                                         // 10920\n\t\t *    $(document).ready( function() {                                                                                // 10921\n\t\t *      $('#example').dataTable( {                                                                                   // 10922\n\t\t *        \"tabIndex\": 1                                                                                              // 10923\n\t\t *      } );                                                                                                         // 10924\n\t\t *    } );                                                                                                           // 10925\n\t\t */                                                                                                                  // 10926\n\t\t\"iTabIndex\": 0,                                                                                                      // 10927\n\t                                                                                                                      // 10928\n\t                                                                                                                      // 10929\n\t\t/**                                                                                                                  // 10930\n\t\t * Classes that DataTables assigns to the various components and features                                            // 10931\n\t\t * that it adds to the HTML table. This allows classes to be configured                                              // 10932\n\t\t * during initialisation in addition to through the static                                                           // 10933\n\t\t * {@link DataTable.ext.oStdClasses} object).                                                                        // 10934\n\t\t *  @namespace                                                                                                       // 10935\n\t\t *  @name DataTable.defaults.classes                                                                                 // 10936\n\t\t */                                                                                                                  // 10937\n\t\t\"oClasses\": {},                                                                                                      // 10938\n\t                                                                                                                      // 10939\n\t                                                                                                                      // 10940\n\t\t/**                                                                                                                  // 10941\n\t\t * All strings that DataTables uses in the user interface that it creates                                            // 10942\n\t\t * are defined in this object, allowing you to modified them individually or                                         // 10943\n\t\t * completely replace them all as required.                                                                          // 10944\n\t\t *  @namespace                                                                                                       // 10945\n\t\t *  @name DataTable.defaults.language                                                                                // 10946\n\t\t */                                                                                                                  // 10947\n\t\t\"oLanguage\": {                                                                                                       // 10948\n\t\t\t/**                                                                                                                 // 10949\n\t\t\t * Strings that are used for WAI-ARIA labels and controls only (these are not                                       // 10950\n\t\t\t * actually visible on the page, but will be read by screenreaders, and thus                                        // 10951\n\t\t\t * must be internationalised as well).                                                                              // 10952\n\t\t\t *  @namespace                                                                                                      // 10953\n\t\t\t *  @name DataTable.defaults.language.aria                                                                          // 10954\n\t\t\t */                                                                                                                 // 10955\n\t\t\t\"oAria\": {                                                                                                          // 10956\n\t\t\t\t/**                                                                                                                // 10957\n\t\t\t\t * ARIA label that is added to the table headers when the column may be                                            // 10958\n\t\t\t\t * sorted ascending by activing the column (click or return when focused).                                         // 10959\n\t\t\t\t * Note that the column header is prefixed to this string.                                                         // 10960\n\t\t\t\t *  @type string                                                                                                   // 10961\n\t\t\t\t *  @default : activate to sort column ascending                                                                   // 10962\n\t\t\t\t *                                                                                                                 // 10963\n\t\t\t\t *  @dtopt Language                                                                                                // 10964\n\t\t\t\t *  @name DataTable.defaults.language.aria.sortAscending                                                           // 10965\n\t\t\t\t *                                                                                                                 // 10966\n\t\t\t\t *  @example                                                                                                       // 10967\n\t\t\t\t *    $(document).ready( function() {                                                                              // 10968\n\t\t\t\t *      $('#example').dataTable( {                                                                                 // 10969\n\t\t\t\t *        \"language\": {                                                                                            // 10970\n\t\t\t\t *          \"aria\": {                                                                                              // 10971\n\t\t\t\t *            \"sortAscending\": \" - click/return to sort ascending\"                                                 // 10972\n\t\t\t\t *          }                                                                                                      // 10973\n\t\t\t\t *        }                                                                                                        // 10974\n\t\t\t\t *      } );                                                                                                       // 10975\n\t\t\t\t *    } );                                                                                                         // 10976\n\t\t\t\t */                                                                                                                // 10977\n\t\t\t\t\"sSortAscending\": \": activate to sort column ascending\",                                                           // 10978\n\t                                                                                                                      // 10979\n\t\t\t\t/**                                                                                                                // 10980\n\t\t\t\t * ARIA label that is added to the table headers when the column may be                                            // 10981\n\t\t\t\t * sorted descending by activing the column (click or return when focused).                                        // 10982\n\t\t\t\t * Note that the column header is prefixed to this string.                                                         // 10983\n\t\t\t\t *  @type string                                                                                                   // 10984\n\t\t\t\t *  @default : activate to sort column ascending                                                                   // 10985\n\t\t\t\t *                                                                                                                 // 10986\n\t\t\t\t *  @dtopt Language                                                                                                // 10987\n\t\t\t\t *  @name DataTable.defaults.language.aria.sortDescending                                                          // 10988\n\t\t\t\t *                                                                                                                 // 10989\n\t\t\t\t *  @example                                                                                                       // 10990\n\t\t\t\t *    $(document).ready( function() {                                                                              // 10991\n\t\t\t\t *      $('#example').dataTable( {                                                                                 // 10992\n\t\t\t\t *        \"language\": {                                                                                            // 10993\n\t\t\t\t *          \"aria\": {                                                                                              // 10994\n\t\t\t\t *            \"sortDescending\": \" - click/return to sort descending\"                                               // 10995\n\t\t\t\t *          }                                                                                                      // 10996\n\t\t\t\t *        }                                                                                                        // 10997\n\t\t\t\t *      } );                                                                                                       // 10998\n\t\t\t\t *    } );                                                                                                         // 10999\n\t\t\t\t */                                                                                                                // 11000\n\t\t\t\t\"sSortDescending\": \": activate to sort column descending\"                                                          // 11001\n\t\t\t},                                                                                                                  // 11002\n\t                                                                                                                      // 11003\n\t\t\t/**                                                                                                                 // 11004\n\t\t\t * Pagination string used by DataTables for the built-in pagination                                                 // 11005\n\t\t\t * control types.                                                                                                   // 11006\n\t\t\t *  @namespace                                                                                                      // 11007\n\t\t\t *  @name DataTable.defaults.language.paginate                                                                      // 11008\n\t\t\t */                                                                                                                 // 11009\n\t\t\t\"oPaginate\": {                                                                                                      // 11010\n\t\t\t\t/**                                                                                                                // 11011\n\t\t\t\t * Text to use when using the 'full_numbers' type of pagination for the                                            // 11012\n\t\t\t\t * button to take the user to the first page.                                                                      // 11013\n\t\t\t\t *  @type string                                                                                                   // 11014\n\t\t\t\t *  @default First                                                                                                 // 11015\n\t\t\t\t *                                                                                                                 // 11016\n\t\t\t\t *  @dtopt Language                                                                                                // 11017\n\t\t\t\t *  @name DataTable.defaults.language.paginate.first                                                               // 11018\n\t\t\t\t *                                                                                                                 // 11019\n\t\t\t\t *  @example                                                                                                       // 11020\n\t\t\t\t *    $(document).ready( function() {                                                                              // 11021\n\t\t\t\t *      $('#example').dataTable( {                                                                                 // 11022\n\t\t\t\t *        \"language\": {                                                                                            // 11023\n\t\t\t\t *          \"paginate\": {                                                                                          // 11024\n\t\t\t\t *            \"first\": \"First page\"                                                                                // 11025\n\t\t\t\t *          }                                                                                                      // 11026\n\t\t\t\t *        }                                                                                                        // 11027\n\t\t\t\t *      } );                                                                                                       // 11028\n\t\t\t\t *    } );                                                                                                         // 11029\n\t\t\t\t */                                                                                                                // 11030\n\t\t\t\t\"sFirst\": \"First\",                                                                                                 // 11031\n\t                                                                                                                      // 11032\n\t                                                                                                                      // 11033\n\t\t\t\t/**                                                                                                                // 11034\n\t\t\t\t * Text to use when using the 'full_numbers' type of pagination for the                                            // 11035\n\t\t\t\t * button to take the user to the last page.                                                                       // 11036\n\t\t\t\t *  @type string                                                                                                   // 11037\n\t\t\t\t *  @default Last                                                                                                  // 11038\n\t\t\t\t *                                                                                                                 // 11039\n\t\t\t\t *  @dtopt Language                                                                                                // 11040\n\t\t\t\t *  @name DataTable.defaults.language.paginate.last                                                                // 11041\n\t\t\t\t *                                                                                                                 // 11042\n\t\t\t\t *  @example                                                                                                       // 11043\n\t\t\t\t *    $(document).ready( function() {                                                                              // 11044\n\t\t\t\t *      $('#example').dataTable( {                                                                                 // 11045\n\t\t\t\t *        \"language\": {                                                                                            // 11046\n\t\t\t\t *          \"paginate\": {                                                                                          // 11047\n\t\t\t\t *            \"last\": \"Last page\"                                                                                  // 11048\n\t\t\t\t *          }                                                                                                      // 11049\n\t\t\t\t *        }                                                                                                        // 11050\n\t\t\t\t *      } );                                                                                                       // 11051\n\t\t\t\t *    } );                                                                                                         // 11052\n\t\t\t\t */                                                                                                                // 11053\n\t\t\t\t\"sLast\": \"Last\",                                                                                                   // 11054\n\t                                                                                                                      // 11055\n\t                                                                                                                      // 11056\n\t\t\t\t/**                                                                                                                // 11057\n\t\t\t\t * Text to use for the 'next' pagination button (to take the user to the                                           // 11058\n\t\t\t\t * next page).                                                                                                     // 11059\n\t\t\t\t *  @type string                                                                                                   // 11060\n\t\t\t\t *  @default Next                                                                                                  // 11061\n\t\t\t\t *                                                                                                                 // 11062\n\t\t\t\t *  @dtopt Language                                                                                                // 11063\n\t\t\t\t *  @name DataTable.defaults.language.paginate.next                                                                // 11064\n\t\t\t\t *                                                                                                                 // 11065\n\t\t\t\t *  @example                                                                                                       // 11066\n\t\t\t\t *    $(document).ready( function() {                                                                              // 11067\n\t\t\t\t *      $('#example').dataTable( {                                                                                 // 11068\n\t\t\t\t *        \"language\": {                                                                                            // 11069\n\t\t\t\t *          \"paginate\": {                                                                                          // 11070\n\t\t\t\t *            \"next\": \"Next page\"                                                                                  // 11071\n\t\t\t\t *          }                                                                                                      // 11072\n\t\t\t\t *        }                                                                                                        // 11073\n\t\t\t\t *      } );                                                                                                       // 11074\n\t\t\t\t *    } );                                                                                                         // 11075\n\t\t\t\t */                                                                                                                // 11076\n\t\t\t\t\"sNext\": \"Next\",                                                                                                   // 11077\n\t                                                                                                                      // 11078\n\t                                                                                                                      // 11079\n\t\t\t\t/**                                                                                                                // 11080\n\t\t\t\t * Text to use for the 'previous' pagination button (to take the user to                                           // 11081\n\t\t\t\t * the previous page).                                                                                             // 11082\n\t\t\t\t *  @type string                                                                                                   // 11083\n\t\t\t\t *  @default Previous                                                                                              // 11084\n\t\t\t\t *                                                                                                                 // 11085\n\t\t\t\t *  @dtopt Language                                                                                                // 11086\n\t\t\t\t *  @name DataTable.defaults.language.paginate.previous                                                            // 11087\n\t\t\t\t *                                                                                                                 // 11088\n\t\t\t\t *  @example                                                                                                       // 11089\n\t\t\t\t *    $(document).ready( function() {                                                                              // 11090\n\t\t\t\t *      $('#example').dataTable( {                                                                                 // 11091\n\t\t\t\t *        \"language\": {                                                                                            // 11092\n\t\t\t\t *          \"paginate\": {                                                                                          // 11093\n\t\t\t\t *            \"previous\": \"Previous page\"                                                                          // 11094\n\t\t\t\t *          }                                                                                                      // 11095\n\t\t\t\t *        }                                                                                                        // 11096\n\t\t\t\t *      } );                                                                                                       // 11097\n\t\t\t\t *    } );                                                                                                         // 11098\n\t\t\t\t */                                                                                                                // 11099\n\t\t\t\t\"sPrevious\": \"Previous\"                                                                                            // 11100\n\t\t\t},                                                                                                                  // 11101\n\t                                                                                                                      // 11102\n\t\t\t/**                                                                                                                 // 11103\n\t\t\t * This string is shown in preference to `zeroRecords` when the table is                                            // 11104\n\t\t\t * empty of data (regardless of filtering). Note that this is an optional                                           // 11105\n\t\t\t * parameter - if it is not given, the value of `zeroRecords` will be used                                          // 11106\n\t\t\t * instead (either the default or given value).                                                                     // 11107\n\t\t\t *  @type string                                                                                                    // 11108\n\t\t\t *  @default No data available in table                                                                             // 11109\n\t\t\t *                                                                                                                  // 11110\n\t\t\t *  @dtopt Language                                                                                                 // 11111\n\t\t\t *  @name DataTable.defaults.language.emptyTable                                                                    // 11112\n\t\t\t *                                                                                                                  // 11113\n\t\t\t *  @example                                                                                                        // 11114\n\t\t\t *    $(document).ready( function() {                                                                               // 11115\n\t\t\t *      $('#example').dataTable( {                                                                                  // 11116\n\t\t\t *        \"language\": {                                                                                             // 11117\n\t\t\t *          \"emptyTable\": \"No data available in table\"                                                              // 11118\n\t\t\t *        }                                                                                                         // 11119\n\t\t\t *      } );                                                                                                        // 11120\n\t\t\t *    } );                                                                                                          // 11121\n\t\t\t */                                                                                                                 // 11122\n\t\t\t\"sEmptyTable\": \"No data available in table\",                                                                        // 11123\n\t                                                                                                                      // 11124\n\t                                                                                                                      // 11125\n\t\t\t/**                                                                                                                 // 11126\n\t\t\t * This string gives information to the end user about the information                                              // 11127\n\t\t\t * that is current on display on the page. The following tokens can be                                              // 11128\n\t\t\t * used in the string and will be dynamically replaced as the table                                                 // 11129\n\t\t\t * display updates. This tokens can be placed anywhere in the string, or                                            // 11130\n\t\t\t * removed as needed by the language requires:                                                                      // 11131\n\t\t\t *                                                                                                                  // 11132\n\t\t\t * * `\\_START\\_` - Display index of the first record on the current page                                            // 11133\n\t\t\t * * `\\_END\\_` - Display index of the last record on the current page                                               // 11134\n\t\t\t * * `\\_TOTAL\\_` - Number of records in the table after filtering                                                   // 11135\n\t\t\t * * `\\_MAX\\_` - Number of records in the table without filtering                                                   // 11136\n\t\t\t * * `\\_PAGE\\_` - Current page number                                                                               // 11137\n\t\t\t * * `\\_PAGES\\_` - Total number of pages of data in the table                                                       // 11138\n\t\t\t *                                                                                                                  // 11139\n\t\t\t *  @type string                                                                                                    // 11140\n\t\t\t *  @default Showing _START_ to _END_ of _TOTAL_ entries                                                            // 11141\n\t\t\t *                                                                                                                  // 11142\n\t\t\t *  @dtopt Language                                                                                                 // 11143\n\t\t\t *  @name DataTable.defaults.language.info                                                                          // 11144\n\t\t\t *                                                                                                                  // 11145\n\t\t\t *  @example                                                                                                        // 11146\n\t\t\t *    $(document).ready( function() {                                                                               // 11147\n\t\t\t *      $('#example').dataTable( {                                                                                  // 11148\n\t\t\t *        \"language\": {                                                                                             // 11149\n\t\t\t *          \"info\": \"Showing page _PAGE_ of _PAGES_\"                                                                // 11150\n\t\t\t *        }                                                                                                         // 11151\n\t\t\t *      } );                                                                                                        // 11152\n\t\t\t *    } );                                                                                                          // 11153\n\t\t\t */                                                                                                                 // 11154\n\t\t\t\"sInfo\": \"Showing _START_ to _END_ of _TOTAL_ entries\",                                                             // 11155\n\t                                                                                                                      // 11156\n\t                                                                                                                      // 11157\n\t\t\t/**                                                                                                                 // 11158\n\t\t\t * Display information string for when the table is empty. Typically the                                            // 11159\n\t\t\t * format of this string should match `info`.                                                                       // 11160\n\t\t\t *  @type string                                                                                                    // 11161\n\t\t\t *  @default Showing 0 to 0 of 0 entries                                                                            // 11162\n\t\t\t *                                                                                                                  // 11163\n\t\t\t *  @dtopt Language                                                                                                 // 11164\n\t\t\t *  @name DataTable.defaults.language.infoEmpty                                                                     // 11165\n\t\t\t *                                                                                                                  // 11166\n\t\t\t *  @example                                                                                                        // 11167\n\t\t\t *    $(document).ready( function() {                                                                               // 11168\n\t\t\t *      $('#example').dataTable( {                                                                                  // 11169\n\t\t\t *        \"language\": {                                                                                             // 11170\n\t\t\t *          \"infoEmpty\": \"No entries to show\"                                                                       // 11171\n\t\t\t *        }                                                                                                         // 11172\n\t\t\t *      } );                                                                                                        // 11173\n\t\t\t *    } );                                                                                                          // 11174\n\t\t\t */                                                                                                                 // 11175\n\t\t\t\"sInfoEmpty\": \"Showing 0 to 0 of 0 entries\",                                                                        // 11176\n\t                                                                                                                      // 11177\n\t                                                                                                                      // 11178\n\t\t\t/**                                                                                                                 // 11179\n\t\t\t * When a user filters the information in a table, this string is appended                                          // 11180\n\t\t\t * to the information (`info`) to give an idea of how strong the filtering                                          // 11181\n\t\t\t * is. The variable _MAX_ is dynamically updated.                                                                   // 11182\n\t\t\t *  @type string                                                                                                    // 11183\n\t\t\t *  @default (filtered from _MAX_ total entries)                                                                    // 11184\n\t\t\t *                                                                                                                  // 11185\n\t\t\t *  @dtopt Language                                                                                                 // 11186\n\t\t\t *  @name DataTable.defaults.language.infoFiltered                                                                  // 11187\n\t\t\t *                                                                                                                  // 11188\n\t\t\t *  @example                                                                                                        // 11189\n\t\t\t *    $(document).ready( function() {                                                                               // 11190\n\t\t\t *      $('#example').dataTable( {                                                                                  // 11191\n\t\t\t *        \"language\": {                                                                                             // 11192\n\t\t\t *          \"infoFiltered\": \" - filtering from _MAX_ records\"                                                       // 11193\n\t\t\t *        }                                                                                                         // 11194\n\t\t\t *      } );                                                                                                        // 11195\n\t\t\t *    } );                                                                                                          // 11196\n\t\t\t */                                                                                                                 // 11197\n\t\t\t\"sInfoFiltered\": \"(filtered from _MAX_ total entries)\",                                                             // 11198\n\t                                                                                                                      // 11199\n\t                                                                                                                      // 11200\n\t\t\t/**                                                                                                                 // 11201\n\t\t\t * If can be useful to append extra information to the info string at times,                                        // 11202\n\t\t\t * and this variable does exactly that. This information will be appended to                                        // 11203\n\t\t\t * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are                                      // 11204\n\t\t\t * being used) at all times.                                                                                        // 11205\n\t\t\t *  @type string                                                                                                    // 11206\n\t\t\t *  @default <i>Empty string</i>                                                                                    // 11207\n\t\t\t *                                                                                                                  // 11208\n\t\t\t *  @dtopt Language                                                                                                 // 11209\n\t\t\t *  @name DataTable.defaults.language.infoPostFix                                                                   // 11210\n\t\t\t *                                                                                                                  // 11211\n\t\t\t *  @example                                                                                                        // 11212\n\t\t\t *    $(document).ready( function() {                                                                               // 11213\n\t\t\t *      $('#example').dataTable( {                                                                                  // 11214\n\t\t\t *        \"language\": {                                                                                             // 11215\n\t\t\t *          \"infoPostFix\": \"All records shown are derived from real information.\"                                   // 11216\n\t\t\t *        }                                                                                                         // 11217\n\t\t\t *      } );                                                                                                        // 11218\n\t\t\t *    } );                                                                                                          // 11219\n\t\t\t */                                                                                                                 // 11220\n\t\t\t\"sInfoPostFix\": \"\",                                                                                                 // 11221\n\t                                                                                                                      // 11222\n\t                                                                                                                      // 11223\n\t\t\t/**                                                                                                                 // 11224\n\t\t\t * This decimal place operator is a little different from the other                                                 // 11225\n\t\t\t * language options since DataTables doesn't output floating point                                                  // 11226\n\t\t\t * numbers, so it won't ever use this for display of a number. Rather,                                              // 11227\n\t\t\t * what this parameter does is modify the sort methods of the table so                                              // 11228\n\t\t\t * that numbers which are in a format which has a character other than                                              // 11229\n\t\t\t * a period (`.`) as a decimal place will be sorted numerically.                                                    // 11230\n\t\t\t *                                                                                                                  // 11231\n\t\t\t * Note that numbers with different decimal places cannot be shown in                                               // 11232\n\t\t\t * the same table and still be sortable, the table must be consistent.                                              // 11233\n\t\t\t * However, multiple different tables on the page can use different                                                 // 11234\n\t\t\t * decimal place characters.                                                                                        // 11235\n\t\t\t *  @type string                                                                                                    // 11236\n\t\t\t *  @default                                                                                                        // 11237\n\t\t\t *                                                                                                                  // 11238\n\t\t\t *  @dtopt Language                                                                                                 // 11239\n\t\t\t *  @name DataTable.defaults.language.decimal                                                                       // 11240\n\t\t\t *                                                                                                                  // 11241\n\t\t\t *  @example                                                                                                        // 11242\n\t\t\t *    $(document).ready( function() {                                                                               // 11243\n\t\t\t *      $('#example').dataTable( {                                                                                  // 11244\n\t\t\t *        \"language\": {                                                                                             // 11245\n\t\t\t *          \"decimal\": \",\"                                                                                          // 11246\n\t\t\t *          \"thousands\": \".\"                                                                                        // 11247\n\t\t\t *        }                                                                                                         // 11248\n\t\t\t *      } );                                                                                                        // 11249\n\t\t\t *    } );                                                                                                          // 11250\n\t\t\t */                                                                                                                 // 11251\n\t\t\t\"sDecimal\": \"\",                                                                                                     // 11252\n\t                                                                                                                      // 11253\n\t                                                                                                                      // 11254\n\t\t\t/**                                                                                                                 // 11255\n\t\t\t * DataTables has a build in number formatter (`formatNumber`) which is                                             // 11256\n\t\t\t * used to format large numbers that are used in the table information.                                             // 11257\n\t\t\t * By default a comma is used, but this can be trivially changed to any                                             // 11258\n\t\t\t * character you wish with this parameter.                                                                          // 11259\n\t\t\t *  @type string                                                                                                    // 11260\n\t\t\t *  @default ,                                                                                                      // 11261\n\t\t\t *                                                                                                                  // 11262\n\t\t\t *  @dtopt Language                                                                                                 // 11263\n\t\t\t *  @name DataTable.defaults.language.thousands                                                                     // 11264\n\t\t\t *                                                                                                                  // 11265\n\t\t\t *  @example                                                                                                        // 11266\n\t\t\t *    $(document).ready( function() {                                                                               // 11267\n\t\t\t *      $('#example').dataTable( {                                                                                  // 11268\n\t\t\t *        \"language\": {                                                                                             // 11269\n\t\t\t *          \"thousands\": \"'\"                                                                                        // 11270\n\t\t\t *        }                                                                                                         // 11271\n\t\t\t *      } );                                                                                                        // 11272\n\t\t\t *    } );                                                                                                          // 11273\n\t\t\t */                                                                                                                 // 11274\n\t\t\t\"sThousands\": \",\",                                                                                                  // 11275\n\t                                                                                                                      // 11276\n\t                                                                                                                      // 11277\n\t\t\t/**                                                                                                                 // 11278\n\t\t\t * Detail the action that will be taken when the drop down menu for the                                             // 11279\n\t\t\t * pagination length option is changed. The '_MENU_' variable is replaced                                           // 11280\n\t\t\t * with a default select list of 10, 25, 50 and 100, and can be replaced                                            // 11281\n\t\t\t * with a custom select box if required.                                                                            // 11282\n\t\t\t *  @type string                                                                                                    // 11283\n\t\t\t *  @default Show _MENU_ entries                                                                                    // 11284\n\t\t\t *                                                                                                                  // 11285\n\t\t\t *  @dtopt Language                                                                                                 // 11286\n\t\t\t *  @name DataTable.defaults.language.lengthMenu                                                                    // 11287\n\t\t\t *                                                                                                                  // 11288\n\t\t\t *  @example                                                                                                        // 11289\n\t\t\t *    // Language change only                                                                                       // 11290\n\t\t\t *    $(document).ready( function() {                                                                               // 11291\n\t\t\t *      $('#example').dataTable( {                                                                                  // 11292\n\t\t\t *        \"language\": {                                                                                             // 11293\n\t\t\t *          \"lengthMenu\": \"Display _MENU_ records\"                                                                  // 11294\n\t\t\t *        }                                                                                                         // 11295\n\t\t\t *      } );                                                                                                        // 11296\n\t\t\t *    } );                                                                                                          // 11297\n\t\t\t *                                                                                                                  // 11298\n\t\t\t *  @example                                                                                                        // 11299\n\t\t\t *    // Language and options change                                                                                // 11300\n\t\t\t *    $(document).ready( function() {                                                                               // 11301\n\t\t\t *      $('#example').dataTable( {                                                                                  // 11302\n\t\t\t *        \"language\": {                                                                                             // 11303\n\t\t\t *          \"lengthMenu\": 'Display <select>'+                                                                       // 11304\n\t\t\t *            '<option value=\"10\">10</option>'+                                                                     // 11305\n\t\t\t *            '<option value=\"20\">20</option>'+                                                                     // 11306\n\t\t\t *            '<option value=\"30\">30</option>'+                                                                     // 11307\n\t\t\t *            '<option value=\"40\">40</option>'+                                                                     // 11308\n\t\t\t *            '<option value=\"50\">50</option>'+                                                                     // 11309\n\t\t\t *            '<option value=\"-1\">All</option>'+                                                                    // 11310\n\t\t\t *            '</select> records'                                                                                   // 11311\n\t\t\t *        }                                                                                                         // 11312\n\t\t\t *      } );                                                                                                        // 11313\n\t\t\t *    } );                                                                                                          // 11314\n\t\t\t */                                                                                                                 // 11315\n\t\t\t\"sLengthMenu\": \"Show _MENU_ entries\",                                                                               // 11316\n\t                                                                                                                      // 11317\n\t                                                                                                                      // 11318\n\t\t\t/**                                                                                                                 // 11319\n\t\t\t * When using Ajax sourced data and during the first draw when DataTables is                                        // 11320\n\t\t\t * gathering the data, this message is shown in an empty row in the table to                                        // 11321\n\t\t\t * indicate to the end user the the data is being loaded. Note that this                                            // 11322\n\t\t\t * parameter is not used when loading data by server-side processing, just                                          // 11323\n\t\t\t * Ajax sourced data with client-side processing.                                                                   // 11324\n\t\t\t *  @type string                                                                                                    // 11325\n\t\t\t *  @default Loading...                                                                                             // 11326\n\t\t\t *                                                                                                                  // 11327\n\t\t\t *  @dtopt Language                                                                                                 // 11328\n\t\t\t *  @name DataTable.defaults.language.loadingRecords                                                                // 11329\n\t\t\t *                                                                                                                  // 11330\n\t\t\t *  @example                                                                                                        // 11331\n\t\t\t *    $(document).ready( function() {                                                                               // 11332\n\t\t\t *      $('#example').dataTable( {                                                                                  // 11333\n\t\t\t *        \"language\": {                                                                                             // 11334\n\t\t\t *          \"loadingRecords\": \"Please wait - loading...\"                                                            // 11335\n\t\t\t *        }                                                                                                         // 11336\n\t\t\t *      } );                                                                                                        // 11337\n\t\t\t *    } );                                                                                                          // 11338\n\t\t\t */                                                                                                                 // 11339\n\t\t\t\"sLoadingRecords\": \"Loading...\",                                                                                    // 11340\n\t                                                                                                                      // 11341\n\t                                                                                                                      // 11342\n\t\t\t/**                                                                                                                 // 11343\n\t\t\t * Text which is displayed when the table is processing a user action                                               // 11344\n\t\t\t * (usually a sort command or similar).                                                                             // 11345\n\t\t\t *  @type string                                                                                                    // 11346\n\t\t\t *  @default Processing...                                                                                          // 11347\n\t\t\t *                                                                                                                  // 11348\n\t\t\t *  @dtopt Language                                                                                                 // 11349\n\t\t\t *  @name DataTable.defaults.language.processing                                                                    // 11350\n\t\t\t *                                                                                                                  // 11351\n\t\t\t *  @example                                                                                                        // 11352\n\t\t\t *    $(document).ready( function() {                                                                               // 11353\n\t\t\t *      $('#example').dataTable( {                                                                                  // 11354\n\t\t\t *        \"language\": {                                                                                             // 11355\n\t\t\t *          \"processing\": \"DataTables is currently busy\"                                                            // 11356\n\t\t\t *        }                                                                                                         // 11357\n\t\t\t *      } );                                                                                                        // 11358\n\t\t\t *    } );                                                                                                          // 11359\n\t\t\t */                                                                                                                 // 11360\n\t\t\t\"sProcessing\": \"Processing...\",                                                                                     // 11361\n\t                                                                                                                      // 11362\n\t                                                                                                                      // 11363\n\t\t\t/**                                                                                                                 // 11364\n\t\t\t * Details the actions that will be taken when the user types into the                                              // 11365\n\t\t\t * filtering input text box. The variable \"_INPUT_\", if used in the string,                                         // 11366\n\t\t\t * is replaced with the HTML text box for the filtering input allowing                                              // 11367\n\t\t\t * control over where it appears in the string. If \"_INPUT_\" is not given                                           // 11368\n\t\t\t * then the input box is appended to the string automatically.                                                      // 11369\n\t\t\t *  @type string                                                                                                    // 11370\n\t\t\t *  @default Search:                                                                                                // 11371\n\t\t\t *                                                                                                                  // 11372\n\t\t\t *  @dtopt Language                                                                                                 // 11373\n\t\t\t *  @name DataTable.defaults.language.search                                                                        // 11374\n\t\t\t *                                                                                                                  // 11375\n\t\t\t *  @example                                                                                                        // 11376\n\t\t\t *    // Input text box will be appended at the end automatically                                                   // 11377\n\t\t\t *    $(document).ready( function() {                                                                               // 11378\n\t\t\t *      $('#example').dataTable( {                                                                                  // 11379\n\t\t\t *        \"language\": {                                                                                             // 11380\n\t\t\t *          \"search\": \"Filter records:\"                                                                             // 11381\n\t\t\t *        }                                                                                                         // 11382\n\t\t\t *      } );                                                                                                        // 11383\n\t\t\t *    } );                                                                                                          // 11384\n\t\t\t *                                                                                                                  // 11385\n\t\t\t *  @example                                                                                                        // 11386\n\t\t\t *    // Specify where the filter should appear                                                                     // 11387\n\t\t\t *    $(document).ready( function() {                                                                               // 11388\n\t\t\t *      $('#example').dataTable( {                                                                                  // 11389\n\t\t\t *        \"language\": {                                                                                             // 11390\n\t\t\t *          \"search\": \"Apply filter _INPUT_ to table\"                                                               // 11391\n\t\t\t *        }                                                                                                         // 11392\n\t\t\t *      } );                                                                                                        // 11393\n\t\t\t *    } );                                                                                                          // 11394\n\t\t\t */                                                                                                                 // 11395\n\t\t\t\"sSearch\": \"Search:\",                                                                                               // 11396\n\t                                                                                                                      // 11397\n\t                                                                                                                      // 11398\n\t\t\t/**                                                                                                                 // 11399\n\t\t\t * Assign a `placeholder` attribute to the search `input` element                                                   // 11400\n\t\t\t *  @type string                                                                                                    // 11401\n\t\t\t *  @default                                                                                                        // 11402\n\t\t\t *                                                                                                                  // 11403\n\t\t\t *  @dtopt Language                                                                                                 // 11404\n\t\t\t *  @name DataTable.defaults.language.searchPlaceholder                                                             // 11405\n\t\t\t */                                                                                                                 // 11406\n\t\t\t\"sSearchPlaceholder\": \"\",                                                                                           // 11407\n\t                                                                                                                      // 11408\n\t                                                                                                                      // 11409\n\t\t\t/**                                                                                                                 // 11410\n\t\t\t * All of the language information can be stored in a file on the                                                   // 11411\n\t\t\t * server-side, which DataTables will look up if this parameter is passed.                                          // 11412\n\t\t\t * It must store the URL of the language file, which is in a JSON format,                                           // 11413\n\t\t\t * and the object has the same properties as the oLanguage object in the                                            // 11414\n\t\t\t * initialiser object (i.e. the above parameters). Please refer to one of                                           // 11415\n\t\t\t * the example language files to see how this works in action.                                                      // 11416\n\t\t\t *  @type string                                                                                                    // 11417\n\t\t\t *  @default <i>Empty string - i.e. disabled</i>                                                                    // 11418\n\t\t\t *                                                                                                                  // 11419\n\t\t\t *  @dtopt Language                                                                                                 // 11420\n\t\t\t *  @name DataTable.defaults.language.url                                                                           // 11421\n\t\t\t *                                                                                                                  // 11422\n\t\t\t *  @example                                                                                                        // 11423\n\t\t\t *    $(document).ready( function() {                                                                               // 11424\n\t\t\t *      $('#example').dataTable( {                                                                                  // 11425\n\t\t\t *        \"language\": {                                                                                             // 11426\n\t\t\t *          \"url\": \"http://www.sprymedia.co.uk/dataTables/lang.txt\"                                                 // 11427\n\t\t\t *        }                                                                                                         // 11428\n\t\t\t *      } );                                                                                                        // 11429\n\t\t\t *    } );                                                                                                          // 11430\n\t\t\t */                                                                                                                 // 11431\n\t\t\t\"sUrl\": \"\",                                                                                                         // 11432\n\t                                                                                                                      // 11433\n\t                                                                                                                      // 11434\n\t\t\t/**                                                                                                                 // 11435\n\t\t\t * Text shown inside the table records when the is no information to be                                             // 11436\n\t\t\t * displayed after filtering. `emptyTable` is shown when there is simply no                                         // 11437\n\t\t\t * information in the table at all (regardless of filtering).                                                       // 11438\n\t\t\t *  @type string                                                                                                    // 11439\n\t\t\t *  @default No matching records found                                                                              // 11440\n\t\t\t *                                                                                                                  // 11441\n\t\t\t *  @dtopt Language                                                                                                 // 11442\n\t\t\t *  @name DataTable.defaults.language.zeroRecords                                                                   // 11443\n\t\t\t *                                                                                                                  // 11444\n\t\t\t *  @example                                                                                                        // 11445\n\t\t\t *    $(document).ready( function() {                                                                               // 11446\n\t\t\t *      $('#example').dataTable( {                                                                                  // 11447\n\t\t\t *        \"language\": {                                                                                             // 11448\n\t\t\t *          \"zeroRecords\": \"No records to display\"                                                                  // 11449\n\t\t\t *        }                                                                                                         // 11450\n\t\t\t *      } );                                                                                                        // 11451\n\t\t\t *    } );                                                                                                          // 11452\n\t\t\t */                                                                                                                 // 11453\n\t\t\t\"sZeroRecords\": \"No matching records found\"                                                                         // 11454\n\t\t},                                                                                                                   // 11455\n\t                                                                                                                      // 11456\n\t                                                                                                                      // 11457\n\t\t/**                                                                                                                  // 11458\n\t\t * This parameter allows you to have define the global filtering state at                                            // 11459\n\t\t * initialisation time. As an object the `search` parameter must be                                                  // 11460\n\t\t * defined, but all other parameters are optional. When `regex` is true,                                             // 11461\n\t\t * the search string will be treated as a regular expression, when false                                             // 11462\n\t\t * (default) it will be treated as a straight string. When `smart`                                                   // 11463\n\t\t * DataTables will use it's smart filtering methods (to word match at                                                // 11464\n\t\t * any point in the data), when false this will not be done.                                                         // 11465\n\t\t *  @namespace                                                                                                       // 11466\n\t\t *  @extends DataTable.models.oSearch                                                                                // 11467\n\t\t *                                                                                                                   // 11468\n\t\t *  @dtopt Options                                                                                                   // 11469\n\t\t *  @name DataTable.defaults.search                                                                                  // 11470\n\t\t *                                                                                                                   // 11471\n\t\t *  @example                                                                                                         // 11472\n\t\t *    $(document).ready( function() {                                                                                // 11473\n\t\t *      $('#example').dataTable( {                                                                                   // 11474\n\t\t *        \"search\": {\"search\": \"Initial search\"}                                                                     // 11475\n\t\t *      } );                                                                                                         // 11476\n\t\t *    } )                                                                                                            // 11477\n\t\t */                                                                                                                  // 11478\n\t\t\"oSearch\": $.extend( {}, DataTable.models.oSearch ),                                                                 // 11479\n\t                                                                                                                      // 11480\n\t                                                                                                                      // 11481\n\t\t/**                                                                                                                  // 11482\n\t\t * __Deprecated__ The functionality provided by this parameter has now been                                          // 11483\n\t\t * superseded by that provided through `ajax`, which should be used instead.                                         // 11484\n\t\t *                                                                                                                   // 11485\n\t\t * By default DataTables will look for the property `data` (or `aaData` for                                          // 11486\n\t\t * compatibility with DataTables 1.9-) when obtaining data from an Ajax                                              // 11487\n\t\t * source or for server-side processing - this parameter allows that                                                 // 11488\n\t\t * property to be changed. You can use Javascript dotted object notation to                                          // 11489\n\t\t * get a data source for multiple levels of nesting.                                                                 // 11490\n\t\t *  @type string                                                                                                     // 11491\n\t\t *  @default data                                                                                                    // 11492\n\t\t *                                                                                                                   // 11493\n\t\t *  @dtopt Options                                                                                                   // 11494\n\t\t *  @dtopt Server-side                                                                                               // 11495\n\t\t *  @name DataTable.defaults.ajaxDataProp                                                                            // 11496\n\t\t *                                                                                                                   // 11497\n\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.                                                  // 11498\n\t\t */                                                                                                                  // 11499\n\t\t\"sAjaxDataProp\": \"data\",                                                                                             // 11500\n\t                                                                                                                      // 11501\n\t                                                                                                                      // 11502\n\t\t/**                                                                                                                  // 11503\n\t\t * __Deprecated__ The functionality provided by this parameter has now been                                          // 11504\n\t\t * superseded by that provided through `ajax`, which should be used instead.                                         // 11505\n\t\t *                                                                                                                   // 11506\n\t\t * You can instruct DataTables to load data from an external                                                         // 11507\n\t\t * source using this parameter (use aData if you want to pass data in you                                            // 11508\n\t\t * already have). Simply provide a url a JSON object can be obtained from.                                           // 11509\n\t\t *  @type string                                                                                                     // 11510\n\t\t *  @default null                                                                                                    // 11511\n\t\t *                                                                                                                   // 11512\n\t\t *  @dtopt Options                                                                                                   // 11513\n\t\t *  @dtopt Server-side                                                                                               // 11514\n\t\t *  @name DataTable.defaults.ajaxSource                                                                              // 11515\n\t\t *                                                                                                                   // 11516\n\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.                                                  // 11517\n\t\t */                                                                                                                  // 11518\n\t\t\"sAjaxSource\": null,                                                                                                 // 11519\n\t                                                                                                                      // 11520\n\t                                                                                                                      // 11521\n\t\t/**                                                                                                                  // 11522\n\t\t * This initialisation variable allows you to specify exactly where in the                                           // 11523\n\t\t * DOM you want DataTables to inject the various controls it adds to the page                                        // 11524\n\t\t * (for example you might want the pagination controls at the top of the                                             // 11525\n\t\t * table). DIV elements (with or without a custom class) can also be added to                                        // 11526\n\t\t * aid styling. The follow syntax is used:                                                                           // 11527\n\t\t *   <ul>                                                                                                            // 11528\n\t\t *     <li>The following options are allowed:                                                                        // 11529\n\t\t *       <ul>                                                                                                        // 11530\n\t\t *         <li>'l' - Length changing</li>                                                                            // 11531\n\t\t *         <li>'f' - Filtering input</li>                                                                            // 11532\n\t\t *         <li>'t' - The table!</li>                                                                                 // 11533\n\t\t *         <li>'i' - Information</li>                                                                                // 11534\n\t\t *         <li>'p' - Pagination</li>                                                                                 // 11535\n\t\t *         <li>'r' - pRocessing</li>                                                                                 // 11536\n\t\t *       </ul>                                                                                                       // 11537\n\t\t *     </li>                                                                                                         // 11538\n\t\t *     <li>The following constants are allowed:                                                                      // 11539\n\t\t *       <ul>                                                                                                        // 11540\n\t\t *         <li>'H' - jQueryUI theme \"header\" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>\n\t\t *         <li>'F' - jQueryUI theme \"footer\" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>\n\t\t *       </ul>                                                                                                       // 11543\n\t\t *     </li>                                                                                                         // 11544\n\t\t *     <li>The following syntax is expected:                                                                         // 11545\n\t\t *       <ul>                                                                                                        // 11546\n\t\t *         <li>'&lt;' and '&gt;' - div elements</li>                                                                 // 11547\n\t\t *         <li>'&lt;\"class\" and '&gt;' - div with a class</li>                                                       // 11548\n\t\t *         <li>'&lt;\"#id\" and '&gt;' - div with an ID</li>                                                           // 11549\n\t\t *       </ul>                                                                                                       // 11550\n\t\t *     </li>                                                                                                         // 11551\n\t\t *     <li>Examples:                                                                                                 // 11552\n\t\t *       <ul>                                                                                                        // 11553\n\t\t *         <li>'&lt;\"wrapper\"flipt&gt;'</li>                                                                         // 11554\n\t\t *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>                                                                          // 11555\n\t\t *       </ul>                                                                                                       // 11556\n\t\t *     </li>                                                                                                         // 11557\n\t\t *   </ul>                                                                                                           // 11558\n\t\t *  @type string                                                                                                     // 11559\n\t\t *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>                                                      // 11560\n\t\t *    <\"H\"lfr>t<\"F\"ip> <i>(when `jQueryUI` is true)</i>                                                              // 11561\n\t\t *                                                                                                                   // 11562\n\t\t *  @dtopt Options                                                                                                   // 11563\n\t\t *  @name DataTable.defaults.dom                                                                                     // 11564\n\t\t *                                                                                                                   // 11565\n\t\t *  @example                                                                                                         // 11566\n\t\t *    $(document).ready( function() {                                                                                // 11567\n\t\t *      $('#example').dataTable( {                                                                                   // 11568\n\t\t *        \"dom\": '&lt;\"top\"i&gt;rt&lt;\"bottom\"flp&gt;&lt;\"clear\"&gt;'                                                // 11569\n\t\t *      } );                                                                                                         // 11570\n\t\t *    } );                                                                                                           // 11571\n\t\t */                                                                                                                  // 11572\n\t\t\"sDom\": \"lfrtip\",                                                                                                    // 11573\n\t                                                                                                                      // 11574\n\t                                                                                                                      // 11575\n\t\t/**                                                                                                                  // 11576\n\t\t * Search delay option. This will throttle full table searches that use the                                          // 11577\n\t\t * DataTables provided search input element (it does not effect calls to                                             // 11578\n\t\t * `dt-api search()`, providing a delay before the search is made.                                                   // 11579\n\t\t *  @type integer                                                                                                    // 11580\n\t\t *  @default 0                                                                                                       // 11581\n\t\t *                                                                                                                   // 11582\n\t\t *  @dtopt Options                                                                                                   // 11583\n\t\t *  @name DataTable.defaults.searchDelay                                                                             // 11584\n\t\t *                                                                                                                   // 11585\n\t\t *  @example                                                                                                         // 11586\n\t\t *    $(document).ready( function() {                                                                                // 11587\n\t\t *      $('#example').dataTable( {                                                                                   // 11588\n\t\t *        \"searchDelay\": 200                                                                                         // 11589\n\t\t *      } );                                                                                                         // 11590\n\t\t *    } )                                                                                                            // 11591\n\t\t */                                                                                                                  // 11592\n\t\t\"searchDelay\": null,                                                                                                 // 11593\n\t                                                                                                                      // 11594\n\t                                                                                                                      // 11595\n\t\t/**                                                                                                                  // 11596\n\t\t * DataTables features four different built-in options for the buttons to                                            // 11597\n\t\t * display for pagination control:                                                                                   // 11598\n\t\t *                                                                                                                   // 11599\n\t\t * * `simple` - 'Previous' and 'Next' buttons only                                                                   // 11600\n\t\t * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers                                             // 11601\n\t\t * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons                                                         // 11602\n\t\t * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus                                           // 11603\n\t\t *   page numbers                                                                                                    // 11604\n\t\t *                                                                                                                   // 11605\n\t\t * Further methods can be added using {@link DataTable.ext.oPagination}.                                             // 11606\n\t\t *  @type string                                                                                                     // 11607\n\t\t *  @default simple_numbers                                                                                          // 11608\n\t\t *                                                                                                                   // 11609\n\t\t *  @dtopt Options                                                                                                   // 11610\n\t\t *  @name DataTable.defaults.pagingType                                                                              // 11611\n\t\t *                                                                                                                   // 11612\n\t\t *  @example                                                                                                         // 11613\n\t\t *    $(document).ready( function() {                                                                                // 11614\n\t\t *      $('#example').dataTable( {                                                                                   // 11615\n\t\t *        \"pagingType\": \"full_numbers\"                                                                               // 11616\n\t\t *      } );                                                                                                         // 11617\n\t\t *    } )                                                                                                            // 11618\n\t\t */                                                                                                                  // 11619\n\t\t\"sPaginationType\": \"simple_numbers\",                                                                                 // 11620\n\t                                                                                                                      // 11621\n\t                                                                                                                      // 11622\n\t\t/**                                                                                                                  // 11623\n\t\t * Enable horizontal scrolling. When a table is too wide to fit into a                                               // 11624\n\t\t * certain layout, or you have a large number of columns in the table, you                                           // 11625\n\t\t * can enable x-scrolling to show the table in a viewport, which can be                                              // 11626\n\t\t * scrolled. This property can be `true` which will allow the table to                                               // 11627\n\t\t * scroll horizontally when needed, or any CSS unit, or a number (in which                                           // 11628\n\t\t * case it will be treated as a pixel measurement). Setting as simply `true`                                         // 11629\n\t\t * is recommended.                                                                                                   // 11630\n\t\t *  @type boolean|string                                                                                             // 11631\n\t\t *  @default <i>blank string - i.e. disabled</i>                                                                     // 11632\n\t\t *                                                                                                                   // 11633\n\t\t *  @dtopt Features                                                                                                  // 11634\n\t\t *  @name DataTable.defaults.scrollX                                                                                 // 11635\n\t\t *                                                                                                                   // 11636\n\t\t *  @example                                                                                                         // 11637\n\t\t *    $(document).ready( function() {                                                                                // 11638\n\t\t *      $('#example').dataTable( {                                                                                   // 11639\n\t\t *        \"scrollX\": true,                                                                                           // 11640\n\t\t *        \"scrollCollapse\": true                                                                                     // 11641\n\t\t *      } );                                                                                                         // 11642\n\t\t *    } );                                                                                                           // 11643\n\t\t */                                                                                                                  // 11644\n\t\t\"sScrollX\": \"\",                                                                                                      // 11645\n\t                                                                                                                      // 11646\n\t                                                                                                                      // 11647\n\t\t/**                                                                                                                  // 11648\n\t\t * This property can be used to force a DataTable to use more width than it                                          // 11649\n\t\t * might otherwise do when x-scrolling is enabled. For example if you have a                                         // 11650\n\t\t * table which requires to be well spaced, this parameter is useful for                                              // 11651\n\t\t * \"over-sizing\" the table, and thus forcing scrolling. This property can by                                         // 11652\n\t\t * any CSS unit, or a number (in which case it will be treated as a pixel                                            // 11653\n\t\t * measurement).                                                                                                     // 11654\n\t\t *  @type string                                                                                                     // 11655\n\t\t *  @default <i>blank string - i.e. disabled</i>                                                                     // 11656\n\t\t *                                                                                                                   // 11657\n\t\t *  @dtopt Options                                                                                                   // 11658\n\t\t *  @name DataTable.defaults.scrollXInner                                                                            // 11659\n\t\t *                                                                                                                   // 11660\n\t\t *  @example                                                                                                         // 11661\n\t\t *    $(document).ready( function() {                                                                                // 11662\n\t\t *      $('#example').dataTable( {                                                                                   // 11663\n\t\t *        \"scrollX\": \"100%\",                                                                                         // 11664\n\t\t *        \"scrollXInner\": \"110%\"                                                                                     // 11665\n\t\t *      } );                                                                                                         // 11666\n\t\t *    } );                                                                                                           // 11667\n\t\t */                                                                                                                  // 11668\n\t\t\"sScrollXInner\": \"\",                                                                                                 // 11669\n\t                                                                                                                      // 11670\n\t                                                                                                                      // 11671\n\t\t/**                                                                                                                  // 11672\n\t\t * Enable vertical scrolling. Vertical scrolling will constrain the DataTable                                        // 11673\n\t\t * to the given height, and enable scrolling for any data which overflows the                                        // 11674\n\t\t * current viewport. This can be used as an alternative to paging to display                                         // 11675\n\t\t * a lot of data in a small area (although paging and scrolling can both be                                          // 11676\n\t\t * enabled at the same time). This property can be any CSS unit, or a number                                         // 11677\n\t\t * (in which case it will be treated as a pixel measurement).                                                        // 11678\n\t\t *  @type string                                                                                                     // 11679\n\t\t *  @default <i>blank string - i.e. disabled</i>                                                                     // 11680\n\t\t *                                                                                                                   // 11681\n\t\t *  @dtopt Features                                                                                                  // 11682\n\t\t *  @name DataTable.defaults.scrollY                                                                                 // 11683\n\t\t *                                                                                                                   // 11684\n\t\t *  @example                                                                                                         // 11685\n\t\t *    $(document).ready( function() {                                                                                // 11686\n\t\t *      $('#example').dataTable( {                                                                                   // 11687\n\t\t *        \"scrollY\": \"200px\",                                                                                        // 11688\n\t\t *        \"paginate\": false                                                                                          // 11689\n\t\t *      } );                                                                                                         // 11690\n\t\t *    } );                                                                                                           // 11691\n\t\t */                                                                                                                  // 11692\n\t\t\"sScrollY\": \"\",                                                                                                      // 11693\n\t                                                                                                                      // 11694\n\t                                                                                                                      // 11695\n\t\t/**                                                                                                                  // 11696\n\t\t * __Deprecated__ The functionality provided by this parameter has now been                                          // 11697\n\t\t * superseded by that provided through `ajax`, which should be used instead.                                         // 11698\n\t\t *                                                                                                                   // 11699\n\t\t * Set the HTTP method that is used to make the Ajax call for server-side                                            // 11700\n\t\t * processing or Ajax sourced data.                                                                                  // 11701\n\t\t *  @type string                                                                                                     // 11702\n\t\t *  @default GET                                                                                                     // 11703\n\t\t *                                                                                                                   // 11704\n\t\t *  @dtopt Options                                                                                                   // 11705\n\t\t *  @dtopt Server-side                                                                                               // 11706\n\t\t *  @name DataTable.defaults.serverMethod                                                                            // 11707\n\t\t *                                                                                                                   // 11708\n\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.                                                  // 11709\n\t\t */                                                                                                                  // 11710\n\t\t\"sServerMethod\": \"GET\",                                                                                              // 11711\n\t                                                                                                                      // 11712\n\t                                                                                                                      // 11713\n\t\t/**                                                                                                                  // 11714\n\t\t * DataTables makes use of renderers when displaying HTML elements for                                               // 11715\n\t\t * a table. These renderers can be added or modified by plug-ins to                                                  // 11716\n\t\t * generate suitable mark-up for a site. For example the Bootstrap                                                   // 11717\n\t\t * integration plug-in for DataTables uses a paging button renderer to                                               // 11718\n\t\t * display pagination buttons in the mark-up required by Bootstrap.                                                  // 11719\n\t\t *                                                                                                                   // 11720\n\t\t * For further information about the renderers available see                                                         // 11721\n\t\t * DataTable.ext.renderer                                                                                            // 11722\n\t\t *  @type string|object                                                                                              // 11723\n\t\t *  @default null                                                                                                    // 11724\n\t\t *                                                                                                                   // 11725\n\t\t *  @name DataTable.defaults.renderer                                                                                // 11726\n\t\t *                                                                                                                   // 11727\n\t\t */                                                                                                                  // 11728\n\t\t\"renderer\": null                                                                                                     // 11729\n\t};                                                                                                                    // 11730\n\t                                                                                                                      // 11731\n\t_fnHungarianMap( DataTable.defaults );                                                                                // 11732\n\t                                                                                                                      // 11733\n\t                                                                                                                      // 11734\n\t                                                                                                                      // 11735\n\t/*                                                                                                                    // 11736\n\t * Developer note - See note in model.defaults.js about the use of Hungarian                                          // 11737\n\t * notation and camel case.                                                                                           // 11738\n\t */                                                                                                                   // 11739\n\t                                                                                                                      // 11740\n\t/**                                                                                                                   // 11741\n\t * Column options that can be given to DataTables at initialisation time.                                             // 11742\n\t *  @namespace                                                                                                        // 11743\n\t */                                                                                                                   // 11744\n\tDataTable.defaults.column = {                                                                                         // 11745\n\t\t/**                                                                                                                  // 11746\n\t\t * Define which column(s) an order will occur on for this column. This                                               // 11747\n\t\t * allows a column's ordering to take multiple columns into account when                                             // 11748\n\t\t * doing a sort or use the data from a different column. For example first                                           // 11749\n\t\t * name / last name columns make sense to do a multi-column sort over the                                            // 11750\n\t\t * two columns.                                                                                                      // 11751\n\t\t *  @type array|int                                                                                                  // 11752\n\t\t *  @default null <i>Takes the value of the column index automatically</i>                                           // 11753\n\t\t *                                                                                                                   // 11754\n\t\t *  @name DataTable.defaults.column.orderData                                                                        // 11755\n\t\t *  @dtopt Columns                                                                                                   // 11756\n\t\t *                                                                                                                   // 11757\n\t\t *  @example                                                                                                         // 11758\n\t\t *    // Using `columnDefs`                                                                                          // 11759\n\t\t *    $(document).ready( function() {                                                                                // 11760\n\t\t *      $('#example').dataTable( {                                                                                   // 11761\n\t\t *        \"columnDefs\": [                                                                                            // 11762\n\t\t *          { \"orderData\": [ 0, 1 ], \"targets\": [ 0 ] },                                                             // 11763\n\t\t *          { \"orderData\": [ 1, 0 ], \"targets\": [ 1 ] },                                                             // 11764\n\t\t *          { \"orderData\": 2, \"targets\": [ 2 ] }                                                                     // 11765\n\t\t *        ]                                                                                                          // 11766\n\t\t *      } );                                                                                                         // 11767\n\t\t *    } );                                                                                                           // 11768\n\t\t *                                                                                                                   // 11769\n\t\t *  @example                                                                                                         // 11770\n\t\t *    // Using `columns`                                                                                             // 11771\n\t\t *    $(document).ready( function() {                                                                                // 11772\n\t\t *      $('#example').dataTable( {                                                                                   // 11773\n\t\t *        \"columns\": [                                                                                               // 11774\n\t\t *          { \"orderData\": [ 0, 1 ] },                                                                               // 11775\n\t\t *          { \"orderData\": [ 1, 0 ] },                                                                               // 11776\n\t\t *          { \"orderData\": 2 },                                                                                      // 11777\n\t\t *          null,                                                                                                    // 11778\n\t\t *          null                                                                                                     // 11779\n\t\t *        ]                                                                                                          // 11780\n\t\t *      } );                                                                                                         // 11781\n\t\t *    } );                                                                                                           // 11782\n\t\t */                                                                                                                  // 11783\n\t\t\"aDataSort\": null,                                                                                                   // 11784\n\t\t\"iDataSort\": -1,                                                                                                     // 11785\n\t                                                                                                                      // 11786\n\t                                                                                                                      // 11787\n\t\t/**                                                                                                                  // 11788\n\t\t * You can control the default ordering direction, and even alter the                                                // 11789\n\t\t * behaviour of the sort handler (i.e. only allow ascending ordering etc)                                            // 11790\n\t\t * using this parameter.                                                                                             // 11791\n\t\t *  @type array                                                                                                      // 11792\n\t\t *  @default [ 'asc', 'desc' ]                                                                                       // 11793\n\t\t *                                                                                                                   // 11794\n\t\t *  @name DataTable.defaults.column.orderSequence                                                                    // 11795\n\t\t *  @dtopt Columns                                                                                                   // 11796\n\t\t *                                                                                                                   // 11797\n\t\t *  @example                                                                                                         // 11798\n\t\t *    // Using `columnDefs`                                                                                          // 11799\n\t\t *    $(document).ready( function() {                                                                                // 11800\n\t\t *      $('#example').dataTable( {                                                                                   // 11801\n\t\t *        \"columnDefs\": [                                                                                            // 11802\n\t\t *          { \"orderSequence\": [ \"asc\" ], \"targets\": [ 1 ] },                                                        // 11803\n\t\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ], \"targets\": [ 2 ] },                                         // 11804\n\t\t *          { \"orderSequence\": [ \"desc\" ], \"targets\": [ 3 ] }                                                        // 11805\n\t\t *        ]                                                                                                          // 11806\n\t\t *      } );                                                                                                         // 11807\n\t\t *    } );                                                                                                           // 11808\n\t\t *                                                                                                                   // 11809\n\t\t *  @example                                                                                                         // 11810\n\t\t *    // Using `columns`                                                                                             // 11811\n\t\t *    $(document).ready( function() {                                                                                // 11812\n\t\t *      $('#example').dataTable( {                                                                                   // 11813\n\t\t *        \"columns\": [                                                                                               // 11814\n\t\t *          null,                                                                                                    // 11815\n\t\t *          { \"orderSequence\": [ \"asc\" ] },                                                                          // 11816\n\t\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ] },                                                           // 11817\n\t\t *          { \"orderSequence\": [ \"desc\" ] },                                                                         // 11818\n\t\t *          null                                                                                                     // 11819\n\t\t *        ]                                                                                                          // 11820\n\t\t *      } );                                                                                                         // 11821\n\t\t *    } );                                                                                                           // 11822\n\t\t */                                                                                                                  // 11823\n\t\t\"asSorting\": [ 'asc', 'desc' ],                                                                                      // 11824\n\t                                                                                                                      // 11825\n\t                                                                                                                      // 11826\n\t\t/**                                                                                                                  // 11827\n\t\t * Enable or disable filtering on the data in this column.                                                           // 11828\n\t\t *  @type boolean                                                                                                    // 11829\n\t\t *  @default true                                                                                                    // 11830\n\t\t *                                                                                                                   // 11831\n\t\t *  @name DataTable.defaults.column.searchable                                                                       // 11832\n\t\t *  @dtopt Columns                                                                                                   // 11833\n\t\t *                                                                                                                   // 11834\n\t\t *  @example                                                                                                         // 11835\n\t\t *    // Using `columnDefs`                                                                                          // 11836\n\t\t *    $(document).ready( function() {                                                                                // 11837\n\t\t *      $('#example').dataTable( {                                                                                   // 11838\n\t\t *        \"columnDefs\": [                                                                                            // 11839\n\t\t *          { \"searchable\": false, \"targets\": [ 0 ] }                                                                // 11840\n\t\t *        ] } );                                                                                                     // 11841\n\t\t *    } );                                                                                                           // 11842\n\t\t *                                                                                                                   // 11843\n\t\t *  @example                                                                                                         // 11844\n\t\t *    // Using `columns`                                                                                             // 11845\n\t\t *    $(document).ready( function() {                                                                                // 11846\n\t\t *      $('#example').dataTable( {                                                                                   // 11847\n\t\t *        \"columns\": [                                                                                               // 11848\n\t\t *          { \"searchable\": false },                                                                                 // 11849\n\t\t *          null,                                                                                                    // 11850\n\t\t *          null,                                                                                                    // 11851\n\t\t *          null,                                                                                                    // 11852\n\t\t *          null                                                                                                     // 11853\n\t\t *        ] } );                                                                                                     // 11854\n\t\t *    } );                                                                                                           // 11855\n\t\t */                                                                                                                  // 11856\n\t\t\"bSearchable\": true,                                                                                                 // 11857\n\t                                                                                                                      // 11858\n\t                                                                                                                      // 11859\n\t\t/**                                                                                                                  // 11860\n\t\t * Enable or disable ordering on this column.                                                                        // 11861\n\t\t *  @type boolean                                                                                                    // 11862\n\t\t *  @default true                                                                                                    // 11863\n\t\t *                                                                                                                   // 11864\n\t\t *  @name DataTable.defaults.column.orderable                                                                        // 11865\n\t\t *  @dtopt Columns                                                                                                   // 11866\n\t\t *                                                                                                                   // 11867\n\t\t *  @example                                                                                                         // 11868\n\t\t *    // Using `columnDefs`                                                                                          // 11869\n\t\t *    $(document).ready( function() {                                                                                // 11870\n\t\t *      $('#example').dataTable( {                                                                                   // 11871\n\t\t *        \"columnDefs\": [                                                                                            // 11872\n\t\t *          { \"orderable\": false, \"targets\": [ 0 ] }                                                                 // 11873\n\t\t *        ] } );                                                                                                     // 11874\n\t\t *    } );                                                                                                           // 11875\n\t\t *                                                                                                                   // 11876\n\t\t *  @example                                                                                                         // 11877\n\t\t *    // Using `columns`                                                                                             // 11878\n\t\t *    $(document).ready( function() {                                                                                // 11879\n\t\t *      $('#example').dataTable( {                                                                                   // 11880\n\t\t *        \"columns\": [                                                                                               // 11881\n\t\t *          { \"orderable\": false },                                                                                  // 11882\n\t\t *          null,                                                                                                    // 11883\n\t\t *          null,                                                                                                    // 11884\n\t\t *          null,                                                                                                    // 11885\n\t\t *          null                                                                                                     // 11886\n\t\t *        ] } );                                                                                                     // 11887\n\t\t *    } );                                                                                                           // 11888\n\t\t */                                                                                                                  // 11889\n\t\t\"bSortable\": true,                                                                                                   // 11890\n\t                                                                                                                      // 11891\n\t                                                                                                                      // 11892\n\t\t/**                                                                                                                  // 11893\n\t\t * Enable or disable the display of this column.                                                                     // 11894\n\t\t *  @type boolean                                                                                                    // 11895\n\t\t *  @default true                                                                                                    // 11896\n\t\t *                                                                                                                   // 11897\n\t\t *  @name DataTable.defaults.column.visible                                                                          // 11898\n\t\t *  @dtopt Columns                                                                                                   // 11899\n\t\t *                                                                                                                   // 11900\n\t\t *  @example                                                                                                         // 11901\n\t\t *    // Using `columnDefs`                                                                                          // 11902\n\t\t *    $(document).ready( function() {                                                                                // 11903\n\t\t *      $('#example').dataTable( {                                                                                   // 11904\n\t\t *        \"columnDefs\": [                                                                                            // 11905\n\t\t *          { \"visible\": false, \"targets\": [ 0 ] }                                                                   // 11906\n\t\t *        ] } );                                                                                                     // 11907\n\t\t *    } );                                                                                                           // 11908\n\t\t *                                                                                                                   // 11909\n\t\t *  @example                                                                                                         // 11910\n\t\t *    // Using `columns`                                                                                             // 11911\n\t\t *    $(document).ready( function() {                                                                                // 11912\n\t\t *      $('#example').dataTable( {                                                                                   // 11913\n\t\t *        \"columns\": [                                                                                               // 11914\n\t\t *          { \"visible\": false },                                                                                    // 11915\n\t\t *          null,                                                                                                    // 11916\n\t\t *          null,                                                                                                    // 11917\n\t\t *          null,                                                                                                    // 11918\n\t\t *          null                                                                                                     // 11919\n\t\t *        ] } );                                                                                                     // 11920\n\t\t *    } );                                                                                                           // 11921\n\t\t */                                                                                                                  // 11922\n\t\t\"bVisible\": true,                                                                                                    // 11923\n\t                                                                                                                      // 11924\n\t                                                                                                                      // 11925\n\t\t/**                                                                                                                  // 11926\n\t\t * Developer definable function that is called whenever a cell is created (Ajax source,                              // 11927\n\t\t * etc) or processed for input (DOM source). This can be used as a compliment to mRender                             // 11928\n\t\t * allowing you to modify the DOM element (add background colour for example) when the                               // 11929\n\t\t * element is available.                                                                                             // 11930\n\t\t *  @type function                                                                                                   // 11931\n\t\t *  @param {element} td The TD node that has been created                                                            // 11932\n\t\t *  @param {*} cellData The Data for the cell                                                                        // 11933\n\t\t *  @param {array|object} rowData The data for the whole row                                                         // 11934\n\t\t *  @param {int} row The row index for the aoData data store                                                         // 11935\n\t\t *  @param {int} col The column index for aoColumns                                                                  // 11936\n\t\t *                                                                                                                   // 11937\n\t\t *  @name DataTable.defaults.column.createdCell                                                                      // 11938\n\t\t *  @dtopt Columns                                                                                                   // 11939\n\t\t *                                                                                                                   // 11940\n\t\t *  @example                                                                                                         // 11941\n\t\t *    $(document).ready( function() {                                                                                // 11942\n\t\t *      $('#example').dataTable( {                                                                                   // 11943\n\t\t *        \"columnDefs\": [ {                                                                                          // 11944\n\t\t *          \"targets\": [3],                                                                                          // 11945\n\t\t *          \"createdCell\": function (td, cellData, rowData, row, col) {                                              // 11946\n\t\t *            if ( cellData == \"1.7\" ) {                                                                             // 11947\n\t\t *              $(td).css('color', 'blue')                                                                           // 11948\n\t\t *            }                                                                                                      // 11949\n\t\t *          }                                                                                                        // 11950\n\t\t *        } ]                                                                                                        // 11951\n\t\t *      });                                                                                                          // 11952\n\t\t *    } );                                                                                                           // 11953\n\t\t */                                                                                                                  // 11954\n\t\t\"fnCreatedCell\": null,                                                                                               // 11955\n\t                                                                                                                      // 11956\n\t                                                                                                                      // 11957\n\t\t/**                                                                                                                  // 11958\n\t\t * This parameter has been replaced by `data` in DataTables to ensure naming                                         // 11959\n\t\t * consistency. `dataProp` can still be used, as there is backwards                                                  // 11960\n\t\t * compatibility in DataTables for this option, but it is strongly                                                   // 11961\n\t\t * recommended that you use `data` in preference to `dataProp`.                                                      // 11962\n\t\t *  @name DataTable.defaults.column.dataProp                                                                         // 11963\n\t\t */                                                                                                                  // 11964\n\t                                                                                                                      // 11965\n\t                                                                                                                      // 11966\n\t\t/**                                                                                                                  // 11967\n\t\t * This property can be used to read data from any data source property,                                             // 11968\n\t\t * including deeply nested objects / properties. `data` can be given in a                                            // 11969\n\t\t * number of different ways which effect its behaviour:                                                              // 11970\n\t\t *                                                                                                                   // 11971\n\t\t * * `integer` - treated as an array index for the data source. This is the                                          // 11972\n\t\t *   default that DataTables uses (incrementally increased for each column).                                         // 11973\n\t\t * * `string` - read an object property from the data source. There are                                              // 11974\n\t\t *   three 'special' options that can be used in the string to alter how                                             // 11975\n\t\t *   DataTables reads the data from the source object:                                                               // 11976\n\t\t *    * `.` - Dotted Javascript notation. Just as you use a `.` in                                                   // 11977\n\t\t *      Javascript to read from nested objects, so to can the options                                                // 11978\n\t\t *      specified in `data`. For example: `browser.version` or                                                       // 11979\n\t\t *      `browser.name`. If your object parameter name contains a period, use                                         // 11980\n\t\t *      `\\\\` to escape it - i.e. `first\\\\.name`.                                                                     // 11981\n\t\t *    * `[]` - Array notation. DataTables can automatically combine data                                             // 11982\n\t\t *      from and array source, joining the data with the characters provided                                         // 11983\n\t\t *      between the two brackets. For example: `name[, ]` would provide a                                            // 11984\n\t\t *      comma-space separated list from the source array. If no characters                                           // 11985\n\t\t *      are provided between the brackets, the original array source is                                              // 11986\n\t\t *      returned.                                                                                                    // 11987\n\t\t *    * `()` - Function notation. Adding `()` to the end of a parameter will                                         // 11988\n\t\t *      execute a function of the name given. For example: `browser()` for a                                         // 11989\n\t\t *      simple function on the data source, `browser.version()` for a                                                // 11990\n\t\t *      function in a nested property or even `browser().version` to get an                                          // 11991\n\t\t *      object property if the function called returns an object. Note that                                          // 11992\n\t\t *      function notation is recommended for use in `render` rather than                                             // 11993\n\t\t *      `data` as it is much simpler to use as a renderer.                                                           // 11994\n\t\t * * `null` - use the original data source for the row rather than plucking                                          // 11995\n\t\t *   data directly from it. This action has effects on two other                                                     // 11996\n\t\t *   initialisation options:                                                                                         // 11997\n\t\t *    * `defaultContent` - When null is given as the `data` option and                                               // 11998\n\t\t *      `defaultContent` is specified for the column, the value defined by                                           // 11999\n\t\t *      `defaultContent` will be used for the cell.                                                                  // 12000\n\t\t *    * `render` - When null is used for the `data` option and the `render`                                          // 12001\n\t\t *      option is specified for the column, the whole data source for the                                            // 12002\n\t\t *      row is used for the renderer.                                                                                // 12003\n\t\t * * `function` - the function given will be executed whenever DataTables                                            // 12004\n\t\t *   needs to set or get the data for a cell in the column. The function                                             // 12005\n\t\t *   takes three parameters:                                                                                         // 12006\n\t\t *    * Parameters:                                                                                                  // 12007\n\t\t *      * `{array|object}` The data source for the row                                                               // 12008\n\t\t *      * `{string}` The type call data requested - this will be 'set' when                                          // 12009\n\t\t *        setting data or 'filter', 'display', 'type', 'sort' or undefined                                           // 12010\n\t\t *        when gathering data. Note that when `undefined` is given for the                                           // 12011\n\t\t *        type DataTables expects to get the raw data for the object back<                                           // 12012\n\t\t *      * `{*}` Data to set when the second parameter is 'set'.                                                      // 12013\n\t\t *    * Return:                                                                                                      // 12014\n\t\t *      * The return value from the function is not required when 'set' is                                           // 12015\n\t\t *        the type of call, but otherwise the return is what will be used                                            // 12016\n\t\t *        for the data requested.                                                                                    // 12017\n\t\t *                                                                                                                   // 12018\n\t\t * Note that `data` is a getter and setter option. If you just require                                               // 12019\n\t\t * formatting of data for output, you will likely want to use `render` which                                         // 12020\n\t\t * is simply a getter and thus simpler to use.                                                                       // 12021\n\t\t *                                                                                                                   // 12022\n\t\t * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The                                            // 12023\n\t\t * name change reflects the flexibility of this property and is consistent                                           // 12024\n\t\t * with the naming of mRender. If 'mDataProp' is given, then it will still                                           // 12025\n\t\t * be used by DataTables, as it automatically maps the old name to the new                                           // 12026\n\t\t * if required.                                                                                                      // 12027\n\t\t *                                                                                                                   // 12028\n\t\t *  @type string|int|function|null                                                                                   // 12029\n\t\t *  @default null <i>Use automatically calculated column index</i>                                                   // 12030\n\t\t *                                                                                                                   // 12031\n\t\t *  @name DataTable.defaults.column.data                                                                             // 12032\n\t\t *  @dtopt Columns                                                                                                   // 12033\n\t\t *                                                                                                                   // 12034\n\t\t *  @example                                                                                                         // 12035\n\t\t *    // Read table data from objects                                                                                // 12036\n\t\t *    // JSON structure for each row:                                                                                // 12037\n\t\t *    //   {                                                                                                         // 12038\n\t\t *    //      \"engine\": {value},                                                                                     // 12039\n\t\t *    //      \"browser\": {value},                                                                                    // 12040\n\t\t *    //      \"platform\": {value},                                                                                   // 12041\n\t\t *    //      \"version\": {value},                                                                                    // 12042\n\t\t *    //      \"grade\": {value}                                                                                       // 12043\n\t\t *    //   }                                                                                                         // 12044\n\t\t *    $(document).ready( function() {                                                                                // 12045\n\t\t *      $('#example').dataTable( {                                                                                   // 12046\n\t\t *        \"ajaxSource\": \"sources/objects.txt\",                                                                       // 12047\n\t\t *        \"columns\": [                                                                                               // 12048\n\t\t *          { \"data\": \"engine\" },                                                                                    // 12049\n\t\t *          { \"data\": \"browser\" },                                                                                   // 12050\n\t\t *          { \"data\": \"platform\" },                                                                                  // 12051\n\t\t *          { \"data\": \"version\" },                                                                                   // 12052\n\t\t *          { \"data\": \"grade\" }                                                                                      // 12053\n\t\t *        ]                                                                                                          // 12054\n\t\t *      } );                                                                                                         // 12055\n\t\t *    } );                                                                                                           // 12056\n\t\t *                                                                                                                   // 12057\n\t\t *  @example                                                                                                         // 12058\n\t\t *    // Read information from deeply nested objects                                                                 // 12059\n\t\t *    // JSON structure for each row:                                                                                // 12060\n\t\t *    //   {                                                                                                         // 12061\n\t\t *    //      \"engine\": {value},                                                                                     // 12062\n\t\t *    //      \"browser\": {value},                                                                                    // 12063\n\t\t *    //      \"platform\": {                                                                                          // 12064\n\t\t *    //         \"inner\": {value}                                                                                    // 12065\n\t\t *    //      },                                                                                                     // 12066\n\t\t *    //      \"details\": [                                                                                           // 12067\n\t\t *    //         {value}, {value}                                                                                    // 12068\n\t\t *    //      ]                                                                                                      // 12069\n\t\t *    //   }                                                                                                         // 12070\n\t\t *    $(document).ready( function() {                                                                                // 12071\n\t\t *      $('#example').dataTable( {                                                                                   // 12072\n\t\t *        \"ajaxSource\": \"sources/deep.txt\",                                                                          // 12073\n\t\t *        \"columns\": [                                                                                               // 12074\n\t\t *          { \"data\": \"engine\" },                                                                                    // 12075\n\t\t *          { \"data\": \"browser\" },                                                                                   // 12076\n\t\t *          { \"data\": \"platform.inner\" },                                                                            // 12077\n\t\t *          { \"data\": \"platform.details.0\" },                                                                        // 12078\n\t\t *          { \"data\": \"platform.details.1\" }                                                                         // 12079\n\t\t *        ]                                                                                                          // 12080\n\t\t *      } );                                                                                                         // 12081\n\t\t *    } );                                                                                                           // 12082\n\t\t *                                                                                                                   // 12083\n\t\t *  @example                                                                                                         // 12084\n\t\t *    // Using `data` as a function to provide different information for                                             // 12085\n\t\t *    // sorting, filtering and display. In this case, currency (price)                                              // 12086\n\t\t *    $(document).ready( function() {                                                                                // 12087\n\t\t *      $('#example').dataTable( {                                                                                   // 12088\n\t\t *        \"columnDefs\": [ {                                                                                          // 12089\n\t\t *          \"targets\": [ 0 ],                                                                                        // 12090\n\t\t *          \"data\": function ( source, type, val ) {                                                                 // 12091\n\t\t *            if (type === 'set') {                                                                                  // 12092\n\t\t *              source.price = val;                                                                                  // 12093\n\t\t *              // Store the computed dislay and filter values for efficiency                                        // 12094\n\t\t *              source.price_display = val==\"\" ? \"\" : \"$\"+numberFormat(val);                                         // 12095\n\t\t *              source.price_filter  = val==\"\" ? \"\" : \"$\"+numberFormat(val)+\" \"+val;                                 // 12096\n\t\t *              return;                                                                                              // 12097\n\t\t *            }                                                                                                      // 12098\n\t\t *            else if (type === 'display') {                                                                         // 12099\n\t\t *              return source.price_display;                                                                         // 12100\n\t\t *            }                                                                                                      // 12101\n\t\t *            else if (type === 'filter') {                                                                          // 12102\n\t\t *              return source.price_filter;                                                                          // 12103\n\t\t *            }                                                                                                      // 12104\n\t\t *            // 'sort', 'type' and undefined all just use the integer                                               // 12105\n\t\t *            return source.price;                                                                                   // 12106\n\t\t *          }                                                                                                        // 12107\n\t\t *        } ]                                                                                                        // 12108\n\t\t *      } );                                                                                                         // 12109\n\t\t *    } );                                                                                                           // 12110\n\t\t *                                                                                                                   // 12111\n\t\t *  @example                                                                                                         // 12112\n\t\t *    // Using default content                                                                                       // 12113\n\t\t *    $(document).ready( function() {                                                                                // 12114\n\t\t *      $('#example').dataTable( {                                                                                   // 12115\n\t\t *        \"columnDefs\": [ {                                                                                          // 12116\n\t\t *          \"targets\": [ 0 ],                                                                                        // 12117\n\t\t *          \"data\": null,                                                                                            // 12118\n\t\t *          \"defaultContent\": \"Click to edit\"                                                                        // 12119\n\t\t *        } ]                                                                                                        // 12120\n\t\t *      } );                                                                                                         // 12121\n\t\t *    } );                                                                                                           // 12122\n\t\t *                                                                                                                   // 12123\n\t\t *  @example                                                                                                         // 12124\n\t\t *    // Using array notation - outputting a list from an array                                                      // 12125\n\t\t *    $(document).ready( function() {                                                                                // 12126\n\t\t *      $('#example').dataTable( {                                                                                   // 12127\n\t\t *        \"columnDefs\": [ {                                                                                          // 12128\n\t\t *          \"targets\": [ 0 ],                                                                                        // 12129\n\t\t *          \"data\": \"name[, ]\"                                                                                       // 12130\n\t\t *        } ]                                                                                                        // 12131\n\t\t *      } );                                                                                                         // 12132\n\t\t *    } );                                                                                                           // 12133\n\t\t *                                                                                                                   // 12134\n\t\t */                                                                                                                  // 12135\n\t\t\"mData\": null,                                                                                                       // 12136\n\t                                                                                                                      // 12137\n\t                                                                                                                      // 12138\n\t\t/**                                                                                                                  // 12139\n\t\t * This property is the rendering partner to `data` and it is suggested that                                         // 12140\n\t\t * when you want to manipulate data for display (including filtering,                                                // 12141\n\t\t * sorting etc) without altering the underlying data for the table, use this                                         // 12142\n\t\t * property. `render` can be considered to be the the read only companion to                                         // 12143\n\t\t * `data` which is read / write (then as such more complex). Like `data`                                             // 12144\n\t\t * this option can be given in a number of different ways to effect its                                              // 12145\n\t\t * behaviour:                                                                                                        // 12146\n\t\t *                                                                                                                   // 12147\n\t\t * * `integer` - treated as an array index for the data source. This is the                                          // 12148\n\t\t *   default that DataTables uses (incrementally increased for each column).                                         // 12149\n\t\t * * `string` - read an object property from the data source. There are                                              // 12150\n\t\t *   three 'special' options that can be used in the string to alter how                                             // 12151\n\t\t *   DataTables reads the data from the source object:                                                               // 12152\n\t\t *    * `.` - Dotted Javascript notation. Just as you use a `.` in                                                   // 12153\n\t\t *      Javascript to read from nested objects, so to can the options                                                // 12154\n\t\t *      specified in `data`. For example: `browser.version` or                                                       // 12155\n\t\t *      `browser.name`. If your object parameter name contains a period, use                                         // 12156\n\t\t *      `\\\\` to escape it - i.e. `first\\\\.name`.                                                                     // 12157\n\t\t *    * `[]` - Array notation. DataTables can automatically combine data                                             // 12158\n\t\t *      from and array source, joining the data with the characters provided                                         // 12159\n\t\t *      between the two brackets. For example: `name[, ]` would provide a                                            // 12160\n\t\t *      comma-space separated list from the source array. If no characters                                           // 12161\n\t\t *      are provided between the brackets, the original array source is                                              // 12162\n\t\t *      returned.                                                                                                    // 12163\n\t\t *    * `()` - Function notation. Adding `()` to the end of a parameter will                                         // 12164\n\t\t *      execute a function of the name given. For example: `browser()` for a                                         // 12165\n\t\t *      simple function on the data source, `browser.version()` for a                                                // 12166\n\t\t *      function in a nested property or even `browser().version` to get an                                          // 12167\n\t\t *      object property if the function called returns an object.                                                    // 12168\n\t\t * * `object` - use different data for the different data types requested by                                         // 12169\n\t\t *   DataTables ('filter', 'display', 'type' or 'sort'). The property names                                          // 12170\n\t\t *   of the object is the data type the property refers to and the value can                                         // 12171\n\t\t *   defined using an integer, string or function using the same rules as                                            // 12172\n\t\t *   `render` normally does. Note that an `_` option _must_ be specified.                                            // 12173\n\t\t *   This is the default value to use if you haven't specified a value for                                           // 12174\n\t\t *   the data type requested by DataTables.                                                                          // 12175\n\t\t * * `function` - the function given will be executed whenever DataTables                                            // 12176\n\t\t *   needs to set or get the data for a cell in the column. The function                                             // 12177\n\t\t *   takes three parameters:                                                                                         // 12178\n\t\t *    * Parameters:                                                                                                  // 12179\n\t\t *      * {array|object} The data source for the row (based on `data`)                                               // 12180\n\t\t *      * {string} The type call data requested - this will be 'filter',                                             // 12181\n\t\t *        'display', 'type' or 'sort'.                                                                               // 12182\n\t\t *      * {array|object} The full data source for the row (not based on                                              // 12183\n\t\t *        `data`)                                                                                                    // 12184\n\t\t *    * Return:                                                                                                      // 12185\n\t\t *      * The return value from the function is what will be used for the                                            // 12186\n\t\t *        data requested.                                                                                            // 12187\n\t\t *                                                                                                                   // 12188\n\t\t *  @type string|int|function|object|null                                                                            // 12189\n\t\t *  @default null Use the data source value.                                                                         // 12190\n\t\t *                                                                                                                   // 12191\n\t\t *  @name DataTable.defaults.column.render                                                                           // 12192\n\t\t *  @dtopt Columns                                                                                                   // 12193\n\t\t *                                                                                                                   // 12194\n\t\t *  @example                                                                                                         // 12195\n\t\t *    // Create a comma separated list from an array of objects                                                      // 12196\n\t\t *    $(document).ready( function() {                                                                                // 12197\n\t\t *      $('#example').dataTable( {                                                                                   // 12198\n\t\t *        \"ajaxSource\": \"sources/deep.txt\",                                                                          // 12199\n\t\t *        \"columns\": [                                                                                               // 12200\n\t\t *          { \"data\": \"engine\" },                                                                                    // 12201\n\t\t *          { \"data\": \"browser\" },                                                                                   // 12202\n\t\t *          {                                                                                                        // 12203\n\t\t *            \"data\": \"platform\",                                                                                    // 12204\n\t\t *            \"render\": \"[, ].name\"                                                                                  // 12205\n\t\t *          }                                                                                                        // 12206\n\t\t *        ]                                                                                                          // 12207\n\t\t *      } );                                                                                                         // 12208\n\t\t *    } );                                                                                                           // 12209\n\t\t *                                                                                                                   // 12210\n\t\t *  @example                                                                                                         // 12211\n\t\t *    // Execute a function to obtain data                                                                           // 12212\n\t\t *    $(document).ready( function() {                                                                                // 12213\n\t\t *      $('#example').dataTable( {                                                                                   // 12214\n\t\t *        \"columnDefs\": [ {                                                                                          // 12215\n\t\t *          \"targets\": [ 0 ],                                                                                        // 12216\n\t\t *          \"data\": null, // Use the full data source object for the renderer's source                               // 12217\n\t\t *          \"render\": \"browserName()\"                                                                                // 12218\n\t\t *        } ]                                                                                                        // 12219\n\t\t *      } );                                                                                                         // 12220\n\t\t *    } );                                                                                                           // 12221\n\t\t *                                                                                                                   // 12222\n\t\t *  @example                                                                                                         // 12223\n\t\t *    // As an object, extracting different data for the different types                                             // 12224\n\t\t *    // This would be used with a data source such as:                                                              // 12225\n\t\t *    //   { \"phone\": 5552368, \"phone_filter\": \"5552368 555-2368\", \"phone_display\": \"555-2368\" }                     // 12226\n\t\t *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`                       // 12227\n\t\t *    // (which has both forms) is used for filtering for if a user inputs either format, while                      // 12228\n\t\t *    // the formatted phone number is the one that is shown in the table.                                           // 12229\n\t\t *    $(document).ready( function() {                                                                                // 12230\n\t\t *      $('#example').dataTable( {                                                                                   // 12231\n\t\t *        \"columnDefs\": [ {                                                                                          // 12232\n\t\t *          \"targets\": [ 0 ],                                                                                        // 12233\n\t\t *          \"data\": null, // Use the full data source object for the renderer's source                               // 12234\n\t\t *          \"render\": {                                                                                              // 12235\n\t\t *            \"_\": \"phone\",                                                                                          // 12236\n\t\t *            \"filter\": \"phone_filter\",                                                                              // 12237\n\t\t *            \"display\": \"phone_display\"                                                                             // 12238\n\t\t *          }                                                                                                        // 12239\n\t\t *        } ]                                                                                                        // 12240\n\t\t *      } );                                                                                                         // 12241\n\t\t *    } );                                                                                                           // 12242\n\t\t *                                                                                                                   // 12243\n\t\t *  @example                                                                                                         // 12244\n\t\t *    // Use as a function to create a link from the data source                                                     // 12245\n\t\t *    $(document).ready( function() {                                                                                // 12246\n\t\t *      $('#example').dataTable( {                                                                                   // 12247\n\t\t *        \"columnDefs\": [ {                                                                                          // 12248\n\t\t *          \"targets\": [ 0 ],                                                                                        // 12249\n\t\t *          \"data\": \"download_link\",                                                                                 // 12250\n\t\t *          \"render\": function ( data, type, full ) {                                                                // 12251\n\t\t *            return '<a href=\"'+data+'\">Download</a>';                                                              // 12252\n\t\t *          }                                                                                                        // 12253\n\t\t *        } ]                                                                                                        // 12254\n\t\t *      } );                                                                                                         // 12255\n\t\t *    } );                                                                                                           // 12256\n\t\t */                                                                                                                  // 12257\n\t\t\"mRender\": null,                                                                                                     // 12258\n\t                                                                                                                      // 12259\n\t                                                                                                                      // 12260\n\t\t/**                                                                                                                  // 12261\n\t\t * Change the cell type created for the column - either TD cells or TH cells. This                                   // 12262\n\t\t * can be useful as TH cells have semantic meaning in the table body, allowing them                                  // 12263\n\t\t * to act as a header for a row (you may wish to add scope='row' to the TH elements).                                // 12264\n\t\t *  @type string                                                                                                     // 12265\n\t\t *  @default td                                                                                                      // 12266\n\t\t *                                                                                                                   // 12267\n\t\t *  @name DataTable.defaults.column.cellType                                                                         // 12268\n\t\t *  @dtopt Columns                                                                                                   // 12269\n\t\t *                                                                                                                   // 12270\n\t\t *  @example                                                                                                         // 12271\n\t\t *    // Make the first column use TH cells                                                                          // 12272\n\t\t *    $(document).ready( function() {                                                                                // 12273\n\t\t *      $('#example').dataTable( {                                                                                   // 12274\n\t\t *        \"columnDefs\": [ {                                                                                          // 12275\n\t\t *          \"targets\": [ 0 ],                                                                                        // 12276\n\t\t *          \"cellType\": \"th\"                                                                                         // 12277\n\t\t *        } ]                                                                                                        // 12278\n\t\t *      } );                                                                                                         // 12279\n\t\t *    } );                                                                                                           // 12280\n\t\t */                                                                                                                  // 12281\n\t\t\"sCellType\": \"td\",                                                                                                   // 12282\n\t                                                                                                                      // 12283\n\t                                                                                                                      // 12284\n\t\t/**                                                                                                                  // 12285\n\t\t * Class to give to each cell in this column.                                                                        // 12286\n\t\t *  @type string                                                                                                     // 12287\n\t\t *  @default <i>Empty string</i>                                                                                     // 12288\n\t\t *                                                                                                                   // 12289\n\t\t *  @name DataTable.defaults.column.class                                                                            // 12290\n\t\t *  @dtopt Columns                                                                                                   // 12291\n\t\t *                                                                                                                   // 12292\n\t\t *  @example                                                                                                         // 12293\n\t\t *    // Using `columnDefs`                                                                                          // 12294\n\t\t *    $(document).ready( function() {                                                                                // 12295\n\t\t *      $('#example').dataTable( {                                                                                   // 12296\n\t\t *        \"columnDefs\": [                                                                                            // 12297\n\t\t *          { \"class\": \"my_class\", \"targets\": [ 0 ] }                                                                // 12298\n\t\t *        ]                                                                                                          // 12299\n\t\t *      } );                                                                                                         // 12300\n\t\t *    } );                                                                                                           // 12301\n\t\t *                                                                                                                   // 12302\n\t\t *  @example                                                                                                         // 12303\n\t\t *    // Using `columns`                                                                                             // 12304\n\t\t *    $(document).ready( function() {                                                                                // 12305\n\t\t *      $('#example').dataTable( {                                                                                   // 12306\n\t\t *        \"columns\": [                                                                                               // 12307\n\t\t *          { \"class\": \"my_class\" },                                                                                 // 12308\n\t\t *          null,                                                                                                    // 12309\n\t\t *          null,                                                                                                    // 12310\n\t\t *          null,                                                                                                    // 12311\n\t\t *          null                                                                                                     // 12312\n\t\t *        ]                                                                                                          // 12313\n\t\t *      } );                                                                                                         // 12314\n\t\t *    } );                                                                                                           // 12315\n\t\t */                                                                                                                  // 12316\n\t\t\"sClass\": \"\",                                                                                                        // 12317\n\t                                                                                                                      // 12318\n\t\t/**                                                                                                                  // 12319\n\t\t * When DataTables calculates the column widths to assign to each column,                                            // 12320\n\t\t * it finds the longest string in each column and then constructs a                                                  // 12321\n\t\t * temporary table and reads the widths from that. The problem with this                                             // 12322\n\t\t * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer                                               // 12323\n\t\t * string - thus the calculation can go wrong (doing it properly and putting                                         // 12324\n\t\t * it into an DOM object and measuring that is horribly(!) slow). Thus as                                            // 12325\n\t\t * a \"work around\" we provide this option. It will append its value to the                                           // 12326\n\t\t * text that is found to be the longest string for the column - i.e. padding.                                        // 12327\n\t\t * Generally you shouldn't need this!                                                                                // 12328\n\t\t *  @type string                                                                                                     // 12329\n\t\t *  @default <i>Empty string<i>                                                                                      // 12330\n\t\t *                                                                                                                   // 12331\n\t\t *  @name DataTable.defaults.column.contentPadding                                                                   // 12332\n\t\t *  @dtopt Columns                                                                                                   // 12333\n\t\t *                                                                                                                   // 12334\n\t\t *  @example                                                                                                         // 12335\n\t\t *    // Using `columns`                                                                                             // 12336\n\t\t *    $(document).ready( function() {                                                                                // 12337\n\t\t *      $('#example').dataTable( {                                                                                   // 12338\n\t\t *        \"columns\": [                                                                                               // 12339\n\t\t *          null,                                                                                                    // 12340\n\t\t *          null,                                                                                                    // 12341\n\t\t *          null,                                                                                                    // 12342\n\t\t *          {                                                                                                        // 12343\n\t\t *            \"contentPadding\": \"mmm\"                                                                                // 12344\n\t\t *          }                                                                                                        // 12345\n\t\t *        ]                                                                                                          // 12346\n\t\t *      } );                                                                                                         // 12347\n\t\t *    } );                                                                                                           // 12348\n\t\t */                                                                                                                  // 12349\n\t\t\"sContentPadding\": \"\",                                                                                               // 12350\n\t                                                                                                                      // 12351\n\t                                                                                                                      // 12352\n\t\t/**                                                                                                                  // 12353\n\t\t * Allows a default value to be given for a column's data, and will be used                                          // 12354\n\t\t * whenever a null data source is encountered (this can be because `data`                                            // 12355\n\t\t * is set to null, or because the data source itself is null).                                                       // 12356\n\t\t *  @type string                                                                                                     // 12357\n\t\t *  @default null                                                                                                    // 12358\n\t\t *                                                                                                                   // 12359\n\t\t *  @name DataTable.defaults.column.defaultContent                                                                   // 12360\n\t\t *  @dtopt Columns                                                                                                   // 12361\n\t\t *                                                                                                                   // 12362\n\t\t *  @example                                                                                                         // 12363\n\t\t *    // Using `columnDefs`                                                                                          // 12364\n\t\t *    $(document).ready( function() {                                                                                // 12365\n\t\t *      $('#example').dataTable( {                                                                                   // 12366\n\t\t *        \"columnDefs\": [                                                                                            // 12367\n\t\t *          {                                                                                                        // 12368\n\t\t *            \"data\": null,                                                                                          // 12369\n\t\t *            \"defaultContent\": \"Edit\",                                                                              // 12370\n\t\t *            \"targets\": [ -1 ]                                                                                      // 12371\n\t\t *          }                                                                                                        // 12372\n\t\t *        ]                                                                                                          // 12373\n\t\t *      } );                                                                                                         // 12374\n\t\t *    } );                                                                                                           // 12375\n\t\t *                                                                                                                   // 12376\n\t\t *  @example                                                                                                         // 12377\n\t\t *    // Using `columns`                                                                                             // 12378\n\t\t *    $(document).ready( function() {                                                                                // 12379\n\t\t *      $('#example').dataTable( {                                                                                   // 12380\n\t\t *        \"columns\": [                                                                                               // 12381\n\t\t *          null,                                                                                                    // 12382\n\t\t *          null,                                                                                                    // 12383\n\t\t *          null,                                                                                                    // 12384\n\t\t *          {                                                                                                        // 12385\n\t\t *            \"data\": null,                                                                                          // 12386\n\t\t *            \"defaultContent\": \"Edit\"                                                                               // 12387\n\t\t *          }                                                                                                        // 12388\n\t\t *        ]                                                                                                          // 12389\n\t\t *      } );                                                                                                         // 12390\n\t\t *    } );                                                                                                           // 12391\n\t\t */                                                                                                                  // 12392\n\t\t\"sDefaultContent\": null,                                                                                             // 12393\n\t                                                                                                                      // 12394\n\t                                                                                                                      // 12395\n\t\t/**                                                                                                                  // 12396\n\t\t * This parameter is only used in DataTables' server-side processing. It can                                         // 12397\n\t\t * be exceptionally useful to know what columns are being displayed on the                                           // 12398\n\t\t * client side, and to map these to database fields. When defined, the names                                         // 12399\n\t\t * also allow DataTables to reorder information from the server if it comes                                          // 12400\n\t\t * back in an unexpected order (i.e. if you switch your columns around on the                                        // 12401\n\t\t * client-side, your server-side code does not also need updating).                                                  // 12402\n\t\t *  @type string                                                                                                     // 12403\n\t\t *  @default <i>Empty string</i>                                                                                     // 12404\n\t\t *                                                                                                                   // 12405\n\t\t *  @name DataTable.defaults.column.name                                                                             // 12406\n\t\t *  @dtopt Columns                                                                                                   // 12407\n\t\t *                                                                                                                   // 12408\n\t\t *  @example                                                                                                         // 12409\n\t\t *    // Using `columnDefs`                                                                                          // 12410\n\t\t *    $(document).ready( function() {                                                                                // 12411\n\t\t *      $('#example').dataTable( {                                                                                   // 12412\n\t\t *        \"columnDefs\": [                                                                                            // 12413\n\t\t *          { \"name\": \"engine\", \"targets\": [ 0 ] },                                                                  // 12414\n\t\t *          { \"name\": \"browser\", \"targets\": [ 1 ] },                                                                 // 12415\n\t\t *          { \"name\": \"platform\", \"targets\": [ 2 ] },                                                                // 12416\n\t\t *          { \"name\": \"version\", \"targets\": [ 3 ] },                                                                 // 12417\n\t\t *          { \"name\": \"grade\", \"targets\": [ 4 ] }                                                                    // 12418\n\t\t *        ]                                                                                                          // 12419\n\t\t *      } );                                                                                                         // 12420\n\t\t *    } );                                                                                                           // 12421\n\t\t *                                                                                                                   // 12422\n\t\t *  @example                                                                                                         // 12423\n\t\t *    // Using `columns`                                                                                             // 12424\n\t\t *    $(document).ready( function() {                                                                                // 12425\n\t\t *      $('#example').dataTable( {                                                                                   // 12426\n\t\t *        \"columns\": [                                                                                               // 12427\n\t\t *          { \"name\": \"engine\" },                                                                                    // 12428\n\t\t *          { \"name\": \"browser\" },                                                                                   // 12429\n\t\t *          { \"name\": \"platform\" },                                                                                  // 12430\n\t\t *          { \"name\": \"version\" },                                                                                   // 12431\n\t\t *          { \"name\": \"grade\" }                                                                                      // 12432\n\t\t *        ]                                                                                                          // 12433\n\t\t *      } );                                                                                                         // 12434\n\t\t *    } );                                                                                                           // 12435\n\t\t */                                                                                                                  // 12436\n\t\t\"sName\": \"\",                                                                                                         // 12437\n\t                                                                                                                      // 12438\n\t                                                                                                                      // 12439\n\t\t/**                                                                                                                  // 12440\n\t\t * Defines a data source type for the ordering which can be used to read                                             // 12441\n\t\t * real-time information from the table (updating the internally cached                                              // 12442\n\t\t * version) prior to ordering. This allows ordering to occur on user                                                 // 12443\n\t\t * editable elements such as form inputs.                                                                            // 12444\n\t\t *  @type string                                                                                                     // 12445\n\t\t *  @default std                                                                                                     // 12446\n\t\t *                                                                                                                   // 12447\n\t\t *  @name DataTable.defaults.column.orderDataType                                                                    // 12448\n\t\t *  @dtopt Columns                                                                                                   // 12449\n\t\t *                                                                                                                   // 12450\n\t\t *  @example                                                                                                         // 12451\n\t\t *    // Using `columnDefs`                                                                                          // 12452\n\t\t *    $(document).ready( function() {                                                                                // 12453\n\t\t *      $('#example').dataTable( {                                                                                   // 12454\n\t\t *        \"columnDefs\": [                                                                                            // 12455\n\t\t *          { \"orderDataType\": \"dom-text\", \"targets\": [ 2, 3 ] },                                                    // 12456\n\t\t *          { \"type\": \"numeric\", \"targets\": [ 3 ] },                                                                 // 12457\n\t\t *          { \"orderDataType\": \"dom-select\", \"targets\": [ 4 ] },                                                     // 12458\n\t\t *          { \"orderDataType\": \"dom-checkbox\", \"targets\": [ 5 ] }                                                    // 12459\n\t\t *        ]                                                                                                          // 12460\n\t\t *      } );                                                                                                         // 12461\n\t\t *    } );                                                                                                           // 12462\n\t\t *                                                                                                                   // 12463\n\t\t *  @example                                                                                                         // 12464\n\t\t *    // Using `columns`                                                                                             // 12465\n\t\t *    $(document).ready( function() {                                                                                // 12466\n\t\t *      $('#example').dataTable( {                                                                                   // 12467\n\t\t *        \"columns\": [                                                                                               // 12468\n\t\t *          null,                                                                                                    // 12469\n\t\t *          null,                                                                                                    // 12470\n\t\t *          { \"orderDataType\": \"dom-text\" },                                                                         // 12471\n\t\t *          { \"orderDataType\": \"dom-text\", \"type\": \"numeric\" },                                                      // 12472\n\t\t *          { \"orderDataType\": \"dom-select\" },                                                                       // 12473\n\t\t *          { \"orderDataType\": \"dom-checkbox\" }                                                                      // 12474\n\t\t *        ]                                                                                                          // 12475\n\t\t *      } );                                                                                                         // 12476\n\t\t *    } );                                                                                                           // 12477\n\t\t */                                                                                                                  // 12478\n\t\t\"sSortDataType\": \"std\",                                                                                              // 12479\n\t                                                                                                                      // 12480\n\t                                                                                                                      // 12481\n\t\t/**                                                                                                                  // 12482\n\t\t * The title of this column.                                                                                         // 12483\n\t\t *  @type string                                                                                                     // 12484\n\t\t *  @default null <i>Derived from the 'TH' value for this column in the                                              // 12485\n\t\t *    original HTML table.</i>                                                                                       // 12486\n\t\t *                                                                                                                   // 12487\n\t\t *  @name DataTable.defaults.column.title                                                                            // 12488\n\t\t *  @dtopt Columns                                                                                                   // 12489\n\t\t *                                                                                                                   // 12490\n\t\t *  @example                                                                                                         // 12491\n\t\t *    // Using `columnDefs`                                                                                          // 12492\n\t\t *    $(document).ready( function() {                                                                                // 12493\n\t\t *      $('#example').dataTable( {                                                                                   // 12494\n\t\t *        \"columnDefs\": [                                                                                            // 12495\n\t\t *          { \"title\": \"My column title\", \"targets\": [ 0 ] }                                                         // 12496\n\t\t *        ]                                                                                                          // 12497\n\t\t *      } );                                                                                                         // 12498\n\t\t *    } );                                                                                                           // 12499\n\t\t *                                                                                                                   // 12500\n\t\t *  @example                                                                                                         // 12501\n\t\t *    // Using `columns`                                                                                             // 12502\n\t\t *    $(document).ready( function() {                                                                                // 12503\n\t\t *      $('#example').dataTable( {                                                                                   // 12504\n\t\t *        \"columns\": [                                                                                               // 12505\n\t\t *          { \"title\": \"My column title\" },                                                                          // 12506\n\t\t *          null,                                                                                                    // 12507\n\t\t *          null,                                                                                                    // 12508\n\t\t *          null,                                                                                                    // 12509\n\t\t *          null                                                                                                     // 12510\n\t\t *        ]                                                                                                          // 12511\n\t\t *      } );                                                                                                         // 12512\n\t\t *    } );                                                                                                           // 12513\n\t\t */                                                                                                                  // 12514\n\t\t\"sTitle\": null,                                                                                                      // 12515\n\t                                                                                                                      // 12516\n\t                                                                                                                      // 12517\n\t\t/**                                                                                                                  // 12518\n\t\t * The type allows you to specify how the data for this column will be                                               // 12519\n\t\t * ordered. Four types (string, numeric, date and html (which will strip                                             // 12520\n\t\t * HTML tags before ordering)) are currently available. Note that only date                                          // 12521\n\t\t * formats understood by Javascript's Date() object will be accepted as type                                         // 12522\n\t\t * date. For example: \"Mar 26, 2008 5:03 PM\". May take the values: 'string',                                         // 12523\n\t\t * 'numeric', 'date' or 'html' (by default). Further types can be adding                                             // 12524\n\t\t * through plug-ins.                                                                                                 // 12525\n\t\t *  @type string                                                                                                     // 12526\n\t\t *  @default null <i>Auto-detected from raw data</i>                                                                 // 12527\n\t\t *                                                                                                                   // 12528\n\t\t *  @name DataTable.defaults.column.type                                                                             // 12529\n\t\t *  @dtopt Columns                                                                                                   // 12530\n\t\t *                                                                                                                   // 12531\n\t\t *  @example                                                                                                         // 12532\n\t\t *    // Using `columnDefs`                                                                                          // 12533\n\t\t *    $(document).ready( function() {                                                                                // 12534\n\t\t *      $('#example').dataTable( {                                                                                   // 12535\n\t\t *        \"columnDefs\": [                                                                                            // 12536\n\t\t *          { \"type\": \"html\", \"targets\": [ 0 ] }                                                                     // 12537\n\t\t *        ]                                                                                                          // 12538\n\t\t *      } );                                                                                                         // 12539\n\t\t *    } );                                                                                                           // 12540\n\t\t *                                                                                                                   // 12541\n\t\t *  @example                                                                                                         // 12542\n\t\t *    // Using `columns`                                                                                             // 12543\n\t\t *    $(document).ready( function() {                                                                                // 12544\n\t\t *      $('#example').dataTable( {                                                                                   // 12545\n\t\t *        \"columns\": [                                                                                               // 12546\n\t\t *          { \"type\": \"html\" },                                                                                      // 12547\n\t\t *          null,                                                                                                    // 12548\n\t\t *          null,                                                                                                    // 12549\n\t\t *          null,                                                                                                    // 12550\n\t\t *          null                                                                                                     // 12551\n\t\t *        ]                                                                                                          // 12552\n\t\t *      } );                                                                                                         // 12553\n\t\t *    } );                                                                                                           // 12554\n\t\t */                                                                                                                  // 12555\n\t\t\"sType\": null,                                                                                                       // 12556\n\t                                                                                                                      // 12557\n\t                                                                                                                      // 12558\n\t\t/**                                                                                                                  // 12559\n\t\t * Defining the width of the column, this parameter may take any CSS value                                           // 12560\n\t\t * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not                                      // 12561\n\t\t * been given a specific width through this interface ensuring that the table                                        // 12562\n\t\t * remains readable.                                                                                                 // 12563\n\t\t *  @type string                                                                                                     // 12564\n\t\t *  @default null <i>Automatic</i>                                                                                   // 12565\n\t\t *                                                                                                                   // 12566\n\t\t *  @name DataTable.defaults.column.width                                                                            // 12567\n\t\t *  @dtopt Columns                                                                                                   // 12568\n\t\t *                                                                                                                   // 12569\n\t\t *  @example                                                                                                         // 12570\n\t\t *    // Using `columnDefs`                                                                                          // 12571\n\t\t *    $(document).ready( function() {                                                                                // 12572\n\t\t *      $('#example').dataTable( {                                                                                   // 12573\n\t\t *        \"columnDefs\": [                                                                                            // 12574\n\t\t *          { \"width\": \"20%\", \"targets\": [ 0 ] }                                                                     // 12575\n\t\t *        ]                                                                                                          // 12576\n\t\t *      } );                                                                                                         // 12577\n\t\t *    } );                                                                                                           // 12578\n\t\t *                                                                                                                   // 12579\n\t\t *  @example                                                                                                         // 12580\n\t\t *    // Using `columns`                                                                                             // 12581\n\t\t *    $(document).ready( function() {                                                                                // 12582\n\t\t *      $('#example').dataTable( {                                                                                   // 12583\n\t\t *        \"columns\": [                                                                                               // 12584\n\t\t *          { \"width\": \"20%\" },                                                                                      // 12585\n\t\t *          null,                                                                                                    // 12586\n\t\t *          null,                                                                                                    // 12587\n\t\t *          null,                                                                                                    // 12588\n\t\t *          null                                                                                                     // 12589\n\t\t *        ]                                                                                                          // 12590\n\t\t *      } );                                                                                                         // 12591\n\t\t *    } );                                                                                                           // 12592\n\t\t */                                                                                                                  // 12593\n\t\t\"sWidth\": null                                                                                                       // 12594\n\t};                                                                                                                    // 12595\n\t                                                                                                                      // 12596\n\t_fnHungarianMap( DataTable.defaults.column );                                                                         // 12597\n\t                                                                                                                      // 12598\n\t                                                                                                                      // 12599\n\t                                                                                                                      // 12600\n\t/**                                                                                                                   // 12601\n\t * DataTables settings object - this holds all the information needed for a                                           // 12602\n\t * given table, including configuration, data and current application of the                                          // 12603\n\t * table options. DataTables does not have a single instance for each DataTable                                       // 12604\n\t * with the settings attached to that instance, but rather instances of the                                           // 12605\n\t * DataTable \"class\" are created on-the-fly as needed (typically by a                                                 // 12606\n\t * $().dataTable() call) and the settings object is then applied to that                                              // 12607\n\t * instance.                                                                                                          // 12608\n\t *                                                                                                                    // 12609\n\t * Note that this object is related to {@link DataTable.defaults} but this                                            // 12610\n\t * one is the internal data store for DataTables's cache of columns. It should                                        // 12611\n\t * NOT be manipulated outside of DataTables. Any configuration should be done                                         // 12612\n\t * through the initialisation options.                                                                                // 12613\n\t *  @namespace                                                                                                        // 12614\n\t *  @todo Really should attach the settings object to individual instances so we                                      // 12615\n\t *    don't need to create new instances on each $().dataTable() call (if the                                         // 12616\n\t *    table already exists). It would also save passing oSettings around and                                          // 12617\n\t *    into every single function. However, this is a very significant                                                 // 12618\n\t *    architecture change for DataTables and will almost certainly break                                              // 12619\n\t *    backwards compatibility with older installations. This is something that                                        // 12620\n\t *    will be done in 2.0.                                                                                            // 12621\n\t */                                                                                                                   // 12622\n\tDataTable.models.oSettings = {                                                                                        // 12623\n\t\t/**                                                                                                                  // 12624\n\t\t * Primary features of DataTables and their enablement state.                                                        // 12625\n\t\t *  @namespace                                                                                                       // 12626\n\t\t */                                                                                                                  // 12627\n\t\t\"oFeatures\": {                                                                                                       // 12628\n\t                                                                                                                      // 12629\n\t\t\t/**                                                                                                                 // 12630\n\t\t\t * Flag to say if DataTables should automatically try to calculate the                                              // 12631\n\t\t\t * optimum table and columns widths (true) or not (false).                                                          // 12632\n\t\t\t * Note that this parameter will be set by the initialisation routine. To                                           // 12633\n\t\t\t * set a default use {@link DataTable.defaults}.                                                                    // 12634\n\t\t\t *  @type boolean                                                                                                   // 12635\n\t\t\t */                                                                                                                 // 12636\n\t\t\t\"bAutoWidth\": null,                                                                                                 // 12637\n\t                                                                                                                      // 12638\n\t\t\t/**                                                                                                                 // 12639\n\t\t\t * Delay the creation of TR and TD elements until they are actually                                                 // 12640\n\t\t\t * needed by a driven page draw. This can give a significant speed                                                  // 12641\n\t\t\t * increase for Ajax source and Javascript source data, but makes no                                                // 12642\n\t\t\t * difference at all fro DOM and server-side processing tables.                                                     // 12643\n\t\t\t * Note that this parameter will be set by the initialisation routine. To                                           // 12644\n\t\t\t * set a default use {@link DataTable.defaults}.                                                                    // 12645\n\t\t\t *  @type boolean                                                                                                   // 12646\n\t\t\t */                                                                                                                 // 12647\n\t\t\t\"bDeferRender\": null,                                                                                               // 12648\n\t                                                                                                                      // 12649\n\t\t\t/**                                                                                                                 // 12650\n\t\t\t * Enable filtering on the table or not. Note that if this is disabled                                              // 12651\n\t\t\t * then there is no filtering at all on the table, including fnFilter.                                              // 12652\n\t\t\t * To just remove the filtering input use sDom and remove the 'f' option.                                           // 12653\n\t\t\t * Note that this parameter will be set by the initialisation routine. To                                           // 12654\n\t\t\t * set a default use {@link DataTable.defaults}.                                                                    // 12655\n\t\t\t *  @type boolean                                                                                                   // 12656\n\t\t\t */                                                                                                                 // 12657\n\t\t\t\"bFilter\": null,                                                                                                    // 12658\n\t                                                                                                                      // 12659\n\t\t\t/**                                                                                                                 // 12660\n\t\t\t * Table information element (the 'Showing x of y records' div) enable                                              // 12661\n\t\t\t * flag.                                                                                                            // 12662\n\t\t\t * Note that this parameter will be set by the initialisation routine. To                                           // 12663\n\t\t\t * set a default use {@link DataTable.defaults}.                                                                    // 12664\n\t\t\t *  @type boolean                                                                                                   // 12665\n\t\t\t */                                                                                                                 // 12666\n\t\t\t\"bInfo\": null,                                                                                                      // 12667\n\t                                                                                                                      // 12668\n\t\t\t/**                                                                                                                 // 12669\n\t\t\t * Present a user control allowing the end user to change the page size                                             // 12670\n\t\t\t * when pagination is enabled.                                                                                      // 12671\n\t\t\t * Note that this parameter will be set by the initialisation routine. To                                           // 12672\n\t\t\t * set a default use {@link DataTable.defaults}.                                                                    // 12673\n\t\t\t *  @type boolean                                                                                                   // 12674\n\t\t\t */                                                                                                                 // 12675\n\t\t\t\"bLengthChange\": null,                                                                                              // 12676\n\t                                                                                                                      // 12677\n\t\t\t/**                                                                                                                 // 12678\n\t\t\t * Pagination enabled or not. Note that if this is disabled then length                                             // 12679\n\t\t\t * changing must also be disabled.                                                                                  // 12680\n\t\t\t * Note that this parameter will be set by the initialisation routine. To                                           // 12681\n\t\t\t * set a default use {@link DataTable.defaults}.                                                                    // 12682\n\t\t\t *  @type boolean                                                                                                   // 12683\n\t\t\t */                                                                                                                 // 12684\n\t\t\t\"bPaginate\": null,                                                                                                  // 12685\n\t                                                                                                                      // 12686\n\t\t\t/**                                                                                                                 // 12687\n\t\t\t * Processing indicator enable flag whenever DataTables is enacting a                                               // 12688\n\t\t\t * user request - typically an Ajax request for server-side processing.                                             // 12689\n\t\t\t * Note that this parameter will be set by the initialisation routine. To                                           // 12690\n\t\t\t * set a default use {@link DataTable.defaults}.                                                                    // 12691\n\t\t\t *  @type boolean                                                                                                   // 12692\n\t\t\t */                                                                                                                 // 12693\n\t\t\t\"bProcessing\": null,                                                                                                // 12694\n\t                                                                                                                      // 12695\n\t\t\t/**                                                                                                                 // 12696\n\t\t\t * Server-side processing enabled flag - when enabled DataTables will                                               // 12697\n\t\t\t * get all data from the server for every draw - there is no filtering,                                             // 12698\n\t\t\t * sorting or paging done on the client-side.                                                                       // 12699\n\t\t\t * Note that this parameter will be set by the initialisation routine. To                                           // 12700\n\t\t\t * set a default use {@link DataTable.defaults}.                                                                    // 12701\n\t\t\t *  @type boolean                                                                                                   // 12702\n\t\t\t */                                                                                                                 // 12703\n\t\t\t\"bServerSide\": null,                                                                                                // 12704\n\t                                                                                                                      // 12705\n\t\t\t/**                                                                                                                 // 12706\n\t\t\t * Sorting enablement flag.                                                                                         // 12707\n\t\t\t * Note that this parameter will be set by the initialisation routine. To                                           // 12708\n\t\t\t * set a default use {@link DataTable.defaults}.                                                                    // 12709\n\t\t\t *  @type boolean                                                                                                   // 12710\n\t\t\t */                                                                                                                 // 12711\n\t\t\t\"bSort\": null,                                                                                                      // 12712\n\t                                                                                                                      // 12713\n\t\t\t/**                                                                                                                 // 12714\n\t\t\t * Multi-column sorting                                                                                             // 12715\n\t\t\t * Note that this parameter will be set by the initialisation routine. To                                           // 12716\n\t\t\t * set a default use {@link DataTable.defaults}.                                                                    // 12717\n\t\t\t *  @type boolean                                                                                                   // 12718\n\t\t\t */                                                                                                                 // 12719\n\t\t\t\"bSortMulti\": null,                                                                                                 // 12720\n\t                                                                                                                      // 12721\n\t\t\t/**                                                                                                                 // 12722\n\t\t\t * Apply a class to the columns which are being sorted to provide a                                                 // 12723\n\t\t\t * visual highlight or not. This can slow things down when enabled since                                            // 12724\n\t\t\t * there is a lot of DOM interaction.                                                                               // 12725\n\t\t\t * Note that this parameter will be set by the initialisation routine. To                                           // 12726\n\t\t\t * set a default use {@link DataTable.defaults}.                                                                    // 12727\n\t\t\t *  @type boolean                                                                                                   // 12728\n\t\t\t */                                                                                                                 // 12729\n\t\t\t\"bSortClasses\": null,                                                                                               // 12730\n\t                                                                                                                      // 12731\n\t\t\t/**                                                                                                                 // 12732\n\t\t\t * State saving enablement flag.                                                                                    // 12733\n\t\t\t * Note that this parameter will be set by the initialisation routine. To                                           // 12734\n\t\t\t * set a default use {@link DataTable.defaults}.                                                                    // 12735\n\t\t\t *  @type boolean                                                                                                   // 12736\n\t\t\t */                                                                                                                 // 12737\n\t\t\t\"bStateSave\": null                                                                                                  // 12738\n\t\t},                                                                                                                   // 12739\n\t                                                                                                                      // 12740\n\t                                                                                                                      // 12741\n\t\t/**                                                                                                                  // 12742\n\t\t * Scrolling settings for a table.                                                                                   // 12743\n\t\t *  @namespace                                                                                                       // 12744\n\t\t */                                                                                                                  // 12745\n\t\t\"oScroll\": {                                                                                                         // 12746\n\t\t\t/**                                                                                                                 // 12747\n\t\t\t * When the table is shorter in height than sScrollY, collapse the                                                  // 12748\n\t\t\t * table container down to the height of the table (when true).                                                     // 12749\n\t\t\t * Note that this parameter will be set by the initialisation routine. To                                           // 12750\n\t\t\t * set a default use {@link DataTable.defaults}.                                                                    // 12751\n\t\t\t *  @type boolean                                                                                                   // 12752\n\t\t\t */                                                                                                                 // 12753\n\t\t\t\"bCollapse\": null,                                                                                                  // 12754\n\t                                                                                                                      // 12755\n\t\t\t/**                                                                                                                 // 12756\n\t\t\t * Width of the scrollbar for the web-browser's platform. Calculated                                                // 12757\n\t\t\t * during table initialisation.                                                                                     // 12758\n\t\t\t *  @type int                                                                                                       // 12759\n\t\t\t *  @default 0                                                                                                      // 12760\n\t\t\t */                                                                                                                 // 12761\n\t\t\t\"iBarWidth\": 0,                                                                                                     // 12762\n\t                                                                                                                      // 12763\n\t\t\t/**                                                                                                                 // 12764\n\t\t\t * Viewport width for horizontal scrolling. Horizontal scrolling is                                                 // 12765\n\t\t\t * disabled if an empty string.                                                                                     // 12766\n\t\t\t * Note that this parameter will be set by the initialisation routine. To                                           // 12767\n\t\t\t * set a default use {@link DataTable.defaults}.                                                                    // 12768\n\t\t\t *  @type string                                                                                                    // 12769\n\t\t\t */                                                                                                                 // 12770\n\t\t\t\"sX\": null,                                                                                                         // 12771\n\t                                                                                                                      // 12772\n\t\t\t/**                                                                                                                 // 12773\n\t\t\t * Width to expand the table to when using x-scrolling. Typically you                                               // 12774\n\t\t\t * should not need to use this.                                                                                     // 12775\n\t\t\t * Note that this parameter will be set by the initialisation routine. To                                           // 12776\n\t\t\t * set a default use {@link DataTable.defaults}.                                                                    // 12777\n\t\t\t *  @type string                                                                                                    // 12778\n\t\t\t *  @deprecated                                                                                                     // 12779\n\t\t\t */                                                                                                                 // 12780\n\t\t\t\"sXInner\": null,                                                                                                    // 12781\n\t                                                                                                                      // 12782\n\t\t\t/**                                                                                                                 // 12783\n\t\t\t * Viewport height for vertical scrolling. Vertical scrolling is disabled                                           // 12784\n\t\t\t * if an empty string.                                                                                              // 12785\n\t\t\t * Note that this parameter will be set by the initialisation routine. To                                           // 12786\n\t\t\t * set a default use {@link DataTable.defaults}.                                                                    // 12787\n\t\t\t *  @type string                                                                                                    // 12788\n\t\t\t */                                                                                                                 // 12789\n\t\t\t\"sY\": null                                                                                                          // 12790\n\t\t},                                                                                                                   // 12791\n\t                                                                                                                      // 12792\n\t\t/**                                                                                                                  // 12793\n\t\t * Language information for the table.                                                                               // 12794\n\t\t *  @namespace                                                                                                       // 12795\n\t\t *  @extends DataTable.defaults.oLanguage                                                                            // 12796\n\t\t */                                                                                                                  // 12797\n\t\t\"oLanguage\": {                                                                                                       // 12798\n\t\t\t/**                                                                                                                 // 12799\n\t\t\t * Information callback function. See                                                                               // 12800\n\t\t\t * {@link DataTable.defaults.fnInfoCallback}                                                                        // 12801\n\t\t\t *  @type function                                                                                                  // 12802\n\t\t\t *  @default null                                                                                                   // 12803\n\t\t\t */                                                                                                                 // 12804\n\t\t\t\"fnInfoCallback\": null                                                                                              // 12805\n\t\t},                                                                                                                   // 12806\n\t                                                                                                                      // 12807\n\t\t/**                                                                                                                  // 12808\n\t\t * Browser support parameters                                                                                        // 12809\n\t\t *  @namespace                                                                                                       // 12810\n\t\t */                                                                                                                  // 12811\n\t\t\"oBrowser\": {                                                                                                        // 12812\n\t\t\t/**                                                                                                                 // 12813\n\t\t\t * Indicate if the browser incorrectly calculates width:100% inside a                                               // 12814\n\t\t\t * scrolling element (IE6/7)                                                                                        // 12815\n\t\t\t *  @type boolean                                                                                                   // 12816\n\t\t\t *  @default false                                                                                                  // 12817\n\t\t\t */                                                                                                                 // 12818\n\t\t\t\"bScrollOversize\": false,                                                                                           // 12819\n\t                                                                                                                      // 12820\n\t\t\t/**                                                                                                                 // 12821\n\t\t\t * Determine if the vertical scrollbar is on the right or left of the                                               // 12822\n\t\t\t * scrolling container - needed for rtl language layout, although not                                               // 12823\n\t\t\t * all browsers move the scrollbar (Safari).                                                                        // 12824\n\t\t\t *  @type boolean                                                                                                   // 12825\n\t\t\t *  @default false                                                                                                  // 12826\n\t\t\t */                                                                                                                 // 12827\n\t\t\t\"bScrollbarLeft\": false                                                                                             // 12828\n\t\t},                                                                                                                   // 12829\n\t                                                                                                                      // 12830\n\t                                                                                                                      // 12831\n\t\t\"ajax\": null,                                                                                                        // 12832\n\t                                                                                                                      // 12833\n\t                                                                                                                      // 12834\n\t\t/**                                                                                                                  // 12835\n\t\t * Array referencing the nodes which are used for the features. The                                                  // 12836\n\t\t * parameters of this object match what is allowed by sDom - i.e.                                                    // 12837\n\t\t *   <ul>                                                                                                            // 12838\n\t\t *     <li>'l' - Length changing</li>                                                                                // 12839\n\t\t *     <li>'f' - Filtering input</li>                                                                                // 12840\n\t\t *     <li>'t' - The table!</li>                                                                                     // 12841\n\t\t *     <li>'i' - Information</li>                                                                                    // 12842\n\t\t *     <li>'p' - Pagination</li>                                                                                     // 12843\n\t\t *     <li>'r' - pRocessing</li>                                                                                     // 12844\n\t\t *   </ul>                                                                                                           // 12845\n\t\t *  @type array                                                                                                      // 12846\n\t\t *  @default []                                                                                                      // 12847\n\t\t */                                                                                                                  // 12848\n\t\t\"aanFeatures\": [],                                                                                                   // 12849\n\t                                                                                                                      // 12850\n\t\t/**                                                                                                                  // 12851\n\t\t * Store data information - see {@link DataTable.models.oRow} for detailed                                           // 12852\n\t\t * information.                                                                                                      // 12853\n\t\t *  @type array                                                                                                      // 12854\n\t\t *  @default []                                                                                                      // 12855\n\t\t */                                                                                                                  // 12856\n\t\t\"aoData\": [],                                                                                                        // 12857\n\t                                                                                                                      // 12858\n\t\t/**                                                                                                                  // 12859\n\t\t * Array of indexes which are in the current display (after filtering etc)                                           // 12860\n\t\t *  @type array                                                                                                      // 12861\n\t\t *  @default []                                                                                                      // 12862\n\t\t */                                                                                                                  // 12863\n\t\t\"aiDisplay\": [],                                                                                                     // 12864\n\t                                                                                                                      // 12865\n\t\t/**                                                                                                                  // 12866\n\t\t * Array of indexes for display - no filtering                                                                       // 12867\n\t\t *  @type array                                                                                                      // 12868\n\t\t *  @default []                                                                                                      // 12869\n\t\t */                                                                                                                  // 12870\n\t\t\"aiDisplayMaster\": [],                                                                                               // 12871\n\t                                                                                                                      // 12872\n\t\t/**                                                                                                                  // 12873\n\t\t * Store information about each column that is in use                                                                // 12874\n\t\t *  @type array                                                                                                      // 12875\n\t\t *  @default []                                                                                                      // 12876\n\t\t */                                                                                                                  // 12877\n\t\t\"aoColumns\": [],                                                                                                     // 12878\n\t                                                                                                                      // 12879\n\t\t/**                                                                                                                  // 12880\n\t\t * Store information about the table's header                                                                        // 12881\n\t\t *  @type array                                                                                                      // 12882\n\t\t *  @default []                                                                                                      // 12883\n\t\t */                                                                                                                  // 12884\n\t\t\"aoHeader\": [],                                                                                                      // 12885\n\t                                                                                                                      // 12886\n\t\t/**                                                                                                                  // 12887\n\t\t * Store information about the table's footer                                                                        // 12888\n\t\t *  @type array                                                                                                      // 12889\n\t\t *  @default []                                                                                                      // 12890\n\t\t */                                                                                                                  // 12891\n\t\t\"aoFooter\": [],                                                                                                      // 12892\n\t                                                                                                                      // 12893\n\t\t/**                                                                                                                  // 12894\n\t\t * Store the applied global search information in case we want to force a                                            // 12895\n\t\t * research or compare the old search to a new one.                                                                  // 12896\n\t\t * Note that this parameter will be set by the initialisation routine. To                                            // 12897\n\t\t * set a default use {@link DataTable.defaults}.                                                                     // 12898\n\t\t *  @namespace                                                                                                       // 12899\n\t\t *  @extends DataTable.models.oSearch                                                                                // 12900\n\t\t */                                                                                                                  // 12901\n\t\t\"oPreviousSearch\": {},                                                                                               // 12902\n\t                                                                                                                      // 12903\n\t\t/**                                                                                                                  // 12904\n\t\t * Store the applied search for each column - see                                                                    // 12905\n\t\t * {@link DataTable.models.oSearch} for the format that is used for the                                              // 12906\n\t\t * filtering information for each column.                                                                            // 12907\n\t\t *  @type array                                                                                                      // 12908\n\t\t *  @default []                                                                                                      // 12909\n\t\t */                                                                                                                  // 12910\n\t\t\"aoPreSearchCols\": [],                                                                                               // 12911\n\t                                                                                                                      // 12912\n\t\t/**                                                                                                                  // 12913\n\t\t * Sorting that is applied to the table. Note that the inner arrays are                                              // 12914\n\t\t * used in the following manner:                                                                                     // 12915\n\t\t * <ul>                                                                                                              // 12916\n\t\t *   <li>Index 0 - column number</li>                                                                                // 12917\n\t\t *   <li>Index 1 - current sorting direction</li>                                                                    // 12918\n\t\t * </ul>                                                                                                             // 12919\n\t\t * Note that this parameter will be set by the initialisation routine. To                                            // 12920\n\t\t * set a default use {@link DataTable.defaults}.                                                                     // 12921\n\t\t *  @type array                                                                                                      // 12922\n\t\t *  @todo These inner arrays should really be objects                                                                // 12923\n\t\t */                                                                                                                  // 12924\n\t\t\"aaSorting\": null,                                                                                                   // 12925\n\t                                                                                                                      // 12926\n\t\t/**                                                                                                                  // 12927\n\t\t * Sorting that is always applied to the table (i.e. prefixed in front of                                            // 12928\n\t\t * aaSorting).                                                                                                       // 12929\n\t\t * Note that this parameter will be set by the initialisation routine. To                                            // 12930\n\t\t * set a default use {@link DataTable.defaults}.                                                                     // 12931\n\t\t *  @type array                                                                                                      // 12932\n\t\t *  @default []                                                                                                      // 12933\n\t\t */                                                                                                                  // 12934\n\t\t\"aaSortingFixed\": [],                                                                                                // 12935\n\t                                                                                                                      // 12936\n\t\t/**                                                                                                                  // 12937\n\t\t * Classes to use for the striping of a table.                                                                       // 12938\n\t\t * Note that this parameter will be set by the initialisation routine. To                                            // 12939\n\t\t * set a default use {@link DataTable.defaults}.                                                                     // 12940\n\t\t *  @type array                                                                                                      // 12941\n\t\t *  @default []                                                                                                      // 12942\n\t\t */                                                                                                                  // 12943\n\t\t\"asStripeClasses\": null,                                                                                             // 12944\n\t                                                                                                                      // 12945\n\t\t/**                                                                                                                  // 12946\n\t\t * If restoring a table - we should restore its striping classes as well                                             // 12947\n\t\t *  @type array                                                                                                      // 12948\n\t\t *  @default []                                                                                                      // 12949\n\t\t */                                                                                                                  // 12950\n\t\t\"asDestroyStripes\": [],                                                                                              // 12951\n\t                                                                                                                      // 12952\n\t\t/**                                                                                                                  // 12953\n\t\t * If restoring a table - we should restore its width                                                                // 12954\n\t\t *  @type int                                                                                                        // 12955\n\t\t *  @default 0                                                                                                       // 12956\n\t\t */                                                                                                                  // 12957\n\t\t\"sDestroyWidth\": 0,                                                                                                  // 12958\n\t                                                                                                                      // 12959\n\t\t/**                                                                                                                  // 12960\n\t\t * Callback functions array for every time a row is inserted (i.e. on a draw).                                       // 12961\n\t\t *  @type array                                                                                                      // 12962\n\t\t *  @default []                                                                                                      // 12963\n\t\t */                                                                                                                  // 12964\n\t\t\"aoRowCallback\": [],                                                                                                 // 12965\n\t                                                                                                                      // 12966\n\t\t/**                                                                                                                  // 12967\n\t\t * Callback functions for the header on each draw.                                                                   // 12968\n\t\t *  @type array                                                                                                      // 12969\n\t\t *  @default []                                                                                                      // 12970\n\t\t */                                                                                                                  // 12971\n\t\t\"aoHeaderCallback\": [],                                                                                              // 12972\n\t                                                                                                                      // 12973\n\t\t/**                                                                                                                  // 12974\n\t\t * Callback function for the footer on each draw.                                                                    // 12975\n\t\t *  @type array                                                                                                      // 12976\n\t\t *  @default []                                                                                                      // 12977\n\t\t */                                                                                                                  // 12978\n\t\t\"aoFooterCallback\": [],                                                                                              // 12979\n\t                                                                                                                      // 12980\n\t\t/**                                                                                                                  // 12981\n\t\t * Array of callback functions for draw callback functions                                                           // 12982\n\t\t *  @type array                                                                                                      // 12983\n\t\t *  @default []                                                                                                      // 12984\n\t\t */                                                                                                                  // 12985\n\t\t\"aoDrawCallback\": [],                                                                                                // 12986\n\t                                                                                                                      // 12987\n\t\t/**                                                                                                                  // 12988\n\t\t * Array of callback functions for row created function                                                              // 12989\n\t\t *  @type array                                                                                                      // 12990\n\t\t *  @default []                                                                                                      // 12991\n\t\t */                                                                                                                  // 12992\n\t\t\"aoRowCreatedCallback\": [],                                                                                          // 12993\n\t                                                                                                                      // 12994\n\t\t/**                                                                                                                  // 12995\n\t\t * Callback functions for just before the table is redrawn. A return of                                              // 12996\n\t\t * false will be used to cancel the draw.                                                                            // 12997\n\t\t *  @type array                                                                                                      // 12998\n\t\t *  @default []                                                                                                      // 12999\n\t\t */                                                                                                                  // 13000\n\t\t\"aoPreDrawCallback\": [],                                                                                             // 13001\n\t                                                                                                                      // 13002\n\t\t/**                                                                                                                  // 13003\n\t\t * Callback functions for when the table has been initialised.                                                       // 13004\n\t\t *  @type array                                                                                                      // 13005\n\t\t *  @default []                                                                                                      // 13006\n\t\t */                                                                                                                  // 13007\n\t\t\"aoInitComplete\": [],                                                                                                // 13008\n\t                                                                                                                      // 13009\n\t                                                                                                                      // 13010\n\t\t/**                                                                                                                  // 13011\n\t\t * Callbacks for modifying the settings to be stored for state saving, prior to                                      // 13012\n\t\t * saving state.                                                                                                     // 13013\n\t\t *  @type array                                                                                                      // 13014\n\t\t *  @default []                                                                                                      // 13015\n\t\t */                                                                                                                  // 13016\n\t\t\"aoStateSaveParams\": [],                                                                                             // 13017\n\t                                                                                                                      // 13018\n\t\t/**                                                                                                                  // 13019\n\t\t * Callbacks for modifying the settings that have been stored for state saving                                       // 13020\n\t\t * prior to using the stored values to restore the state.                                                            // 13021\n\t\t *  @type array                                                                                                      // 13022\n\t\t *  @default []                                                                                                      // 13023\n\t\t */                                                                                                                  // 13024\n\t\t\"aoStateLoadParams\": [],                                                                                             // 13025\n\t                                                                                                                      // 13026\n\t\t/**                                                                                                                  // 13027\n\t\t * Callbacks for operating on the settings object once the saved state has been                                      // 13028\n\t\t * loaded                                                                                                            // 13029\n\t\t *  @type array                                                                                                      // 13030\n\t\t *  @default []                                                                                                      // 13031\n\t\t */                                                                                                                  // 13032\n\t\t\"aoStateLoaded\": [],                                                                                                 // 13033\n\t                                                                                                                      // 13034\n\t\t/**                                                                                                                  // 13035\n\t\t * Cache the table ID for quick access                                                                               // 13036\n\t\t *  @type string                                                                                                     // 13037\n\t\t *  @default <i>Empty string</i>                                                                                     // 13038\n\t\t */                                                                                                                  // 13039\n\t\t\"sTableId\": \"\",                                                                                                      // 13040\n\t                                                                                                                      // 13041\n\t\t/**                                                                                                                  // 13042\n\t\t * The TABLE node for the main table                                                                                 // 13043\n\t\t *  @type node                                                                                                       // 13044\n\t\t *  @default null                                                                                                    // 13045\n\t\t */                                                                                                                  // 13046\n\t\t\"nTable\": null,                                                                                                      // 13047\n\t                                                                                                                      // 13048\n\t\t/**                                                                                                                  // 13049\n\t\t * Permanent ref to the thead element                                                                                // 13050\n\t\t *  @type node                                                                                                       // 13051\n\t\t *  @default null                                                                                                    // 13052\n\t\t */                                                                                                                  // 13053\n\t\t\"nTHead\": null,                                                                                                      // 13054\n\t                                                                                                                      // 13055\n\t\t/**                                                                                                                  // 13056\n\t\t * Permanent ref to the tfoot element - if it exists                                                                 // 13057\n\t\t *  @type node                                                                                                       // 13058\n\t\t *  @default null                                                                                                    // 13059\n\t\t */                                                                                                                  // 13060\n\t\t\"nTFoot\": null,                                                                                                      // 13061\n\t                                                                                                                      // 13062\n\t\t/**                                                                                                                  // 13063\n\t\t * Permanent ref to the tbody element                                                                                // 13064\n\t\t *  @type node                                                                                                       // 13065\n\t\t *  @default null                                                                                                    // 13066\n\t\t */                                                                                                                  // 13067\n\t\t\"nTBody\": null,                                                                                                      // 13068\n\t                                                                                                                      // 13069\n\t\t/**                                                                                                                  // 13070\n\t\t * Cache the wrapper node (contains all DataTables controlled elements)                                              // 13071\n\t\t *  @type node                                                                                                       // 13072\n\t\t *  @default null                                                                                                    // 13073\n\t\t */                                                                                                                  // 13074\n\t\t\"nTableWrapper\": null,                                                                                               // 13075\n\t                                                                                                                      // 13076\n\t\t/**                                                                                                                  // 13077\n\t\t * Indicate if when using server-side processing the loading of data                                                 // 13078\n\t\t * should be deferred until the second draw.                                                                         // 13079\n\t\t * Note that this parameter will be set by the initialisation routine. To                                            // 13080\n\t\t * set a default use {@link DataTable.defaults}.                                                                     // 13081\n\t\t *  @type boolean                                                                                                    // 13082\n\t\t *  @default false                                                                                                   // 13083\n\t\t */                                                                                                                  // 13084\n\t\t\"bDeferLoading\": false,                                                                                              // 13085\n\t                                                                                                                      // 13086\n\t\t/**                                                                                                                  // 13087\n\t\t * Indicate if all required information has been read in                                                             // 13088\n\t\t *  @type boolean                                                                                                    // 13089\n\t\t *  @default false                                                                                                   // 13090\n\t\t */                                                                                                                  // 13091\n\t\t\"bInitialised\": false,                                                                                               // 13092\n\t                                                                                                                      // 13093\n\t\t/**                                                                                                                  // 13094\n\t\t * Information about open rows. Each object in the array has the parameters                                          // 13095\n\t\t * 'nTr' and 'nParent'                                                                                               // 13096\n\t\t *  @type array                                                                                                      // 13097\n\t\t *  @default []                                                                                                      // 13098\n\t\t */                                                                                                                  // 13099\n\t\t\"aoOpenRows\": [],                                                                                                    // 13100\n\t                                                                                                                      // 13101\n\t\t/**                                                                                                                  // 13102\n\t\t * Dictate the positioning of DataTables' control elements - see                                                     // 13103\n\t\t * {@link DataTable.model.oInit.sDom}.                                                                               // 13104\n\t\t * Note that this parameter will be set by the initialisation routine. To                                            // 13105\n\t\t * set a default use {@link DataTable.defaults}.                                                                     // 13106\n\t\t *  @type string                                                                                                     // 13107\n\t\t *  @default null                                                                                                    // 13108\n\t\t */                                                                                                                  // 13109\n\t\t\"sDom\": null,                                                                                                        // 13110\n\t                                                                                                                      // 13111\n\t\t/**                                                                                                                  // 13112\n\t\t * Search delay (in mS)                                                                                              // 13113\n\t\t *  @type integer                                                                                                    // 13114\n\t\t *  @default null                                                                                                    // 13115\n\t\t */                                                                                                                  // 13116\n\t\t\"searchDelay\": null,                                                                                                 // 13117\n\t                                                                                                                      // 13118\n\t\t/**                                                                                                                  // 13119\n\t\t * Which type of pagination should be used.                                                                          // 13120\n\t\t * Note that this parameter will be set by the initialisation routine. To                                            // 13121\n\t\t * set a default use {@link DataTable.defaults}.                                                                     // 13122\n\t\t *  @type string                                                                                                     // 13123\n\t\t *  @default two_button                                                                                              // 13124\n\t\t */                                                                                                                  // 13125\n\t\t\"sPaginationType\": \"two_button\",                                                                                     // 13126\n\t                                                                                                                      // 13127\n\t\t/**                                                                                                                  // 13128\n\t\t * The state duration (for `stateSave`) in seconds.                                                                  // 13129\n\t\t * Note that this parameter will be set by the initialisation routine. To                                            // 13130\n\t\t * set a default use {@link DataTable.defaults}.                                                                     // 13131\n\t\t *  @type int                                                                                                        // 13132\n\t\t *  @default 0                                                                                                       // 13133\n\t\t */                                                                                                                  // 13134\n\t\t\"iStateDuration\": 0,                                                                                                 // 13135\n\t                                                                                                                      // 13136\n\t\t/**                                                                                                                  // 13137\n\t\t * Array of callback functions for state saving. Each array element is an                                            // 13138\n\t\t * object with the following parameters:                                                                             // 13139\n\t\t *   <ul>                                                                                                            // 13140\n\t\t *     <li>function:fn - function to call. Takes two parameters, oSettings                                           // 13141\n\t\t *       and the JSON string to save that has been thus far created. Returns                                         // 13142\n\t\t *       a JSON string to be inserted into a json object                                                             // 13143\n\t\t *       (i.e. '\"param\": [ 0, 1, 2]')</li>                                                                           // 13144\n\t\t *     <li>string:sName - name of callback</li>                                                                      // 13145\n\t\t *   </ul>                                                                                                           // 13146\n\t\t *  @type array                                                                                                      // 13147\n\t\t *  @default []                                                                                                      // 13148\n\t\t */                                                                                                                  // 13149\n\t\t\"aoStateSave\": [],                                                                                                   // 13150\n\t                                                                                                                      // 13151\n\t\t/**                                                                                                                  // 13152\n\t\t * Array of callback functions for state loading. Each array element is an                                           // 13153\n\t\t * object with the following parameters:                                                                             // 13154\n\t\t *   <ul>                                                                                                            // 13155\n\t\t *     <li>function:fn - function to call. Takes two parameters, oSettings                                           // 13156\n\t\t *       and the object stored. May return false to cancel state loading</li>                                        // 13157\n\t\t *     <li>string:sName - name of callback</li>                                                                      // 13158\n\t\t *   </ul>                                                                                                           // 13159\n\t\t *  @type array                                                                                                      // 13160\n\t\t *  @default []                                                                                                      // 13161\n\t\t */                                                                                                                  // 13162\n\t\t\"aoStateLoad\": [],                                                                                                   // 13163\n\t                                                                                                                      // 13164\n\t\t/**                                                                                                                  // 13165\n\t\t * State that was saved. Useful for back reference                                                                   // 13166\n\t\t *  @type object                                                                                                     // 13167\n\t\t *  @default null                                                                                                    // 13168\n\t\t */                                                                                                                  // 13169\n\t\t\"oSavedState\": null,                                                                                                 // 13170\n\t                                                                                                                      // 13171\n\t\t/**                                                                                                                  // 13172\n\t\t * State that was loaded. Useful for back reference                                                                  // 13173\n\t\t *  @type object                                                                                                     // 13174\n\t\t *  @default null                                                                                                    // 13175\n\t\t */                                                                                                                  // 13176\n\t\t\"oLoadedState\": null,                                                                                                // 13177\n\t                                                                                                                      // 13178\n\t\t/**                                                                                                                  // 13179\n\t\t * Source url for AJAX data for the table.                                                                           // 13180\n\t\t * Note that this parameter will be set by the initialisation routine. To                                            // 13181\n\t\t * set a default use {@link DataTable.defaults}.                                                                     // 13182\n\t\t *  @type string                                                                                                     // 13183\n\t\t *  @default null                                                                                                    // 13184\n\t\t */                                                                                                                  // 13185\n\t\t\"sAjaxSource\": null,                                                                                                 // 13186\n\t                                                                                                                      // 13187\n\t\t/**                                                                                                                  // 13188\n\t\t * Property from a given object from which to read the table data from. This                                         // 13189\n\t\t * can be an empty string (when not server-side processing), in which case                                           // 13190\n\t\t * it is  assumed an an array is given directly.                                                                     // 13191\n\t\t * Note that this parameter will be set by the initialisation routine. To                                            // 13192\n\t\t * set a default use {@link DataTable.defaults}.                                                                     // 13193\n\t\t *  @type string                                                                                                     // 13194\n\t\t */                                                                                                                  // 13195\n\t\t\"sAjaxDataProp\": null,                                                                                               // 13196\n\t                                                                                                                      // 13197\n\t\t/**                                                                                                                  // 13198\n\t\t * Note if draw should be blocked while getting data                                                                 // 13199\n\t\t *  @type boolean                                                                                                    // 13200\n\t\t *  @default true                                                                                                    // 13201\n\t\t */                                                                                                                  // 13202\n\t\t\"bAjaxDataGet\": true,                                                                                                // 13203\n\t                                                                                                                      // 13204\n\t\t/**                                                                                                                  // 13205\n\t\t * The last jQuery XHR object that was used for server-side data gathering.                                          // 13206\n\t\t * This can be used for working with the XHR information in one of the                                               // 13207\n\t\t * callbacks                                                                                                         // 13208\n\t\t *  @type object                                                                                                     // 13209\n\t\t *  @default null                                                                                                    // 13210\n\t\t */                                                                                                                  // 13211\n\t\t\"jqXHR\": null,                                                                                                       // 13212\n\t                                                                                                                      // 13213\n\t\t/**                                                                                                                  // 13214\n\t\t * JSON returned from the server in the last Ajax request                                                            // 13215\n\t\t *  @type object                                                                                                     // 13216\n\t\t *  @default undefined                                                                                               // 13217\n\t\t */                                                                                                                  // 13218\n\t\t\"json\": undefined,                                                                                                   // 13219\n\t                                                                                                                      // 13220\n\t\t/**                                                                                                                  // 13221\n\t\t * Data submitted as part of the last Ajax request                                                                   // 13222\n\t\t *  @type object                                                                                                     // 13223\n\t\t *  @default undefined                                                                                               // 13224\n\t\t */                                                                                                                  // 13225\n\t\t\"oAjaxData\": undefined,                                                                                              // 13226\n\t                                                                                                                      // 13227\n\t\t/**                                                                                                                  // 13228\n\t\t * Function to get the server-side data.                                                                             // 13229\n\t\t * Note that this parameter will be set by the initialisation routine. To                                            // 13230\n\t\t * set a default use {@link DataTable.defaults}.                                                                     // 13231\n\t\t *  @type function                                                                                                   // 13232\n\t\t */                                                                                                                  // 13233\n\t\t\"fnServerData\": null,                                                                                                // 13234\n\t                                                                                                                      // 13235\n\t\t/**                                                                                                                  // 13236\n\t\t * Functions which are called prior to sending an Ajax request so extra                                              // 13237\n\t\t * parameters can easily be sent to the server                                                                       // 13238\n\t\t *  @type array                                                                                                      // 13239\n\t\t *  @default []                                                                                                      // 13240\n\t\t */                                                                                                                  // 13241\n\t\t\"aoServerParams\": [],                                                                                                // 13242\n\t                                                                                                                      // 13243\n\t\t/**                                                                                                                  // 13244\n\t\t * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if                                                 // 13245\n\t\t * required).                                                                                                        // 13246\n\t\t * Note that this parameter will be set by the initialisation routine. To                                            // 13247\n\t\t * set a default use {@link DataTable.defaults}.                                                                     // 13248\n\t\t *  @type string                                                                                                     // 13249\n\t\t */                                                                                                                  // 13250\n\t\t\"sServerMethod\": null,                                                                                               // 13251\n\t                                                                                                                      // 13252\n\t\t/**                                                                                                                  // 13253\n\t\t * Format numbers for display.                                                                                       // 13254\n\t\t * Note that this parameter will be set by the initialisation routine. To                                            // 13255\n\t\t * set a default use {@link DataTable.defaults}.                                                                     // 13256\n\t\t *  @type function                                                                                                   // 13257\n\t\t */                                                                                                                  // 13258\n\t\t\"fnFormatNumber\": null,                                                                                              // 13259\n\t                                                                                                                      // 13260\n\t\t/**                                                                                                                  // 13261\n\t\t * List of options that can be used for the user selectable length menu.                                             // 13262\n\t\t * Note that this parameter will be set by the initialisation routine. To                                            // 13263\n\t\t * set a default use {@link DataTable.defaults}.                                                                     // 13264\n\t\t *  @type array                                                                                                      // 13265\n\t\t *  @default []                                                                                                      // 13266\n\t\t */                                                                                                                  // 13267\n\t\t\"aLengthMenu\": null,                                                                                                 // 13268\n\t                                                                                                                      // 13269\n\t\t/**                                                                                                                  // 13270\n\t\t * Counter for the draws that the table does. Also used as a tracker for                                             // 13271\n\t\t * server-side processing                                                                                            // 13272\n\t\t *  @type int                                                                                                        // 13273\n\t\t *  @default 0                                                                                                       // 13274\n\t\t */                                                                                                                  // 13275\n\t\t\"iDraw\": 0,                                                                                                          // 13276\n\t                                                                                                                      // 13277\n\t\t/**                                                                                                                  // 13278\n\t\t * Indicate if a redraw is being done - useful for Ajax                                                              // 13279\n\t\t *  @type boolean                                                                                                    // 13280\n\t\t *  @default false                                                                                                   // 13281\n\t\t */                                                                                                                  // 13282\n\t\t\"bDrawing\": false,                                                                                                   // 13283\n\t                                                                                                                      // 13284\n\t\t/**                                                                                                                  // 13285\n\t\t * Draw index (iDraw) of the last error when parsing the returned data                                               // 13286\n\t\t *  @type int                                                                                                        // 13287\n\t\t *  @default -1                                                                                                      // 13288\n\t\t */                                                                                                                  // 13289\n\t\t\"iDrawError\": -1,                                                                                                    // 13290\n\t                                                                                                                      // 13291\n\t\t/**                                                                                                                  // 13292\n\t\t * Paging display length                                                                                             // 13293\n\t\t *  @type int                                                                                                        // 13294\n\t\t *  @default 10                                                                                                      // 13295\n\t\t */                                                                                                                  // 13296\n\t\t\"_iDisplayLength\": 10,                                                                                               // 13297\n\t                                                                                                                      // 13298\n\t\t/**                                                                                                                  // 13299\n\t\t * Paging start point - aiDisplay index                                                                              // 13300\n\t\t *  @type int                                                                                                        // 13301\n\t\t *  @default 0                                                                                                       // 13302\n\t\t */                                                                                                                  // 13303\n\t\t\"_iDisplayStart\": 0,                                                                                                 // 13304\n\t                                                                                                                      // 13305\n\t\t/**                                                                                                                  // 13306\n\t\t * Server-side processing - number of records in the result set                                                      // 13307\n\t\t * (i.e. before filtering), Use fnRecordsTotal rather than                                                           // 13308\n\t\t * this property to get the value of the number of records, regardless of                                            // 13309\n\t\t * the server-side processing setting.                                                                               // 13310\n\t\t *  @type int                                                                                                        // 13311\n\t\t *  @default 0                                                                                                       // 13312\n\t\t *  @private                                                                                                         // 13313\n\t\t */                                                                                                                  // 13314\n\t\t\"_iRecordsTotal\": 0,                                                                                                 // 13315\n\t                                                                                                                      // 13316\n\t\t/**                                                                                                                  // 13317\n\t\t * Server-side processing - number of records in the current display set                                             // 13318\n\t\t * (i.e. after filtering). Use fnRecordsDisplay rather than                                                          // 13319\n\t\t * this property to get the value of the number of records, regardless of                                            // 13320\n\t\t * the server-side processing setting.                                                                               // 13321\n\t\t *  @type boolean                                                                                                    // 13322\n\t\t *  @default 0                                                                                                       // 13323\n\t\t *  @private                                                                                                         // 13324\n\t\t */                                                                                                                  // 13325\n\t\t\"_iRecordsDisplay\": 0,                                                                                               // 13326\n\t                                                                                                                      // 13327\n\t\t/**                                                                                                                  // 13328\n\t\t * Flag to indicate if jQuery UI marking and classes should be used.                                                 // 13329\n\t\t * Note that this parameter will be set by the initialisation routine. To                                            // 13330\n\t\t * set a default use {@link DataTable.defaults}.                                                                     // 13331\n\t\t *  @type boolean                                                                                                    // 13332\n\t\t */                                                                                                                  // 13333\n\t\t\"bJUI\": null,                                                                                                        // 13334\n\t                                                                                                                      // 13335\n\t\t/**                                                                                                                  // 13336\n\t\t * The classes to use for the table                                                                                  // 13337\n\t\t *  @type object                                                                                                     // 13338\n\t\t *  @default {}                                                                                                      // 13339\n\t\t */                                                                                                                  // 13340\n\t\t\"oClasses\": {},                                                                                                      // 13341\n\t                                                                                                                      // 13342\n\t\t/**                                                                                                                  // 13343\n\t\t * Flag attached to the settings object so you can check in the draw                                                 // 13344\n\t\t * callback if filtering has been done in the draw. Deprecated in favour of                                          // 13345\n\t\t * events.                                                                                                           // 13346\n\t\t *  @type boolean                                                                                                    // 13347\n\t\t *  @default false                                                                                                   // 13348\n\t\t *  @deprecated                                                                                                      // 13349\n\t\t */                                                                                                                  // 13350\n\t\t\"bFiltered\": false,                                                                                                  // 13351\n\t                                                                                                                      // 13352\n\t\t/**                                                                                                                  // 13353\n\t\t * Flag attached to the settings object so you can check in the draw                                                 // 13354\n\t\t * callback if sorting has been done in the draw. Deprecated in favour of                                            // 13355\n\t\t * events.                                                                                                           // 13356\n\t\t *  @type boolean                                                                                                    // 13357\n\t\t *  @default false                                                                                                   // 13358\n\t\t *  @deprecated                                                                                                      // 13359\n\t\t */                                                                                                                  // 13360\n\t\t\"bSorted\": false,                                                                                                    // 13361\n\t                                                                                                                      // 13362\n\t\t/**                                                                                                                  // 13363\n\t\t * Indicate that if multiple rows are in the header and there is more than                                           // 13364\n\t\t * one unique cell per column, if the top one (true) or bottom one (false)                                           // 13365\n\t\t * should be used for sorting / title by DataTables.                                                                 // 13366\n\t\t * Note that this parameter will be set by the initialisation routine. To                                            // 13367\n\t\t * set a default use {@link DataTable.defaults}.                                                                     // 13368\n\t\t *  @type boolean                                                                                                    // 13369\n\t\t */                                                                                                                  // 13370\n\t\t\"bSortCellsTop\": null,                                                                                               // 13371\n\t                                                                                                                      // 13372\n\t\t/**                                                                                                                  // 13373\n\t\t * Initialisation object that is used for the table                                                                  // 13374\n\t\t *  @type object                                                                                                     // 13375\n\t\t *  @default null                                                                                                    // 13376\n\t\t */                                                                                                                  // 13377\n\t\t\"oInit\": null,                                                                                                       // 13378\n\t                                                                                                                      // 13379\n\t\t/**                                                                                                                  // 13380\n\t\t * Destroy callback functions - for plug-ins to attach themselves to the                                             // 13381\n\t\t * destroy so they can clean up markup and events.                                                                   // 13382\n\t\t *  @type array                                                                                                      // 13383\n\t\t *  @default []                                                                                                      // 13384\n\t\t */                                                                                                                  // 13385\n\t\t\"aoDestroyCallback\": [],                                                                                             // 13386\n\t                                                                                                                      // 13387\n\t                                                                                                                      // 13388\n\t\t/**                                                                                                                  // 13389\n\t\t * Get the number of records in the current record set, before filtering                                             // 13390\n\t\t *  @type function                                                                                                   // 13391\n\t\t */                                                                                                                  // 13392\n\t\t\"fnRecordsTotal\": function ()                                                                                        // 13393\n\t\t{                                                                                                                    // 13394\n\t\t\treturn _fnDataSource( this ) == 'ssp' ?                                                                             // 13395\n\t\t\t\tthis._iRecordsTotal * 1 :                                                                                          // 13396\n\t\t\t\tthis.aiDisplayMaster.length;                                                                                       // 13397\n\t\t},                                                                                                                   // 13398\n\t                                                                                                                      // 13399\n\t\t/**                                                                                                                  // 13400\n\t\t * Get the number of records in the current record set, after filtering                                              // 13401\n\t\t *  @type function                                                                                                   // 13402\n\t\t */                                                                                                                  // 13403\n\t\t\"fnRecordsDisplay\": function ()                                                                                      // 13404\n\t\t{                                                                                                                    // 13405\n\t\t\treturn _fnDataSource( this ) == 'ssp' ?                                                                             // 13406\n\t\t\t\tthis._iRecordsDisplay * 1 :                                                                                        // 13407\n\t\t\t\tthis.aiDisplay.length;                                                                                             // 13408\n\t\t},                                                                                                                   // 13409\n\t                                                                                                                      // 13410\n\t\t/**                                                                                                                  // 13411\n\t\t * Get the display end point - aiDisplay index                                                                       // 13412\n\t\t *  @type function                                                                                                   // 13413\n\t\t */                                                                                                                  // 13414\n\t\t\"fnDisplayEnd\": function ()                                                                                          // 13415\n\t\t{                                                                                                                    // 13416\n\t\t\tvar                                                                                                                 // 13417\n\t\t\t\tlen      = this._iDisplayLength,                                                                                   // 13418\n\t\t\t\tstart    = this._iDisplayStart,                                                                                    // 13419\n\t\t\t\tcalc     = start + len,                                                                                            // 13420\n\t\t\t\trecords  = this.aiDisplay.length,                                                                                  // 13421\n\t\t\t\tfeatures = this.oFeatures,                                                                                         // 13422\n\t\t\t\tpaginate = features.bPaginate;                                                                                     // 13423\n\t                                                                                                                      // 13424\n\t\t\tif ( features.bServerSide ) {                                                                                       // 13425\n\t\t\t\treturn paginate === false || len === -1 ?                                                                          // 13426\n\t\t\t\t\tstart + records :                                                                                                 // 13427\n\t\t\t\t\tMath.min( start+len, this._iRecordsDisplay );                                                                     // 13428\n\t\t\t}                                                                                                                   // 13429\n\t\t\telse {                                                                                                              // 13430\n\t\t\t\treturn ! paginate || calc>records || len===-1 ?                                                                    // 13431\n\t\t\t\t\trecords :                                                                                                         // 13432\n\t\t\t\t\tcalc;                                                                                                             // 13433\n\t\t\t}                                                                                                                   // 13434\n\t\t},                                                                                                                   // 13435\n\t                                                                                                                      // 13436\n\t\t/**                                                                                                                  // 13437\n\t\t * The DataTables object for this table                                                                              // 13438\n\t\t *  @type object                                                                                                     // 13439\n\t\t *  @default null                                                                                                    // 13440\n\t\t */                                                                                                                  // 13441\n\t\t\"oInstance\": null,                                                                                                   // 13442\n\t                                                                                                                      // 13443\n\t\t/**                                                                                                                  // 13444\n\t\t * Unique identifier for each instance of the DataTables object. If there                                            // 13445\n\t\t * is an ID on the table node, then it takes that value, otherwise an                                                // 13446\n\t\t * incrementing internal counter is used.                                                                            // 13447\n\t\t *  @type string                                                                                                     // 13448\n\t\t *  @default null                                                                                                    // 13449\n\t\t */                                                                                                                  // 13450\n\t\t\"sInstance\": null,                                                                                                   // 13451\n\t                                                                                                                      // 13452\n\t\t/**                                                                                                                  // 13453\n\t\t * tabindex attribute value that is added to DataTables control elements, allowing                                   // 13454\n\t\t * keyboard navigation of the table and its controls.                                                                // 13455\n\t\t */                                                                                                                  // 13456\n\t\t\"iTabIndex\": 0,                                                                                                      // 13457\n\t                                                                                                                      // 13458\n\t\t/**                                                                                                                  // 13459\n\t\t * DIV container for the footer scrolling table if scrolling                                                         // 13460\n\t\t */                                                                                                                  // 13461\n\t\t\"nScrollHead\": null,                                                                                                 // 13462\n\t                                                                                                                      // 13463\n\t\t/**                                                                                                                  // 13464\n\t\t * DIV container for the footer scrolling table if scrolling                                                         // 13465\n\t\t */                                                                                                                  // 13466\n\t\t\"nScrollFoot\": null,                                                                                                 // 13467\n\t                                                                                                                      // 13468\n\t\t/**                                                                                                                  // 13469\n\t\t * Last applied sort                                                                                                 // 13470\n\t\t *  @type array                                                                                                      // 13471\n\t\t *  @default []                                                                                                      // 13472\n\t\t */                                                                                                                  // 13473\n\t\t\"aLastSort\": [],                                                                                                     // 13474\n\t                                                                                                                      // 13475\n\t\t/**                                                                                                                  // 13476\n\t\t * Stored plug-in instances                                                                                          // 13477\n\t\t *  @type object                                                                                                     // 13478\n\t\t *  @default {}                                                                                                      // 13479\n\t\t */                                                                                                                  // 13480\n\t\t\"oPlugins\": {}                                                                                                       // 13481\n\t};                                                                                                                    // 13482\n                                                                                                                       // 13483\n\t/**                                                                                                                   // 13484\n\t * Extension object for DataTables that is used to provide all extension                                              // 13485\n\t * options.                                                                                                           // 13486\n\t *                                                                                                                    // 13487\n\t * Note that the `DataTable.ext` object is available through                                                          // 13488\n\t * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is                                          // 13489\n\t * also aliased to `jQuery.fn.dataTableExt` for historic reasons.                                                     // 13490\n\t *  @namespace                                                                                                        // 13491\n\t *  @extends DataTable.models.ext                                                                                     // 13492\n\t */                                                                                                                   // 13493\n\t                                                                                                                      // 13494\n\t                                                                                                                      // 13495\n\t/**                                                                                                                   // 13496\n\t * DataTables extensions                                                                                              // 13497\n\t *                                                                                                                    // 13498\n\t * This namespace acts as a collection area for plug-ins that can be used to                                          // 13499\n\t * extend DataTables capabilities. Indeed many of the build in methods                                                // 13500\n\t * use this method to provide their own capabilities (sorting methods for                                             // 13501\n\t * example).                                                                                                          // 13502\n\t *                                                                                                                    // 13503\n\t * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy                                         // 13504\n\t * reasons                                                                                                            // 13505\n\t *                                                                                                                    // 13506\n\t *  @namespace                                                                                                        // 13507\n\t */                                                                                                                   // 13508\n\tDataTable.ext = _ext = {                                                                                              // 13509\n\t\t/**                                                                                                                  // 13510\n\t\t * Buttons. For use with the Buttons extension for DataTables. This is                                               // 13511\n\t\t * defined here so other extensions can define buttons regardless of load                                            // 13512\n\t\t * order. It is _not_ used by DataTables core.                                                                       // 13513\n\t\t *                                                                                                                   // 13514\n\t\t *  @type object                                                                                                     // 13515\n\t\t *  @default {}                                                                                                      // 13516\n\t\t */                                                                                                                  // 13517\n\t\tbuttons: {},                                                                                                         // 13518\n\t                                                                                                                      // 13519\n\t                                                                                                                      // 13520\n\t\t/**                                                                                                                  // 13521\n\t\t * Element class names                                                                                               // 13522\n\t\t *                                                                                                                   // 13523\n\t\t *  @type object                                                                                                     // 13524\n\t\t *  @default {}                                                                                                      // 13525\n\t\t */                                                                                                                  // 13526\n\t\tclasses: {},                                                                                                         // 13527\n\t                                                                                                                      // 13528\n\t                                                                                                                      // 13529\n\t\t/**                                                                                                                  // 13530\n\t\t * Error reporting.                                                                                                  // 13531\n\t\t *                                                                                                                   // 13532\n\t\t * How should DataTables report an error. Can take the value 'alert',                                                // 13533\n\t\t * 'throw', 'none' or a function.                                                                                    // 13534\n\t\t *                                                                                                                   // 13535\n\t\t *  @type string|function                                                                                            // 13536\n\t\t *  @default alert                                                                                                   // 13537\n\t\t */                                                                                                                  // 13538\n\t\terrMode: \"alert\",                                                                                                    // 13539\n\t                                                                                                                      // 13540\n\t                                                                                                                      // 13541\n\t\t/**                                                                                                                  // 13542\n\t\t * Feature plug-ins.                                                                                                 // 13543\n\t\t *                                                                                                                   // 13544\n\t\t * This is an array of objects which describe the feature plug-ins that are                                          // 13545\n\t\t * available to DataTables. These feature plug-ins are then available for                                            // 13546\n\t\t * use through the `dom` initialisation option.                                                                      // 13547\n\t\t *                                                                                                                   // 13548\n\t\t * Each feature plug-in is described by an object which must have the                                                // 13549\n\t\t * following properties:                                                                                             // 13550\n\t\t *                                                                                                                   // 13551\n\t\t * * `fnInit` - function that is used to initialise the plug-in,                                                     // 13552\n\t\t * * `cFeature` - a character so the feature can be enabled by the `dom`                                             // 13553\n\t\t *   instillation option. This is case sensitive.                                                                    // 13554\n\t\t *                                                                                                                   // 13555\n\t\t * The `fnInit` function has the following input parameters:                                                         // 13556\n\t\t *                                                                                                                   // 13557\n\t\t * 1. `{object}` DataTables settings object: see                                                                     // 13558\n\t\t *    {@link DataTable.models.oSettings}                                                                             // 13559\n\t\t *                                                                                                                   // 13560\n\t\t * And the following return is expected:                                                                             // 13561\n\t\t *                                                                                                                   // 13562\n\t\t * * {node|null} The element which contains your feature. Note that the                                              // 13563\n\t\t *   return may also be void if your plug-in does not require to inject any                                          // 13564\n\t\t *   DOM elements into DataTables control (`dom`) - for example this might                                           // 13565\n\t\t *   be useful when developing a plug-in which allows table control via                                              // 13566\n\t\t *   keyboard entry                                                                                                  // 13567\n\t\t *                                                                                                                   // 13568\n\t\t *  @type array                                                                                                      // 13569\n\t\t *                                                                                                                   // 13570\n\t\t *  @example                                                                                                         // 13571\n\t\t *    $.fn.dataTable.ext.features.push( {                                                                            // 13572\n\t\t *      \"fnInit\": function( oSettings ) {                                                                            // 13573\n\t\t *        return new TableTools( { \"oDTSettings\": oSettings } );                                                     // 13574\n\t\t *      },                                                                                                           // 13575\n\t\t *      \"cFeature\": \"T\"                                                                                              // 13576\n\t\t *    } );                                                                                                           // 13577\n\t\t */                                                                                                                  // 13578\n\t\tfeature: [],                                                                                                         // 13579\n\t                                                                                                                      // 13580\n\t                                                                                                                      // 13581\n\t\t/**                                                                                                                  // 13582\n\t\t * Row searching.                                                                                                    // 13583\n\t\t *                                                                                                                   // 13584\n\t\t * This method of searching is complimentary to the default type based                                               // 13585\n\t\t * searching, and a lot more comprehensive as it allows you complete control                                         // 13586\n\t\t * over the searching logic. Each element in this array is a function                                                // 13587\n\t\t * (parameters described below) that is called for every row in the table,                                           // 13588\n\t\t * and your logic decides if it should be included in the searching data set                                         // 13589\n\t\t * or not.                                                                                                           // 13590\n\t\t *                                                                                                                   // 13591\n\t\t * Searching functions have the following input parameters:                                                          // 13592\n\t\t *                                                                                                                   // 13593\n\t\t * 1. `{object}` DataTables settings object: see                                                                     // 13594\n\t\t *    {@link DataTable.models.oSettings}                                                                             // 13595\n\t\t * 2. `{array|object}` Data for the row to be processed (same as the                                                 // 13596\n\t\t *    original format that was passed in as the data source, or an array                                             // 13597\n\t\t *    from a DOM data source                                                                                         // 13598\n\t\t * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which                                           // 13599\n\t\t *    can be useful to retrieve the `TR` element if you need DOM interaction.                                        // 13600\n\t\t *                                                                                                                   // 13601\n\t\t * And the following return is expected:                                                                             // 13602\n\t\t *                                                                                                                   // 13603\n\t\t * * {boolean} Include the row in the searched result set (true) or not                                              // 13604\n\t\t *   (false)                                                                                                         // 13605\n\t\t *                                                                                                                   // 13606\n\t\t * Note that as with the main search ability in DataTables, technically this                                         // 13607\n\t\t * is \"filtering\", since it is subtractive. However, for consistency in                                              // 13608\n\t\t * naming we call it searching here.                                                                                 // 13609\n\t\t *                                                                                                                   // 13610\n\t\t *  @type array                                                                                                      // 13611\n\t\t *  @default []                                                                                                      // 13612\n\t\t *                                                                                                                   // 13613\n\t\t *  @example                                                                                                         // 13614\n\t\t *    // The following example shows custom search being applied to the                                              // 13615\n\t\t *    // fourth column (i.e. the data[3] index) based on two input values                                            // 13616\n\t\t *    // from the end-user, matching the data in a certain range.                                                    // 13617\n\t\t *    $.fn.dataTable.ext.search.push(                                                                                // 13618\n\t\t *      function( settings, data, dataIndex ) {                                                                      // 13619\n\t\t *        var min = document.getElementById('min').value * 1;                                                        // 13620\n\t\t *        var max = document.getElementById('max').value * 1;                                                        // 13621\n\t\t *        var version = data[3] == \"-\" ? 0 : data[3]*1;                                                              // 13622\n\t\t *                                                                                                                   // 13623\n\t\t *        if ( min == \"\" && max == \"\" ) {                                                                            // 13624\n\t\t *          return true;                                                                                             // 13625\n\t\t *        }                                                                                                          // 13626\n\t\t *        else if ( min == \"\" && version < max ) {                                                                   // 13627\n\t\t *          return true;                                                                                             // 13628\n\t\t *        }                                                                                                          // 13629\n\t\t *        else if ( min < version && \"\" == max ) {                                                                   // 13630\n\t\t *          return true;                                                                                             // 13631\n\t\t *        }                                                                                                          // 13632\n\t\t *        else if ( min < version && version < max ) {                                                               // 13633\n\t\t *          return true;                                                                                             // 13634\n\t\t *        }                                                                                                          // 13635\n\t\t *        return false;                                                                                              // 13636\n\t\t *      }                                                                                                            // 13637\n\t\t *    );                                                                                                             // 13638\n\t\t */                                                                                                                  // 13639\n\t\tsearch: [],                                                                                                          // 13640\n\t                                                                                                                      // 13641\n\t                                                                                                                      // 13642\n\t\t/**                                                                                                                  // 13643\n\t\t * Selector extensions                                                                                               // 13644\n\t\t *                                                                                                                   // 13645\n\t\t * The `selector` option can be used to extend the options available for the                                         // 13646\n\t\t * selector modifier options (`selector-modifier` object data type) that                                             // 13647\n\t\t * each of the three built in selector types offer (row, column and cell +                                           // 13648\n\t\t * their plural counterparts). For example the Select extension uses this                                            // 13649\n\t\t * mechanism to provide an option to select only rows, columns and cells                                             // 13650\n\t\t * that have been marked as selected by the end user (`{selected: true}`),                                           // 13651\n\t\t * which can be used in conjunction with the existing built in selector                                              // 13652\n\t\t * options.                                                                                                          // 13653\n\t\t *                                                                                                                   // 13654\n\t\t * Each property is an array to which functions can be pushed. The functions                                         // 13655\n\t\t * take three attributes:                                                                                            // 13656\n\t\t *                                                                                                                   // 13657\n\t\t * * Settings object for the host table                                                                              // 13658\n\t\t * * Options object (`selector-modifier` object type)                                                                // 13659\n\t\t * * Array of selected item indexes                                                                                  // 13660\n\t\t *                                                                                                                   // 13661\n\t\t * The return is an array of the resulting item indexes after the custom                                             // 13662\n\t\t * selector has been applied.                                                                                        // 13663\n\t\t *                                                                                                                   // 13664\n\t\t *  @type object                                                                                                     // 13665\n\t\t */                                                                                                                  // 13666\n\t\tselector: {                                                                                                          // 13667\n\t\t\tcell: [],                                                                                                           // 13668\n\t\t\tcolumn: [],                                                                                                         // 13669\n\t\t\trow: []                                                                                                             // 13670\n\t\t},                                                                                                                   // 13671\n\t                                                                                                                      // 13672\n\t                                                                                                                      // 13673\n\t\t/**                                                                                                                  // 13674\n\t\t * Internal functions, exposed for used in plug-ins.                                                                 // 13675\n\t\t *                                                                                                                   // 13676\n\t\t * Please note that you should not need to use the internal methods for                                              // 13677\n\t\t * anything other than a plug-in (and even then, try to avoid if possible).                                          // 13678\n\t\t * The internal function may change between releases.                                                                // 13679\n\t\t *                                                                                                                   // 13680\n\t\t *  @type object                                                                                                     // 13681\n\t\t *  @default {}                                                                                                      // 13682\n\t\t */                                                                                                                  // 13683\n\t\tinternal: {},                                                                                                        // 13684\n\t                                                                                                                      // 13685\n\t                                                                                                                      // 13686\n\t\t/**                                                                                                                  // 13687\n\t\t * Legacy configuration options. Enable and disable legacy options that                                              // 13688\n\t\t * are available in DataTables.                                                                                      // 13689\n\t\t *                                                                                                                   // 13690\n\t\t *  @type object                                                                                                     // 13691\n\t\t */                                                                                                                  // 13692\n\t\tlegacy: {                                                                                                            // 13693\n\t\t\t/**                                                                                                                 // 13694\n\t\t\t * Enable / disable DataTables 1.9 compatible server-side processing                                                // 13695\n\t\t\t * requests                                                                                                         // 13696\n\t\t\t *                                                                                                                  // 13697\n\t\t\t *  @type boolean                                                                                                   // 13698\n\t\t\t *  @default null                                                                                                   // 13699\n\t\t\t */                                                                                                                 // 13700\n\t\t\tajax: null                                                                                                          // 13701\n\t\t},                                                                                                                   // 13702\n\t                                                                                                                      // 13703\n\t                                                                                                                      // 13704\n\t\t/**                                                                                                                  // 13705\n\t\t * Pagination plug-in methods.                                                                                       // 13706\n\t\t *                                                                                                                   // 13707\n\t\t * Each entry in this object is a function and defines which buttons should                                          // 13708\n\t\t * be shown by the pagination rendering method that is used for the table:                                           // 13709\n\t\t * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the                                         // 13710\n\t\t * buttons are displayed in the document, while the functions here tell it                                           // 13711\n\t\t * what buttons to display. This is done by returning an array of button                                             // 13712\n\t\t * descriptions (what each button will do).                                                                          // 13713\n\t\t *                                                                                                                   // 13714\n\t\t * Pagination types (the four built in options and any additional plug-in                                            // 13715\n\t\t * options defined here) can be used through the `paginationType`                                                    // 13716\n\t\t * initialisation parameter.                                                                                         // 13717\n\t\t *                                                                                                                   // 13718\n\t\t * The functions defined take two parameters:                                                                        // 13719\n\t\t *                                                                                                                   // 13720\n\t\t * 1. `{int} page` The current page index                                                                            // 13721\n\t\t * 2. `{int} pages` The number of pages in the table                                                                 // 13722\n\t\t *                                                                                                                   // 13723\n\t\t * Each function is expected to return an array where each element of the                                            // 13724\n\t\t * array can be one of:                                                                                              // 13725\n\t\t *                                                                                                                   // 13726\n\t\t * * `first` - Jump to first page when activated                                                                     // 13727\n\t\t * * `last` - Jump to last page when activated                                                                       // 13728\n\t\t * * `previous` - Show previous page when activated                                                                  // 13729\n\t\t * * `next` - Show next page when activated                                                                          // 13730\n\t\t * * `{int}` - Show page of the index given                                                                          // 13731\n\t\t * * `{array}` - A nested array containing the above elements to add a                                               // 13732\n\t\t *   containing 'DIV' element (might be useful for styling).                                                         // 13733\n\t\t *                                                                                                                   // 13734\n\t\t * Note that DataTables v1.9- used this object slightly differently whereby                                          // 13735\n\t\t * an object with two functions would be defined for each plug-in. That                                              // 13736\n\t\t * ability is still supported by DataTables 1.10+ to provide backwards                                               // 13737\n\t\t * compatibility, but this option of use is now decremented and no longer                                            // 13738\n\t\t * documented in DataTables 1.10+.                                                                                   // 13739\n\t\t *                                                                                                                   // 13740\n\t\t *  @type object                                                                                                     // 13741\n\t\t *  @default {}                                                                                                      // 13742\n\t\t *                                                                                                                   // 13743\n\t\t *  @example                                                                                                         // 13744\n\t\t *    // Show previous, next and current page buttons only                                                           // 13745\n\t\t *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {                                             // 13746\n\t\t *      return [ 'previous', page, 'next' ];                                                                         // 13747\n\t\t *    };                                                                                                             // 13748\n\t\t */                                                                                                                  // 13749\n\t\tpager: {},                                                                                                           // 13750\n\t                                                                                                                      // 13751\n\t                                                                                                                      // 13752\n\t\trenderer: {                                                                                                          // 13753\n\t\t\tpageButton: {},                                                                                                     // 13754\n\t\t\theader: {}                                                                                                          // 13755\n\t\t},                                                                                                                   // 13756\n\t                                                                                                                      // 13757\n\t                                                                                                                      // 13758\n\t\t/**                                                                                                                  // 13759\n\t\t * Ordering plug-ins - custom data source                                                                            // 13760\n\t\t *                                                                                                                   // 13761\n\t\t * The extension options for ordering of data available here is complimentary                                        // 13762\n\t\t * to the default type based ordering that DataTables typically uses. It                                             // 13763\n\t\t * allows much greater control over the the data that is being used to                                               // 13764\n\t\t * order a column, but is necessarily therefore more complex.                                                        // 13765\n\t\t *                                                                                                                   // 13766\n\t\t * This type of ordering is useful if you want to do ordering based on data                                          // 13767\n\t\t * live from the DOM (for example the contents of an 'input' element) rather                                         // 13768\n\t\t * than just the static string that DataTables knows of.                                                             // 13769\n\t\t *                                                                                                                   // 13770\n\t\t * The way these plug-ins work is that you create an array of the values you                                         // 13771\n\t\t * wish to be ordering for the column in question and then return that                                               // 13772\n\t\t * array. The data in the array much be in the index order of the rows in                                            // 13773\n\t\t * the table (not the currently ordering order!). Which order data gathering                                         // 13774\n\t\t * function is run here depends on the `dt-init columns.orderDataType`                                               // 13775\n\t\t * parameter that is used for the column (if any).                                                                   // 13776\n\t\t *                                                                                                                   // 13777\n\t\t * The functions defined take two parameters:                                                                        // 13778\n\t\t *                                                                                                                   // 13779\n\t\t * 1. `{object}` DataTables settings object: see                                                                     // 13780\n\t\t *    {@link DataTable.models.oSettings}                                                                             // 13781\n\t\t * 2. `{int}` Target column index                                                                                    // 13782\n\t\t *                                                                                                                   // 13783\n\t\t * Each function is expected to return an array:                                                                     // 13784\n\t\t *                                                                                                                   // 13785\n\t\t * * `{array}` Data for the column to be ordering upon                                                               // 13786\n\t\t *                                                                                                                   // 13787\n\t\t *  @type array                                                                                                      // 13788\n\t\t *                                                                                                                   // 13789\n\t\t *  @example                                                                                                         // 13790\n\t\t *    // Ordering using `input` node values                                                                          // 13791\n\t\t *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )                                             // 13792\n\t\t *    {                                                                                                              // 13793\n\t\t *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {                           // 13794\n\t\t *        return $('input', td).val();                                                                               // 13795\n\t\t *      } );                                                                                                         // 13796\n\t\t *    }                                                                                                              // 13797\n\t\t */                                                                                                                  // 13798\n\t\torder: {},                                                                                                           // 13799\n\t                                                                                                                      // 13800\n\t                                                                                                                      // 13801\n\t\t/**                                                                                                                  // 13802\n\t\t * Type based plug-ins.                                                                                              // 13803\n\t\t *                                                                                                                   // 13804\n\t\t * Each column in DataTables has a type assigned to it, either by automatic                                          // 13805\n\t\t * detection or by direct assignment using the `type` option for the column.                                         // 13806\n\t\t * The type of a column will effect how it is ordering and search (plug-ins                                          // 13807\n\t\t * can also make use of the column type if required).                                                                // 13808\n\t\t *                                                                                                                   // 13809\n\t\t * @namespace                                                                                                        // 13810\n\t\t */                                                                                                                  // 13811\n\t\ttype: {                                                                                                              // 13812\n\t\t\t/**                                                                                                                 // 13813\n\t\t\t * Type detection functions.                                                                                        // 13814\n\t\t\t *                                                                                                                  // 13815\n\t\t\t * The functions defined in this object are used to automatically detect                                            // 13816\n\t\t\t * a column's type, making initialisation of DataTables super easy, even                                            // 13817\n\t\t\t * when complex data is in the table.                                                                               // 13818\n\t\t\t *                                                                                                                  // 13819\n\t\t\t * The functions defined take two parameters:                                                                       // 13820\n\t\t\t *                                                                                                                  // 13821\n\t\t     *  1. `{*}` Data from the column cell to be analysed                                                            // 13822\n\t\t     *  2. `{settings}` DataTables settings object. This can be used to                                              // 13823\n\t\t     *     perform context specific type detection - for example detection                                           // 13824\n\t\t     *     based on language settings such as using a comma for a decimal                                            // 13825\n\t\t     *     place. Generally speaking the options from the settings will not                                          // 13826\n\t\t     *     be required                                                                                               // 13827\n\t\t\t *                                                                                                                  // 13828\n\t\t\t * Each function is expected to return:                                                                             // 13829\n\t\t\t *                                                                                                                  // 13830\n\t\t\t * * `{string|null}` Data type detected, or null if unknown (and thus                                               // 13831\n\t\t\t *   pass it on to the other type detection functions.                                                              // 13832\n\t\t\t *                                                                                                                  // 13833\n\t\t\t *  @type array                                                                                                     // 13834\n\t\t\t *                                                                                                                  // 13835\n\t\t\t *  @example                                                                                                        // 13836\n\t\t\t *    // Currency type detection plug-in:                                                                           // 13837\n\t\t\t *    $.fn.dataTable.ext.type.detect.push(                                                                          // 13838\n\t\t\t *      function ( data, settings ) {                                                                               // 13839\n\t\t\t *        // Check the numeric part                                                                                 // 13840\n\t\t\t *        if ( ! $.isNumeric( data.substring(1) ) ) {                                                               // 13841\n\t\t\t *          return null;                                                                                            // 13842\n\t\t\t *        }                                                                                                         // 13843\n\t\t\t *                                                                                                                  // 13844\n\t\t\t *        // Check prefixed by currency                                                                             // 13845\n\t\t\t *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {                                             // 13846\n\t\t\t *          return 'currency';                                                                                      // 13847\n\t\t\t *        }                                                                                                         // 13848\n\t\t\t *        return null;                                                                                              // 13849\n\t\t\t *      }                                                                                                           // 13850\n\t\t\t *    );                                                                                                            // 13851\n\t\t\t */                                                                                                                 // 13852\n\t\t\tdetect: [],                                                                                                         // 13853\n\t                                                                                                                      // 13854\n\t                                                                                                                      // 13855\n\t\t\t/**                                                                                                                 // 13856\n\t\t\t * Type based search formatting.                                                                                    // 13857\n\t\t\t *                                                                                                                  // 13858\n\t\t\t * The type based searching functions can be used to pre-format the                                                 // 13859\n\t\t\t * data to be search on. For example, it can be used to strip HTML                                                  // 13860\n\t\t\t * tags or to de-format telephone numbers for numeric only searching.                                               // 13861\n\t\t\t *                                                                                                                  // 13862\n\t\t\t * Note that is a search is not defined for a column of a given type,                                               // 13863\n\t\t\t * no search formatting will be performed.                                                                          // 13864\n\t\t\t *                                                                                                                  // 13865\n\t\t\t * Pre-processing of searching data plug-ins - When you assign the sType                                            // 13866\n\t\t\t * for a column (or have it automatically detected for you by DataTables                                            // 13867\n\t\t\t * or a type detection plug-in), you will typically be using this for                                               // 13868\n\t\t\t * custom sorting, but it can also be used to provide custom searching                                              // 13869\n\t\t\t * by allowing you to pre-processing the data and returning the data in                                             // 13870\n\t\t\t * the format that should be searched upon. This is done by adding                                                  // 13871\n\t\t\t * functions this object with a parameter name which matches the sType                                              // 13872\n\t\t\t * for that target column. This is the corollary of <i>afnSortData</i>                                              // 13873\n\t\t\t * for searching data.                                                                                              // 13874\n\t\t\t *                                                                                                                  // 13875\n\t\t\t * The functions defined take a single parameter:                                                                   // 13876\n\t\t\t *                                                                                                                  // 13877\n\t\t     *  1. `{*}` Data from the column cell to be prepared for searching                                              // 13878\n\t\t\t *                                                                                                                  // 13879\n\t\t\t * Each function is expected to return:                                                                             // 13880\n\t\t\t *                                                                                                                  // 13881\n\t\t\t * * `{string|null}` Formatted string that will be used for the searching.                                          // 13882\n\t\t\t *                                                                                                                  // 13883\n\t\t\t *  @type object                                                                                                    // 13884\n\t\t\t *  @default {}                                                                                                     // 13885\n\t\t\t *                                                                                                                  // 13886\n\t\t\t *  @example                                                                                                        // 13887\n\t\t\t *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {                                            // 13888\n\t\t\t *      return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );                                                        // 13889\n\t\t\t *    }                                                                                                             // 13890\n\t\t\t */                                                                                                                 // 13891\n\t\t\tsearch: {},                                                                                                         // 13892\n\t                                                                                                                      // 13893\n\t                                                                                                                      // 13894\n\t\t\t/**                                                                                                                 // 13895\n\t\t\t * Type based ordering.                                                                                             // 13896\n\t\t\t *                                                                                                                  // 13897\n\t\t\t * The column type tells DataTables what ordering to apply to the table                                             // 13898\n\t\t\t * when a column is sorted upon. The order for each type that is defined,                                           // 13899\n\t\t\t * is defined by the functions available in this object.                                                            // 13900\n\t\t\t *                                                                                                                  // 13901\n\t\t\t * Each ordering option can be described by three properties added to                                               // 13902\n\t\t\t * this object:                                                                                                     // 13903\n\t\t\t *                                                                                                                  // 13904\n\t\t\t * * `{type}-pre` - Pre-formatting function                                                                         // 13905\n\t\t\t * * `{type}-asc` - Ascending order function                                                                        // 13906\n\t\t\t * * `{type}-desc` - Descending order function                                                                      // 13907\n\t\t\t *                                                                                                                  // 13908\n\t\t\t * All three can be used together, only `{type}-pre` or only                                                        // 13909\n\t\t\t * `{type}-asc` and `{type}-desc` together. It is generally recommended                                             // 13910\n\t\t\t * that only `{type}-pre` is used, as this provides the optimal                                                     // 13911\n\t\t\t * implementation in terms of speed, although the others are provided                                               // 13912\n\t\t\t * for compatibility with existing Javascript sort functions.                                                       // 13913\n\t\t\t *                                                                                                                  // 13914\n\t\t\t * `{type}-pre`: Functions defined take a single parameter:                                                         // 13915\n\t\t\t *                                                                                                                  // 13916\n\t\t     *  1. `{*}` Data from the column cell to be prepared for ordering                                               // 13917\n\t\t\t *                                                                                                                  // 13918\n\t\t\t * And return:                                                                                                      // 13919\n\t\t\t *                                                                                                                  // 13920\n\t\t\t * * `{*}` Data to be sorted upon                                                                                   // 13921\n\t\t\t *                                                                                                                  // 13922\n\t\t\t * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort                                            // 13923\n\t\t\t * functions, taking two parameters:                                                                                // 13924\n\t\t\t *                                                                                                                  // 13925\n\t\t     *  1. `{*}` Data to compare to the second parameter                                                             // 13926\n\t\t     *  2. `{*}` Data to compare to the first parameter                                                              // 13927\n\t\t\t *                                                                                                                  // 13928\n\t\t\t * And returning:                                                                                                   // 13929\n\t\t\t *                                                                                                                  // 13930\n\t\t\t * * `{*}` Ordering match: <0 if first parameter should be sorted lower                                             // 13931\n\t\t\t *   than the second parameter, ===0 if the two parameters are equal and                                            // 13932\n\t\t\t *   >0 if the first parameter should be sorted height than the second                                              // 13933\n\t\t\t *   parameter.                                                                                                     // 13934\n\t\t\t *                                                                                                                  // 13935\n\t\t\t *  @type object                                                                                                    // 13936\n\t\t\t *  @default {}                                                                                                     // 13937\n\t\t\t *                                                                                                                  // 13938\n\t\t\t *  @example                                                                                                        // 13939\n\t\t\t *    // Numeric ordering of formatted numbers with a pre-formatter                                                 // 13940\n\t\t\t *    $.extend( $.fn.dataTable.ext.type.order, {                                                                    // 13941\n\t\t\t *      \"string-pre\": function(x) {                                                                                 // 13942\n\t\t\t *        a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );                                          // 13943\n\t\t\t *        return parseFloat( a );                                                                                   // 13944\n\t\t\t *      }                                                                                                           // 13945\n\t\t\t *    } );                                                                                                          // 13946\n\t\t\t *                                                                                                                  // 13947\n\t\t\t *  @example                                                                                                        // 13948\n\t\t\t *    // Case-sensitive string ordering, with no pre-formatting method                                              // 13949\n\t\t\t *    $.extend( $.fn.dataTable.ext.order, {                                                                         // 13950\n\t\t\t *      \"string-case-asc\": function(x,y) {                                                                          // 13951\n\t\t\t *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));                                                                // 13952\n\t\t\t *      },                                                                                                          // 13953\n\t\t\t *      \"string-case-desc\": function(x,y) {                                                                         // 13954\n\t\t\t *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));                                                                // 13955\n\t\t\t *      }                                                                                                           // 13956\n\t\t\t *    } );                                                                                                          // 13957\n\t\t\t */                                                                                                                 // 13958\n\t\t\torder: {}                                                                                                           // 13959\n\t\t},                                                                                                                   // 13960\n\t                                                                                                                      // 13961\n\t\t/**                                                                                                                  // 13962\n\t\t * Unique DataTables instance counter                                                                                // 13963\n\t\t *                                                                                                                   // 13964\n\t\t * @type int                                                                                                         // 13965\n\t\t * @private                                                                                                          // 13966\n\t\t */                                                                                                                  // 13967\n\t\t_unique: 0,                                                                                                          // 13968\n\t                                                                                                                      // 13969\n\t                                                                                                                      // 13970\n\t\t//                                                                                                                   // 13971\n\t\t// Depreciated                                                                                                       // 13972\n\t\t// The following properties are retained for backwards compatiblity only.                                            // 13973\n\t\t// The should not be used in new projects and will be removed in a future                                            // 13974\n\t\t// version                                                                                                           // 13975\n\t\t//                                                                                                                   // 13976\n\t                                                                                                                      // 13977\n\t\t/**                                                                                                                  // 13978\n\t\t * Version check function.                                                                                           // 13979\n\t\t *  @type function                                                                                                   // 13980\n\t\t *  @depreciated Since 1.10                                                                                          // 13981\n\t\t */                                                                                                                  // 13982\n\t\tfnVersionCheck: DataTable.fnVersionCheck,                                                                            // 13983\n\t                                                                                                                      // 13984\n\t                                                                                                                      // 13985\n\t\t/**                                                                                                                  // 13986\n\t\t * Index for what 'this' index API functions should use                                                              // 13987\n\t\t *  @type int                                                                                                        // 13988\n\t\t *  @deprecated Since v1.10                                                                                          // 13989\n\t\t */                                                                                                                  // 13990\n\t\tiApiIndex: 0,                                                                                                        // 13991\n\t                                                                                                                      // 13992\n\t                                                                                                                      // 13993\n\t\t/**                                                                                                                  // 13994\n\t\t * jQuery UI class container                                                                                         // 13995\n\t\t *  @type object                                                                                                     // 13996\n\t\t *  @deprecated Since v1.10                                                                                          // 13997\n\t\t */                                                                                                                  // 13998\n\t\toJUIClasses: {},                                                                                                     // 13999\n\t                                                                                                                      // 14000\n\t                                                                                                                      // 14001\n\t\t/**                                                                                                                  // 14002\n\t\t * Software version                                                                                                  // 14003\n\t\t *  @type string                                                                                                     // 14004\n\t\t *  @deprecated Since v1.10                                                                                          // 14005\n\t\t */                                                                                                                  // 14006\n\t\tsVersion: DataTable.version                                                                                          // 14007\n\t};                                                                                                                    // 14008\n\t                                                                                                                      // 14009\n\t                                                                                                                      // 14010\n\t//                                                                                                                    // 14011\n\t// Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts                                        // 14012\n\t//                                                                                                                    // 14013\n\t$.extend( _ext, {                                                                                                     // 14014\n\t\tafnFiltering: _ext.search,                                                                                           // 14015\n\t\taTypes:       _ext.type.detect,                                                                                      // 14016\n\t\tofnSearch:    _ext.type.search,                                                                                      // 14017\n\t\toSort:        _ext.type.order,                                                                                       // 14018\n\t\tafnSortData:  _ext.order,                                                                                            // 14019\n\t\taoFeatures:   _ext.feature,                                                                                          // 14020\n\t\toApi:         _ext.internal,                                                                                         // 14021\n\t\toStdClasses:  _ext.classes,                                                                                          // 14022\n\t\toPagination:  _ext.pager                                                                                             // 14023\n\t} );                                                                                                                  // 14024\n\t                                                                                                                      // 14025\n\t                                                                                                                      // 14026\n\t$.extend( DataTable.ext.classes, {                                                                                    // 14027\n\t\t\"sTable\": \"dataTable\",                                                                                               // 14028\n\t\t\"sNoFooter\": \"no-footer\",                                                                                            // 14029\n\t                                                                                                                      // 14030\n\t\t/* Paging buttons */                                                                                                 // 14031\n\t\t\"sPageButton\": \"paginate_button\",                                                                                    // 14032\n\t\t\"sPageButtonActive\": \"current\",                                                                                      // 14033\n\t\t\"sPageButtonDisabled\": \"disabled\",                                                                                   // 14034\n\t                                                                                                                      // 14035\n\t\t/* Striping classes */                                                                                               // 14036\n\t\t\"sStripeOdd\": \"odd\",                                                                                                 // 14037\n\t\t\"sStripeEven\": \"even\",                                                                                               // 14038\n\t                                                                                                                      // 14039\n\t\t/* Empty row */                                                                                                      // 14040\n\t\t\"sRowEmpty\": \"dataTables_empty\",                                                                                     // 14041\n\t                                                                                                                      // 14042\n\t\t/* Features */                                                                                                       // 14043\n\t\t\"sWrapper\": \"dataTables_wrapper\",                                                                                    // 14044\n\t\t\"sFilter\": \"dataTables_filter\",                                                                                      // 14045\n\t\t\"sInfo\": \"dataTables_info\",                                                                                          // 14046\n\t\t\"sPaging\": \"dataTables_paginate paging_\", /* Note that the type is postfixed */                                      // 14047\n\t\t\"sLength\": \"dataTables_length\",                                                                                      // 14048\n\t\t\"sProcessing\": \"dataTables_processing\",                                                                              // 14049\n\t                                                                                                                      // 14050\n\t\t/* Sorting */                                                                                                        // 14051\n\t\t\"sSortAsc\": \"sorting_asc\",                                                                                           // 14052\n\t\t\"sSortDesc\": \"sorting_desc\",                                                                                         // 14053\n\t\t\"sSortable\": \"sorting\", /* Sortable in both directions */                                                            // 14054\n\t\t\"sSortableAsc\": \"sorting_asc_disabled\",                                                                              // 14055\n\t\t\"sSortableDesc\": \"sorting_desc_disabled\",                                                                            // 14056\n\t\t\"sSortableNone\": \"sorting_disabled\",                                                                                 // 14057\n\t\t\"sSortColumn\": \"sorting_\", /* Note that an int is postfixed for the sorting order */                                 // 14058\n\t                                                                                                                      // 14059\n\t\t/* Filtering */                                                                                                      // 14060\n\t\t\"sFilterInput\": \"\",                                                                                                  // 14061\n\t                                                                                                                      // 14062\n\t\t/* Page length */                                                                                                    // 14063\n\t\t\"sLengthSelect\": \"\",                                                                                                 // 14064\n\t                                                                                                                      // 14065\n\t\t/* Scrolling */                                                                                                      // 14066\n\t\t\"sScrollWrapper\": \"dataTables_scroll\",                                                                               // 14067\n\t\t\"sScrollHead\": \"dataTables_scrollHead\",                                                                              // 14068\n\t\t\"sScrollHeadInner\": \"dataTables_scrollHeadInner\",                                                                    // 14069\n\t\t\"sScrollBody\": \"dataTables_scrollBody\",                                                                              // 14070\n\t\t\"sScrollFoot\": \"dataTables_scrollFoot\",                                                                              // 14071\n\t\t\"sScrollFootInner\": \"dataTables_scrollFootInner\",                                                                    // 14072\n\t                                                                                                                      // 14073\n\t\t/* Misc */                                                                                                           // 14074\n\t\t\"sHeaderTH\": \"\",                                                                                                     // 14075\n\t\t\"sFooterTH\": \"\",                                                                                                     // 14076\n\t                                                                                                                      // 14077\n\t\t// Deprecated                                                                                                        // 14078\n\t\t\"sSortJUIAsc\": \"\",                                                                                                   // 14079\n\t\t\"sSortJUIDesc\": \"\",                                                                                                  // 14080\n\t\t\"sSortJUI\": \"\",                                                                                                      // 14081\n\t\t\"sSortJUIAscAllowed\": \"\",                                                                                            // 14082\n\t\t\"sSortJUIDescAllowed\": \"\",                                                                                           // 14083\n\t\t\"sSortJUIWrapper\": \"\",                                                                                               // 14084\n\t\t\"sSortIcon\": \"\",                                                                                                     // 14085\n\t\t\"sJUIHeader\": \"\",                                                                                                    // 14086\n\t\t\"sJUIFooter\": \"\"                                                                                                     // 14087\n\t} );                                                                                                                  // 14088\n\t                                                                                                                      // 14089\n\t                                                                                                                      // 14090\n\t(function() {                                                                                                         // 14091\n\t                                                                                                                      // 14092\n\t// Reused strings for better compression. Closure compiler appears to have a                                          // 14093\n\t// weird edge case where it is trying to expand strings rather than use the                                           // 14094\n\t// variable version. This results in about 200 bytes being added, for very                                            // 14095\n\t// little preference benefit since it this run on script load only.                                                   // 14096\n\tvar _empty = '';                                                                                                      // 14097\n\t_empty = '';                                                                                                          // 14098\n\t                                                                                                                      // 14099\n\tvar _stateDefault = _empty + 'ui-state-default';                                                                      // 14100\n\tvar _sortIcon     = _empty + 'css_right ui-icon ui-icon-';                                                            // 14101\n\tvar _headerFooter = _empty + 'fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix';                             // 14102\n\t                                                                                                                      // 14103\n\t$.extend( DataTable.ext.oJUIClasses, DataTable.ext.classes, {                                                         // 14104\n\t\t/* Full numbers paging buttons */                                                                                    // 14105\n\t\t\"sPageButton\":         \"fg-button ui-button \"+_stateDefault,                                                         // 14106\n\t\t\"sPageButtonActive\":   \"ui-state-disabled\",                                                                          // 14107\n\t\t\"sPageButtonDisabled\": \"ui-state-disabled\",                                                                          // 14108\n\t                                                                                                                      // 14109\n\t\t/* Features */                                                                                                       // 14110\n\t\t\"sPaging\": \"dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi \"+                                      // 14111\n\t\t\t\"ui-buttonset-multi paging_\", /* Note that the type is postfixed */                                                 // 14112\n\t                                                                                                                      // 14113\n\t\t/* Sorting */                                                                                                        // 14114\n\t\t\"sSortAsc\":            _stateDefault+\" sorting_asc\",                                                                 // 14115\n\t\t\"sSortDesc\":           _stateDefault+\" sorting_desc\",                                                                // 14116\n\t\t\"sSortable\":           _stateDefault+\" sorting\",                                                                     // 14117\n\t\t\"sSortableAsc\":        _stateDefault+\" sorting_asc_disabled\",                                                        // 14118\n\t\t\"sSortableDesc\":       _stateDefault+\" sorting_desc_disabled\",                                                       // 14119\n\t\t\"sSortableNone\":       _stateDefault+\" sorting_disabled\",                                                            // 14120\n\t\t\"sSortJUIAsc\":         _sortIcon+\"triangle-1-n\",                                                                     // 14121\n\t\t\"sSortJUIDesc\":        _sortIcon+\"triangle-1-s\",                                                                     // 14122\n\t\t\"sSortJUI\":            _sortIcon+\"carat-2-n-s\",                                                                      // 14123\n\t\t\"sSortJUIAscAllowed\":  _sortIcon+\"carat-1-n\",                                                                        // 14124\n\t\t\"sSortJUIDescAllowed\": _sortIcon+\"carat-1-s\",                                                                        // 14125\n\t\t\"sSortJUIWrapper\":     \"DataTables_sort_wrapper\",                                                                    // 14126\n\t\t\"sSortIcon\":           \"DataTables_sort_icon\",                                                                       // 14127\n\t                                                                                                                      // 14128\n\t\t/* Scrolling */                                                                                                      // 14129\n\t\t\"sScrollHead\": \"dataTables_scrollHead \"+_stateDefault,                                                               // 14130\n\t\t\"sScrollFoot\": \"dataTables_scrollFoot \"+_stateDefault,                                                               // 14131\n\t                                                                                                                      // 14132\n\t\t/* Misc */                                                                                                           // 14133\n\t\t\"sHeaderTH\":  _stateDefault,                                                                                         // 14134\n\t\t\"sFooterTH\":  _stateDefault,                                                                                         // 14135\n\t\t\"sJUIHeader\": _headerFooter+\" ui-corner-tl ui-corner-tr\",                                                            // 14136\n\t\t\"sJUIFooter\": _headerFooter+\" ui-corner-bl ui-corner-br\"                                                             // 14137\n\t} );                                                                                                                  // 14138\n\t                                                                                                                      // 14139\n\t}());                                                                                                                 // 14140\n\t                                                                                                                      // 14141\n\t                                                                                                                      // 14142\n\t                                                                                                                      // 14143\n\tvar extPagination = DataTable.ext.pager;                                                                              // 14144\n\t                                                                                                                      // 14145\n\tfunction _numbers ( page, pages ) {                                                                                   // 14146\n\t\tvar                                                                                                                  // 14147\n\t\t\tnumbers = [],                                                                                                       // 14148\n\t\t\tbuttons = extPagination.numbers_length,                                                                             // 14149\n\t\t\thalf = Math.floor( buttons / 2 ),                                                                                   // 14150\n\t\t\ti = 1;                                                                                                              // 14151\n\t                                                                                                                      // 14152\n\t\tif ( pages <= buttons ) {                                                                                            // 14153\n\t\t\tnumbers = _range( 0, pages );                                                                                       // 14154\n\t\t}                                                                                                                    // 14155\n\t\telse if ( page <= half ) {                                                                                           // 14156\n\t\t\tnumbers = _range( 0, buttons-2 );                                                                                   // 14157\n\t\t\tnumbers.push( 'ellipsis' );                                                                                         // 14158\n\t\t\tnumbers.push( pages-1 );                                                                                            // 14159\n\t\t}                                                                                                                    // 14160\n\t\telse if ( page >= pages - 1 - half ) {                                                                               // 14161\n\t\t\tnumbers = _range( pages-(buttons-2), pages );                                                                       // 14162\n\t\t\tnumbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6                                                            // 14163\n\t\t\tnumbers.splice( 0, 0, 0 );                                                                                          // 14164\n\t\t}                                                                                                                    // 14165\n\t\telse {                                                                                                               // 14166\n\t\t\tnumbers = _range( page-half+2, page+half-1 );                                                                       // 14167\n\t\t\tnumbers.push( 'ellipsis' );                                                                                         // 14168\n\t\t\tnumbers.push( pages-1 );                                                                                            // 14169\n\t\t\tnumbers.splice( 0, 0, 'ellipsis' );                                                                                 // 14170\n\t\t\tnumbers.splice( 0, 0, 0 );                                                                                          // 14171\n\t\t}                                                                                                                    // 14172\n\t                                                                                                                      // 14173\n\t\tnumbers.DT_el = 'span';                                                                                              // 14174\n\t\treturn numbers;                                                                                                      // 14175\n\t}                                                                                                                     // 14176\n\t                                                                                                                      // 14177\n\t                                                                                                                      // 14178\n\t$.extend( extPagination, {                                                                                            // 14179\n\t\tsimple: function ( page, pages ) {                                                                                   // 14180\n\t\t\treturn [ 'previous', 'next' ];                                                                                      // 14181\n\t\t},                                                                                                                   // 14182\n\t                                                                                                                      // 14183\n\t\tfull: function ( page, pages ) {                                                                                     // 14184\n\t\t\treturn [  'first', 'previous', 'next', 'last' ];                                                                    // 14185\n\t\t},                                                                                                                   // 14186\n\t                                                                                                                      // 14187\n\t\tsimple_numbers: function ( page, pages ) {                                                                           // 14188\n\t\t\treturn [ 'previous', _numbers(page, pages), 'next' ];                                                               // 14189\n\t\t},                                                                                                                   // 14190\n\t                                                                                                                      // 14191\n\t\tfull_numbers: function ( page, pages ) {                                                                             // 14192\n\t\t\treturn [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];                                              // 14193\n\t\t},                                                                                                                   // 14194\n\t                                                                                                                      // 14195\n\t\t// For testing and plug-ins to use                                                                                   // 14196\n\t\t_numbers: _numbers,                                                                                                  // 14197\n\t                                                                                                                      // 14198\n\t\t// Number of number buttons (including ellipsis) to show. _Must be odd!_                                             // 14199\n\t\tnumbers_length: 7                                                                                                    // 14200\n\t} );                                                                                                                  // 14201\n\t                                                                                                                      // 14202\n\t                                                                                                                      // 14203\n\t$.extend( true, DataTable.ext.renderer, {                                                                             // 14204\n\t\tpageButton: {                                                                                                        // 14205\n\t\t\t_: function ( settings, host, idx, buttons, page, pages ) {                                                         // 14206\n\t\t\t\tvar classes = settings.oClasses;                                                                                   // 14207\n\t\t\t\tvar lang = settings.oLanguage.oPaginate;                                                                           // 14208\n\t\t\t\tvar btnDisplay, btnClass, counter=0;                                                                               // 14209\n\t                                                                                                                      // 14210\n\t\t\t\tvar attach = function( container, buttons ) {                                                                      // 14211\n\t\t\t\t\tvar i, ien, node, button;                                                                                         // 14212\n\t\t\t\t\tvar clickHandler = function ( e ) {                                                                               // 14213\n\t\t\t\t\t\t_fnPageChange( settings, e.data.action, true );                                                                  // 14214\n\t\t\t\t\t};                                                                                                                // 14215\n\t                                                                                                                      // 14216\n\t\t\t\t\tfor ( i=0, ien=buttons.length ; i<ien ; i++ ) {                                                                   // 14217\n\t\t\t\t\t\tbutton = buttons[i];                                                                                             // 14218\n\t                                                                                                                      // 14219\n\t\t\t\t\t\tif ( $.isArray( button ) ) {                                                                                     // 14220\n\t\t\t\t\t\t\tvar inner = $( '<'+(button.DT_el || 'div')+'/>' )                                                               // 14221\n\t\t\t\t\t\t\t\t.appendTo( container );                                                                                        // 14222\n\t\t\t\t\t\t\tattach( inner, button );                                                                                        // 14223\n\t\t\t\t\t\t}                                                                                                                // 14224\n\t\t\t\t\t\telse {                                                                                                           // 14225\n\t\t\t\t\t\t\tbtnDisplay = '';                                                                                                // 14226\n\t\t\t\t\t\t\tbtnClass = '';                                                                                                  // 14227\n\t                                                                                                                      // 14228\n\t\t\t\t\t\t\tswitch ( button ) {                                                                                             // 14229\n\t\t\t\t\t\t\t\tcase 'ellipsis':                                                                                               // 14230\n\t\t\t\t\t\t\t\t\tcontainer.append('<span class=\"ellipsis\">&#x2026;</span>');                                                   // 14231\n\t\t\t\t\t\t\t\t\tbreak;                                                                                                        // 14232\n\t                                                                                                                      // 14233\n\t\t\t\t\t\t\t\tcase 'first':                                                                                                  // 14234\n\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sFirst;                                                                                     // 14235\n\t\t\t\t\t\t\t\t\tbtnClass = button + (page > 0 ?                                                                               // 14236\n\t\t\t\t\t\t\t\t\t\t'' : ' '+classes.sPageButtonDisabled);                                                                       // 14237\n\t\t\t\t\t\t\t\t\tbreak;                                                                                                        // 14238\n\t                                                                                                                      // 14239\n\t\t\t\t\t\t\t\tcase 'previous':                                                                                               // 14240\n\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sPrevious;                                                                                  // 14241\n\t\t\t\t\t\t\t\t\tbtnClass = button + (page > 0 ?                                                                               // 14242\n\t\t\t\t\t\t\t\t\t\t'' : ' '+classes.sPageButtonDisabled);                                                                       // 14243\n\t\t\t\t\t\t\t\t\tbreak;                                                                                                        // 14244\n\t                                                                                                                      // 14245\n\t\t\t\t\t\t\t\tcase 'next':                                                                                                   // 14246\n\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sNext;                                                                                      // 14247\n\t\t\t\t\t\t\t\t\tbtnClass = button + (page < pages-1 ?                                                                         // 14248\n\t\t\t\t\t\t\t\t\t\t'' : ' '+classes.sPageButtonDisabled);                                                                       // 14249\n\t\t\t\t\t\t\t\t\tbreak;                                                                                                        // 14250\n\t                                                                                                                      // 14251\n\t\t\t\t\t\t\t\tcase 'last':                                                                                                   // 14252\n\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sLast;                                                                                      // 14253\n\t\t\t\t\t\t\t\t\tbtnClass = button + (page < pages-1 ?                                                                         // 14254\n\t\t\t\t\t\t\t\t\t\t'' : ' '+classes.sPageButtonDisabled);                                                                       // 14255\n\t\t\t\t\t\t\t\t\tbreak;                                                                                                        // 14256\n\t                                                                                                                      // 14257\n\t\t\t\t\t\t\t\tdefault:                                                                                                       // 14258\n\t\t\t\t\t\t\t\t\tbtnDisplay = button + 1;                                                                                      // 14259\n\t\t\t\t\t\t\t\t\tbtnClass = page === button ?                                                                                  // 14260\n\t\t\t\t\t\t\t\t\t\tclasses.sPageButtonActive : '';                                                                              // 14261\n\t\t\t\t\t\t\t\t\tbreak;                                                                                                        // 14262\n\t\t\t\t\t\t\t}                                                                                                               // 14263\n\t                                                                                                                      // 14264\n\t\t\t\t\t\t\tif ( btnDisplay ) {                                                                                             // 14265\n\t\t\t\t\t\t\t\tnode = $('<a>', {                                                                                              // 14266\n\t\t\t\t\t\t\t\t\t\t'class': classes.sPageButton+' '+btnClass,                                                                   // 14267\n\t\t\t\t\t\t\t\t\t\t'aria-controls': settings.sTableId,                                                                          // 14268\n\t\t\t\t\t\t\t\t\t\t'data-dt-idx': counter,                                                                                      // 14269\n\t\t\t\t\t\t\t\t\t\t'tabindex': settings.iTabIndex,                                                                              // 14270\n\t\t\t\t\t\t\t\t\t\t'id': idx === 0 && typeof button === 'string' ?                                                              // 14271\n\t\t\t\t\t\t\t\t\t\t\tsettings.sTableId +'_'+ button :                                                                            // 14272\n\t\t\t\t\t\t\t\t\t\t\tnull                                                                                                        // 14273\n\t\t\t\t\t\t\t\t\t} )                                                                                                           // 14274\n\t\t\t\t\t\t\t\t\t.html( btnDisplay )                                                                                           // 14275\n\t\t\t\t\t\t\t\t\t.appendTo( container );                                                                                       // 14276\n\t                                                                                                                      // 14277\n\t\t\t\t\t\t\t\t_fnBindAction(                                                                                                 // 14278\n\t\t\t\t\t\t\t\t\tnode, {action: button}, clickHandler                                                                          // 14279\n\t\t\t\t\t\t\t\t);                                                                                                             // 14280\n\t                                                                                                                      // 14281\n\t\t\t\t\t\t\t\tcounter++;                                                                                                     // 14282\n\t\t\t\t\t\t\t}                                                                                                               // 14283\n\t\t\t\t\t\t}                                                                                                                // 14284\n\t\t\t\t\t}                                                                                                                 // 14285\n\t\t\t\t};                                                                                                                 // 14286\n\t                                                                                                                      // 14287\n\t\t\t\t// IE9 throws an 'unknown error' if document.activeElement is used                                                 // 14288\n\t\t\t\t// inside an iframe or frame. Try / catch the error. Not good for                                                  // 14289\n\t\t\t\t// accessibility, but neither are frames.                                                                          // 14290\n\t\t\t\tvar activeEl;                                                                                                      // 14291\n\t                                                                                                                      // 14292\n\t\t\t\ttry {                                                                                                              // 14293\n\t\t\t\t\t// Because this approach is destroying and recreating the paging                                                  // 14294\n\t\t\t\t\t// elements, focus is lost on the select button which is bad for                                                  // 14295\n\t\t\t\t\t// accessibility. So we want to restore focus once the draw has                                                   // 14296\n\t\t\t\t\t// completed                                                                                                      // 14297\n\t\t\t\t\tactiveEl = $(document.activeElement).data('dt-idx');                                                              // 14298\n\t\t\t\t}                                                                                                                  // 14299\n\t\t\t\tcatch (e) {}                                                                                                       // 14300\n\t                                                                                                                      // 14301\n\t\t\t\tattach( $(host).empty(), buttons );                                                                                // 14302\n\t                                                                                                                      // 14303\n\t\t\t\tif ( activeEl ) {                                                                                                  // 14304\n\t\t\t\t\t$(host).find( '[data-dt-idx='+activeEl+']' ).focus();                                                             // 14305\n\t\t\t\t}                                                                                                                  // 14306\n\t\t\t}                                                                                                                   // 14307\n\t\t}                                                                                                                    // 14308\n\t} );                                                                                                                  // 14309\n\t                                                                                                                      // 14310\n\t                                                                                                                      // 14311\n\t                                                                                                                      // 14312\n\t// Built in type detection. See model.ext.aTypes for information about                                                // 14313\n\t// what is required from this methods.                                                                                // 14314\n\t$.extend( DataTable.ext.type.detect, [                                                                                // 14315\n\t\t// Plain numbers - first since V8 detects some plain numbers as dates                                                // 14316\n\t\t// e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).                                                    // 14317\n\t\tfunction ( d, settings )                                                                                             // 14318\n\t\t{                                                                                                                    // 14319\n\t\t\tvar decimal = settings.oLanguage.sDecimal;                                                                          // 14320\n\t\t\treturn _isNumber( d, decimal ) ? 'num'+decimal : null;                                                              // 14321\n\t\t},                                                                                                                   // 14322\n\t                                                                                                                      // 14323\n\t\t// Dates (only those recognised by the browser's Date.parse)                                                         // 14324\n\t\tfunction ( d, settings )                                                                                             // 14325\n\t\t{                                                                                                                    // 14326\n\t\t\t// V8 will remove any unknown characters at the start and end of the                                                // 14327\n\t\t\t// expression, leading to false matches such as `$245.12` or `10%` being                                            // 14328\n\t\t\t// a valid date. See forum thread 18941 for detail.                                                                 // 14329\n\t\t\tif ( d && !(d instanceof Date) && ( ! _re_date_start.test(d) || ! _re_date_end.test(d) ) ) {                        // 14330\n\t\t\t\treturn null;                                                                                                       // 14331\n\t\t\t}                                                                                                                   // 14332\n\t\t\tvar parsed = Date.parse(d);                                                                                         // 14333\n\t\t\treturn (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;                                            // 14334\n\t\t},                                                                                                                   // 14335\n\t                                                                                                                      // 14336\n\t\t// Formatted numbers                                                                                                 // 14337\n\t\tfunction ( d, settings )                                                                                             // 14338\n\t\t{                                                                                                                    // 14339\n\t\t\tvar decimal = settings.oLanguage.sDecimal;                                                                          // 14340\n\t\t\treturn _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;                                                    // 14341\n\t\t},                                                                                                                   // 14342\n\t                                                                                                                      // 14343\n\t\t// HTML numeric                                                                                                      // 14344\n\t\tfunction ( d, settings )                                                                                             // 14345\n\t\t{                                                                                                                    // 14346\n\t\t\tvar decimal = settings.oLanguage.sDecimal;                                                                          // 14347\n\t\t\treturn _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;                                                      // 14348\n\t\t},                                                                                                                   // 14349\n\t                                                                                                                      // 14350\n\t\t// HTML numeric, formatted                                                                                           // 14351\n\t\tfunction ( d, settings )                                                                                             // 14352\n\t\t{                                                                                                                    // 14353\n\t\t\tvar decimal = settings.oLanguage.sDecimal;                                                                          // 14354\n\t\t\treturn _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;                                            // 14355\n\t\t},                                                                                                                   // 14356\n\t                                                                                                                      // 14357\n\t\t// HTML (this is strict checking - there must be html)                                                               // 14358\n\t\tfunction ( d, settings )                                                                                             // 14359\n\t\t{                                                                                                                    // 14360\n\t\t\treturn _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?                                            // 14361\n\t\t\t\t'html' : null;                                                                                                     // 14362\n\t\t}                                                                                                                    // 14363\n\t] );                                                                                                                  // 14364\n\t                                                                                                                      // 14365\n\t                                                                                                                      // 14366\n\t                                                                                                                      // 14367\n\t// Filter formatting functions. See model.ext.ofnSearch for information about                                         // 14368\n\t// what is required from these methods.                                                                               // 14369\n\t//                                                                                                                    // 14370\n\t// Note that additional search methods are added for the html numbers and                                             // 14371\n\t// html formatted numbers by `_addNumericSort()` when we know what the decimal                                        // 14372\n\t// place is                                                                                                           // 14373\n\t                                                                                                                      // 14374\n\t                                                                                                                      // 14375\n\t$.extend( DataTable.ext.type.search, {                                                                                // 14376\n\t\thtml: function ( data ) {                                                                                            // 14377\n\t\t\treturn _empty(data) ?                                                                                               // 14378\n\t\t\t\tdata :                                                                                                             // 14379\n\t\t\t\ttypeof data === 'string' ?                                                                                         // 14380\n\t\t\t\t\tdata                                                                                                              // 14381\n\t\t\t\t\t\t.replace( _re_new_lines, \" \" )                                                                                   // 14382\n\t\t\t\t\t\t.replace( _re_html, \"\" ) :                                                                                       // 14383\n\t\t\t\t\t'';                                                                                                               // 14384\n\t\t},                                                                                                                   // 14385\n\t                                                                                                                      // 14386\n\t\tstring: function ( data ) {                                                                                          // 14387\n\t\t\treturn _empty(data) ?                                                                                               // 14388\n\t\t\t\tdata :                                                                                                             // 14389\n\t\t\t\ttypeof data === 'string' ?                                                                                         // 14390\n\t\t\t\t\tdata.replace( _re_new_lines, \" \" ) :                                                                              // 14391\n\t\t\t\t\tdata;                                                                                                             // 14392\n\t\t}                                                                                                                    // 14393\n\t} );                                                                                                                  // 14394\n\t                                                                                                                      // 14395\n\t                                                                                                                      // 14396\n\t                                                                                                                      // 14397\n\tvar __numericReplace = function ( d, decimalPlace, re1, re2 ) {                                                       // 14398\n\t\tif ( d !== 0 && (!d || d === '-') ) {                                                                                // 14399\n\t\t\treturn -Infinity;                                                                                                   // 14400\n\t\t}                                                                                                                    // 14401\n\t                                                                                                                      // 14402\n\t\t// If a decimal place other than `.` is used, it needs to be given to the                                            // 14403\n\t\t// function so we can detect it and replace with a `.` which is the only                                             // 14404\n\t\t// decimal place Javascript recognises - it is not locale aware.                                                     // 14405\n\t\tif ( decimalPlace ) {                                                                                                // 14406\n\t\t\td = _numToDecimal( d, decimalPlace );                                                                               // 14407\n\t\t}                                                                                                                    // 14408\n\t                                                                                                                      // 14409\n\t\tif ( d.replace ) {                                                                                                   // 14410\n\t\t\tif ( re1 ) {                                                                                                        // 14411\n\t\t\t\td = d.replace( re1, '' );                                                                                          // 14412\n\t\t\t}                                                                                                                   // 14413\n\t                                                                                                                      // 14414\n\t\t\tif ( re2 ) {                                                                                                        // 14415\n\t\t\t\td = d.replace( re2, '' );                                                                                          // 14416\n\t\t\t}                                                                                                                   // 14417\n\t\t}                                                                                                                    // 14418\n\t                                                                                                                      // 14419\n\t\treturn d * 1;                                                                                                        // 14420\n\t};                                                                                                                    // 14421\n\t                                                                                                                      // 14422\n\t                                                                                                                      // 14423\n\t// Add the numeric 'deformatting' functions for sorting and search. This is done                                      // 14424\n\t// in a function to provide an easy ability for the language options to add                                           // 14425\n\t// additional methods if a non-period decimal place is used.                                                          // 14426\n\tfunction _addNumericSort ( decimalPlace ) {                                                                           // 14427\n\t\t$.each(                                                                                                              // 14428\n\t\t\t{                                                                                                                   // 14429\n\t\t\t\t// Plain numbers                                                                                                   // 14430\n\t\t\t\t\"num\": function ( d ) {                                                                                            // 14431\n\t\t\t\t\treturn __numericReplace( d, decimalPlace );                                                                       // 14432\n\t\t\t\t},                                                                                                                 // 14433\n\t                                                                                                                      // 14434\n\t\t\t\t// Formatted numbers                                                                                               // 14435\n\t\t\t\t\"num-fmt\": function ( d ) {                                                                                        // 14436\n\t\t\t\t\treturn __numericReplace( d, decimalPlace, _re_formatted_numeric );                                                // 14437\n\t\t\t\t},                                                                                                                 // 14438\n\t                                                                                                                      // 14439\n\t\t\t\t// HTML numeric                                                                                                    // 14440\n\t\t\t\t\"html-num\": function ( d ) {                                                                                       // 14441\n\t\t\t\t\treturn __numericReplace( d, decimalPlace, _re_html );                                                             // 14442\n\t\t\t\t},                                                                                                                 // 14443\n\t                                                                                                                      // 14444\n\t\t\t\t// HTML numeric, formatted                                                                                         // 14445\n\t\t\t\t\"html-num-fmt\": function ( d ) {                                                                                   // 14446\n\t\t\t\t\treturn __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );                                      // 14447\n\t\t\t\t}                                                                                                                  // 14448\n\t\t\t},                                                                                                                  // 14449\n\t\t\tfunction ( key, fn ) {                                                                                              // 14450\n\t\t\t\t// Add the ordering method                                                                                         // 14451\n\t\t\t\t_ext.type.order[ key+decimalPlace+'-pre' ] = fn;                                                                   // 14452\n\t                                                                                                                      // 14453\n\t\t\t\t// For HTML types add a search formatter that will strip the HTML                                                  // 14454\n\t\t\t\tif ( key.match(/^html\\-/) ) {                                                                                      // 14455\n\t\t\t\t\t_ext.type.search[ key+decimalPlace ] = _ext.type.search.html;                                                     // 14456\n\t\t\t\t}                                                                                                                  // 14457\n\t\t\t}                                                                                                                   // 14458\n\t\t);                                                                                                                   // 14459\n\t}                                                                                                                     // 14460\n\t                                                                                                                      // 14461\n\t                                                                                                                      // 14462\n\t// Default sort methods                                                                                               // 14463\n\t$.extend( _ext.type.order, {                                                                                          // 14464\n\t\t// Dates                                                                                                             // 14465\n\t\t\"date-pre\": function ( d ) {                                                                                         // 14466\n\t\t\treturn Date.parse( d ) || 0;                                                                                        // 14467\n\t\t},                                                                                                                   // 14468\n\t                                                                                                                      // 14469\n\t\t// html                                                                                                              // 14470\n\t\t\"html-pre\": function ( a ) {                                                                                         // 14471\n\t\t\treturn _empty(a) ?                                                                                                  // 14472\n\t\t\t\t'' :                                                                                                               // 14473\n\t\t\t\ta.replace ?                                                                                                        // 14474\n\t\t\t\t\ta.replace( /<.*?>/g, \"\" ).toLowerCase() :                                                                         // 14475\n\t\t\t\t\ta+'';                                                                                                             // 14476\n\t\t},                                                                                                                   // 14477\n\t                                                                                                                      // 14478\n\t\t// string                                                                                                            // 14479\n\t\t\"string-pre\": function ( a ) {                                                                                       // 14480\n\t\t\t// This is a little complex, but faster than always calling toString,                                               // 14481\n\t\t\t// http://jsperf.com/tostring-v-check                                                                               // 14482\n\t\t\treturn _empty(a) ?                                                                                                  // 14483\n\t\t\t\t'' :                                                                                                               // 14484\n\t\t\t\ttypeof a === 'string' ?                                                                                            // 14485\n\t\t\t\t\ta.toLowerCase() :                                                                                                 // 14486\n\t\t\t\t\t! a.toString ?                                                                                                    // 14487\n\t\t\t\t\t\t'' :                                                                                                             // 14488\n\t\t\t\t\t\ta.toString();                                                                                                    // 14489\n\t\t},                                                                                                                   // 14490\n\t                                                                                                                      // 14491\n\t\t// string-asc and -desc are retained only for compatibility with the old                                             // 14492\n\t\t// sort methods                                                                                                      // 14493\n\t\t\"string-asc\": function ( x, y ) {                                                                                    // 14494\n\t\t\treturn ((x < y) ? -1 : ((x > y) ? 1 : 0));                                                                          // 14495\n\t\t},                                                                                                                   // 14496\n\t                                                                                                                      // 14497\n\t\t\"string-desc\": function ( x, y ) {                                                                                   // 14498\n\t\t\treturn ((x < y) ? 1 : ((x > y) ? -1 : 0));                                                                          // 14499\n\t\t}                                                                                                                    // 14500\n\t} );                                                                                                                  // 14501\n\t                                                                                                                      // 14502\n\t                                                                                                                      // 14503\n\t// Numeric sorting types - order doesn't matter here                                                                  // 14504\n\t_addNumericSort( '' );                                                                                                // 14505\n\t                                                                                                                      // 14506\n\t                                                                                                                      // 14507\n\t$.extend( true, DataTable.ext.renderer, {                                                                             // 14508\n\t\theader: {                                                                                                            // 14509\n\t\t\t_: function ( settings, cell, column, classes ) {                                                                   // 14510\n\t\t\t\t// No additional mark-up required                                                                                  // 14511\n\t\t\t\t// Attach a sort listener to update on sort - note that using the                                                  // 14512\n\t\t\t\t// `DT` namespace will allow the event to be removed automatically                                                 // 14513\n\t\t\t\t// on destroy, while the `dt` namespaced event is the one we are                                                   // 14514\n\t\t\t\t// listening for                                                                                                   // 14515\n\t\t\t\t$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {                                      // 14516\n\t\t\t\t\tif ( settings !== ctx ) { // need to check this this is the host                                                  // 14517\n\t\t\t\t\t\treturn;               // table, not a nested one                                                                 // 14518\n\t\t\t\t\t}                                                                                                                 // 14519\n\t                                                                                                                      // 14520\n\t\t\t\t\tvar colIdx = column.idx;                                                                                          // 14521\n\t                                                                                                                      // 14522\n\t\t\t\t\tcell                                                                                                              // 14523\n\t\t\t\t\t\t.removeClass(                                                                                                    // 14524\n\t\t\t\t\t\t\tcolumn.sSortingClass +' '+                                                                                      // 14525\n\t\t\t\t\t\t\tclasses.sSortAsc +' '+                                                                                          // 14526\n\t\t\t\t\t\t\tclasses.sSortDesc                                                                                               // 14527\n\t\t\t\t\t\t)                                                                                                                // 14528\n\t\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?                                                                          // 14529\n\t\t\t\t\t\t\tclasses.sSortAsc : columns[ colIdx ] == 'desc' ?                                                                // 14530\n\t\t\t\t\t\t\t\tclasses.sSortDesc :                                                                                            // 14531\n\t\t\t\t\t\t\t\tcolumn.sSortingClass                                                                                           // 14532\n\t\t\t\t\t\t);                                                                                                               // 14533\n\t\t\t\t} );                                                                                                               // 14534\n\t\t\t},                                                                                                                  // 14535\n\t                                                                                                                      // 14536\n\t\t\tjqueryui: function ( settings, cell, column, classes ) {                                                            // 14537\n\t\t\t\t$('<div/>')                                                                                                        // 14538\n\t\t\t\t\t.addClass( classes.sSortJUIWrapper )                                                                              // 14539\n\t\t\t\t\t.append( cell.contents() )                                                                                        // 14540\n\t\t\t\t\t.append( $('<span/>')                                                                                             // 14541\n\t\t\t\t\t\t.addClass( classes.sSortIcon+' '+column.sSortingClassJUI )                                                       // 14542\n\t\t\t\t\t)                                                                                                                 // 14543\n\t\t\t\t\t.appendTo( cell );                                                                                                // 14544\n\t                                                                                                                      // 14545\n\t\t\t\t// Attach a sort listener to update on sort                                                                        // 14546\n\t\t\t\t$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {                                      // 14547\n\t\t\t\t\tif ( settings !== ctx ) {                                                                                         // 14548\n\t\t\t\t\t\treturn;                                                                                                          // 14549\n\t\t\t\t\t}                                                                                                                 // 14550\n\t                                                                                                                      // 14551\n\t\t\t\t\tvar colIdx = column.idx;                                                                                          // 14552\n\t                                                                                                                      // 14553\n\t\t\t\t\tcell                                                                                                              // 14554\n\t\t\t\t\t\t.removeClass( classes.sSortAsc +\" \"+classes.sSortDesc )                                                          // 14555\n\t\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?                                                                          // 14556\n\t\t\t\t\t\t\tclasses.sSortAsc : columns[ colIdx ] == 'desc' ?                                                                // 14557\n\t\t\t\t\t\t\t\tclasses.sSortDesc :                                                                                            // 14558\n\t\t\t\t\t\t\t\tcolumn.sSortingClass                                                                                           // 14559\n\t\t\t\t\t\t);                                                                                                               // 14560\n\t                                                                                                                      // 14561\n\t\t\t\t\tcell                                                                                                              // 14562\n\t\t\t\t\t\t.find( 'span.'+classes.sSortIcon )                                                                               // 14563\n\t\t\t\t\t\t.removeClass(                                                                                                    // 14564\n\t\t\t\t\t\t\tclasses.sSortJUIAsc +\" \"+                                                                                       // 14565\n\t\t\t\t\t\t\tclasses.sSortJUIDesc +\" \"+                                                                                      // 14566\n\t\t\t\t\t\t\tclasses.sSortJUI +\" \"+                                                                                          // 14567\n\t\t\t\t\t\t\tclasses.sSortJUIAscAllowed +\" \"+                                                                                // 14568\n\t\t\t\t\t\t\tclasses.sSortJUIDescAllowed                                                                                     // 14569\n\t\t\t\t\t\t)                                                                                                                // 14570\n\t\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?                                                                          // 14571\n\t\t\t\t\t\t\tclasses.sSortJUIAsc : columns[ colIdx ] == 'desc' ?                                                             // 14572\n\t\t\t\t\t\t\t\tclasses.sSortJUIDesc :                                                                                         // 14573\n\t\t\t\t\t\t\t\tcolumn.sSortingClassJUI                                                                                        // 14574\n\t\t\t\t\t\t);                                                                                                               // 14575\n\t\t\t\t} );                                                                                                               // 14576\n\t\t\t}                                                                                                                   // 14577\n\t\t}                                                                                                                    // 14578\n\t} );                                                                                                                  // 14579\n\t                                                                                                                      // 14580\n\t/*                                                                                                                    // 14581\n\t * Public helper functions. These aren't used internally by DataTables, or                                            // 14582\n\t * called by any of the options passed into DataTables, but they can be used                                          // 14583\n\t * externally by developers working with DataTables. They are helper functions                                        // 14584\n\t * to make working with DataTables a little bit easier.                                                               // 14585\n\t */                                                                                                                   // 14586\n\t                                                                                                                      // 14587\n\t/**                                                                                                                   // 14588\n\t * Helpers for `columns.render`.                                                                                      // 14589\n\t *                                                                                                                    // 14590\n\t * The options defined here can be used with the `columns.render` initialisation                                      // 14591\n\t * option to provide a display renderer. The following functions are defined:                                         // 14592\n\t *                                                                                                                    // 14593\n\t * * `number` - Will format numeric data (defined by `columns.data`) for                                              // 14594\n\t *   display, retaining the original unformatted data for sorting and filtering.                                      // 14595\n\t *   It takes 4 parameters:                                                                                           // 14596\n\t *   * `string` - Thousands grouping separator                                                                        // 14597\n\t *   * `string` - Decimal point indicator                                                                             // 14598\n\t *   * `integer` - Number of decimal points to show                                                                   // 14599\n\t *   * `string` (optional) - Prefix.                                                                                  // 14600\n\t *                                                                                                                    // 14601\n\t * @example                                                                                                           // 14602\n\t *   // Column definition using the number renderer                                                                   // 14603\n\t *   {                                                                                                                // 14604\n\t *     data: \"salary\",                                                                                                // 14605\n\t *     render: $.fn.dataTable.render.number( '\\'', '.', 0, '$' )                                                      // 14606\n\t *   }                                                                                                                // 14607\n\t *                                                                                                                    // 14608\n\t * @namespace                                                                                                         // 14609\n\t */                                                                                                                   // 14610\n\tDataTable.render = {                                                                                                  // 14611\n\t\tnumber: function ( thousands, decimal, precision, prefix ) {                                                         // 14612\n\t\t\treturn {                                                                                                            // 14613\n\t\t\t\tdisplay: function ( d ) {                                                                                          // 14614\n\t\t\t\t\tif ( typeof d !== 'number' && typeof d !== 'string' ) {                                                           // 14615\n\t\t\t\t\t\treturn d;                                                                                                        // 14616\n\t\t\t\t\t}                                                                                                                 // 14617\n\t                                                                                                                      // 14618\n\t\t\t\t\tvar negative = d < 0 ? '-' : '';                                                                                  // 14619\n\t\t\t\t\td = Math.abs( parseFloat( d ) );                                                                                  // 14620\n\t                                                                                                                      // 14621\n\t\t\t\t\tvar intPart = parseInt( d, 10 );                                                                                  // 14622\n\t\t\t\t\tvar floatPart = precision ?                                                                                       // 14623\n\t\t\t\t\t\tdecimal+(d - intPart).toFixed( precision ).substring( 2 ):                                                       // 14624\n\t\t\t\t\t\t'';                                                                                                              // 14625\n\t                                                                                                                      // 14626\n\t\t\t\t\treturn negative + (prefix||'') +                                                                                  // 14627\n\t\t\t\t\t\tintPart.toString().replace(                                                                                      // 14628\n\t\t\t\t\t\t\t/\\B(?=(\\d{3})+(?!\\d))/g, thousands                                                                              // 14629\n\t\t\t\t\t\t) +                                                                                                              // 14630\n\t\t\t\t\t\tfloatPart;                                                                                                       // 14631\n\t\t\t\t}                                                                                                                  // 14632\n\t\t\t};                                                                                                                  // 14633\n\t\t}                                                                                                                    // 14634\n\t};                                                                                                                    // 14635\n\t                                                                                                                      // 14636\n\t                                                                                                                      // 14637\n\t/*                                                                                                                    // 14638\n\t * This is really a good bit rubbish this method of exposing the internal methods                                     // 14639\n\t * publicly... - To be fixed in 2.0 using methods on the prototype                                                    // 14640\n\t */                                                                                                                   // 14641\n\t                                                                                                                      // 14642\n\t                                                                                                                      // 14643\n\t/**                                                                                                                   // 14644\n\t * Create a wrapper function for exporting an internal functions to an external API.                                  // 14645\n\t *  @param {string} fn API function name                                                                              // 14646\n\t *  @returns {function} wrapped function                                                                              // 14647\n\t *  @memberof DataTable#internal                                                                                      // 14648\n\t */                                                                                                                   // 14649\n\tfunction _fnExternApiFunc (fn)                                                                                        // 14650\n\t{                                                                                                                     // 14651\n\t\treturn function() {                                                                                                  // 14652\n\t\t\tvar args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(                                           // 14653\n\t\t\t\tArray.prototype.slice.call(arguments)                                                                              // 14654\n\t\t\t);                                                                                                                  // 14655\n\t\t\treturn DataTable.ext.internal[fn].apply( this, args );                                                              // 14656\n\t\t};                                                                                                                   // 14657\n\t}                                                                                                                     // 14658\n\t                                                                                                                      // 14659\n\t                                                                                                                      // 14660\n\t/**                                                                                                                   // 14661\n\t * Reference to internal functions for use by plug-in developers. Note that                                           // 14662\n\t * these methods are references to internal functions and are considered to be                                        // 14663\n\t * private. If you use these methods, be aware that they are liable to change                                         // 14664\n\t * between versions.                                                                                                  // 14665\n\t *  @namespace                                                                                                        // 14666\n\t */                                                                                                                   // 14667\n\t$.extend( DataTable.ext.internal, {                                                                                   // 14668\n\t\t_fnExternApiFunc: _fnExternApiFunc,                                                                                  // 14669\n\t\t_fnBuildAjax: _fnBuildAjax,                                                                                          // 14670\n\t\t_fnAjaxUpdate: _fnAjaxUpdate,                                                                                        // 14671\n\t\t_fnAjaxParameters: _fnAjaxParameters,                                                                                // 14672\n\t\t_fnAjaxUpdateDraw: _fnAjaxUpdateDraw,                                                                                // 14673\n\t\t_fnAjaxDataSrc: _fnAjaxDataSrc,                                                                                      // 14674\n\t\t_fnAddColumn: _fnAddColumn,                                                                                          // 14675\n\t\t_fnColumnOptions: _fnColumnOptions,                                                                                  // 14676\n\t\t_fnAdjustColumnSizing: _fnAdjustColumnSizing,                                                                        // 14677\n\t\t_fnVisibleToColumnIndex: _fnVisibleToColumnIndex,                                                                    // 14678\n\t\t_fnColumnIndexToVisible: _fnColumnIndexToVisible,                                                                    // 14679\n\t\t_fnVisbleColumns: _fnVisbleColumns,                                                                                  // 14680\n\t\t_fnGetColumns: _fnGetColumns,                                                                                        // 14681\n\t\t_fnColumnTypes: _fnColumnTypes,                                                                                      // 14682\n\t\t_fnApplyColumnDefs: _fnApplyColumnDefs,                                                                              // 14683\n\t\t_fnHungarianMap: _fnHungarianMap,                                                                                    // 14684\n\t\t_fnCamelToHungarian: _fnCamelToHungarian,                                                                            // 14685\n\t\t_fnLanguageCompat: _fnLanguageCompat,                                                                                // 14686\n\t\t_fnBrowserDetect: _fnBrowserDetect,                                                                                  // 14687\n\t\t_fnAddData: _fnAddData,                                                                                              // 14688\n\t\t_fnAddTr: _fnAddTr,                                                                                                  // 14689\n\t\t_fnNodeToDataIndex: _fnNodeToDataIndex,                                                                              // 14690\n\t\t_fnNodeToColumnIndex: _fnNodeToColumnIndex,                                                                          // 14691\n\t\t_fnGetCellData: _fnGetCellData,                                                                                      // 14692\n\t\t_fnSetCellData: _fnSetCellData,                                                                                      // 14693\n\t\t_fnSplitObjNotation: _fnSplitObjNotation,                                                                            // 14694\n\t\t_fnGetObjectDataFn: _fnGetObjectDataFn,                                                                              // 14695\n\t\t_fnSetObjectDataFn: _fnSetObjectDataFn,                                                                              // 14696\n\t\t_fnGetDataMaster: _fnGetDataMaster,                                                                                  // 14697\n\t\t_fnClearTable: _fnClearTable,                                                                                        // 14698\n\t\t_fnDeleteIndex: _fnDeleteIndex,                                                                                      // 14699\n\t\t_fnInvalidate: _fnInvalidate,                                                                                        // 14700\n\t\t_fnGetRowElements: _fnGetRowElements,                                                                                // 14701\n\t\t_fnCreateTr: _fnCreateTr,                                                                                            // 14702\n\t\t_fnBuildHead: _fnBuildHead,                                                                                          // 14703\n\t\t_fnDrawHead: _fnDrawHead,                                                                                            // 14704\n\t\t_fnDraw: _fnDraw,                                                                                                    // 14705\n\t\t_fnReDraw: _fnReDraw,                                                                                                // 14706\n\t\t_fnAddOptionsHtml: _fnAddOptionsHtml,                                                                                // 14707\n\t\t_fnDetectHeader: _fnDetectHeader,                                                                                    // 14708\n\t\t_fnGetUniqueThs: _fnGetUniqueThs,                                                                                    // 14709\n\t\t_fnFeatureHtmlFilter: _fnFeatureHtmlFilter,                                                                          // 14710\n\t\t_fnFilterComplete: _fnFilterComplete,                                                                                // 14711\n\t\t_fnFilterCustom: _fnFilterCustom,                                                                                    // 14712\n\t\t_fnFilterColumn: _fnFilterColumn,                                                                                    // 14713\n\t\t_fnFilter: _fnFilter,                                                                                                // 14714\n\t\t_fnFilterCreateSearch: _fnFilterCreateSearch,                                                                        // 14715\n\t\t_fnEscapeRegex: _fnEscapeRegex,                                                                                      // 14716\n\t\t_fnFilterData: _fnFilterData,                                                                                        // 14717\n\t\t_fnFeatureHtmlInfo: _fnFeatureHtmlInfo,                                                                              // 14718\n\t\t_fnUpdateInfo: _fnUpdateInfo,                                                                                        // 14719\n\t\t_fnInfoMacros: _fnInfoMacros,                                                                                        // 14720\n\t\t_fnInitialise: _fnInitialise,                                                                                        // 14721\n\t\t_fnInitComplete: _fnInitComplete,                                                                                    // 14722\n\t\t_fnLengthChange: _fnLengthChange,                                                                                    // 14723\n\t\t_fnFeatureHtmlLength: _fnFeatureHtmlLength,                                                                          // 14724\n\t\t_fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,                                                                      // 14725\n\t\t_fnPageChange: _fnPageChange,                                                                                        // 14726\n\t\t_fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,                                                                  // 14727\n\t\t_fnProcessingDisplay: _fnProcessingDisplay,                                                                          // 14728\n\t\t_fnFeatureHtmlTable: _fnFeatureHtmlTable,                                                                            // 14729\n\t\t_fnScrollDraw: _fnScrollDraw,                                                                                        // 14730\n\t\t_fnApplyToChildren: _fnApplyToChildren,                                                                              // 14731\n\t\t_fnCalculateColumnWidths: _fnCalculateColumnWidths,                                                                  // 14732\n\t\t_fnThrottle: _fnThrottle,                                                                                            // 14733\n\t\t_fnConvertToWidth: _fnConvertToWidth,                                                                                // 14734\n\t\t_fnScrollingWidthAdjust: _fnScrollingWidthAdjust,                                                                    // 14735\n\t\t_fnGetWidestNode: _fnGetWidestNode,                                                                                  // 14736\n\t\t_fnGetMaxLenString: _fnGetMaxLenString,                                                                              // 14737\n\t\t_fnStringToCss: _fnStringToCss,                                                                                      // 14738\n\t\t_fnScrollBarWidth: _fnScrollBarWidth,                                                                                // 14739\n\t\t_fnSortFlatten: _fnSortFlatten,                                                                                      // 14740\n\t\t_fnSort: _fnSort,                                                                                                    // 14741\n\t\t_fnSortAria: _fnSortAria,                                                                                            // 14742\n\t\t_fnSortListener: _fnSortListener,                                                                                    // 14743\n\t\t_fnSortAttachListener: _fnSortAttachListener,                                                                        // 14744\n\t\t_fnSortingClasses: _fnSortingClasses,                                                                                // 14745\n\t\t_fnSortData: _fnSortData,                                                                                            // 14746\n\t\t_fnSaveState: _fnSaveState,                                                                                          // 14747\n\t\t_fnLoadState: _fnLoadState,                                                                                          // 14748\n\t\t_fnSettingsFromNode: _fnSettingsFromNode,                                                                            // 14749\n\t\t_fnLog: _fnLog,                                                                                                      // 14750\n\t\t_fnMap: _fnMap,                                                                                                      // 14751\n\t\t_fnBindAction: _fnBindAction,                                                                                        // 14752\n\t\t_fnCallbackReg: _fnCallbackReg,                                                                                      // 14753\n\t\t_fnCallbackFire: _fnCallbackFire,                                                                                    // 14754\n\t\t_fnLengthOverflow: _fnLengthOverflow,                                                                                // 14755\n\t\t_fnRenderer: _fnRenderer,                                                                                            // 14756\n\t\t_fnDataSource: _fnDataSource,                                                                                        // 14757\n\t\t_fnRowAttributes: _fnRowAttributes,                                                                                  // 14758\n\t\t_fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant                                          // 14759\n\t\t                                // in 1.10, so this dead-end function is                                             // 14760\n\t\t                                // added to prevent errors                                                           // 14761\n\t} );                                                                                                                  // 14762\n\t                                                                                                                      // 14763\n                                                                                                                       // 14764\n\t// jQuery access                                                                                                      // 14765\n\t$.fn.dataTable = DataTable;                                                                                           // 14766\n                                                                                                                       // 14767\n\t// Legacy aliases                                                                                                     // 14768\n\t$.fn.dataTableSettings = DataTable.settings;                                                                          // 14769\n\t$.fn.dataTableExt = DataTable.ext;                                                                                    // 14770\n                                                                                                                       // 14771\n\t// With a capital `D` we return a DataTables API instance rather than a                                               // 14772\n\t// jQuery object                                                                                                      // 14773\n\t$.fn.DataTable = function ( opts ) {                                                                                  // 14774\n\t\treturn $(this).dataTable( opts ).api();                                                                              // 14775\n\t};                                                                                                                    // 14776\n                                                                                                                       // 14777\n\t// All properties that are available to $.fn.dataTable should also be                                                 // 14778\n\t// available on $.fn.DataTable                                                                                        // 14779\n\t$.each( DataTable, function ( prop, val ) {                                                                           // 14780\n\t\t$.fn.DataTable[ prop ] = val;                                                                                        // 14781\n\t} );                                                                                                                  // 14782\n                                                                                                                       // 14783\n                                                                                                                       // 14784\n\t// Information about events fired by DataTables - for documentation.                                                  // 14785\n\t/**                                                                                                                   // 14786\n\t * Draw event, fired whenever the table is redrawn on the page, at the same                                           // 14787\n\t * point as fnDrawCallback. This may be useful for binding events or                                                  // 14788\n\t * performing calculations when the table is altered at all.                                                          // 14789\n\t *  @name DataTable#draw.dt                                                                                           // 14790\n\t *  @event                                                                                                            // 14791\n\t *  @param {event} e jQuery event object                                                                              // 14792\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}                                   // 14793\n\t */                                                                                                                   // 14794\n                                                                                                                       // 14795\n\t/**                                                                                                                   // 14796\n\t * Search event, fired when the searching applied to the table (using the                                             // 14797\n\t * built-in global search, or column filters) is altered.                                                             // 14798\n\t *  @name DataTable#search.dt                                                                                         // 14799\n\t *  @event                                                                                                            // 14800\n\t *  @param {event} e jQuery event object                                                                              // 14801\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}                                   // 14802\n\t */                                                                                                                   // 14803\n                                                                                                                       // 14804\n\t/**                                                                                                                   // 14805\n\t * Page change event, fired when the paging of the table is altered.                                                  // 14806\n\t *  @name DataTable#page.dt                                                                                           // 14807\n\t *  @event                                                                                                            // 14808\n\t *  @param {event} e jQuery event object                                                                              // 14809\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}                                   // 14810\n\t */                                                                                                                   // 14811\n                                                                                                                       // 14812\n\t/**                                                                                                                   // 14813\n\t * Order event, fired when the ordering applied to the table is altered.                                              // 14814\n\t *  @name DataTable#order.dt                                                                                          // 14815\n\t *  @event                                                                                                            // 14816\n\t *  @param {event} e jQuery event object                                                                              // 14817\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}                                   // 14818\n\t */                                                                                                                   // 14819\n                                                                                                                       // 14820\n\t/**                                                                                                                   // 14821\n\t * DataTables initialisation complete event, fired when the table is fully                                            // 14822\n\t * drawn, including Ajax data loaded, if Ajax data is required.                                                       // 14823\n\t *  @name DataTable#init.dt                                                                                           // 14824\n\t *  @event                                                                                                            // 14825\n\t *  @param {event} e jQuery event object                                                                              // 14826\n\t *  @param {object} oSettings DataTables settings object                                                              // 14827\n\t *  @param {object} json The JSON object request from the server - only                                               // 14828\n\t *    present if client-side Ajax sourced data is used</li></ol>                                                      // 14829\n\t */                                                                                                                   // 14830\n                                                                                                                       // 14831\n\t/**                                                                                                                   // 14832\n\t * State save event, fired when the table has changed state a new state save                                          // 14833\n\t * is required. This event allows modification of the state saving object                                             // 14834\n\t * prior to actually doing the save, including addition or other state                                                // 14835\n\t * properties (for plug-ins) or modification of a DataTables core property.                                           // 14836\n\t *  @name DataTable#stateSaveParams.dt                                                                                // 14837\n\t *  @event                                                                                                            // 14838\n\t *  @param {event} e jQuery event object                                                                              // 14839\n\t *  @param {object} oSettings DataTables settings object                                                              // 14840\n\t *  @param {object} json The state information to be saved                                                            // 14841\n\t */                                                                                                                   // 14842\n                                                                                                                       // 14843\n\t/**                                                                                                                   // 14844\n\t * State load event, fired when the table is loading state from the stored                                            // 14845\n\t * data, but prior to the settings object being modified by the saved state                                           // 14846\n\t * - allowing modification of the saved state is required or loading of                                               // 14847\n\t * state for a plug-in.                                                                                               // 14848\n\t *  @name DataTable#stateLoadParams.dt                                                                                // 14849\n\t *  @event                                                                                                            // 14850\n\t *  @param {event} e jQuery event object                                                                              // 14851\n\t *  @param {object} oSettings DataTables settings object                                                              // 14852\n\t *  @param {object} json The saved state information                                                                  // 14853\n\t */                                                                                                                   // 14854\n                                                                                                                       // 14855\n\t/**                                                                                                                   // 14856\n\t * State loaded event, fired when state has been loaded from stored data and                                          // 14857\n\t * the settings object has been modified by the loaded data.                                                          // 14858\n\t *  @name DataTable#stateLoaded.dt                                                                                    // 14859\n\t *  @event                                                                                                            // 14860\n\t *  @param {event} e jQuery event object                                                                              // 14861\n\t *  @param {object} oSettings DataTables settings object                                                              // 14862\n\t *  @param {object} json The saved state information                                                                  // 14863\n\t */                                                                                                                   // 14864\n                                                                                                                       // 14865\n\t/**                                                                                                                   // 14866\n\t * Processing event, fired when DataTables is doing some kind of processing                                           // 14867\n\t * (be it, order, searcg or anything else). It can be used to indicate to                                             // 14868\n\t * the end user that there is something happening, or that something has                                              // 14869\n\t * finished.                                                                                                          // 14870\n\t *  @name DataTable#processing.dt                                                                                     // 14871\n\t *  @event                                                                                                            // 14872\n\t *  @param {event} e jQuery event object                                                                              // 14873\n\t *  @param {object} oSettings DataTables settings object                                                              // 14874\n\t *  @param {boolean} bShow Flag for if DataTables is doing processing or not                                          // 14875\n\t */                                                                                                                   // 14876\n                                                                                                                       // 14877\n\t/**                                                                                                                   // 14878\n\t * Ajax (XHR) event, fired whenever an Ajax request is completed from a                                               // 14879\n\t * request to made to the server for new data. This event is called before                                            // 14880\n\t * DataTables processed the returned data, so it can also be used to pre-                                             // 14881\n\t * process the data returned from the server, if needed.                                                              // 14882\n\t *                                                                                                                    // 14883\n\t * Note that this trigger is called in `fnServerData`, if you override                                                // 14884\n\t * `fnServerData` and which to use this event, you need to trigger it in you                                          // 14885\n\t * success function.                                                                                                  // 14886\n\t *  @name DataTable#xhr.dt                                                                                            // 14887\n\t *  @event                                                                                                            // 14888\n\t *  @param {event} e jQuery event object                                                                              // 14889\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}                                   // 14890\n\t *  @param {object} json JSON returned from the server                                                                // 14891\n\t *                                                                                                                    // 14892\n\t *  @example                                                                                                          // 14893\n\t *     // Use a custom property returned from the server in another DOM element                                       // 14894\n\t *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {                                            // 14895\n\t *       $('#status').html( json.status );                                                                            // 14896\n\t *     } );                                                                                                           // 14897\n\t *                                                                                                                    // 14898\n\t *  @example                                                                                                          // 14899\n\t *     // Pre-process the data returned from the server                                                               // 14900\n\t *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {                                            // 14901\n\t *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {                                                      // 14902\n\t *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;                                              // 14903\n\t *       }                                                                                                            // 14904\n\t *       // Note no return - manipulate the data directly in the JSON object.                                         // 14905\n\t *     } );                                                                                                           // 14906\n\t */                                                                                                                   // 14907\n                                                                                                                       // 14908\n\t/**                                                                                                                   // 14909\n\t * Destroy event, fired when the DataTable is destroyed by calling fnDestroy                                          // 14910\n\t * or passing the bDestroy:true parameter in the initialisation object. This                                          // 14911\n\t * can be used to remove bound events, added DOM nodes, etc.                                                          // 14912\n\t *  @name DataTable#destroy.dt                                                                                        // 14913\n\t *  @event                                                                                                            // 14914\n\t *  @param {event} e jQuery event object                                                                              // 14915\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}                                   // 14916\n\t */                                                                                                                   // 14917\n                                                                                                                       // 14918\n\t/**                                                                                                                   // 14919\n\t * Page length change event, fired when number of records to show on each                                             // 14920\n\t * page (the length) is changed.                                                                                      // 14921\n\t *  @name DataTable#length.dt                                                                                         // 14922\n\t *  @event                                                                                                            // 14923\n\t *  @param {event} e jQuery event object                                                                              // 14924\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}                                   // 14925\n\t *  @param {integer} len New length                                                                                   // 14926\n\t */                                                                                                                   // 14927\n                                                                                                                       // 14928\n\t/**                                                                                                                   // 14929\n\t * Column sizing has changed.                                                                                         // 14930\n\t *  @name DataTable#column-sizing.dt                                                                                  // 14931\n\t *  @event                                                                                                            // 14932\n\t *  @param {event} e jQuery event object                                                                              // 14933\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}                                   // 14934\n\t */                                                                                                                   // 14935\n                                                                                                                       // 14936\n\t/**                                                                                                                   // 14937\n\t * Column visibility has changed.                                                                                     // 14938\n\t *  @name DataTable#column-visibility.dt                                                                              // 14939\n\t *  @event                                                                                                            // 14940\n\t *  @param {event} e jQuery event object                                                                              // 14941\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}                                   // 14942\n\t *  @param {int} column Column index                                                                                  // 14943\n\t *  @param {bool} vis `false` if column now hidden, or `true` if visible                                              // 14944\n\t */                                                                                                                   // 14945\n                                                                                                                       // 14946\n\treturn $.fn.dataTable;                                                                                                // 14947\n}));                                                                                                                   // 14948\n                                                                                                                       // 14949\n}(window, document));                                                                                                  // 14950\n                                                                                                                       // 14951\n                                                                                                                       // 14952\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_tabular/client/lib/dataTables.bootstrap.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*! DataTables Bootstrap integration                                                                                   // 1\n * ©2011-2014 SpryMedia Ltd - datatables.net/license                                                                   // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\n/**                                                                                                                    // 5\n * DataTables integration for Bootstrap 3. This requires Bootstrap 3 and                                               // 6\n * DataTables 1.10 or newer.                                                                                           // 7\n *                                                                                                                     // 8\n * This file sets the defaults and adds options to DataTables to style its                                             // 9\n * controls using Bootstrap. See http://datatables.net/manual/styling/bootstrap                                        // 10\n * for further information.                                                                                            // 11\n */                                                                                                                    // 12\n(function(window, document, undefined){                                                                                // 13\n                                                                                                                       // 14\nvar factory = function( $, DataTable ) {                                                                               // 15\n\"use strict\";                                                                                                          // 16\n                                                                                                                       // 17\n                                                                                                                       // 18\n/* Set the defaults for DataTables initialisation */                                                                   // 19\n$.extend( true, DataTable.defaults, {                                                                                  // 20\n\tdom:                                                                                                                  // 21\n\t\t\"<'row'<'col-xs-6'l><'col-xs-6'f>r>\" +                                                                               // 22\n\t\t\"<'row'<'col-xs-12't>>\" +                                                                                            // 23\n\t\t\"<'row'<'col-xs-6'i><'col-xs-6'p>>\",                                                                                 // 24\n\trenderer: 'bootstrap'                                                                                                 // 25\n} );                                                                                                                   // 26\n                                                                                                                       // 27\n                                                                                                                       // 28\n/* Default class modification */                                                                                       // 29\n$.extend( DataTable.ext.classes, {                                                                                     // 30\n\tsWrapper:      \"dataTables_wrapper form-inline dt-bootstrap\",                                                         // 31\n\tsFilterInput:  \"form-control input-sm\",                                                                               // 32\n\tsLengthSelect: \"form-control input-sm\"                                                                                // 33\n} );                                                                                                                   // 34\n                                                                                                                       // 35\n                                                                                                                       // 36\n/* Bootstrap paging button renderer */                                                                                 // 37\nDataTable.ext.renderer.pageButton.bootstrap = function ( settings, host, idx, buttons, page, pages ) {                 // 38\n\tvar api     = new DataTable.Api( settings );                                                                          // 39\n\tvar classes = settings.oClasses;                                                                                      // 40\n\tvar lang    = settings.oLanguage.oPaginate;                                                                           // 41\n\tvar btnDisplay, btnClass;                                                                                             // 42\n                                                                                                                       // 43\n\tvar attach = function( container, buttons ) {                                                                         // 44\n\t\tvar i, ien, node, button;                                                                                            // 45\n\t\tvar clickHandler = function ( e ) {                                                                                  // 46\n\t\t\te.preventDefault();                                                                                                 // 47\n\t\t\tif ( !$(e.currentTarget).hasClass('disabled') ) {                                                                   // 48\n\t\t\t\tapi.page( e.data.action ).draw( false );                                                                           // 49\n\t\t\t}                                                                                                                   // 50\n\t\t};                                                                                                                   // 51\n                                                                                                                       // 52\n\t\tfor ( i=0, ien=buttons.length ; i<ien ; i++ ) {                                                                      // 53\n\t\t\tbutton = buttons[i];                                                                                                // 54\n                                                                                                                       // 55\n\t\t\tif ( $.isArray( button ) ) {                                                                                        // 56\n\t\t\t\tattach( container, button );                                                                                       // 57\n\t\t\t}                                                                                                                   // 58\n\t\t\telse {                                                                                                              // 59\n\t\t\t\tbtnDisplay = '';                                                                                                   // 60\n\t\t\t\tbtnClass = '';                                                                                                     // 61\n                                                                                                                       // 62\n\t\t\t\tswitch ( button ) {                                                                                                // 63\n\t\t\t\t\tcase 'ellipsis':                                                                                                  // 64\n\t\t\t\t\t\tbtnDisplay = '&hellip;';                                                                                         // 65\n\t\t\t\t\t\tbtnClass = 'disabled';                                                                                           // 66\n\t\t\t\t\t\tbreak;                                                                                                           // 67\n                                                                                                                       // 68\n\t\t\t\t\tcase 'first':                                                                                                     // 69\n\t\t\t\t\t\tbtnDisplay = lang.sFirst;                                                                                        // 70\n\t\t\t\t\t\tbtnClass = button + (page > 0 ?                                                                                  // 71\n\t\t\t\t\t\t\t'' : ' disabled');                                                                                              // 72\n\t\t\t\t\t\tbreak;                                                                                                           // 73\n                                                                                                                       // 74\n\t\t\t\t\tcase 'previous':                                                                                                  // 75\n\t\t\t\t\t\tbtnDisplay = lang.sPrevious;                                                                                     // 76\n\t\t\t\t\t\tbtnClass = button + (page > 0 ?                                                                                  // 77\n\t\t\t\t\t\t\t'' : ' disabled');                                                                                              // 78\n\t\t\t\t\t\tbreak;                                                                                                           // 79\n                                                                                                                       // 80\n\t\t\t\t\tcase 'next':                                                                                                      // 81\n\t\t\t\t\t\tbtnDisplay = lang.sNext;                                                                                         // 82\n\t\t\t\t\t\tbtnClass = button + (page < pages-1 ?                                                                            // 83\n\t\t\t\t\t\t\t'' : ' disabled');                                                                                              // 84\n\t\t\t\t\t\tbreak;                                                                                                           // 85\n                                                                                                                       // 86\n\t\t\t\t\tcase 'last':                                                                                                      // 87\n\t\t\t\t\t\tbtnDisplay = lang.sLast;                                                                                         // 88\n\t\t\t\t\t\tbtnClass = button + (page < pages-1 ?                                                                            // 89\n\t\t\t\t\t\t\t'' : ' disabled');                                                                                              // 90\n\t\t\t\t\t\tbreak;                                                                                                           // 91\n                                                                                                                       // 92\n\t\t\t\t\tdefault:                                                                                                          // 93\n\t\t\t\t\t\tbtnDisplay = button + 1;                                                                                         // 94\n\t\t\t\t\t\tbtnClass = page === button ?                                                                                     // 95\n\t\t\t\t\t\t\t'active' : '';                                                                                                  // 96\n\t\t\t\t\t\tbreak;                                                                                                           // 97\n\t\t\t\t}                                                                                                                  // 98\n                                                                                                                       // 99\n\t\t\t\tif ( btnDisplay ) {                                                                                                // 100\n\t\t\t\t\tnode = $('<li>', {                                                                                                // 101\n\t\t\t\t\t\t\t'class': classes.sPageButton+' '+btnClass,                                                                      // 102\n\t\t\t\t\t\t\t'aria-controls': settings.sTableId,                                                                             // 103\n\t\t\t\t\t\t\t'tabindex': settings.iTabIndex,                                                                                 // 104\n\t\t\t\t\t\t\t'id': idx === 0 && typeof button === 'string' ?                                                                 // 105\n\t\t\t\t\t\t\t\tsettings.sTableId +'_'+ button :                                                                               // 106\n\t\t\t\t\t\t\t\tnull                                                                                                           // 107\n\t\t\t\t\t\t} )                                                                                                              // 108\n\t\t\t\t\t\t.append( $('<a>', {                                                                                              // 109\n\t\t\t\t\t\t\t\t'href': '#'                                                                                                    // 110\n\t\t\t\t\t\t\t} )                                                                                                             // 111\n\t\t\t\t\t\t\t.html( btnDisplay )                                                                                             // 112\n\t\t\t\t\t\t)                                                                                                                // 113\n\t\t\t\t\t\t.appendTo( container );                                                                                          // 114\n                                                                                                                       // 115\n\t\t\t\t\tsettings.oApi._fnBindAction(                                                                                      // 116\n\t\t\t\t\t\tnode, {action: button}, clickHandler                                                                             // 117\n\t\t\t\t\t);                                                                                                                // 118\n\t\t\t\t}                                                                                                                  // 119\n\t\t\t}                                                                                                                   // 120\n\t\t}                                                                                                                    // 121\n\t};                                                                                                                    // 122\n                                                                                                                       // 123\n\tattach(                                                                                                               // 124\n\t\t$(host).empty().html('<ul class=\"pagination\"/>').children('ul'),                                                     // 125\n\t\tbuttons                                                                                                              // 126\n\t);                                                                                                                    // 127\n};                                                                                                                     // 128\n                                                                                                                       // 129\n                                                                                                                       // 130\n/*                                                                                                                     // 131\n * TableTools Bootstrap compatibility                                                                                  // 132\n * Required TableTools 2.1+                                                                                            // 133\n */                                                                                                                    // 134\nif ( DataTable.TableTools ) {                                                                                          // 135\n\t// Set the classes that TableTools uses to something suitable for Bootstrap                                           // 136\n\t$.extend( true, DataTable.TableTools.classes, {                                                                       // 137\n\t\t\"container\": \"DTTT btn-group\",                                                                                       // 138\n\t\t\"buttons\": {                                                                                                         // 139\n\t\t\t\"normal\": \"btn btn-default\",                                                                                        // 140\n\t\t\t\"disabled\": \"disabled\"                                                                                              // 141\n\t\t},                                                                                                                   // 142\n\t\t\"collection\": {                                                                                                      // 143\n\t\t\t\"container\": \"DTTT_dropdown dropdown-menu\",                                                                         // 144\n\t\t\t\"buttons\": {                                                                                                        // 145\n\t\t\t\t\"normal\": \"\",                                                                                                      // 146\n\t\t\t\t\"disabled\": \"disabled\"                                                                                             // 147\n\t\t\t}                                                                                                                   // 148\n\t\t},                                                                                                                   // 149\n\t\t\"print\": {                                                                                                           // 150\n\t\t\t\"info\": \"DTTT_print_info\"                                                                                           // 151\n\t\t},                                                                                                                   // 152\n\t\t\"select\": {                                                                                                          // 153\n\t\t\t\"row\": \"active\"                                                                                                     // 154\n\t\t}                                                                                                                    // 155\n\t} );                                                                                                                  // 156\n                                                                                                                       // 157\n\t// Have the collection use a bootstrap compatible drop down                                                           // 158\n\t$.extend( true, DataTable.TableTools.DEFAULTS.oTags, {                                                                // 159\n\t\t\"collection\": {                                                                                                      // 160\n\t\t\t\"container\": \"ul\",                                                                                                  // 161\n\t\t\t\"button\": \"li\",                                                                                                     // 162\n\t\t\t\"liner\": \"a\"                                                                                                        // 163\n\t\t}                                                                                                                    // 164\n\t} );                                                                                                                  // 165\n}                                                                                                                      // 166\n                                                                                                                       // 167\n}; // /factory                                                                                                         // 168\n                                                                                                                       // 169\n                                                                                                                       // 170\n// Define as an AMD module if possible                                                                                 // 171\nif ( typeof define === 'function' && define.amd ) {                                                                    // 172\n\tdefine( ['jquery', 'datatables'], factory );                                                                          // 173\n}                                                                                                                      // 174\nelse if ( typeof exports === 'object' ) {                                                                              // 175\n    // Node/CommonJS                                                                                                   // 176\n    factory( require('jquery'), require('datatables') );                                                               // 177\n}                                                                                                                      // 178\nelse if ( jQuery ) {                                                                                                   // 179\n\t// Otherwise simply initialise as normal, stopping multiple evaluation                                                // 180\n\tfactory( jQuery, jQuery.fn.dataTable );                                                                               // 181\n}                                                                                                                      // 182\n                                                                                                                       // 183\n                                                                                                                       // 184\n})(window, document);                                                                                                  // 185\n                                                                                                                       // 186\n                                                                                                                       // 187\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_tabular/client/template.tabular.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"tabular\");                                                                                       // 2\nTemplate[\"tabular\"] = new Template(\"Template.tabular\", (function() {                                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(\"\\n    \\n    \", HTML.TABLE(HTML.Attrs(function() {                                                   // 5\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 6\n  })), \"\\n  \");                                                                                                        // 7\n}));                                                                                                                   // 8\n                                                                                                                       // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_tabular/client/util.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global Util:true, _ */                                                                                              // 1\n                                                                                                                       // 2\nUtil = {};                                                                                                             // 3\n                                                                                                                       // 4\nUtil.cleanFieldName = function cleanFieldName(field) {                                                                 // 5\n  // for field names with a dot, we just need                                                                          // 6\n  // the top level field name                                                                                          // 7\n  var dot = field.indexOf(\".\");                                                                                        // 8\n  if (dot !== -1) {                                                                                                    // 9\n    field = field.slice(0, dot);                                                                                       // 10\n  }                                                                                                                    // 11\n                                                                                                                       // 12\n  // If it's referencing an array, strip off the brackets                                                              // 13\n  field = field.split('[')[0];                                                                                         // 14\n                                                                                                                       // 15\n  return field;                                                                                                        // 16\n};                                                                                                                     // 17\n                                                                                                                       // 18\nUtil.cleanFieldNameForSearch = function cleanFieldNameForSearch(field) {                                               // 19\n  // If it's referencing an array, replace the brackets                                                                // 20\n  // This will only work with an object which doesn't have [\"foo\"]                                                     // 21\n  return field.replace(/\\[\\w+\\]/, \"\");                                                                                 // 22\n};                                                                                                                     // 23\n                                                                                                                       // 24\nUtil.sortsAreEqual = function sortsAreEqual(oldVal, newVal) {                                                          // 25\n  if (oldVal === newVal) {                                                                                             // 26\n    return true;                                                                                                       // 27\n  }                                                                                                                    // 28\n  var areSame = false;                                                                                                 // 29\n  if (_.isArray(oldVal) && _.isArray(newVal) && oldVal.length === newVal.length) {                                     // 30\n    areSame = _.every(newVal, function (innerArray, i) {                                                               // 31\n      return innerArray[0] === oldVal[i][0] &&                                                                         // 32\n        innerArray[1] === oldVal[i][1];                                                                                // 33\n    });                                                                                                                // 34\n  }                                                                                                                    // 35\n  return areSame;                                                                                                      // 36\n};                                                                                                                     // 37\n                                                                                                                       // 38\nUtil.objectsAreEqual = function objectsAreEqual(oldVal, newVal) {                                                      // 39\n  if (oldVal === newVal) {                                                                                             // 40\n    return true;                                                                                                       // 41\n  }                                                                                                                    // 42\n  return JSON.stringify(oldVal) === JSON.stringify(newVal);                                                            // 43\n};                                                                                                                     // 44\n                                                                                                                       // 45\n// Take the DataTables `order` format and column info                                                                  // 46\n// and convert it into a mongo sort array.                                                                             // 47\nUtil.getMongoSort = function getMongoSort(order, columns) {                                                            // 48\n  if (!order || !columns) {                                                                                            // 49\n    return;                                                                                                            // 50\n  }                                                                                                                    // 51\n                                                                                                                       // 52\n  // TODO support the nested arrays format for sort                                                                    // 53\n  // and ignore instance functions like \"foo()\"                                                                        // 54\n  var sort = [];                                                                                                       // 55\n  _.each(order, function (ord) {                                                                                       // 56\n    var propName = columns[ord.column].data;                                                                           // 57\n    var orderable = columns[ord.column].orderable;                                                                     // 58\n    if (typeof propName === 'string' && orderable !== false) {                                                         // 59\n      sort.push([propName, ord.dir]);                                                                                  // 60\n    }                                                                                                                  // 61\n  });                                                                                                                  // 62\n  return sort;                                                                                                         // 63\n};                                                                                                                     // 64\n                                                                                                                       // 65\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_tabular/client/tableRecords.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global Tabular, Mongo */                                                                                            // 1\n                                                                                                                       // 2\n// We are creating a named client Collection that we will only modify from server                                      // 3\nTabular.tableRecords = new Mongo.Collection('tabular_records');                                                        // 4\n                                                                                                                       // 5\nTabular.getRecord = function(name) {                                                                                   // 6\n  return Tabular.tableRecords.findOne(name);                                                                           // 7\n};                                                                                                                     // 8\n                                                                                                                       // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_tabular/client/tableInit.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global tableInit:true, _, Blaze, Util */                                                                            // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * Uses the Tabular.Table instance to get the columns, fields, and searchFields                                        // 4\n * @param {Tabular.Table} tabularTable The Tabular.Table instance                                                      // 5\n * @param {Template}      template     The Template instance                                                           // 6\n */                                                                                                                    // 7\ntableInit = function tableInit(tabularTable, template) {                                                               // 8\n  var columns = _.clone(tabularTable.options.columns);                                                                 // 9\n  var fields = {}, searchFields = [];                                                                                  // 10\n                                                                                                                       // 11\n  // Loop through the provided columns object                                                                          // 12\n  _.each(columns, function (col) {                                                                                     // 13\n    // The `tmpl` column option is special for this                                                                    // 14\n    // package. We parse it into other column options                                                                  // 15\n    // and then remove it.                                                                                             // 16\n    var tmpl = col.tmpl;                                                                                               // 17\n    if (tmpl) {                                                                                                        // 18\n      // Cell should be initially blank                                                                                // 19\n      col.defaultContent = \"\";                                                                                         // 20\n                                                                                                                       // 21\n      // If there's also data attached, then we can still                                                              // 22\n      // sort on this column. If not, then we shouldn't try.                                                           // 23\n      if (!(\"data\" in col)) {                                                                                          // 24\n        col.orderable = false;                                                                                         // 25\n      }                                                                                                                // 26\n                                                                                                                       // 27\n      // When the cell is created, render it's content from                                                            // 28\n      // the provided template with row data.                                                                          // 29\n      col.createdCell = function (cell, cellData, rowData) {                                                           // 30\n        // Allow the table to adjust the template context if desired                                                   // 31\n        if (typeof col.tmplContext === 'function') {                                                                   // 32\n          rowData = col.tmplContext(rowData);                                                                          // 33\n        }                                                                                                              // 34\n                                                                                                                       // 35\n        Blaze.renderWithData(tmpl, rowData, cell);                                                                     // 36\n      };                                                                                                               // 37\n                                                                                                                       // 38\n      // Then delete the `tmpl` property since DataTables                                                              // 39\n      // doesn't need it.                                                                                              // 40\n      delete col.tmpl;                                                                                                 // 41\n    }                                                                                                                  // 42\n                                                                                                                       // 43\n    // Automatically protect against errors from null and undefined                                                    // 44\n    // values                                                                                                          // 45\n    if (!(\"defaultContent\" in col)) {                                                                                  // 46\n      col.defaultContent = \"\";                                                                                         // 47\n    }                                                                                                                  // 48\n                                                                                                                       // 49\n    // Build the list of field names we want included                                                                  // 50\n    var dataProp = col.data;                                                                                           // 51\n    if (typeof dataProp === \"string\") {                                                                                // 52\n      // If it's referencing an instance function, don't                                                               // 53\n      // include it. Prevent sorting and searching because                                                             // 54\n      // our pub function won't be able to do it.                                                                      // 55\n      if (dataProp.indexOf(\"()\") !== -1) {                                                                             // 56\n        col.orderable = false;                                                                                         // 57\n        col.searchable = false;                                                                                        // 58\n        return;                                                                                                        // 59\n      }                                                                                                                // 60\n                                                                                                                       // 61\n      fields[Util.cleanFieldName(dataProp)] = 1;                                                                       // 62\n                                                                                                                       // 63\n      // DataTables says default value for col.searchable is `true`,                                                   // 64\n      // so we will search on all columns that haven't been set to                                                     // 65\n      // `false`.                                                                                                      // 66\n      if (col.searchable !== false) {                                                                                  // 67\n        searchFields.push(Util.cleanFieldNameForSearch(dataProp));                                                     // 68\n      }                                                                                                                // 69\n    }                                                                                                                  // 70\n                                                                                                                       // 71\n    // If we're displaying a template for this field,                                                                  // 72\n    // and we've also provided data, we want to                                                                        // 73\n    // pass the data prop along to DataTables                                                                          // 74\n    // to enable sorting and filtering.                                                                                // 75\n    // However, DataTables will then add that data to                                                                  // 76\n    // the displayed cell, which we don't want since                                                                   // 77\n    // we're rendering a template there with Blaze.                                                                    // 78\n    // We can prevent this issue by having the \"render\"                                                                // 79\n    // function return an empty string for display content.                                                            // 80\n    if (tmpl && \"data\" in col && !(\"render\" in col)) {                                                                 // 81\n      col.render = function (data, type) {                                                                             // 82\n        if (type === 'display') {                                                                                      // 83\n          return '';                                                                                                   // 84\n        }                                                                                                              // 85\n        return data;                                                                                                   // 86\n      };                                                                                                               // 87\n    }                                                                                                                  // 88\n  });                                                                                                                  // 89\n                                                                                                                       // 90\n  template.tabular.columns = columns;                                                                                  // 91\n  template.tabular.fields = fields;                                                                                    // 92\n  template.tabular.searchFields = searchFields;                                                                        // 93\n};                                                                                                                     // 94\n                                                                                                                       // 95\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_tabular/client/pubSelector.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global getPubSelector:true, _ */                                                                                    // 1\n                                                                                                                       // 2\ngetPubSelector = function getPubSelector(selector, searchString, searchFields, searchCaseInsensitive, columns) {       // 3\n                                                                                                                       // 4\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                         // 5\n  // if search was invoked via .columns().search(), build a query off that                                             // 6\n  // https://datatables.net/reference/api/columns().search()                                                           // 7\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                         // 8\n  var searchColumns = _.filter(columns, function(column) {                                                             // 9\n    return column.search && column.search.value !== '';                                                                // 10\n  });                                                                                                                  // 11\n                                                                                                                       // 12\n  // required args                                                                                                     // 13\n  if ((!searchString && searchColumns.length === 0) || !searchFields || searchFields.length === 0) {                   // 14\n    return selector;                                                                                                   // 15\n  }                                                                                                                    // 16\n                                                                                                                       // 17\n  // See if we can resolve the search string to a number,                                                              // 18\n  // in which case we use an extra query because $regex                                                                // 19\n  // matches string fields only.                                                                                       // 20\n  var searches = [];                                                                                                   // 21\n                                                                                                                       // 22\n  // normalize search fields array to mirror the structure                                                             // 23\n  // as passed by the datatables ajax.data function                                                                    // 24\n  searchFields = _.map(searchFields, function(field) {                                                                 // 25\n    return {                                                                                                           // 26\n      data: field,                                                                                                     // 27\n      search: {                                                                                                        // 28\n        value: searchString                                                                                            // 29\n      }                                                                                                                // 30\n    };                                                                                                                 // 31\n  });                                                                                                                  // 32\n                                                                                                                       // 33\n  var searchTerms = _.isEmpty(searchColumns) ? searchFields : searchColumns;                                           // 34\n                                                                                                                       // 35\n  _.each(searchTerms, function(field) {                                                                                // 36\n    var searchValue = field.search.value || '';                                                                        // 37\n                                                                                                                       // 38\n    // Split and OR by whitespace, as per default DataTables search behavior                                           // 39\n    searchValue = searchValue.match(/\\S+/g);                                                                           // 40\n                                                                                                                       // 41\n    _.each(searchValue, function (searchTerm) {                                                                        // 42\n      var m1 = {}, m2 = {};                                                                                            // 43\n                                                                                                                       // 44\n      // String search                                                                                                 // 45\n      m1[field.data] = { $regex: searchTerm };                                                                         // 46\n                                                                                                                       // 47\n      // DataTables searches are case insensitive by default                                                           // 48\n      if (searchCaseInsensitive !== false) {                                                                           // 49\n        m1[field.data].$options = \"i\";                                                                                 // 50\n      }                                                                                                                // 51\n                                                                                                                       // 52\n      searches.push(m1);                                                                                               // 53\n                                                                                                                       // 54\n      // Number search                                                                                                 // 55\n      var numSearchString = Number(searchTerm);                                                                        // 56\n      if (!isNaN(numSearchString)) {                                                                                   // 57\n        m2[field.data] = numSearchString;                                                                              // 58\n        searches.push(m2);                                                                                             // 59\n      }                                                                                                                // 60\n    });                                                                                                                // 61\n  });                                                                                                                  // 62\n                                                                                                                       // 63\n  var result;                                                                                                          // 64\n  if (selector) {                                                                                                      // 65\n    result = {$and: [selector, {$or: searches}]};                                                                      // 66\n  } else {                                                                                                             // 67\n    result = {$or: searches};                                                                                          // 68\n  }                                                                                                                    // 69\n                                                                                                                       // 70\n  return result;                                                                                                       // 71\n};                                                                                                                     // 72\n                                                                                                                       // 73\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_tabular/client/tabular.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global _, Template, Tabular, Tracker, ReactiveVar, Session, Meteor, tableInit, getPubSelector, Util */              // 1\n                                                                                                                       // 2\nTemplate.tabular.helpers({                                                                                             // 3\n  atts: function () {                                                                                                  // 4\n    // We remove the \"table\" and \"selector\" attributes and assume the rest belong                                      // 5\n    // on the <table> element                                                                                          // 6\n    return _.omit(this, \"table\", \"selector\");                                                                          // 7\n  }                                                                                                                    // 8\n});                                                                                                                    // 9\n                                                                                                                       // 10\nvar tabularOnRendered = function () {                                                                                  // 11\n  var template = this,                                                                                                 // 12\n      table, resetTablePaging = false,                                                                                 // 13\n      $tableElement = template.$('table');                                                                             // 14\n                                                                                                                       // 15\n  template.tabular = {};                                                                                               // 16\n  template.tabular.data = [];                                                                                          // 17\n  template.tabular.pubSelector = new ReactiveVar({}, Util.objectsAreEqual);                                            // 18\n  template.tabular.skip = new ReactiveVar(0);                                                                          // 19\n  template.tabular.limit = new ReactiveVar(10);                                                                        // 20\n  template.tabular.sort = new ReactiveVar(null, Util.sortsAreEqual);                                                   // 21\n  template.tabular.columns = null;                                                                                     // 22\n  template.tabular.fields = null;                                                                                      // 23\n  template.tabular.searchFields = null;                                                                                // 24\n  template.tabular.searchCaseInsensitive = true;                                                                       // 25\n  template.tabular.tableName = new ReactiveVar(null);                                                                  // 26\n  template.tabular.options = new ReactiveVar({}, Util.objectsAreEqual);                                                // 27\n  template.tabular.docPub = new ReactiveVar(null);                                                                     // 28\n  template.tabular.collection = new ReactiveVar(null);                                                                 // 29\n  template.tabular.ready = new ReactiveVar(false);                                                                     // 30\n  template.tabular.recordsTotal = 0;                                                                                   // 31\n  template.tabular.recordsFiltered = 0;                                                                                // 32\n  template.tabular.isLoading = new ReactiveVar(true);                                                                  // 33\n                                                                                                                       // 34\n  // These are some DataTables options that we need for everything to work.                                            // 35\n  // We add them to the options specified by the user.                                                                 // 36\n  var ajaxOptions = {                                                                                                  // 37\n    // tell DataTables that we're getting the table data from a server                                                 // 38\n    serverSide: true,                                                                                                  // 39\n    // define the function that DataTables will call upon first load and whenever                                      // 40\n    // we tell it to reload data, such as when paging, etc.                                                            // 41\n    ajax: function (data, callback/*, settings*/) {                                                                    // 42\n      // When DataTables requests data, first we set                                                                   // 43\n      // the new skip, limit, order, and pubSelector values                                                            // 44\n      // that DataTables has requested. These trigger                                                                  // 45\n      // the first subscription, which will then trigger the                                                           // 46\n      // second subscription.                                                                                          // 47\n                                                                                                                       // 48\n      template.tabular.isLoading.set(true);                                                                            // 49\n      //console.log('data', template.tabular.data);                                                                    // 50\n                                                                                                                       // 51\n      // Update skip                                                                                                   // 52\n      template.tabular.skip.set(data.start);                                                                           // 53\n      Session.set('Tabular.LastSkip', data.start);                                                                     // 54\n                                                                                                                       // 55\n      // Update limit                                                                                                  // 56\n      var options = template.tabular.options.get();                                                                    // 57\n      var hardLimit = options && options.limit;                                                                        // 58\n      if (data.length === -1) {                                                                                        // 59\n        if (hardLimit === undefined) {                                                                                 // 60\n          console.warn('When using no paging or an \"All\" option with tabular, it is best to also add a hard limit in your table options like {limit: 500}');\n          template.tabular.limit.set(null);                                                                            // 62\n        } else {                                                                                                       // 63\n          template.tabular.limit.set(hardLimit);                                                                       // 64\n        }                                                                                                              // 65\n      } else {                                                                                                         // 66\n        template.tabular.limit.set(data.length);                                                                       // 67\n      }                                                                                                                // 68\n                                                                                                                       // 69\n      // Update sort                                                                                                   // 70\n      template.tabular.sort.set(Util.getMongoSort(data.order, template.tabular.columns));                              // 71\n      // Update pubSelector                                                                                            // 72\n      var pubSelector = getPubSelector(                                                                                // 73\n        template.tabular.selector,                                                                                     // 74\n        (data.search && data.search.value) || null,                                                                    // 75\n        template.tabular.searchFields,                                                                                 // 76\n        template.tabular.searchCaseInsensitive,                                                                        // 77\n        data.columns || null                                                                                           // 78\n      );                                                                                                               // 79\n      template.tabular.pubSelector.set(pubSelector);                                                                   // 80\n                                                                                                                       // 81\n      // We're ready to subscribe to the data.                                                                         // 82\n      // Matters on the first run only.                                                                                // 83\n      template.tabular.ready.set(true);                                                                                // 84\n                                                                                                                       // 85\n      //console.log('ajax');                                                                                           // 86\n                                                                                                                       // 87\n      callback({                                                                                                       // 88\n        draw: data.draw,                                                                                               // 89\n        recordsTotal: template.tabular.recordsTotal,                                                                   // 90\n        recordsFiltered: template.tabular.recordsFiltered,                                                             // 91\n        data: template.tabular.data                                                                                    // 92\n      });                                                                                                              // 93\n                                                                                                                       // 94\n    }                                                                                                                  // 95\n  };                                                                                                                   // 96\n                                                                                                                       // 97\n  // For testing                                                                                                       // 98\n  //setUpTestingAutoRunLogging(template);                                                                              // 99\n                                                                                                                       // 100\n  // Reactively determine table columns, fields, and searchFields.                                                     // 101\n  // This will rerun whenever the current template data changes.                                                       // 102\n  var lastTableName;                                                                                                   // 103\n  template.autorun(function () {                                                                                       // 104\n    var data = Template.currentData();                                                                                 // 105\n                                                                                                                       // 106\n    //console.log('currentData autorun', data);                                                                        // 107\n                                                                                                                       // 108\n    if (!data) {return;}                                                                                               // 109\n                                                                                                                       // 110\n    // We get the current TabularTable instance, and cache it on the                                                   // 111\n    // template instance for access elsewhere                                                                          // 112\n    var tabularTable = template.tabular.tableDef = data.table;                                                         // 113\n                                                                                                                       // 114\n    if (!(tabularTable instanceof Tabular.Table)) {                                                                    // 115\n      throw new Error(\"You must pass Tabular.Table instance as the table attribute\");                                  // 116\n    }                                                                                                                  // 117\n                                                                                                                       // 118\n    // Always update the selector reactively                                                                           // 119\n    template.tabular.selector = data.selector;                                                                         // 120\n                                                                                                                       // 121\n    // The remaining stuff relates to changing the `table`                                                             // 122\n    // attribute. If we didn't change it, we can stop here,                                                            // 123\n    // but we need to reload the table if this is not the first                                                        // 124\n    // run                                                                                                             // 125\n    if (tabularTable.name === lastTableName) {                                                                         // 126\n      if (table) {                                                                                                     // 127\n        // passing `false` as the second arg tells it to                                                               // 128\n        // reset the paging                                                                                            // 129\n        table.ajax.reload(null, true);                                                                                 // 130\n      }                                                                                                                // 131\n      return;                                                                                                          // 132\n    }                                                                                                                  // 133\n                                                                                                                       // 134\n    // If we reactively changed the `table` attribute, run                                                             // 135\n    // onUnload for the previous table                                                                                 // 136\n    if (lastTableName !== undefined) {                                                                                 // 137\n      var lastTableDef = Tabular.tablesByName[lastTableName];                                                          // 138\n      if (lastTableDef && typeof lastTableDef.onUnload === 'function') {                                               // 139\n        lastTableDef.onUnload();                                                                                       // 140\n      }                                                                                                                // 141\n    }                                                                                                                  // 142\n                                                                                                                       // 143\n    // Cache this table name as the last table name for next run                                                       // 144\n    lastTableName = tabularTable.name;                                                                                 // 145\n                                                                                                                       // 146\n    // Figure out and update the columns, fields, and searchFields                                                     // 147\n    tableInit(tabularTable, template);                                                                                 // 148\n                                                                                                                       // 149\n    // Set/update everything else                                                                                      // 150\n    template.tabular.searchCaseInsensitive = (tabularTable.options && tabularTable.options.search && tabularTable.options.search.caseInsensitive) || true;\n    template.tabular.options.set(tabularTable.options);                                                                // 152\n    template.tabular.tableName.set(tabularTable.name);                                                                 // 153\n    template.tabular.docPub.set(tabularTable.pub);                                                                     // 154\n    template.tabular.collection.set(tabularTable.collection);                                                          // 155\n                                                                                                                       // 156\n    // userOptions rerun should do this?                                                                               // 157\n    if (table) {                                                                                                       // 158\n      // passing `true` as the second arg tells it to                                                                  // 159\n      // reset the paging                                                                                              // 160\n      table.ajax.reload(null, true);                                                                                   // 161\n    }                                                                                                                  // 162\n  });                                                                                                                  // 163\n                                                                                                                       // 164\n  // First Subscription                                                                                                // 165\n  // Subscribe to an array of _ids that should be on the                                                               // 166\n  // current page of the table, plus some aggregate                                                                    // 167\n  // numbers that DataTables needs in order to show the paging.                                                        // 168\n  // The server will reactively keep this info accurate.                                                               // 169\n  // It's not necessary to call stop                                                                                   // 170\n  // on subscriptions that are within autorun computations.                                                            // 171\n  template.autorun(function () {                                                                                       // 172\n    if (!template.tabular.ready.get()) {                                                                               // 173\n      return;                                                                                                          // 174\n    }                                                                                                                  // 175\n                                                                                                                       // 176\n    //console.log('tabular_getInfo autorun');                                                                          // 177\n                                                                                                                       // 178\n    Meteor.subscribe(                                                                                                  // 179\n      \"tabular_getInfo\",                                                                                               // 180\n      template.tabular.tableName.get(),                                                                                // 181\n      template.tabular.pubSelector.get(),                                                                              // 182\n      template.tabular.sort.get(),                                                                                     // 183\n      template.tabular.skip.get(),                                                                                     // 184\n      template.tabular.limit.get()                                                                                     // 185\n    );                                                                                                                 // 186\n  });                                                                                                                  // 187\n                                                                                                                       // 188\n  // Second Subscription                                                                                               // 189\n  // Reactively subscribe to the documents with _ids given to us. Limit the                                            // 190\n  // fields to only those we need to display. It's not necessary to call stop                                          // 191\n  // on subscriptions that are within autorun computations.                                                            // 192\n  template.autorun(function () {                                                                                       // 193\n    // tableInfo is reactive and causes a rerun whenever the                                                           // 194\n    // list of docs that should currently be in the table changes.                                                     // 195\n    // It does not cause reruns based on the documents themselves                                                      // 196\n    // changing.                                                                                                       // 197\n    var tableName = template.tabular.tableName.get();                                                                  // 198\n    var tableInfo = Tabular.getRecord(tableName) || {};                                                                // 199\n                                                                                                                       // 200\n    //console.log('tableName and tableInfo autorun', tableName, tableInfo);                                            // 201\n                                                                                                                       // 202\n    template.tabular.recordsTotal = tableInfo.recordsTotal || 0;                                                       // 203\n    template.tabular.recordsFiltered = tableInfo.recordsFiltered || 0;                                                 // 204\n                                                                                                                       // 205\n    // In some cases, there is no point in subscribing to nothing                                                      // 206\n    if (_.isEmpty(tableInfo) ||                                                                                        // 207\n        template.tabular.recordsTotal === 0 ||                                                                         // 208\n        template.tabular.recordsFiltered === 0) {                                                                      // 209\n      return;                                                                                                          // 210\n    }                                                                                                                  // 211\n                                                                                                                       // 212\n    template.tabular.tableDef.sub.subscribe(                                                                           // 213\n      template.tabular.docPub.get(),                                                                                   // 214\n      tableName,                                                                                                       // 215\n      tableInfo.ids || [],                                                                                             // 216\n      template.tabular.fields                                                                                          // 217\n    );                                                                                                                 // 218\n  });                                                                                                                  // 219\n                                                                                                                       // 220\n  // Build the table. We rerun this only when the table                                                                // 221\n  // options specified by the user changes, which should be                                                            // 222\n  // only when the `table` attribute changes reactively.                                                               // 223\n  template.autorun(function (c) {                                                                                      // 224\n    var userOptions = template.tabular.options.get();                                                                  // 225\n    var options = _.extend({}, ajaxOptions, userOptions);                                                              // 226\n                                                                                                                       // 227\n    //console.log('userOptions autorun', options);                                                                     // 228\n                                                                                                                       // 229\n    // unless the user provides her own displayStart,                                                                  // 230\n    // we use a value from Session. This keeps the                                                                     // 231\n    // same page selected after a hot code push.                                                                       // 232\n    if (c.firstRun && !('displayStart' in options)) {                                                                  // 233\n      options.displayStart = Tracker.nonreactive(function () {                                                         // 234\n        return Session.get('Tabular.LastSkip');                                                                        // 235\n      });                                                                                                              // 236\n    }                                                                                                                  // 237\n                                                                                                                       // 238\n    if (!('order' in options)) {                                                                                       // 239\n      options.order = [];                                                                                              // 240\n    }                                                                                                                  // 241\n                                                                                                                       // 242\n    // After the first time, we need to destroy before rebuilding.                                                     // 243\n    if (table) {                                                                                                       // 244\n      var dt = $tableElement.DataTable();                                                                              // 245\n      if (dt) {                                                                                                        // 246\n        dt.destroy();                                                                                                  // 247\n        $tableElement.empty();                                                                                         // 248\n      }                                                                                                                // 249\n    }                                                                                                                  // 250\n                                                                                                                       // 251\n    // We start with an empty table.                                                                                   // 252\n    // Data will be populated by ajax function now.                                                                    // 253\n    table = $tableElement.DataTable(options);                                                                          // 254\n  });                                                                                                                  // 255\n                                                                                                                       // 256\n  template.autorun(function () {                                                                                       // 257\n    // Get table name non-reactively                                                                                   // 258\n    var tableName = Tracker.nonreactive(function () {                                                                  // 259\n      return template.tabular.tableName.get();                                                                         // 260\n    });                                                                                                                // 261\n    // Get the collection that we're showing in the table non-reactively                                               // 262\n    var collection = Tracker.nonreactive(function () {                                                                 // 263\n      return template.tabular.collection.get();                                                                        // 264\n    });                                                                                                                // 265\n                                                                                                                       // 266\n    // React when the requested list of records changes.                                                               // 267\n    // This can happen for various reasons.                                                                            // 268\n    // * DataTables reran ajax due to sort changing.                                                                   // 269\n    // * DataTables reran ajax due to page changing.                                                                   // 270\n    // * DataTables reran ajax due to results-per-page changing.                                                       // 271\n    // * DataTables reran ajax due to search terms changing.                                                           // 272\n    // * `selector` attribute changed reactively                                                                       // 273\n    // * Docs were added/changed/removed by this user or                                                               // 274\n    //   another user, causing visible result set to change.                                                           // 275\n    var tableInfo = Tabular.getRecord(tableName);                                                                      // 276\n                                                                                                                       // 277\n    if (!collection || !tableInfo) {                                                                                   // 278\n      return;                                                                                                          // 279\n    }                                                                                                                  // 280\n                                                                                                                       // 281\n    // Build options object to pass to `find`.                                                                         // 282\n    // It's important that we use the same options                                                                     // 283\n    // that were used in generating the list of `_id`s                                                                 // 284\n    // on the server.                                                                                                  // 285\n    var findOptions = {};                                                                                              // 286\n    var fields = template.tabular.fields;                                                                              // 287\n    if (fields) {                                                                                                      // 288\n      // Extend with extraFields from table definition                                                                 // 289\n      if (typeof template.tabular.tableDef.extraFields === 'object') {                                                 // 290\n        _.extend(fields, template.tabular.tableDef.extraFields);                                                       // 291\n      }                                                                                                                // 292\n      findOptions.fields = fields;                                                                                     // 293\n    }                                                                                                                  // 294\n                                                                                                                       // 295\n    // Sort does not need to be reactive here; using                                                                   // 296\n    // reactive sort would result in extra rerunning.                                                                  // 297\n    var sort = Tracker.nonreactive(function () {                                                                       // 298\n      return template.tabular.sort.get();                                                                              // 299\n    });                                                                                                                // 300\n    if (sort) {                                                                                                        // 301\n      findOptions.sort = sort;                                                                                         // 302\n    }                                                                                                                  // 303\n                                                                                                                       // 304\n    // Get the updated list of docs we should be showing                                                               // 305\n    var cursor = collection.find({_id: {$in: tableInfo.ids}}, findOptions);                                            // 306\n                                                                                                                       // 307\n    //console.log('tableInfo, fields, sort, find autorun', cursor.count());                                            // 308\n                                                                                                                       // 309\n    // We're subscribing to the docs just in time, so there's                                                          // 310\n    // a good chance that they aren't all sent to the client yet.                                                      // 311\n    // We'll stop here if we didn't find all the docs we asked for.                                                    // 312\n    // This will rerun one or more times as the docs are received                                                      // 313\n    // from the server, and eventually we'll have them all.                                                            // 314\n    // Without this check in here, there's a lot of flashing in the                                                    // 315\n    // table as rows are added.                                                                                        // 316\n    if (cursor.count() < tableInfo.ids.length) {                                                                       // 317\n      return;                                                                                                          // 318\n    }                                                                                                                  // 319\n                                                                                                                       // 320\n    // Get data as array for DataTables to consume in the ajax function                                                // 321\n    template.tabular.data = cursor.fetch();                                                                            // 322\n                                                                                                                       // 323\n    template.tabular.isLoading.set(false);                                                                             // 324\n                                                                                                                       // 325\n    // For these types of reactive changes, we don't want to                                                           // 326\n    // reset the page we're on, so we pass `false` as second arg.                                                      // 327\n    // The exception is if we changed the results-per-page number,                                                     // 328\n    // in which cases `resetTablePaging` will be `true` and we will do so.                                             // 329\n    if (table) {                                                                                                       // 330\n      if (resetTablePaging) {                                                                                          // 331\n        table.ajax.reload(null, true);                                                                                 // 332\n        resetTablePaging = false;                                                                                      // 333\n      } else {                                                                                                         // 334\n        table.ajax.reload(null, false);                                                                                // 335\n      }                                                                                                                // 336\n    }                                                                                                                  // 337\n                                                                                                                       // 338\n  });                                                                                                                  // 339\n                                                                                                                       // 340\n  // XXX Not working                                                                                                   // 341\n  template.autorun(function () {                                                                                       // 342\n    var visibility = template.tabular.isLoading.get() ? 'visible' : 'hidden';                                          // 343\n    template.$('.dataTables_processing').css('visibility', visibility);                                                // 344\n  });                                                                                                                  // 345\n                                                                                                                       // 346\n  // force table paging to reset to first page when we change page length                                              // 347\n  $tableElement.on('length.dt', function () {                                                                          // 348\n    resetTablePaging = true;                                                                                           // 349\n  });                                                                                                                  // 350\n};                                                                                                                     // 351\n                                                                                                                       // 352\nif (typeof Template.tabular.onRendered === 'function') {                                                               // 353\n  Template.tabular.onRendered(tabularOnRendered);                                                                      // 354\n} else {                                                                                                               // 355\n  Template.tabular.rendered = tabularOnRendered;                                                                       // 356\n}                                                                                                                      // 357\n                                                                                                                       // 358\nvar tabularOnDestroyed = function () {                                                                                 // 359\n  // Clear last skip tracking                                                                                          // 360\n  Session.set('Tabular.LastSkip', 0);                                                                                  // 361\n  // Run a user-provided onUnload function                                                                             // 362\n  if (this.tabular &&                                                                                                  // 363\n      this.tabular.tableDef &&                                                                                         // 364\n      typeof this.tabular.tableDef.onUnload === 'function') {                                                          // 365\n    this.tabular.tableDef.onUnload();                                                                                  // 366\n  }                                                                                                                    // 367\n};                                                                                                                     // 368\n                                                                                                                       // 369\nif (typeof Template.tabular.onDestroyed === 'function') {                                                              // 370\n  Template.tabular.onDestroyed(tabularOnDestroyed);                                                                    // 371\n} else {                                                                                                               // 372\n  Template.tabular.destroyed = tabularOnDestroyed;                                                                     // 373\n}                                                                                                                      // 374\n                                                                                                                       // 375\n//function setUpTestingAutoRunLogging(template) {                                                                      // 376\n//  template.autorun(function () {                                                                                     // 377\n//    var val = template.tabular.tableName.get();                                                                      // 378\n//    console.log('tableName changed', val);                                                                           // 379\n//  });                                                                                                                // 380\n//                                                                                                                     // 381\n//  template.autorun(function () {                                                                                     // 382\n//    var val = template.tabular.pubSelector.get();                                                                    // 383\n//    console.log('pubSelector changed', val);                                                                         // 384\n//  });                                                                                                                // 385\n//                                                                                                                     // 386\n//  template.autorun(function () {                                                                                     // 387\n//    var val = template.tabular.sort.get();                                                                           // 388\n//    console.log('sort changed', val);                                                                                // 389\n//  });                                                                                                                // 390\n//                                                                                                                     // 391\n//  template.autorun(function () {                                                                                     // 392\n//    var val = template.tabular.skip.get();                                                                           // 393\n//    console.log('skip changed', val);                                                                                // 394\n//  });                                                                                                                // 395\n//                                                                                                                     // 396\n//  template.autorun(function () {                                                                                     // 397\n//    var val = template.tabular.limit.get();                                                                          // 398\n//    console.log('limit changed', val);                                                                               // 399\n//  });                                                                                                                // 400\n//}                                                                                                                    // 401\n                                                                                                                       // 402\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['aldeed:tabular'] = {}, {\n  Tabular: Tabular\n});\n\n})();\n","servePath":"/packages/aldeed_tabular.js","sourceMap":{"version":3,"sources":["/packages/aldeed_tabular/common.js","/packages/aldeed_tabular/.npm/package/node_modules/datatables/media/js/jquery.dataTables.js","/packages/aldeed_tabular/client/lib/dataTables.bootstrap.js","/packages/aldeed_tabular/client/template.tabular.js","/packages/aldeed_tabular/client/util.js","/packages/aldeed_tabular/client/tableRecords.js","/packages/aldeed_tabular/client/tableInit.js","/packages/aldeed_tabular/client/pubSelector.js","/packages/aldeed_tabular/client/tabular.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACxvmdhEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC9FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACxfile":"/packages/aldeed_tabular.js","sourcesContent":["/* global Tabular:true, Mongo, _, Meteor, Template */\n\nTabular = {}; //exported\n\nTabular.tablesByName = {};\n\nif (Meteor.isClient) {\n  Template.registerHelper('TabularTables', Tabular.tablesByName);\n}\n\nTabular.Table = function (options) {\n  var self = this;\n\n  if (!options) {\n    throw new Error('Tabular.Table options argument is required');\n  }\n\n  if (!options.name) {\n    throw new Error('Tabular.Table options must specify name');\n  }\n  self.name = options.name;\n\n  if (!(options.collection instanceof Mongo.Collection)) {\n    throw new Error('Tabular.Table options must specify collection');\n  }\n  self.collection = options.collection;\n\n  self.pub = options.pub || 'tabular_genericPub';\n\n  // By default we use core `Meteor.subscribe`, but you can pass\n  // a subscription manager like `sub: new SubsManager({cacheLimit: 20, expireIn: 3})`\n  self.sub = options.sub || Meteor;\n\n  self.onUnload = options.onUnload;\n  self.allow = options.allow;\n  self.allowFields = options.allowFields;\n  self.changeSelector = options.changeSelector;\n\n  if (_.isArray(options.extraFields)) {\n    var fields = {};\n    _.each(options.extraFields, function (fieldName) {\n      fields[fieldName] = 1;\n    });\n    self.extraFields = fields;\n  }\n\n  self.selector = options.selector;\n\n  if (!options.columns) {\n    throw new Error('Tabular.Table options must specify columns');\n  }\n\n  self.options = _.omit(options, 'collection', 'pub', 'sub', 'onUnload', 'allow', 'allowFields', 'extraFields', 'name', 'selector');\n\n  Tabular.tablesByName[self.name] = self;\n};\n","/*! DataTables 1.10.7\n * ©2008-2014 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * @summary     DataTables\n * @description Paginate, search and order HTML tables\n * @version     1.10.7\n * @file        jquery.dataTables.js\n * @author      SpryMedia Ltd (www.sprymedia.co.uk)\n * @contact     www.sprymedia.co.uk/contact\n * @copyright   Copyright 2008-2014 SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net\n */\n\n/*jslint evil: true, undef: true, browser: true */\n/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnScrollingWidthAdjust,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnScrollBarWidth,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/\n\n(/** @lends <global> */function( window, document, undefined ) {\n\n(function( factory ) {\n\t\"use strict\";\n\n\tif ( typeof define === 'function' && define.amd ) {\n\t\t// Define as an AMD module if possible\n\t\tdefine( 'datatables', ['jquery'], factory );\n\t}\n    else if ( typeof exports === 'object' ) {\n        // Node/CommonJS\n        module.exports = factory( require( 'jquery' ) );\n    }\n\telse if ( jQuery && !jQuery.fn.dataTable ) {\n\t\t// Define using browser globals otherwise\n\t\t// Prevent multiple instantiations if the script is loaded twice\n\t\tfactory( jQuery );\n\t}\n}\n(/** @lends <global> */function( $ ) {\n\t\"use strict\";\n\n\t/**\n\t * DataTables is a plug-in for the jQuery Javascript library. It is a highly\n\t * flexible tool, based upon the foundations of progressive enhancement,\n\t * which will add advanced interaction controls to any HTML table. For a\n\t * full list of features please refer to\n\t * [DataTables.net](href=\"http://datatables.net).\n\t *\n\t * Note that the `DataTable` object is not a global variable but is aliased\n\t * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may\n\t * be  accessed.\n\t *\n\t *  @class\n\t *  @param {object} [init={}] Configuration object for DataTables. Options\n\t *    are defined by {@link DataTable.defaults}\n\t *  @requires jQuery 1.7+\n\t *\n\t *  @example\n\t *    // Basic initialisation\n\t *    $(document).ready( function {\n\t *      $('#example').dataTable();\n\t *    } );\n\t *\n\t *  @example\n\t *    // Initialisation with configuration options - in this case, disable\n\t *    // pagination and sorting.\n\t *    $(document).ready( function {\n\t *      $('#example').dataTable( {\n\t *        \"paginate\": false,\n\t *        \"sort\": false\n\t *      } );\n\t *    } );\n\t */\n\tvar DataTable;\n\n\t\n\t/*\n\t * It is useful to have variables which are scoped locally so only the\n\t * DataTables functions can access them and they don't leak into global space.\n\t * At the same time these functions are often useful over multiple files in the\n\t * core and API, so we list, or at least document, all variables which are used\n\t * by DataTables as private variables here. This also ensures that there is no\n\t * clashing of variable names and that they can easily referenced for reuse.\n\t */\n\t\n\t\n\t// Defined else where\n\t//  _selector_run\n\t//  _selector_opts\n\t//  _selector_first\n\t//  _selector_row_indexes\n\t\n\tvar _ext; // DataTable.ext\n\tvar _Api; // DataTable.Api\n\tvar _api_register; // DataTable.Api.register\n\tvar _api_registerPlural; // DataTable.Api.registerPlural\n\t\n\tvar _re_dic = {};\n\tvar _re_new_lines = /[\\r\\n]/g;\n\tvar _re_html = /<.*?>/g;\n\tvar _re_date_start = /^[\\w\\+\\-]/;\n\tvar _re_date_end = /[\\w\\+\\-]$/;\n\t\n\t// Escape regular expression special characters\n\tvar _re_escape_regex = new RegExp( '(\\\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\', '$', '^', '-' ].join('|\\\\') + ')', 'g' );\n\t\n\t// http://en.wikipedia.org/wiki/Foreign_exchange_market\n\t// - \\u20BD - Russian ruble.\n\t// - \\u20a9 - South Korean Won\n\t// - \\u20BA - Turkish Lira\n\t// - \\u20B9 - Indian Rupee\n\t// - R - Brazil (R$) and South Africa\n\t// - fr - Swiss Franc\n\t// - kr - Swedish krona, Norwegian krone and Danish krone\n\t// - \\u2009 is thin space and \\u202F is narrow no-break space, both used in many\n\t//   standards as thousands separators.\n\tvar _re_formatted_numeric = /[',$£€¥%\\u2009\\u202F\\u20BD\\u20a9\\u20BArfk]/gi;\n\t\n\t\n\tvar _empty = function ( d ) {\n\t\treturn !d || d === true || d === '-' ? true : false;\n\t};\n\t\n\t\n\tvar _intVal = function ( s ) {\n\t\tvar integer = parseInt( s, 10 );\n\t\treturn !isNaN(integer) && isFinite(s) ? integer : null;\n\t};\n\t\n\t// Convert from a formatted number with characters other than `.` as the\n\t// decimal place, to a Javascript number\n\tvar _numToDecimal = function ( num, decimalPoint ) {\n\t\t// Cache created regular expressions for speed as this function is called often\n\t\tif ( ! _re_dic[ decimalPoint ] ) {\n\t\t\t_re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );\n\t\t}\n\t\treturn typeof num === 'string' && decimalPoint !== '.' ?\n\t\t\tnum.replace( /\\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :\n\t\t\tnum;\n\t};\n\t\n\t\n\tvar _isNumber = function ( d, decimalPoint, formatted ) {\n\t\tvar strType = typeof d === 'string';\n\t\n\t\t// If empty return immediately so there must be a number if it is a\n\t\t// formatted string (this stops the string \"k\", or \"kr\", etc being detected\n\t\t// as a formatted number for currency\n\t\tif ( _empty( d ) ) {\n\t\t\treturn true;\n\t\t}\n\t\n\t\tif ( decimalPoint && strType ) {\n\t\t\td = _numToDecimal( d, decimalPoint );\n\t\t}\n\t\n\t\tif ( formatted && strType ) {\n\t\t\td = d.replace( _re_formatted_numeric, '' );\n\t\t}\n\t\n\t\treturn !isNaN( parseFloat(d) ) && isFinite( d );\n\t};\n\t\n\t\n\t// A string without HTML in it can be considered to be HTML still\n\tvar _isHtml = function ( d ) {\n\t\treturn _empty( d ) || typeof d === 'string';\n\t};\n\t\n\t\n\tvar _htmlNumeric = function ( d, decimalPoint, formatted ) {\n\t\tif ( _empty( d ) ) {\n\t\t\treturn true;\n\t\t}\n\t\n\t\tvar html = _isHtml( d );\n\t\treturn ! html ?\n\t\t\tnull :\n\t\t\t_isNumber( _stripHtml( d ), decimalPoint, formatted ) ?\n\t\t\t\ttrue :\n\t\t\t\tnull;\n\t};\n\t\n\t\n\tvar _pluck = function ( a, prop, prop2 ) {\n\t\tvar out = [];\n\t\tvar i=0, ien=a.length;\n\t\n\t\t// Could have the test in the loop for slightly smaller code, but speed\n\t\t// is essential here\n\t\tif ( prop2 !== undefined ) {\n\t\t\tfor ( ; i<ien ; i++ ) {\n\t\t\t\tif ( a[i] && a[i][ prop ] ) {\n\t\t\t\t\tout.push( a[i][ prop ][ prop2 ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor ( ; i<ien ; i++ ) {\n\t\t\t\tif ( a[i] ) {\n\t\t\t\t\tout.push( a[i][ prop ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn out;\n\t};\n\t\n\t\n\t// Basically the same as _pluck, but rather than looping over `a` we use `order`\n\t// as the indexes to pick from `a`\n\tvar _pluck_order = function ( a, order, prop, prop2 )\n\t{\n\t\tvar out = [];\n\t\tvar i=0, ien=order.length;\n\t\n\t\t// Could have the test in the loop for slightly smaller code, but speed\n\t\t// is essential here\n\t\tif ( prop2 !== undefined ) {\n\t\t\tfor ( ; i<ien ; i++ ) {\n\t\t\t\tif ( a[ order[i] ][ prop ] ) {\n\t\t\t\t\tout.push( a[ order[i] ][ prop ][ prop2 ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor ( ; i<ien ; i++ ) {\n\t\t\t\tout.push( a[ order[i] ][ prop ] );\n\t\t\t}\n\t\t}\n\t\n\t\treturn out;\n\t};\n\t\n\t\n\tvar _range = function ( len, start )\n\t{\n\t\tvar out = [];\n\t\tvar end;\n\t\n\t\tif ( start === undefined ) {\n\t\t\tstart = 0;\n\t\t\tend = len;\n\t\t}\n\t\telse {\n\t\t\tend = start;\n\t\t\tstart = len;\n\t\t}\n\t\n\t\tfor ( var i=start ; i<end ; i++ ) {\n\t\t\tout.push( i );\n\t\t}\n\t\n\t\treturn out;\n\t};\n\t\n\t\n\tvar _removeEmpty = function ( a )\n\t{\n\t\tvar out = [];\n\t\n\t\tfor ( var i=0, ien=a.length ; i<ien ; i++ ) {\n\t\t\tif ( a[i] ) { // careful - will remove all falsy values!\n\t\t\t\tout.push( a[i] );\n\t\t\t}\n\t\t}\n\t\n\t\treturn out;\n\t};\n\t\n\t\n\tvar _stripHtml = function ( d ) {\n\t\treturn d.replace( _re_html, '' );\n\t};\n\t\n\t\n\t/**\n\t * Find the unique elements in a source array.\n\t *\n\t * @param  {array} src Source array\n\t * @return {array} Array of unique items\n\t * @ignore\n\t */\n\tvar _unique = function ( src )\n\t{\n\t\t// A faster unique method is to use object keys to identify used values,\n\t\t// but this doesn't work with arrays or objects, which we must also\n\t\t// consider. See jsperf.com/compare-array-unique-versions/4 for more\n\t\t// information.\n\t\tvar\n\t\t\tout = [],\n\t\t\tval,\n\t\t\ti, ien=src.length,\n\t\t\tj, k=0;\n\t\n\t\tagain: for ( i=0 ; i<ien ; i++ ) {\n\t\t\tval = src[i];\n\t\n\t\t\tfor ( j=0 ; j<k ; j++ ) {\n\t\t\t\tif ( out[j] === val ) {\n\t\t\t\t\tcontinue again;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tout.push( val );\n\t\t\tk++;\n\t\t}\n\t\n\t\treturn out;\n\t};\n\t\n\t\n\t\n\t/**\n\t * Create a mapping object that allows camel case parameters to be looked up\n\t * for their Hungarian counterparts. The mapping is stored in a private\n\t * parameter called `_hungarianMap` which can be accessed on the source object.\n\t *  @param {object} o\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnHungarianMap ( o )\n\t{\n\t\tvar\n\t\t\thungarian = 'a aa ai ao as b fn i m o s ',\n\t\t\tmatch,\n\t\t\tnewKey,\n\t\t\tmap = {};\n\t\n\t\t$.each( o, function (key, val) {\n\t\t\tmatch = key.match(/^([^A-Z]+?)([A-Z])/);\n\t\n\t\t\tif ( match && hungarian.indexOf(match[1]+' ') !== -1 )\n\t\t\t{\n\t\t\t\tnewKey = key.replace( match[0], match[2].toLowerCase() );\n\t\t\t\tmap[ newKey ] = key;\n\t\n\t\t\t\tif ( match[1] === 'o' )\n\t\t\t\t{\n\t\t\t\t\t_fnHungarianMap( o[key] );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t\n\t\to._hungarianMap = map;\n\t}\n\t\n\t\n\t/**\n\t * Convert from camel case parameters to Hungarian, based on a Hungarian map\n\t * created by _fnHungarianMap.\n\t *  @param {object} src The model object which holds all parameters that can be\n\t *    mapped.\n\t *  @param {object} user The object to convert from camel case to Hungarian.\n\t *  @param {boolean} force When set to `true`, properties which already have a\n\t *    Hungarian value in the `user` object will be overwritten. Otherwise they\n\t *    won't be.\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnCamelToHungarian ( src, user, force )\n\t{\n\t\tif ( ! src._hungarianMap ) {\n\t\t\t_fnHungarianMap( src );\n\t\t}\n\t\n\t\tvar hungarianKey;\n\t\n\t\t$.each( user, function (key, val) {\n\t\t\thungarianKey = src._hungarianMap[ key ];\n\t\n\t\t\tif ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )\n\t\t\t{\n\t\t\t\t// For objects, we need to buzz down into the object to copy parameters\n\t\t\t\tif ( hungarianKey.charAt(0) === 'o' )\n\t\t\t\t{\n\t\t\t\t\t// Copy the camelCase options over to the hungarian\n\t\t\t\t\tif ( ! user[ hungarianKey ] ) {\n\t\t\t\t\t\tuser[ hungarianKey ] = {};\n\t\t\t\t\t}\n\t\t\t\t\t$.extend( true, user[hungarianKey], user[key] );\n\t\n\t\t\t\t\t_fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tuser[hungarianKey] = user[ key ];\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\t\n\t\n\t/**\n\t * Language compatibility - when certain options are given, and others aren't, we\n\t * need to duplicate the values over, in order to provide backwards compatibility\n\t * with older language files.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnLanguageCompat( lang )\n\t{\n\t\tvar defaults = DataTable.defaults.oLanguage;\n\t\tvar zeroRecords = lang.sZeroRecords;\n\t\n\t\t/* Backwards compatibility - if there is no sEmptyTable given, then use the same as\n\t\t * sZeroRecords - assuming that is given.\n\t\t */\n\t\tif ( ! lang.sEmptyTable && zeroRecords &&\n\t\t\tdefaults.sEmptyTable === \"No data available in table\" )\n\t\t{\n\t\t\t_fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );\n\t\t}\n\t\n\t\t/* Likewise with loading records */\n\t\tif ( ! lang.sLoadingRecords && zeroRecords &&\n\t\t\tdefaults.sLoadingRecords === \"Loading...\" )\n\t\t{\n\t\t\t_fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );\n\t\t}\n\t\n\t\t// Old parameter name of the thousands separator mapped onto the new\n\t\tif ( lang.sInfoThousands ) {\n\t\t\tlang.sThousands = lang.sInfoThousands;\n\t\t}\n\t\n\t\tvar decimal = lang.sDecimal;\n\t\tif ( decimal ) {\n\t\t\t_addNumericSort( decimal );\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Map one parameter onto another\n\t *  @param {object} o Object to map\n\t *  @param {*} knew The new parameter name\n\t *  @param {*} old The old parameter name\n\t */\n\tvar _fnCompatMap = function ( o, knew, old ) {\n\t\tif ( o[ knew ] !== undefined ) {\n\t\t\to[ old ] = o[ knew ];\n\t\t}\n\t};\n\t\n\t\n\t/**\n\t * Provide backwards compatibility for the main DT options. Note that the new\n\t * options are mapped onto the old parameters, so this is an external interface\n\t * change only.\n\t *  @param {object} init Object to map\n\t */\n\tfunction _fnCompatOpts ( init )\n\t{\n\t\t_fnCompatMap( init, 'ordering',      'bSort' );\n\t\t_fnCompatMap( init, 'orderMulti',    'bSortMulti' );\n\t\t_fnCompatMap( init, 'orderClasses',  'bSortClasses' );\n\t\t_fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );\n\t\t_fnCompatMap( init, 'order',         'aaSorting' );\n\t\t_fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );\n\t\t_fnCompatMap( init, 'paging',        'bPaginate' );\n\t\t_fnCompatMap( init, 'pagingType',    'sPaginationType' );\n\t\t_fnCompatMap( init, 'pageLength',    'iDisplayLength' );\n\t\t_fnCompatMap( init, 'searching',     'bFilter' );\n\t\n\t\t// Column search objects are in an array, so it needs to be converted\n\t\t// element by element\n\t\tvar searchCols = init.aoSearchCols;\n\t\n\t\tif ( searchCols ) {\n\t\t\tfor ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {\n\t\t\t\tif ( searchCols[i] ) {\n\t\t\t\t\t_fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Provide backwards compatibility for column options. Note that the new options\n\t * are mapped onto the old parameters, so this is an external interface change\n\t * only.\n\t *  @param {object} init Object to map\n\t */\n\tfunction _fnCompatCols ( init )\n\t{\n\t\t_fnCompatMap( init, 'orderable',     'bSortable' );\n\t\t_fnCompatMap( init, 'orderData',     'aDataSort' );\n\t\t_fnCompatMap( init, 'orderSequence', 'asSorting' );\n\t\t_fnCompatMap( init, 'orderDataType', 'sortDataType' );\n\t\n\t\t// orderData can be given as an integer\n\t\tvar dataSort = init.aDataSort;\n\t\tif ( dataSort && ! $.isArray( dataSort ) ) {\n\t\t\tinit.aDataSort = [ dataSort ];\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Browser feature detection for capabilities, quirks\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnBrowserDetect( settings )\n\t{\n\t\tvar browser = settings.oBrowser;\n\t\n\t\t// Scrolling feature / quirks detection\n\t\tvar n = $('<div/>')\n\t\t\t.css( {\n\t\t\t\tposition: 'absolute',\n\t\t\t\ttop: 0,\n\t\t\t\tleft: 0,\n\t\t\t\theight: 1,\n\t\t\t\twidth: 1,\n\t\t\t\toverflow: 'hidden'\n\t\t\t} )\n\t\t\t.append(\n\t\t\t\t$('<div/>')\n\t\t\t\t\t.css( {\n\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\ttop: 1,\n\t\t\t\t\t\tleft: 1,\n\t\t\t\t\t\twidth: 100,\n\t\t\t\t\t\toverflow: 'scroll'\n\t\t\t\t\t} )\n\t\t\t\t\t.append(\n\t\t\t\t\t\t$('<div class=\"test\"/>')\n\t\t\t\t\t\t\t.css( {\n\t\t\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t\t\t\theight: 10\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t)\n\t\t\t)\n\t\t\t.appendTo( 'body' );\n\t\n\t\tvar test = n.find('.test');\n\t\n\t\t// IE6/7 will oversize a width 100% element inside a scrolling element, to\n\t\t// include the width of the scrollbar, while other browsers ensure the inner\n\t\t// element is contained without forcing scrolling\n\t\tbrowser.bScrollOversize = test[0].offsetWidth === 100;\n\t\n\t\t// In rtl text layout, some browsers (most, but not all) will place the\n\t\t// scrollbar on the left, rather than the right.\n\t\tbrowser.bScrollbarLeft = Math.round( test.offset().left ) !== 1;\n\t\n\t\tn.remove();\n\t}\n\t\n\t\n\t/**\n\t * Array.prototype reduce[Right] method, used for browsers which don't support\n\t * JS 1.6. Done this way to reduce code size, since we iterate either way\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnReduce ( that, fn, init, start, end, inc )\n\t{\n\t\tvar\n\t\t\ti = start,\n\t\t\tvalue,\n\t\t\tisSet = false;\n\t\n\t\tif ( init !== undefined ) {\n\t\t\tvalue = init;\n\t\t\tisSet = true;\n\t\t}\n\t\n\t\twhile ( i !== end ) {\n\t\t\tif ( ! that.hasOwnProperty(i) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\tvalue = isSet ?\n\t\t\t\tfn( value, that[i], i, that ) :\n\t\t\t\tthat[i];\n\t\n\t\t\tisSet = true;\n\t\t\ti += inc;\n\t\t}\n\t\n\t\treturn value;\n\t}\n\t\n\t/**\n\t * Add a column to the list used for the table with default values\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {node} nTh The th element for this column\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAddColumn( oSettings, nTh )\n\t{\n\t\t// Add column to aoColumns array\n\t\tvar oDefaults = DataTable.defaults.column;\n\t\tvar iCol = oSettings.aoColumns.length;\n\t\tvar oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {\n\t\t\t\"nTh\": nTh ? nTh : document.createElement('th'),\n\t\t\t\"sTitle\":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',\n\t\t\t\"aDataSort\": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],\n\t\t\t\"mData\": oDefaults.mData ? oDefaults.mData : iCol,\n\t\t\tidx: iCol\n\t\t} );\n\t\toSettings.aoColumns.push( oCol );\n\t\n\t\t// Add search object for column specific search. Note that the `searchCols[ iCol ]`\n\t\t// passed into extend can be undefined. This allows the user to give a default\n\t\t// with only some of the parameters defined, and also not give a default\n\t\tvar searchCols = oSettings.aoPreSearchCols;\n\t\tsearchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );\n\t\n\t\t// Use the default column options function to initialise classes etc\n\t\t_fnColumnOptions( oSettings, iCol, $(nTh).data() );\n\t}\n\t\n\t\n\t/**\n\t * Apply options for a column\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {int} iCol column index to consider\n\t *  @param {object} oOptions object with sType, bVisible and bSearchable etc\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnColumnOptions( oSettings, iCol, oOptions )\n\t{\n\t\tvar oCol = oSettings.aoColumns[ iCol ];\n\t\tvar oClasses = oSettings.oClasses;\n\t\tvar th = $(oCol.nTh);\n\t\n\t\t// Try to get width information from the DOM. We can't get it from CSS\n\t\t// as we'd need to parse the CSS stylesheet. `width` option can override\n\t\tif ( ! oCol.sWidthOrig ) {\n\t\t\t// Width attribute\n\t\t\toCol.sWidthOrig = th.attr('width') || null;\n\t\n\t\t\t// Style attribute\n\t\t\tvar t = (th.attr('style') || '').match(/width:\\s*(\\d+[pxem%]+)/);\n\t\t\tif ( t ) {\n\t\t\t\toCol.sWidthOrig = t[1];\n\t\t\t}\n\t\t}\n\t\n\t\t/* User specified column options */\n\t\tif ( oOptions !== undefined && oOptions !== null )\n\t\t{\n\t\t\t// Backwards compatibility\n\t\t\t_fnCompatCols( oOptions );\n\t\n\t\t\t// Map camel case parameters to their Hungarian counterparts\n\t\t\t_fnCamelToHungarian( DataTable.defaults.column, oOptions );\n\t\n\t\t\t/* Backwards compatibility for mDataProp */\n\t\t\tif ( oOptions.mDataProp !== undefined && !oOptions.mData )\n\t\t\t{\n\t\t\t\toOptions.mData = oOptions.mDataProp;\n\t\t\t}\n\t\n\t\t\tif ( oOptions.sType )\n\t\t\t{\n\t\t\t\toCol._sManualType = oOptions.sType;\n\t\t\t}\n\t\n\t\t\t// `class` is a reserved word in Javascript, so we need to provide\n\t\t\t// the ability to use a valid name for the camel case input\n\t\t\tif ( oOptions.className && ! oOptions.sClass )\n\t\t\t{\n\t\t\t\toOptions.sClass = oOptions.className;\n\t\t\t}\n\t\n\t\t\t$.extend( oCol, oOptions );\n\t\t\t_fnMap( oCol, oOptions, \"sWidth\", \"sWidthOrig\" );\n\t\n\t\t\t/* iDataSort to be applied (backwards compatibility), but aDataSort will take\n\t\t\t * priority if defined\n\t\t\t */\n\t\t\tif ( oOptions.iDataSort !== undefined )\n\t\t\t{\n\t\t\t\toCol.aDataSort = [ oOptions.iDataSort ];\n\t\t\t}\n\t\t\t_fnMap( oCol, oOptions, \"aDataSort\" );\n\t\t}\n\t\n\t\t/* Cache the data get and set functions for speed */\n\t\tvar mDataSrc = oCol.mData;\n\t\tvar mData = _fnGetObjectDataFn( mDataSrc );\n\t\tvar mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;\n\t\n\t\tvar attrTest = function( src ) {\n\t\t\treturn typeof src === 'string' && src.indexOf('@') !== -1;\n\t\t};\n\t\toCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (\n\t\t\tattrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)\n\t\t);\n\t\n\t\toCol.fnGetData = function (rowData, type, meta) {\n\t\t\tvar innerData = mData( rowData, type, undefined, meta );\n\t\n\t\t\treturn mRender && type ?\n\t\t\t\tmRender( innerData, type, rowData, meta ) :\n\t\t\t\tinnerData;\n\t\t};\n\t\toCol.fnSetData = function ( rowData, val, meta ) {\n\t\t\treturn _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );\n\t\t};\n\t\n\t\t// Indicate if DataTables should read DOM data as an object or array\n\t\t// Used in _fnGetRowElements\n\t\tif ( typeof mDataSrc !== 'number' ) {\n\t\t\toSettings._rowReadObject = true;\n\t\t}\n\t\n\t\t/* Feature sorting overrides column specific when off */\n\t\tif ( !oSettings.oFeatures.bSort )\n\t\t{\n\t\t\toCol.bSortable = false;\n\t\t\tth.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called\n\t\t}\n\t\n\t\t/* Check that the class assignment is correct for sorting */\n\t\tvar bAsc = $.inArray('asc', oCol.asSorting) !== -1;\n\t\tvar bDesc = $.inArray('desc', oCol.asSorting) !== -1;\n\t\tif ( !oCol.bSortable || (!bAsc && !bDesc) )\n\t\t{\n\t\t\toCol.sSortingClass = oClasses.sSortableNone;\n\t\t\toCol.sSortingClassJUI = \"\";\n\t\t}\n\t\telse if ( bAsc && !bDesc )\n\t\t{\n\t\t\toCol.sSortingClass = oClasses.sSortableAsc;\n\t\t\toCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;\n\t\t}\n\t\telse if ( !bAsc && bDesc )\n\t\t{\n\t\t\toCol.sSortingClass = oClasses.sSortableDesc;\n\t\t\toCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;\n\t\t}\n\t\telse\n\t\t{\n\t\t\toCol.sSortingClass = oClasses.sSortable;\n\t\t\toCol.sSortingClassJUI = oClasses.sSortJUI;\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Adjust the table column widths for new data. Note: you would probably want to\n\t * do a redraw after calling this function!\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAdjustColumnSizing ( settings )\n\t{\n\t\t/* Not interested in doing column width calculation if auto-width is disabled */\n\t\tif ( settings.oFeatures.bAutoWidth !== false )\n\t\t{\n\t\t\tvar columns = settings.aoColumns;\n\t\n\t\t\t_fnCalculateColumnWidths( settings );\n\t\t\tfor ( var i=0 , iLen=columns.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\tcolumns[i].nTh.style.width = columns[i].sWidth;\n\t\t\t}\n\t\t}\n\t\n\t\tvar scroll = settings.oScroll;\n\t\tif ( scroll.sY !== '' || scroll.sX !== '')\n\t\t{\n\t\t\t_fnScrollDraw( settings );\n\t\t}\n\t\n\t\t_fnCallbackFire( settings, null, 'column-sizing', [settings] );\n\t}\n\t\n\t\n\t/**\n\t * Covert the index of a visible column to the index in the data array (take account\n\t * of hidden columns)\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {int} iMatch Visible column index to lookup\n\t *  @returns {int} i the data index\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnVisibleToColumnIndex( oSettings, iMatch )\n\t{\n\t\tvar aiVis = _fnGetColumns( oSettings, 'bVisible' );\n\t\n\t\treturn typeof aiVis[iMatch] === 'number' ?\n\t\t\taiVis[iMatch] :\n\t\t\tnull;\n\t}\n\t\n\t\n\t/**\n\t * Covert the index of an index in the data array and convert it to the visible\n\t *   column index (take account of hidden columns)\n\t *  @param {int} iMatch Column index to lookup\n\t *  @param {object} oSettings dataTables settings object\n\t *  @returns {int} i the data index\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnColumnIndexToVisible( oSettings, iMatch )\n\t{\n\t\tvar aiVis = _fnGetColumns( oSettings, 'bVisible' );\n\t\tvar iPos = $.inArray( iMatch, aiVis );\n\t\n\t\treturn iPos !== -1 ? iPos : null;\n\t}\n\t\n\t\n\t/**\n\t * Get the number of visible columns\n\t *  @param {object} oSettings dataTables settings object\n\t *  @returns {int} i the number of visible columns\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnVisbleColumns( oSettings )\n\t{\n\t\treturn _fnGetColumns( oSettings, 'bVisible' ).length;\n\t}\n\t\n\t\n\t/**\n\t * Get an array of column indexes that match a given property\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {string} sParam Parameter in aoColumns to look for - typically\n\t *    bVisible or bSearchable\n\t *  @returns {array} Array of indexes with matched properties\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetColumns( oSettings, sParam )\n\t{\n\t\tvar a = [];\n\t\n\t\t$.map( oSettings.aoColumns, function(val, i) {\n\t\t\tif ( val[sParam] ) {\n\t\t\t\ta.push( i );\n\t\t\t}\n\t\t} );\n\t\n\t\treturn a;\n\t}\n\t\n\t\n\t/**\n\t * Calculate the 'type' of a column\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnColumnTypes ( settings )\n\t{\n\t\tvar columns = settings.aoColumns;\n\t\tvar data = settings.aoData;\n\t\tvar types = DataTable.ext.type.detect;\n\t\tvar i, ien, j, jen, k, ken;\n\t\tvar col, cell, detectedType, cache;\n\t\n\t\t// For each column, spin over the \n\t\tfor ( i=0, ien=columns.length ; i<ien ; i++ ) {\n\t\t\tcol = columns[i];\n\t\t\tcache = [];\n\t\n\t\t\tif ( ! col.sType && col._sManualType ) {\n\t\t\t\tcol.sType = col._sManualType;\n\t\t\t}\n\t\t\telse if ( ! col.sType ) {\n\t\t\t\tfor ( j=0, jen=types.length ; j<jen ; j++ ) {\n\t\t\t\t\tfor ( k=0, ken=data.length ; k<ken ; k++ ) {\n\t\t\t\t\t\t// Use a cache array so we only need to get the type data\n\t\t\t\t\t\t// from the formatter once (when using multiple detectors)\n\t\t\t\t\t\tif ( cache[k] === undefined ) {\n\t\t\t\t\t\t\tcache[k] = _fnGetCellData( settings, k, i, 'type' );\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tdetectedType = types[j]( cache[k], settings );\n\t\n\t\t\t\t\t\t// If null, then this type can't apply to this column, so\n\t\t\t\t\t\t// rather than testing all cells, break out. There is an\n\t\t\t\t\t\t// exception for the last type which is `html`. We need to\n\t\t\t\t\t\t// scan all rows since it is possible to mix string and HTML\n\t\t\t\t\t\t// types\n\t\t\t\t\t\tif ( ! detectedType && j !== types.length-1 ) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// Only a single match is needed for html type since it is\n\t\t\t\t\t\t// bottom of the pile and very similar to string\n\t\t\t\t\t\tif ( detectedType === 'html' ) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Type is valid for all data points in the column - use this\n\t\t\t\t\t// type\n\t\t\t\t\tif ( detectedType ) {\n\t\t\t\t\t\tcol.sType = detectedType;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t// Fall back - if no type was detected, always use string\n\t\t\t\tif ( ! col.sType ) {\n\t\t\t\t\tcol.sType = 'string';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Take the column definitions and static columns arrays and calculate how\n\t * they relate to column indexes. The callback function will then apply the\n\t * definition found for a column to a suitable configuration object.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {array} aoColDefs The aoColumnDefs array that is to be applied\n\t *  @param {array} aoCols The aoColumns array that defines columns individually\n\t *  @param {function} fn Callback function - takes two parameters, the calculated\n\t *    column index and the definition for that column.\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )\n\t{\n\t\tvar i, iLen, j, jLen, k, kLen, def;\n\t\tvar columns = oSettings.aoColumns;\n\t\n\t\t// Column definitions with aTargets\n\t\tif ( aoColDefs )\n\t\t{\n\t\t\t/* Loop over the definitions array - loop in reverse so first instance has priority */\n\t\t\tfor ( i=aoColDefs.length-1 ; i>=0 ; i-- )\n\t\t\t{\n\t\t\t\tdef = aoColDefs[i];\n\t\n\t\t\t\t/* Each definition can target multiple columns, as it is an array */\n\t\t\t\tvar aTargets = def.targets !== undefined ?\n\t\t\t\t\tdef.targets :\n\t\t\t\t\tdef.aTargets;\n\t\n\t\t\t\tif ( ! $.isArray( aTargets ) )\n\t\t\t\t{\n\t\t\t\t\taTargets = [ aTargets ];\n\t\t\t\t}\n\t\n\t\t\t\tfor ( j=0, jLen=aTargets.length ; j<jLen ; j++ )\n\t\t\t\t{\n\t\t\t\t\tif ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\t/* Add columns that we don't yet know about */\n\t\t\t\t\t\twhile( columns.length <= aTargets[j] )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_fnAddColumn( oSettings );\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t/* Integer, basic index */\n\t\t\t\t\t\tfn( aTargets[j], def );\n\t\t\t\t\t}\n\t\t\t\t\telse if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\t/* Negative integer, right to left column counting */\n\t\t\t\t\t\tfn( columns.length+aTargets[j], def );\n\t\t\t\t\t}\n\t\t\t\t\telse if ( typeof aTargets[j] === 'string' )\n\t\t\t\t\t{\n\t\t\t\t\t\t/* Class name matching on TH element */\n\t\t\t\t\t\tfor ( k=0, kLen=columns.length ; k<kLen ; k++ )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( aTargets[j] == \"_all\" ||\n\t\t\t\t\t\t\t     $(columns[k].nTh).hasClass( aTargets[j] ) )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfn( k, def );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t// Statically defined columns array\n\t\tif ( aoCols )\n\t\t{\n\t\t\tfor ( i=0, iLen=aoCols.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\tfn( i, aoCols[i] );\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Add a data array to the table, creating DOM node etc. This is the parallel to\n\t * _fnGatherData, but for adding rows from a Javascript source, rather than a\n\t * DOM source.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {array} aData data array to be added\n\t *  @param {node} [nTr] TR element to add to the table - optional. If not given,\n\t *    DataTables will create a row automatically\n\t *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n\t *    if nTr is.\n\t *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAddData ( oSettings, aDataIn, nTr, anTds )\n\t{\n\t\t/* Create the object for storing information about this new row */\n\t\tvar iRow = oSettings.aoData.length;\n\t\tvar oData = $.extend( true, {}, DataTable.models.oRow, {\n\t\t\tsrc: nTr ? 'dom' : 'data'\n\t\t} );\n\t\n\t\toData._aData = aDataIn;\n\t\toSettings.aoData.push( oData );\n\t\n\t\t/* Create the cells */\n\t\tvar nTd, sThisType;\n\t\tvar columns = oSettings.aoColumns;\n\t\tfor ( var i=0, iLen=columns.length ; i<iLen ; i++ )\n\t\t{\n\t\t\t// When working with a row, the data source object must be populated. In\n\t\t\t// all other cases, the data source object is already populated, so we\n\t\t\t// don't overwrite it, which might break bindings etc\n\t\t\tif ( nTr ) {\n\t\t\t\t_fnSetCellData( oSettings, iRow, i, _fnGetCellData( oSettings, iRow, i ) );\n\t\t\t}\n\t\t\tcolumns[i].sType = null;\n\t\t}\n\t\n\t\t/* Add to the display array */\n\t\toSettings.aiDisplayMaster.push( iRow );\n\t\n\t\t/* Create the DOM information, or register it if already present */\n\t\tif ( nTr || ! oSettings.oFeatures.bDeferRender )\n\t\t{\n\t\t\t_fnCreateTr( oSettings, iRow, nTr, anTds );\n\t\t}\n\t\n\t\treturn iRow;\n\t}\n\t\n\t\n\t/**\n\t * Add one or more TR elements to the table. Generally we'd expect to\n\t * use this for reading data from a DOM sourced table, but it could be\n\t * used for an TR element. Note that if a TR is given, it is used (i.e.\n\t * it is not cloned).\n\t *  @param {object} settings dataTables settings object\n\t *  @param {array|node|jQuery} trs The TR element(s) to add to the table\n\t *  @returns {array} Array of indexes for the added rows\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAddTr( settings, trs )\n\t{\n\t\tvar row;\n\t\n\t\t// Allow an individual node to be passed in\n\t\tif ( ! (trs instanceof $) ) {\n\t\t\ttrs = $(trs);\n\t\t}\n\t\n\t\treturn trs.map( function (i, el) {\n\t\t\trow = _fnGetRowElements( settings, el );\n\t\t\treturn _fnAddData( settings, row.data, el, row.cells );\n\t\t} );\n\t}\n\t\n\t\n\t/**\n\t * Take a TR element and convert it to an index in aoData\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {node} n the TR element to find\n\t *  @returns {int} index if the node is found, null if not\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnNodeToDataIndex( oSettings, n )\n\t{\n\t\treturn (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;\n\t}\n\t\n\t\n\t/**\n\t * Take a TD element and convert it into a column data index (not the visible index)\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {int} iRow The row number the TD/TH can be found in\n\t *  @param {node} n The TD/TH element to find\n\t *  @returns {int} index if the node is found, -1 if not\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnNodeToColumnIndex( oSettings, iRow, n )\n\t{\n\t\treturn $.inArray( n, oSettings.aoData[ iRow ].anCells );\n\t}\n\t\n\t\n\t/**\n\t * Get the data for a given cell from the internal cache, taking into account data mapping\n\t *  @param {object} settings dataTables settings object\n\t *  @param {int} rowIdx aoData row id\n\t *  @param {int} colIdx Column index\n\t *  @param {string} type data get type ('display', 'type' 'filter' 'sort')\n\t *  @returns {*} Cell data\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetCellData( settings, rowIdx, colIdx, type )\n\t{\n\t\tvar draw           = settings.iDraw;\n\t\tvar col            = settings.aoColumns[colIdx];\n\t\tvar rowData        = settings.aoData[rowIdx]._aData;\n\t\tvar defaultContent = col.sDefaultContent;\n\t\tvar cellData       = col.fnGetData( rowData, type, {\n\t\t\tsettings: settings,\n\t\t\trow:      rowIdx,\n\t\t\tcol:      colIdx\n\t\t} );\n\t\n\t\tif ( cellData === undefined ) {\n\t\t\tif ( settings.iDrawError != draw && defaultContent === null ) {\n\t\t\t\t_fnLog( settings, 0, \"Requested unknown parameter \"+\n\t\t\t\t\t(typeof col.mData=='function' ? '{function}' : \"'\"+col.mData+\"'\")+\n\t\t\t\t\t\" for row \"+rowIdx, 4 );\n\t\t\t\tsettings.iDrawError = draw;\n\t\t\t}\n\t\t\treturn defaultContent;\n\t\t}\n\t\n\t\t/* When the data source is null, we can use default column data */\n\t\tif ( (cellData === rowData || cellData === null) && defaultContent !== null ) {\n\t\t\tcellData = defaultContent;\n\t\t}\n\t\telse if ( typeof cellData === 'function' ) {\n\t\t\t// If the data source is a function, then we run it and use the return,\n\t\t\t// executing in the scope of the data object (for instances)\n\t\t\treturn cellData.call( rowData );\n\t\t}\n\t\n\t\tif ( cellData === null && type == 'display' ) {\n\t\t\treturn '';\n\t\t}\n\t\treturn cellData;\n\t}\n\t\n\t\n\t/**\n\t * Set the value for a specific cell, into the internal data cache\n\t *  @param {object} settings dataTables settings object\n\t *  @param {int} rowIdx aoData row id\n\t *  @param {int} colIdx Column index\n\t *  @param {*} val Value to set\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSetCellData( settings, rowIdx, colIdx, val )\n\t{\n\t\tvar col     = settings.aoColumns[colIdx];\n\t\tvar rowData = settings.aoData[rowIdx]._aData;\n\t\n\t\tcol.fnSetData( rowData, val, {\n\t\t\tsettings: settings,\n\t\t\trow:      rowIdx,\n\t\t\tcol:      colIdx\n\t\t}  );\n\t}\n\t\n\t\n\t// Private variable that is used to match action syntax in the data property object\n\tvar __reArray = /\\[.*?\\]$/;\n\tvar __reFn = /\\(\\)$/;\n\t\n\t/**\n\t * Split string on periods, taking into account escaped periods\n\t * @param  {string} str String to split\n\t * @return {array} Split string\n\t */\n\tfunction _fnSplitObjNotation( str )\n\t{\n\t\treturn $.map( str.match(/(\\\\.|[^\\.])+/g), function ( s ) {\n\t\t\treturn s.replace(/\\\\./g, '.');\n\t\t} );\n\t}\n\t\n\t\n\t/**\n\t * Return a function that can be used to get data from a source object, taking\n\t * into account the ability to use nested objects as a source\n\t *  @param {string|int|function} mSource The data source for the object\n\t *  @returns {function} Data get function\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetObjectDataFn( mSource )\n\t{\n\t\tif ( $.isPlainObject( mSource ) )\n\t\t{\n\t\t\t/* Build an object of get functions, and wrap them in a single call */\n\t\t\tvar o = {};\n\t\t\t$.each( mSource, function (key, val) {\n\t\t\t\tif ( val ) {\n\t\t\t\t\to[key] = _fnGetObjectDataFn( val );\n\t\t\t\t}\n\t\t\t} );\n\t\n\t\t\treturn function (data, type, row, meta) {\n\t\t\t\tvar t = o[type] || o._;\n\t\t\t\treturn t !== undefined ?\n\t\t\t\t\tt(data, type, row, meta) :\n\t\t\t\t\tdata;\n\t\t\t};\n\t\t}\n\t\telse if ( mSource === null )\n\t\t{\n\t\t\t/* Give an empty string for rendering / sorting etc */\n\t\t\treturn function (data) { // type, row and meta also passed, but not used\n\t\t\t\treturn data;\n\t\t\t};\n\t\t}\n\t\telse if ( typeof mSource === 'function' )\n\t\t{\n\t\t\treturn function (data, type, row, meta) {\n\t\t\t\treturn mSource( data, type, row, meta );\n\t\t\t};\n\t\t}\n\t\telse if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||\n\t\t\t      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )\n\t\t{\n\t\t\t/* If there is a . in the source string then the data source is in a\n\t\t\t * nested object so we loop over the data for each level to get the next\n\t\t\t * level down. On each loop we test for undefined, and if found immediately\n\t\t\t * return. This allows entire objects to be missing and sDefaultContent to\n\t\t\t * be used if defined, rather than throwing an error\n\t\t\t */\n\t\t\tvar fetchData = function (data, type, src) {\n\t\t\t\tvar arrayNotation, funcNotation, out, innerSrc;\n\t\n\t\t\t\tif ( src !== \"\" )\n\t\t\t\t{\n\t\t\t\t\tvar a = _fnSplitObjNotation( src );\n\t\n\t\t\t\t\tfor ( var i=0, iLen=a.length ; i<iLen ; i++ )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Check if we are dealing with special notation\n\t\t\t\t\t\tarrayNotation = a[i].match(__reArray);\n\t\t\t\t\t\tfuncNotation = a[i].match(__reFn);\n\t\n\t\t\t\t\t\tif ( arrayNotation )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Array notation\n\t\t\t\t\t\t\ta[i] = a[i].replace(__reArray, '');\n\t\n\t\t\t\t\t\t\t// Condition allows simply [] to be passed in\n\t\t\t\t\t\t\tif ( a[i] !== \"\" ) {\n\t\t\t\t\t\t\t\tdata = data[ a[i] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout = [];\n\t\n\t\t\t\t\t\t\t// Get the remainder of the nested object to get\n\t\t\t\t\t\t\ta.splice( 0, i+1 );\n\t\t\t\t\t\t\tinnerSrc = a.join('.');\n\t\n\t\t\t\t\t\t\t// Traverse each entry in the array getting the properties requested\n\t\t\t\t\t\t\tfor ( var j=0, jLen=data.length ; j<jLen ; j++ ) {\n\t\t\t\t\t\t\t\tout.push( fetchData( data[j], type, innerSrc ) );\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// If a string is given in between the array notation indicators, that\n\t\t\t\t\t\t\t// is used to join the strings together, otherwise an array is returned\n\t\t\t\t\t\t\tvar join = arrayNotation[0].substring(1, arrayNotation[0].length-1);\n\t\t\t\t\t\t\tdata = (join===\"\") ? out : out.join(join);\n\t\n\t\t\t\t\t\t\t// The inner call to fetchData has already traversed through the remainder\n\t\t\t\t\t\t\t// of the source requested, so we exit from the loop\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ( funcNotation )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Function call\n\t\t\t\t\t\t\ta[i] = a[i].replace(__reFn, '');\n\t\t\t\t\t\t\tdata = data[ a[i] ]();\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( data === null || data[ a[i] ] === undefined )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdata = data[ a[i] ];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\treturn data;\n\t\t\t};\n\t\n\t\t\treturn function (data, type) { // row and meta also passed, but not used\n\t\t\t\treturn fetchData( data, type, mSource );\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t/* Array or flat object mapping */\n\t\t\treturn function (data, type) { // row and meta also passed, but not used\n\t\t\t\treturn data[mSource];\n\t\t\t};\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Return a function that can be used to set data from a source object, taking\n\t * into account the ability to use nested objects as a source\n\t *  @param {string|int|function} mSource The data source for the object\n\t *  @returns {function} Data set function\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSetObjectDataFn( mSource )\n\t{\n\t\tif ( $.isPlainObject( mSource ) )\n\t\t{\n\t\t\t/* Unlike get, only the underscore (global) option is used for for\n\t\t\t * setting data since we don't know the type here. This is why an object\n\t\t\t * option is not documented for `mData` (which is read/write), but it is\n\t\t\t * for `mRender` which is read only.\n\t\t\t */\n\t\t\treturn _fnSetObjectDataFn( mSource._ );\n\t\t}\n\t\telse if ( mSource === null )\n\t\t{\n\t\t\t/* Nothing to do when the data source is null */\n\t\t\treturn function () {};\n\t\t}\n\t\telse if ( typeof mSource === 'function' )\n\t\t{\n\t\t\treturn function (data, val, meta) {\n\t\t\t\tmSource( data, 'set', val, meta );\n\t\t\t};\n\t\t}\n\t\telse if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||\n\t\t\t      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )\n\t\t{\n\t\t\t/* Like the get, we need to get data from a nested object */\n\t\t\tvar setData = function (data, val, src) {\n\t\t\t\tvar a = _fnSplitObjNotation( src ), b;\n\t\t\t\tvar aLast = a[a.length-1];\n\t\t\t\tvar arrayNotation, funcNotation, o, innerSrc;\n\t\n\t\t\t\tfor ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )\n\t\t\t\t{\n\t\t\t\t\t// Check if we are dealing with an array notation request\n\t\t\t\t\tarrayNotation = a[i].match(__reArray);\n\t\t\t\t\tfuncNotation = a[i].match(__reFn);\n\t\n\t\t\t\t\tif ( arrayNotation )\n\t\t\t\t\t{\n\t\t\t\t\t\ta[i] = a[i].replace(__reArray, '');\n\t\t\t\t\t\tdata[ a[i] ] = [];\n\t\n\t\t\t\t\t\t// Get the remainder of the nested object to set so we can recurse\n\t\t\t\t\t\tb = a.slice();\n\t\t\t\t\t\tb.splice( 0, i+1 );\n\t\t\t\t\t\tinnerSrc = b.join('.');\n\t\n\t\t\t\t\t\t// Traverse each entry in the array setting the properties requested\n\t\t\t\t\t\tfor ( var j=0, jLen=val.length ; j<jLen ; j++ )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\to = {};\n\t\t\t\t\t\t\tsetData( o, val[j], innerSrc );\n\t\t\t\t\t\t\tdata[ a[i] ].push( o );\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// The inner call to setData has already traversed through the remainder\n\t\t\t\t\t\t// of the source and has set the data, thus we can exit here\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if ( funcNotation )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Function call\n\t\t\t\t\t\ta[i] = a[i].replace(__reFn, '');\n\t\t\t\t\t\tdata = data[ a[i] ]( val );\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// If the nested object doesn't currently exist - since we are\n\t\t\t\t\t// trying to set the value - create it\n\t\t\t\t\tif ( data[ a[i] ] === null || data[ a[i] ] === undefined )\n\t\t\t\t\t{\n\t\t\t\t\t\tdata[ a[i] ] = {};\n\t\t\t\t\t}\n\t\t\t\t\tdata = data[ a[i] ];\n\t\t\t\t}\n\t\n\t\t\t\t// Last item in the input - i.e, the actual set\n\t\t\t\tif ( aLast.match(__reFn ) )\n\t\t\t\t{\n\t\t\t\t\t// Function call\n\t\t\t\t\tdata = data[ aLast.replace(__reFn, '') ]( val );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// If array notation is used, we just want to strip it and use the property name\n\t\t\t\t\t// and assign the value. If it isn't used, then we get the result we want anyway\n\t\t\t\t\tdata[ aLast.replace(__reArray, '') ] = val;\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\treturn function (data, val) { // meta is also passed in, but not used\n\t\t\t\treturn setData( data, val, mSource );\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t/* Array or flat object mapping */\n\t\t\treturn function (data, val) { // meta is also passed in, but not used\n\t\t\t\tdata[mSource] = val;\n\t\t\t};\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Return an array with the full table data\n\t *  @param {object} oSettings dataTables settings object\n\t *  @returns array {array} aData Master data array\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetDataMaster ( settings )\n\t{\n\t\treturn _pluck( settings.aoData, '_aData' );\n\t}\n\t\n\t\n\t/**\n\t * Nuke the table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnClearTable( settings )\n\t{\n\t\tsettings.aoData.length = 0;\n\t\tsettings.aiDisplayMaster.length = 0;\n\t\tsettings.aiDisplay.length = 0;\n\t}\n\t\n\t\n\t /**\n\t * Take an array of integers (index array) and remove a target integer (value - not\n\t * the key!)\n\t *  @param {array} a Index array to target\n\t *  @param {int} iTarget value to find\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnDeleteIndex( a, iTarget, splice )\n\t{\n\t\tvar iTargetIndex = -1;\n\t\n\t\tfor ( var i=0, iLen=a.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tif ( a[i] == iTarget )\n\t\t\t{\n\t\t\t\tiTargetIndex = i;\n\t\t\t}\n\t\t\telse if ( a[i] > iTarget )\n\t\t\t{\n\t\t\t\ta[i]--;\n\t\t\t}\n\t\t}\n\t\n\t\tif ( iTargetIndex != -1 && splice === undefined )\n\t\t{\n\t\t\ta.splice( iTargetIndex, 1 );\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Mark cached data as invalid such that a re-read of the data will occur when\n\t * the cached data is next requested. Also update from the data source object.\n\t *\n\t * @param {object} settings DataTables settings object\n\t * @param {int}    rowIdx   Row index to invalidate\n\t * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'\n\t *     or 'data'\n\t * @param {int}    [colIdx] Column index to invalidate. If undefined the whole\n\t *     row will be invalidated\n\t * @memberof DataTable#oApi\n\t *\n\t * @todo For the modularisation of v1.11 this will need to become a callback, so\n\t *   the sort and filter methods can subscribe to it. That will required\n\t *   initialisation options for sorting, which is why it is not already baked in\n\t */\n\tfunction _fnInvalidate( settings, rowIdx, src, colIdx )\n\t{\n\t\tvar row = settings.aoData[ rowIdx ];\n\t\tvar i, ien;\n\t\tvar cellWrite = function ( cell, col ) {\n\t\t\t// This is very frustrating, but in IE if you just write directly\n\t\t\t// to innerHTML, and elements that are overwritten are GC'ed,\n\t\t\t// even if there is a reference to them elsewhere\n\t\t\twhile ( cell.childNodes.length ) {\n\t\t\t\tcell.removeChild( cell.firstChild );\n\t\t\t}\n\t\n\t\t\tcell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );\n\t\t};\n\t\n\t\t// Are we reading last data from DOM or the data object?\n\t\tif ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {\n\t\t\t// Read the data from the DOM\n\t\t\trow._aData = _fnGetRowElements(\n\t\t\t\t\tsettings, row, colIdx, colIdx === undefined ? undefined : row._aData\n\t\t\t\t)\n\t\t\t\t.data;\n\t\t}\n\t\telse {\n\t\t\t// Reading from data object, update the DOM\n\t\t\tvar cells = row.anCells;\n\t\n\t\t\tif ( cells ) {\n\t\t\t\tif ( colIdx !== undefined ) {\n\t\t\t\t\tcellWrite( cells[colIdx], colIdx );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfor ( i=0, ien=cells.length ; i<ien ; i++ ) {\n\t\t\t\t\t\tcellWrite( cells[i], i );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t// For both row and cell invalidation, the cached data for sorting and\n\t\t// filtering is nulled out\n\t\trow._aSortData = null;\n\t\trow._aFilterData = null;\n\t\n\t\t// Invalidate the type for a specific column (if given) or all columns since\n\t\t// the data might have changed\n\t\tvar cols = settings.aoColumns;\n\t\tif ( colIdx !== undefined ) {\n\t\t\tcols[ colIdx ].sType = null;\n\t\t}\n\t\telse {\n\t\t\tfor ( i=0, ien=cols.length ; i<ien ; i++ ) {\n\t\t\t\tcols[i].sType = null;\n\t\t\t}\n\t\n\t\t\t// Update DataTables special `DT_*` attributes for the row\n\t\t\t_fnRowAttributes( row );\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Build a data source object from an HTML row, reading the contents of the\n\t * cells that are in the row.\n\t *\n\t * @param {object} settings DataTables settings object\n\t * @param {node|object} TR element from which to read data or existing row\n\t *   object from which to re-read the data from the cells\n\t * @param {int} [colIdx] Optional column index\n\t * @param {array|object} [d] Data source object. If `colIdx` is given then this\n\t *   parameter should also be given and will be used to write the data into.\n\t *   Only the column in question will be written\n\t * @returns {object} Object with two parameters: `data` the data read, in\n\t *   document order, and `cells` and array of nodes (they can be useful to the\n\t *   caller, so rather than needing a second traversal to get them, just return\n\t *   them from here).\n\t * @memberof DataTable#oApi\n\t */\n\tfunction _fnGetRowElements( settings, row, colIdx, d )\n\t{\n\t\tvar\n\t\t\ttds = [],\n\t\t\ttd = row.firstChild,\n\t\t\tname, col, o, i=0, contents,\n\t\t\tcolumns = settings.aoColumns,\n\t\t\tobjectRead = settings._rowReadObject;\n\t\n\t\t// Allow the data object to be passed in, or construct\n\t\td = d || objectRead ? {} : [];\n\t\n\t\tvar attr = function ( str, td  ) {\n\t\t\tif ( typeof str === 'string' ) {\n\t\t\t\tvar idx = str.indexOf('@');\n\t\n\t\t\t\tif ( idx !== -1 ) {\n\t\t\t\t\tvar attr = str.substring( idx+1 );\n\t\t\t\t\tvar setter = _fnSetObjectDataFn( str );\n\t\t\t\t\tsetter( d, td.getAttribute( attr ) );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\t// Read data from a cell and store into the data object\n\t\tvar cellProcess = function ( cell ) {\n\t\t\tif ( colIdx === undefined || colIdx === i ) {\n\t\t\t\tcol = columns[i];\n\t\t\t\tcontents = $.trim(cell.innerHTML);\n\t\n\t\t\t\tif ( col && col._bAttrSrc ) {\n\t\t\t\t\tvar setter = _fnSetObjectDataFn( col.mData._ );\n\t\t\t\t\tsetter( d, contents );\n\t\n\t\t\t\t\tattr( col.mData.sort, cell );\n\t\t\t\t\tattr( col.mData.type, cell );\n\t\t\t\t\tattr( col.mData.filter, cell );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Depending on the `data` option for the columns the data can\n\t\t\t\t\t// be read to either an object or an array.\n\t\t\t\t\tif ( objectRead ) {\n\t\t\t\t\t\tif ( ! col._setter ) {\n\t\t\t\t\t\t\t// Cache the setter function\n\t\t\t\t\t\t\tcol._setter = _fnSetObjectDataFn( col.mData );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcol._setter( d, contents );\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\td[i] = contents;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\ti++;\n\t\t};\n\t\n\t\tif ( td ) {\n\t\t\t// `tr` element was passed in\n\t\t\twhile ( td ) {\n\t\t\t\tname = td.nodeName.toUpperCase();\n\t\n\t\t\t\tif ( name == \"TD\" || name == \"TH\" ) {\n\t\t\t\t\tcellProcess( td );\n\t\t\t\t\ttds.push( td );\n\t\t\t\t}\n\t\n\t\t\t\ttd = td.nextSibling;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Existing row object passed in\n\t\t\ttds = row.anCells;\n\t\t\t\n\t\t\tfor ( var j=0, jen=tds.length ; j<jen ; j++ ) {\n\t\t\t\tcellProcess( tds[j] );\n\t\t\t}\n\t\t}\n\t\n\t\treturn {\n\t\t\tdata: d,\n\t\t\tcells: tds\n\t\t};\n\t}\n\t/**\n\t * Create a new TR element (and it's TD children) for a row\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {int} iRow Row to consider\n\t *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,\n\t *    DataTables will create a row automatically\n\t *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n\t *    if nTr is.\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnCreateTr ( oSettings, iRow, nTrIn, anTds )\n\t{\n\t\tvar\n\t\t\trow = oSettings.aoData[iRow],\n\t\t\trowData = row._aData,\n\t\t\tcells = [],\n\t\t\tnTr, nTd, oCol,\n\t\t\ti, iLen;\n\t\n\t\tif ( row.nTr === null )\n\t\t{\n\t\t\tnTr = nTrIn || document.createElement('tr');\n\t\n\t\t\trow.nTr = nTr;\n\t\t\trow.anCells = cells;\n\t\n\t\t\t/* Use a private property on the node to allow reserve mapping from the node\n\t\t\t * to the aoData array for fast look up\n\t\t\t */\n\t\t\tnTr._DT_RowIndex = iRow;\n\t\n\t\t\t/* Special parameters can be given by the data source to be used on the row */\n\t\t\t_fnRowAttributes( row );\n\t\n\t\t\t/* Process each column */\n\t\t\tfor ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\toCol = oSettings.aoColumns[i];\n\t\n\t\t\t\tnTd = nTrIn ? anTds[i] : document.createElement( oCol.sCellType );\n\t\t\t\tcells.push( nTd );\n\t\n\t\t\t\t// Need to create the HTML if new, or if a rendering function is defined\n\t\t\t\tif ( !nTrIn || oCol.mRender || oCol.mData !== i )\n\t\t\t\t{\n\t\t\t\t\tnTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );\n\t\t\t\t}\n\t\n\t\t\t\t/* Add user defined class */\n\t\t\t\tif ( oCol.sClass )\n\t\t\t\t{\n\t\t\t\t\tnTd.className += ' '+oCol.sClass;\n\t\t\t\t}\n\t\n\t\t\t\t// Visibility - add or remove as required\n\t\t\t\tif ( oCol.bVisible && ! nTrIn )\n\t\t\t\t{\n\t\t\t\t\tnTr.appendChild( nTd );\n\t\t\t\t}\n\t\t\t\telse if ( ! oCol.bVisible && nTrIn )\n\t\t\t\t{\n\t\t\t\t\tnTd.parentNode.removeChild( nTd );\n\t\t\t\t}\n\t\n\t\t\t\tif ( oCol.fnCreatedCell )\n\t\t\t\t{\n\t\t\t\t\toCol.fnCreatedCell.call( oSettings.oInstance,\n\t\t\t\t\t\tnTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t_fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow] );\n\t\t}\n\t\n\t\t// Remove once webkit bug 131819 and Chromium bug 365619 have been resolved\n\t\t// and deployed\n\t\trow.nTr.setAttribute( 'role', 'row' );\n\t}\n\t\n\t\n\t/**\n\t * Add attributes to a row based on the special `DT_*` parameters in a data\n\t * source object.\n\t *  @param {object} DataTables row object for the row to be modified\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnRowAttributes( row )\n\t{\n\t\tvar tr = row.nTr;\n\t\tvar data = row._aData;\n\t\n\t\tif ( tr ) {\n\t\t\tif ( data.DT_RowId ) {\n\t\t\t\ttr.id = data.DT_RowId;\n\t\t\t}\n\t\n\t\t\tif ( data.DT_RowClass ) {\n\t\t\t\t// Remove any classes added by DT_RowClass before\n\t\t\t\tvar a = data.DT_RowClass.split(' ');\n\t\t\t\trow.__rowc = row.__rowc ?\n\t\t\t\t\t_unique( row.__rowc.concat( a ) ) :\n\t\t\t\t\ta;\n\t\n\t\t\t\t$(tr)\n\t\t\t\t\t.removeClass( row.__rowc.join(' ') )\n\t\t\t\t\t.addClass( data.DT_RowClass );\n\t\t\t}\n\t\n\t\t\tif ( data.DT_RowAttr ) {\n\t\t\t\t$(tr).attr( data.DT_RowAttr );\n\t\t\t}\n\t\n\t\t\tif ( data.DT_RowData ) {\n\t\t\t\t$(tr).data( data.DT_RowData );\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Create the HTML header for the table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnBuildHead( oSettings )\n\t{\n\t\tvar i, ien, cell, row, column;\n\t\tvar thead = oSettings.nTHead;\n\t\tvar tfoot = oSettings.nTFoot;\n\t\tvar createHeader = $('th, td', thead).length === 0;\n\t\tvar classes = oSettings.oClasses;\n\t\tvar columns = oSettings.aoColumns;\n\t\n\t\tif ( createHeader ) {\n\t\t\trow = $('<tr/>').appendTo( thead );\n\t\t}\n\t\n\t\tfor ( i=0, ien=columns.length ; i<ien ; i++ ) {\n\t\t\tcolumn = columns[i];\n\t\t\tcell = $( column.nTh ).addClass( column.sClass );\n\t\n\t\t\tif ( createHeader ) {\n\t\t\t\tcell.appendTo( row );\n\t\t\t}\n\t\n\t\t\t// 1.11 move into sorting\n\t\t\tif ( oSettings.oFeatures.bSort ) {\n\t\t\t\tcell.addClass( column.sSortingClass );\n\t\n\t\t\t\tif ( column.bSortable !== false ) {\n\t\t\t\t\tcell\n\t\t\t\t\t\t.attr( 'tabindex', oSettings.iTabIndex )\n\t\t\t\t\t\t.attr( 'aria-controls', oSettings.sTableId );\n\t\n\t\t\t\t\t_fnSortAttachListener( oSettings, column.nTh, i );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif ( column.sTitle != cell.html() ) {\n\t\t\t\tcell.html( column.sTitle );\n\t\t\t}\n\t\n\t\t\t_fnRenderer( oSettings, 'header' )(\n\t\t\t\toSettings, cell, column, classes\n\t\t\t);\n\t\t}\n\t\n\t\tif ( createHeader ) {\n\t\t\t_fnDetectHeader( oSettings.aoHeader, thead );\n\t\t}\n\t\t\n\t\t/* ARIA role for the rows */\n\t \t$(thead).find('>tr').attr('role', 'row');\n\t\n\t\t/* Deal with the footer - add classes if required */\n\t\t$(thead).find('>tr>th, >tr>td').addClass( classes.sHeaderTH );\n\t\t$(tfoot).find('>tr>th, >tr>td').addClass( classes.sFooterTH );\n\t\n\t\t// Cache the footer cells. Note that we only take the cells from the first\n\t\t// row in the footer. If there is more than one row the user wants to\n\t\t// interact with, they need to use the table().foot() method. Note also this\n\t\t// allows cells to be used for multiple columns using colspan\n\t\tif ( tfoot !== null ) {\n\t\t\tvar cells = oSettings.aoFooter[0];\n\t\n\t\t\tfor ( i=0, ien=cells.length ; i<ien ; i++ ) {\n\t\t\t\tcolumn = columns[i];\n\t\t\t\tcolumn.nTf = cells[i].cell;\n\t\n\t\t\t\tif ( column.sClass ) {\n\t\t\t\t\t$(column.nTf).addClass( column.sClass );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Draw the header (or footer) element based on the column visibility states. The\n\t * methodology here is to use the layout array from _fnDetectHeader, modified for\n\t * the instantaneous column visibility, to construct the new layout. The grid is\n\t * traversed over cell at a time in a rows x columns grid fashion, although each\n\t * cell insert can cover multiple elements in the grid - which is tracks using the\n\t * aApplied array. Cell inserts in the grid will only occur where there isn't\n\t * already a cell in that position.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param array {objects} aoSource Layout array from _fnDetectHeader\n\t *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnDrawHead( oSettings, aoSource, bIncludeHidden )\n\t{\n\t\tvar i, iLen, j, jLen, k, kLen, n, nLocalTr;\n\t\tvar aoLocal = [];\n\t\tvar aApplied = [];\n\t\tvar iColumns = oSettings.aoColumns.length;\n\t\tvar iRowspan, iColspan;\n\t\n\t\tif ( ! aoSource )\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\n\t\tif (  bIncludeHidden === undefined )\n\t\t{\n\t\t\tbIncludeHidden = false;\n\t\t}\n\t\n\t\t/* Make a copy of the master layout array, but without the visible columns in it */\n\t\tfor ( i=0, iLen=aoSource.length ; i<iLen ; i++ )\n\t\t{\n\t\t\taoLocal[i] = aoSource[i].slice();\n\t\t\taoLocal[i].nTr = aoSource[i].nTr;\n\t\n\t\t\t/* Remove any columns which are currently hidden */\n\t\t\tfor ( j=iColumns-1 ; j>=0 ; j-- )\n\t\t\t{\n\t\t\t\tif ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )\n\t\t\t\t{\n\t\t\t\t\taoLocal[i].splice( j, 1 );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t/* Prep the applied array - it needs an element for each row */\n\t\t\taApplied.push( [] );\n\t\t}\n\t\n\t\tfor ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tnLocalTr = aoLocal[i].nTr;\n\t\n\t\t\t/* All cells are going to be replaced, so empty out the row */\n\t\t\tif ( nLocalTr )\n\t\t\t{\n\t\t\t\twhile( (n = nLocalTr.firstChild) )\n\t\t\t\t{\n\t\t\t\t\tnLocalTr.removeChild( n );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfor ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )\n\t\t\t{\n\t\t\t\tiRowspan = 1;\n\t\t\t\tiColspan = 1;\n\t\n\t\t\t\t/* Check to see if there is already a cell (row/colspan) covering our target\n\t\t\t\t * insert point. If there is, then there is nothing to do.\n\t\t\t\t */\n\t\t\t\tif ( aApplied[i][j] === undefined )\n\t\t\t\t{\n\t\t\t\t\tnLocalTr.appendChild( aoLocal[i][j].cell );\n\t\t\t\t\taApplied[i][j] = 1;\n\t\n\t\t\t\t\t/* Expand the cell to cover as many rows as needed */\n\t\t\t\t\twhile ( aoLocal[i+iRowspan] !== undefined &&\n\t\t\t\t\t        aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )\n\t\t\t\t\t{\n\t\t\t\t\t\taApplied[i+iRowspan][j] = 1;\n\t\t\t\t\t\tiRowspan++;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t/* Expand the cell to cover as many columns as needed */\n\t\t\t\t\twhile ( aoLocal[i][j+iColspan] !== undefined &&\n\t\t\t\t\t        aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )\n\t\t\t\t\t{\n\t\t\t\t\t\t/* Must update the applied array over the rows for the columns */\n\t\t\t\t\t\tfor ( k=0 ; k<iRowspan ; k++ )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taApplied[i+k][j+iColspan] = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tiColspan++;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t/* Do the actual expansion in the DOM */\n\t\t\t\t\t$(aoLocal[i][j].cell)\n\t\t\t\t\t\t.attr('rowspan', iRowspan)\n\t\t\t\t\t\t.attr('colspan', iColspan);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Insert the required TR nodes into the table for display\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnDraw( oSettings )\n\t{\n\t\t/* Provide a pre-callback function which can be used to cancel the draw is false is returned */\n\t\tvar aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );\n\t\tif ( $.inArray( false, aPreDraw ) !== -1 )\n\t\t{\n\t\t\t_fnProcessingDisplay( oSettings, false );\n\t\t\treturn;\n\t\t}\n\t\n\t\tvar i, iLen, n;\n\t\tvar anRows = [];\n\t\tvar iRowCount = 0;\n\t\tvar asStripeClasses = oSettings.asStripeClasses;\n\t\tvar iStripes = asStripeClasses.length;\n\t\tvar iOpenRows = oSettings.aoOpenRows.length;\n\t\tvar oLang = oSettings.oLanguage;\n\t\tvar iInitDisplayStart = oSettings.iInitDisplayStart;\n\t\tvar bServerSide = _fnDataSource( oSettings ) == 'ssp';\n\t\tvar aiDisplay = oSettings.aiDisplay;\n\t\n\t\toSettings.bDrawing = true;\n\t\n\t\t/* Check and see if we have an initial draw position from state saving */\n\t\tif ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )\n\t\t{\n\t\t\toSettings._iDisplayStart = bServerSide ?\n\t\t\t\tiInitDisplayStart :\n\t\t\t\tiInitDisplayStart >= oSettings.fnRecordsDisplay() ?\n\t\t\t\t\t0 :\n\t\t\t\t\tiInitDisplayStart;\n\t\n\t\t\toSettings.iInitDisplayStart = -1;\n\t\t}\n\t\n\t\tvar iDisplayStart = oSettings._iDisplayStart;\n\t\tvar iDisplayEnd = oSettings.fnDisplayEnd();\n\t\n\t\t/* Server-side processing draw intercept */\n\t\tif ( oSettings.bDeferLoading )\n\t\t{\n\t\t\toSettings.bDeferLoading = false;\n\t\t\toSettings.iDraw++;\n\t\t\t_fnProcessingDisplay( oSettings, false );\n\t\t}\n\t\telse if ( !bServerSide )\n\t\t{\n\t\t\toSettings.iDraw++;\n\t\t}\n\t\telse if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\n\t\tif ( aiDisplay.length !== 0 )\n\t\t{\n\t\t\tvar iStart = bServerSide ? 0 : iDisplayStart;\n\t\t\tvar iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;\n\t\n\t\t\tfor ( var j=iStart ; j<iEnd ; j++ )\n\t\t\t{\n\t\t\t\tvar iDataIndex = aiDisplay[j];\n\t\t\t\tvar aoData = oSettings.aoData[ iDataIndex ];\n\t\t\t\tif ( aoData.nTr === null )\n\t\t\t\t{\n\t\t\t\t\t_fnCreateTr( oSettings, iDataIndex );\n\t\t\t\t}\n\t\n\t\t\t\tvar nRow = aoData.nTr;\n\t\n\t\t\t\t/* Remove the old striping classes and then add the new one */\n\t\t\t\tif ( iStripes !== 0 )\n\t\t\t\t{\n\t\t\t\t\tvar sStripe = asStripeClasses[ iRowCount % iStripes ];\n\t\t\t\t\tif ( aoData._sRowStripe != sStripe )\n\t\t\t\t\t{\n\t\t\t\t\t\t$(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );\n\t\t\t\t\t\taoData._sRowStripe = sStripe;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t// Row callback functions - might want to manipulate the row\n\t\t\t\t// iRowCount and j are not currently documented. Are they at all\n\t\t\t\t// useful?\n\t\t\t\t_fnCallbackFire( oSettings, 'aoRowCallback', null,\n\t\t\t\t\t[nRow, aoData._aData, iRowCount, j] );\n\t\n\t\t\t\tanRows.push( nRow );\n\t\t\t\tiRowCount++;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t/* Table is empty - create a row with an empty message in it */\n\t\t\tvar sZero = oLang.sZeroRecords;\n\t\t\tif ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )\n\t\t\t{\n\t\t\t\tsZero = oLang.sLoadingRecords;\n\t\t\t}\n\t\t\telse if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )\n\t\t\t{\n\t\t\t\tsZero = oLang.sEmptyTable;\n\t\t\t}\n\t\n\t\t\tanRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )\n\t\t\t\t.append( $('<td />', {\n\t\t\t\t\t'valign':  'top',\n\t\t\t\t\t'colSpan': _fnVisbleColumns( oSettings ),\n\t\t\t\t\t'class':   oSettings.oClasses.sRowEmpty\n\t\t\t\t} ).html( sZero ) )[0];\n\t\t}\n\t\n\t\t/* Header and footer callbacks */\n\t\t_fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],\n\t\t\t_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\n\t\n\t\t_fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],\n\t\t\t_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\n\t\n\t\tvar body = $(oSettings.nTBody);\n\t\n\t\tbody.children().detach();\n\t\tbody.append( $(anRows) );\n\t\n\t\t/* Call all required callback functions for the end of a draw */\n\t\t_fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );\n\t\n\t\t/* Draw is complete, sorting and filtering must be as well */\n\t\toSettings.bSorted = false;\n\t\toSettings.bFiltered = false;\n\t\toSettings.bDrawing = false;\n\t}\n\t\n\t\n\t/**\n\t * Redraw the table - taking account of the various features which are enabled\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {boolean} [holdPosition] Keep the current paging position. By default\n\t *    the paging is reset to the first page\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnReDraw( settings, holdPosition )\n\t{\n\t\tvar\n\t\t\tfeatures = settings.oFeatures,\n\t\t\tsort     = features.bSort,\n\t\t\tfilter   = features.bFilter;\n\t\n\t\tif ( sort ) {\n\t\t\t_fnSort( settings );\n\t\t}\n\t\n\t\tif ( filter ) {\n\t\t\t_fnFilterComplete( settings, settings.oPreviousSearch );\n\t\t}\n\t\telse {\n\t\t\t// No filtering, so we want to just use the display master\n\t\t\tsettings.aiDisplay = settings.aiDisplayMaster.slice();\n\t\t}\n\t\n\t\tif ( holdPosition !== true ) {\n\t\t\tsettings._iDisplayStart = 0;\n\t\t}\n\t\n\t\t// Let any modules know about the draw hold position state (used by\n\t\t// scrolling internally)\n\t\tsettings._drawHold = holdPosition;\n\t\n\t\t_fnDraw( settings );\n\t\n\t\tsettings._drawHold = false;\n\t}\n\t\n\t\n\t/**\n\t * Add the options to the page HTML for the table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAddOptionsHtml ( oSettings )\n\t{\n\t\tvar classes = oSettings.oClasses;\n\t\tvar table = $(oSettings.nTable);\n\t\tvar holding = $('<div/>').insertBefore( table ); // Holding element for speed\n\t\tvar features = oSettings.oFeatures;\n\t\n\t\t// All DataTables are wrapped in a div\n\t\tvar insert = $('<div/>', {\n\t\t\tid:      oSettings.sTableId+'_wrapper',\n\t\t\t'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)\n\t\t} );\n\t\n\t\toSettings.nHolding = holding[0];\n\t\toSettings.nTableWrapper = insert[0];\n\t\toSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;\n\t\n\t\t/* Loop over the user set positioning and place the elements as needed */\n\t\tvar aDom = oSettings.sDom.split('');\n\t\tvar featureNode, cOption, nNewNode, cNext, sAttr, j;\n\t\tfor ( var i=0 ; i<aDom.length ; i++ )\n\t\t{\n\t\t\tfeatureNode = null;\n\t\t\tcOption = aDom[i];\n\t\n\t\t\tif ( cOption == '<' )\n\t\t\t{\n\t\t\t\t/* New container div */\n\t\t\t\tnNewNode = $('<div/>')[0];\n\t\n\t\t\t\t/* Check to see if we should append an id and/or a class name to the container */\n\t\t\t\tcNext = aDom[i+1];\n\t\t\t\tif ( cNext == \"'\" || cNext == '\"' )\n\t\t\t\t{\n\t\t\t\t\tsAttr = \"\";\n\t\t\t\t\tj = 2;\n\t\t\t\t\twhile ( aDom[i+j] != cNext )\n\t\t\t\t\t{\n\t\t\t\t\t\tsAttr += aDom[i+j];\n\t\t\t\t\t\tj++;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t/* Replace jQuery UI constants @todo depreciated */\n\t\t\t\t\tif ( sAttr == \"H\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tsAttr = classes.sJUIHeader;\n\t\t\t\t\t}\n\t\t\t\t\telse if ( sAttr == \"F\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tsAttr = classes.sJUIFooter;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t/* The attribute can be in the format of \"#id.class\", \"#id\" or \"class\" This logic\n\t\t\t\t\t * breaks the string into parts and applies them as needed\n\t\t\t\t\t */\n\t\t\t\t\tif ( sAttr.indexOf('.') != -1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tvar aSplit = sAttr.split('.');\n\t\t\t\t\t\tnNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);\n\t\t\t\t\t\tnNewNode.className = aSplit[1];\n\t\t\t\t\t}\n\t\t\t\t\telse if ( sAttr.charAt(0) == \"#\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tnNewNode.id = sAttr.substr(1, sAttr.length-1);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnNewNode.className = sAttr;\n\t\t\t\t\t}\n\t\n\t\t\t\t\ti += j; /* Move along the position array */\n\t\t\t\t}\n\t\n\t\t\t\tinsert.append( nNewNode );\n\t\t\t\tinsert = $(nNewNode);\n\t\t\t}\n\t\t\telse if ( cOption == '>' )\n\t\t\t{\n\t\t\t\t/* End container div */\n\t\t\t\tinsert = insert.parent();\n\t\t\t}\n\t\t\t// @todo Move options into their own plugins?\n\t\t\telse if ( cOption == 'l' && features.bPaginate && features.bLengthChange )\n\t\t\t{\n\t\t\t\t/* Length */\n\t\t\t\tfeatureNode = _fnFeatureHtmlLength( oSettings );\n\t\t\t}\n\t\t\telse if ( cOption == 'f' && features.bFilter )\n\t\t\t{\n\t\t\t\t/* Filter */\n\t\t\t\tfeatureNode = _fnFeatureHtmlFilter( oSettings );\n\t\t\t}\n\t\t\telse if ( cOption == 'r' && features.bProcessing )\n\t\t\t{\n\t\t\t\t/* pRocessing */\n\t\t\t\tfeatureNode = _fnFeatureHtmlProcessing( oSettings );\n\t\t\t}\n\t\t\telse if ( cOption == 't' )\n\t\t\t{\n\t\t\t\t/* Table */\n\t\t\t\tfeatureNode = _fnFeatureHtmlTable( oSettings );\n\t\t\t}\n\t\t\telse if ( cOption ==  'i' && features.bInfo )\n\t\t\t{\n\t\t\t\t/* Info */\n\t\t\t\tfeatureNode = _fnFeatureHtmlInfo( oSettings );\n\t\t\t}\n\t\t\telse if ( cOption == 'p' && features.bPaginate )\n\t\t\t{\n\t\t\t\t/* Pagination */\n\t\t\t\tfeatureNode = _fnFeatureHtmlPaginate( oSettings );\n\t\t\t}\n\t\t\telse if ( DataTable.ext.feature.length !== 0 )\n\t\t\t{\n\t\t\t\t/* Plug-in features */\n\t\t\t\tvar aoFeatures = DataTable.ext.feature;\n\t\t\t\tfor ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )\n\t\t\t\t{\n\t\t\t\t\tif ( cOption == aoFeatures[k].cFeature )\n\t\t\t\t\t{\n\t\t\t\t\t\tfeatureNode = aoFeatures[k].fnInit( oSettings );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t/* Add to the 2D features array */\n\t\t\tif ( featureNode )\n\t\t\t{\n\t\t\t\tvar aanFeatures = oSettings.aanFeatures;\n\t\n\t\t\t\tif ( ! aanFeatures[cOption] )\n\t\t\t\t{\n\t\t\t\t\taanFeatures[cOption] = [];\n\t\t\t\t}\n\t\n\t\t\t\taanFeatures[cOption].push( featureNode );\n\t\t\t\tinsert.append( featureNode );\n\t\t\t}\n\t\t}\n\t\n\t\t/* Built our DOM structure - replace the holding div with what we want */\n\t\tholding.replaceWith( insert );\n\t}\n\t\n\t\n\t/**\n\t * Use the DOM source to create up an array of header cells. The idea here is to\n\t * create a layout grid (array) of rows x columns, which contains a reference\n\t * to the cell that that point in the grid (regardless of col/rowspan), such that\n\t * any column / row could be removed and the new grid constructed\n\t *  @param array {object} aLayout Array to store the calculated layout in\n\t *  @param {node} nThead The header/footer element for the table\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnDetectHeader ( aLayout, nThead )\n\t{\n\t\tvar nTrs = $(nThead).children('tr');\n\t\tvar nTr, nCell;\n\t\tvar i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;\n\t\tvar bUnique;\n\t\tvar fnShiftCol = function ( a, i, j ) {\n\t\t\tvar k = a[i];\n\t                while ( k[j] ) {\n\t\t\t\tj++;\n\t\t\t}\n\t\t\treturn j;\n\t\t};\n\t\n\t\taLayout.splice( 0, aLayout.length );\n\t\n\t\t/* We know how many rows there are in the layout - so prep it */\n\t\tfor ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\n\t\t{\n\t\t\taLayout.push( [] );\n\t\t}\n\t\n\t\t/* Calculate a layout array */\n\t\tfor ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tnTr = nTrs[i];\n\t\t\tiColumn = 0;\n\t\n\t\t\t/* For every cell in the row... */\n\t\t\tnCell = nTr.firstChild;\n\t\t\twhile ( nCell ) {\n\t\t\t\tif ( nCell.nodeName.toUpperCase() == \"TD\" ||\n\t\t\t\t     nCell.nodeName.toUpperCase() == \"TH\" )\n\t\t\t\t{\n\t\t\t\t\t/* Get the col and rowspan attributes from the DOM and sanitise them */\n\t\t\t\t\tiColspan = nCell.getAttribute('colspan') * 1;\n\t\t\t\t\tiRowspan = nCell.getAttribute('rowspan') * 1;\n\t\t\t\t\tiColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;\n\t\t\t\t\tiRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;\n\t\n\t\t\t\t\t/* There might be colspan cells already in this row, so shift our target\n\t\t\t\t\t * accordingly\n\t\t\t\t\t */\n\t\t\t\t\tiColShifted = fnShiftCol( aLayout, i, iColumn );\n\t\n\t\t\t\t\t/* Cache calculation for unique columns */\n\t\t\t\t\tbUnique = iColspan === 1 ? true : false;\n\t\n\t\t\t\t\t/* If there is col / rowspan, copy the information into the layout grid */\n\t\t\t\t\tfor ( l=0 ; l<iColspan ; l++ )\n\t\t\t\t\t{\n\t\t\t\t\t\tfor ( k=0 ; k<iRowspan ; k++ )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taLayout[i+k][iColShifted+l] = {\n\t\t\t\t\t\t\t\t\"cell\": nCell,\n\t\t\t\t\t\t\t\t\"unique\": bUnique\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\taLayout[i+k].nTr = nTr;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnCell = nCell.nextSibling;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Get an array of unique th elements, one for each column\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {node} nHeader automatically detect the layout from this node - optional\n\t *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional\n\t *  @returns array {node} aReturn list of unique th's\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetUniqueThs ( oSettings, nHeader, aLayout )\n\t{\n\t\tvar aReturn = [];\n\t\tif ( !aLayout )\n\t\t{\n\t\t\taLayout = oSettings.aoHeader;\n\t\t\tif ( nHeader )\n\t\t\t{\n\t\t\t\taLayout = [];\n\t\t\t\t_fnDetectHeader( aLayout, nHeader );\n\t\t\t}\n\t\t}\n\t\n\t\tfor ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tfor ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )\n\t\t\t{\n\t\t\t\tif ( aLayout[i][j].unique &&\n\t\t\t\t\t (!aReturn[j] || !oSettings.bSortCellsTop) )\n\t\t\t\t{\n\t\t\t\t\taReturn[j] = aLayout[i][j].cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn aReturn;\n\t}\n\t\n\t/**\n\t * Create an Ajax call based on the table's settings, taking into account that\n\t * parameters can have multiple forms, and backwards compatibility.\n\t *\n\t * @param {object} oSettings dataTables settings object\n\t * @param {array} data Data to send to the server, required by\n\t *     DataTables - may be augmented by developer callbacks\n\t * @param {function} fn Callback function to run when data is obtained\n\t */\n\tfunction _fnBuildAjax( oSettings, data, fn )\n\t{\n\t\t// Compatibility with 1.9-, allow fnServerData and event to manipulate\n\t\t_fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );\n\t\n\t\t// Convert to object based for 1.10+ if using the old array scheme which can\n\t\t// come from server-side processing or serverParams\n\t\tif ( data && $.isArray(data) ) {\n\t\t\tvar tmp = {};\n\t\t\tvar rbracket = /(.*?)\\[\\]$/;\n\t\n\t\t\t$.each( data, function (key, val) {\n\t\t\t\tvar match = val.name.match(rbracket);\n\t\n\t\t\t\tif ( match ) {\n\t\t\t\t\t// Support for arrays\n\t\t\t\t\tvar name = match[0];\n\t\n\t\t\t\t\tif ( ! tmp[ name ] ) {\n\t\t\t\t\t\ttmp[ name ] = [];\n\t\t\t\t\t}\n\t\t\t\t\ttmp[ name ].push( val.value );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttmp[val.name] = val.value;\n\t\t\t\t}\n\t\t\t} );\n\t\t\tdata = tmp;\n\t\t}\n\t\n\t\tvar ajaxData;\n\t\tvar ajax = oSettings.ajax;\n\t\tvar instance = oSettings.oInstance;\n\t\tvar callback = function ( json ) {\n\t\t\t_fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR] );\n\t\t\tfn( json );\n\t\t};\n\t\n\t\tif ( $.isPlainObject( ajax ) && ajax.data )\n\t\t{\n\t\t\tajaxData = ajax.data;\n\t\n\t\t\tvar newData = $.isFunction( ajaxData ) ?\n\t\t\t\tajaxData( data, oSettings ) :  // fn can manipulate data or return\n\t\t\t\tajaxData;                      // an object object or array to merge\n\t\n\t\t\t// If the function returned something, use that alone\n\t\t\tdata = $.isFunction( ajaxData ) && newData ?\n\t\t\t\tnewData :\n\t\t\t\t$.extend( true, data, newData );\n\t\n\t\t\t// Remove the data property as we've resolved it already and don't want\n\t\t\t// jQuery to do it again (it is restored at the end of the function)\n\t\t\tdelete ajax.data;\n\t\t}\n\t\n\t\tvar baseAjax = {\n\t\t\t\"data\": data,\n\t\t\t\"success\": function (json) {\n\t\t\t\tvar error = json.error || json.sError;\n\t\t\t\tif ( error ) {\n\t\t\t\t\t_fnLog( oSettings, 0, error );\n\t\t\t\t}\n\t\n\t\t\t\toSettings.json = json;\n\t\t\t\tcallback( json );\n\t\t\t},\n\t\t\t\"dataType\": \"json\",\n\t\t\t\"cache\": false,\n\t\t\t\"type\": oSettings.sServerMethod,\n\t\t\t\"error\": function (xhr, error, thrown) {\n\t\t\t\tvar ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR] );\n\t\n\t\t\t\tif ( $.inArray( true, ret ) === -1 ) {\n\t\t\t\t\tif ( error == \"parsererror\" ) {\n\t\t\t\t\t\t_fnLog( oSettings, 0, 'Invalid JSON response', 1 );\n\t\t\t\t\t}\n\t\t\t\t\telse if ( xhr.readyState === 4 ) {\n\t\t\t\t\t\t_fnLog( oSettings, 0, 'Ajax error', 7 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t_fnProcessingDisplay( oSettings, false );\n\t\t\t}\n\t\t};\n\t\n\t\t// Store the data submitted for the API\n\t\toSettings.oAjaxData = data;\n\t\n\t\t// Allow plug-ins and external processes to modify the data\n\t\t_fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );\n\t\n\t\tif ( oSettings.fnServerData )\n\t\t{\n\t\t\t// DataTables 1.9- compatibility\n\t\t\toSettings.fnServerData.call( instance,\n\t\t\t\toSettings.sAjaxSource,\n\t\t\t\t$.map( data, function (val, key) { // Need to convert back to 1.9 trad format\n\t\t\t\t\treturn { name: key, value: val };\n\t\t\t\t} ),\n\t\t\t\tcallback,\n\t\t\t\toSettings\n\t\t\t);\n\t\t}\n\t\telse if ( oSettings.sAjaxSource || typeof ajax === 'string' )\n\t\t{\n\t\t\t// DataTables 1.9- compatibility\n\t\t\toSettings.jqXHR = $.ajax( $.extend( baseAjax, {\n\t\t\t\turl: ajax || oSettings.sAjaxSource\n\t\t\t} ) );\n\t\t}\n\t\telse if ( $.isFunction( ajax ) )\n\t\t{\n\t\t\t// Is a function - let the caller define what needs to be done\n\t\t\toSettings.jqXHR = ajax.call( instance, data, callback, oSettings );\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Object to extend the base settings\n\t\t\toSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );\n\t\n\t\t\t// Restore for next time around\n\t\t\tajax.data = ajaxData;\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Update the table using an Ajax call\n\t *  @param {object} settings dataTables settings object\n\t *  @returns {boolean} Block the table drawing or not\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAjaxUpdate( settings )\n\t{\n\t\tif ( settings.bAjaxDataGet ) {\n\t\t\tsettings.iDraw++;\n\t\t\t_fnProcessingDisplay( settings, true );\n\t\n\t\t\t_fnBuildAjax(\n\t\t\t\tsettings,\n\t\t\t\t_fnAjaxParameters( settings ),\n\t\t\t\tfunction(json) {\n\t\t\t\t\t_fnAjaxUpdateDraw( settings, json );\n\t\t\t\t}\n\t\t\t);\n\t\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\t\n\t\n\t/**\n\t * Build up the parameters in an object needed for a server-side processing\n\t * request. Note that this is basically done twice, is different ways - a modern\n\t * method which is used by default in DataTables 1.10 which uses objects and\n\t * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if\n\t * the sAjaxSource option is used in the initialisation, or the legacyAjax\n\t * option is set.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @returns {bool} block the table drawing or not\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAjaxParameters( settings )\n\t{\n\t\tvar\n\t\t\tcolumns = settings.aoColumns,\n\t\t\tcolumnCount = columns.length,\n\t\t\tfeatures = settings.oFeatures,\n\t\t\tpreSearch = settings.oPreviousSearch,\n\t\t\tpreColSearch = settings.aoPreSearchCols,\n\t\t\ti, data = [], dataProp, column, columnSearch,\n\t\t\tsort = _fnSortFlatten( settings ),\n\t\t\tdisplayStart = settings._iDisplayStart,\n\t\t\tdisplayLength = features.bPaginate !== false ?\n\t\t\t\tsettings._iDisplayLength :\n\t\t\t\t-1;\n\t\n\t\tvar param = function ( name, value ) {\n\t\t\tdata.push( { 'name': name, 'value': value } );\n\t\t};\n\t\n\t\t// DataTables 1.9- compatible method\n\t\tparam( 'sEcho',          settings.iDraw );\n\t\tparam( 'iColumns',       columnCount );\n\t\tparam( 'sColumns',       _pluck( columns, 'sName' ).join(',') );\n\t\tparam( 'iDisplayStart',  displayStart );\n\t\tparam( 'iDisplayLength', displayLength );\n\t\n\t\t// DataTables 1.10+ method\n\t\tvar d = {\n\t\t\tdraw:    settings.iDraw,\n\t\t\tcolumns: [],\n\t\t\torder:   [],\n\t\t\tstart:   displayStart,\n\t\t\tlength:  displayLength,\n\t\t\tsearch:  {\n\t\t\t\tvalue: preSearch.sSearch,\n\t\t\t\tregex: preSearch.bRegex\n\t\t\t}\n\t\t};\n\t\n\t\tfor ( i=0 ; i<columnCount ; i++ ) {\n\t\t\tcolumn = columns[i];\n\t\t\tcolumnSearch = preColSearch[i];\n\t\t\tdataProp = typeof column.mData==\"function\" ? 'function' : column.mData ;\n\t\n\t\t\td.columns.push( {\n\t\t\t\tdata:       dataProp,\n\t\t\t\tname:       column.sName,\n\t\t\t\tsearchable: column.bSearchable,\n\t\t\t\torderable:  column.bSortable,\n\t\t\t\tsearch:     {\n\t\t\t\t\tvalue: columnSearch.sSearch,\n\t\t\t\t\tregex: columnSearch.bRegex\n\t\t\t\t}\n\t\t\t} );\n\t\n\t\t\tparam( \"mDataProp_\"+i, dataProp );\n\t\n\t\t\tif ( features.bFilter ) {\n\t\t\t\tparam( 'sSearch_'+i,     columnSearch.sSearch );\n\t\t\t\tparam( 'bRegex_'+i,      columnSearch.bRegex );\n\t\t\t\tparam( 'bSearchable_'+i, column.bSearchable );\n\t\t\t}\n\t\n\t\t\tif ( features.bSort ) {\n\t\t\t\tparam( 'bSortable_'+i, column.bSortable );\n\t\t\t}\n\t\t}\n\t\n\t\tif ( features.bFilter ) {\n\t\t\tparam( 'sSearch', preSearch.sSearch );\n\t\t\tparam( 'bRegex', preSearch.bRegex );\n\t\t}\n\t\n\t\tif ( features.bSort ) {\n\t\t\t$.each( sort, function ( i, val ) {\n\t\t\t\td.order.push( { column: val.col, dir: val.dir } );\n\t\n\t\t\t\tparam( 'iSortCol_'+i, val.col );\n\t\t\t\tparam( 'sSortDir_'+i, val.dir );\n\t\t\t} );\n\t\n\t\t\tparam( 'iSortingCols', sort.length );\n\t\t}\n\t\n\t\t// If the legacy.ajax parameter is null, then we automatically decide which\n\t\t// form to use, based on sAjaxSource\n\t\tvar legacy = DataTable.ext.legacy.ajax;\n\t\tif ( legacy === null ) {\n\t\t\treturn settings.sAjaxSource ? data : d;\n\t\t}\n\t\n\t\t// Otherwise, if legacy has been specified then we use that to decide on the\n\t\t// form\n\t\treturn legacy ? data : d;\n\t}\n\t\n\t\n\t/**\n\t * Data the data from the server (nuking the old) and redraw the table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {object} json json data return from the server.\n\t *  @param {string} json.sEcho Tracking flag for DataTables to match requests\n\t *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering\n\t *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering\n\t *  @param {array} json.aaData The data to display on this page\n\t *  @param {string} [json.sColumns] Column ordering (sName, comma separated)\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAjaxUpdateDraw ( settings, json )\n\t{\n\t\t// v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.\n\t\t// Support both\n\t\tvar compat = function ( old, modern ) {\n\t\t\treturn json[old] !== undefined ? json[old] : json[modern];\n\t\t};\n\t\n\t\tvar data = _fnAjaxDataSrc( settings, json );\n\t\tvar draw            = compat( 'sEcho',                'draw' );\n\t\tvar recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );\n\t\tvar recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );\n\t\n\t\tif ( draw ) {\n\t\t\t// Protect against out of sequence returns\n\t\t\tif ( draw*1 < settings.iDraw ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsettings.iDraw = draw * 1;\n\t\t}\n\t\n\t\t_fnClearTable( settings );\n\t\tsettings._iRecordsTotal   = parseInt(recordsTotal, 10);\n\t\tsettings._iRecordsDisplay = parseInt(recordsFiltered, 10);\n\t\n\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t_fnAddData( settings, data[i] );\n\t\t}\n\t\tsettings.aiDisplay = settings.aiDisplayMaster.slice();\n\t\n\t\tsettings.bAjaxDataGet = false;\n\t\t_fnDraw( settings );\n\t\n\t\tif ( ! settings._bInitComplete ) {\n\t\t\t_fnInitComplete( settings, json );\n\t\t}\n\t\n\t\tsettings.bAjaxDataGet = true;\n\t\t_fnProcessingDisplay( settings, false );\n\t}\n\t\n\t\n\t/**\n\t * Get the data from the JSON data source to use for drawing a table. Using\n\t * `_fnGetObjectDataFn` allows the data to be sourced from a property of the\n\t * source object, or from a processing function.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param  {object} json Data source object / array from the server\n\t *  @return {array} Array of data to use\n\t */\n\tfunction _fnAjaxDataSrc ( oSettings, json )\n\t{\n\t\tvar dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?\n\t\t\toSettings.ajax.dataSrc :\n\t\t\toSettings.sAjaxDataProp; // Compatibility with 1.9-.\n\t\n\t\t// Compatibility with 1.9-. In order to read from aaData, check if the\n\t\t// default has been changed, if not, check for aaData\n\t\tif ( dataSrc === 'data' ) {\n\t\t\treturn json.aaData || json[dataSrc];\n\t\t}\n\t\n\t\treturn dataSrc !== \"\" ?\n\t\t\t_fnGetObjectDataFn( dataSrc )( json ) :\n\t\t\tjson;\n\t}\n\t\n\t/**\n\t * Generate the node required for filtering text\n\t *  @returns {node} Filter control element\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFeatureHtmlFilter ( settings )\n\t{\n\t\tvar classes = settings.oClasses;\n\t\tvar tableId = settings.sTableId;\n\t\tvar language = settings.oLanguage;\n\t\tvar previousSearch = settings.oPreviousSearch;\n\t\tvar features = settings.aanFeatures;\n\t\tvar input = '<input type=\"search\" class=\"'+classes.sFilterInput+'\"/>';\n\t\n\t\tvar str = language.sSearch;\n\t\tstr = str.match(/_INPUT_/) ?\n\t\t\tstr.replace('_INPUT_', input) :\n\t\t\tstr+input;\n\t\n\t\tvar filter = $('<div/>', {\n\t\t\t\t'id': ! features.f ? tableId+'_filter' : null,\n\t\t\t\t'class': classes.sFilter\n\t\t\t} )\n\t\t\t.append( $('<label/>' ).append( str ) );\n\t\n\t\tvar searchFn = function() {\n\t\t\t/* Update all other filter input elements for the new display */\n\t\t\tvar n = features.f;\n\t\t\tvar val = !this.value ? \"\" : this.value; // mental IE8 fix :-(\n\t\n\t\t\t/* Now do the filter */\n\t\t\tif ( val != previousSearch.sSearch ) {\n\t\t\t\t_fnFilterComplete( settings, {\n\t\t\t\t\t\"sSearch\": val,\n\t\t\t\t\t\"bRegex\": previousSearch.bRegex,\n\t\t\t\t\t\"bSmart\": previousSearch.bSmart ,\n\t\t\t\t\t\"bCaseInsensitive\": previousSearch.bCaseInsensitive\n\t\t\t\t} );\n\t\n\t\t\t\t// Need to redraw, without resorting\n\t\t\t\tsettings._iDisplayStart = 0;\n\t\t\t\t_fnDraw( settings );\n\t\t\t}\n\t\t};\n\t\n\t\tvar searchDelay = settings.searchDelay !== null ?\n\t\t\tsettings.searchDelay :\n\t\t\t_fnDataSource( settings ) === 'ssp' ?\n\t\t\t\t400 :\n\t\t\t\t0;\n\t\n\t\tvar jqFilter = $('input', filter)\n\t\t\t.val( previousSearch.sSearch )\n\t\t\t.attr( 'placeholder', language.sSearchPlaceholder )\n\t\t\t.bind(\n\t\t\t\t'keyup.DT search.DT input.DT paste.DT cut.DT',\n\t\t\t\tsearchDelay ?\n\t\t\t\t\t_fnThrottle( searchFn, searchDelay ) :\n\t\t\t\t\tsearchFn\n\t\t\t)\n\t\t\t.bind( 'keypress.DT', function(e) {\n\t\t\t\t/* Prevent form submission */\n\t\t\t\tif ( e.keyCode == 13 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} )\n\t\t\t.attr('aria-controls', tableId);\n\t\n\t\t// Update the input elements whenever the table is filtered\n\t\t$(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {\n\t\t\tif ( settings === s ) {\n\t\t\t\t// IE9 throws an 'unknown error' if document.activeElement is used\n\t\t\t\t// inside an iframe or frame...\n\t\t\t\ttry {\n\t\t\t\t\tif ( jqFilter[0] !== document.activeElement ) {\n\t\t\t\t\t\tjqFilter.val( previousSearch.sSearch );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch ( e ) {}\n\t\t\t}\n\t\t} );\n\t\n\t\treturn filter[0];\n\t}\n\t\n\t\n\t/**\n\t * Filter the table using both the global filter and column based filtering\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {object} oSearch search information\n\t *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFilterComplete ( oSettings, oInput, iForce )\n\t{\n\t\tvar oPrevSearch = oSettings.oPreviousSearch;\n\t\tvar aoPrevSearch = oSettings.aoPreSearchCols;\n\t\tvar fnSaveFilter = function ( oFilter ) {\n\t\t\t/* Save the filtering values */\n\t\t\toPrevSearch.sSearch = oFilter.sSearch;\n\t\t\toPrevSearch.bRegex = oFilter.bRegex;\n\t\t\toPrevSearch.bSmart = oFilter.bSmart;\n\t\t\toPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;\n\t\t};\n\t\tvar fnRegex = function ( o ) {\n\t\t\t// Backwards compatibility with the bEscapeRegex option\n\t\t\treturn o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;\n\t\t};\n\t\n\t\t// Resolve any column types that are unknown due to addition or invalidation\n\t\t// @todo As per sort - can this be moved into an event handler?\n\t\t_fnColumnTypes( oSettings );\n\t\n\t\t/* In server-side processing all filtering is done by the server, so no point hanging around here */\n\t\tif ( _fnDataSource( oSettings ) != 'ssp' )\n\t\t{\n\t\t\t/* Global filter */\n\t\t\t_fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );\n\t\t\tfnSaveFilter( oInput );\n\t\n\t\t\t/* Now do the individual column filter */\n\t\t\tfor ( var i=0 ; i<aoPrevSearch.length ; i++ )\n\t\t\t{\n\t\t\t\t_fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),\n\t\t\t\t\taoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );\n\t\t\t}\n\t\n\t\t\t/* Custom filtering */\n\t\t\t_fnFilterCustom( oSettings );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfnSaveFilter( oInput );\n\t\t}\n\t\n\t\t/* Tell the draw function we have been filtering */\n\t\toSettings.bFiltered = true;\n\t\t_fnCallbackFire( oSettings, null, 'search', [oSettings] );\n\t}\n\t\n\t\n\t/**\n\t * Apply custom filtering functions\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFilterCustom( settings )\n\t{\n\t\tvar filters = DataTable.ext.search;\n\t\tvar displayRows = settings.aiDisplay;\n\t\tvar row, rowIdx;\n\t\n\t\tfor ( var i=0, ien=filters.length ; i<ien ; i++ ) {\n\t\t\tvar rows = [];\n\t\n\t\t\t// Loop over each row and see if it should be included\n\t\t\tfor ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {\n\t\t\t\trowIdx = displayRows[ j ];\n\t\t\t\trow = settings.aoData[ rowIdx ];\n\t\n\t\t\t\tif ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {\n\t\t\t\t\trows.push( rowIdx );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// So the array reference doesn't break set the results into the\n\t\t\t// existing array\n\t\t\tdisplayRows.length = 0;\n\t\t\tdisplayRows.push.apply( displayRows, rows );\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Filter the table on a per-column basis\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {string} sInput string to filter on\n\t *  @param {int} iColumn column to filter\n\t *  @param {bool} bRegex treat search string as a regular expression or not\n\t *  @param {bool} bSmart use smart filtering or not\n\t *  @param {bool} bCaseInsensitive Do case insenstive matching or not\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )\n\t{\n\t\tif ( searchStr === '' ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\tvar data;\n\t\tvar display = settings.aiDisplay;\n\t\tvar rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );\n\t\n\t\tfor ( var i=display.length-1 ; i>=0 ; i-- ) {\n\t\t\tdata = settings.aoData[ display[i] ]._aFilterData[ colIdx ];\n\t\n\t\t\tif ( ! rpSearch.test( data ) ) {\n\t\t\t\tdisplay.splice( i, 1 );\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Filter the data table based on user input and draw the table\n\t *  @param {object} settings dataTables settings object\n\t *  @param {string} input string to filter on\n\t *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)\n\t *  @param {bool} regex treat as a regular expression or not\n\t *  @param {bool} smart perform smart filtering or not\n\t *  @param {bool} caseInsensitive Do case insenstive matching or not\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFilter( settings, input, force, regex, smart, caseInsensitive )\n\t{\n\t\tvar rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );\n\t\tvar prevSearch = settings.oPreviousSearch.sSearch;\n\t\tvar displayMaster = settings.aiDisplayMaster;\n\t\tvar display, invalidated, i;\n\t\n\t\t// Need to take account of custom filtering functions - always filter\n\t\tif ( DataTable.ext.search.length !== 0 ) {\n\t\t\tforce = true;\n\t\t}\n\t\n\t\t// Check if any of the rows were invalidated\n\t\tinvalidated = _fnFilterData( settings );\n\t\n\t\t// If the input is blank - we just want the full data set\n\t\tif ( input.length <= 0 ) {\n\t\t\tsettings.aiDisplay = displayMaster.slice();\n\t\t}\n\t\telse {\n\t\t\t// New search - start from the master array\n\t\t\tif ( invalidated ||\n\t\t\t\t force ||\n\t\t\t\t prevSearch.length > input.length ||\n\t\t\t\t input.indexOf(prevSearch) !== 0 ||\n\t\t\t\t settings.bSorted // On resort, the display master needs to be\n\t\t\t\t                  // re-filtered since indexes will have changed\n\t\t\t) {\n\t\t\t\tsettings.aiDisplay = displayMaster.slice();\n\t\t\t}\n\t\n\t\t\t// Search the display array\n\t\t\tdisplay = settings.aiDisplay;\n\t\n\t\t\tfor ( i=display.length-1 ; i>=0 ; i-- ) {\n\t\t\t\tif ( ! rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {\n\t\t\t\t\tdisplay.splice( i, 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Build a regular expression object suitable for searching a table\n\t *  @param {string} sSearch string to search for\n\t *  @param {bool} bRegex treat as a regular expression or not\n\t *  @param {bool} bSmart perform smart filtering or not\n\t *  @param {bool} bCaseInsensitive Do case insensitive matching or not\n\t *  @returns {RegExp} constructed object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFilterCreateSearch( search, regex, smart, caseInsensitive )\n\t{\n\t\tsearch = regex ?\n\t\t\tsearch :\n\t\t\t_fnEscapeRegex( search );\n\t\t\n\t\tif ( smart ) {\n\t\t\t/* For smart filtering we want to allow the search to work regardless of\n\t\t\t * word order. We also want double quoted text to be preserved, so word\n\t\t\t * order is important - a la google. So this is what we want to\n\t\t\t * generate:\n\t\t\t * \n\t\t\t * ^(?=.*?\\bone\\b)(?=.*?\\btwo three\\b)(?=.*?\\bfour\\b).*$\n\t\t\t */\n\t\t\tvar a = $.map( search.match( /\"[^\"]+\"|[^ ]+/g ) || [''], function ( word ) {\n\t\t\t\tif ( word.charAt(0) === '\"' ) {\n\t\t\t\t\tvar m = word.match( /^\"(.*)\"$/ );\n\t\t\t\t\tword = m ? m[1] : word;\n\t\t\t\t}\n\t\n\t\t\t\treturn word.replace('\"', '');\n\t\t\t} );\n\t\n\t\t\tsearch = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';\n\t\t}\n\t\n\t\treturn new RegExp( search, caseInsensitive ? 'i' : '' );\n\t}\n\t\n\t\n\t/**\n\t * Escape a string such that it can be used in a regular expression\n\t *  @param {string} sVal string to escape\n\t *  @returns {string} escaped string\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnEscapeRegex ( sVal )\n\t{\n\t\treturn sVal.replace( _re_escape_regex, '\\\\$1' );\n\t}\n\t\n\t\n\t\n\tvar __filter_div = $('<div>')[0];\n\tvar __filter_div_textContent = __filter_div.textContent !== undefined;\n\t\n\t// Update the filtering data for each row if needed (by invalidation or first run)\n\tfunction _fnFilterData ( settings )\n\t{\n\t\tvar columns = settings.aoColumns;\n\t\tvar column;\n\t\tvar i, j, ien, jen, filterData, cellData, row;\n\t\tvar fomatters = DataTable.ext.type.search;\n\t\tvar wasInvalidated = false;\n\t\n\t\tfor ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n\t\t\trow = settings.aoData[i];\n\t\n\t\t\tif ( ! row._aFilterData ) {\n\t\t\t\tfilterData = [];\n\t\n\t\t\t\tfor ( j=0, jen=columns.length ; j<jen ; j++ ) {\n\t\t\t\t\tcolumn = columns[j];\n\t\n\t\t\t\t\tif ( column.bSearchable ) {\n\t\t\t\t\t\tcellData = _fnGetCellData( settings, i, j, 'filter' );\n\t\n\t\t\t\t\t\tif ( fomatters[ column.sType ] ) {\n\t\t\t\t\t\t\tcellData = fomatters[ column.sType ]( cellData );\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// Search in DataTables 1.10 is string based. In 1.11 this\n\t\t\t\t\t\t// should be altered to also allow strict type checking.\n\t\t\t\t\t\tif ( cellData === null ) {\n\t\t\t\t\t\t\tcellData = '';\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( typeof cellData !== 'string' && cellData.toString ) {\n\t\t\t\t\t\t\tcellData = cellData.toString();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tcellData = '';\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// If it looks like there is an HTML entity in the string,\n\t\t\t\t\t// attempt to decode it so sorting works as expected. Note that\n\t\t\t\t\t// we could use a single line of jQuery to do this, but the DOM\n\t\t\t\t\t// method used here is much faster http://jsperf.com/html-decode\n\t\t\t\t\tif ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {\n\t\t\t\t\t\t__filter_div.innerHTML = cellData;\n\t\t\t\t\t\tcellData = __filter_div_textContent ?\n\t\t\t\t\t\t\t__filter_div.textContent :\n\t\t\t\t\t\t\t__filter_div.innerText;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( cellData.replace ) {\n\t\t\t\t\t\tcellData = cellData.replace(/[\\r\\n]/g, '');\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfilterData.push( cellData );\n\t\t\t\t}\n\t\n\t\t\t\trow._aFilterData = filterData;\n\t\t\t\trow._sFilterRow = filterData.join('  ');\n\t\t\t\twasInvalidated = true;\n\t\t\t}\n\t\t}\n\t\n\t\treturn wasInvalidated;\n\t}\n\t\n\t\n\t/**\n\t * Convert from the internal Hungarian notation to camelCase for external\n\t * interaction\n\t *  @param {object} obj Object to convert\n\t *  @returns {object} Inverted object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSearchToCamel ( obj )\n\t{\n\t\treturn {\n\t\t\tsearch:          obj.sSearch,\n\t\t\tsmart:           obj.bSmart,\n\t\t\tregex:           obj.bRegex,\n\t\t\tcaseInsensitive: obj.bCaseInsensitive\n\t\t};\n\t}\n\t\n\t\n\t\n\t/**\n\t * Convert from camelCase notation to the internal Hungarian. We could use the\n\t * Hungarian convert function here, but this is cleaner\n\t *  @param {object} obj Object to convert\n\t *  @returns {object} Inverted object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSearchToHung ( obj )\n\t{\n\t\treturn {\n\t\t\tsSearch:          obj.search,\n\t\t\tbSmart:           obj.smart,\n\t\t\tbRegex:           obj.regex,\n\t\t\tbCaseInsensitive: obj.caseInsensitive\n\t\t};\n\t}\n\t\n\t/**\n\t * Generate the node required for the info display\n\t *  @param {object} oSettings dataTables settings object\n\t *  @returns {node} Information element\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFeatureHtmlInfo ( settings )\n\t{\n\t\tvar\n\t\t\ttid = settings.sTableId,\n\t\t\tnodes = settings.aanFeatures.i,\n\t\t\tn = $('<div/>', {\n\t\t\t\t'class': settings.oClasses.sInfo,\n\t\t\t\t'id': ! nodes ? tid+'_info' : null\n\t\t\t} );\n\t\n\t\tif ( ! nodes ) {\n\t\t\t// Update display on each draw\n\t\t\tsettings.aoDrawCallback.push( {\n\t\t\t\t\"fn\": _fnUpdateInfo,\n\t\t\t\t\"sName\": \"information\"\n\t\t\t} );\n\t\n\t\t\tn\n\t\t\t\t.attr( 'role', 'status' )\n\t\t\t\t.attr( 'aria-live', 'polite' );\n\t\n\t\t\t// Table is described by our info div\n\t\t\t$(settings.nTable).attr( 'aria-describedby', tid+'_info' );\n\t\t}\n\t\n\t\treturn n[0];\n\t}\n\t\n\t\n\t/**\n\t * Update the information elements in the display\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnUpdateInfo ( settings )\n\t{\n\t\t/* Show information about the table */\n\t\tvar nodes = settings.aanFeatures.i;\n\t\tif ( nodes.length === 0 ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\tvar\n\t\t\tlang  = settings.oLanguage,\n\t\t\tstart = settings._iDisplayStart+1,\n\t\t\tend   = settings.fnDisplayEnd(),\n\t\t\tmax   = settings.fnRecordsTotal(),\n\t\t\ttotal = settings.fnRecordsDisplay(),\n\t\t\tout   = total ?\n\t\t\t\tlang.sInfo :\n\t\t\t\tlang.sInfoEmpty;\n\t\n\t\tif ( total !== max ) {\n\t\t\t/* Record set after filtering */\n\t\t\tout += ' ' + lang.sInfoFiltered;\n\t\t}\n\t\n\t\t// Convert the macros\n\t\tout += lang.sInfoPostFix;\n\t\tout = _fnInfoMacros( settings, out );\n\t\n\t\tvar callback = lang.fnInfoCallback;\n\t\tif ( callback !== null ) {\n\t\t\tout = callback.call( settings.oInstance,\n\t\t\t\tsettings, start, end, max, total, out\n\t\t\t);\n\t\t}\n\t\n\t\t$(nodes).html( out );\n\t}\n\t\n\t\n\tfunction _fnInfoMacros ( settings, str )\n\t{\n\t\t// When infinite scrolling, we are always starting at 1. _iDisplayStart is used only\n\t\t// internally\n\t\tvar\n\t\t\tformatter  = settings.fnFormatNumber,\n\t\t\tstart      = settings._iDisplayStart+1,\n\t\t\tlen        = settings._iDisplayLength,\n\t\t\tvis        = settings.fnRecordsDisplay(),\n\t\t\tall        = len === -1;\n\t\n\t\treturn str.\n\t\t\treplace(/_START_/g, formatter.call( settings, start ) ).\n\t\t\treplace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).\n\t\t\treplace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).\n\t\t\treplace(/_TOTAL_/g, formatter.call( settings, vis ) ).\n\t\t\treplace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).\n\t\t\treplace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );\n\t}\n\t\n\t\n\t\n\t/**\n\t * Draw the table for the first time, adding all required features\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnInitialise ( settings )\n\t{\n\t\tvar i, iLen, iAjaxStart=settings.iInitDisplayStart;\n\t\tvar columns = settings.aoColumns, column;\n\t\tvar features = settings.oFeatures;\n\t\n\t\t/* Ensure that the table data is fully initialised */\n\t\tif ( ! settings.bInitialised ) {\n\t\t\tsetTimeout( function(){ _fnInitialise( settings ); }, 200 );\n\t\t\treturn;\n\t\t}\n\t\n\t\t/* Show the display HTML options */\n\t\t_fnAddOptionsHtml( settings );\n\t\n\t\t/* Build and draw the header / footer for the table */\n\t\t_fnBuildHead( settings );\n\t\t_fnDrawHead( settings, settings.aoHeader );\n\t\t_fnDrawHead( settings, settings.aoFooter );\n\t\n\t\t/* Okay to show that something is going on now */\n\t\t_fnProcessingDisplay( settings, true );\n\t\n\t\t/* Calculate sizes for columns */\n\t\tif ( features.bAutoWidth ) {\n\t\t\t_fnCalculateColumnWidths( settings );\n\t\t}\n\t\n\t\tfor ( i=0, iLen=columns.length ; i<iLen ; i++ ) {\n\t\t\tcolumn = columns[i];\n\t\n\t\t\tif ( column.sWidth ) {\n\t\t\t\tcolumn.nTh.style.width = _fnStringToCss( column.sWidth );\n\t\t\t}\n\t\t}\n\t\n\t\t// If there is default sorting required - let's do it. The sort function\n\t\t// will do the drawing for us. Otherwise we draw the table regardless of the\n\t\t// Ajax source - this allows the table to look initialised for Ajax sourcing\n\t\t// data (show 'loading' message possibly)\n\t\t_fnReDraw( settings );\n\t\n\t\t// Server-side processing init complete is done by _fnAjaxUpdateDraw\n\t\tvar dataSrc = _fnDataSource( settings );\n\t\tif ( dataSrc != 'ssp' ) {\n\t\t\t// if there is an ajax source load the data\n\t\t\tif ( dataSrc == 'ajax' ) {\n\t\t\t\t_fnBuildAjax( settings, [], function(json) {\n\t\t\t\t\tvar aData = _fnAjaxDataSrc( settings, json );\n\t\n\t\t\t\t\t// Got the data - add it to the table\n\t\t\t\t\tfor ( i=0 ; i<aData.length ; i++ ) {\n\t\t\t\t\t\t_fnAddData( settings, aData[i] );\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Reset the init display for cookie saving. We've already done\n\t\t\t\t\t// a filter, and therefore cleared it before. So we need to make\n\t\t\t\t\t// it appear 'fresh'\n\t\t\t\t\tsettings.iInitDisplayStart = iAjaxStart;\n\t\n\t\t\t\t\t_fnReDraw( settings );\n\t\n\t\t\t\t\t_fnProcessingDisplay( settings, false );\n\t\t\t\t\t_fnInitComplete( settings, json );\n\t\t\t\t}, settings );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t_fnProcessingDisplay( settings, false );\n\t\t\t\t_fnInitComplete( settings );\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Draw the table for the first time, adding all required features\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {object} [json] JSON from the server that completed the table, if using Ajax source\n\t *    with client-side processing (optional)\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnInitComplete ( settings, json )\n\t{\n\t\tsettings._bInitComplete = true;\n\t\n\t\t// On an Ajax load we now have data and therefore want to apply the column\n\t\t// sizing\n\t\tif ( json ) {\n\t\t\t_fnAdjustColumnSizing( settings );\n\t\t}\n\t\n\t\t_fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );\n\t}\n\t\n\t\n\tfunction _fnLengthChange ( settings, val )\n\t{\n\t\tvar len = parseInt( val, 10 );\n\t\tsettings._iDisplayLength = len;\n\t\n\t\t_fnLengthOverflow( settings );\n\t\n\t\t// Fire length change event\n\t\t_fnCallbackFire( settings, null, 'length', [settings, len] );\n\t}\n\t\n\t\n\t/**\n\t * Generate the node required for user display length changing\n\t *  @param {object} settings dataTables settings object\n\t *  @returns {node} Display length feature node\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFeatureHtmlLength ( settings )\n\t{\n\t\tvar\n\t\t\tclasses  = settings.oClasses,\n\t\t\ttableId  = settings.sTableId,\n\t\t\tmenu     = settings.aLengthMenu,\n\t\t\td2       = $.isArray( menu[0] ),\n\t\t\tlengths  = d2 ? menu[0] : menu,\n\t\t\tlanguage = d2 ? menu[1] : menu;\n\t\n\t\tvar select = $('<select/>', {\n\t\t\t'name':          tableId+'_length',\n\t\t\t'aria-controls': tableId,\n\t\t\t'class':         classes.sLengthSelect\n\t\t} );\n\t\n\t\tfor ( var i=0, ien=lengths.length ; i<ien ; i++ ) {\n\t\t\tselect[0][ i ] = new Option( language[i], lengths[i] );\n\t\t}\n\t\n\t\tvar div = $('<div><label/></div>').addClass( classes.sLength );\n\t\tif ( ! settings.aanFeatures.l ) {\n\t\t\tdiv[0].id = tableId+'_length';\n\t\t}\n\t\n\t\tdiv.children().append(\n\t\t\tsettings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )\n\t\t);\n\t\n\t\t// Can't use `select` variable as user might provide their own and the\n\t\t// reference is broken by the use of outerHTML\n\t\t$('select', div)\n\t\t\t.val( settings._iDisplayLength )\n\t\t\t.bind( 'change.DT', function(e) {\n\t\t\t\t_fnLengthChange( settings, $(this).val() );\n\t\t\t\t_fnDraw( settings );\n\t\t\t} );\n\t\n\t\t// Update node value whenever anything changes the table's length\n\t\t$(settings.nTable).bind( 'length.dt.DT', function (e, s, len) {\n\t\t\tif ( settings === s ) {\n\t\t\t\t$('select', div).val( len );\n\t\t\t}\n\t\t} );\n\t\n\t\treturn div[0];\n\t}\n\t\n\t\n\t\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Note that most of the paging logic is done in\n\t * DataTable.ext.pager\n\t */\n\t\n\t/**\n\t * Generate the node required for default pagination\n\t *  @param {object} oSettings dataTables settings object\n\t *  @returns {node} Pagination feature node\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFeatureHtmlPaginate ( settings )\n\t{\n\t\tvar\n\t\t\ttype   = settings.sPaginationType,\n\t\t\tplugin = DataTable.ext.pager[ type ],\n\t\t\tmodern = typeof plugin === 'function',\n\t\t\tredraw = function( settings ) {\n\t\t\t\t_fnDraw( settings );\n\t\t\t},\n\t\t\tnode = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],\n\t\t\tfeatures = settings.aanFeatures;\n\t\n\t\tif ( ! modern ) {\n\t\t\tplugin.fnInit( settings, node, redraw );\n\t\t}\n\t\n\t\t/* Add a draw callback for the pagination on first instance, to update the paging display */\n\t\tif ( ! features.p )\n\t\t{\n\t\t\tnode.id = settings.sTableId+'_paginate';\n\t\n\t\t\tsettings.aoDrawCallback.push( {\n\t\t\t\t\"fn\": function( settings ) {\n\t\t\t\t\tif ( modern ) {\n\t\t\t\t\t\tvar\n\t\t\t\t\t\t\tstart      = settings._iDisplayStart,\n\t\t\t\t\t\t\tlen        = settings._iDisplayLength,\n\t\t\t\t\t\t\tvisRecords = settings.fnRecordsDisplay(),\n\t\t\t\t\t\t\tall        = len === -1,\n\t\t\t\t\t\t\tpage = all ? 0 : Math.ceil( start / len ),\n\t\t\t\t\t\t\tpages = all ? 1 : Math.ceil( visRecords / len ),\n\t\t\t\t\t\t\tbuttons = plugin(page, pages),\n\t\t\t\t\t\t\ti, ien;\n\t\n\t\t\t\t\t\tfor ( i=0, ien=features.p.length ; i<ien ; i++ ) {\n\t\t\t\t\t\t\t_fnRenderer( settings, 'pageButton' )(\n\t\t\t\t\t\t\t\tsettings, features.p[i], i, buttons, page, pages\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tplugin.fnUpdate( settings, redraw );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"sName\": \"pagination\"\n\t\t\t} );\n\t\t}\n\t\n\t\treturn node;\n\t}\n\t\n\t\n\t/**\n\t * Alter the display settings to change the page\n\t *  @param {object} settings DataTables settings object\n\t *  @param {string|int} action Paging action to take: \"first\", \"previous\",\n\t *    \"next\" or \"last\" or page number to jump to (integer)\n\t *  @param [bool] redraw Automatically draw the update or not\n\t *  @returns {bool} true page has changed, false - no change\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnPageChange ( settings, action, redraw )\n\t{\n\t\tvar\n\t\t\tstart     = settings._iDisplayStart,\n\t\t\tlen       = settings._iDisplayLength,\n\t\t\trecords   = settings.fnRecordsDisplay();\n\t\n\t\tif ( records === 0 || len === -1 )\n\t\t{\n\t\t\tstart = 0;\n\t\t}\n\t\telse if ( typeof action === \"number\" )\n\t\t{\n\t\t\tstart = action * len;\n\t\n\t\t\tif ( start > records )\n\t\t\t{\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\telse if ( action == \"first\" )\n\t\t{\n\t\t\tstart = 0;\n\t\t}\n\t\telse if ( action == \"previous\" )\n\t\t{\n\t\t\tstart = len >= 0 ?\n\t\t\t\tstart - len :\n\t\t\t\t0;\n\t\n\t\t\tif ( start < 0 )\n\t\t\t{\n\t\t\t  start = 0;\n\t\t\t}\n\t\t}\n\t\telse if ( action == \"next\" )\n\t\t{\n\t\t\tif ( start + len < records )\n\t\t\t{\n\t\t\t\tstart += len;\n\t\t\t}\n\t\t}\n\t\telse if ( action == \"last\" )\n\t\t{\n\t\t\tstart = Math.floor( (records-1) / len) * len;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t_fnLog( settings, 0, \"Unknown paging action: \"+action, 5 );\n\t\t}\n\t\n\t\tvar changed = settings._iDisplayStart !== start;\n\t\tsettings._iDisplayStart = start;\n\t\n\t\tif ( changed ) {\n\t\t\t_fnCallbackFire( settings, null, 'page', [settings] );\n\t\n\t\t\tif ( redraw ) {\n\t\t\t\t_fnDraw( settings );\n\t\t\t}\n\t\t}\n\t\n\t\treturn changed;\n\t}\n\t\n\t\n\t\n\t/**\n\t * Generate the node required for the processing node\n\t *  @param {object} settings dataTables settings object\n\t *  @returns {node} Processing element\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFeatureHtmlProcessing ( settings )\n\t{\n\t\treturn $('<div/>', {\n\t\t\t\t'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,\n\t\t\t\t'class': settings.oClasses.sProcessing\n\t\t\t} )\n\t\t\t.html( settings.oLanguage.sProcessing )\n\t\t\t.insertBefore( settings.nTable )[0];\n\t}\n\t\n\t\n\t/**\n\t * Display or hide the processing indicator\n\t *  @param {object} settings dataTables settings object\n\t *  @param {bool} show Show the processing indicator (true) or not (false)\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnProcessingDisplay ( settings, show )\n\t{\n\t\tif ( settings.oFeatures.bProcessing ) {\n\t\t\t$(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );\n\t\t}\n\t\n\t\t_fnCallbackFire( settings, null, 'processing', [settings, show] );\n\t}\n\t\n\t/**\n\t * Add any control elements for the table - specifically scrolling\n\t *  @param {object} settings dataTables settings object\n\t *  @returns {node} Node to add to the DOM\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFeatureHtmlTable ( settings )\n\t{\n\t\tvar table = $(settings.nTable);\n\t\n\t\t// Add the ARIA grid role to the table\n\t\ttable.attr( 'role', 'grid' );\n\t\n\t\t// Scrolling from here on in\n\t\tvar scroll = settings.oScroll;\n\t\n\t\tif ( scroll.sX === '' && scroll.sY === '' ) {\n\t\t\treturn settings.nTable;\n\t\t}\n\t\n\t\tvar scrollX = scroll.sX;\n\t\tvar scrollY = scroll.sY;\n\t\tvar classes = settings.oClasses;\n\t\tvar caption = table.children('caption');\n\t\tvar captionSide = caption.length ? caption[0]._captionSide : null;\n\t\tvar headerClone = $( table[0].cloneNode(false) );\n\t\tvar footerClone = $( table[0].cloneNode(false) );\n\t\tvar footer = table.children('tfoot');\n\t\tvar _div = '<div/>';\n\t\tvar size = function ( s ) {\n\t\t\treturn !s ? null : _fnStringToCss( s );\n\t\t};\n\t\n\t\t// This is fairly messy, but with x scrolling enabled, if the table has a\n\t\t// width attribute, regardless of any width applied using the column width\n\t\t// options, the browser will shrink or grow the table as needed to fit into\n\t\t// that 100%. That would make the width options useless. So we remove it.\n\t\t// This is okay, under the assumption that width:100% is applied to the\n\t\t// table in CSS (it is in the default stylesheet) which will set the table\n\t\t// width as appropriate (the attribute and css behave differently...)\n\t\tif ( scroll.sX && table.attr('width') === '100%' ) {\n\t\t\ttable.removeAttr('width');\n\t\t}\n\t\n\t\tif ( ! footer.length ) {\n\t\t\tfooter = null;\n\t\t}\n\t\n\t\t/*\n\t\t * The HTML structure that we want to generate in this function is:\n\t\t *  div - scroller\n\t\t *    div - scroll head\n\t\t *      div - scroll head inner\n\t\t *        table - scroll head table\n\t\t *          thead - thead\n\t\t *    div - scroll body\n\t\t *      table - table (master table)\n\t\t *        thead - thead clone for sizing\n\t\t *        tbody - tbody\n\t\t *    div - scroll foot\n\t\t *      div - scroll foot inner\n\t\t *        table - scroll foot table\n\t\t *          tfoot - tfoot\n\t\t */\n\t\tvar scroller = $( _div, { 'class': classes.sScrollWrapper } )\n\t\t\t.append(\n\t\t\t\t$(_div, { 'class': classes.sScrollHead } )\n\t\t\t\t\t.css( {\n\t\t\t\t\t\toverflow: 'hidden',\n\t\t\t\t\t\tposition: 'relative',\n\t\t\t\t\t\tborder: 0,\n\t\t\t\t\t\twidth: scrollX ? size(scrollX) : '100%'\n\t\t\t\t\t} )\n\t\t\t\t\t.append(\n\t\t\t\t\t\t$(_div, { 'class': classes.sScrollHeadInner } )\n\t\t\t\t\t\t\t.css( {\n\t\t\t\t\t\t\t\t'box-sizing': 'content-box',\n\t\t\t\t\t\t\t\twidth: scroll.sXInner || '100%'\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t\t.append(\n\t\t\t\t\t\t\t\theaderClone\n\t\t\t\t\t\t\t\t\t.removeAttr('id')\n\t\t\t\t\t\t\t\t\t.css( 'margin-left', 0 )\n\t\t\t\t\t\t\t\t\t.append( captionSide === 'top' ? caption : null )\n\t\t\t\t\t\t\t\t\t.append(\n\t\t\t\t\t\t\t\t\t\ttable.children('thead')\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t)\n\t\t\t.append(\n\t\t\t\t$(_div, { 'class': classes.sScrollBody } )\n\t\t\t\t\t.css( {\n\t\t\t\t\t\toverflow: 'auto',\n\t\t\t\t\t\theight: size( scrollY ),\n\t\t\t\t\t\twidth: size( scrollX )\n\t\t\t\t\t} )\n\t\t\t\t\t.append( table )\n\t\t\t);\n\t\n\t\tif ( footer ) {\n\t\t\tscroller.append(\n\t\t\t\t$(_div, { 'class': classes.sScrollFoot } )\n\t\t\t\t\t.css( {\n\t\t\t\t\t\toverflow: 'hidden',\n\t\t\t\t\t\tborder: 0,\n\t\t\t\t\t\twidth: scrollX ? size(scrollX) : '100%'\n\t\t\t\t\t} )\n\t\t\t\t\t.append(\n\t\t\t\t\t\t$(_div, { 'class': classes.sScrollFootInner } )\n\t\t\t\t\t\t\t.append(\n\t\t\t\t\t\t\t\tfooterClone\n\t\t\t\t\t\t\t\t\t.removeAttr('id')\n\t\t\t\t\t\t\t\t\t.css( 'margin-left', 0 )\n\t\t\t\t\t\t\t\t\t.append( captionSide === 'bottom' ? caption : null )\n\t\t\t\t\t\t\t\t\t.append(\n\t\t\t\t\t\t\t\t\t\ttable.children('tfoot')\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t);\n\t\t}\n\t\n\t\tvar children = scroller.children();\n\t\tvar scrollHead = children[0];\n\t\tvar scrollBody = children[1];\n\t\tvar scrollFoot = footer ? children[2] : null;\n\t\n\t\t// When the body is scrolled, then we also want to scroll the headers\n\t\tif ( scrollX ) {\n\t\t\t$(scrollBody).on( 'scroll.DT', function (e) {\n\t\t\t\tvar scrollLeft = this.scrollLeft;\n\t\n\t\t\t\tscrollHead.scrollLeft = scrollLeft;\n\t\n\t\t\t\tif ( footer ) {\n\t\t\t\t\tscrollFoot.scrollLeft = scrollLeft;\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t\n\t\tsettings.nScrollHead = scrollHead;\n\t\tsettings.nScrollBody = scrollBody;\n\t\tsettings.nScrollFoot = scrollFoot;\n\t\n\t\t// On redraw - align columns\n\t\tsettings.aoDrawCallback.push( {\n\t\t\t\"fn\": _fnScrollDraw,\n\t\t\t\"sName\": \"scrolling\"\n\t\t} );\n\t\n\t\treturn scroller[0];\n\t}\n\t\n\t\n\t\n\t/**\n\t * Update the header, footer and body tables for resizing - i.e. column\n\t * alignment.\n\t *\n\t * Welcome to the most horrible function DataTables. The process that this\n\t * function follows is basically:\n\t *   1. Re-create the table inside the scrolling div\n\t *   2. Take live measurements from the DOM\n\t *   3. Apply the measurements to align the columns\n\t *   4. Clean up\n\t *\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnScrollDraw ( settings )\n\t{\n\t\t// Given that this is such a monster function, a lot of variables are use\n\t\t// to try and keep the minimised size as small as possible\n\t\tvar\n\t\t\tscroll         = settings.oScroll,\n\t\t\tscrollX        = scroll.sX,\n\t\t\tscrollXInner   = scroll.sXInner,\n\t\t\tscrollY        = scroll.sY,\n\t\t\tbarWidth       = scroll.iBarWidth,\n\t\t\tdivHeader      = $(settings.nScrollHead),\n\t\t\tdivHeaderStyle = divHeader[0].style,\n\t\t\tdivHeaderInner = divHeader.children('div'),\n\t\t\tdivHeaderInnerStyle = divHeaderInner[0].style,\n\t\t\tdivHeaderTable = divHeaderInner.children('table'),\n\t\t\tdivBodyEl      = settings.nScrollBody,\n\t\t\tdivBody        = $(divBodyEl),\n\t\t\tdivBodyStyle   = divBodyEl.style,\n\t\t\tdivFooter      = $(settings.nScrollFoot),\n\t\t\tdivFooterInner = divFooter.children('div'),\n\t\t\tdivFooterTable = divFooterInner.children('table'),\n\t\t\theader         = $(settings.nTHead),\n\t\t\ttable          = $(settings.nTable),\n\t\t\ttableEl        = table[0],\n\t\t\ttableStyle     = tableEl.style,\n\t\t\tfooter         = settings.nTFoot ? $(settings.nTFoot) : null,\n\t\t\tbrowser        = settings.oBrowser,\n\t\t\tie67           = browser.bScrollOversize,\n\t\t\theaderTrgEls, footerTrgEls,\n\t\t\theaderSrcEls, footerSrcEls,\n\t\t\theaderCopy, footerCopy,\n\t\t\theaderWidths=[], footerWidths=[],\n\t\t\theaderContent=[],\n\t\t\tidx, correction, sanityWidth,\n\t\t\tzeroOut = function(nSizer) {\n\t\t\t\tvar style = nSizer.style;\n\t\t\t\tstyle.paddingTop = \"0\";\n\t\t\t\tstyle.paddingBottom = \"0\";\n\t\t\t\tstyle.borderTopWidth = \"0\";\n\t\t\t\tstyle.borderBottomWidth = \"0\";\n\t\t\t\tstyle.height = 0;\n\t\t\t};\n\t\n\t\t/*\n\t\t * 1. Re-create the table inside the scrolling div\n\t\t */\n\t\n\t\t// Remove the old minimised thead and tfoot elements in the inner table\n\t\ttable.children('thead, tfoot').remove();\n\t\n\t\t// Clone the current header and footer elements and then place it into the inner table\n\t\theaderCopy = header.clone().prependTo( table );\n\t\theaderTrgEls = header.find('tr'); // original header is in its own table\n\t\theaderSrcEls = headerCopy.find('tr');\n\t\theaderCopy.find('th, td').removeAttr('tabindex');\n\t\n\t\tif ( footer ) {\n\t\t\tfooterCopy = footer.clone().prependTo( table );\n\t\t\tfooterTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized\n\t\t\tfooterSrcEls = footerCopy.find('tr');\n\t\t}\n\t\n\t\n\t\t/*\n\t\t * 2. Take live measurements from the DOM - do not alter the DOM itself!\n\t\t */\n\t\n\t\t// Remove old sizing and apply the calculated column widths\n\t\t// Get the unique column headers in the newly created (cloned) header. We want to apply the\n\t\t// calculated sizes to this header\n\t\tif ( ! scrollX )\n\t\t{\n\t\t\tdivBodyStyle.width = '100%';\n\t\t\tdivHeader[0].style.width = '100%';\n\t\t}\n\t\n\t\t$.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {\n\t\t\tidx = _fnVisibleToColumnIndex( settings, i );\n\t\t\tel.style.width = settings.aoColumns[idx].sWidth;\n\t\t} );\n\t\n\t\tif ( footer ) {\n\t\t\t_fnApplyToChildren( function(n) {\n\t\t\t\tn.style.width = \"\";\n\t\t\t}, footerSrcEls );\n\t\t}\n\t\n\t\t// If scroll collapse is enabled, when we put the headers back into the body for sizing, we\n\t\t// will end up forcing the scrollbar to appear, making our measurements wrong for when we\n\t\t// then hide it (end of this function), so add the header height to the body scroller.\n\t\tif ( scroll.bCollapse && scrollY !== \"\" ) {\n\t\t\tdivBodyStyle.height = (divBody[0].offsetHeight + header[0].offsetHeight)+\"px\";\n\t\t}\n\t\n\t\t// Size the table as a whole\n\t\tsanityWidth = table.outerWidth();\n\t\tif ( scrollX === \"\" ) {\n\t\t\t// No x scrolling\n\t\t\ttableStyle.width = \"100%\";\n\t\n\t\t\t// IE7 will make the width of the table when 100% include the scrollbar\n\t\t\t// - which is shouldn't. When there is a scrollbar we need to take this\n\t\t\t// into account.\n\t\t\tif ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||\n\t\t\t\tdivBody.css('overflow-y') == \"scroll\")\n\t\t\t) {\n\t\t\t\ttableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// x scrolling\n\t\t\tif ( scrollXInner !== \"\" ) {\n\t\t\t\t// x scroll inner has been given - use it\n\t\t\t\ttableStyle.width = _fnStringToCss(scrollXInner);\n\t\t\t}\n\t\t\telse if ( sanityWidth == divBody.width() && divBody.height() < table.height() ) {\n\t\t\t\t// There is y-scrolling - try to take account of the y scroll bar\n\t\t\t\ttableStyle.width = _fnStringToCss( sanityWidth-barWidth );\n\t\t\t\tif ( table.outerWidth() > sanityWidth-barWidth ) {\n\t\t\t\t\t// Not possible to take account of it\n\t\t\t\t\ttableStyle.width = _fnStringToCss( sanityWidth );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// When all else fails\n\t\t\t\ttableStyle.width = _fnStringToCss( sanityWidth );\n\t\t\t}\n\t\t}\n\t\n\t\t// Recalculate the sanity width - now that we've applied the required width,\n\t\t// before it was a temporary variable. This is required because the column\n\t\t// width calculation is done before this table DOM is created.\n\t\tsanityWidth = table.outerWidth();\n\t\n\t\t// Hidden header should have zero height, so remove padding and borders. Then\n\t\t// set the width based on the real headers\n\t\n\t\t// Apply all styles in one pass\n\t\t_fnApplyToChildren( zeroOut, headerSrcEls );\n\t\n\t\t// Read all widths in next pass\n\t\t_fnApplyToChildren( function(nSizer) {\n\t\t\theaderContent.push( nSizer.innerHTML );\n\t\t\theaderWidths.push( _fnStringToCss( $(nSizer).css('width') ) );\n\t\t}, headerSrcEls );\n\t\n\t\t// Apply all widths in final pass\n\t\t_fnApplyToChildren( function(nToSize, i) {\n\t\t\tnToSize.style.width = headerWidths[i];\n\t\t}, headerTrgEls );\n\t\n\t\t$(headerSrcEls).height(0);\n\t\n\t\t/* Same again with the footer if we have one */\n\t\tif ( footer )\n\t\t{\n\t\t\t_fnApplyToChildren( zeroOut, footerSrcEls );\n\t\n\t\t\t_fnApplyToChildren( function(nSizer) {\n\t\t\t\tfooterWidths.push( _fnStringToCss( $(nSizer).css('width') ) );\n\t\t\t}, footerSrcEls );\n\t\n\t\t\t_fnApplyToChildren( function(nToSize, i) {\n\t\t\t\tnToSize.style.width = footerWidths[i];\n\t\t\t}, footerTrgEls );\n\t\n\t\t\t$(footerSrcEls).height(0);\n\t\t}\n\t\n\t\n\t\t/*\n\t\t * 3. Apply the measurements\n\t\t */\n\t\n\t\t// \"Hide\" the header and footer that we used for the sizing. We need to keep\n\t\t// the content of the cell so that the width applied to the header and body\n\t\t// both match, but we want to hide it completely. We want to also fix their\n\t\t// width to what they currently are\n\t\t_fnApplyToChildren( function(nSizer, i) {\n\t\t\tnSizer.innerHTML = '<div class=\"dataTables_sizing\" style=\"height:0;overflow:hidden;\">'+headerContent[i]+'</div>';\n\t\t\tnSizer.style.width = headerWidths[i];\n\t\t}, headerSrcEls );\n\t\n\t\tif ( footer )\n\t\t{\n\t\t\t_fnApplyToChildren( function(nSizer, i) {\n\t\t\t\tnSizer.innerHTML = \"\";\n\t\t\t\tnSizer.style.width = footerWidths[i];\n\t\t\t}, footerSrcEls );\n\t\t}\n\t\n\t\t// Sanity check that the table is of a sensible width. If not then we are going to get\n\t\t// misalignment - try to prevent this by not allowing the table to shrink below its min width\n\t\tif ( table.outerWidth() < sanityWidth )\n\t\t{\n\t\t\t// The min width depends upon if we have a vertical scrollbar visible or not */\n\t\t\tcorrection = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||\n\t\t\t\tdivBody.css('overflow-y') == \"scroll\")) ?\n\t\t\t\t\tsanityWidth+barWidth :\n\t\t\t\t\tsanityWidth;\n\t\n\t\t\t// IE6/7 are a law unto themselves...\n\t\t\tif ( ie67 && (divBodyEl.scrollHeight >\n\t\t\t\tdivBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\")\n\t\t\t) {\n\t\t\t\ttableStyle.width = _fnStringToCss( correction-barWidth );\n\t\t\t}\n\t\n\t\t\t// And give the user a warning that we've stopped the table getting too small\n\t\t\tif ( scrollX === \"\" || scrollXInner !== \"\" ) {\n\t\t\t\t_fnLog( settings, 1, 'Possible column misalignment', 6 );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcorrection = '100%';\n\t\t}\n\t\n\t\t// Apply to the container elements\n\t\tdivBodyStyle.width = _fnStringToCss( correction );\n\t\tdivHeaderStyle.width = _fnStringToCss( correction );\n\t\n\t\tif ( footer ) {\n\t\t\tsettings.nScrollFoot.style.width = _fnStringToCss( correction );\n\t\t}\n\t\n\t\n\t\t/*\n\t\t * 4. Clean up\n\t\t */\n\t\tif ( ! scrollY ) {\n\t\t\t/* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting\n\t\t\t * the scrollbar height from the visible display, rather than adding it on. We need to\n\t\t\t * set the height in order to sort this. Don't want to do it in any other browsers.\n\t\t\t */\n\t\t\tif ( ie67 ) {\n\t\t\t\tdivBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );\n\t\t\t}\n\t\t}\n\t\n\t\tif ( scrollY && scroll.bCollapse ) {\n\t\t\tdivBodyStyle.height = _fnStringToCss( scrollY );\n\t\n\t\t\tvar iExtra = (scrollX && tableEl.offsetWidth > divBodyEl.offsetWidth) ?\n\t\t\t\tbarWidth :\n\t\t\t\t0;\n\t\n\t\t\tif ( tableEl.offsetHeight < divBodyEl.offsetHeight ) {\n\t\t\t\tdivBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+iExtra );\n\t\t\t}\n\t\t}\n\t\n\t\t/* Finally set the width's of the header and footer tables */\n\t\tvar iOuterWidth = table.outerWidth();\n\t\tdivHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );\n\t\tdivHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );\n\t\n\t\t// Figure out if there are scrollbar present - if so then we need a the header and footer to\n\t\t// provide a bit more space to allow \"overflow\" scrolling (i.e. past the scrollbar)\n\t\tvar bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == \"scroll\";\n\t\tvar padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );\n\t\tdivHeaderInnerStyle[ padding ] = bScrolling ? barWidth+\"px\" : \"0px\";\n\t\n\t\tif ( footer ) {\n\t\t\tdivFooterTable[0].style.width = _fnStringToCss( iOuterWidth );\n\t\t\tdivFooterInner[0].style.width = _fnStringToCss( iOuterWidth );\n\t\t\tdivFooterInner[0].style[padding] = bScrolling ? barWidth+\"px\" : \"0px\";\n\t\t}\n\t\n\t\t/* Adjust the position of the header in case we loose the y-scrollbar */\n\t\tdivBody.scroll();\n\t\n\t\t// If sorting or filtering has occurred, jump the scrolling back to the top\n\t\t// only if we aren't holding the position\n\t\tif ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {\n\t\t\tdivBodyEl.scrollTop = 0;\n\t\t}\n\t}\n\t\n\t\n\t\n\t/**\n\t * Apply a given function to the display child nodes of an element array (typically\n\t * TD children of TR rows\n\t *  @param {function} fn Method to apply to the objects\n\t *  @param array {nodes} an1 List of elements to look through for display children\n\t *  @param array {nodes} an2 Another list (identical structure to the first) - optional\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnApplyToChildren( fn, an1, an2 )\n\t{\n\t\tvar index=0, i=0, iLen=an1.length;\n\t\tvar nNode1, nNode2;\n\t\n\t\twhile ( i < iLen ) {\n\t\t\tnNode1 = an1[i].firstChild;\n\t\t\tnNode2 = an2 ? an2[i].firstChild : null;\n\t\n\t\t\twhile ( nNode1 ) {\n\t\t\t\tif ( nNode1.nodeType === 1 ) {\n\t\t\t\t\tif ( an2 ) {\n\t\t\t\t\t\tfn( nNode1, nNode2, index );\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tfn( nNode1, index );\n\t\t\t\t\t}\n\t\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\n\t\t\t\tnNode1 = nNode1.nextSibling;\n\t\t\t\tnNode2 = an2 ? nNode2.nextSibling : null;\n\t\t\t}\n\t\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\t\n\t\n\tvar __re_html_remove = /<.*?>/g;\n\t\n\t\n\t/**\n\t * Calculate the width of columns for the table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnCalculateColumnWidths ( oSettings )\n\t{\n\t\tvar\n\t\t\ttable = oSettings.nTable,\n\t\t\tcolumns = oSettings.aoColumns,\n\t\t\tscroll = oSettings.oScroll,\n\t\t\tscrollY = scroll.sY,\n\t\t\tscrollX = scroll.sX,\n\t\t\tscrollXInner = scroll.sXInner,\n\t\t\tcolumnCount = columns.length,\n\t\t\tvisibleColumns = _fnGetColumns( oSettings, 'bVisible' ),\n\t\t\theaderCells = $('th', oSettings.nTHead),\n\t\t\ttableWidthAttr = table.getAttribute('width'), // from DOM element\n\t\t\ttableContainer = table.parentNode,\n\t\t\tuserInputs = false,\n\t\t\ti, column, columnIdx, width, outerWidth;\n\t\n\t\tvar styleWidth = table.style.width;\n\t\tif ( styleWidth && styleWidth.indexOf('%') !== -1 ) {\n\t\t\ttableWidthAttr = styleWidth;\n\t\t}\n\t\n\t\t/* Convert any user input sizes into pixel sizes */\n\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {\n\t\t\tcolumn = columns[ visibleColumns[i] ];\n\t\n\t\t\tif ( column.sWidth !== null ) {\n\t\t\t\tcolumn.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );\n\t\n\t\t\t\tuserInputs = true;\n\t\t\t}\n\t\t}\n\t\n\t\t/* If the number of columns in the DOM equals the number that we have to\n\t\t * process in DataTables, then we can use the offsets that are created by\n\t\t * the web- browser. No custom sizes can be set in order for this to happen,\n\t\t * nor scrolling used\n\t\t */\n\t\tif ( ! userInputs && ! scrollX && ! scrollY &&\n\t\t    columnCount == _fnVisbleColumns( oSettings ) &&\n\t\t\tcolumnCount == headerCells.length\n\t\t) {\n\t\t\tfor ( i=0 ; i<columnCount ; i++ ) {\n\t\t\t\tcolumns[i].sWidth = _fnStringToCss( headerCells.eq(i).width() );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Otherwise construct a single row, worst case, table with the widest\n\t\t\t// node in the data, assign any user defined widths, then insert it into\n\t\t\t// the DOM and allow the browser to do all the hard work of calculating\n\t\t\t// table widths\n\t\t\tvar tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table\n\t\t\t\t.css( 'visibility', 'hidden' )\n\t\t\t\t.removeAttr( 'id' );\n\t\n\t\t\t// Clean up the table body\n\t\t\ttmpTable.find('tbody tr').remove();\n\t\t\tvar tr = $('<tr/>').appendTo( tmpTable.find('tbody') );\n\t\n\t\t\t// Remove any assigned widths from the footer (from scrolling)\n\t\t\ttmpTable.find('tfoot th, tfoot td').css('width', '');\n\t\n\t\t\t// Apply custom sizing to the cloned header\n\t\t\theaderCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );\n\t\n\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {\n\t\t\t\tcolumn = columns[ visibleColumns[i] ];\n\t\n\t\t\t\theaderCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?\n\t\t\t\t\t_fnStringToCss( column.sWidthOrig ) :\n\t\t\t\t\t'';\n\t\t\t}\n\t\n\t\t\t// Find the widest cell for each column and put it into the table\n\t\t\tif ( oSettings.aoData.length ) {\n\t\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {\n\t\t\t\t\tcolumnIdx = visibleColumns[i];\n\t\t\t\t\tcolumn = columns[ columnIdx ];\n\t\n\t\t\t\t\t$( _fnGetWidestNode( oSettings, columnIdx ) )\n\t\t\t\t\t\t.clone( false )\n\t\t\t\t\t\t.append( column.sContentPadding )\n\t\t\t\t\t\t.appendTo( tr );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// Table has been built, attach to the document so we can work with it\n\t\t\ttmpTable.appendTo( tableContainer );\n\t\n\t\t\t// When scrolling (X or Y) we want to set the width of the table as \n\t\t\t// appropriate. However, when not scrolling leave the table width as it\n\t\t\t// is. This results in slightly different, but I think correct behaviour\n\t\t\tif ( scrollX && scrollXInner ) {\n\t\t\t\ttmpTable.width( scrollXInner );\n\t\t\t}\n\t\t\telse if ( scrollX ) {\n\t\t\t\ttmpTable.css( 'width', 'auto' );\n\t\n\t\t\t\tif ( tmpTable.width() < tableContainer.offsetWidth ) {\n\t\t\t\t\ttmpTable.width( tableContainer.offsetWidth );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( scrollY ) {\n\t\t\t\ttmpTable.width( tableContainer.offsetWidth );\n\t\t\t}\n\t\t\telse if ( tableWidthAttr ) {\n\t\t\t\ttmpTable.width( tableWidthAttr );\n\t\t\t}\n\t\n\t\t\t// Take into account the y scrollbar\n\t\t\t_fnScrollingWidthAdjust( oSettings, tmpTable[0] );\n\t\n\t\t\t// Browsers need a bit of a hand when a width is assigned to any columns\n\t\t\t// when x-scrolling as they tend to collapse the table to the min-width,\n\t\t\t// even if we sent the column widths. So we need to keep track of what\n\t\t\t// the table width should be by summing the user given values, and the\n\t\t\t// automatic values\n\t\t\tif ( scrollX )\n\t\t\t{\n\t\t\t\tvar total = 0;\n\t\n\t\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {\n\t\t\t\t\tcolumn = columns[ visibleColumns[i] ];\n\t\t\t\t\touterWidth = $(headerCells[i]).outerWidth();\n\t\n\t\t\t\t\ttotal += column.sWidthOrig === null ?\n\t\t\t\t\t\touterWidth :\n\t\t\t\t\t\tparseInt( column.sWidth, 10 ) + outerWidth - $(headerCells[i]).width();\n\t\t\t\t}\n\t\n\t\t\t\ttmpTable.width( _fnStringToCss( total ) );\n\t\t\t\ttable.style.width = _fnStringToCss( total );\n\t\t\t}\n\t\n\t\t\t// Get the width of each column in the constructed table\n\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {\n\t\t\t\tcolumn = columns[ visibleColumns[i] ];\n\t\t\t\twidth = $(headerCells[i]).width();\n\t\n\t\t\t\tif ( width ) {\n\t\t\t\t\tcolumn.sWidth = _fnStringToCss( width );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\ttable.style.width = _fnStringToCss( tmpTable.css('width') );\n\t\n\t\t\t// Finished with the table - ditch it\n\t\t\ttmpTable.remove();\n\t\t}\n\t\n\t\t// If there is a width attr, we want to attach an event listener which\n\t\t// allows the table sizing to automatically adjust when the window is\n\t\t// resized. Use the width attr rather than CSS, since we can't know if the\n\t\t// CSS is a relative value or absolute - DOM read is always px.\n\t\tif ( tableWidthAttr ) {\n\t\t\ttable.style.width = _fnStringToCss( tableWidthAttr );\n\t\t}\n\t\n\t\tif ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {\n\t\t\tvar bindResize = function () {\n\t\t\t\t$(window).bind('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {\n\t\t\t\t\t_fnAdjustColumnSizing( oSettings );\n\t\t\t\t} ) );\n\t\t\t};\n\t\n\t\t\t// IE6/7 will crash if we bind a resize event handler on page load.\n\t\t\t// To be removed in 1.11 which drops IE6/7 support\n\t\t\tif ( oSettings.oBrowser.bScrollOversize ) {\n\t\t\t\tsetTimeout( bindResize, 1000 );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbindResize();\n\t\t\t}\n\t\n\t\t\toSettings._reszEvt = true;\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Throttle the calls to a function. Arguments and context are maintained for\n\t * the throttled function\n\t *  @param {function} fn Function to be called\n\t *  @param {int} [freq=200] call frequency in mS\n\t *  @returns {function} wrapped function\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnThrottle( fn, freq ) {\n\t\tvar\n\t\t\tfrequency = freq !== undefined ? freq : 200,\n\t\t\tlast,\n\t\t\ttimer;\n\t\n\t\treturn function () {\n\t\t\tvar\n\t\t\t\tthat = this,\n\t\t\t\tnow  = +new Date(),\n\t\t\t\targs = arguments;\n\t\n\t\t\tif ( last && now < last + frequency ) {\n\t\t\t\tclearTimeout( timer );\n\t\n\t\t\t\ttimer = setTimeout( function () {\n\t\t\t\t\tlast = undefined;\n\t\t\t\t\tfn.apply( that, args );\n\t\t\t\t}, frequency );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlast = now;\n\t\t\t\tfn.apply( that, args );\n\t\t\t}\n\t\t};\n\t}\n\t\n\t\n\t/**\n\t * Convert a CSS unit width to pixels (e.g. 2em)\n\t *  @param {string} width width to be converted\n\t *  @param {node} parent parent to get the with for (required for relative widths) - optional\n\t *  @returns {int} width in pixels\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnConvertToWidth ( width, parent )\n\t{\n\t\tif ( ! width ) {\n\t\t\treturn 0;\n\t\t}\n\t\n\t\tvar n = $('<div/>')\n\t\t\t.css( 'width', _fnStringToCss( width ) )\n\t\t\t.appendTo( parent || document.body );\n\t\n\t\tvar val = n[0].offsetWidth;\n\t\tn.remove();\n\t\n\t\treturn val;\n\t}\n\t\n\t\n\t/**\n\t * Adjust a table's width to take account of vertical scroll bar\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {node} n table node\n\t *  @memberof DataTable#oApi\n\t */\n\t\n\tfunction _fnScrollingWidthAdjust ( settings, n )\n\t{\n\t\tvar scroll = settings.oScroll;\n\t\n\t\tif ( scroll.sX || scroll.sY ) {\n\t\t\t// When y-scrolling only, we want to remove the width of the scroll bar\n\t\t\t// so the table + scroll bar will fit into the area available, otherwise\n\t\t\t// we fix the table at its current size with no adjustment\n\t\t\tvar correction = ! scroll.sX ? scroll.iBarWidth : 0;\n\t\t\tn.style.width = _fnStringToCss( $(n).outerWidth() - correction );\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Get the widest node\n\t *  @param {object} settings dataTables settings object\n\t *  @param {int} colIdx column of interest\n\t *  @returns {node} widest table node\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetWidestNode( settings, colIdx )\n\t{\n\t\tvar idx = _fnGetMaxLenString( settings, colIdx );\n\t\tif ( idx < 0 ) {\n\t\t\treturn null;\n\t\t}\n\t\n\t\tvar data = settings.aoData[ idx ];\n\t\treturn ! data.nTr ? // Might not have been created when deferred rendering\n\t\t\t$('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :\n\t\t\tdata.anCells[ colIdx ];\n\t}\n\t\n\t\n\t/**\n\t * Get the maximum strlen for each data column\n\t *  @param {object} settings dataTables settings object\n\t *  @param {int} colIdx column of interest\n\t *  @returns {string} max string length for each column\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetMaxLenString( settings, colIdx )\n\t{\n\t\tvar s, max=-1, maxIdx = -1;\n\t\n\t\tfor ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n\t\t\ts = _fnGetCellData( settings, i, colIdx, 'display' )+'';\n\t\t\ts = s.replace( __re_html_remove, '' );\n\t\n\t\t\tif ( s.length > max ) {\n\t\t\t\tmax = s.length;\n\t\t\t\tmaxIdx = i;\n\t\t\t}\n\t\t}\n\t\n\t\treturn maxIdx;\n\t}\n\t\n\t\n\t/**\n\t * Append a CSS unit (only if required) to a string\n\t *  @param {string} value to css-ify\n\t *  @returns {string} value with css unit\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnStringToCss( s )\n\t{\n\t\tif ( s === null ) {\n\t\t\treturn '0px';\n\t\t}\n\t\n\t\tif ( typeof s == 'number' ) {\n\t\t\treturn s < 0 ?\n\t\t\t\t'0px' :\n\t\t\t\ts+'px';\n\t\t}\n\t\n\t\t// Check it has a unit character already\n\t\treturn s.match(/\\d$/) ?\n\t\t\ts+'px' :\n\t\t\ts;\n\t}\n\t\n\t\n\t/**\n\t * Get the width of a scroll bar in this browser being used\n\t *  @returns {int} width in pixels\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnScrollBarWidth ()\n\t{\n\t\t// On first run a static variable is set, since this is only needed once.\n\t\t// Subsequent runs will just use the previously calculated value\n\t\tvar width = DataTable.__scrollbarWidth;\n\t\n\t\tif ( width === undefined ) {\n\t\t\tvar sizer = $('<p/>').css( {\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\ttop: 0,\n\t\t\t\t\tleft: 0,\n\t\t\t\t\twidth: '100%',\n\t\t\t\t\theight: 150,\n\t\t\t\t\tpadding: 0,\n\t\t\t\t\toverflow: 'scroll',\n\t\t\t\t\tvisibility: 'hidden'\n\t\t\t\t} )\n\t\t\t\t.appendTo('body');\n\t\n\t\t\twidth = sizer[0].offsetWidth - sizer[0].clientWidth;\n\t\t\tDataTable.__scrollbarWidth = width;\n\t\n\t\t\tsizer.remove();\n\t\t}\n\t\n\t\treturn width;\n\t}\n\t\n\t\n\t\n\tfunction _fnSortFlatten ( settings )\n\t{\n\t\tvar\n\t\t\ti, iLen, k, kLen,\n\t\t\taSort = [],\n\t\t\taiOrig = [],\n\t\t\taoColumns = settings.aoColumns,\n\t\t\taDataSort, iCol, sType, srcCol,\n\t\t\tfixed = settings.aaSortingFixed,\n\t\t\tfixedObj = $.isPlainObject( fixed ),\n\t\t\tnestedSort = [],\n\t\t\tadd = function ( a ) {\n\t\t\t\tif ( a.length && ! $.isArray( a[0] ) ) {\n\t\t\t\t\t// 1D array\n\t\t\t\t\tnestedSort.push( a );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// 2D array\n\t\t\t\t\tnestedSort.push.apply( nestedSort, a );\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t// Build the sort array, with pre-fix and post-fix options if they have been\n\t\t// specified\n\t\tif ( $.isArray( fixed ) ) {\n\t\t\tadd( fixed );\n\t\t}\n\t\n\t\tif ( fixedObj && fixed.pre ) {\n\t\t\tadd( fixed.pre );\n\t\t}\n\t\n\t\tadd( settings.aaSorting );\n\t\n\t\tif (fixedObj && fixed.post ) {\n\t\t\tadd( fixed.post );\n\t\t}\n\t\n\t\tfor ( i=0 ; i<nestedSort.length ; i++ )\n\t\t{\n\t\t\tsrcCol = nestedSort[i][0];\n\t\t\taDataSort = aoColumns[ srcCol ].aDataSort;\n\t\n\t\t\tfor ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )\n\t\t\t{\n\t\t\t\tiCol = aDataSort[k];\n\t\t\t\tsType = aoColumns[ iCol ].sType || 'string';\n\t\n\t\t\t\tif ( nestedSort[i]._idx === undefined ) {\n\t\t\t\t\tnestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );\n\t\t\t\t}\n\t\n\t\t\t\taSort.push( {\n\t\t\t\t\tsrc:       srcCol,\n\t\t\t\t\tcol:       iCol,\n\t\t\t\t\tdir:       nestedSort[i][1],\n\t\t\t\t\tindex:     nestedSort[i]._idx,\n\t\t\t\t\ttype:      sType,\n\t\t\t\t\tformatter: DataTable.ext.type.order[ sType+\"-pre\" ]\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t\n\t\treturn aSort;\n\t}\n\t\n\t/**\n\t * Change the order of the table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t *  @todo This really needs split up!\n\t */\n\tfunction _fnSort ( oSettings )\n\t{\n\t\tvar\n\t\t\ti, ien, iLen, j, jLen, k, kLen,\n\t\t\tsDataType, nTh,\n\t\t\taiOrig = [],\n\t\t\toExtSort = DataTable.ext.type.order,\n\t\t\taoData = oSettings.aoData,\n\t\t\taoColumns = oSettings.aoColumns,\n\t\t\taDataSort, data, iCol, sType, oSort,\n\t\t\tformatters = 0,\n\t\t\tsortCol,\n\t\t\tdisplayMaster = oSettings.aiDisplayMaster,\n\t\t\taSort;\n\t\n\t\t// Resolve any column types that are unknown due to addition or invalidation\n\t\t// @todo Can this be moved into a 'data-ready' handler which is called when\n\t\t//   data is going to be used in the table?\n\t\t_fnColumnTypes( oSettings );\n\t\n\t\taSort = _fnSortFlatten( oSettings );\n\t\n\t\tfor ( i=0, ien=aSort.length ; i<ien ; i++ ) {\n\t\t\tsortCol = aSort[i];\n\t\n\t\t\t// Track if we can use the fast sort algorithm\n\t\t\tif ( sortCol.formatter ) {\n\t\t\t\tformatters++;\n\t\t\t}\n\t\n\t\t\t// Load the data needed for the sort, for each cell\n\t\t\t_fnSortData( oSettings, sortCol.col );\n\t\t}\n\t\n\t\t/* No sorting required if server-side or no sorting array */\n\t\tif ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )\n\t\t{\n\t\t\t// Create a value - key array of the current row positions such that we can use their\n\t\t\t// current position during the sort, if values match, in order to perform stable sorting\n\t\t\tfor ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {\n\t\t\t\taiOrig[ displayMaster[i] ] = i;\n\t\t\t}\n\t\n\t\t\t/* Do the sort - here we want multi-column sorting based on a given data source (column)\n\t\t\t * and sorting function (from oSort) in a certain direction. It's reasonably complex to\n\t\t\t * follow on it's own, but this is what we want (example two column sorting):\n\t\t\t *  fnLocalSorting = function(a,b){\n\t\t\t *    var iTest;\n\t\t\t *    iTest = oSort['string-asc']('data11', 'data12');\n\t\t\t *      if (iTest !== 0)\n\t\t\t *        return iTest;\n\t\t\t *    iTest = oSort['numeric-desc']('data21', 'data22');\n\t\t\t *    if (iTest !== 0)\n\t\t\t *      return iTest;\n\t\t\t *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );\n\t\t\t *  }\n\t\t\t * Basically we have a test for each sorting column, if the data in that column is equal,\n\t\t\t * test the next column. If all columns match, then we use a numeric sort on the row\n\t\t\t * positions in the original data array to provide a stable sort.\n\t\t\t *\n\t\t\t * Note - I know it seems excessive to have two sorting methods, but the first is around\n\t\t\t * 15% faster, so the second is only maintained for backwards compatibility with sorting\n\t\t\t * methods which do not have a pre-sort formatting function.\n\t\t\t */\n\t\t\tif ( formatters === aSort.length ) {\n\t\t\t\t// All sort types have formatting functions\n\t\t\t\tdisplayMaster.sort( function ( a, b ) {\n\t\t\t\t\tvar\n\t\t\t\t\t\tx, y, k, test, sort,\n\t\t\t\t\t\tlen=aSort.length,\n\t\t\t\t\t\tdataA = aoData[a]._aSortData,\n\t\t\t\t\t\tdataB = aoData[b]._aSortData;\n\t\n\t\t\t\t\tfor ( k=0 ; k<len ; k++ ) {\n\t\t\t\t\t\tsort = aSort[k];\n\t\n\t\t\t\t\t\tx = dataA[ sort.col ];\n\t\t\t\t\t\ty = dataB[ sort.col ];\n\t\n\t\t\t\t\t\ttest = x<y ? -1 : x>y ? 1 : 0;\n\t\t\t\t\t\tif ( test !== 0 ) {\n\t\t\t\t\t\t\treturn sort.dir === 'asc' ? test : -test;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\tx = aiOrig[a];\n\t\t\t\t\ty = aiOrig[b];\n\t\t\t\t\treturn x<y ? -1 : x>y ? 1 : 0;\n\t\t\t\t} );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Depreciated - remove in 1.11 (providing a plug-in option)\n\t\t\t\t// Not all sort types have formatting methods, so we have to call their sorting\n\t\t\t\t// methods.\n\t\t\t\tdisplayMaster.sort( function ( a, b ) {\n\t\t\t\t\tvar\n\t\t\t\t\t\tx, y, k, l, test, sort, fn,\n\t\t\t\t\t\tlen=aSort.length,\n\t\t\t\t\t\tdataA = aoData[a]._aSortData,\n\t\t\t\t\t\tdataB = aoData[b]._aSortData;\n\t\n\t\t\t\t\tfor ( k=0 ; k<len ; k++ ) {\n\t\t\t\t\t\tsort = aSort[k];\n\t\n\t\t\t\t\t\tx = dataA[ sort.col ];\n\t\t\t\t\t\ty = dataB[ sort.col ];\n\t\n\t\t\t\t\t\tfn = oExtSort[ sort.type+\"-\"+sort.dir ] || oExtSort[ \"string-\"+sort.dir ];\n\t\t\t\t\t\ttest = fn( x, y );\n\t\t\t\t\t\tif ( test !== 0 ) {\n\t\t\t\t\t\t\treturn test;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\tx = aiOrig[a];\n\t\t\t\t\ty = aiOrig[b];\n\t\t\t\t\treturn x<y ? -1 : x>y ? 1 : 0;\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t\n\t\t/* Tell the draw function that we have sorted the data */\n\t\toSettings.bSorted = true;\n\t}\n\t\n\t\n\tfunction _fnSortAria ( settings )\n\t{\n\t\tvar label;\n\t\tvar nextSort;\n\t\tvar columns = settings.aoColumns;\n\t\tvar aSort = _fnSortFlatten( settings );\n\t\tvar oAria = settings.oLanguage.oAria;\n\t\n\t\t// ARIA attributes - need to loop all columns, to update all (removing old\n\t\t// attributes as needed)\n\t\tfor ( var i=0, iLen=columns.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tvar col = columns[i];\n\t\t\tvar asSorting = col.asSorting;\n\t\t\tvar sTitle = col.sTitle.replace( /<.*?>/g, \"\" );\n\t\t\tvar th = col.nTh;\n\t\n\t\t\t// IE7 is throwing an error when setting these properties with jQuery's\n\t\t\t// attr() and removeAttr() methods...\n\t\t\tth.removeAttribute('aria-sort');\n\t\n\t\t\t/* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */\n\t\t\tif ( col.bSortable ) {\n\t\t\t\tif ( aSort.length > 0 && aSort[0].col == i ) {\n\t\t\t\t\tth.setAttribute('aria-sort', aSort[0].dir==\"asc\" ? \"ascending\" : \"descending\" );\n\t\t\t\t\tnextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tnextSort = asSorting[0];\n\t\t\t\t}\n\t\n\t\t\t\tlabel = sTitle + ( nextSort === \"asc\" ?\n\t\t\t\t\toAria.sSortAscending :\n\t\t\t\t\toAria.sSortDescending\n\t\t\t\t);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlabel = sTitle;\n\t\t\t}\n\t\n\t\t\tth.setAttribute('aria-label', label);\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Function to run on user sort request\n\t *  @param {object} settings dataTables settings object\n\t *  @param {node} attachTo node to attach the handler to\n\t *  @param {int} colIdx column sorting index\n\t *  @param {boolean} [append=false] Append the requested sort to the existing\n\t *    sort if true (i.e. multi-column sort)\n\t *  @param {function} [callback] callback function\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSortListener ( settings, colIdx, append, callback )\n\t{\n\t\tvar col = settings.aoColumns[ colIdx ];\n\t\tvar sorting = settings.aaSorting;\n\t\tvar asSorting = col.asSorting;\n\t\tvar nextSortIdx;\n\t\tvar next = function ( a, overflow ) {\n\t\t\tvar idx = a._idx;\n\t\t\tif ( idx === undefined ) {\n\t\t\t\tidx = $.inArray( a[1], asSorting );\n\t\t\t}\n\t\n\t\t\treturn idx+1 < asSorting.length ?\n\t\t\t\tidx+1 :\n\t\t\t\toverflow ?\n\t\t\t\t\tnull :\n\t\t\t\t\t0;\n\t\t};\n\t\n\t\t// Convert to 2D array if needed\n\t\tif ( typeof sorting[0] === 'number' ) {\n\t\t\tsorting = settings.aaSorting = [ sorting ];\n\t\t}\n\t\n\t\t// If appending the sort then we are multi-column sorting\n\t\tif ( append && settings.oFeatures.bSortMulti ) {\n\t\t\t// Are we already doing some kind of sort on this column?\n\t\t\tvar sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );\n\t\n\t\t\tif ( sortIdx !== -1 ) {\n\t\t\t\t// Yes, modify the sort\n\t\t\t\tnextSortIdx = next( sorting[sortIdx], true );\n\t\n\t\t\t\tif ( nextSortIdx === null && sorting.length === 1 ) {\n\t\t\t\t\tnextSortIdx = 0; // can't remove sorting completely\n\t\t\t\t}\n\t\n\t\t\t\tif ( nextSortIdx === null ) {\n\t\t\t\t\tsorting.splice( sortIdx, 1 );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsorting[sortIdx][1] = asSorting[ nextSortIdx ];\n\t\t\t\t\tsorting[sortIdx]._idx = nextSortIdx;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// No sort on this column yet\n\t\t\t\tsorting.push( [ colIdx, asSorting[0], 0 ] );\n\t\t\t\tsorting[sorting.length-1]._idx = 0;\n\t\t\t}\n\t\t}\n\t\telse if ( sorting.length && sorting[0][0] == colIdx ) {\n\t\t\t// Single column - already sorting on this column, modify the sort\n\t\t\tnextSortIdx = next( sorting[0] );\n\t\n\t\t\tsorting.length = 1;\n\t\t\tsorting[0][1] = asSorting[ nextSortIdx ];\n\t\t\tsorting[0]._idx = nextSortIdx;\n\t\t}\n\t\telse {\n\t\t\t// Single column - sort only on this column\n\t\t\tsorting.length = 0;\n\t\t\tsorting.push( [ colIdx, asSorting[0] ] );\n\t\t\tsorting[0]._idx = 0;\n\t\t}\n\t\n\t\t// Run the sort by calling a full redraw\n\t\t_fnReDraw( settings );\n\t\n\t\t// callback used for async user interaction\n\t\tif ( typeof callback == 'function' ) {\n\t\t\tcallback( settings );\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Attach a sort handler (click) to a node\n\t *  @param {object} settings dataTables settings object\n\t *  @param {node} attachTo node to attach the handler to\n\t *  @param {int} colIdx column sorting index\n\t *  @param {function} [callback] callback function\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSortAttachListener ( settings, attachTo, colIdx, callback )\n\t{\n\t\tvar col = settings.aoColumns[ colIdx ];\n\t\n\t\t_fnBindAction( attachTo, {}, function (e) {\n\t\t\t/* If the column is not sortable - don't to anything */\n\t\t\tif ( col.bSortable === false ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// If processing is enabled use a timeout to allow the processing\n\t\t\t// display to be shown - otherwise to it synchronously\n\t\t\tif ( settings.oFeatures.bProcessing ) {\n\t\t\t\t_fnProcessingDisplay( settings, true );\n\t\n\t\t\t\tsetTimeout( function() {\n\t\t\t\t\t_fnSortListener( settings, colIdx, e.shiftKey, callback );\n\t\n\t\t\t\t\t// In server-side processing, the draw callback will remove the\n\t\t\t\t\t// processing display\n\t\t\t\t\tif ( _fnDataSource( settings ) !== 'ssp' ) {\n\t\t\t\t\t\t_fnProcessingDisplay( settings, false );\n\t\t\t\t\t}\n\t\t\t\t}, 0 );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t_fnSortListener( settings, colIdx, e.shiftKey, callback );\n\t\t\t}\n\t\t} );\n\t}\n\t\n\t\n\t/**\n\t * Set the sorting classes on table's body, Note: it is safe to call this function\n\t * when bSort and bSortClasses are false\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSortingClasses( settings )\n\t{\n\t\tvar oldSort = settings.aLastSort;\n\t\tvar sortClass = settings.oClasses.sSortColumn;\n\t\tvar sort = _fnSortFlatten( settings );\n\t\tvar features = settings.oFeatures;\n\t\tvar i, ien, colIdx;\n\t\n\t\tif ( features.bSort && features.bSortClasses ) {\n\t\t\t// Remove old sorting classes\n\t\t\tfor ( i=0, ien=oldSort.length ; i<ien ; i++ ) {\n\t\t\t\tcolIdx = oldSort[i].src;\n\t\n\t\t\t\t// Remove column sorting\n\t\t\t\t$( _pluck( settings.aoData, 'anCells', colIdx ) )\n\t\t\t\t\t.removeClass( sortClass + (i<2 ? i+1 : 3) );\n\t\t\t}\n\t\n\t\t\t// Add new column sorting\n\t\t\tfor ( i=0, ien=sort.length ; i<ien ; i++ ) {\n\t\t\t\tcolIdx = sort[i].src;\n\t\n\t\t\t\t$( _pluck( settings.aoData, 'anCells', colIdx ) )\n\t\t\t\t\t.addClass( sortClass + (i<2 ? i+1 : 3) );\n\t\t\t}\n\t\t}\n\t\n\t\tsettings.aLastSort = sort;\n\t}\n\t\n\t\n\t// Get the data to sort a column, be it from cache, fresh (populating the\n\t// cache), or from a sort formatter\n\tfunction _fnSortData( settings, idx )\n\t{\n\t\t// Custom sorting function - provided by the sort data type\n\t\tvar column = settings.aoColumns[ idx ];\n\t\tvar customSort = DataTable.ext.order[ column.sSortDataType ];\n\t\tvar customData;\n\t\n\t\tif ( customSort ) {\n\t\t\tcustomData = customSort.call( settings.oInstance, settings, idx,\n\t\t\t\t_fnColumnIndexToVisible( settings, idx )\n\t\t\t);\n\t\t}\n\t\n\t\t// Use / populate cache\n\t\tvar row, cellData;\n\t\tvar formatter = DataTable.ext.type.order[ column.sType+\"-pre\" ];\n\t\n\t\tfor ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n\t\t\trow = settings.aoData[i];\n\t\n\t\t\tif ( ! row._aSortData ) {\n\t\t\t\trow._aSortData = [];\n\t\t\t}\n\t\n\t\t\tif ( ! row._aSortData[idx] || customSort ) {\n\t\t\t\tcellData = customSort ?\n\t\t\t\t\tcustomData[i] : // If there was a custom sort function, use data from there\n\t\t\t\t\t_fnGetCellData( settings, i, idx, 'sort' );\n\t\n\t\t\t\trow._aSortData[ idx ] = formatter ?\n\t\t\t\t\tformatter( cellData ) :\n\t\t\t\t\tcellData;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t\n\t/**\n\t * Save the state of a table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSaveState ( settings )\n\t{\n\t\tif ( !settings.oFeatures.bStateSave || settings.bDestroying )\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\n\t\t/* Store the interesting variables */\n\t\tvar state = {\n\t\t\ttime:    +new Date(),\n\t\t\tstart:   settings._iDisplayStart,\n\t\t\tlength:  settings._iDisplayLength,\n\t\t\torder:   $.extend( true, [], settings.aaSorting ),\n\t\t\tsearch:  _fnSearchToCamel( settings.oPreviousSearch ),\n\t\t\tcolumns: $.map( settings.aoColumns, function ( col, i ) {\n\t\t\t\treturn {\n\t\t\t\t\tvisible: col.bVisible,\n\t\t\t\t\tsearch: _fnSearchToCamel( settings.aoPreSearchCols[i] )\n\t\t\t\t};\n\t\t\t} )\n\t\t};\n\t\n\t\t_fnCallbackFire( settings, \"aoStateSaveParams\", 'stateSaveParams', [settings, state] );\n\t\n\t\tsettings.oSavedState = state;\n\t\tsettings.fnStateSaveCallback.call( settings.oInstance, settings, state );\n\t}\n\t\n\t\n\t/**\n\t * Attempt to load a saved table state\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {object} oInit DataTables init object so we can override settings\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnLoadState ( settings, oInit )\n\t{\n\t\tvar i, ien;\n\t\tvar columns = settings.aoColumns;\n\t\n\t\tif ( ! settings.oFeatures.bStateSave ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\tvar state = settings.fnStateLoadCallback.call( settings.oInstance, settings );\n\t\tif ( ! state || ! state.time ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\t/* Allow custom and plug-in manipulation functions to alter the saved data set and\n\t\t * cancelling of loading by returning false\n\t\t */\n\t\tvar abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, state] );\n\t\tif ( $.inArray( false, abStateLoad ) !== -1 ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\t/* Reject old data */\n\t\tvar duration = settings.iStateDuration;\n\t\tif ( duration > 0 && state.time < +new Date() - (duration*1000) ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\t// Number of columns have changed - all bets are off, no restore of settings\n\t\tif ( columns.length !== state.columns.length ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\t// Store the saved state so it might be accessed at any time\n\t\tsettings.oLoadedState = $.extend( true, {}, state );\n\t\n\t\t// Restore key features - todo - for 1.11 this needs to be done by\n\t\t// subscribed events\n\t\tif ( state.start !== undefined ) {\n\t\t\tsettings._iDisplayStart    = state.start;\n\t\t\tsettings.iInitDisplayStart = state.start;\n\t\t}\n\t\tif ( state.length !== undefined ) {\n\t\t\tsettings._iDisplayLength   = state.length;\n\t\t}\n\t\n\t\t// Order\n\t\tif ( state.order !== undefined ) {\n\t\t\tsettings.aaSorting = [];\n\t\t\t$.each( state.order, function ( i, col ) {\n\t\t\t\tsettings.aaSorting.push( col[0] >= columns.length ?\n\t\t\t\t\t[ 0, col[1] ] :\n\t\t\t\t\tcol\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\t\n\t\t// Search\n\t\tif ( state.search !== undefined ) {\n\t\t\t$.extend( settings.oPreviousSearch, _fnSearchToHung( state.search ) );\n\t\t}\n\t\n\t\t// Columns\n\t\tfor ( i=0, ien=state.columns.length ; i<ien ; i++ ) {\n\t\t\tvar col = state.columns[i];\n\t\n\t\t\t// Visibility\n\t\t\tif ( col.visible !== undefined ) {\n\t\t\t\tcolumns[i].bVisible = col.visible;\n\t\t\t}\n\t\n\t\t\t// Search\n\t\t\tif ( col.search !== undefined ) {\n\t\t\t\t$.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );\n\t\t\t}\n\t\t}\n\t\n\t\t_fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, state] );\n\t}\n\t\n\t\n\t/**\n\t * Return the settings object for a particular table\n\t *  @param {node} table table we are using as a dataTable\n\t *  @returns {object} Settings object - or null if not found\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSettingsFromNode ( table )\n\t{\n\t\tvar settings = DataTable.settings;\n\t\tvar idx = $.inArray( table, _pluck( settings, 'nTable' ) );\n\t\n\t\treturn idx !== -1 ?\n\t\t\tsettings[ idx ] :\n\t\t\tnull;\n\t}\n\t\n\t\n\t/**\n\t * Log an error message\n\t *  @param {object} settings dataTables settings object\n\t *  @param {int} level log error messages, or display them to the user\n\t *  @param {string} msg error message\n\t *  @param {int} tn Technical note id to get more information about the error.\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnLog( settings, level, msg, tn )\n\t{\n\t\tmsg = 'DataTables warning: '+\n\t\t\t(settings!==null ? 'table id='+settings.sTableId+' - ' : '')+msg;\n\t\n\t\tif ( tn ) {\n\t\t\tmsg += '. For more information about this error, please see '+\n\t\t\t'http://datatables.net/tn/'+tn;\n\t\t}\n\t\n\t\tif ( ! level  ) {\n\t\t\t// Backwards compatibility pre 1.10\n\t\t\tvar ext = DataTable.ext;\n\t\t\tvar type = ext.sErrMode || ext.errMode;\n\t\n\t\t\t_fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );\n\t\n\t\t\tif ( type == 'alert' ) {\n\t\t\t\talert( msg );\n\t\t\t}\n\t\t\telse if ( type == 'throw' ) {\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\t\t\telse if ( typeof type == 'function' ) {\n\t\t\t\ttype( settings, tn, msg );\n\t\t\t}\n\t\t}\n\t\telse if ( window.console && console.log ) {\n\t\t\tconsole.log( msg );\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * See if a property is defined on one object, if so assign it to the other object\n\t *  @param {object} ret target object\n\t *  @param {object} src source object\n\t *  @param {string} name property\n\t *  @param {string} [mappedName] name to map too - optional, name used if not given\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnMap( ret, src, name, mappedName )\n\t{\n\t\tif ( $.isArray( name ) ) {\n\t\t\t$.each( name, function (i, val) {\n\t\t\t\tif ( $.isArray( val ) ) {\n\t\t\t\t\t_fnMap( ret, src, val[0], val[1] );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t_fnMap( ret, src, val );\n\t\t\t\t}\n\t\t\t} );\n\t\n\t\t\treturn;\n\t\t}\n\t\n\t\tif ( mappedName === undefined ) {\n\t\t\tmappedName = name;\n\t\t}\n\t\n\t\tif ( src[name] !== undefined ) {\n\t\t\tret[mappedName] = src[name];\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Extend objects - very similar to jQuery.extend, but deep copy objects, and\n\t * shallow copy arrays. The reason we need to do this, is that we don't want to\n\t * deep copy array init values (such as aaSorting) since the dev wouldn't be\n\t * able to override them, but we do want to deep copy arrays.\n\t *  @param {object} out Object to extend\n\t *  @param {object} extender Object from which the properties will be applied to\n\t *      out\n\t *  @param {boolean} breakRefs If true, then arrays will be sliced to take an\n\t *      independent copy with the exception of the `data` or `aaData` parameters\n\t *      if they are present. This is so you can pass in a collection to\n\t *      DataTables and have that used as your data source without breaking the\n\t *      references\n\t *  @returns {object} out Reference, just for convenience - out === the return.\n\t *  @memberof DataTable#oApi\n\t *  @todo This doesn't take account of arrays inside the deep copied objects.\n\t */\n\tfunction _fnExtend( out, extender, breakRefs )\n\t{\n\t\tvar val;\n\t\n\t\tfor ( var prop in extender ) {\n\t\t\tif ( extender.hasOwnProperty(prop) ) {\n\t\t\t\tval = extender[prop];\n\t\n\t\t\t\tif ( $.isPlainObject( val ) ) {\n\t\t\t\t\tif ( ! $.isPlainObject( out[prop] ) ) {\n\t\t\t\t\t\tout[prop] = {};\n\t\t\t\t\t}\n\t\t\t\t\t$.extend( true, out[prop], val );\n\t\t\t\t}\n\t\t\t\telse if ( breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val) ) {\n\t\t\t\t\tout[prop] = val.slice();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tout[prop] = val;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn out;\n\t}\n\t\n\t\n\t/**\n\t * Bind an event handers to allow a click or return key to activate the callback.\n\t * This is good for accessibility since a return on the keyboard will have the\n\t * same effect as a click, if the element has focus.\n\t *  @param {element} n Element to bind the action to\n\t *  @param {object} oData Data object to pass to the triggered function\n\t *  @param {function} fn Callback function for when the event is triggered\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnBindAction( n, oData, fn )\n\t{\n\t\t$(n)\n\t\t\t.bind( 'click.DT', oData, function (e) {\n\t\t\t\t\tn.blur(); // Remove focus outline for mouse users\n\t\t\t\t\tfn(e);\n\t\t\t\t} )\n\t\t\t.bind( 'keypress.DT', oData, function (e){\n\t\t\t\t\tif ( e.which === 13 ) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tfn(e);\n\t\t\t\t\t}\n\t\t\t\t} )\n\t\t\t.bind( 'selectstart.DT', function () {\n\t\t\t\t\t/* Take the brutal approach to cancelling text selection */\n\t\t\t\t\treturn false;\n\t\t\t\t} );\n\t}\n\t\n\t\n\t/**\n\t * Register a callback function. Easily allows a callback function to be added to\n\t * an array store of callback functions that can then all be called together.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {string} sStore Name of the array storage for the callbacks in oSettings\n\t *  @param {function} fn Function to be called back\n\t *  @param {string} sName Identifying name for the callback (i.e. a label)\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnCallbackReg( oSettings, sStore, fn, sName )\n\t{\n\t\tif ( fn )\n\t\t{\n\t\t\toSettings[sStore].push( {\n\t\t\t\t\"fn\": fn,\n\t\t\t\t\"sName\": sName\n\t\t\t} );\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Fire callback functions and trigger events. Note that the loop over the\n\t * callback array store is done backwards! Further note that you do not want to\n\t * fire off triggers in time sensitive applications (for example cell creation)\n\t * as its slow.\n\t *  @param {object} settings dataTables settings object\n\t *  @param {string} callbackArr Name of the array storage for the callbacks in\n\t *      oSettings\n\t *  @param {string} eventName Name of the jQuery custom event to trigger. If\n\t *      null no trigger is fired\n\t *  @param {array} args Array of arguments to pass to the callback function /\n\t *      trigger\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnCallbackFire( settings, callbackArr, eventName, args )\n\t{\n\t\tvar ret = [];\n\t\n\t\tif ( callbackArr ) {\n\t\t\tret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {\n\t\t\t\treturn val.fn.apply( settings.oInstance, args );\n\t\t\t} );\n\t\t}\n\t\n\t\tif ( eventName !== null ) {\n\t\t\tvar e = $.Event( eventName+'.dt' );\n\t\n\t\t\t$(settings.nTable).trigger( e, args );\n\t\n\t\t\tret.push( e.result );\n\t\t}\n\t\n\t\treturn ret;\n\t}\n\t\n\t\n\tfunction _fnLengthOverflow ( settings )\n\t{\n\t\tvar\n\t\t\tstart = settings._iDisplayStart,\n\t\t\tend = settings.fnDisplayEnd(),\n\t\t\tlen = settings._iDisplayLength;\n\t\n\t\t/* If we have space to show extra rows (backing up from the end point - then do so */\n\t\tif ( start >= end )\n\t\t{\n\t\t\tstart = end - len;\n\t\t}\n\t\n\t\t// Keep the start record on the current page\n\t\tstart -= (start % len);\n\t\n\t\tif ( len === -1 || start < 0 )\n\t\t{\n\t\t\tstart = 0;\n\t\t}\n\t\n\t\tsettings._iDisplayStart = start;\n\t}\n\t\n\t\n\tfunction _fnRenderer( settings, type )\n\t{\n\t\tvar renderer = settings.renderer;\n\t\tvar host = DataTable.ext.renderer[type];\n\t\n\t\tif ( $.isPlainObject( renderer ) && renderer[type] ) {\n\t\t\t// Specific renderer for this type. If available use it, otherwise use\n\t\t\t// the default.\n\t\t\treturn host[renderer[type]] || host._;\n\t\t}\n\t\telse if ( typeof renderer === 'string' ) {\n\t\t\t// Common renderer - if there is one available for this type use it,\n\t\t\t// otherwise use the default\n\t\t\treturn host[renderer] || host._;\n\t\t}\n\t\n\t\t// Use the default\n\t\treturn host._;\n\t}\n\t\n\t\n\t/**\n\t * Detect the data source being used for the table. Used to simplify the code\n\t * a little (ajax) and to make it compress a little smaller.\n\t *\n\t *  @param {object} settings dataTables settings object\n\t *  @returns {string} Data source\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnDataSource ( settings )\n\t{\n\t\tif ( settings.oFeatures.bServerSide ) {\n\t\t\treturn 'ssp';\n\t\t}\n\t\telse if ( settings.ajax || settings.sAjaxSource ) {\n\t\t\treturn 'ajax';\n\t\t}\n\t\treturn 'dom';\n\t}\n\t\n\n\tDataTable = function( options )\n\t{\n\t\t/**\n\t\t * Perform a jQuery selector action on the table's TR elements (from the tbody) and\n\t\t * return the resulting jQuery object.\n\t\t *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n\t\t *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n\t\t *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter\n\t\t *    criterion (\"applied\") or all TR elements (i.e. no filter).\n\t\t *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.\n\t\t *    Can be either 'current', whereby the current sorting of the table is used, or\n\t\t *    'original' whereby the original order the data was read into the table is used.\n\t\t *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n\t\t *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n\t\t *    'current' and filter is 'applied', regardless of what they might be given as.\n\t\t *  @returns {object} jQuery object, filtered by the given selector.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Highlight every second row\n\t\t *      oTable.$('tr:odd').css('backgroundColor', 'blue');\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Filter to rows with 'Webkit' in them, add a background colour and then\n\t\t *      // remove the filter, thus highlighting the 'Webkit' rows only.\n\t\t *      oTable.fnFilter('Webkit');\n\t\t *      oTable.$('tr', {\"search\": \"applied\"}).css('backgroundColor', 'blue');\n\t\t *      oTable.fnFilter('');\n\t\t *    } );\n\t\t */\n\t\tthis.$ = function ( sSelector, oOpts )\n\t\t{\n\t\t\treturn this.api(true).$( sSelector, oOpts );\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Almost identical to $ in operation, but in this case returns the data for the matched\n\t\t * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes\n\t\t * rather than any descendants, so the data can be obtained for the row/cell. If matching\n\t\t * rows are found, the data returned is the original data array/object that was used to\n\t\t * create the row (or a generated array if from a DOM source).\n\t\t *\n\t\t * This method is often useful in-combination with $ where both functions are given the\n\t\t * same parameters and the array indexes will match identically.\n\t\t *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n\t\t *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n\t\t *  @param {string} [oOpts.filter=none] Select elements that meet the current filter\n\t\t *    criterion (\"applied\") or all elements (i.e. no filter).\n\t\t *  @param {string} [oOpts.order=current] Order of the data in the processed array.\n\t\t *    Can be either 'current', whereby the current sorting of the table is used, or\n\t\t *    'original' whereby the original order the data was read into the table is used.\n\t\t *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n\t\t *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n\t\t *    'current' and filter is 'applied', regardless of what they might be given as.\n\t\t *  @returns {array} Data for the matched elements. If any elements, as a result of the\n\t\t *    selector, were not TR, TD or TH elements in the DataTable, they will have a null\n\t\t *    entry in the array.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Get the data from the first row in the table\n\t\t *      var data = oTable._('tr:first');\n\t\t *\n\t\t *      // Do something useful with the data\n\t\t *      alert( \"First cell is: \"+data[0] );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Filter to 'Webkit' and get all data for\n\t\t *      oTable.fnFilter('Webkit');\n\t\t *      var data = oTable._('tr', {\"search\": \"applied\"});\n\t\t *\n\t\t *      // Do something with the data\n\t\t *      alert( data.length+\" rows matched the search\" );\n\t\t *    } );\n\t\t */\n\t\tthis._ = function ( sSelector, oOpts )\n\t\t{\n\t\t\treturn this.api(true).rows( sSelector, oOpts ).data();\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Create a DataTables Api instance, with the currently selected tables for\n\t\t * the Api's context.\n\t\t * @param {boolean} [traditional=false] Set the API instance's context to be\n\t\t *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was\n\t\t *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),\n\t\t *   or if all tables captured in the jQuery object should be used.\n\t\t * @return {DataTables.Api}\n\t\t */\n\t\tthis.api = function ( traditional )\n\t\t{\n\t\t\treturn traditional ?\n\t\t\t\tnew _Api(\n\t\t\t\t\t_fnSettingsFromNode( this[ _ext.iApiIndex ] )\n\t\t\t\t) :\n\t\t\t\tnew _Api( this );\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Add a single new row or multiple rows of data to the table. Please note\n\t\t * that this is suitable for client-side processing only - if you are using\n\t\t * server-side processing (i.e. \"bServerSide\": true), then to add data, you\n\t\t * must add it to the data source, i.e. the server-side, through an Ajax call.\n\t\t *  @param {array|object} data The data to be added to the table. This can be:\n\t\t *    <ul>\n\t\t *      <li>1D array of data - add a single row with the data provided</li>\n\t\t *      <li>2D array of arrays - add multiple rows in a single call</li>\n\t\t *      <li>object - data object when using <i>mData</i></li>\n\t\t *      <li>array of objects - multiple data objects when using <i>mData</i></li>\n\t\t *    </ul>\n\t\t *  @param {bool} [redraw=true] redraw the table or not\n\t\t *  @returns {array} An array of integers, representing the list of indexes in\n\t\t *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to\n\t\t *    the table.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    // Global var for counter\n\t\t *    var giCount = 2;\n\t\t *\n\t\t *    $(document).ready(function() {\n\t\t *      $('#example').dataTable();\n\t\t *    } );\n\t\t *\n\t\t *    function fnClickAddRow() {\n\t\t *      $('#example').dataTable().fnAddData( [\n\t\t *        giCount+\".1\",\n\t\t *        giCount+\".2\",\n\t\t *        giCount+\".3\",\n\t\t *        giCount+\".4\" ]\n\t\t *      );\n\t\t *\n\t\t *      giCount++;\n\t\t *    }\n\t\t */\n\t\tthis.fnAddData = function( data, redraw )\n\t\t{\n\t\t\tvar api = this.api( true );\n\t\t\n\t\t\t/* Check if we want to add multiple rows or not */\n\t\t\tvar rows = $.isArray(data) && ( $.isArray(data[0]) || $.isPlainObject(data[0]) ) ?\n\t\t\t\tapi.rows.add( data ) :\n\t\t\t\tapi.row.add( data );\n\t\t\n\t\t\tif ( redraw === undefined || redraw ) {\n\t\t\t\tapi.draw();\n\t\t\t}\n\t\t\n\t\t\treturn rows.flatten().toArray();\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * This function will make DataTables recalculate the column sizes, based on the data\n\t\t * contained in the table and the sizes applied to the columns (in the DOM, CSS or\n\t\t * through the sWidth parameter). This can be useful when the width of the table's\n\t\t * parent element changes (for example a window resize).\n\t\t *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable( {\n\t\t *        \"sScrollY\": \"200px\",\n\t\t *        \"bPaginate\": false\n\t\t *      } );\n\t\t *\n\t\t *      $(window).bind('resize', function () {\n\t\t *        oTable.fnAdjustColumnSizing();\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\tthis.fnAdjustColumnSizing = function ( bRedraw )\n\t\t{\n\t\t\tvar api = this.api( true ).columns.adjust();\n\t\t\tvar settings = api.settings()[0];\n\t\t\tvar scroll = settings.oScroll;\n\t\t\n\t\t\tif ( bRedraw === undefined || bRedraw ) {\n\t\t\t\tapi.draw( false );\n\t\t\t}\n\t\t\telse if ( scroll.sX !== \"\" || scroll.sY !== \"\" ) {\n\t\t\t\t/* If not redrawing, but scrolling, we want to apply the new column sizes anyway */\n\t\t\t\t_fnScrollDraw( settings );\n\t\t\t}\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Quickly and simply clear a table\n\t\t *  @param {bool} [bRedraw=true] redraw the table or not\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)\n\t\t *      oTable.fnClearTable();\n\t\t *    } );\n\t\t */\n\t\tthis.fnClearTable = function( bRedraw )\n\t\t{\n\t\t\tvar api = this.api( true ).clear();\n\t\t\n\t\t\tif ( bRedraw === undefined || bRedraw ) {\n\t\t\t\tapi.draw();\n\t\t\t}\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * The exact opposite of 'opening' a row, this function will close any rows which\n\t\t * are currently 'open'.\n\t\t *  @param {node} nTr the table row to 'close'\n\t\t *  @returns {int} 0 on success, or 1 if failed (can't find the row)\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable;\n\t\t *\n\t\t *      // 'open' an information row when a row is clicked on\n\t\t *      $('#example tbody tr').click( function () {\n\t\t *        if ( oTable.fnIsOpen(this) ) {\n\t\t *          oTable.fnClose( this );\n\t\t *        } else {\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n\t\t *        }\n\t\t *      } );\n\t\t *\n\t\t *      oTable = $('#example').dataTable();\n\t\t *    } );\n\t\t */\n\t\tthis.fnClose = function( nTr )\n\t\t{\n\t\t\tthis.api( true ).row( nTr ).child.hide();\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Remove a row for the table\n\t\t *  @param {mixed} target The index of the row from aoData to be deleted, or\n\t\t *    the TR element you want to delete\n\t\t *  @param {function|null} [callBack] Callback function\n\t\t *  @param {bool} [redraw=true] Redraw the table or not\n\t\t *  @returns {array} The row that was deleted\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Immediately remove the first row\n\t\t *      oTable.fnDeleteRow( 0 );\n\t\t *    } );\n\t\t */\n\t\tthis.fnDeleteRow = function( target, callback, redraw )\n\t\t{\n\t\t\tvar api = this.api( true );\n\t\t\tvar rows = api.rows( target );\n\t\t\tvar settings = rows.settings()[0];\n\t\t\tvar data = settings.aoData[ rows[0][0] ];\n\t\t\n\t\t\trows.remove();\n\t\t\n\t\t\tif ( callback ) {\n\t\t\t\tcallback.call( this, settings, data );\n\t\t\t}\n\t\t\n\t\t\tif ( redraw === undefined || redraw ) {\n\t\t\t\tapi.draw();\n\t\t\t}\n\t\t\n\t\t\treturn data;\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Restore the table to it's original state in the DOM by removing all of DataTables\n\t\t * enhancements, alterations to the DOM structure of the table and event listeners.\n\t\t *  @param {boolean} [remove=false] Completely remove the table from the DOM\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      // This example is fairly pointless in reality, but shows how fnDestroy can be used\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *      oTable.fnDestroy();\n\t\t *    } );\n\t\t */\n\t\tthis.fnDestroy = function ( remove )\n\t\t{\n\t\t\tthis.api( true ).destroy( remove );\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Redraw the table\n\t\t *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)\n\t\t *      oTable.fnDraw();\n\t\t *    } );\n\t\t */\n\t\tthis.fnDraw = function( complete )\n\t\t{\n\t\t\t// Note that this isn't an exact match to the old call to _fnDraw - it takes\n\t\t\t// into account the new data, but can hold position.\n\t\t\tthis.api( true ).draw( complete );\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Filter the input based on data\n\t\t *  @param {string} sInput String to filter the table on\n\t\t *  @param {int|null} [iColumn] Column to limit filtering to\n\t\t *  @param {bool} [bRegex=false] Treat as regular expression or not\n\t\t *  @param {bool} [bSmart=true] Perform smart filtering or not\n\t\t *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)\n\t\t *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Sometime later - filter...\n\t\t *      oTable.fnFilter( 'test string' );\n\t\t *    } );\n\t\t */\n\t\tthis.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )\n\t\t{\n\t\t\tvar api = this.api( true );\n\t\t\n\t\t\tif ( iColumn === null || iColumn === undefined ) {\n\t\t\t\tapi.search( sInput, bRegex, bSmart, bCaseInsensitive );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tapi.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );\n\t\t\t}\n\t\t\n\t\t\tapi.draw();\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Get the data for the whole table, an individual row or an individual cell based on the\n\t\t * provided parameters.\n\t\t *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as\n\t\t *    a TR node then the data source for the whole row will be returned. If given as a\n\t\t *    TD/TH cell node then iCol will be automatically calculated and the data for the\n\t\t *    cell returned. If given as an integer, then this is treated as the aoData internal\n\t\t *    data index for the row (see fnGetPosition) and the data for that row used.\n\t\t *  @param {int} [col] Optional column index that you want the data of.\n\t\t *  @returns {array|object|string} If mRow is undefined, then the data for all rows is\n\t\t *    returned. If mRow is defined, just data for that row, and is iCol is\n\t\t *    defined, only data for the designated cell is returned.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    // Row data\n\t\t *    $(document).ready(function() {\n\t\t *      oTable = $('#example').dataTable();\n\t\t *\n\t\t *      oTable.$('tr').click( function () {\n\t\t *        var data = oTable.fnGetData( this );\n\t\t *        // ... do something with the array / object of data for the row\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Individual cell data\n\t\t *    $(document).ready(function() {\n\t\t *      oTable = $('#example').dataTable();\n\t\t *\n\t\t *      oTable.$('td').click( function () {\n\t\t *        var sData = oTable.fnGetData( this );\n\t\t *        alert( 'The cell clicked on had the value of '+sData );\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\tthis.fnGetData = function( src, col )\n\t\t{\n\t\t\tvar api = this.api( true );\n\t\t\n\t\t\tif ( src !== undefined ) {\n\t\t\t\tvar type = src.nodeName ? src.nodeName.toLowerCase() : '';\n\t\t\n\t\t\t\treturn col !== undefined || type == 'td' || type == 'th' ?\n\t\t\t\t\tapi.cell( src, col ).data() :\n\t\t\t\t\tapi.row( src ).data() || null;\n\t\t\t}\n\t\t\n\t\t\treturn api.data().toArray();\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Get an array of the TR nodes that are used in the table's body. Note that you will\n\t\t * typically want to use the '$' API method in preference to this as it is more\n\t\t * flexible.\n\t\t *  @param {int} [iRow] Optional row index for the TR element you want\n\t\t *  @returns {array|node} If iRow is undefined, returns an array of all TR elements\n\t\t *    in the table's body, or iRow is defined, just the TR element requested.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Get the nodes from the table\n\t\t *      var nNodes = oTable.fnGetNodes( );\n\t\t *    } );\n\t\t */\n\t\tthis.fnGetNodes = function( iRow )\n\t\t{\n\t\t\tvar api = this.api( true );\n\t\t\n\t\t\treturn iRow !== undefined ?\n\t\t\t\tapi.row( iRow ).node() :\n\t\t\t\tapi.rows().nodes().flatten().toArray();\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Get the array indexes of a particular cell from it's DOM element\n\t\t * and column index including hidden columns\n\t\t *  @param {node} node this can either be a TR, TD or TH in the table's body\n\t\t *  @returns {int} If nNode is given as a TR, then a single index is returned, or\n\t\t *    if given as a cell, an array of [row index, column index (visible),\n\t\t *    column index (all)] is given.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      $('#example tbody td').click( function () {\n\t\t *        // Get the position of the current data from the node\n\t\t *        var aPos = oTable.fnGetPosition( this );\n\t\t *\n\t\t *        // Get the data array for this row\n\t\t *        var aData = oTable.fnGetData( aPos[0] );\n\t\t *\n\t\t *        // Update the data array and return the value\n\t\t *        aData[ aPos[1] ] = 'clicked';\n\t\t *        this.innerHTML = 'clicked';\n\t\t *      } );\n\t\t *\n\t\t *      // Init DataTables\n\t\t *      oTable = $('#example').dataTable();\n\t\t *    } );\n\t\t */\n\t\tthis.fnGetPosition = function( node )\n\t\t{\n\t\t\tvar api = this.api( true );\n\t\t\tvar nodeName = node.nodeName.toUpperCase();\n\t\t\n\t\t\tif ( nodeName == 'TR' ) {\n\t\t\t\treturn api.row( node ).index();\n\t\t\t}\n\t\t\telse if ( nodeName == 'TD' || nodeName == 'TH' ) {\n\t\t\t\tvar cell = api.cell( node ).index();\n\t\t\n\t\t\t\treturn [\n\t\t\t\t\tcell.row,\n\t\t\t\t\tcell.columnVisible,\n\t\t\t\t\tcell.column\n\t\t\t\t];\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Check to see if a row is 'open' or not.\n\t\t *  @param {node} nTr the table row to check\n\t\t *  @returns {boolean} true if the row is currently open, false otherwise\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable;\n\t\t *\n\t\t *      // 'open' an information row when a row is clicked on\n\t\t *      $('#example tbody tr').click( function () {\n\t\t *        if ( oTable.fnIsOpen(this) ) {\n\t\t *          oTable.fnClose( this );\n\t\t *        } else {\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n\t\t *        }\n\t\t *      } );\n\t\t *\n\t\t *      oTable = $('#example').dataTable();\n\t\t *    } );\n\t\t */\n\t\tthis.fnIsOpen = function( nTr )\n\t\t{\n\t\t\treturn this.api( true ).row( nTr ).child.isShown();\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * This function will place a new row directly after a row which is currently\n\t\t * on display on the page, with the HTML contents that is passed into the\n\t\t * function. This can be used, for example, to ask for confirmation that a\n\t\t * particular record should be deleted.\n\t\t *  @param {node} nTr The table row to 'open'\n\t\t *  @param {string|node|jQuery} mHtml The HTML to put into the row\n\t\t *  @param {string} sClass Class to give the new TD cell\n\t\t *  @returns {node} The row opened. Note that if the table row passed in as the\n\t\t *    first parameter, is not found in the table, this method will silently\n\t\t *    return.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable;\n\t\t *\n\t\t *      // 'open' an information row when a row is clicked on\n\t\t *      $('#example tbody tr').click( function () {\n\t\t *        if ( oTable.fnIsOpen(this) ) {\n\t\t *          oTable.fnClose( this );\n\t\t *        } else {\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n\t\t *        }\n\t\t *      } );\n\t\t *\n\t\t *      oTable = $('#example').dataTable();\n\t\t *    } );\n\t\t */\n\t\tthis.fnOpen = function( nTr, mHtml, sClass )\n\t\t{\n\t\t\treturn this.api( true )\n\t\t\t\t.row( nTr )\n\t\t\t\t.child( mHtml, sClass )\n\t\t\t\t.show()\n\t\t\t\t.child()[0];\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Change the pagination - provides the internal logic for pagination in a simple API\n\t\t * function. With this function you can have a DataTables table go to the next,\n\t\t * previous, first or last pages.\n\t\t *  @param {string|int} mAction Paging action to take: \"first\", \"previous\", \"next\" or \"last\"\n\t\t *    or page number to jump to (integer), note that page 0 is the first page.\n\t\t *  @param {bool} [bRedraw=true] Redraw the table or not\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *      oTable.fnPageChange( 'next' );\n\t\t *    } );\n\t\t */\n\t\tthis.fnPageChange = function ( mAction, bRedraw )\n\t\t{\n\t\t\tvar api = this.api( true ).page( mAction );\n\t\t\n\t\t\tif ( bRedraw === undefined || bRedraw ) {\n\t\t\t\tapi.draw(false);\n\t\t\t}\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Show a particular column\n\t\t *  @param {int} iCol The column whose display should be changed\n\t\t *  @param {bool} bShow Show (true) or hide (false) the column\n\t\t *  @param {bool} [bRedraw=true] Redraw the table or not\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Hide the second column after initialisation\n\t\t *      oTable.fnSetColumnVis( 1, false );\n\t\t *    } );\n\t\t */\n\t\tthis.fnSetColumnVis = function ( iCol, bShow, bRedraw )\n\t\t{\n\t\t\tvar api = this.api( true ).column( iCol ).visible( bShow );\n\t\t\n\t\t\tif ( bRedraw === undefined || bRedraw ) {\n\t\t\t\tapi.columns.adjust().draw();\n\t\t\t}\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Get the settings for a particular table for external manipulation\n\t\t *  @returns {object} DataTables settings object. See\n\t\t *    {@link DataTable.models.oSettings}\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *      var oSettings = oTable.fnSettings();\n\t\t *\n\t\t *      // Show an example parameter from the settings\n\t\t *      alert( oSettings._iDisplayStart );\n\t\t *    } );\n\t\t */\n\t\tthis.fnSettings = function()\n\t\t{\n\t\t\treturn _fnSettingsFromNode( this[_ext.iApiIndex] );\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Sort the table by a particular column\n\t\t *  @param {int} iCol the data index to sort on. Note that this will not match the\n\t\t *    'display index' if you have hidden data entries\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Sort immediately with columns 0 and 1\n\t\t *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );\n\t\t *    } );\n\t\t */\n\t\tthis.fnSort = function( aaSort )\n\t\t{\n\t\t\tthis.api( true ).order( aaSort ).draw();\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Attach a sort listener to an element for a given column\n\t\t *  @param {node} nNode the element to attach the sort listener to\n\t\t *  @param {int} iColumn the column that a click on this node will sort on\n\t\t *  @param {function} [fnCallback] callback function when sort is run\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Sort on column 1, when 'sorter' is clicked on\n\t\t *      oTable.fnSortListener( document.getElementById('sorter'), 1 );\n\t\t *    } );\n\t\t */\n\t\tthis.fnSortListener = function( nNode, iColumn, fnCallback )\n\t\t{\n\t\t\tthis.api( true ).order.listener( nNode, iColumn, fnCallback );\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Update a table cell or row - this method will accept either a single value to\n\t\t * update the cell with, an array of values with one element for each column or\n\t\t * an object in the same format as the original data source. The function is\n\t\t * self-referencing in order to make the multi column updates easier.\n\t\t *  @param {object|array|string} mData Data to update the cell/row with\n\t\t *  @param {node|int} mRow TR element you want to update or the aoData index\n\t\t *  @param {int} [iColumn] The column to update, give as null or undefined to\n\t\t *    update a whole row.\n\t\t *  @param {bool} [bRedraw=true] Redraw the table or not\n\t\t *  @param {bool} [bAction=true] Perform pre-draw actions or not\n\t\t *  @returns {int} 0 on success, 1 on error\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell\n\t\t *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row\n\t\t *    } );\n\t\t */\n\t\tthis.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )\n\t\t{\n\t\t\tvar api = this.api( true );\n\t\t\n\t\t\tif ( iColumn === undefined || iColumn === null ) {\n\t\t\t\tapi.row( mRow ).data( mData );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tapi.cell( mRow, iColumn ).data( mData );\n\t\t\t}\n\t\t\n\t\t\tif ( bAction === undefined || bAction ) {\n\t\t\t\tapi.columns.adjust();\n\t\t\t}\n\t\t\n\t\t\tif ( bRedraw === undefined || bRedraw ) {\n\t\t\t\tapi.draw();\n\t\t\t}\n\t\t\treturn 0;\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Provide a common method for plug-ins to check the version of DataTables being used, in order\n\t\t * to ensure compatibility.\n\t\t *  @param {string} sVersion Version string to check for, in the format \"X.Y.Z\". Note that the\n\t\t *    formats \"X\" and \"X.Y\" are also acceptable.\n\t\t *  @returns {boolean} true if this version of DataTables is greater or equal to the required\n\t\t *    version, or false if this version of DataTales is not suitable\n\t\t *  @method\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *      alert( oTable.fnVersionCheck( '1.9.0' ) );\n\t\t *    } );\n\t\t */\n\t\tthis.fnVersionCheck = _ext.fnVersionCheck;\n\t\t\n\n\t\tvar _that = this;\n\t\tvar emptyInit = options === undefined;\n\t\tvar len = this.length;\n\n\t\tif ( emptyInit ) {\n\t\t\toptions = {};\n\t\t}\n\n\t\tthis.oApi = this.internal = _ext.internal;\n\n\t\t// Extend with old style plug-in API methods\n\t\tfor ( var fn in DataTable.ext.internal ) {\n\t\t\tif ( fn ) {\n\t\t\t\tthis[fn] = _fnExternApiFunc(fn);\n\t\t\t}\n\t\t}\n\n\t\tthis.each(function() {\n\t\t\t// For each initialisation we want to give it a clean initialisation\n\t\t\t// object that can be bashed around\n\t\t\tvar o = {};\n\t\t\tvar oInit = len > 1 ? // optimisation for single table case\n\t\t\t\t_fnExtend( o, options, true ) :\n\t\t\t\toptions;\n\n\t\t\t/*global oInit,_that,emptyInit*/\n\t\t\tvar i=0, iLen, j, jLen, k, kLen;\n\t\t\tvar sId = this.getAttribute( 'id' );\n\t\t\tvar bInitHandedOff = false;\n\t\t\tvar defaults = DataTable.defaults;\n\t\t\tvar $this = $(this);\n\t\t\t\n\t\t\t\n\t\t\t/* Sanity check */\n\t\t\tif ( this.nodeName.toLowerCase() != 'table' )\n\t\t\t{\n\t\t\t\t_fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t/* Backwards compatibility for the defaults */\n\t\t\t_fnCompatOpts( defaults );\n\t\t\t_fnCompatCols( defaults.column );\n\t\t\t\n\t\t\t/* Convert the camel-case defaults to Hungarian */\n\t\t\t_fnCamelToHungarian( defaults, defaults, true );\n\t\t\t_fnCamelToHungarian( defaults.column, defaults.column, true );\n\t\t\t\n\t\t\t/* Setting up the initialisation object */\n\t\t\t_fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ) );\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t/* Check to see if we are re-initialising a table */\n\t\t\tvar allSettings = DataTable.settings;\n\t\t\tfor ( i=0, iLen=allSettings.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\tvar s = allSettings[i];\n\t\t\t\n\t\t\t\t/* Base check on table node */\n\t\t\t\tif ( s.nTable == this || s.nTHead.parentNode == this || (s.nTFoot && s.nTFoot.parentNode == this) )\n\t\t\t\t{\n\t\t\t\t\tvar bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;\n\t\t\t\t\tvar bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;\n\t\t\t\n\t\t\t\t\tif ( emptyInit || bRetrieve )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn s.oInstance;\n\t\t\t\t\t}\n\t\t\t\t\telse if ( bDestroy )\n\t\t\t\t\t{\n\t\t\t\t\t\ts.oInstance.fnDestroy();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t_fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\t/* If the element we are initialising has the same ID as a table which was previously\n\t\t\t\t * initialised, but the table nodes don't match (from before) then we destroy the old\n\t\t\t\t * instance by simply deleting it. This is under the assumption that the table has been\n\t\t\t\t * destroyed by other methods. Anyone using non-id selectors will need to do this manually\n\t\t\t\t */\n\t\t\t\tif ( s.sTableId == this.id )\n\t\t\t\t{\n\t\t\t\t\tallSettings.splice( i, 1 );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/* Ensure the table has an ID - required for accessibility */\n\t\t\tif ( sId === null || sId === \"\" )\n\t\t\t{\n\t\t\t\tsId = \"DataTables_Table_\"+(DataTable.ext._unique++);\n\t\t\t\tthis.id = sId;\n\t\t\t}\n\t\t\t\n\t\t\t/* Create the settings object for this table and set some of the default parameters */\n\t\t\tvar oSettings = $.extend( true, {}, DataTable.models.oSettings, {\n\t\t\t\t\"sDestroyWidth\": $this[0].style.width,\n\t\t\t\t\"sInstance\":     sId,\n\t\t\t\t\"sTableId\":      sId\n\t\t\t} );\n\t\t\toSettings.nTable = this;\n\t\t\toSettings.oApi   = _that.internal;\n\t\t\toSettings.oInit  = oInit;\n\t\t\t\n\t\t\tallSettings.push( oSettings );\n\t\t\t\n\t\t\t// Need to add the instance after the instance after the settings object has been added\n\t\t\t// to the settings array, so we can self reference the table instance if more than one\n\t\t\toSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();\n\t\t\t\n\t\t\t// Backwards compatibility, before we apply all the defaults\n\t\t\t_fnCompatOpts( oInit );\n\t\t\t\n\t\t\tif ( oInit.oLanguage )\n\t\t\t{\n\t\t\t\t_fnLanguageCompat( oInit.oLanguage );\n\t\t\t}\n\t\t\t\n\t\t\t// If the length menu is given, but the init display length is not, use the length menu\n\t\t\tif ( oInit.aLengthMenu && ! oInit.iDisplayLength )\n\t\t\t{\n\t\t\t\toInit.iDisplayLength = $.isArray( oInit.aLengthMenu[0] ) ?\n\t\t\t\t\toInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];\n\t\t\t}\n\t\t\t\n\t\t\t// Apply the defaults and init options to make a single init object will all\n\t\t\t// options defined from defaults and instance options.\n\t\t\toInit = _fnExtend( $.extend( true, {}, defaults ), oInit );\n\t\t\t\n\t\t\t\n\t\t\t// Map the initialisation options onto the settings object\n\t\t\t_fnMap( oSettings.oFeatures, oInit, [\n\t\t\t\t\"bPaginate\",\n\t\t\t\t\"bLengthChange\",\n\t\t\t\t\"bFilter\",\n\t\t\t\t\"bSort\",\n\t\t\t\t\"bSortMulti\",\n\t\t\t\t\"bInfo\",\n\t\t\t\t\"bProcessing\",\n\t\t\t\t\"bAutoWidth\",\n\t\t\t\t\"bSortClasses\",\n\t\t\t\t\"bServerSide\",\n\t\t\t\t\"bDeferRender\"\n\t\t\t] );\n\t\t\t_fnMap( oSettings, oInit, [\n\t\t\t\t\"asStripeClasses\",\n\t\t\t\t\"ajax\",\n\t\t\t\t\"fnServerData\",\n\t\t\t\t\"fnFormatNumber\",\n\t\t\t\t\"sServerMethod\",\n\t\t\t\t\"aaSorting\",\n\t\t\t\t\"aaSortingFixed\",\n\t\t\t\t\"aLengthMenu\",\n\t\t\t\t\"sPaginationType\",\n\t\t\t\t\"sAjaxSource\",\n\t\t\t\t\"sAjaxDataProp\",\n\t\t\t\t\"iStateDuration\",\n\t\t\t\t\"sDom\",\n\t\t\t\t\"bSortCellsTop\",\n\t\t\t\t\"iTabIndex\",\n\t\t\t\t\"fnStateLoadCallback\",\n\t\t\t\t\"fnStateSaveCallback\",\n\t\t\t\t\"renderer\",\n\t\t\t\t\"searchDelay\",\n\t\t\t\t[ \"iCookieDuration\", \"iStateDuration\" ], // backwards compat\n\t\t\t\t[ \"oSearch\", \"oPreviousSearch\" ],\n\t\t\t\t[ \"aoSearchCols\", \"aoPreSearchCols\" ],\n\t\t\t\t[ \"iDisplayLength\", \"_iDisplayLength\" ],\n\t\t\t\t[ \"bJQueryUI\", \"bJUI\" ]\n\t\t\t] );\n\t\t\t_fnMap( oSettings.oScroll, oInit, [\n\t\t\t\t[ \"sScrollX\", \"sX\" ],\n\t\t\t\t[ \"sScrollXInner\", \"sXInner\" ],\n\t\t\t\t[ \"sScrollY\", \"sY\" ],\n\t\t\t\t[ \"bScrollCollapse\", \"bCollapse\" ]\n\t\t\t] );\n\t\t\t_fnMap( oSettings.oLanguage, oInit, \"fnInfoCallback\" );\n\t\t\t\n\t\t\t/* Callback functions which are array driven */\n\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );\n\t\t\t\n\t\t\tvar oClasses = oSettings.oClasses;\n\t\t\t\n\t\t\t// @todo Remove in 1.11\n\t\t\tif ( oInit.bJQueryUI )\n\t\t\t{\n\t\t\t\t/* Use the JUI classes object for display. You could clone the oStdClasses object if\n\t\t\t\t * you want to have multiple tables with multiple independent classes\n\t\t\t\t */\n\t\t\t\t$.extend( oClasses, DataTable.ext.oJUIClasses, oInit.oClasses );\n\t\t\t\n\t\t\t\tif ( oInit.sDom === defaults.sDom && defaults.sDom === \"lfrtip\" )\n\t\t\t\t{\n\t\t\t\t\t/* Set the DOM to use a layout suitable for jQuery UI's theming */\n\t\t\t\t\toSettings.sDom = '<\"H\"lfr>t<\"F\"ip>';\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif ( ! oSettings.renderer ) {\n\t\t\t\t\toSettings.renderer = 'jqueryui';\n\t\t\t\t}\n\t\t\t\telse if ( $.isPlainObject( oSettings.renderer ) && ! oSettings.renderer.header ) {\n\t\t\t\t\toSettings.renderer.header = 'jqueryui';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$.extend( oClasses, DataTable.ext.classes, oInit.oClasses );\n\t\t\t}\n\t\t\t$this.addClass( oClasses.sTable );\n\t\t\t\n\t\t\t/* Calculate the scroll bar width and cache it for use later on */\n\t\t\tif ( oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\" )\n\t\t\t{\n\t\t\t\toSettings.oScroll.iBarWidth = _fnScrollBarWidth();\n\t\t\t}\n\t\t\tif ( oSettings.oScroll.sX === true ) { // Easy initialisation of x-scrolling\n\t\t\t\toSettings.oScroll.sX = '100%';\n\t\t\t}\n\t\t\t\n\t\t\tif ( oSettings.iInitDisplayStart === undefined )\n\t\t\t{\n\t\t\t\t/* Display start point, taking into account the save saving */\n\t\t\t\toSettings.iInitDisplayStart = oInit.iDisplayStart;\n\t\t\t\toSettings._iDisplayStart = oInit.iDisplayStart;\n\t\t\t}\n\t\t\t\n\t\t\tif ( oInit.iDeferLoading !== null )\n\t\t\t{\n\t\t\t\toSettings.bDeferLoading = true;\n\t\t\t\tvar tmp = $.isArray( oInit.iDeferLoading );\n\t\t\t\toSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;\n\t\t\t\toSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;\n\t\t\t}\n\t\t\t\n\t\t\t/* Language definitions */\n\t\t\tvar oLanguage = oSettings.oLanguage;\n\t\t\t$.extend( true, oLanguage, oInit.oLanguage );\n\t\t\t\n\t\t\tif ( oLanguage.sUrl !== \"\" )\n\t\t\t{\n\t\t\t\t/* Get the language definitions from a file - because this Ajax call makes the language\n\t\t\t\t * get async to the remainder of this function we use bInitHandedOff to indicate that\n\t\t\t\t * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor\n\t\t\t\t */\n\t\t\t\t$.ajax( {\n\t\t\t\t\tdataType: 'json',\n\t\t\t\t\turl: oLanguage.sUrl,\n\t\t\t\t\tsuccess: function ( json ) {\n\t\t\t\t\t\t_fnLanguageCompat( json );\n\t\t\t\t\t\t_fnCamelToHungarian( defaults.oLanguage, json );\n\t\t\t\t\t\t$.extend( true, oLanguage, json );\n\t\t\t\t\t\t_fnInitialise( oSettings );\n\t\t\t\t\t},\n\t\t\t\t\terror: function () {\n\t\t\t\t\t\t// Error occurred loading language file, continue on as best we can\n\t\t\t\t\t\t_fnInitialise( oSettings );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tbInitHandedOff = true;\n\t\t\t}\n\t\t\t\n\t\t\t/*\n\t\t\t * Stripes\n\t\t\t */\n\t\t\tif ( oInit.asStripeClasses === null )\n\t\t\t{\n\t\t\t\toSettings.asStripeClasses =[\n\t\t\t\t\toClasses.sStripeOdd,\n\t\t\t\t\toClasses.sStripeEven\n\t\t\t\t];\n\t\t\t}\n\t\t\t\n\t\t\t/* Remove row stripe classes if they are already on the table row */\n\t\t\tvar stripeClasses = oSettings.asStripeClasses;\n\t\t\tvar rowOne = $this.children('tbody').find('tr').eq(0);\n\t\t\tif ( $.inArray( true, $.map( stripeClasses, function(el, i) {\n\t\t\t\treturn rowOne.hasClass(el);\n\t\t\t} ) ) !== -1 ) {\n\t\t\t\t$('tbody tr', this).removeClass( stripeClasses.join(' ') );\n\t\t\t\toSettings.asDestroyStripes = stripeClasses.slice();\n\t\t\t}\n\t\t\t\n\t\t\t/*\n\t\t\t * Columns\n\t\t\t * See if we should load columns automatically or use defined ones\n\t\t\t */\n\t\t\tvar anThs = [];\n\t\t\tvar aoColumnsInit;\n\t\t\tvar nThead = this.getElementsByTagName('thead');\n\t\t\tif ( nThead.length !== 0 )\n\t\t\t{\n\t\t\t\t_fnDetectHeader( oSettings.aoHeader, nThead[0] );\n\t\t\t\tanThs = _fnGetUniqueThs( oSettings );\n\t\t\t}\n\t\t\t\n\t\t\t/* If not given a column array, generate one with nulls */\n\t\t\tif ( oInit.aoColumns === null )\n\t\t\t{\n\t\t\t\taoColumnsInit = [];\n\t\t\t\tfor ( i=0, iLen=anThs.length ; i<iLen ; i++ )\n\t\t\t\t{\n\t\t\t\t\taoColumnsInit.push( null );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\taoColumnsInit = oInit.aoColumns;\n\t\t\t}\n\t\t\t\n\t\t\t/* Add the columns */\n\t\t\tfor ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\t_fnAddColumn( oSettings, anThs ? anThs[i] : null );\n\t\t\t}\n\t\t\t\n\t\t\t/* Apply the column definitions */\n\t\t\t_fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {\n\t\t\t\t_fnColumnOptions( oSettings, iCol, oDef );\n\t\t\t} );\n\t\t\t\n\t\t\t/* HTML5 attribute detection - build an mData object automatically if the\n\t\t\t * attributes are found\n\t\t\t */\n\t\t\tif ( rowOne.length ) {\n\t\t\t\tvar a = function ( cell, name ) {\n\t\t\t\t\treturn cell.getAttribute( 'data-'+name ) !== null ? name : null;\n\t\t\t\t};\n\t\t\t\n\t\t\t\t$.each( _fnGetRowElements( oSettings, rowOne[0] ).cells, function (i, cell) {\n\t\t\t\t\tvar col = oSettings.aoColumns[i];\n\t\t\t\n\t\t\t\t\tif ( col.mData === i ) {\n\t\t\t\t\t\tvar sort = a( cell, 'sort' ) || a( cell, 'order' );\n\t\t\t\t\t\tvar filter = a( cell, 'filter' ) || a( cell, 'search' );\n\t\t\t\n\t\t\t\t\t\tif ( sort !== null || filter !== null ) {\n\t\t\t\t\t\t\tcol.mData = {\n\t\t\t\t\t\t\t\t_:      i+'.display',\n\t\t\t\t\t\t\t\tsort:   sort !== null   ? i+'.@data-'+sort   : undefined,\n\t\t\t\t\t\t\t\ttype:   sort !== null   ? i+'.@data-'+sort   : undefined,\n\t\t\t\t\t\t\t\tfilter: filter !== null ? i+'.@data-'+filter : undefined\n\t\t\t\t\t\t\t};\n\t\t\t\n\t\t\t\t\t\t\t_fnColumnOptions( oSettings, i );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t\t\n\t\t\tvar features = oSettings.oFeatures;\n\t\t\t\n\t\t\t/* Must be done after everything which can be overridden by the state saving! */\n\t\t\tif ( oInit.bStateSave )\n\t\t\t{\n\t\t\t\tfeatures.bStateSave = true;\n\t\t\t\t_fnLoadState( oSettings, oInit );\n\t\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Sorting\n\t\t\t * @todo For modularisation (1.11) this needs to do into a sort start up handler\n\t\t\t */\n\t\t\t\n\t\t\t// If aaSorting is not defined, then we use the first indicator in asSorting\n\t\t\t// in case that has been altered, so the default sort reflects that option\n\t\t\tif ( oInit.aaSorting === undefined )\n\t\t\t{\n\t\t\t\tvar sorting = oSettings.aaSorting;\n\t\t\t\tfor ( i=0, iLen=sorting.length ; i<iLen ; i++ )\n\t\t\t\t{\n\t\t\t\t\tsorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/* Do a first pass on the sorting classes (allows any size changes to be taken into\n\t\t\t * account, and also will apply sorting disabled classes if disabled\n\t\t\t */\n\t\t\t_fnSortingClasses( oSettings );\n\t\t\t\n\t\t\tif ( features.bSort )\n\t\t\t{\n\t\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', function () {\n\t\t\t\t\tif ( oSettings.bSorted ) {\n\t\t\t\t\t\tvar aSort = _fnSortFlatten( oSettings );\n\t\t\t\t\t\tvar sortedColumns = {};\n\t\t\t\n\t\t\t\t\t\t$.each( aSort, function (i, val) {\n\t\t\t\t\t\t\tsortedColumns[ val.src ] = val.dir;\n\t\t\t\t\t\t} );\n\t\t\t\n\t\t\t\t\t\t_fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );\n\t\t\t\t\t\t_fnSortAria( oSettings );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t\t\n\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', function () {\n\t\t\t\tif ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {\n\t\t\t\t\t_fnSortingClasses( oSettings );\n\t\t\t\t}\n\t\t\t}, 'sc' );\n\t\t\t\n\t\t\t\n\t\t\t/*\n\t\t\t * Final init\n\t\t\t * Cache the header, body and footer as required, creating them if needed\n\t\t\t */\n\t\t\t\n\t\t\t/* Browser support detection */\n\t\t\t_fnBrowserDetect( oSettings );\n\t\t\t\n\t\t\t// Work around for Webkit bug 83867 - store the caption-side before removing from doc\n\t\t\tvar captions = $this.children('caption').each( function () {\n\t\t\t\tthis._captionSide = $this.css('caption-side');\n\t\t\t} );\n\t\t\t\n\t\t\tvar thead = $this.children('thead');\n\t\t\tif ( thead.length === 0 )\n\t\t\t{\n\t\t\t\tthead = $('<thead/>').appendTo(this);\n\t\t\t}\n\t\t\toSettings.nTHead = thead[0];\n\t\t\t\n\t\t\tvar tbody = $this.children('tbody');\n\t\t\tif ( tbody.length === 0 )\n\t\t\t{\n\t\t\t\ttbody = $('<tbody/>').appendTo(this);\n\t\t\t}\n\t\t\toSettings.nTBody = tbody[0];\n\t\t\t\n\t\t\tvar tfoot = $this.children('tfoot');\n\t\t\tif ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\") )\n\t\t\t{\n\t\t\t\t// If we are a scrolling table, and no footer has been given, then we need to create\n\t\t\t\t// a tfoot element for the caption element to be appended to\n\t\t\t\ttfoot = $('<tfoot/>').appendTo(this);\n\t\t\t}\n\t\t\t\n\t\t\tif ( tfoot.length === 0 || tfoot.children().length === 0 ) {\n\t\t\t\t$this.addClass( oClasses.sNoFooter );\n\t\t\t}\n\t\t\telse if ( tfoot.length > 0 ) {\n\t\t\t\toSettings.nTFoot = tfoot[0];\n\t\t\t\t_fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );\n\t\t\t}\n\t\t\t\n\t\t\t/* Check if there is data passing into the constructor */\n\t\t\tif ( oInit.aaData )\n\t\t\t{\n\t\t\t\tfor ( i=0 ; i<oInit.aaData.length ; i++ )\n\t\t\t\t{\n\t\t\t\t\t_fnAddData( oSettings, oInit.aaData[ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' )\n\t\t\t{\n\t\t\t\t/* Grab the data from the page - only do this when deferred loading or no Ajax\n\t\t\t\t * source since there is no point in reading the DOM data if we are then going\n\t\t\t\t * to replace it with Ajax data\n\t\t\t\t */\n\t\t\t\t_fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );\n\t\t\t}\n\t\t\t\n\t\t\t/* Copy the data index array */\n\t\t\toSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\n\t\t\t\n\t\t\t/* Initialisation complete - table can be drawn */\n\t\t\toSettings.bInitialised = true;\n\t\t\t\n\t\t\t/* Check if we need to initialise the table (it might not have been handed off to the\n\t\t\t * language processor)\n\t\t\t */\n\t\t\tif ( bInitHandedOff === false )\n\t\t\t{\n\t\t\t\t_fnInitialise( oSettings );\n\t\t\t}\n\t\t} );\n\t\t_that = null;\n\t\treturn this;\n\t};\n\n\t\n\t\n\t/**\n\t * Computed structure of the DataTables API, defined by the options passed to\n\t * `DataTable.Api.register()` when building the API.\n\t *\n\t * The structure is built in order to speed creation and extension of the Api\n\t * objects since the extensions are effectively pre-parsed.\n\t *\n\t * The array is an array of objects with the following structure, where this\n\t * base array represents the Api prototype base:\n\t *\n\t *     [\n\t *       {\n\t *         name:      'data'                -- string   - Property name\n\t *         val:       function () {},       -- function - Api method (or undefined if just an object\n\t *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n\t *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n\t *       },\n\t *       {\n\t *         name:     'row'\n\t *         val:       {},\n\t *         methodExt: [ ... ],\n\t *         propExt:   [\n\t *           {\n\t *             name:      'data'\n\t *             val:       function () {},\n\t *             methodExt: [ ... ],\n\t *             propExt:   [ ... ]\n\t *           },\n\t *           ...\n\t *         ]\n\t *       }\n\t *     ]\n\t *\n\t * @type {Array}\n\t * @ignore\n\t */\n\tvar __apiStruct = [];\n\t\n\t\n\t/**\n\t * `Array.prototype` reference.\n\t *\n\t * @type object\n\t * @ignore\n\t */\n\tvar __arrayProto = Array.prototype;\n\t\n\t\n\t/**\n\t * Abstraction for `context` parameter of the `Api` constructor to allow it to\n\t * take several different forms for ease of use.\n\t *\n\t * Each of the input parameter types will be converted to a DataTables settings\n\t * object where possible.\n\t *\n\t * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one\n\t *   of:\n\t *\n\t *   * `string` - jQuery selector. Any DataTables' matching the given selector\n\t *     with be found and used.\n\t *   * `node` - `TABLE` node which has already been formed into a DataTable.\n\t *   * `jQuery` - A jQuery object of `TABLE` nodes.\n\t *   * `object` - DataTables settings object\n\t *   * `DataTables.Api` - API instance\n\t * @return {array|null} Matching DataTables settings objects. `null` or\n\t *   `undefined` is returned if no matching DataTable is found.\n\t * @ignore\n\t */\n\tvar _toSettings = function ( mixed )\n\t{\n\t\tvar idx, jq;\n\t\tvar settings = DataTable.settings;\n\t\tvar tables = $.map( settings, function (el, i) {\n\t\t\treturn el.nTable;\n\t\t} );\n\t\n\t\tif ( ! mixed ) {\n\t\t\treturn [];\n\t\t}\n\t\telse if ( mixed.nTable && mixed.oApi ) {\n\t\t\t// DataTables settings object\n\t\t\treturn [ mixed ];\n\t\t}\n\t\telse if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {\n\t\t\t// Table node\n\t\t\tidx = $.inArray( mixed, tables );\n\t\t\treturn idx !== -1 ? [ settings[idx] ] : null;\n\t\t}\n\t\telse if ( mixed && typeof mixed.settings === 'function' ) {\n\t\t\treturn mixed.settings().toArray();\n\t\t}\n\t\telse if ( typeof mixed === 'string' ) {\n\t\t\t// jQuery selector\n\t\t\tjq = $(mixed);\n\t\t}\n\t\telse if ( mixed instanceof $ ) {\n\t\t\t// jQuery object (also DataTables instance)\n\t\t\tjq = mixed;\n\t\t}\n\t\n\t\tif ( jq ) {\n\t\t\treturn jq.map( function(i) {\n\t\t\t\tidx = $.inArray( this, tables );\n\t\t\t\treturn idx !== -1 ? settings[idx] : null;\n\t\t\t} ).toArray();\n\t\t}\n\t};\n\t\n\t\n\t/**\n\t * DataTables API class - used to control and interface with  one or more\n\t * DataTables enhanced tables.\n\t *\n\t * The API class is heavily based on jQuery, presenting a chainable interface\n\t * that you can use to interact with tables. Each instance of the API class has\n\t * a \"context\" - i.e. the tables that it will operate on. This could be a single\n\t * table, all tables on a page or a sub-set thereof.\n\t *\n\t * Additionally the API is designed to allow you to easily work with the data in\n\t * the tables, retrieving and manipulating it as required. This is done by\n\t * presenting the API class as an array like interface. The contents of the\n\t * array depend upon the actions requested by each method (for example\n\t * `rows().nodes()` will return an array of nodes, while `rows().data()` will\n\t * return an array of objects or arrays depending upon your table's\n\t * configuration). The API object has a number of array like methods (`push`,\n\t * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,\n\t * `unique` etc) to assist your working with the data held in a table.\n\t *\n\t * Most methods (those which return an Api instance) are chainable, which means\n\t * the return from a method call also has all of the methods available that the\n\t * top level object had. For example, these two calls are equivalent:\n\t *\n\t *     // Not chained\n\t *     api.row.add( {...} );\n\t *     api.draw();\n\t *\n\t *     // Chained\n\t *     api.row.add( {...} ).draw();\n\t *\n\t * @class DataTable.Api\n\t * @param {array|object|string|jQuery} context DataTable identifier. This is\n\t *   used to define which DataTables enhanced tables this API will operate on.\n\t *   Can be one of:\n\t *\n\t *   * `string` - jQuery selector. Any DataTables' matching the given selector\n\t *     with be found and used.\n\t *   * `node` - `TABLE` node which has already been formed into a DataTable.\n\t *   * `jQuery` - A jQuery object of `TABLE` nodes.\n\t *   * `object` - DataTables settings object\n\t * @param {array} [data] Data to initialise the Api instance with.\n\t *\n\t * @example\n\t *   // Direct initialisation during DataTables construction\n\t *   var api = $('#example').DataTable();\n\t *\n\t * @example\n\t *   // Initialisation using a DataTables jQuery object\n\t *   var api = $('#example').dataTable().api();\n\t *\n\t * @example\n\t *   // Initialisation as a constructor\n\t *   var api = new $.fn.DataTable.Api( 'table.dataTable' );\n\t */\n\t_Api = function ( context, data )\n\t{\n\t\tif ( ! (this instanceof _Api) ) {\n\t\t\treturn new _Api( context, data );\n\t\t}\n\t\n\t\tvar settings = [];\n\t\tvar ctxSettings = function ( o ) {\n\t\t\tvar a = _toSettings( o );\n\t\t\tif ( a ) {\n\t\t\t\tsettings.push.apply( settings, a );\n\t\t\t}\n\t\t};\n\t\n\t\tif ( $.isArray( context ) ) {\n\t\t\tfor ( var i=0, ien=context.length ; i<ien ; i++ ) {\n\t\t\t\tctxSettings( context[i] );\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tctxSettings( context );\n\t\t}\n\t\n\t\t// Remove duplicates\n\t\tthis.context = _unique( settings );\n\t\n\t\t// Initial data\n\t\tif ( data ) {\n\t\t\tthis.push.apply( this, data.toArray ? data.toArray() : data );\n\t\t}\n\t\n\t\t// selector\n\t\tthis.selector = {\n\t\t\trows: null,\n\t\t\tcols: null,\n\t\t\topts: null\n\t\t};\n\t\n\t\t_Api.extend( this, this, __apiStruct );\n\t};\n\t\n\tDataTable.Api = _Api;\n\t\n\t_Api.prototype = /** @lends DataTables.Api */{\n\t\tany: function ()\n\t\t{\n\t\t\treturn this.flatten().length !== 0;\n\t\t},\n\t\n\t\n\t\tconcat:  __arrayProto.concat,\n\t\n\t\n\t\tcontext: [], // array of table settings objects\n\t\n\t\n\t\teach: function ( fn )\n\t\t{\n\t\t\tfor ( var i=0, ien=this.length ; i<ien; i++ ) {\n\t\t\t\tfn.call( this, this[i], i, this );\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\t},\n\t\n\t\n\t\teq: function ( idx )\n\t\t{\n\t\t\tvar ctx = this.context;\n\t\n\t\t\treturn ctx.length > idx ?\n\t\t\t\tnew _Api( ctx[idx], this[idx] ) :\n\t\t\t\tnull;\n\t\t},\n\t\n\t\n\t\tfilter: function ( fn )\n\t\t{\n\t\t\tvar a = [];\n\t\n\t\t\tif ( __arrayProto.filter ) {\n\t\t\t\ta = __arrayProto.filter.call( this, fn, this );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Compatibility for browsers without EMCA-252-5 (JS 1.6)\n\t\t\t\tfor ( var i=0, ien=this.length ; i<ien ; i++ ) {\n\t\t\t\t\tif ( fn.call( this, this[i], i, this ) ) {\n\t\t\t\t\t\ta.push( this[i] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn new _Api( this.context, a );\n\t\t},\n\t\n\t\n\t\tflatten: function ()\n\t\t{\n\t\t\tvar a = [];\n\t\t\treturn new _Api( this.context, a.concat.apply( a, this.toArray() ) );\n\t\t},\n\t\n\t\n\t\tjoin:    __arrayProto.join,\n\t\n\t\n\t\tindexOf: __arrayProto.indexOf || function (obj, start)\n\t\t{\n\t\t\tfor ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {\n\t\t\t\tif ( this[i] === obj ) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t},\n\t\n\t\titerator: function ( flatten, type, fn, alwaysNew ) {\n\t\t\tvar\n\t\t\t\ta = [], ret,\n\t\t\t\ti, ien, j, jen,\n\t\t\t\tcontext = this.context,\n\t\t\t\trows, items, item,\n\t\t\t\tselector = this.selector;\n\t\n\t\t\t// Argument shifting\n\t\t\tif ( typeof flatten === 'string' ) {\n\t\t\t\talwaysNew = fn;\n\t\t\t\tfn = type;\n\t\t\t\ttype = flatten;\n\t\t\t\tflatten = false;\n\t\t\t}\n\t\n\t\t\tfor ( i=0, ien=context.length ; i<ien ; i++ ) {\n\t\t\t\tvar apiInst = new _Api( context[i] );\n\t\n\t\t\t\tif ( type === 'table' ) {\n\t\t\t\t\tret = fn.call( apiInst, context[i], i );\n\t\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\ta.push( ret );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ( type === 'columns' || type === 'rows' ) {\n\t\t\t\t\t// this has same length as context - one entry for each table\n\t\t\t\t\tret = fn.call( apiInst, context[i], this[i], i );\n\t\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\ta.push( ret );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {\n\t\t\t\t\t// columns and rows share the same structure.\n\t\t\t\t\t// 'this' is an array of column indexes for each context\n\t\t\t\t\titems = this[i];\n\t\n\t\t\t\t\tif ( type === 'column-rows' ) {\n\t\t\t\t\t\trows = _selector_row_indexes( context[i], selector.opts );\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfor ( j=0, jen=items.length ; j<jen ; j++ ) {\n\t\t\t\t\t\titem = items[j];\n\t\n\t\t\t\t\t\tif ( type === 'cell' ) {\n\t\t\t\t\t\t\tret = fn.call( apiInst, context[i], item.row, item.column, i, j );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tret = fn.call( apiInst, context[i], item, i, j, rows );\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\t\ta.push( ret );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif ( a.length || alwaysNew ) {\n\t\t\t\tvar api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );\n\t\t\t\tvar apiSelector = api.selector;\n\t\t\t\tapiSelector.rows = selector.rows;\n\t\t\t\tapiSelector.cols = selector.cols;\n\t\t\t\tapiSelector.opts = selector.opts;\n\t\t\t\treturn api;\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\n\t\n\t\tlastIndexOf: __arrayProto.lastIndexOf || function (obj, start)\n\t\t{\n\t\t\t// Bit cheeky...\n\t\t\treturn this.indexOf.apply( this.toArray.reverse(), arguments );\n\t\t},\n\t\n\t\n\t\tlength:  0,\n\t\n\t\n\t\tmap: function ( fn )\n\t\t{\n\t\t\tvar a = [];\n\t\n\t\t\tif ( __arrayProto.map ) {\n\t\t\t\ta = __arrayProto.map.call( this, fn, this );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Compatibility for browsers without EMCA-252-5 (JS 1.6)\n\t\t\t\tfor ( var i=0, ien=this.length ; i<ien ; i++ ) {\n\t\t\t\t\ta.push( fn.call( this, this[i], i ) );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn new _Api( this.context, a );\n\t\t},\n\t\n\t\n\t\tpluck: function ( prop )\n\t\t{\n\t\t\treturn this.map( function ( el ) {\n\t\t\t\treturn el[ prop ];\n\t\t\t} );\n\t\t},\n\t\n\t\tpop:     __arrayProto.pop,\n\t\n\t\n\t\tpush:    __arrayProto.push,\n\t\n\t\n\t\t// Does not return an API instance\n\t\treduce: __arrayProto.reduce || function ( fn, init )\n\t\t{\n\t\t\treturn _fnReduce( this, fn, init, 0, this.length, 1 );\n\t\t},\n\t\n\t\n\t\treduceRight: __arrayProto.reduceRight || function ( fn, init )\n\t\t{\n\t\t\treturn _fnReduce( this, fn, init, this.length-1, -1, -1 );\n\t\t},\n\t\n\t\n\t\treverse: __arrayProto.reverse,\n\t\n\t\n\t\t// Object with rows, columns and opts\n\t\tselector: null,\n\t\n\t\n\t\tshift:   __arrayProto.shift,\n\t\n\t\n\t\tsort:    __arrayProto.sort, // ? name - order?\n\t\n\t\n\t\tsplice:  __arrayProto.splice,\n\t\n\t\n\t\ttoArray: function ()\n\t\t{\n\t\t\treturn __arrayProto.slice.call( this );\n\t\t},\n\t\n\t\n\t\tto$: function ()\n\t\t{\n\t\t\treturn $( this );\n\t\t},\n\t\n\t\n\t\ttoJQuery: function ()\n\t\t{\n\t\t\treturn $( this );\n\t\t},\n\t\n\t\n\t\tunique: function ()\n\t\t{\n\t\t\treturn new _Api( this.context, _unique(this) );\n\t\t},\n\t\n\t\n\t\tunshift: __arrayProto.unshift\n\t};\n\t\n\t\n\t_Api.extend = function ( scope, obj, ext )\n\t{\n\t\t// Only extend API instances and static properties of the API\n\t\tif ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\tvar\n\t\t\ti, ien,\n\t\t\tj, jen,\n\t\t\tstruct, inner,\n\t\t\tmethodScoping = function ( scope, fn, struc ) {\n\t\t\t\treturn function () {\n\t\t\t\t\tvar ret = fn.apply( scope, arguments );\n\t\n\t\t\t\t\t// Method extension\n\t\t\t\t\t_Api.extend( ret, ret, struc.methodExt );\n\t\t\t\t\treturn ret;\n\t\t\t\t};\n\t\t\t};\n\t\n\t\tfor ( i=0, ien=ext.length ; i<ien ; i++ ) {\n\t\t\tstruct = ext[i];\n\t\n\t\t\t// Value\n\t\t\tobj[ struct.name ] = typeof struct.val === 'function' ?\n\t\t\t\tmethodScoping( scope, struct.val, struct ) :\n\t\t\t\t$.isPlainObject( struct.val ) ?\n\t\t\t\t\t{} :\n\t\t\t\t\tstruct.val;\n\t\n\t\t\tobj[ struct.name ].__dt_wrapper = true;\n\t\n\t\t\t// Property extension\n\t\t\t_Api.extend( scope, obj[ struct.name ], struct.propExt );\n\t\t}\n\t};\n\t\n\t\n\t// @todo - Is there need for an augment function?\n\t// _Api.augment = function ( inst, name )\n\t// {\n\t// \t// Find src object in the structure from the name\n\t// \tvar parts = name.split('.');\n\t\n\t// \t_Api.extend( inst, obj );\n\t// };\n\t\n\t\n\t//     [\n\t//       {\n\t//         name:      'data'                -- string   - Property name\n\t//         val:       function () {},       -- function - Api method (or undefined if just an object\n\t//         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n\t//         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n\t//       },\n\t//       {\n\t//         name:     'row'\n\t//         val:       {},\n\t//         methodExt: [ ... ],\n\t//         propExt:   [\n\t//           {\n\t//             name:      'data'\n\t//             val:       function () {},\n\t//             methodExt: [ ... ],\n\t//             propExt:   [ ... ]\n\t//           },\n\t//           ...\n\t//         ]\n\t//       }\n\t//     ]\n\t\n\t_Api.register = _api_register = function ( name, val )\n\t{\n\t\tif ( $.isArray( name ) ) {\n\t\t\tfor ( var j=0, jen=name.length ; j<jen ; j++ ) {\n\t\t\t\t_Api.register( name[j], val );\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\tvar\n\t\t\ti, ien,\n\t\t\their = name.split('.'),\n\t\t\tstruct = __apiStruct,\n\t\t\tkey, method;\n\t\n\t\tvar find = function ( src, name ) {\n\t\t\tfor ( var i=0, ien=src.length ; i<ien ; i++ ) {\n\t\t\t\tif ( src[i].name === name ) {\n\t\t\t\t\treturn src[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\t\n\t\tfor ( i=0, ien=heir.length ; i<ien ; i++ ) {\n\t\t\tmethod = heir[i].indexOf('()') !== -1;\n\t\t\tkey = method ?\n\t\t\t\their[i].replace('()', '') :\n\t\t\t\their[i];\n\t\n\t\t\tvar src = find( struct, key );\n\t\t\tif ( ! src ) {\n\t\t\t\tsrc = {\n\t\t\t\t\tname:      key,\n\t\t\t\t\tval:       {},\n\t\t\t\t\tmethodExt: [],\n\t\t\t\t\tpropExt:   []\n\t\t\t\t};\n\t\t\t\tstruct.push( src );\n\t\t\t}\n\t\n\t\t\tif ( i === ien-1 ) {\n\t\t\t\tsrc.val = val;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstruct = method ?\n\t\t\t\t\tsrc.methodExt :\n\t\t\t\t\tsrc.propExt;\n\t\t\t}\n\t\t}\n\t};\n\t\n\t\n\t_Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {\n\t\t_Api.register( pluralName, val );\n\t\n\t\t_Api.register( singularName, function () {\n\t\t\tvar ret = val.apply( this, arguments );\n\t\n\t\t\tif ( ret === this ) {\n\t\t\t\t// Returned item is the API instance that was passed in, return it\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\telse if ( ret instanceof _Api ) {\n\t\t\t\t// New API instance returned, want the value from the first item\n\t\t\t\t// in the returned array for the singular result.\n\t\t\t\treturn ret.length ?\n\t\t\t\t\t$.isArray( ret[0] ) ?\n\t\t\t\t\t\tnew _Api( ret.context, ret[0] ) : // Array results are 'enhanced'\n\t\t\t\t\t\tret[0] :\n\t\t\t\t\tundefined;\n\t\t\t}\n\t\n\t\t\t// Non-API return - just fire it back\n\t\t\treturn ret;\n\t\t} );\n\t};\n\t\n\t\n\t/**\n\t * Selector for HTML tables. Apply the given selector to the give array of\n\t * DataTables settings objects.\n\t *\n\t * @param {string|integer} [selector] jQuery selector string or integer\n\t * @param  {array} Array of DataTables settings objects to be filtered\n\t * @return {array}\n\t * @ignore\n\t */\n\tvar __table_selector = function ( selector, a )\n\t{\n\t\t// Integer is used to pick out a table by index\n\t\tif ( typeof selector === 'number' ) {\n\t\t\treturn [ a[ selector ] ];\n\t\t}\n\t\n\t\t// Perform a jQuery selector on the table nodes\n\t\tvar nodes = $.map( a, function (el, i) {\n\t\t\treturn el.nTable;\n\t\t} );\n\t\n\t\treturn $(nodes)\n\t\t\t.filter( selector )\n\t\t\t.map( function (i) {\n\t\t\t\t// Need to translate back from the table node to the settings\n\t\t\t\tvar idx = $.inArray( this, nodes );\n\t\t\t\treturn a[ idx ];\n\t\t\t} )\n\t\t\t.toArray();\n\t};\n\t\n\t\n\t\n\t/**\n\t * Context selector for the API's context (i.e. the tables the API instance\n\t * refers to.\n\t *\n\t * @name    DataTable.Api#tables\n\t * @param {string|integer} [selector] Selector to pick which tables the iterator\n\t *   should operate on. If not given, all tables in the current context are\n\t *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to\n\t *   select multiple tables or as an integer to select a single table.\n\t * @returns {DataTable.Api} Returns a new API instance if a selector is given.\n\t */\n\t_api_register( 'tables()', function ( selector ) {\n\t\t// A new instance is created if there was a selector specified\n\t\treturn selector ?\n\t\t\tnew _Api( __table_selector( selector, this.context ) ) :\n\t\t\tthis;\n\t} );\n\t\n\t\n\t_api_register( 'table()', function ( selector ) {\n\t\tvar tables = this.tables( selector );\n\t\tvar ctx = tables.context;\n\t\n\t\t// Truncate to the first matched table\n\t\treturn ctx.length ?\n\t\t\tnew _Api( ctx[0] ) :\n\t\t\ttables;\n\t} );\n\t\n\t\n\t_api_registerPlural( 'tables().nodes()', 'table().node()' , function () {\n\t\treturn this.iterator( 'table', function ( ctx ) {\n\t\t\treturn ctx.nTable;\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_registerPlural( 'tables().body()', 'table().body()' , function () {\n\t\treturn this.iterator( 'table', function ( ctx ) {\n\t\t\treturn ctx.nTBody;\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_registerPlural( 'tables().header()', 'table().header()' , function () {\n\t\treturn this.iterator( 'table', function ( ctx ) {\n\t\t\treturn ctx.nTHead;\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_registerPlural( 'tables().footer()', 'table().footer()' , function () {\n\t\treturn this.iterator( 'table', function ( ctx ) {\n\t\t\treturn ctx.nTFoot;\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_registerPlural( 'tables().containers()', 'table().container()' , function () {\n\t\treturn this.iterator( 'table', function ( ctx ) {\n\t\t\treturn ctx.nTableWrapper;\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t\n\t/**\n\t * Redraw the tables in the current context.\n\t *\n\t * @param {boolean} [reset=true] Reset (default) or hold the current paging\n\t *   position. A full re-sort and re-filter is performed when this method is\n\t *   called, which is why the pagination reset is the default action.\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'draw()', function ( resetPaging ) {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t_fnReDraw( settings, resetPaging===false );\n\t\t} );\n\t} );\n\t\n\t\n\t\n\t/**\n\t * Get the current page index.\n\t *\n\t * @return {integer} Current page index (zero based)\n\t *//**\n\t * Set the current page.\n\t *\n\t * Note that if you attempt to show a page which does not exist, DataTables will\n\t * not throw an error, but rather reset the paging.\n\t *\n\t * @param {integer|string} action The paging action to take. This can be one of:\n\t *  * `integer` - The page index to jump to\n\t *  * `string` - An action to take:\n\t *    * `first` - Jump to first page.\n\t *    * `next` - Jump to the next page\n\t *    * `previous` - Jump to previous page\n\t *    * `last` - Jump to the last page.\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'page()', function ( action ) {\n\t\tif ( action === undefined ) {\n\t\t\treturn this.page.info().page; // not an expensive call\n\t\t}\n\t\n\t\t// else, have an action to take on all tables\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t_fnPageChange( settings, action );\n\t\t} );\n\t} );\n\t\n\t\n\t/**\n\t * Paging information for the first table in the current context.\n\t *\n\t * If you require paging information for another table, use the `table()` method\n\t * with a suitable selector.\n\t *\n\t * @return {object} Object with the following properties set:\n\t *  * `page` - Current page index (zero based - i.e. the first page is `0`)\n\t *  * `pages` - Total number of pages\n\t *  * `start` - Display index for the first record shown on the current page\n\t *  * `end` - Display index for the last record shown on the current page\n\t *  * `length` - Display length (number of records). Note that generally `start\n\t *    + length = end`, but this is not always true, for example if there are\n\t *    only 2 records to show on the final page, with a length of 10.\n\t *  * `recordsTotal` - Full data set length\n\t *  * `recordsDisplay` - Data set length once the current filtering criterion\n\t *    are applied.\n\t */\n\t_api_register( 'page.info()', function ( action ) {\n\t\tif ( this.context.length === 0 ) {\n\t\t\treturn undefined;\n\t\t}\n\t\n\t\tvar\n\t\t\tsettings   = this.context[0],\n\t\t\tstart      = settings._iDisplayStart,\n\t\t\tlen        = settings._iDisplayLength,\n\t\t\tvisRecords = settings.fnRecordsDisplay(),\n\t\t\tall        = len === -1;\n\t\n\t\treturn {\n\t\t\t\"page\":           all ? 0 : Math.floor( start / len ),\n\t\t\t\"pages\":          all ? 1 : Math.ceil( visRecords / len ),\n\t\t\t\"start\":          start,\n\t\t\t\"end\":            settings.fnDisplayEnd(),\n\t\t\t\"length\":         len,\n\t\t\t\"recordsTotal\":   settings.fnRecordsTotal(),\n\t\t\t\"recordsDisplay\": visRecords\n\t\t};\n\t} );\n\t\n\t\n\t/**\n\t * Get the current page length.\n\t *\n\t * @return {integer} Current page length. Note `-1` indicates that all records\n\t *   are to be shown.\n\t *//**\n\t * Set the current page length.\n\t *\n\t * @param {integer} Page length to set. Use `-1` to show all records.\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'page.len()', function ( len ) {\n\t\t// Note that we can't call this function 'length()' because `length`\n\t\t// is a Javascript property of functions which defines how many arguments\n\t\t// the function expects.\n\t\tif ( len === undefined ) {\n\t\t\treturn this.context.length !== 0 ?\n\t\t\t\tthis.context[0]._iDisplayLength :\n\t\t\t\tundefined;\n\t\t}\n\t\n\t\t// else, set the page length\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t_fnLengthChange( settings, len );\n\t\t} );\n\t} );\n\t\n\t\n\t\n\tvar __reload = function ( settings, holdPosition, callback ) {\n\t\t// Use the draw event to trigger a callback\n\t\tif ( callback ) {\n\t\t\tvar api = new _Api( settings );\n\t\n\t\t\tapi.one( 'draw', function () {\n\t\t\t\tcallback( api.ajax.json() );\n\t\t\t} );\n\t\t}\n\t\n\t\tif ( _fnDataSource( settings ) == 'ssp' ) {\n\t\t\t_fnReDraw( settings, holdPosition );\n\t\t}\n\t\telse {\n\t\t\t// Trigger xhr\n\t\t\t_fnProcessingDisplay( settings, true );\n\t\n\t\t\t_fnBuildAjax( settings, [], function( json ) {\n\t\t\t\t_fnClearTable( settings );\n\t\n\t\t\t\tvar data = _fnAjaxDataSrc( settings, json );\n\t\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t\t\t_fnAddData( settings, data[i] );\n\t\t\t\t}\n\t\n\t\t\t\t_fnReDraw( settings, holdPosition );\n\t\t\t\t_fnProcessingDisplay( settings, false );\n\t\t\t} );\n\t\t}\n\t};\n\t\n\t\n\t/**\n\t * Get the JSON response from the last Ajax request that DataTables made to the\n\t * server. Note that this returns the JSON from the first table in the current\n\t * context.\n\t *\n\t * @return {object} JSON received from the server.\n\t */\n\t_api_register( 'ajax.json()', function () {\n\t\tvar ctx = this.context;\n\t\n\t\tif ( ctx.length > 0 ) {\n\t\t\treturn ctx[0].json;\n\t\t}\n\t\n\t\t// else return undefined;\n\t} );\n\t\n\t\n\t/**\n\t * Get the data submitted in the last Ajax request\n\t */\n\t_api_register( 'ajax.params()', function () {\n\t\tvar ctx = this.context;\n\t\n\t\tif ( ctx.length > 0 ) {\n\t\t\treturn ctx[0].oAjaxData;\n\t\t}\n\t\n\t\t// else return undefined;\n\t} );\n\t\n\t\n\t/**\n\t * Reload tables from the Ajax data source. Note that this function will\n\t * automatically re-draw the table when the remote data has been loaded.\n\t *\n\t * @param {boolean} [reset=true] Reset (default) or hold the current paging\n\t *   position. A full re-sort and re-filter is performed when this method is\n\t *   called, which is why the pagination reset is the default action.\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'ajax.reload()', function ( callback, resetPaging ) {\n\t\treturn this.iterator( 'table', function (settings) {\n\t\t\t__reload( settings, resetPaging===false, callback );\n\t\t} );\n\t} );\n\t\n\t\n\t/**\n\t * Get the current Ajax URL. Note that this returns the URL from the first\n\t * table in the current context.\n\t *\n\t * @return {string} Current Ajax source URL\n\t *//**\n\t * Set the Ajax URL. Note that this will set the URL for all tables in the\n\t * current context.\n\t *\n\t * @param {string} url URL to set.\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'ajax.url()', function ( url ) {\n\t\tvar ctx = this.context;\n\t\n\t\tif ( url === undefined ) {\n\t\t\t// get\n\t\t\tif ( ctx.length === 0 ) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tctx = ctx[0];\n\t\n\t\t\treturn ctx.ajax ?\n\t\t\t\t$.isPlainObject( ctx.ajax ) ?\n\t\t\t\t\tctx.ajax.url :\n\t\t\t\t\tctx.ajax :\n\t\t\t\tctx.sAjaxSource;\n\t\t}\n\t\n\t\t// set\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\tif ( $.isPlainObject( settings.ajax ) ) {\n\t\t\t\tsettings.ajax.url = url;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsettings.ajax = url;\n\t\t\t}\n\t\t\t// No need to consider sAjaxSource here since DataTables gives priority\n\t\t\t// to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any\n\t\t\t// value of `sAjaxSource` redundant.\n\t\t} );\n\t} );\n\t\n\t\n\t/**\n\t * Load data from the newly set Ajax URL. Note that this method is only\n\t * available when `ajax.url()` is used to set a URL. Additionally, this method\n\t * has the same effect as calling `ajax.reload()` but is provided for\n\t * convenience when setting a new URL. Like `ajax.reload()` it will\n\t * automatically redraw the table once the remote data has been loaded.\n\t *\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'ajax.url().load()', function ( callback, resetPaging ) {\n\t\t// Same as a reload, but makes sense to present it for easy access after a\n\t\t// url change\n\t\treturn this.iterator( 'table', function ( ctx ) {\n\t\t\t__reload( ctx, resetPaging===false, callback );\n\t\t} );\n\t} );\n\t\n\t\n\t\n\t\n\tvar _selector_run = function ( type, selector, selectFn, settings, opts )\n\t{\n\t\tvar\n\t\t\tout = [], res,\n\t\t\ta, i, ien, j, jen,\n\t\t\tselectorType = typeof selector;\n\t\n\t\t// Can't just check for isArray here, as an API or jQuery instance might be\n\t\t// given with their array like look\n\t\tif ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined ) {\n\t\t\tselector = [ selector ];\n\t\t}\n\t\n\t\tfor ( i=0, ien=selector.length ; i<ien ; i++ ) {\n\t\t\ta = selector[i] && selector[i].split ?\n\t\t\t\tselector[i].split(',') :\n\t\t\t\t[ selector[i] ];\n\t\n\t\t\tfor ( j=0, jen=a.length ; j<jen ; j++ ) {\n\t\t\t\tres = selectFn( typeof a[j] === 'string' ? $.trim(a[j]) : a[j] );\n\t\n\t\t\t\tif ( res && res.length ) {\n\t\t\t\t\tout.push.apply( out, res );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t// selector extensions\n\t\tvar ext = _ext.selector[ type ];\n\t\tif ( ext.length ) {\n\t\t\tfor ( i=0, ien=ext.length ; i<ien ; i++ ) {\n\t\t\t\tout = ext[i]( settings, opts, out );\n\t\t\t}\n\t\t}\n\t\n\t\treturn out;\n\t};\n\t\n\t\n\tvar _selector_opts = function ( opts )\n\t{\n\t\tif ( ! opts ) {\n\t\t\topts = {};\n\t\t}\n\t\n\t\t// Backwards compatibility for 1.9- which used the terminology filter rather\n\t\t// than search\n\t\tif ( opts.filter && opts.search === undefined ) {\n\t\t\topts.search = opts.filter;\n\t\t}\n\t\n\t\treturn $.extend( {\n\t\t\tsearch: 'none',\n\t\t\torder: 'current',\n\t\t\tpage: 'all'\n\t\t}, opts );\n\t};\n\t\n\t\n\tvar _selector_first = function ( inst )\n\t{\n\t\t// Reduce the API instance to the first item found\n\t\tfor ( var i=0, ien=inst.length ; i<ien ; i++ ) {\n\t\t\tif ( inst[i].length > 0 ) {\n\t\t\t\t// Assign the first element to the first item in the instance\n\t\t\t\t// and truncate the instance and context\n\t\t\t\tinst[0] = inst[i];\n\t\t\t\tinst[0].length = 1;\n\t\t\t\tinst.length = 1;\n\t\t\t\tinst.context = [ inst.context[i] ];\n\t\n\t\t\t\treturn inst;\n\t\t\t}\n\t\t}\n\t\n\t\t// Not found - return an empty instance\n\t\tinst.length = 0;\n\t\treturn inst;\n\t};\n\t\n\t\n\tvar _selector_row_indexes = function ( settings, opts )\n\t{\n\t\tvar\n\t\t\ti, ien, tmp, a=[],\n\t\t\tdisplayFiltered = settings.aiDisplay,\n\t\t\tdisplayMaster = settings.aiDisplayMaster;\n\t\n\t\tvar\n\t\t\tsearch = opts.search,  // none, applied, removed\n\t\t\torder  = opts.order,   // applied, current, index (original - compatibility with 1.9)\n\t\t\tpage   = opts.page;    // all, current\n\t\n\t\tif ( _fnDataSource( settings ) == 'ssp' ) {\n\t\t\t// In server-side processing mode, most options are irrelevant since\n\t\t\t// rows not shown don't exist and the index order is the applied order\n\t\t\t// Removed is a special case - for consistency just return an empty\n\t\t\t// array\n\t\t\treturn search === 'removed' ?\n\t\t\t\t[] :\n\t\t\t\t_range( 0, displayMaster.length );\n\t\t}\n\t\telse if ( page == 'current' ) {\n\t\t\t// Current page implies that order=current and fitler=applied, since it is\n\t\t\t// fairly senseless otherwise, regardless of what order and search actually\n\t\t\t// are\n\t\t\tfor ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {\n\t\t\t\ta.push( displayFiltered[i] );\n\t\t\t}\n\t\t}\n\t\telse if ( order == 'current' || order == 'applied' ) {\n\t\t\ta = search == 'none' ?\n\t\t\t\tdisplayMaster.slice() :                      // no search\n\t\t\t\tsearch == 'applied' ?\n\t\t\t\t\tdisplayFiltered.slice() :                // applied search\n\t\t\t\t\t$.map( displayMaster, function (el, i) { // removed search\n\t\t\t\t\t\treturn $.inArray( el, displayFiltered ) === -1 ? el : null;\n\t\t\t\t\t} );\n\t\t}\n\t\telse if ( order == 'index' || order == 'original' ) {\n\t\t\tfor ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n\t\t\t\tif ( search == 'none' ) {\n\t\t\t\t\ta.push( i );\n\t\t\t\t}\n\t\t\t\telse { // applied | removed\n\t\t\t\t\ttmp = $.inArray( i, displayFiltered );\n\t\n\t\t\t\t\tif ((tmp === -1 && search == 'removed') ||\n\t\t\t\t\t\t(tmp >= 0   && search == 'applied') )\n\t\t\t\t\t{\n\t\t\t\t\t\ta.push( i );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn a;\n\t};\n\t\n\t\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Rows\n\t *\n\t * {}          - no selector - use all available rows\n\t * {integer}   - row aoData index\n\t * {node}      - TR node\n\t * {string}    - jQuery selector to apply to the TR elements\n\t * {array}     - jQuery array of nodes, or simply an array of TR nodes\n\t *\n\t */\n\t\n\t\n\tvar __row_selector = function ( settings, selector, opts )\n\t{\n\t\tvar run = function ( sel ) {\n\t\t\tvar selInt = _intVal( sel );\n\t\t\tvar i, ien;\n\t\n\t\t\t// Short cut - selector is a number and no options provided (default is\n\t\t\t// all records, so no need to check if the index is in there, since it\n\t\t\t// must be - dev error if the index doesn't exist).\n\t\t\tif ( selInt !== null && ! opts ) {\n\t\t\t\treturn [ selInt ];\n\t\t\t}\n\t\n\t\t\tvar rows = _selector_row_indexes( settings, opts );\n\t\n\t\t\tif ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {\n\t\t\t\t// Selector - integer\n\t\t\t\treturn [ selInt ];\n\t\t\t}\n\t\t\telse if ( ! sel ) {\n\t\t\t\t// Selector - none\n\t\t\t\treturn rows;\n\t\t\t}\n\t\n\t\t\t// Selector - function\n\t\t\tif ( typeof sel === 'function' ) {\n\t\t\t\treturn $.map( rows, function (idx) {\n\t\t\t\t\tvar row = settings.aoData[ idx ];\n\t\t\t\t\treturn sel( idx, row._aData, row.nTr ) ? idx : null;\n\t\t\t\t} );\n\t\t\t}\n\t\n\t\t\t// Get nodes in the order from the `rows` array with null values removed\n\t\t\tvar nodes = _removeEmpty(\n\t\t\t\t_pluck_order( settings.aoData, rows, 'nTr' )\n\t\t\t);\n\t\n\t\t\t// Selector - node\n\t\t\tif ( sel.nodeName ) {\n\t\t\t\tif ( $.inArray( sel, nodes ) !== -1 ) {\n\t\t\t\t\treturn [ sel._DT_RowIndex ]; // sel is a TR node that is in the table\n\t\t\t\t\t                             // and DataTables adds a prop for fast lookup\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// Selector - jQuery selector string, array of nodes or jQuery object/\n\t\t\t// As jQuery's .filter() allows jQuery objects to be passed in filter,\n\t\t\t// it also allows arrays, so this will cope with all three options\n\t\t\treturn $(nodes)\n\t\t\t\t.filter( sel )\n\t\t\t\t.map( function () {\n\t\t\t\t\treturn this._DT_RowIndex;\n\t\t\t\t} )\n\t\t\t\t.toArray();\n\t\t};\n\t\n\t\treturn _selector_run( 'row', selector, run, settings, opts );\n\t};\n\t\n\t\n\t_api_register( 'rows()', function ( selector, opts ) {\n\t\t// argument shifting\n\t\tif ( selector === undefined ) {\n\t\t\tselector = '';\n\t\t}\n\t\telse if ( $.isPlainObject( selector ) ) {\n\t\t\topts = selector;\n\t\t\tselector = '';\n\t\t}\n\t\n\t\topts = _selector_opts( opts );\n\t\n\t\tvar inst = this.iterator( 'table', function ( settings ) {\n\t\t\treturn __row_selector( settings, selector, opts );\n\t\t}, 1 );\n\t\n\t\t// Want argument shifting here and in __row_selector?\n\t\tinst.selector.rows = selector;\n\t\tinst.selector.opts = opts;\n\t\n\t\treturn inst;\n\t} );\n\t\n\t_api_register( 'rows().nodes()', function () {\n\t\treturn this.iterator( 'row', function ( settings, row ) {\n\t\t\treturn settings.aoData[ row ].nTr || undefined;\n\t\t}, 1 );\n\t} );\n\t\n\t_api_register( 'rows().data()', function () {\n\t\treturn this.iterator( true, 'rows', function ( settings, rows ) {\n\t\t\treturn _pluck_order( settings.aoData, rows, '_aData' );\n\t\t}, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {\n\t\treturn this.iterator( 'row', function ( settings, row ) {\n\t\t\tvar r = settings.aoData[ row ];\n\t\t\treturn type === 'search' ? r._aFilterData : r._aSortData;\n\t\t}, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {\n\t\treturn this.iterator( 'row', function ( settings, row ) {\n\t\t\t_fnInvalidate( settings, row, src );\n\t\t} );\n\t} );\n\t\n\t_api_registerPlural( 'rows().indexes()', 'row().index()', function () {\n\t\treturn this.iterator( 'row', function ( settings, row ) {\n\t\t\treturn row;\n\t\t}, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'rows().remove()', 'row().remove()', function () {\n\t\tvar that = this;\n\t\n\t\treturn this.iterator( 'row', function ( settings, row, thatIdx ) {\n\t\t\tvar data = settings.aoData;\n\t\n\t\t\tdata.splice( row, 1 );\n\t\n\t\t\t// Update the _DT_RowIndex parameter on all rows in the table\n\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t\tif ( data[i].nTr !== null ) {\n\t\t\t\t\tdata[i].nTr._DT_RowIndex = i;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// Remove the target row from the search array\n\t\t\tvar displayIndex = $.inArray( row, settings.aiDisplay );\n\t\n\t\t\t// Delete from the display arrays\n\t\t\t_fnDeleteIndex( settings.aiDisplayMaster, row );\n\t\t\t_fnDeleteIndex( settings.aiDisplay, row );\n\t\t\t_fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes\n\t\n\t\t\t// Check for an 'overflow' they case for displaying the table\n\t\t\t_fnLengthOverflow( settings );\n\t\t} );\n\t} );\n\t\n\t\n\t_api_register( 'rows.add()', function ( rows ) {\n\t\tvar newRows = this.iterator( 'table', function ( settings ) {\n\t\t\t\tvar row, i, ien;\n\t\t\t\tvar out = [];\n\t\n\t\t\t\tfor ( i=0, ien=rows.length ; i<ien ; i++ ) {\n\t\t\t\t\trow = rows[i];\n\t\n\t\t\t\t\tif ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\n\t\t\t\t\t\tout.push( _fnAddTr( settings, row )[0] );\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tout.push( _fnAddData( settings, row ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\treturn out;\n\t\t\t}, 1 );\n\t\n\t\t// Return an Api.rows() extended instance, so rows().nodes() etc can be used\n\t\tvar modRows = this.rows( -1 );\n\t\tmodRows.pop();\n\t\tmodRows.push.apply( modRows, newRows.toArray() );\n\t\n\t\treturn modRows;\n\t} );\n\t\n\t\n\t\n\t\n\t\n\t/**\n\t *\n\t */\n\t_api_register( 'row()', function ( selector, opts ) {\n\t\treturn _selector_first( this.rows( selector, opts ) );\n\t} );\n\t\n\t\n\t_api_register( 'row().data()', function ( data ) {\n\t\tvar ctx = this.context;\n\t\n\t\tif ( data === undefined ) {\n\t\t\t// Get\n\t\t\treturn ctx.length && this.length ?\n\t\t\t\tctx[0].aoData[ this[0] ]._aData :\n\t\t\t\tundefined;\n\t\t}\n\t\n\t\t// Set\n\t\tctx[0].aoData[ this[0] ]._aData = data;\n\t\n\t\t// Automatically invalidate\n\t\t_fnInvalidate( ctx[0], this[0], 'data' );\n\t\n\t\treturn this;\n\t} );\n\t\n\t\n\t_api_register( 'row().node()', function () {\n\t\tvar ctx = this.context;\n\t\n\t\treturn ctx.length && this.length ?\n\t\t\tctx[0].aoData[ this[0] ].nTr || null :\n\t\t\tnull;\n\t} );\n\t\n\t\n\t_api_register( 'row.add()', function ( row ) {\n\t\t// Allow a jQuery object to be passed in - only a single row is added from\n\t\t// it though - the first element in the set\n\t\tif ( row instanceof $ && row.length ) {\n\t\t\trow = row[0];\n\t\t}\n\t\n\t\tvar rows = this.iterator( 'table', function ( settings ) {\n\t\t\tif ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\n\t\t\t\treturn _fnAddTr( settings, row )[0];\n\t\t\t}\n\t\t\treturn _fnAddData( settings, row );\n\t\t} );\n\t\n\t\t// Return an Api.rows() extended instance, with the newly added row selected\n\t\treturn this.row( rows[0] );\n\t} );\n\t\n\t\n\t\n\tvar __details_add = function ( ctx, row, data, klass )\n\t{\n\t\t// Convert to array of TR elements\n\t\tvar rows = [];\n\t\tvar addRow = function ( r, k ) {\n\t\t\t// Recursion to allow for arrays of jQuery objects\n\t\t\tif ( $.isArray( r ) || r instanceof $ ) {\n\t\t\t\tfor ( var i=0, ien=r.length ; i<ien ; i++ ) {\n\t\t\t\t\taddRow( r[i], k );\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// If we get a TR element, then just add it directly - up to the dev\n\t\t\t// to add the correct number of columns etc\n\t\t\tif ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {\n\t\t\t\trows.push( r );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Otherwise create a row with a wrapper\n\t\t\t\tvar created = $('<tr><td/></tr>').addClass( k );\n\t\t\t\t$('td', created)\n\t\t\t\t\t.addClass( k )\n\t\t\t\t\t.html( r )\n\t\t\t\t\t[0].colSpan = _fnVisbleColumns( ctx );\n\t\n\t\t\t\trows.push( created[0] );\n\t\t\t}\n\t\t};\n\t\n\t\taddRow( data, klass );\n\t\n\t\tif ( row._details ) {\n\t\t\trow._details.remove();\n\t\t}\n\t\n\t\trow._details = $(rows);\n\t\n\t\t// If the children were already shown, that state should be retained\n\t\tif ( row._detailsShow ) {\n\t\t\trow._details.insertAfter( row.nTr );\n\t\t}\n\t};\n\t\n\t\n\tvar __details_remove = function ( api, idx )\n\t{\n\t\tvar ctx = api.context;\n\t\n\t\tif ( ctx.length ) {\n\t\t\tvar row = ctx[0].aoData[ idx !== undefined ? idx : api[0] ];\n\t\n\t\t\tif ( row._details ) {\n\t\t\t\trow._details.remove();\n\t\n\t\t\t\trow._detailsShow = undefined;\n\t\t\t\trow._details = undefined;\n\t\t\t}\n\t\t}\n\t};\n\t\n\t\n\tvar __details_display = function ( api, show ) {\n\t\tvar ctx = api.context;\n\t\n\t\tif ( ctx.length && api.length ) {\n\t\t\tvar row = ctx[0].aoData[ api[0] ];\n\t\n\t\t\tif ( row._details ) {\n\t\t\t\trow._detailsShow = show;\n\t\n\t\t\t\tif ( show ) {\n\t\t\t\t\trow._details.insertAfter( row.nTr );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\trow._details.detach();\n\t\t\t\t}\n\t\n\t\t\t\t__details_events( ctx[0] );\n\t\t\t}\n\t\t}\n\t};\n\t\n\t\n\tvar __details_events = function ( settings )\n\t{\n\t\tvar api = new _Api( settings );\n\t\tvar namespace = '.dt.DT_details';\n\t\tvar drawEvent = 'draw'+namespace;\n\t\tvar colvisEvent = 'column-visibility'+namespace;\n\t\tvar destroyEvent = 'destroy'+namespace;\n\t\tvar data = settings.aoData;\n\t\n\t\tapi.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );\n\t\n\t\tif ( _pluck( data, '_details' ).length > 0 ) {\n\t\t\t// On each draw, insert the required elements into the document\n\t\t\tapi.on( drawEvent, function ( e, ctx ) {\n\t\t\t\tif ( settings !== ctx ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tapi.rows( {page:'current'} ).eq(0).each( function (idx) {\n\t\t\t\t\t// Internal data grab\n\t\t\t\t\tvar row = data[ idx ];\n\t\n\t\t\t\t\tif ( row._detailsShow ) {\n\t\t\t\t\t\trow._details.insertAfter( row.nTr );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} );\n\t\n\t\t\t// Column visibility change - update the colspan\n\t\t\tapi.on( colvisEvent, function ( e, ctx, idx, vis ) {\n\t\t\t\tif ( settings !== ctx ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\t// Update the colspan for the details rows (note, only if it already has\n\t\t\t\t// a colspan)\n\t\t\t\tvar row, visible = _fnVisbleColumns( ctx );\n\t\n\t\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t\t\trow = data[i];\n\t\n\t\t\t\t\tif ( row._details ) {\n\t\t\t\t\t\trow._details.children('td[colspan]').attr('colspan', visible );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\n\t\t\t// Table destroyed - nuke any child rows\n\t\t\tapi.on( destroyEvent, function ( e, ctx ) {\n\t\t\t\tif ( settings !== ctx ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t\t\tif ( data[i]._details ) {\n\t\t\t\t\t\t__details_remove( api, i );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t};\n\t\n\t// Strings for the method names to help minification\n\tvar _emp = '';\n\tvar _child_obj = _emp+'row().child';\n\tvar _child_mth = _child_obj+'()';\n\t\n\t// data can be:\n\t//  tr\n\t//  string\n\t//  jQuery or array of any of the above\n\t_api_register( _child_mth, function ( data, klass ) {\n\t\tvar ctx = this.context;\n\t\n\t\tif ( data === undefined ) {\n\t\t\t// get\n\t\t\treturn ctx.length && this.length ?\n\t\t\t\tctx[0].aoData[ this[0] ]._details :\n\t\t\t\tundefined;\n\t\t}\n\t\telse if ( data === true ) {\n\t\t\t// show\n\t\t\tthis.child.show();\n\t\t}\n\t\telse if ( data === false ) {\n\t\t\t// remove\n\t\t\t__details_remove( this );\n\t\t}\n\t\telse if ( ctx.length && this.length ) {\n\t\t\t// set\n\t\t\t__details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );\n\t\t}\n\t\n\t\treturn this;\n\t} );\n\t\n\t\n\t_api_register( [\n\t\t_child_obj+'.show()',\n\t\t_child_mth+'.show()' // only when `child()` was called with parameters (without\n\t], function ( show ) {   // it returns an object and this method is not executed)\n\t\t__details_display( this, true );\n\t\treturn this;\n\t} );\n\t\n\t\n\t_api_register( [\n\t\t_child_obj+'.hide()',\n\t\t_child_mth+'.hide()' // only when `child()` was called with parameters (without\n\t], function () {         // it returns an object and this method is not executed)\n\t\t__details_display( this, false );\n\t\treturn this;\n\t} );\n\t\n\t\n\t_api_register( [\n\t\t_child_obj+'.remove()',\n\t\t_child_mth+'.remove()' // only when `child()` was called with parameters (without\n\t], function () {           // it returns an object and this method is not executed)\n\t\t__details_remove( this );\n\t\treturn this;\n\t} );\n\t\n\t\n\t_api_register( _child_obj+'.isShown()', function () {\n\t\tvar ctx = this.context;\n\t\n\t\tif ( ctx.length && this.length ) {\n\t\t\t// _detailsShown as false or undefined will fall through to return false\n\t\t\treturn ctx[0].aoData[ this[0] ]._detailsShow || false;\n\t\t}\n\t\treturn false;\n\t} );\n\t\n\t\n\t\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Columns\n\t *\n\t * {integer}           - column index (>=0 count from left, <0 count from right)\n\t * \"{integer}:visIdx\"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)\n\t * \"{integer}:visible\" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)\n\t * \"{string}:name\"     - column name\n\t * \"{string}\"          - jQuery selector on column header nodes\n\t *\n\t */\n\t\n\t// can be an array of these items, comma separated list, or an array of comma\n\t// separated lists\n\t\n\tvar __re_column_selector = /^(.+):(name|visIdx|visible)$/;\n\t\n\t\n\t// r1 and r2 are redundant - but it means that the parameters match for the\n\t// iterator callback in columns().data()\n\tvar __columnData = function ( settings, column, r1, r2, rows ) {\n\t\tvar a = [];\n\t\tfor ( var row=0, ien=rows.length ; row<ien ; row++ ) {\n\t\t\ta.push( _fnGetCellData( settings, rows[row], column ) );\n\t\t}\n\t\treturn a;\n\t};\n\t\n\t\n\tvar __column_selector = function ( settings, selector, opts )\n\t{\n\t\tvar\n\t\t\tcolumns = settings.aoColumns,\n\t\t\tnames = _pluck( columns, 'sName' ),\n\t\t\tnodes = _pluck( columns, 'nTh' );\n\t\n\t\tvar run = function ( s ) {\n\t\t\tvar selInt = _intVal( s );\n\t\n\t\t\t// Selector - all\n\t\t\tif ( s === '' ) {\n\t\t\t\treturn _range( columns.length );\n\t\t\t}\n\t\t\t\n\t\t\t// Selector - index\n\t\t\tif ( selInt !== null ) {\n\t\t\t\treturn [ selInt >= 0 ?\n\t\t\t\t\tselInt : // Count from left\n\t\t\t\t\tcolumns.length + selInt // Count from right (+ because its a negative value)\n\t\t\t\t];\n\t\t\t}\n\t\t\t\n\t\t\t// Selector = function\n\t\t\tif ( typeof s === 'function' ) {\n\t\t\t\tvar rows = _selector_row_indexes( settings, opts );\n\t\n\t\t\t\treturn $.map( columns, function (col, idx) {\n\t\t\t\t\treturn s(\n\t\t\t\t\t\t\tidx,\n\t\t\t\t\t\t\t__columnData( settings, idx, 0, 0, rows ),\n\t\t\t\t\t\t\tnodes[ idx ]\n\t\t\t\t\t\t) ? idx : null;\n\t\t\t\t} );\n\t\t\t}\n\t\n\t\t\t// jQuery or string selector\n\t\t\tvar match = typeof s === 'string' ?\n\t\t\t\ts.match( __re_column_selector ) :\n\t\t\t\t'';\n\t\n\t\t\tif ( match ) {\n\t\t\t\tswitch( match[2] ) {\n\t\t\t\t\tcase 'visIdx':\n\t\t\t\t\tcase 'visible':\n\t\t\t\t\t\tvar idx = parseInt( match[1], 10 );\n\t\t\t\t\t\t// Visible index given, convert to column index\n\t\t\t\t\t\tif ( idx < 0 ) {\n\t\t\t\t\t\t\t// Counting from the right\n\t\t\t\t\t\t\tvar visColumns = $.map( columns, function (col,i) {\n\t\t\t\t\t\t\t\treturn col.bVisible ? i : null;\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\treturn [ visColumns[ visColumns.length + idx ] ];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Counting from the left\n\t\t\t\t\t\treturn [ _fnVisibleToColumnIndex( settings, idx ) ];\n\t\n\t\t\t\t\tcase 'name':\n\t\t\t\t\t\t// match by name. `names` is column index complete and in order\n\t\t\t\t\t\treturn $.map( names, function (name, i) {\n\t\t\t\t\t\t\treturn name === match[1] ? i : null;\n\t\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// jQuery selector on the TH elements for the columns\n\t\t\t\treturn $( nodes )\n\t\t\t\t\t.filter( s )\n\t\t\t\t\t.map( function () {\n\t\t\t\t\t\treturn $.inArray( this, nodes ); // `nodes` is column index complete and in order\n\t\t\t\t\t} )\n\t\t\t\t\t.toArray();\n\t\t\t}\n\t\t};\n\t\n\t\treturn _selector_run( 'column', selector, run, settings, opts );\n\t};\n\t\n\t\n\tvar __setColumnVis = function ( settings, column, vis, recalc ) {\n\t\tvar\n\t\t\tcols = settings.aoColumns,\n\t\t\tcol  = cols[ column ],\n\t\t\tdata = settings.aoData,\n\t\t\trow, cells, i, ien, tr;\n\t\n\t\t// Get\n\t\tif ( vis === undefined ) {\n\t\t\treturn col.bVisible;\n\t\t}\n\t\n\t\t// Set\n\t\t// No change\n\t\tif ( col.bVisible === vis ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\tif ( vis ) {\n\t\t\t// Insert column\n\t\t\t// Need to decide if we should use appendChild or insertBefore\n\t\t\tvar insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );\n\t\n\t\t\tfor ( i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t\ttr = data[i].nTr;\n\t\t\t\tcells = data[i].anCells;\n\t\n\t\t\t\tif ( tr ) {\n\t\t\t\t\t// insertBefore can act like appendChild if 2nd arg is null\n\t\t\t\t\ttr.insertBefore( cells[ column ], cells[ insertBefore ] || null );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Remove column\n\t\t\t$( _pluck( settings.aoData, 'anCells', column ) ).detach();\n\t\t}\n\t\n\t\t// Common actions\n\t\tcol.bVisible = vis;\n\t\t_fnDrawHead( settings, settings.aoHeader );\n\t\t_fnDrawHead( settings, settings.aoFooter );\n\t\n\t\tif ( recalc === undefined || recalc ) {\n\t\t\t// Automatically adjust column sizing\n\t\t\t_fnAdjustColumnSizing( settings );\n\t\n\t\t\t// Realign columns for scrolling\n\t\t\tif ( settings.oScroll.sX || settings.oScroll.sY ) {\n\t\t\t\t_fnScrollDraw( settings );\n\t\t\t}\n\t\t}\n\t\n\t\t_fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis] );\n\t\n\t\t_fnSaveState( settings );\n\t};\n\t\n\t\n\t_api_register( 'columns()', function ( selector, opts ) {\n\t\t// argument shifting\n\t\tif ( selector === undefined ) {\n\t\t\tselector = '';\n\t\t}\n\t\telse if ( $.isPlainObject( selector ) ) {\n\t\t\topts = selector;\n\t\t\tselector = '';\n\t\t}\n\t\n\t\topts = _selector_opts( opts );\n\t\n\t\tvar inst = this.iterator( 'table', function ( settings ) {\n\t\t\treturn __column_selector( settings, selector, opts );\n\t\t}, 1 );\n\t\n\t\t// Want argument shifting here and in _row_selector?\n\t\tinst.selector.cols = selector;\n\t\tinst.selector.opts = opts;\n\t\n\t\treturn inst;\n\t} );\n\t\n\t_api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {\n\t\treturn this.iterator( 'column', function ( settings, column ) {\n\t\t\treturn settings.aoColumns[column].nTh;\n\t\t}, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {\n\t\treturn this.iterator( 'column', function ( settings, column ) {\n\t\t\treturn settings.aoColumns[column].nTf;\n\t\t}, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'columns().data()', 'column().data()', function () {\n\t\treturn this.iterator( 'column-rows', __columnData, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {\n\t\treturn this.iterator( 'column', function ( settings, column ) {\n\t\t\treturn settings.aoColumns[column].mData;\n\t\t}, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {\n\t\treturn this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\n\t\t\treturn _pluck_order( settings.aoData, rows,\n\t\t\t\ttype === 'search' ? '_aFilterData' : '_aSortData', column\n\t\t\t);\n\t\t}, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {\n\t\treturn this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\n\t\t\treturn _pluck_order( settings.aoData, rows, 'anCells', column ) ;\n\t\t}, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {\n\t\treturn this.iterator( 'column', function ( settings, column ) {\n\t\t\tif ( vis === undefined ) {\n\t\t\t\treturn settings.aoColumns[ column ].bVisible;\n\t\t\t} // else\n\t\t\t__setColumnVis( settings, column, vis, calc );\n\t\t} );\n\t} );\n\t\n\t_api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {\n\t\treturn this.iterator( 'column', function ( settings, column ) {\n\t\t\treturn type === 'visible' ?\n\t\t\t\t_fnColumnIndexToVisible( settings, column ) :\n\t\t\t\tcolumn;\n\t\t}, 1 );\n\t} );\n\t\n\t_api_register( 'columns.adjust()', function () {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t_fnAdjustColumnSizing( settings );\n\t\t}, 1 );\n\t} );\n\t\n\t_api_register( 'column.index()', function ( type, idx ) {\n\t\tif ( this.context.length !== 0 ) {\n\t\t\tvar ctx = this.context[0];\n\t\n\t\t\tif ( type === 'fromVisible' || type === 'toData' ) {\n\t\t\t\treturn _fnVisibleToColumnIndex( ctx, idx );\n\t\t\t}\n\t\t\telse if ( type === 'fromData' || type === 'toVisible' ) {\n\t\t\t\treturn _fnColumnIndexToVisible( ctx, idx );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\t_api_register( 'column()', function ( selector, opts ) {\n\t\treturn _selector_first( this.columns( selector, opts ) );\n\t} );\n\t\n\t\n\t\n\t\n\tvar __cell_selector = function ( settings, selector, opts )\n\t{\n\t\tvar data = settings.aoData;\n\t\tvar rows = _selector_row_indexes( settings, opts );\n\t\tvar cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );\n\t\tvar allCells = $( [].concat.apply([], cells) );\n\t\tvar row;\n\t\tvar columns = settings.aoColumns.length;\n\t\tvar a, i, ien, j, o, host;\n\t\n\t\tvar run = function ( s ) {\n\t\t\tvar fnSelector = typeof s === 'function';\n\t\n\t\t\tif ( s === null || s === undefined || fnSelector ) {\n\t\t\t\t// All cells and function selectors\n\t\t\t\ta = [];\n\t\n\t\t\t\tfor ( i=0, ien=rows.length ; i<ien ; i++ ) {\n\t\t\t\t\trow = rows[i];\n\t\n\t\t\t\t\tfor ( j=0 ; j<columns ; j++ ) {\n\t\t\t\t\t\to = {\n\t\t\t\t\t\t\trow: row,\n\t\t\t\t\t\t\tcolumn: j\n\t\t\t\t\t\t};\n\t\n\t\t\t\t\t\tif ( fnSelector ) {\n\t\t\t\t\t\t\t// Selector - function\n\t\t\t\t\t\t\thost = settings.aoData[ row ];\n\t\n\t\t\t\t\t\t\tif ( s( o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null ) ) {\n\t\t\t\t\t\t\t\ta.push( o );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t// Selector - all\n\t\t\t\t\t\t\ta.push( o );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\treturn a;\n\t\t\t}\n\t\t\t\n\t\t\t// Selector - index\n\t\t\tif ( $.isPlainObject( s ) ) {\n\t\t\t\treturn [s];\n\t\t\t}\n\t\n\t\t\t// Selector - jQuery filtered cells\n\t\t\treturn allCells\n\t\t\t\t.filter( s )\n\t\t\t\t.map( function (i, el) {\n\t\t\t\t\trow = el.parentNode._DT_RowIndex;\n\t\n\t\t\t\t\treturn {\n\t\t\t\t\t\trow: row,\n\t\t\t\t\t\tcolumn: $.inArray( el, data[ row ].anCells )\n\t\t\t\t\t};\n\t\t\t\t} )\n\t\t\t\t.toArray();\n\t\t};\n\t\n\t\treturn _selector_run( 'cell', selector, run, settings, opts );\n\t};\n\t\n\t\n\t\n\t\n\t_api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {\n\t\t// Argument shifting\n\t\tif ( $.isPlainObject( rowSelector ) ) {\n\t\t\t// Indexes\n\t\t\tif ( rowSelector.row === undefined ) {\n\t\t\t\t// Selector options in first parameter\n\t\t\t\topts = rowSelector;\n\t\t\t\trowSelector = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Cell index objects in first parameter\n\t\t\t\topts = columnSelector;\n\t\t\t\tcolumnSelector = null;\n\t\t\t}\n\t\t}\n\t\tif ( $.isPlainObject( columnSelector ) ) {\n\t\t\topts = columnSelector;\n\t\t\tcolumnSelector = null;\n\t\t}\n\t\n\t\t// Cell selector\n\t\tif ( columnSelector === null || columnSelector === undefined ) {\n\t\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t\treturn __cell_selector( settings, rowSelector, _selector_opts( opts ) );\n\t\t\t} );\n\t\t}\n\t\n\t\t// Row + column selector\n\t\tvar columns = this.columns( columnSelector, opts );\n\t\tvar rows = this.rows( rowSelector, opts );\n\t\tvar a, i, ien, j, jen;\n\t\n\t\tvar cells = this.iterator( 'table', function ( settings, idx ) {\n\t\t\ta = [];\n\t\n\t\t\tfor ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {\n\t\t\t\tfor ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {\n\t\t\t\t\ta.push( {\n\t\t\t\t\t\trow:    rows[idx][i],\n\t\t\t\t\t\tcolumn: columns[idx][j]\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn a;\n\t\t}, 1 );\n\t\n\t\t$.extend( cells.selector, {\n\t\t\tcols: columnSelector,\n\t\t\trows: rowSelector,\n\t\t\topts: opts\n\t\t} );\n\t\n\t\treturn cells;\n\t} );\n\t\n\t\n\t_api_registerPlural( 'cells().nodes()', 'cell().node()', function () {\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\t\tvar cells = settings.aoData[ row ].anCells;\n\t\t\treturn cells ?\n\t\t\t\tcells[ column ] :\n\t\t\t\tundefined;\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_register( 'cells().data()', function () {\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\t\treturn _fnGetCellData( settings, row, column );\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {\n\t\ttype = type === 'search' ? '_aFilterData' : '_aSortData';\n\t\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\t\treturn settings.aoData[ row ][ type ][ column ];\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\t\treturn _fnGetCellData( settings, row, column, type );\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_registerPlural( 'cells().indexes()', 'cell().index()', function () {\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\t\treturn {\n\t\t\t\trow: row,\n\t\t\t\tcolumn: column,\n\t\t\t\tcolumnVisible: _fnColumnIndexToVisible( settings, column )\n\t\t\t};\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\t\t_fnInvalidate( settings, row, src, column );\n\t\t} );\n\t} );\n\t\n\t\n\t\n\t_api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {\n\t\treturn _selector_first( this.cells( rowSelector, columnSelector, opts ) );\n\t} );\n\t\n\t\n\t_api_register( 'cell().data()', function ( data ) {\n\t\tvar ctx = this.context;\n\t\tvar cell = this[0];\n\t\n\t\tif ( data === undefined ) {\n\t\t\t// Get\n\t\t\treturn ctx.length && cell.length ?\n\t\t\t\t_fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :\n\t\t\t\tundefined;\n\t\t}\n\t\n\t\t// Set\n\t\t_fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );\n\t\t_fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );\n\t\n\t\treturn this;\n\t} );\n\t\n\t\n\t\n\t/**\n\t * Get current ordering (sorting) that has been applied to the table.\n\t *\n\t * @returns {array} 2D array containing the sorting information for the first\n\t *   table in the current context. Each element in the parent array represents\n\t *   a column being sorted upon (i.e. multi-sorting with two columns would have\n\t *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is\n\t *   the column index that the sorting condition applies to, the second is the\n\t *   direction of the sort (`desc` or `asc`) and, optionally, the third is the\n\t *   index of the sorting order from the `column.sorting` initialisation array.\n\t *//**\n\t * Set the ordering for the table.\n\t *\n\t * @param {integer} order Column index to sort upon.\n\t * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)\n\t * @returns {DataTables.Api} this\n\t *//**\n\t * Set the ordering for the table.\n\t *\n\t * @param {array} order 1D array of sorting information to be applied.\n\t * @param {array} [...] Optional additional sorting conditions\n\t * @returns {DataTables.Api} this\n\t *//**\n\t * Set the ordering for the table.\n\t *\n\t * @param {array} order 2D array of sorting information to be applied.\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'order()', function ( order, dir ) {\n\t\tvar ctx = this.context;\n\t\n\t\tif ( order === undefined ) {\n\t\t\t// get\n\t\t\treturn ctx.length !== 0 ?\n\t\t\t\tctx[0].aaSorting :\n\t\t\t\tundefined;\n\t\t}\n\t\n\t\t// set\n\t\tif ( typeof order === 'number' ) {\n\t\t\t// Simple column / direction passed in\n\t\t\torder = [ [ order, dir ] ];\n\t\t}\n\t\telse if ( ! $.isArray( order[0] ) ) {\n\t\t\t// Arguments passed in (list of 1D arrays)\n\t\t\torder = Array.prototype.slice.call( arguments );\n\t\t}\n\t\t// otherwise a 2D array was passed in\n\t\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\tsettings.aaSorting = order.slice();\n\t\t} );\n\t} );\n\t\n\t\n\t/**\n\t * Attach a sort listener to an element for a given column\n\t *\n\t * @param {node|jQuery|string} node Identifier for the element(s) to attach the\n\t *   listener to. This can take the form of a single DOM node, a jQuery\n\t *   collection of nodes or a jQuery selector which will identify the node(s).\n\t * @param {integer} column the column that a click on this node will sort on\n\t * @param {function} [callback] callback function when sort is run\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'order.listener()', function ( node, column, callback ) {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t_fnSortAttachListener( settings, node, column, callback );\n\t\t} );\n\t} );\n\t\n\t\n\t// Order by the selected column(s)\n\t_api_register( [\n\t\t'columns().order()',\n\t\t'column().order()'\n\t], function ( dir ) {\n\t\tvar that = this;\n\t\n\t\treturn this.iterator( 'table', function ( settings, i ) {\n\t\t\tvar sort = [];\n\t\n\t\t\t$.each( that[i], function (j, col) {\n\t\t\t\tsort.push( [ col, dir ] );\n\t\t\t} );\n\t\n\t\t\tsettings.aaSorting = sort;\n\t\t} );\n\t} );\n\t\n\t\n\t\n\t_api_register( 'search()', function ( input, regex, smart, caseInsen ) {\n\t\tvar ctx = this.context;\n\t\n\t\tif ( input === undefined ) {\n\t\t\t// get\n\t\t\treturn ctx.length !== 0 ?\n\t\t\t\tctx[0].oPreviousSearch.sSearch :\n\t\t\t\tundefined;\n\t\t}\n\t\n\t\t// set\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\tif ( ! settings.oFeatures.bFilter ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t_fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {\n\t\t\t\t\"sSearch\": input+\"\",\n\t\t\t\t\"bRegex\":  regex === null ? false : regex,\n\t\t\t\t\"bSmart\":  smart === null ? true  : smart,\n\t\t\t\t\"bCaseInsensitive\": caseInsen === null ? true : caseInsen\n\t\t\t} ), 1 );\n\t\t} );\n\t} );\n\t\n\t\n\t_api_registerPlural(\n\t\t'columns().search()',\n\t\t'column().search()',\n\t\tfunction ( input, regex, smart, caseInsen ) {\n\t\t\treturn this.iterator( 'column', function ( settings, column ) {\n\t\t\t\tvar preSearch = settings.aoPreSearchCols;\n\t\n\t\t\t\tif ( input === undefined ) {\n\t\t\t\t\t// get\n\t\t\t\t\treturn preSearch[ column ].sSearch;\n\t\t\t\t}\n\t\n\t\t\t\t// set\n\t\t\t\tif ( ! settings.oFeatures.bFilter ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\t$.extend( preSearch[ column ], {\n\t\t\t\t\t\"sSearch\": input+\"\",\n\t\t\t\t\t\"bRegex\":  regex === null ? false : regex,\n\t\t\t\t\t\"bSmart\":  smart === null ? true  : smart,\n\t\t\t\t\t\"bCaseInsensitive\": caseInsen === null ? true : caseInsen\n\t\t\t\t} );\n\t\n\t\t\t\t_fnFilterComplete( settings, settings.oPreviousSearch, 1 );\n\t\t\t} );\n\t\t}\n\t);\n\t\n\t/*\n\t * State API methods\n\t */\n\t\n\t_api_register( 'state()', function () {\n\t\treturn this.context.length ?\n\t\t\tthis.context[0].oSavedState :\n\t\t\tnull;\n\t} );\n\t\n\t\n\t_api_register( 'state.clear()', function () {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t// Save an empty object\n\t\t\tsettings.fnStateSaveCallback.call( settings.oInstance, settings, {} );\n\t\t} );\n\t} );\n\t\n\t\n\t_api_register( 'state.loaded()', function () {\n\t\treturn this.context.length ?\n\t\t\tthis.context[0].oLoadedState :\n\t\t\tnull;\n\t} );\n\t\n\t\n\t_api_register( 'state.save()', function () {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t_fnSaveState( settings );\n\t\t} );\n\t} );\n\t\n\t\n\t\n\t/**\n\t * Provide a common method for plug-ins to check the version of DataTables being\n\t * used, in order to ensure compatibility.\n\t *\n\t *  @param {string} version Version string to check for, in the format \"X.Y.Z\".\n\t *    Note that the formats \"X\" and \"X.Y\" are also acceptable.\n\t *  @returns {boolean} true if this version of DataTables is greater or equal to\n\t *    the required version, or false if this version of DataTales is not\n\t *    suitable\n\t *  @static\n\t *  @dtopt API-Static\n\t *\n\t *  @example\n\t *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );\n\t */\n\tDataTable.versionCheck = DataTable.fnVersionCheck = function( version )\n\t{\n\t\tvar aThis = DataTable.version.split('.');\n\t\tvar aThat = version.split('.');\n\t\tvar iThis, iThat;\n\t\n\t\tfor ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {\n\t\t\tiThis = parseInt( aThis[i], 10 ) || 0;\n\t\t\tiThat = parseInt( aThat[i], 10 ) || 0;\n\t\n\t\t\t// Parts are the same, keep comparing\n\t\t\tif (iThis === iThat) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// Parts are different, return immediately\n\t\t\treturn iThis > iThat;\n\t\t}\n\t\n\t\treturn true;\n\t};\n\t\n\t\n\t/**\n\t * Check if a `<table>` node is a DataTable table already or not.\n\t *\n\t *  @param {node|jquery|string} table Table node, jQuery object or jQuery\n\t *      selector for the table to test. Note that if more than more than one\n\t *      table is passed on, only the first will be checked\n\t *  @returns {boolean} true the table given is a DataTable, or false otherwise\n\t *  @static\n\t *  @dtopt API-Static\n\t *\n\t *  @example\n\t *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {\n\t *      $('#example').dataTable();\n\t *    }\n\t */\n\tDataTable.isDataTable = DataTable.fnIsDataTable = function ( table )\n\t{\n\t\tvar t = $(table).get(0);\n\t\tvar is = false;\n\t\n\t\t$.each( DataTable.settings, function (i, o) {\n\t\t\tvar head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;\n\t\t\tvar foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;\n\t\n\t\t\tif ( o.nTable === t || head === t || foot === t ) {\n\t\t\t\tis = true;\n\t\t\t}\n\t\t} );\n\t\n\t\treturn is;\n\t};\n\t\n\t\n\t/**\n\t * Get all DataTable tables that have been initialised - optionally you can\n\t * select to get only currently visible tables.\n\t *\n\t *  @param {boolean} [visible=false] Flag to indicate if you want all (default)\n\t *    or visible tables only.\n\t *  @returns {array} Array of `table` nodes (not DataTable instances) which are\n\t *    DataTables\n\t *  @static\n\t *  @dtopt API-Static\n\t *\n\t *  @example\n\t *    $.each( $.fn.dataTable.tables(true), function () {\n\t *      $(table).DataTable().columns.adjust();\n\t *    } );\n\t */\n\tDataTable.tables = DataTable.fnTables = function ( visible )\n\t{\n\t\treturn $.map( DataTable.settings, function (o) {\n\t\t\tif ( !visible || (visible && $(o.nTable).is(':visible')) ) {\n\t\t\t\treturn o.nTable;\n\t\t\t}\n\t\t} );\n\t};\n\t\n\t\n\t/**\n\t * DataTables utility methods\n\t * \n\t * This namespace provides helper methods that DataTables uses internally to\n\t * create a DataTable, but which are not exclusively used only for DataTables.\n\t * These methods can be used by extension authors to save the duplication of\n\t * code.\n\t *\n\t *  @namespace\n\t */\n\tDataTable.util = {\n\t\t/**\n\t\t * Throttle the calls to a function. Arguments and context are maintained\n\t\t * for the throttled function.\n\t\t *\n\t\t * @param {function} fn Function to be called\n\t\t * @param {integer} freq Call frequency in mS\n\t\t * @return {function} Wrapped function\n\t\t */\n\t\tthrottle: _fnThrottle,\n\t\n\t\n\t\t/**\n\t\t * Escape a string such that it can be used in a regular expression\n\t\t *\n\t\t *  @param {string} sVal string to escape\n\t\t *  @returns {string} escaped string\n\t\t */\n\t\tescapeRegex: _fnEscapeRegex\n\t};\n\t\n\t\n\t/**\n\t * Convert from camel case parameters to Hungarian notation. This is made public\n\t * for the extensions to provide the same ability as DataTables core to accept\n\t * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase\n\t * parameters.\n\t *\n\t *  @param {object} src The model object which holds all parameters that can be\n\t *    mapped.\n\t *  @param {object} user The object to convert from camel case to Hungarian.\n\t *  @param {boolean} force When set to `true`, properties which already have a\n\t *    Hungarian value in the `user` object will be overwritten. Otherwise they\n\t *    won't be.\n\t */\n\tDataTable.camelToHungarian = _fnCamelToHungarian;\n\t\n\t\n\t\n\t/**\n\t *\n\t */\n\t_api_register( '$()', function ( selector, opts ) {\n\t\tvar\n\t\t\trows   = this.rows( opts ).nodes(), // Get all rows\n\t\t\tjqRows = $(rows);\n\t\n\t\treturn $( [].concat(\n\t\t\tjqRows.filter( selector ).toArray(),\n\t\t\tjqRows.find( selector ).toArray()\n\t\t) );\n\t} );\n\t\n\t\n\t// jQuery functions to operate on the tables\n\t$.each( [ 'on', 'one', 'off' ], function (i, key) {\n\t\t_api_register( key+'()', function ( /* event, handler */ ) {\n\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\n\t\t\t// Add the `dt` namespace automatically if it isn't already present\n\t\t\tif ( ! args[0].match(/\\.dt\\b/) ) {\n\t\t\t\targs[0] += '.dt';\n\t\t\t}\n\t\n\t\t\tvar inst = $( this.tables().nodes() );\n\t\t\tinst[key].apply( inst, args );\n\t\t\treturn this;\n\t\t} );\n\t} );\n\t\n\t\n\t_api_register( 'clear()', function () {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t_fnClearTable( settings );\n\t\t} );\n\t} );\n\t\n\t\n\t_api_register( 'settings()', function () {\n\t\treturn new _Api( this.context, this.context );\n\t} );\n\t\n\t\n\t_api_register( 'init()', function () {\n\t\tvar ctx = this.context;\n\t\treturn ctx.length ? ctx[0].oInit : null;\n\t} );\n\t\n\t\n\t_api_register( 'data()', function () {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\treturn _pluck( settings.aoData, '_aData' );\n\t\t} ).flatten();\n\t} );\n\t\n\t\n\t_api_register( 'destroy()', function ( remove ) {\n\t\tremove = remove || false;\n\t\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\tvar orig      = settings.nTableWrapper.parentNode;\n\t\t\tvar classes   = settings.oClasses;\n\t\t\tvar table     = settings.nTable;\n\t\t\tvar tbody     = settings.nTBody;\n\t\t\tvar thead     = settings.nTHead;\n\t\t\tvar tfoot     = settings.nTFoot;\n\t\t\tvar jqTable   = $(table);\n\t\t\tvar jqTbody   = $(tbody);\n\t\t\tvar jqWrapper = $(settings.nTableWrapper);\n\t\t\tvar rows      = $.map( settings.aoData, function (r) { return r.nTr; } );\n\t\t\tvar i, ien;\n\t\n\t\t\t// Flag to note that the table is currently being destroyed - no action\n\t\t\t// should be taken\n\t\t\tsettings.bDestroying = true;\n\t\n\t\t\t// Fire off the destroy callbacks for plug-ins etc\n\t\t\t_fnCallbackFire( settings, \"aoDestroyCallback\", \"destroy\", [settings] );\n\t\n\t\t\t// If not being removed from the document, make all columns visible\n\t\t\tif ( ! remove ) {\n\t\t\t\tnew _Api( settings ).columns().visible( true );\n\t\t\t}\n\t\n\t\t\t// Blitz all `DT` namespaced events (these are internal events, the\n\t\t\t// lowercase, `dt` events are user subscribed and they are responsible\n\t\t\t// for removing them\n\t\t\tjqWrapper.unbind('.DT').find(':not(tbody *)').unbind('.DT');\n\t\t\t$(window).unbind('.DT-'+settings.sInstance);\n\t\n\t\t\t// When scrolling we had to break the table up - restore it\n\t\t\tif ( table != thead.parentNode ) {\n\t\t\t\tjqTable.children('thead').detach();\n\t\t\t\tjqTable.append( thead );\n\t\t\t}\n\t\n\t\t\tif ( tfoot && table != tfoot.parentNode ) {\n\t\t\t\tjqTable.children('tfoot').detach();\n\t\t\t\tjqTable.append( tfoot );\n\t\t\t}\n\t\n\t\t\t// Remove the DataTables generated nodes, events and classes\n\t\t\tjqTable.detach();\n\t\t\tjqWrapper.detach();\n\t\n\t\t\tsettings.aaSorting = [];\n\t\t\tsettings.aaSortingFixed = [];\n\t\t\t_fnSortingClasses( settings );\n\t\n\t\t\t$( rows ).removeClass( settings.asStripeClasses.join(' ') );\n\t\n\t\t\t$('th, td', thead).removeClass( classes.sSortable+' '+\n\t\t\t\tclasses.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone\n\t\t\t);\n\t\n\t\t\tif ( settings.bJUI ) {\n\t\t\t\t$('th span.'+classes.sSortIcon+ ', td span.'+classes.sSortIcon, thead).detach();\n\t\t\t\t$('th, td', thead).each( function () {\n\t\t\t\t\tvar wrapper = $('div.'+classes.sSortJUIWrapper, this);\n\t\t\t\t\t$(this).append( wrapper.contents() );\n\t\t\t\t\twrapper.detach();\n\t\t\t\t} );\n\t\t\t}\n\t\n\t\t\tif ( ! remove && orig ) {\n\t\t\t\t// insertBefore acts like appendChild if !arg[1]\n\t\t\t\torig.insertBefore( table, settings.nTableReinsertBefore );\n\t\t\t}\n\t\n\t\t\t// Add the TR elements back into the table in their original order\n\t\t\tjqTbody.children().detach();\n\t\t\tjqTbody.append( rows );\n\t\n\t\t\t// Restore the width of the original table - was read from the style property,\n\t\t\t// so we can restore directly to that\n\t\t\tjqTable\n\t\t\t\t.css( 'width', settings.sDestroyWidth )\n\t\t\t\t.removeClass( classes.sTable );\n\t\n\t\t\t// If the were originally stripe classes - then we add them back here.\n\t\t\t// Note this is not fool proof (for example if not all rows had stripe\n\t\t\t// classes - but it's a good effort without getting carried away\n\t\t\tien = settings.asDestroyStripes.length;\n\t\n\t\t\tif ( ien ) {\n\t\t\t\tjqTbody.children().each( function (i) {\n\t\t\t\t\t$(this).addClass( settings.asDestroyStripes[i % ien] );\n\t\t\t\t} );\n\t\t\t}\n\t\n\t\t\t/* Remove the settings object from the settings array */\n\t\t\tvar idx = $.inArray( settings, DataTable.settings );\n\t\t\tif ( idx !== -1 ) {\n\t\t\t\tDataTable.settings.splice( idx, 1 );\n\t\t\t}\n\t\t} );\n\t} );\n\t\n\t\n\t// Add the `every()` method for rows, columns and cells in a compact form\n\t$.each( [ 'column', 'row', 'cell' ], function ( i, type ) {\n\t\t_api_register( type+'s().every()', function ( fn ) {\n\t\t\treturn this.iterator( type, function ( settings, idx, idx2 ) {\n\t\t\t\t// idx2 is undefined for rows and columns.\n\t\t\t\tfn.call( new _Api( settings )[ type ]( idx, idx2 ) );\n\t\t\t} );\n\t\t} );\n\t} );\n\t\n\t\n\t// i18n method for extensions to be able to use the language object from the\n\t// DataTable\n\t_api_register( 'i18n()', function ( token, def, plural ) {\n\t\tvar ctx = this.context[0];\n\t\tvar resolved = _fnGetObjectDataFn( token )( ctx.oLanguage );\n\t\n\t\tif ( resolved === undefined ) {\n\t\t\tresolved = def;\n\t\t}\n\t\n\t\tif ( plural !== undefined && $.isPlainObject( resolved ) ) {\n\t\t\tresolved = resolved[ plural ] !== undefined ?\n\t\t\t\tresolved[ plural ] :\n\t\t\t\tresolved._;\n\t\t}\n\t\n\t\treturn resolved.replace( '%d', plural ); // nb: plural might be undefined,\n\t} );\n\n\t/**\n\t * Version string for plug-ins to check compatibility. Allowed format is\n\t * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used\n\t * only for non-release builds. See http://semver.org/ for more information.\n\t *  @member\n\t *  @type string\n\t *  @default Version number\n\t */\n\tDataTable.version = \"1.10.7\";\n\n\t/**\n\t * Private data store, containing all of the settings objects that are\n\t * created for the tables on a given page.\n\t *\n\t * Note that the `DataTable.settings` object is aliased to\n\t * `jQuery.fn.dataTableExt` through which it may be accessed and\n\t * manipulated, or `jQuery.fn.dataTable.settings`.\n\t *  @member\n\t *  @type array\n\t *  @default []\n\t *  @private\n\t */\n\tDataTable.settings = [];\n\n\t/**\n\t * Object models container, for the various models that DataTables has\n\t * available to it. These models define the objects that are used to hold\n\t * the active state and configuration of the table.\n\t *  @namespace\n\t */\n\tDataTable.models = {};\n\t\n\t\n\t\n\t/**\n\t * Template object for the way in which DataTables holds information about\n\t * search information for the global filter and individual column filters.\n\t *  @namespace\n\t */\n\tDataTable.models.oSearch = {\n\t\t/**\n\t\t * Flag to indicate if the filtering should be case insensitive or not\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t */\n\t\t\"bCaseInsensitive\": true,\n\t\n\t\t/**\n\t\t * Applied search term\n\t\t *  @type string\n\t\t *  @default <i>Empty string</i>\n\t\t */\n\t\t\"sSearch\": \"\",\n\t\n\t\t/**\n\t\t * Flag to indicate if the search term should be interpreted as a\n\t\t * regular expression (true) or not (false) and therefore and special\n\t\t * regex characters escaped.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t */\n\t\t\"bRegex\": false,\n\t\n\t\t/**\n\t\t * Flag to indicate if DataTables is to use its smart filtering or not.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t */\n\t\t\"bSmart\": true\n\t};\n\t\n\t\n\t\n\t\n\t/**\n\t * Template object for the way in which DataTables holds information about\n\t * each individual row. This is the object format used for the settings\n\t * aoData array.\n\t *  @namespace\n\t */\n\tDataTable.models.oRow = {\n\t\t/**\n\t\t * TR element for the row\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTr\": null,\n\t\n\t\t/**\n\t\t * Array of TD elements for each row. This is null until the row has been\n\t\t * created.\n\t\t *  @type array nodes\n\t\t *  @default []\n\t\t */\n\t\t\"anCells\": null,\n\t\n\t\t/**\n\t\t * Data object from the original data source for the row. This is either\n\t\t * an array if using the traditional form of DataTables, or an object if\n\t\t * using mData options. The exact type will depend on the passed in\n\t\t * data from the data source, or will be an array if using DOM a data\n\t\t * source.\n\t\t *  @type array|object\n\t\t *  @default []\n\t\t */\n\t\t\"_aData\": [],\n\t\n\t\t/**\n\t\t * Sorting data cache - this array is ostensibly the same length as the\n\t\t * number of columns (although each index is generated only as it is\n\t\t * needed), and holds the data that is used for sorting each column in the\n\t\t * row. We do this cache generation at the start of the sort in order that\n\t\t * the formatting of the sort data need be done only once for each cell\n\t\t * per sort. This array should not be read from or written to by anything\n\t\t * other than the master sorting methods.\n\t\t *  @type array\n\t\t *  @default null\n\t\t *  @private\n\t\t */\n\t\t\"_aSortData\": null,\n\t\n\t\t/**\n\t\t * Per cell filtering data cache. As per the sort data cache, used to\n\t\t * increase the performance of the filtering in DataTables\n\t\t *  @type array\n\t\t *  @default null\n\t\t *  @private\n\t\t */\n\t\t\"_aFilterData\": null,\n\t\n\t\t/**\n\t\t * Filtering data cache. This is the same as the cell filtering cache, but\n\t\t * in this case a string rather than an array. This is easily computed with\n\t\t * a join on `_aFilterData`, but is provided as a cache so the join isn't\n\t\t * needed on every search (memory traded for performance)\n\t\t *  @type array\n\t\t *  @default null\n\t\t *  @private\n\t\t */\n\t\t\"_sFilterRow\": null,\n\t\n\t\t/**\n\t\t * Cache of the class name that DataTables has applied to the row, so we\n\t\t * can quickly look at this variable rather than needing to do a DOM check\n\t\t * on className for the nTr property.\n\t\t *  @type string\n\t\t *  @default <i>Empty string</i>\n\t\t *  @private\n\t\t */\n\t\t\"_sRowStripe\": \"\",\n\t\n\t\t/**\n\t\t * Denote if the original data source was from the DOM, or the data source\n\t\t * object. This is used for invalidating data, so DataTables can\n\t\t * automatically read data from the original source, unless uninstructed\n\t\t * otherwise.\n\t\t *  @type string\n\t\t *  @default null\n\t\t *  @private\n\t\t */\n\t\t\"src\": null\n\t};\n\t\n\t\n\t/**\n\t * Template object for the column information object in DataTables. This object\n\t * is held in the settings aoColumns array and contains all the information that\n\t * DataTables needs about each individual column.\n\t *\n\t * Note that this object is related to {@link DataTable.defaults.column}\n\t * but this one is the internal data store for DataTables's cache of columns.\n\t * It should NOT be manipulated outside of DataTables. Any configuration should\n\t * be done through the initialisation options.\n\t *  @namespace\n\t */\n\tDataTable.models.oColumn = {\n\t\t/**\n\t\t * Column index. This could be worked out on-the-fly with $.inArray, but it\n\t\t * is faster to just hold it as a variable\n\t\t *  @type integer\n\t\t *  @default null\n\t\t */\n\t\t\"idx\": null,\n\t\n\t\t/**\n\t\t * A list of the columns that sorting should occur on when this column\n\t\t * is sorted. That this property is an array allows multi-column sorting\n\t\t * to be defined for a column (for example first name / last name columns\n\t\t * would benefit from this). The values are integers pointing to the\n\t\t * columns to be sorted on (typically it will be a single integer pointing\n\t\t * at itself, but that doesn't need to be the case).\n\t\t *  @type array\n\t\t */\n\t\t\"aDataSort\": null,\n\t\n\t\t/**\n\t\t * Define the sorting directions that are applied to the column, in sequence\n\t\t * as the column is repeatedly sorted upon - i.e. the first value is used\n\t\t * as the sorting direction when the column if first sorted (clicked on).\n\t\t * Sort it again (click again) and it will move on to the next index.\n\t\t * Repeat until loop.\n\t\t *  @type array\n\t\t */\n\t\t\"asSorting\": null,\n\t\n\t\t/**\n\t\t * Flag to indicate if the column is searchable, and thus should be included\n\t\t * in the filtering or not.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bSearchable\": null,\n\t\n\t\t/**\n\t\t * Flag to indicate if the column is sortable or not.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bSortable\": null,\n\t\n\t\t/**\n\t\t * Flag to indicate if the column is currently visible in the table or not\n\t\t *  @type boolean\n\t\t */\n\t\t\"bVisible\": null,\n\t\n\t\t/**\n\t\t * Store for manual type assignment using the `column.type` option. This\n\t\t * is held in store so we can manipulate the column's `sType` property.\n\t\t *  @type string\n\t\t *  @default null\n\t\t *  @private\n\t\t */\n\t\t\"_sManualType\": null,\n\t\n\t\t/**\n\t\t * Flag to indicate if HTML5 data attributes should be used as the data\n\t\t * source for filtering or sorting. True is either are.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *  @private\n\t\t */\n\t\t\"_bAttrSrc\": false,\n\t\n\t\t/**\n\t\t * Developer definable function that is called whenever a cell is created (Ajax source,\n\t\t * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n\t\t * allowing you to modify the DOM element (add background colour for example) when the\n\t\t * element is available.\n\t\t *  @type function\n\t\t *  @param {element} nTd The TD node that has been created\n\t\t *  @param {*} sData The Data for the cell\n\t\t *  @param {array|object} oData The data for the whole row\n\t\t *  @param {int} iRow The row index for the aoData data store\n\t\t *  @default null\n\t\t */\n\t\t\"fnCreatedCell\": null,\n\t\n\t\t/**\n\t\t * Function to get data from a cell in a column. You should <b>never</b>\n\t\t * access data directly through _aData internally in DataTables - always use\n\t\t * the method attached to this property. It allows mData to function as\n\t\t * required. This function is automatically assigned by the column\n\t\t * initialisation method\n\t\t *  @type function\n\t\t *  @param {array|object} oData The data array/object for the array\n\t\t *    (i.e. aoData[]._aData)\n\t\t *  @param {string} sSpecific The specific data type you want to get -\n\t\t *    'display', 'type' 'filter' 'sort'\n\t\t *  @returns {*} The data for the cell from the given row's data\n\t\t *  @default null\n\t\t */\n\t\t\"fnGetData\": null,\n\t\n\t\t/**\n\t\t * Function to set data for a cell in the column. You should <b>never</b>\n\t\t * set the data directly to _aData internally in DataTables - always use\n\t\t * this method. It allows mData to function as required. This function\n\t\t * is automatically assigned by the column initialisation method\n\t\t *  @type function\n\t\t *  @param {array|object} oData The data array/object for the array\n\t\t *    (i.e. aoData[]._aData)\n\t\t *  @param {*} sValue Value to set\n\t\t *  @default null\n\t\t */\n\t\t\"fnSetData\": null,\n\t\n\t\t/**\n\t\t * Property to read the value for the cells in the column from the data\n\t\t * source array / object. If null, then the default content is used, if a\n\t\t * function is given then the return from the function is used.\n\t\t *  @type function|int|string|null\n\t\t *  @default null\n\t\t */\n\t\t\"mData\": null,\n\t\n\t\t/**\n\t\t * Partner property to mData which is used (only when defined) to get\n\t\t * the data - i.e. it is basically the same as mData, but without the\n\t\t * 'set' option, and also the data fed to it is the result from mData.\n\t\t * This is the rendering method to match the data method of mData.\n\t\t *  @type function|int|string|null\n\t\t *  @default null\n\t\t */\n\t\t\"mRender\": null,\n\t\n\t\t/**\n\t\t * Unique header TH/TD element for this column - this is what the sorting\n\t\t * listener is attached to (if sorting is enabled.)\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTh\": null,\n\t\n\t\t/**\n\t\t * Unique footer TH/TD element for this column (if there is one). Not used\n\t\t * in DataTables as such, but can be used for plug-ins to reference the\n\t\t * footer for each column.\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTf\": null,\n\t\n\t\t/**\n\t\t * The class to apply to all TD elements in the table's TBODY for the column\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sClass\": null,\n\t\n\t\t/**\n\t\t * When DataTables calculates the column widths to assign to each column,\n\t\t * it finds the longest string in each column and then constructs a\n\t\t * temporary table and reads the widths from that. The problem with this\n\t\t * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n\t\t * string - thus the calculation can go wrong (doing it properly and putting\n\t\t * it into an DOM object and measuring that is horribly(!) slow). Thus as\n\t\t * a \"work around\" we provide this option. It will append its value to the\n\t\t * text that is found to be the longest string for the column - i.e. padding.\n\t\t *  @type string\n\t\t */\n\t\t\"sContentPadding\": null,\n\t\n\t\t/**\n\t\t * Allows a default value to be given for a column's data, and will be used\n\t\t * whenever a null data source is encountered (this can be because mData\n\t\t * is set to null, or because the data source itself is null).\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sDefaultContent\": null,\n\t\n\t\t/**\n\t\t * Name for the column, allowing reference to the column by name as well as\n\t\t * by index (needs a lookup to work by name).\n\t\t *  @type string\n\t\t */\n\t\t\"sName\": null,\n\t\n\t\t/**\n\t\t * Custom sorting data type - defines which of the available plug-ins in\n\t\t * afnSortData the custom sorting will use - if any is defined.\n\t\t *  @type string\n\t\t *  @default std\n\t\t */\n\t\t\"sSortDataType\": 'std',\n\t\n\t\t/**\n\t\t * Class to be applied to the header element when sorting on this column\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sSortingClass\": null,\n\t\n\t\t/**\n\t\t * Class to be applied to the header element when sorting on this column -\n\t\t * when jQuery UI theming is used.\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sSortingClassJUI\": null,\n\t\n\t\t/**\n\t\t * Title of the column - what is seen in the TH element (nTh).\n\t\t *  @type string\n\t\t */\n\t\t\"sTitle\": null,\n\t\n\t\t/**\n\t\t * Column sorting and filtering type\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sType\": null,\n\t\n\t\t/**\n\t\t * Width of the column\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sWidth\": null,\n\t\n\t\t/**\n\t\t * Width of the column when it was first \"encountered\"\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sWidthOrig\": null\n\t};\n\t\n\t\n\t/*\n\t * Developer note: The properties of the object below are given in Hungarian\n\t * notation, that was used as the interface for DataTables prior to v1.10, however\n\t * from v1.10 onwards the primary interface is camel case. In order to avoid\n\t * breaking backwards compatibility utterly with this change, the Hungarian\n\t * version is still, internally the primary interface, but is is not documented\n\t * - hence the @name tags in each doc comment. This allows a Javascript function\n\t * to create a map from Hungarian notation to camel case (going the other direction\n\t * would require each property to be listed, which would at around 3K to the size\n\t * of DataTables, while this method is about a 0.5K hit.\n\t *\n\t * Ultimately this does pave the way for Hungarian notation to be dropped\n\t * completely, but that is a massive amount of work and will break current\n\t * installs (therefore is on-hold until v2).\n\t */\n\t\n\t/**\n\t * Initialisation options that can be given to DataTables at initialisation\n\t * time.\n\t *  @namespace\n\t */\n\tDataTable.defaults = {\n\t\t/**\n\t\t * An array of data to use for the table, passed in at initialisation which\n\t\t * will be used in preference to any data which is already in the DOM. This is\n\t\t * particularly useful for constructing tables purely in Javascript, for\n\t\t * example with a custom Ajax call.\n\t\t *  @type array\n\t\t *  @default null\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.data\n\t\t *\n\t\t *  @example\n\t\t *    // Using a 2D array data source\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"data\": [\n\t\t *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],\n\t\t *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],\n\t\t *        ],\n\t\t *        \"columns\": [\n\t\t *          { \"title\": \"Engine\" },\n\t\t *          { \"title\": \"Browser\" },\n\t\t *          { \"title\": \"Platform\" },\n\t\t *          { \"title\": \"Version\" },\n\t\t *          { \"title\": \"Grade\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using an array of objects as a data source (`data`)\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"data\": [\n\t\t *          {\n\t\t *            \"engine\":   \"Trident\",\n\t\t *            \"browser\":  \"Internet Explorer 4.0\",\n\t\t *            \"platform\": \"Win 95+\",\n\t\t *            \"version\":  4,\n\t\t *            \"grade\":    \"X\"\n\t\t *          },\n\t\t *          {\n\t\t *            \"engine\":   \"Trident\",\n\t\t *            \"browser\":  \"Internet Explorer 5.0\",\n\t\t *            \"platform\": \"Win 95+\",\n\t\t *            \"version\":  5,\n\t\t *            \"grade\":    \"C\"\n\t\t *          }\n\t\t *        ],\n\t\t *        \"columns\": [\n\t\t *          { \"title\": \"Engine\",   \"data\": \"engine\" },\n\t\t *          { \"title\": \"Browser\",  \"data\": \"browser\" },\n\t\t *          { \"title\": \"Platform\", \"data\": \"platform\" },\n\t\t *          { \"title\": \"Version\",  \"data\": \"version\" },\n\t\t *          { \"title\": \"Grade\",    \"data\": \"grade\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"aaData\": null,\n\t\n\t\n\t\t/**\n\t\t * If ordering is enabled, then DataTables will perform a first pass sort on\n\t\t * initialisation. You can define which column(s) the sort is performed\n\t\t * upon, and the sorting direction, with this variable. The `sorting` array\n\t\t * should contain an array for each column to be sorted initially containing\n\t\t * the column's index and a direction string ('asc' or 'desc').\n\t\t *  @type array\n\t\t *  @default [[0,'asc']]\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.order\n\t\t *\n\t\t *  @example\n\t\t *    // Sort by 3rd column first, and then 4th column\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"order\": [[2,'asc'], [3,'desc']]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *    // No initial sorting\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"order\": []\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"aaSorting\": [[0,'asc']],\n\t\n\t\n\t\t/**\n\t\t * This parameter is basically identical to the `sorting` parameter, but\n\t\t * cannot be overridden by user interaction with the table. What this means\n\t\t * is that you could have a column (visible or hidden) which the sorting\n\t\t * will always be forced on first - any sorting after that (from the user)\n\t\t * will then be performed as required. This can be useful for grouping rows\n\t\t * together.\n\t\t *  @type array\n\t\t *  @default null\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.orderFixed\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"orderFixed\": [[0,'asc']]\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"aaSortingFixed\": [],\n\t\n\t\n\t\t/**\n\t\t * DataTables can be instructed to load data to display in the table from a\n\t\t * Ajax source. This option defines how that Ajax call is made and where to.\n\t\t *\n\t\t * The `ajax` property has three different modes of operation, depending on\n\t\t * how it is defined. These are:\n\t\t *\n\t\t * * `string` - Set the URL from where the data should be loaded from.\n\t\t * * `object` - Define properties for `jQuery.ajax`.\n\t\t * * `function` - Custom data get function\n\t\t *\n\t\t * `string`\n\t\t * --------\n\t\t *\n\t\t * As a string, the `ajax` property simply defines the URL from which\n\t\t * DataTables will load data.\n\t\t *\n\t\t * `object`\n\t\t * --------\n\t\t *\n\t\t * As an object, the parameters in the object are passed to\n\t\t * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control\n\t\t * of the Ajax request. DataTables has a number of default parameters which\n\t\t * you can override using this option. Please refer to the jQuery\n\t\t * documentation for a full description of the options available, although\n\t\t * the following parameters provide additional options in DataTables or\n\t\t * require special consideration:\n\t\t *\n\t\t * * `data` - As with jQuery, `data` can be provided as an object, but it\n\t\t *   can also be used as a function to manipulate the data DataTables sends\n\t\t *   to the server. The function takes a single parameter, an object of\n\t\t *   parameters with the values that DataTables has readied for sending. An\n\t\t *   object may be returned which will be merged into the DataTables\n\t\t *   defaults, or you can add the items to the object that was passed in and\n\t\t *   not return anything from the function. This supersedes `fnServerParams`\n\t\t *   from DataTables 1.9-.\n\t\t *\n\t\t * * `dataSrc` - By default DataTables will look for the property `data` (or\n\t\t *   `aaData` for compatibility with DataTables 1.9-) when obtaining data\n\t\t *   from an Ajax source or for server-side processing - this parameter\n\t\t *   allows that property to be changed. You can use Javascript dotted\n\t\t *   object notation to get a data source for multiple levels of nesting, or\n\t\t *   it my be used as a function. As a function it takes a single parameter,\n\t\t *   the JSON returned from the server, which can be manipulated as\n\t\t *   required, with the returned value being that used by DataTables as the\n\t\t *   data source for the table. This supersedes `sAjaxDataProp` from\n\t\t *   DataTables 1.9-.\n\t\t *\n\t\t * * `success` - Should not be overridden it is used internally in\n\t\t *   DataTables. To manipulate / transform the data returned by the server\n\t\t *   use `ajax.dataSrc`, or use `ajax` as a function (see below).\n\t\t *\n\t\t * `function`\n\t\t * ----------\n\t\t *\n\t\t * As a function, making the Ajax call is left up to yourself allowing\n\t\t * complete control of the Ajax request. Indeed, if desired, a method other\n\t\t * than Ajax could be used to obtain the required data, such as Web storage\n\t\t * or an AIR database.\n\t\t *\n\t\t * The function is given four parameters and no return is required. The\n\t\t * parameters are:\n\t\t *\n\t\t * 1. _object_ - Data to send to the server\n\t\t * 2. _function_ - Callback function that must be executed when the required\n\t\t *    data has been obtained. That data should be passed into the callback\n\t\t *    as the only parameter\n\t\t * 3. _object_ - DataTables settings object for the table\n\t\t *\n\t\t * Note that this supersedes `fnServerData` from DataTables 1.9-.\n\t\t *\n\t\t *  @type string|object|function\n\t\t *  @default null\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.ajax\n\t\t *  @since 1.10.0\n\t\t *\n\t\t * @example\n\t\t *   // Get JSON data from a file via Ajax.\n\t\t *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": \"data.json\"\n\t\t *   } );\n\t\t *\n\t\t * @example\n\t\t *   // Get JSON data from a file via Ajax, using `dataSrc` to change\n\t\t *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": {\n\t\t *       \"url\": \"data.json\",\n\t\t *       \"dataSrc\": \"tableData\"\n\t\t *     }\n\t\t *   } );\n\t\t *\n\t\t * @example\n\t\t *   // Get JSON data from a file via Ajax, using `dataSrc` to read data\n\t\t *   // from a plain array rather than an array in an object\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": {\n\t\t *       \"url\": \"data.json\",\n\t\t *       \"dataSrc\": \"\"\n\t\t *     }\n\t\t *   } );\n\t\t *\n\t\t * @example\n\t\t *   // Manipulate the data returned from the server - add a link to data\n\t\t *   // (note this can, should, be done using `render` for the column - this\n\t\t *   // is just a simple example of how the data can be manipulated).\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": {\n\t\t *       \"url\": \"data.json\",\n\t\t *       \"dataSrc\": function ( json ) {\n\t\t *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {\n\t\t *           json[i][0] = '<a href=\"/message/'+json[i][0]+'>View message</a>';\n\t\t *         }\n\t\t *         return json;\n\t\t *       }\n\t\t *     }\n\t\t *   } );\n\t\t *\n\t\t * @example\n\t\t *   // Add data to the request\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": {\n\t\t *       \"url\": \"data.json\",\n\t\t *       \"data\": function ( d ) {\n\t\t *         return {\n\t\t *           \"extra_search\": $('#extra').val()\n\t\t *         };\n\t\t *       }\n\t\t *     }\n\t\t *   } );\n\t\t *\n\t\t * @example\n\t\t *   // Send request as POST\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": {\n\t\t *       \"url\": \"data.json\",\n\t\t *       \"type\": \"POST\"\n\t\t *     }\n\t\t *   } );\n\t\t *\n\t\t * @example\n\t\t *   // Get the data from localStorage (could interface with a form for\n\t\t *   // adding, editing and removing rows).\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": function (data, callback, settings) {\n\t\t *       callback(\n\t\t *         JSON.parse( localStorage.getItem('dataTablesData') )\n\t\t *       );\n\t\t *     }\n\t\t *   } );\n\t\t */\n\t\t\"ajax\": null,\n\t\n\t\n\t\t/**\n\t\t * This parameter allows you to readily specify the entries in the length drop\n\t\t * down menu that DataTables shows when pagination is enabled. It can be\n\t\t * either a 1D array of options which will be used for both the displayed\n\t\t * option and the value, or a 2D array which will use the array in the first\n\t\t * position as the value, and the array in the second position as the\n\t\t * displayed options (useful for language strings such as 'All').\n\t\t *\n\t\t * Note that the `pageLength` property will be automatically set to the\n\t\t * first value given in this array, unless `pageLength` is also provided.\n\t\t *  @type array\n\t\t *  @default [ 10, 25, 50, 100 ]\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.lengthMenu\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"lengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"aLengthMenu\": [ 10, 25, 50, 100 ],\n\t\n\t\n\t\t/**\n\t\t * The `columns` option in the initialisation parameter allows you to define\n\t\t * details about the way individual columns behave. For a full list of\n\t\t * column options that can be set, please see\n\t\t * {@link DataTable.defaults.column}. Note that if you use `columns` to\n\t\t * define your columns, you must have an entry in the array for every single\n\t\t * column that you have in your table (these can be null if you don't which\n\t\t * to specify any options).\n\t\t *  @member\n\t\t *\n\t\t *  @name DataTable.defaults.column\n\t\t */\n\t\t\"aoColumns\": null,\n\t\n\t\t/**\n\t\t * Very similar to `columns`, `columnDefs` allows you to target a specific\n\t\t * column, multiple columns, or all columns, using the `targets` property of\n\t\t * each object in the array. This allows great flexibility when creating\n\t\t * tables, as the `columnDefs` arrays can be of any length, targeting the\n\t\t * columns you specifically want. `columnDefs` may use any of the column\n\t\t * options available: {@link DataTable.defaults.column}, but it _must_\n\t\t * have `targets` defined in each object in the array. Values in the `targets`\n\t\t * array may be:\n\t\t *   <ul>\n\t\t *     <li>a string - class name will be matched on the TH for the column</li>\n\t\t *     <li>0 or a positive integer - column index counting from the left</li>\n\t\t *     <li>a negative integer - column index counting from the right</li>\n\t\t *     <li>the string \"_all\" - all columns (i.e. assign a default)</li>\n\t\t *   </ul>\n\t\t *  @member\n\t\t *\n\t\t *  @name DataTable.defaults.columnDefs\n\t\t */\n\t\t\"aoColumnDefs\": null,\n\t\n\t\n\t\t/**\n\t\t * Basically the same as `search`, this parameter defines the individual column\n\t\t * filtering state at initialisation time. The array must be of the same size\n\t\t * as the number of columns, and each element be an object with the parameters\n\t\t * `search` and `escapeRegex` (the latter is optional). 'null' is also\n\t\t * accepted and the default will be used.\n\t\t *  @type array\n\t\t *  @default []\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.searchCols\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"searchCols\": [\n\t\t *          null,\n\t\t *          { \"search\": \"My filter\" },\n\t\t *          null,\n\t\t *          { \"search\": \"^[0-9]\", \"escapeRegex\": false }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"aoSearchCols\": [],\n\t\n\t\n\t\t/**\n\t\t * An array of CSS classes that should be applied to displayed rows. This\n\t\t * array may be of any length, and DataTables will apply each class\n\t\t * sequentially, looping when required.\n\t\t *  @type array\n\t\t *  @default null <i>Will take the values determined by the `oClasses.stripe*`\n\t\t *    options</i>\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.stripeClasses\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stripeClasses\": [ 'strip1', 'strip2', 'strip3' ]\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"asStripeClasses\": null,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable automatic column width calculation. This can be disabled\n\t\t * as an optimisation (it takes some time to calculate the widths) if the\n\t\t * tables widths are passed in using `columns`.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.autoWidth\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"autoWidth\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bAutoWidth\": true,\n\t\n\t\n\t\t/**\n\t\t * Deferred rendering can provide DataTables with a huge speed boost when you\n\t\t * are using an Ajax or JS data source for the table. This option, when set to\n\t\t * true, will cause DataTables to defer the creation of the table elements for\n\t\t * each row until they are needed for a draw - saving a significant amount of\n\t\t * time.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.deferRender\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"ajax\": \"sources/arrays.txt\",\n\t\t *        \"deferRender\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bDeferRender\": false,\n\t\n\t\n\t\t/**\n\t\t * Replace a DataTable which matches the given selector and replace it with\n\t\t * one which has the properties of the new initialisation object passed. If no\n\t\t * table matches the selector, then the new DataTable will be constructed as\n\t\t * per normal.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.destroy\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"srollY\": \"200px\",\n\t\t *        \"paginate\": false\n\t\t *      } );\n\t\t *\n\t\t *      // Some time later....\n\t\t *      $('#example').dataTable( {\n\t\t *        \"filter\": false,\n\t\t *        \"destroy\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bDestroy\": false,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable filtering of data. Filtering in DataTables is \"smart\" in\n\t\t * that it allows the end user to input multiple words (space separated) and\n\t\t * will match a row containing those words, even if not in the order that was\n\t\t * specified (this allow matching across multiple columns). Note that if you\n\t\t * wish to use filtering in DataTables this must remain 'true' - to remove the\n\t\t * default filtering input box and retain filtering abilities, please use\n\t\t * {@link DataTable.defaults.dom}.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.searching\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"searching\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bFilter\": true,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable the table information display. This shows information\n\t\t * about the data that is currently visible on the page, including information\n\t\t * about filtered data if that action is being performed.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.info\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"info\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bInfo\": true,\n\t\n\t\n\t\t/**\n\t\t * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some\n\t\t * slightly different and additional mark-up from what DataTables has\n\t\t * traditionally used).\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.jQueryUI\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"jQueryUI\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bJQueryUI\": false,\n\t\n\t\n\t\t/**\n\t\t * Allows the end user to select the size of a formatted page from a select\n\t\t * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.lengthChange\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"lengthChange\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bLengthChange\": true,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable pagination.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.paging\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"paging\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bPaginate\": true,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable the display of a 'processing' indicator when the table is\n\t\t * being processed (e.g. a sort). This is particularly useful for tables with\n\t\t * large amounts of data where it can take a noticeable amount of time to sort\n\t\t * the entries.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.processing\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"processing\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bProcessing\": false,\n\t\n\t\n\t\t/**\n\t\t * Retrieve the DataTables object for the given selector. Note that if the\n\t\t * table has already been initialised, this parameter will cause DataTables\n\t\t * to simply return the object that has already been set up - it will not take\n\t\t * account of any changes you might have made to the initialisation object\n\t\t * passed to DataTables (setting this parameter to true is an acknowledgement\n\t\t * that you understand this). `destroy` can be used to reinitialise a table if\n\t\t * you need.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.retrieve\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      initTable();\n\t\t *      tableActions();\n\t\t *    } );\n\t\t *\n\t\t *    function initTable ()\n\t\t *    {\n\t\t *      return $('#example').dataTable( {\n\t\t *        \"scrollY\": \"200px\",\n\t\t *        \"paginate\": false,\n\t\t *        \"retrieve\": true\n\t\t *      } );\n\t\t *    }\n\t\t *\n\t\t *    function tableActions ()\n\t\t *    {\n\t\t *      var table = initTable();\n\t\t *      // perform API operations with oTable\n\t\t *    }\n\t\t */\n\t\t\"bRetrieve\": false,\n\t\n\t\n\t\t/**\n\t\t * When vertical (y) scrolling is enabled, DataTables will force the height of\n\t\t * the table's viewport to the given height at all times (useful for layout).\n\t\t * However, this can look odd when filtering data down to a small data set,\n\t\t * and the footer is left \"floating\" further down. This parameter (when\n\t\t * enabled) will cause DataTables to collapse the table's viewport down when\n\t\t * the result set will fit within the given Y height.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.scrollCollapse\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"scrollY\": \"200\",\n\t\t *        \"scrollCollapse\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bScrollCollapse\": false,\n\t\n\t\n\t\t/**\n\t\t * Configure DataTables to use server-side processing. Note that the\n\t\t * `ajax` parameter must also be given in order to give DataTables a\n\t\t * source to obtain the required data for each draw.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @dtopt Server-side\n\t\t *  @name DataTable.defaults.serverSide\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"serverSide\": true,\n\t\t *        \"ajax\": \"xhr.php\"\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bServerSide\": false,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable sorting of columns. Sorting of individual columns can be\n\t\t * disabled by the `sortable` option for each column.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.ordering\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"ordering\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bSort\": true,\n\t\n\t\n\t\t/**\n\t\t * Enable or display DataTables' ability to sort multiple columns at the\n\t\t * same time (activated by shift-click by the user).\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.orderMulti\n\t\t *\n\t\t *  @example\n\t\t *    // Disable multiple column sorting ability\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"orderMulti\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bSortMulti\": true,\n\t\n\t\n\t\t/**\n\t\t * Allows control over whether DataTables should use the top (true) unique\n\t\t * cell that is found for a single column, or the bottom (false - default).\n\t\t * This is useful when using complex headers.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.orderCellsTop\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"orderCellsTop\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bSortCellsTop\": false,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable the addition of the classes `sorting\\_1`, `sorting\\_2` and\n\t\t * `sorting\\_3` to the columns which are currently being sorted on. This is\n\t\t * presented as a feature switch as it can increase processing time (while\n\t\t * classes are removed and added) so for large data sets you might want to\n\t\t * turn this off.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.orderClasses\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"orderClasses\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bSortClasses\": true,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable state saving. When enabled HTML5 `localStorage` will be\n\t\t * used to save table display information such as pagination information,\n\t\t * display length, filtering and sorting. As such when the end user reloads\n\t\t * the page the display display will match what thy had previously set up.\n\t\t *\n\t\t * Due to the use of `localStorage` the default state saving is not supported\n\t\t * in IE6 or 7. If state saving is required in those browsers, use\n\t\t * `stateSaveCallback` to provide a storage solution such as cookies.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.stateSave\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bStateSave\": false,\n\t\n\t\n\t\t/**\n\t\t * This function is called when a TR element is created (and all TD child\n\t\t * elements have been inserted), or registered if using a DOM source, allowing\n\t\t * manipulation of the TR element (adding classes etc).\n\t\t *  @type function\n\t\t *  @param {node} row \"TR\" element for the current row\n\t\t *  @param {array} data Raw data array for this row\n\t\t *  @param {int} dataIndex The index of this row in the internal aoData array\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.createdRow\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"createdRow\": function( row, data, dataIndex ) {\n\t\t *          // Bold the grade for all 'A' grade browsers\n\t\t *          if ( data[4] == \"A\" )\n\t\t *          {\n\t\t *            $('td:eq(4)', row).html( '<b>A</b>' );\n\t\t *          }\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnCreatedRow\": null,\n\t\n\t\n\t\t/**\n\t\t * This function is called on every 'draw' event, and allows you to\n\t\t * dynamically modify any aspect you want about the created DOM.\n\t\t *  @type function\n\t\t *  @param {object} settings DataTables settings object\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.drawCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"drawCallback\": function( settings ) {\n\t\t *          alert( 'DataTables has redrawn the table' );\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnDrawCallback\": null,\n\t\n\t\n\t\t/**\n\t\t * Identical to fnHeaderCallback() but for the table footer this function\n\t\t * allows you to modify the table footer on every 'draw' event.\n\t\t *  @type function\n\t\t *  @param {node} foot \"TR\" element for the footer\n\t\t *  @param {array} data Full table data (as derived from the original HTML)\n\t\t *  @param {int} start Index for the current display starting point in the\n\t\t *    display array\n\t\t *  @param {int} end Index for the current display ending point in the\n\t\t *    display array\n\t\t *  @param {array int} display Index array to translate the visual position\n\t\t *    to the full data array\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.footerCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"footerCallback\": function( tfoot, data, start, end, display ) {\n\t\t *          tfoot.getElementsByTagName('th')[0].innerHTML = \"Starting index is \"+start;\n\t\t *        }\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"fnFooterCallback\": null,\n\t\n\t\n\t\t/**\n\t\t * When rendering large numbers in the information element for the table\n\t\t * (i.e. \"Showing 1 to 10 of 57 entries\") DataTables will render large numbers\n\t\t * to have a comma separator for the 'thousands' units (e.g. 1 million is\n\t\t * rendered as \"1,000,000\") to help readability for the end user. This\n\t\t * function will override the default method DataTables uses.\n\t\t *  @type function\n\t\t *  @member\n\t\t *  @param {int} toFormat number to be formatted\n\t\t *  @returns {string} formatted string for DataTables to show the number\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.formatNumber\n\t\t *\n\t\t *  @example\n\t\t *    // Format a number using a single quote for the separator (note that\n\t\t *    // this can also be done with the language.thousands option)\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"formatNumber\": function ( toFormat ) {\n\t\t *          return toFormat.toString().replace(\n\t\t *            /\\B(?=(\\d{3})+(?!\\d))/g, \"'\"\n\t\t *          );\n\t\t *        };\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnFormatNumber\": function ( toFormat ) {\n\t\t\treturn toFormat.toString().replace(\n\t\t\t\t/\\B(?=(\\d{3})+(?!\\d))/g,\n\t\t\t\tthis.oLanguage.sThousands\n\t\t\t);\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * This function is called on every 'draw' event, and allows you to\n\t\t * dynamically modify the header row. This can be used to calculate and\n\t\t * display useful information about the table.\n\t\t *  @type function\n\t\t *  @param {node} head \"TR\" element for the header\n\t\t *  @param {array} data Full table data (as derived from the original HTML)\n\t\t *  @param {int} start Index for the current display starting point in the\n\t\t *    display array\n\t\t *  @param {int} end Index for the current display ending point in the\n\t\t *    display array\n\t\t *  @param {array int} display Index array to translate the visual position\n\t\t *    to the full data array\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.headerCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"fheaderCallback\": function( head, data, start, end, display ) {\n\t\t *          head.getElementsByTagName('th')[0].innerHTML = \"Displaying \"+(end-start)+\" records\";\n\t\t *        }\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"fnHeaderCallback\": null,\n\t\n\t\n\t\t/**\n\t\t * The information element can be used to convey information about the current\n\t\t * state of the table. Although the internationalisation options presented by\n\t\t * DataTables are quite capable of dealing with most customisations, there may\n\t\t * be times where you wish to customise the string further. This callback\n\t\t * allows you to do exactly that.\n\t\t *  @type function\n\t\t *  @param {object} oSettings DataTables settings object\n\t\t *  @param {int} start Starting position in data for the draw\n\t\t *  @param {int} end End position in data for the draw\n\t\t *  @param {int} max Total number of rows in the table (regardless of\n\t\t *    filtering)\n\t\t *  @param {int} total Total number of rows in the data set, after filtering\n\t\t *  @param {string} pre The string that DataTables has formatted using it's\n\t\t *    own rules\n\t\t *  @returns {string} The string to be displayed in the information element.\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.infoCallback\n\t\t *\n\t\t *  @example\n\t\t *    $('#example').dataTable( {\n\t\t *      \"infoCallback\": function( settings, start, end, max, total, pre ) {\n\t\t *        return start +\" to \"+ end;\n\t\t *      }\n\t\t *    } );\n\t\t */\n\t\t\"fnInfoCallback\": null,\n\t\n\t\n\t\t/**\n\t\t * Called when the table has been initialised. Normally DataTables will\n\t\t * initialise sequentially and there will be no need for this function,\n\t\t * however, this does not hold true when using external language information\n\t\t * since that is obtained using an async XHR call.\n\t\t *  @type function\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @param {object} json The JSON object request from the server - only\n\t\t *    present if client-side Ajax sourced data is used\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.initComplete\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"initComplete\": function(settings, json) {\n\t\t *          alert( 'DataTables has finished its initialisation.' );\n\t\t *        }\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"fnInitComplete\": null,\n\t\n\t\n\t\t/**\n\t\t * Called at the very start of each table draw and can be used to cancel the\n\t\t * draw by returning false, any other return (including undefined) results in\n\t\t * the full draw occurring).\n\t\t *  @type function\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @returns {boolean} False will cancel the draw, anything else (including no\n\t\t *    return) will allow it to complete.\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.preDrawCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"preDrawCallback\": function( settings ) {\n\t\t *          if ( $('#test').val() == 1 ) {\n\t\t *            return false;\n\t\t *          }\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnPreDrawCallback\": null,\n\t\n\t\n\t\t/**\n\t\t * This function allows you to 'post process' each row after it have been\n\t\t * generated for each table draw, but before it is rendered on screen. This\n\t\t * function might be used for setting the row class name etc.\n\t\t *  @type function\n\t\t *  @param {node} row \"TR\" element for the current row\n\t\t *  @param {array} data Raw data array for this row\n\t\t *  @param {int} displayIndex The display index for the current table draw\n\t\t *  @param {int} displayIndexFull The index of the data in the full list of\n\t\t *    rows (after filtering)\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.rowCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"rowCallback\": function( row, data, displayIndex, displayIndexFull ) {\n\t\t *          // Bold the grade for all 'A' grade browsers\n\t\t *          if ( data[4] == \"A\" ) {\n\t\t *            $('td:eq(4)', row).html( '<b>A</b>' );\n\t\t *          }\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnRowCallback\": null,\n\t\n\t\n\t\t/**\n\t\t * __Deprecated__ The functionality provided by this parameter has now been\n\t\t * superseded by that provided through `ajax`, which should be used instead.\n\t\t *\n\t\t * This parameter allows you to override the default function which obtains\n\t\t * the data from the server so something more suitable for your application.\n\t\t * For example you could use POST data, or pull information from a Gears or\n\t\t * AIR database.\n\t\t *  @type function\n\t\t *  @member\n\t\t *  @param {string} source HTTP source to obtain the data from (`ajax`)\n\t\t *  @param {array} data A key/value pair object containing the data to send\n\t\t *    to the server\n\t\t *  @param {function} callback to be called on completion of the data get\n\t\t *    process that will draw the data on the page.\n\t\t *  @param {object} settings DataTables settings object\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @dtopt Server-side\n\t\t *  @name DataTable.defaults.serverData\n\t\t *\n\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\n\t\t */\n\t\t\"fnServerData\": null,\n\t\n\t\n\t\t/**\n\t\t * __Deprecated__ The functionality provided by this parameter has now been\n\t\t * superseded by that provided through `ajax`, which should be used instead.\n\t\t *\n\t\t *  It is often useful to send extra data to the server when making an Ajax\n\t\t * request - for example custom filtering information, and this callback\n\t\t * function makes it trivial to send extra information to the server. The\n\t\t * passed in parameter is the data set that has been constructed by\n\t\t * DataTables, and you can add to this or modify it as you require.\n\t\t *  @type function\n\t\t *  @param {array} data Data array (array of objects which are name/value\n\t\t *    pairs) that has been constructed by DataTables and will be sent to the\n\t\t *    server. In the case of Ajax sourced data with server-side processing\n\t\t *    this will be an empty array, for server-side processing there will be a\n\t\t *    significant number of parameters!\n\t\t *  @returns {undefined} Ensure that you modify the data array passed in,\n\t\t *    as this is passed by reference.\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @dtopt Server-side\n\t\t *  @name DataTable.defaults.serverParams\n\t\t *\n\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\n\t\t */\n\t\t\"fnServerParams\": null,\n\t\n\t\n\t\t/**\n\t\t * Load the table state. With this function you can define from where, and how, the\n\t\t * state of a table is loaded. By default DataTables will load from `localStorage`\n\t\t * but you might wish to use a server-side database or cookies.\n\t\t *  @type function\n\t\t *  @member\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @return {object} The DataTables state object to be loaded\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.stateLoadCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateLoadCallback\": function (settings) {\n\t\t *          var o;\n\t\t *\n\t\t *          // Send an Ajax request to the server to get the data. Note that\n\t\t *          // this is a synchronous request.\n\t\t *          $.ajax( {\n\t\t *            \"url\": \"/state_load\",\n\t\t *            \"async\": false,\n\t\t *            \"dataType\": \"json\",\n\t\t *            \"success\": function (json) {\n\t\t *              o = json;\n\t\t *            }\n\t\t *          } );\n\t\t *\n\t\t *          return o;\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnStateLoadCallback\": function ( settings ) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(\n\t\t\t\t\t(settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(\n\t\t\t\t\t\t'DataTables_'+settings.sInstance+'_'+location.pathname\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} catch (e) {}\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * Callback which allows modification of the saved state prior to loading that state.\n\t\t * This callback is called when the table is loading state from the stored data, but\n\t\t * prior to the settings object being modified by the saved state. Note that for\n\t\t * plug-in authors, you should use the `stateLoadParams` event to load parameters for\n\t\t * a plug-in.\n\t\t *  @type function\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @param {object} data The state object that is to be loaded\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.stateLoadParams\n\t\t *\n\t\t *  @example\n\t\t *    // Remove a saved filter, so filtering is never loaded\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateLoadParams\": function (settings, data) {\n\t\t *          data.oSearch.sSearch = \"\";\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Disallow state loading by returning false\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateLoadParams\": function (settings, data) {\n\t\t *          return false;\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnStateLoadParams\": null,\n\t\n\t\n\t\t/**\n\t\t * Callback that is called when the state has been loaded from the state saving method\n\t\t * and the DataTables settings object has been modified as a result of the loaded state.\n\t\t *  @type function\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @param {object} data The state object that was loaded\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.stateLoaded\n\t\t *\n\t\t *  @example\n\t\t *    // Show an alert with the filtering value that was saved\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateLoaded\": function (settings, data) {\n\t\t *          alert( 'Saved filter was: '+data.oSearch.sSearch );\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnStateLoaded\": null,\n\t\n\t\n\t\t/**\n\t\t * Save the table state. This function allows you to define where and how the state\n\t\t * information for the table is stored By default DataTables will use `localStorage`\n\t\t * but you might wish to use a server-side database or cookies.\n\t\t *  @type function\n\t\t *  @member\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @param {object} data The state object to be saved\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.stateSaveCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateSaveCallback\": function (settings, data) {\n\t\t *          // Send an Ajax request to the server with the state object\n\t\t *          $.ajax( {\n\t\t *            \"url\": \"/state_save\",\n\t\t *            \"data\": data,\n\t\t *            \"dataType\": \"json\",\n\t\t *            \"method\": \"POST\"\n\t\t *            \"success\": function () {}\n\t\t *          } );\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnStateSaveCallback\": function ( settings, data ) {\n\t\t\ttry {\n\t\t\t\t(settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(\n\t\t\t\t\t'DataTables_'+settings.sInstance+'_'+location.pathname,\n\t\t\t\t\tJSON.stringify( data )\n\t\t\t\t);\n\t\t\t} catch (e) {}\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * Callback which allows modification of the state to be saved. Called when the table\n\t\t * has changed state a new state save is required. This method allows modification of\n\t\t * the state saving object prior to actually doing the save, including addition or\n\t\t * other state properties or modification. Note that for plug-in authors, you should\n\t\t * use the `stateSaveParams` event to save parameters for a plug-in.\n\t\t *  @type function\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @param {object} data The state object to be saved\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.stateSaveParams\n\t\t *\n\t\t *  @example\n\t\t *    // Remove a saved filter, so filtering is never saved\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateSaveParams\": function (settings, data) {\n\t\t *          data.oSearch.sSearch = \"\";\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnStateSaveParams\": null,\n\t\n\t\n\t\t/**\n\t\t * Duration for which the saved state information is considered valid. After this period\n\t\t * has elapsed the state will be returned to the default.\n\t\t * Value is given in seconds.\n\t\t *  @type int\n\t\t *  @default 7200 <i>(2 hours)</i>\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.stateDuration\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateDuration\": 60*60*24; // 1 day\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"iStateDuration\": 7200,\n\t\n\t\n\t\t/**\n\t\t * When enabled DataTables will not make a request to the server for the first\n\t\t * page draw - rather it will use the data already on the page (no sorting etc\n\t\t * will be applied to it), thus saving on an XHR at load time. `deferLoading`\n\t\t * is used to indicate that deferred loading is required, but it is also used\n\t\t * to tell DataTables how many records there are in the full table (allowing\n\t\t * the information element and pagination to be displayed correctly). In the case\n\t\t * where a filtering is applied to the table on initial load, this can be\n\t\t * indicated by giving the parameter as an array, where the first element is\n\t\t * the number of records available after filtering and the second element is the\n\t\t * number of records without filtering (allowing the table information element\n\t\t * to be shown correctly).\n\t\t *  @type int | array\n\t\t *  @default null\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.deferLoading\n\t\t *\n\t\t *  @example\n\t\t *    // 57 records available in the table, no filtering applied\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"serverSide\": true,\n\t\t *        \"ajax\": \"scripts/server_processing.php\",\n\t\t *        \"deferLoading\": 57\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // 57 records after filtering, 100 without filtering (an initial filter applied)\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"serverSide\": true,\n\t\t *        \"ajax\": \"scripts/server_processing.php\",\n\t\t *        \"deferLoading\": [ 57, 100 ],\n\t\t *        \"search\": {\n\t\t *          \"search\": \"my_filter\"\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"iDeferLoading\": null,\n\t\n\t\n\t\t/**\n\t\t * Number of rows to display on a single page when using pagination. If\n\t\t * feature enabled (`lengthChange`) then the end user will be able to override\n\t\t * this to a custom setting using a pop-up menu.\n\t\t *  @type int\n\t\t *  @default 10\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.pageLength\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"pageLength\": 50\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"iDisplayLength\": 10,\n\t\n\t\n\t\t/**\n\t\t * Define the starting point for data display when using DataTables with\n\t\t * pagination. Note that this parameter is the number of records, rather than\n\t\t * the page number, so if you have 10 records per page and want to start on\n\t\t * the third page, it should be \"20\".\n\t\t *  @type int\n\t\t *  @default 0\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.displayStart\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"displayStart\": 20\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"iDisplayStart\": 0,\n\t\n\t\n\t\t/**\n\t\t * By default DataTables allows keyboard navigation of the table (sorting, paging,\n\t\t * and filtering) by adding a `tabindex` attribute to the required elements. This\n\t\t * allows you to tab through the controls and press the enter key to activate them.\n\t\t * The tabindex is default 0, meaning that the tab follows the flow of the document.\n\t\t * You can overrule this using this parameter if you wish. Use a value of -1 to\n\t\t * disable built-in keyboard navigation.\n\t\t *  @type int\n\t\t *  @default 0\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.tabIndex\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"tabIndex\": 1\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"iTabIndex\": 0,\n\t\n\t\n\t\t/**\n\t\t * Classes that DataTables assigns to the various components and features\n\t\t * that it adds to the HTML table. This allows classes to be configured\n\t\t * during initialisation in addition to through the static\n\t\t * {@link DataTable.ext.oStdClasses} object).\n\t\t *  @namespace\n\t\t *  @name DataTable.defaults.classes\n\t\t */\n\t\t\"oClasses\": {},\n\t\n\t\n\t\t/**\n\t\t * All strings that DataTables uses in the user interface that it creates\n\t\t * are defined in this object, allowing you to modified them individually or\n\t\t * completely replace them all as required.\n\t\t *  @namespace\n\t\t *  @name DataTable.defaults.language\n\t\t */\n\t\t\"oLanguage\": {\n\t\t\t/**\n\t\t\t * Strings that are used for WAI-ARIA labels and controls only (these are not\n\t\t\t * actually visible on the page, but will be read by screenreaders, and thus\n\t\t\t * must be internationalised as well).\n\t\t\t *  @namespace\n\t\t\t *  @name DataTable.defaults.language.aria\n\t\t\t */\n\t\t\t\"oAria\": {\n\t\t\t\t/**\n\t\t\t\t * ARIA label that is added to the table headers when the column may be\n\t\t\t\t * sorted ascending by activing the column (click or return when focused).\n\t\t\t\t * Note that the column header is prefixed to this string.\n\t\t\t\t *  @type string\n\t\t\t\t *  @default : activate to sort column ascending\n\t\t\t\t *\n\t\t\t\t *  @dtopt Language\n\t\t\t\t *  @name DataTable.defaults.language.aria.sortAscending\n\t\t\t\t *\n\t\t\t\t *  @example\n\t\t\t\t *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"aria\": {\n\t\t\t\t *            \"sortAscending\": \" - click/return to sort ascending\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n\t\t\t\t */\n\t\t\t\t\"sSortAscending\": \": activate to sort column ascending\",\n\t\n\t\t\t\t/**\n\t\t\t\t * ARIA label that is added to the table headers when the column may be\n\t\t\t\t * sorted descending by activing the column (click or return when focused).\n\t\t\t\t * Note that the column header is prefixed to this string.\n\t\t\t\t *  @type string\n\t\t\t\t *  @default : activate to sort column ascending\n\t\t\t\t *\n\t\t\t\t *  @dtopt Language\n\t\t\t\t *  @name DataTable.defaults.language.aria.sortDescending\n\t\t\t\t *\n\t\t\t\t *  @example\n\t\t\t\t *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"aria\": {\n\t\t\t\t *            \"sortDescending\": \" - click/return to sort descending\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n\t\t\t\t */\n\t\t\t\t\"sSortDescending\": \": activate to sort column descending\"\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * Pagination string used by DataTables for the built-in pagination\n\t\t\t * control types.\n\t\t\t *  @namespace\n\t\t\t *  @name DataTable.defaults.language.paginate\n\t\t\t */\n\t\t\t\"oPaginate\": {\n\t\t\t\t/**\n\t\t\t\t * Text to use when using the 'full_numbers' type of pagination for the\n\t\t\t\t * button to take the user to the first page.\n\t\t\t\t *  @type string\n\t\t\t\t *  @default First\n\t\t\t\t *\n\t\t\t\t *  @dtopt Language\n\t\t\t\t *  @name DataTable.defaults.language.paginate.first\n\t\t\t\t *\n\t\t\t\t *  @example\n\t\t\t\t *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"paginate\": {\n\t\t\t\t *            \"first\": \"First page\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n\t\t\t\t */\n\t\t\t\t\"sFirst\": \"First\",\n\t\n\t\n\t\t\t\t/**\n\t\t\t\t * Text to use when using the 'full_numbers' type of pagination for the\n\t\t\t\t * button to take the user to the last page.\n\t\t\t\t *  @type string\n\t\t\t\t *  @default Last\n\t\t\t\t *\n\t\t\t\t *  @dtopt Language\n\t\t\t\t *  @name DataTable.defaults.language.paginate.last\n\t\t\t\t *\n\t\t\t\t *  @example\n\t\t\t\t *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"paginate\": {\n\t\t\t\t *            \"last\": \"Last page\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n\t\t\t\t */\n\t\t\t\t\"sLast\": \"Last\",\n\t\n\t\n\t\t\t\t/**\n\t\t\t\t * Text to use for the 'next' pagination button (to take the user to the\n\t\t\t\t * next page).\n\t\t\t\t *  @type string\n\t\t\t\t *  @default Next\n\t\t\t\t *\n\t\t\t\t *  @dtopt Language\n\t\t\t\t *  @name DataTable.defaults.language.paginate.next\n\t\t\t\t *\n\t\t\t\t *  @example\n\t\t\t\t *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"paginate\": {\n\t\t\t\t *            \"next\": \"Next page\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n\t\t\t\t */\n\t\t\t\t\"sNext\": \"Next\",\n\t\n\t\n\t\t\t\t/**\n\t\t\t\t * Text to use for the 'previous' pagination button (to take the user to\n\t\t\t\t * the previous page).\n\t\t\t\t *  @type string\n\t\t\t\t *  @default Previous\n\t\t\t\t *\n\t\t\t\t *  @dtopt Language\n\t\t\t\t *  @name DataTable.defaults.language.paginate.previous\n\t\t\t\t *\n\t\t\t\t *  @example\n\t\t\t\t *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"paginate\": {\n\t\t\t\t *            \"previous\": \"Previous page\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n\t\t\t\t */\n\t\t\t\t\"sPrevious\": \"Previous\"\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * This string is shown in preference to `zeroRecords` when the table is\n\t\t\t * empty of data (regardless of filtering). Note that this is an optional\n\t\t\t * parameter - if it is not given, the value of `zeroRecords` will be used\n\t\t\t * instead (either the default or given value).\n\t\t\t *  @type string\n\t\t\t *  @default No data available in table\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.emptyTable\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"emptyTable\": \"No data available in table\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sEmptyTable\": \"No data available in table\",\n\t\n\t\n\t\t\t/**\n\t\t\t * This string gives information to the end user about the information\n\t\t\t * that is current on display on the page. The following tokens can be\n\t\t\t * used in the string and will be dynamically replaced as the table\n\t\t\t * display updates. This tokens can be placed anywhere in the string, or\n\t\t\t * removed as needed by the language requires:\n\t\t\t *\n\t\t\t * * `\\_START\\_` - Display index of the first record on the current page\n\t\t\t * * `\\_END\\_` - Display index of the last record on the current page\n\t\t\t * * `\\_TOTAL\\_` - Number of records in the table after filtering\n\t\t\t * * `\\_MAX\\_` - Number of records in the table without filtering\n\t\t\t * * `\\_PAGE\\_` - Current page number\n\t\t\t * * `\\_PAGES\\_` - Total number of pages of data in the table\n\t\t\t *\n\t\t\t *  @type string\n\t\t\t *  @default Showing _START_ to _END_ of _TOTAL_ entries\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.info\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"info\": \"Showing page _PAGE_ of _PAGES_\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sInfo\": \"Showing _START_ to _END_ of _TOTAL_ entries\",\n\t\n\t\n\t\t\t/**\n\t\t\t * Display information string for when the table is empty. Typically the\n\t\t\t * format of this string should match `info`.\n\t\t\t *  @type string\n\t\t\t *  @default Showing 0 to 0 of 0 entries\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.infoEmpty\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"infoEmpty\": \"No entries to show\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sInfoEmpty\": \"Showing 0 to 0 of 0 entries\",\n\t\n\t\n\t\t\t/**\n\t\t\t * When a user filters the information in a table, this string is appended\n\t\t\t * to the information (`info`) to give an idea of how strong the filtering\n\t\t\t * is. The variable _MAX_ is dynamically updated.\n\t\t\t *  @type string\n\t\t\t *  @default (filtered from _MAX_ total entries)\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.infoFiltered\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"infoFiltered\": \" - filtering from _MAX_ records\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sInfoFiltered\": \"(filtered from _MAX_ total entries)\",\n\t\n\t\n\t\t\t/**\n\t\t\t * If can be useful to append extra information to the info string at times,\n\t\t\t * and this variable does exactly that. This information will be appended to\n\t\t\t * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are\n\t\t\t * being used) at all times.\n\t\t\t *  @type string\n\t\t\t *  @default <i>Empty string</i>\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.infoPostFix\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"infoPostFix\": \"All records shown are derived from real information.\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sInfoPostFix\": \"\",\n\t\n\t\n\t\t\t/**\n\t\t\t * This decimal place operator is a little different from the other\n\t\t\t * language options since DataTables doesn't output floating point\n\t\t\t * numbers, so it won't ever use this for display of a number. Rather,\n\t\t\t * what this parameter does is modify the sort methods of the table so\n\t\t\t * that numbers which are in a format which has a character other than\n\t\t\t * a period (`.`) as a decimal place will be sorted numerically.\n\t\t\t *\n\t\t\t * Note that numbers with different decimal places cannot be shown in\n\t\t\t * the same table and still be sortable, the table must be consistent.\n\t\t\t * However, multiple different tables on the page can use different\n\t\t\t * decimal place characters.\n\t\t\t *  @type string\n\t\t\t *  @default \n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.decimal\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"decimal\": \",\"\n\t\t\t *          \"thousands\": \".\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sDecimal\": \"\",\n\t\n\t\n\t\t\t/**\n\t\t\t * DataTables has a build in number formatter (`formatNumber`) which is\n\t\t\t * used to format large numbers that are used in the table information.\n\t\t\t * By default a comma is used, but this can be trivially changed to any\n\t\t\t * character you wish with this parameter.\n\t\t\t *  @type string\n\t\t\t *  @default ,\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.thousands\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"thousands\": \"'\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sThousands\": \",\",\n\t\n\t\n\t\t\t/**\n\t\t\t * Detail the action that will be taken when the drop down menu for the\n\t\t\t * pagination length option is changed. The '_MENU_' variable is replaced\n\t\t\t * with a default select list of 10, 25, 50 and 100, and can be replaced\n\t\t\t * with a custom select box if required.\n\t\t\t *  @type string\n\t\t\t *  @default Show _MENU_ entries\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.lengthMenu\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Language change only\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"lengthMenu\": \"Display _MENU_ records\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Language and options change\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"lengthMenu\": 'Display <select>'+\n\t\t\t *            '<option value=\"10\">10</option>'+\n\t\t\t *            '<option value=\"20\">20</option>'+\n\t\t\t *            '<option value=\"30\">30</option>'+\n\t\t\t *            '<option value=\"40\">40</option>'+\n\t\t\t *            '<option value=\"50\">50</option>'+\n\t\t\t *            '<option value=\"-1\">All</option>'+\n\t\t\t *            '</select> records'\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sLengthMenu\": \"Show _MENU_ entries\",\n\t\n\t\n\t\t\t/**\n\t\t\t * When using Ajax sourced data and during the first draw when DataTables is\n\t\t\t * gathering the data, this message is shown in an empty row in the table to\n\t\t\t * indicate to the end user the the data is being loaded. Note that this\n\t\t\t * parameter is not used when loading data by server-side processing, just\n\t\t\t * Ajax sourced data with client-side processing.\n\t\t\t *  @type string\n\t\t\t *  @default Loading...\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.loadingRecords\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"loadingRecords\": \"Please wait - loading...\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sLoadingRecords\": \"Loading...\",\n\t\n\t\n\t\t\t/**\n\t\t\t * Text which is displayed when the table is processing a user action\n\t\t\t * (usually a sort command or similar).\n\t\t\t *  @type string\n\t\t\t *  @default Processing...\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.processing\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"processing\": \"DataTables is currently busy\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sProcessing\": \"Processing...\",\n\t\n\t\n\t\t\t/**\n\t\t\t * Details the actions that will be taken when the user types into the\n\t\t\t * filtering input text box. The variable \"_INPUT_\", if used in the string,\n\t\t\t * is replaced with the HTML text box for the filtering input allowing\n\t\t\t * control over where it appears in the string. If \"_INPUT_\" is not given\n\t\t\t * then the input box is appended to the string automatically.\n\t\t\t *  @type string\n\t\t\t *  @default Search:\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.search\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Input text box will be appended at the end automatically\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"search\": \"Filter records:\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Specify where the filter should appear\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"search\": \"Apply filter _INPUT_ to table\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sSearch\": \"Search:\",\n\t\n\t\n\t\t\t/**\n\t\t\t * Assign a `placeholder` attribute to the search `input` element\n\t\t\t *  @type string\n\t\t\t *  @default \n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.searchPlaceholder\n\t\t\t */\n\t\t\t\"sSearchPlaceholder\": \"\",\n\t\n\t\n\t\t\t/**\n\t\t\t * All of the language information can be stored in a file on the\n\t\t\t * server-side, which DataTables will look up if this parameter is passed.\n\t\t\t * It must store the URL of the language file, which is in a JSON format,\n\t\t\t * and the object has the same properties as the oLanguage object in the\n\t\t\t * initialiser object (i.e. the above parameters). Please refer to one of\n\t\t\t * the example language files to see how this works in action.\n\t\t\t *  @type string\n\t\t\t *  @default <i>Empty string - i.e. disabled</i>\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.url\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"url\": \"http://www.sprymedia.co.uk/dataTables/lang.txt\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sUrl\": \"\",\n\t\n\t\n\t\t\t/**\n\t\t\t * Text shown inside the table records when the is no information to be\n\t\t\t * displayed after filtering. `emptyTable` is shown when there is simply no\n\t\t\t * information in the table at all (regardless of filtering).\n\t\t\t *  @type string\n\t\t\t *  @default No matching records found\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.zeroRecords\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"zeroRecords\": \"No records to display\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sZeroRecords\": \"No matching records found\"\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * This parameter allows you to have define the global filtering state at\n\t\t * initialisation time. As an object the `search` parameter must be\n\t\t * defined, but all other parameters are optional. When `regex` is true,\n\t\t * the search string will be treated as a regular expression, when false\n\t\t * (default) it will be treated as a straight string. When `smart`\n\t\t * DataTables will use it's smart filtering methods (to word match at\n\t\t * any point in the data), when false this will not be done.\n\t\t *  @namespace\n\t\t *  @extends DataTable.models.oSearch\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.search\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"search\": {\"search\": \"Initial search\"}\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"oSearch\": $.extend( {}, DataTable.models.oSearch ),\n\t\n\t\n\t\t/**\n\t\t * __Deprecated__ The functionality provided by this parameter has now been\n\t\t * superseded by that provided through `ajax`, which should be used instead.\n\t\t *\n\t\t * By default DataTables will look for the property `data` (or `aaData` for\n\t\t * compatibility with DataTables 1.9-) when obtaining data from an Ajax\n\t\t * source or for server-side processing - this parameter allows that\n\t\t * property to be changed. You can use Javascript dotted object notation to\n\t\t * get a data source for multiple levels of nesting.\n\t\t *  @type string\n\t\t *  @default data\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @dtopt Server-side\n\t\t *  @name DataTable.defaults.ajaxDataProp\n\t\t *\n\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\n\t\t */\n\t\t\"sAjaxDataProp\": \"data\",\n\t\n\t\n\t\t/**\n\t\t * __Deprecated__ The functionality provided by this parameter has now been\n\t\t * superseded by that provided through `ajax`, which should be used instead.\n\t\t *\n\t\t * You can instruct DataTables to load data from an external\n\t\t * source using this parameter (use aData if you want to pass data in you\n\t\t * already have). Simply provide a url a JSON object can be obtained from.\n\t\t *  @type string\n\t\t *  @default null\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @dtopt Server-side\n\t\t *  @name DataTable.defaults.ajaxSource\n\t\t *\n\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\n\t\t */\n\t\t\"sAjaxSource\": null,\n\t\n\t\n\t\t/**\n\t\t * This initialisation variable allows you to specify exactly where in the\n\t\t * DOM you want DataTables to inject the various controls it adds to the page\n\t\t * (for example you might want the pagination controls at the top of the\n\t\t * table). DIV elements (with or without a custom class) can also be added to\n\t\t * aid styling. The follow syntax is used:\n\t\t *   <ul>\n\t\t *     <li>The following options are allowed:\n\t\t *       <ul>\n\t\t *         <li>'l' - Length changing</li>\n\t\t *         <li>'f' - Filtering input</li>\n\t\t *         <li>'t' - The table!</li>\n\t\t *         <li>'i' - Information</li>\n\t\t *         <li>'p' - Pagination</li>\n\t\t *         <li>'r' - pRocessing</li>\n\t\t *       </ul>\n\t\t *     </li>\n\t\t *     <li>The following constants are allowed:\n\t\t *       <ul>\n\t\t *         <li>'H' - jQueryUI theme \"header\" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>\n\t\t *         <li>'F' - jQueryUI theme \"footer\" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>\n\t\t *       </ul>\n\t\t *     </li>\n\t\t *     <li>The following syntax is expected:\n\t\t *       <ul>\n\t\t *         <li>'&lt;' and '&gt;' - div elements</li>\n\t\t *         <li>'&lt;\"class\" and '&gt;' - div with a class</li>\n\t\t *         <li>'&lt;\"#id\" and '&gt;' - div with an ID</li>\n\t\t *       </ul>\n\t\t *     </li>\n\t\t *     <li>Examples:\n\t\t *       <ul>\n\t\t *         <li>'&lt;\"wrapper\"flipt&gt;'</li>\n\t\t *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>\n\t\t *       </ul>\n\t\t *     </li>\n\t\t *   </ul>\n\t\t *  @type string\n\t\t *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>\n\t\t *    <\"H\"lfr>t<\"F\"ip> <i>(when `jQueryUI` is true)</i>\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.dom\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"dom\": '&lt;\"top\"i&gt;rt&lt;\"bottom\"flp&gt;&lt;\"clear\"&gt;'\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sDom\": \"lfrtip\",\n\t\n\t\n\t\t/**\n\t\t * Search delay option. This will throttle full table searches that use the\n\t\t * DataTables provided search input element (it does not effect calls to\n\t\t * `dt-api search()`, providing a delay before the search is made.\n\t\t *  @type integer\n\t\t *  @default 0\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.searchDelay\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"searchDelay\": 200\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"searchDelay\": null,\n\t\n\t\n\t\t/**\n\t\t * DataTables features four different built-in options for the buttons to\n\t\t * display for pagination control:\n\t\t *\n\t\t * * `simple` - 'Previous' and 'Next' buttons only\n\t\t * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers\n\t\t * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons\n\t\t * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus\n\t\t *   page numbers\n\t\t *  \n\t\t * Further methods can be added using {@link DataTable.ext.oPagination}.\n\t\t *  @type string\n\t\t *  @default simple_numbers\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.pagingType\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"pagingType\": \"full_numbers\"\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"sPaginationType\": \"simple_numbers\",\n\t\n\t\n\t\t/**\n\t\t * Enable horizontal scrolling. When a table is too wide to fit into a\n\t\t * certain layout, or you have a large number of columns in the table, you\n\t\t * can enable x-scrolling to show the table in a viewport, which can be\n\t\t * scrolled. This property can be `true` which will allow the table to\n\t\t * scroll horizontally when needed, or any CSS unit, or a number (in which\n\t\t * case it will be treated as a pixel measurement). Setting as simply `true`\n\t\t * is recommended.\n\t\t *  @type boolean|string\n\t\t *  @default <i>blank string - i.e. disabled</i>\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.scrollX\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"scrollX\": true,\n\t\t *        \"scrollCollapse\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sScrollX\": \"\",\n\t\n\t\n\t\t/**\n\t\t * This property can be used to force a DataTable to use more width than it\n\t\t * might otherwise do when x-scrolling is enabled. For example if you have a\n\t\t * table which requires to be well spaced, this parameter is useful for\n\t\t * \"over-sizing\" the table, and thus forcing scrolling. This property can by\n\t\t * any CSS unit, or a number (in which case it will be treated as a pixel\n\t\t * measurement).\n\t\t *  @type string\n\t\t *  @default <i>blank string - i.e. disabled</i>\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.scrollXInner\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"scrollX\": \"100%\",\n\t\t *        \"scrollXInner\": \"110%\"\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sScrollXInner\": \"\",\n\t\n\t\n\t\t/**\n\t\t * Enable vertical scrolling. Vertical scrolling will constrain the DataTable\n\t\t * to the given height, and enable scrolling for any data which overflows the\n\t\t * current viewport. This can be used as an alternative to paging to display\n\t\t * a lot of data in a small area (although paging and scrolling can both be\n\t\t * enabled at the same time). This property can be any CSS unit, or a number\n\t\t * (in which case it will be treated as a pixel measurement).\n\t\t *  @type string\n\t\t *  @default <i>blank string - i.e. disabled</i>\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.scrollY\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"scrollY\": \"200px\",\n\t\t *        \"paginate\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sScrollY\": \"\",\n\t\n\t\n\t\t/**\n\t\t * __Deprecated__ The functionality provided by this parameter has now been\n\t\t * superseded by that provided through `ajax`, which should be used instead.\n\t\t *\n\t\t * Set the HTTP method that is used to make the Ajax call for server-side\n\t\t * processing or Ajax sourced data.\n\t\t *  @type string\n\t\t *  @default GET\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @dtopt Server-side\n\t\t *  @name DataTable.defaults.serverMethod\n\t\t *\n\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\n\t\t */\n\t\t\"sServerMethod\": \"GET\",\n\t\n\t\n\t\t/**\n\t\t * DataTables makes use of renderers when displaying HTML elements for\n\t\t * a table. These renderers can be added or modified by plug-ins to\n\t\t * generate suitable mark-up for a site. For example the Bootstrap\n\t\t * integration plug-in for DataTables uses a paging button renderer to\n\t\t * display pagination buttons in the mark-up required by Bootstrap.\n\t\t *\n\t\t * For further information about the renderers available see\n\t\t * DataTable.ext.renderer\n\t\t *  @type string|object\n\t\t *  @default null\n\t\t *\n\t\t *  @name DataTable.defaults.renderer\n\t\t *\n\t\t */\n\t\t\"renderer\": null\n\t};\n\t\n\t_fnHungarianMap( DataTable.defaults );\n\t\n\t\n\t\n\t/*\n\t * Developer note - See note in model.defaults.js about the use of Hungarian\n\t * notation and camel case.\n\t */\n\t\n\t/**\n\t * Column options that can be given to DataTables at initialisation time.\n\t *  @namespace\n\t */\n\tDataTable.defaults.column = {\n\t\t/**\n\t\t * Define which column(s) an order will occur on for this column. This\n\t\t * allows a column's ordering to take multiple columns into account when\n\t\t * doing a sort or use the data from a different column. For example first\n\t\t * name / last name columns make sense to do a multi-column sort over the\n\t\t * two columns.\n\t\t *  @type array|int\n\t\t *  @default null <i>Takes the value of the column index automatically</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.orderData\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"orderData\": [ 0, 1 ], \"targets\": [ 0 ] },\n\t\t *          { \"orderData\": [ 1, 0 ], \"targets\": [ 1 ] },\n\t\t *          { \"orderData\": 2, \"targets\": [ 2 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"orderData\": [ 0, 1 ] },\n\t\t *          { \"orderData\": [ 1, 0 ] },\n\t\t *          { \"orderData\": 2 },\n\t\t *          null,\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"aDataSort\": null,\n\t\t\"iDataSort\": -1,\n\t\n\t\n\t\t/**\n\t\t * You can control the default ordering direction, and even alter the\n\t\t * behaviour of the sort handler (i.e. only allow ascending ordering etc)\n\t\t * using this parameter.\n\t\t *  @type array\n\t\t *  @default [ 'asc', 'desc' ]\n\t\t *\n\t\t *  @name DataTable.defaults.column.orderSequence\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"orderSequence\": [ \"asc\" ], \"targets\": [ 1 ] },\n\t\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ], \"targets\": [ 2 ] },\n\t\t *          { \"orderSequence\": [ \"desc\" ], \"targets\": [ 3 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          null,\n\t\t *          { \"orderSequence\": [ \"asc\" ] },\n\t\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ] },\n\t\t *          { \"orderSequence\": [ \"desc\" ] },\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"asSorting\": [ 'asc', 'desc' ],\n\t\n\t\n\t\t/**\n\t\t * Enable or disable filtering on the data in this column.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @name DataTable.defaults.column.searchable\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"searchable\": false, \"targets\": [ 0 ] }\n\t\t *        ] } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"searchable\": false },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ] } );\n\t\t *    } );\n\t\t */\n\t\t\"bSearchable\": true,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable ordering on this column.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @name DataTable.defaults.column.orderable\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"orderable\": false, \"targets\": [ 0 ] }\n\t\t *        ] } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"orderable\": false },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ] } );\n\t\t *    } );\n\t\t */\n\t\t\"bSortable\": true,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable the display of this column.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @name DataTable.defaults.column.visible\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"visible\": false, \"targets\": [ 0 ] }\n\t\t *        ] } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"visible\": false },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ] } );\n\t\t *    } );\n\t\t */\n\t\t\"bVisible\": true,\n\t\n\t\n\t\t/**\n\t\t * Developer definable function that is called whenever a cell is created (Ajax source,\n\t\t * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n\t\t * allowing you to modify the DOM element (add background colour for example) when the\n\t\t * element is available.\n\t\t *  @type function\n\t\t *  @param {element} td The TD node that has been created\n\t\t *  @param {*} cellData The Data for the cell\n\t\t *  @param {array|object} rowData The data for the whole row\n\t\t *  @param {int} row The row index for the aoData data store\n\t\t *  @param {int} col The column index for aoColumns\n\t\t *\n\t\t *  @name DataTable.defaults.column.createdCell\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [3],\n\t\t *          \"createdCell\": function (td, cellData, rowData, row, col) {\n\t\t *            if ( cellData == \"1.7\" ) {\n\t\t *              $(td).css('color', 'blue')\n\t\t *            }\n\t\t *          }\n\t\t *        } ]\n\t\t *      });\n\t\t *    } );\n\t\t */\n\t\t\"fnCreatedCell\": null,\n\t\n\t\n\t\t/**\n\t\t * This parameter has been replaced by `data` in DataTables to ensure naming\n\t\t * consistency. `dataProp` can still be used, as there is backwards\n\t\t * compatibility in DataTables for this option, but it is strongly\n\t\t * recommended that you use `data` in preference to `dataProp`.\n\t\t *  @name DataTable.defaults.column.dataProp\n\t\t */\n\t\n\t\n\t\t/**\n\t\t * This property can be used to read data from any data source property,\n\t\t * including deeply nested objects / properties. `data` can be given in a\n\t\t * number of different ways which effect its behaviour:\n\t\t *\n\t\t * * `integer` - treated as an array index for the data source. This is the\n\t\t *   default that DataTables uses (incrementally increased for each column).\n\t\t * * `string` - read an object property from the data source. There are\n\t\t *   three 'special' options that can be used in the string to alter how\n\t\t *   DataTables reads the data from the source object:\n\t\t *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n\t\t *      Javascript to read from nested objects, so to can the options\n\t\t *      specified in `data`. For example: `browser.version` or\n\t\t *      `browser.name`. If your object parameter name contains a period, use\n\t\t *      `\\\\` to escape it - i.e. `first\\\\.name`.\n\t\t *    * `[]` - Array notation. DataTables can automatically combine data\n\t\t *      from and array source, joining the data with the characters provided\n\t\t *      between the two brackets. For example: `name[, ]` would provide a\n\t\t *      comma-space separated list from the source array. If no characters\n\t\t *      are provided between the brackets, the original array source is\n\t\t *      returned.\n\t\t *    * `()` - Function notation. Adding `()` to the end of a parameter will\n\t\t *      execute a function of the name given. For example: `browser()` for a\n\t\t *      simple function on the data source, `browser.version()` for a\n\t\t *      function in a nested property or even `browser().version` to get an\n\t\t *      object property if the function called returns an object. Note that\n\t\t *      function notation is recommended for use in `render` rather than\n\t\t *      `data` as it is much simpler to use as a renderer.\n\t\t * * `null` - use the original data source for the row rather than plucking\n\t\t *   data directly from it. This action has effects on two other\n\t\t *   initialisation options:\n\t\t *    * `defaultContent` - When null is given as the `data` option and\n\t\t *      `defaultContent` is specified for the column, the value defined by\n\t\t *      `defaultContent` will be used for the cell.\n\t\t *    * `render` - When null is used for the `data` option and the `render`\n\t\t *      option is specified for the column, the whole data source for the\n\t\t *      row is used for the renderer.\n\t\t * * `function` - the function given will be executed whenever DataTables\n\t\t *   needs to set or get the data for a cell in the column. The function\n\t\t *   takes three parameters:\n\t\t *    * Parameters:\n\t\t *      * `{array|object}` The data source for the row\n\t\t *      * `{string}` The type call data requested - this will be 'set' when\n\t\t *        setting data or 'filter', 'display', 'type', 'sort' or undefined\n\t\t *        when gathering data. Note that when `undefined` is given for the\n\t\t *        type DataTables expects to get the raw data for the object back<\n\t\t *      * `{*}` Data to set when the second parameter is 'set'.\n\t\t *    * Return:\n\t\t *      * The return value from the function is not required when 'set' is\n\t\t *        the type of call, but otherwise the return is what will be used\n\t\t *        for the data requested.\n\t\t *\n\t\t * Note that `data` is a getter and setter option. If you just require\n\t\t * formatting of data for output, you will likely want to use `render` which\n\t\t * is simply a getter and thus simpler to use.\n\t\t *\n\t\t * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The\n\t\t * name change reflects the flexibility of this property and is consistent\n\t\t * with the naming of mRender. If 'mDataProp' is given, then it will still\n\t\t * be used by DataTables, as it automatically maps the old name to the new\n\t\t * if required.\n\t\t *\n\t\t *  @type string|int|function|null\n\t\t *  @default null <i>Use automatically calculated column index</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.data\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Read table data from objects\n\t\t *    // JSON structure for each row:\n\t\t *    //   {\n\t\t *    //      \"engine\": {value},\n\t\t *    //      \"browser\": {value},\n\t\t *    //      \"platform\": {value},\n\t\t *    //      \"version\": {value},\n\t\t *    //      \"grade\": {value}\n\t\t *    //   }\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"ajaxSource\": \"sources/objects.txt\",\n\t\t *        \"columns\": [\n\t\t *          { \"data\": \"engine\" },\n\t\t *          { \"data\": \"browser\" },\n\t\t *          { \"data\": \"platform\" },\n\t\t *          { \"data\": \"version\" },\n\t\t *          { \"data\": \"grade\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Read information from deeply nested objects\n\t\t *    // JSON structure for each row:\n\t\t *    //   {\n\t\t *    //      \"engine\": {value},\n\t\t *    //      \"browser\": {value},\n\t\t *    //      \"platform\": {\n\t\t *    //         \"inner\": {value}\n\t\t *    //      },\n\t\t *    //      \"details\": [\n\t\t *    //         {value}, {value}\n\t\t *    //      ]\n\t\t *    //   }\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"ajaxSource\": \"sources/deep.txt\",\n\t\t *        \"columns\": [\n\t\t *          { \"data\": \"engine\" },\n\t\t *          { \"data\": \"browser\" },\n\t\t *          { \"data\": \"platform.inner\" },\n\t\t *          { \"data\": \"platform.details.0\" },\n\t\t *          { \"data\": \"platform.details.1\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `data` as a function to provide different information for\n\t\t *    // sorting, filtering and display. In this case, currency (price)\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": function ( source, type, val ) {\n\t\t *            if (type === 'set') {\n\t\t *              source.price = val;\n\t\t *              // Store the computed dislay and filter values for efficiency\n\t\t *              source.price_display = val==\"\" ? \"\" : \"$\"+numberFormat(val);\n\t\t *              source.price_filter  = val==\"\" ? \"\" : \"$\"+numberFormat(val)+\" \"+val;\n\t\t *              return;\n\t\t *            }\n\t\t *            else if (type === 'display') {\n\t\t *              return source.price_display;\n\t\t *            }\n\t\t *            else if (type === 'filter') {\n\t\t *              return source.price_filter;\n\t\t *            }\n\t\t *            // 'sort', 'type' and undefined all just use the integer\n\t\t *            return source.price;\n\t\t *          }\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using default content\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": null,\n\t\t *          \"defaultContent\": \"Click to edit\"\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using array notation - outputting a list from an array\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": \"name[, ]\"\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t */\n\t\t\"mData\": null,\n\t\n\t\n\t\t/**\n\t\t * This property is the rendering partner to `data` and it is suggested that\n\t\t * when you want to manipulate data for display (including filtering,\n\t\t * sorting etc) without altering the underlying data for the table, use this\n\t\t * property. `render` can be considered to be the the read only companion to\n\t\t * `data` which is read / write (then as such more complex). Like `data`\n\t\t * this option can be given in a number of different ways to effect its\n\t\t * behaviour:\n\t\t *\n\t\t * * `integer` - treated as an array index for the data source. This is the\n\t\t *   default that DataTables uses (incrementally increased for each column).\n\t\t * * `string` - read an object property from the data source. There are\n\t\t *   three 'special' options that can be used in the string to alter how\n\t\t *   DataTables reads the data from the source object:\n\t\t *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n\t\t *      Javascript to read from nested objects, so to can the options\n\t\t *      specified in `data`. For example: `browser.version` or\n\t\t *      `browser.name`. If your object parameter name contains a period, use\n\t\t *      `\\\\` to escape it - i.e. `first\\\\.name`.\n\t\t *    * `[]` - Array notation. DataTables can automatically combine data\n\t\t *      from and array source, joining the data with the characters provided\n\t\t *      between the two brackets. For example: `name[, ]` would provide a\n\t\t *      comma-space separated list from the source array. If no characters\n\t\t *      are provided between the brackets, the original array source is\n\t\t *      returned.\n\t\t *    * `()` - Function notation. Adding `()` to the end of a parameter will\n\t\t *      execute a function of the name given. For example: `browser()` for a\n\t\t *      simple function on the data source, `browser.version()` for a\n\t\t *      function in a nested property or even `browser().version` to get an\n\t\t *      object property if the function called returns an object.\n\t\t * * `object` - use different data for the different data types requested by\n\t\t *   DataTables ('filter', 'display', 'type' or 'sort'). The property names\n\t\t *   of the object is the data type the property refers to and the value can\n\t\t *   defined using an integer, string or function using the same rules as\n\t\t *   `render` normally does. Note that an `_` option _must_ be specified.\n\t\t *   This is the default value to use if you haven't specified a value for\n\t\t *   the data type requested by DataTables.\n\t\t * * `function` - the function given will be executed whenever DataTables\n\t\t *   needs to set or get the data for a cell in the column. The function\n\t\t *   takes three parameters:\n\t\t *    * Parameters:\n\t\t *      * {array|object} The data source for the row (based on `data`)\n\t\t *      * {string} The type call data requested - this will be 'filter',\n\t\t *        'display', 'type' or 'sort'.\n\t\t *      * {array|object} The full data source for the row (not based on\n\t\t *        `data`)\n\t\t *    * Return:\n\t\t *      * The return value from the function is what will be used for the\n\t\t *        data requested.\n\t\t *\n\t\t *  @type string|int|function|object|null\n\t\t *  @default null Use the data source value.\n\t\t *\n\t\t *  @name DataTable.defaults.column.render\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Create a comma separated list from an array of objects\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"ajaxSource\": \"sources/deep.txt\",\n\t\t *        \"columns\": [\n\t\t *          { \"data\": \"engine\" },\n\t\t *          { \"data\": \"browser\" },\n\t\t *          {\n\t\t *            \"data\": \"platform\",\n\t\t *            \"render\": \"[, ].name\"\n\t\t *          }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Execute a function to obtain data\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": null, // Use the full data source object for the renderer's source\n\t\t *          \"render\": \"browserName()\"\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // As an object, extracting different data for the different types\n\t\t *    // This would be used with a data source such as:\n\t\t *    //   { \"phone\": 5552368, \"phone_filter\": \"5552368 555-2368\", \"phone_display\": \"555-2368\" }\n\t\t *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`\n\t\t *    // (which has both forms) is used for filtering for if a user inputs either format, while\n\t\t *    // the formatted phone number is the one that is shown in the table.\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": null, // Use the full data source object for the renderer's source\n\t\t *          \"render\": {\n\t\t *            \"_\": \"phone\",\n\t\t *            \"filter\": \"phone_filter\",\n\t\t *            \"display\": \"phone_display\"\n\t\t *          }\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Use as a function to create a link from the data source\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": \"download_link\",\n\t\t *          \"render\": function ( data, type, full ) {\n\t\t *            return '<a href=\"'+data+'\">Download</a>';\n\t\t *          }\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"mRender\": null,\n\t\n\t\n\t\t/**\n\t\t * Change the cell type created for the column - either TD cells or TH cells. This\n\t\t * can be useful as TH cells have semantic meaning in the table body, allowing them\n\t\t * to act as a header for a row (you may wish to add scope='row' to the TH elements).\n\t\t *  @type string\n\t\t *  @default td\n\t\t *\n\t\t *  @name DataTable.defaults.column.cellType\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Make the first column use TH cells\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"cellType\": \"th\"\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sCellType\": \"td\",\n\t\n\t\n\t\t/**\n\t\t * Class to give to each cell in this column.\n\t\t *  @type string\n\t\t *  @default <i>Empty string</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.class\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"class\": \"my_class\", \"targets\": [ 0 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"class\": \"my_class\" },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sClass\": \"\",\n\t\n\t\t/**\n\t\t * When DataTables calculates the column widths to assign to each column,\n\t\t * it finds the longest string in each column and then constructs a\n\t\t * temporary table and reads the widths from that. The problem with this\n\t\t * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n\t\t * string - thus the calculation can go wrong (doing it properly and putting\n\t\t * it into an DOM object and measuring that is horribly(!) slow). Thus as\n\t\t * a \"work around\" we provide this option. It will append its value to the\n\t\t * text that is found to be the longest string for the column - i.e. padding.\n\t\t * Generally you shouldn't need this!\n\t\t *  @type string\n\t\t *  @default <i>Empty string<i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.contentPadding\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          {\n\t\t *            \"contentPadding\": \"mmm\"\n\t\t *          }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sContentPadding\": \"\",\n\t\n\t\n\t\t/**\n\t\t * Allows a default value to be given for a column's data, and will be used\n\t\t * whenever a null data source is encountered (this can be because `data`\n\t\t * is set to null, or because the data source itself is null).\n\t\t *  @type string\n\t\t *  @default null\n\t\t *\n\t\t *  @name DataTable.defaults.column.defaultContent\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          {\n\t\t *            \"data\": null,\n\t\t *            \"defaultContent\": \"Edit\",\n\t\t *            \"targets\": [ -1 ]\n\t\t *          }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          {\n\t\t *            \"data\": null,\n\t\t *            \"defaultContent\": \"Edit\"\n\t\t *          }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sDefaultContent\": null,\n\t\n\t\n\t\t/**\n\t\t * This parameter is only used in DataTables' server-side processing. It can\n\t\t * be exceptionally useful to know what columns are being displayed on the\n\t\t * client side, and to map these to database fields. When defined, the names\n\t\t * also allow DataTables to reorder information from the server if it comes\n\t\t * back in an unexpected order (i.e. if you switch your columns around on the\n\t\t * client-side, your server-side code does not also need updating).\n\t\t *  @type string\n\t\t *  @default <i>Empty string</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.name\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"name\": \"engine\", \"targets\": [ 0 ] },\n\t\t *          { \"name\": \"browser\", \"targets\": [ 1 ] },\n\t\t *          { \"name\": \"platform\", \"targets\": [ 2 ] },\n\t\t *          { \"name\": \"version\", \"targets\": [ 3 ] },\n\t\t *          { \"name\": \"grade\", \"targets\": [ 4 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"name\": \"engine\" },\n\t\t *          { \"name\": \"browser\" },\n\t\t *          { \"name\": \"platform\" },\n\t\t *          { \"name\": \"version\" },\n\t\t *          { \"name\": \"grade\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sName\": \"\",\n\t\n\t\n\t\t/**\n\t\t * Defines a data source type for the ordering which can be used to read\n\t\t * real-time information from the table (updating the internally cached\n\t\t * version) prior to ordering. This allows ordering to occur on user\n\t\t * editable elements such as form inputs.\n\t\t *  @type string\n\t\t *  @default std\n\t\t *\n\t\t *  @name DataTable.defaults.column.orderDataType\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"orderDataType\": \"dom-text\", \"targets\": [ 2, 3 ] },\n\t\t *          { \"type\": \"numeric\", \"targets\": [ 3 ] },\n\t\t *          { \"orderDataType\": \"dom-select\", \"targets\": [ 4 ] },\n\t\t *          { \"orderDataType\": \"dom-checkbox\", \"targets\": [ 5 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          null,\n\t\t *          null,\n\t\t *          { \"orderDataType\": \"dom-text\" },\n\t\t *          { \"orderDataType\": \"dom-text\", \"type\": \"numeric\" },\n\t\t *          { \"orderDataType\": \"dom-select\" },\n\t\t *          { \"orderDataType\": \"dom-checkbox\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sSortDataType\": \"std\",\n\t\n\t\n\t\t/**\n\t\t * The title of this column.\n\t\t *  @type string\n\t\t *  @default null <i>Derived from the 'TH' value for this column in the\n\t\t *    original HTML table.</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.title\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"title\": \"My column title\", \"targets\": [ 0 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"title\": \"My column title\" },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sTitle\": null,\n\t\n\t\n\t\t/**\n\t\t * The type allows you to specify how the data for this column will be\n\t\t * ordered. Four types (string, numeric, date and html (which will strip\n\t\t * HTML tags before ordering)) are currently available. Note that only date\n\t\t * formats understood by Javascript's Date() object will be accepted as type\n\t\t * date. For example: \"Mar 26, 2008 5:03 PM\". May take the values: 'string',\n\t\t * 'numeric', 'date' or 'html' (by default). Further types can be adding\n\t\t * through plug-ins.\n\t\t *  @type string\n\t\t *  @default null <i>Auto-detected from raw data</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.type\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"type\": \"html\", \"targets\": [ 0 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"type\": \"html\" },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sType\": null,\n\t\n\t\n\t\t/**\n\t\t * Defining the width of the column, this parameter may take any CSS value\n\t\t * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not\n\t\t * been given a specific width through this interface ensuring that the table\n\t\t * remains readable.\n\t\t *  @type string\n\t\t *  @default null <i>Automatic</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.width\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"width\": \"20%\", \"targets\": [ 0 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"width\": \"20%\" },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sWidth\": null\n\t};\n\t\n\t_fnHungarianMap( DataTable.defaults.column );\n\t\n\t\n\t\n\t/**\n\t * DataTables settings object - this holds all the information needed for a\n\t * given table, including configuration, data and current application of the\n\t * table options. DataTables does not have a single instance for each DataTable\n\t * with the settings attached to that instance, but rather instances of the\n\t * DataTable \"class\" are created on-the-fly as needed (typically by a\n\t * $().dataTable() call) and the settings object is then applied to that\n\t * instance.\n\t *\n\t * Note that this object is related to {@link DataTable.defaults} but this\n\t * one is the internal data store for DataTables's cache of columns. It should\n\t * NOT be manipulated outside of DataTables. Any configuration should be done\n\t * through the initialisation options.\n\t *  @namespace\n\t *  @todo Really should attach the settings object to individual instances so we\n\t *    don't need to create new instances on each $().dataTable() call (if the\n\t *    table already exists). It would also save passing oSettings around and\n\t *    into every single function. However, this is a very significant\n\t *    architecture change for DataTables and will almost certainly break\n\t *    backwards compatibility with older installations. This is something that\n\t *    will be done in 2.0.\n\t */\n\tDataTable.models.oSettings = {\n\t\t/**\n\t\t * Primary features of DataTables and their enablement state.\n\t\t *  @namespace\n\t\t */\n\t\t\"oFeatures\": {\n\t\n\t\t\t/**\n\t\t\t * Flag to say if DataTables should automatically try to calculate the\n\t\t\t * optimum table and columns widths (true) or not (false).\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bAutoWidth\": null,\n\t\n\t\t\t/**\n\t\t\t * Delay the creation of TR and TD elements until they are actually\n\t\t\t * needed by a driven page draw. This can give a significant speed\n\t\t\t * increase for Ajax source and Javascript source data, but makes no\n\t\t\t * difference at all fro DOM and server-side processing tables.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bDeferRender\": null,\n\t\n\t\t\t/**\n\t\t\t * Enable filtering on the table or not. Note that if this is disabled\n\t\t\t * then there is no filtering at all on the table, including fnFilter.\n\t\t\t * To just remove the filtering input use sDom and remove the 'f' option.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bFilter\": null,\n\t\n\t\t\t/**\n\t\t\t * Table information element (the 'Showing x of y records' div) enable\n\t\t\t * flag.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bInfo\": null,\n\t\n\t\t\t/**\n\t\t\t * Present a user control allowing the end user to change the page size\n\t\t\t * when pagination is enabled.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bLengthChange\": null,\n\t\n\t\t\t/**\n\t\t\t * Pagination enabled or not. Note that if this is disabled then length\n\t\t\t * changing must also be disabled.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bPaginate\": null,\n\t\n\t\t\t/**\n\t\t\t * Processing indicator enable flag whenever DataTables is enacting a\n\t\t\t * user request - typically an Ajax request for server-side processing.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bProcessing\": null,\n\t\n\t\t\t/**\n\t\t\t * Server-side processing enabled flag - when enabled DataTables will\n\t\t\t * get all data from the server for every draw - there is no filtering,\n\t\t\t * sorting or paging done on the client-side.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bServerSide\": null,\n\t\n\t\t\t/**\n\t\t\t * Sorting enablement flag.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bSort\": null,\n\t\n\t\t\t/**\n\t\t\t * Multi-column sorting\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bSortMulti\": null,\n\t\n\t\t\t/**\n\t\t\t * Apply a class to the columns which are being sorted to provide a\n\t\t\t * visual highlight or not. This can slow things down when enabled since\n\t\t\t * there is a lot of DOM interaction.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bSortClasses\": null,\n\t\n\t\t\t/**\n\t\t\t * State saving enablement flag.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bStateSave\": null\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * Scrolling settings for a table.\n\t\t *  @namespace\n\t\t */\n\t\t\"oScroll\": {\n\t\t\t/**\n\t\t\t * When the table is shorter in height than sScrollY, collapse the\n\t\t\t * table container down to the height of the table (when true).\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bCollapse\": null,\n\t\n\t\t\t/**\n\t\t\t * Width of the scrollbar for the web-browser's platform. Calculated\n\t\t\t * during table initialisation.\n\t\t\t *  @type int\n\t\t\t *  @default 0\n\t\t\t */\n\t\t\t\"iBarWidth\": 0,\n\t\n\t\t\t/**\n\t\t\t * Viewport width for horizontal scrolling. Horizontal scrolling is\n\t\t\t * disabled if an empty string.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type string\n\t\t\t */\n\t\t\t\"sX\": null,\n\t\n\t\t\t/**\n\t\t\t * Width to expand the table to when using x-scrolling. Typically you\n\t\t\t * should not need to use this.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type string\n\t\t\t *  @deprecated\n\t\t\t */\n\t\t\t\"sXInner\": null,\n\t\n\t\t\t/**\n\t\t\t * Viewport height for vertical scrolling. Vertical scrolling is disabled\n\t\t\t * if an empty string.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type string\n\t\t\t */\n\t\t\t\"sY\": null\n\t\t},\n\t\n\t\t/**\n\t\t * Language information for the table.\n\t\t *  @namespace\n\t\t *  @extends DataTable.defaults.oLanguage\n\t\t */\n\t\t\"oLanguage\": {\n\t\t\t/**\n\t\t\t * Information callback function. See\n\t\t\t * {@link DataTable.defaults.fnInfoCallback}\n\t\t\t *  @type function\n\t\t\t *  @default null\n\t\t\t */\n\t\t\t\"fnInfoCallback\": null\n\t\t},\n\t\n\t\t/**\n\t\t * Browser support parameters\n\t\t *  @namespace\n\t\t */\n\t\t\"oBrowser\": {\n\t\t\t/**\n\t\t\t * Indicate if the browser incorrectly calculates width:100% inside a\n\t\t\t * scrolling element (IE6/7)\n\t\t\t *  @type boolean\n\t\t\t *  @default false\n\t\t\t */\n\t\t\t\"bScrollOversize\": false,\n\t\n\t\t\t/**\n\t\t\t * Determine if the vertical scrollbar is on the right or left of the\n\t\t\t * scrolling container - needed for rtl language layout, although not\n\t\t\t * all browsers move the scrollbar (Safari).\n\t\t\t *  @type boolean\n\t\t\t *  @default false\n\t\t\t */\n\t\t\t\"bScrollbarLeft\": false\n\t\t},\n\t\n\t\n\t\t\"ajax\": null,\n\t\n\t\n\t\t/**\n\t\t * Array referencing the nodes which are used for the features. The\n\t\t * parameters of this object match what is allowed by sDom - i.e.\n\t\t *   <ul>\n\t\t *     <li>'l' - Length changing</li>\n\t\t *     <li>'f' - Filtering input</li>\n\t\t *     <li>'t' - The table!</li>\n\t\t *     <li>'i' - Information</li>\n\t\t *     <li>'p' - Pagination</li>\n\t\t *     <li>'r' - pRocessing</li>\n\t\t *   </ul>\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aanFeatures\": [],\n\t\n\t\t/**\n\t\t * Store data information - see {@link DataTable.models.oRow} for detailed\n\t\t * information.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoData\": [],\n\t\n\t\t/**\n\t\t * Array of indexes which are in the current display (after filtering etc)\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aiDisplay\": [],\n\t\n\t\t/**\n\t\t * Array of indexes for display - no filtering\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aiDisplayMaster\": [],\n\t\n\t\t/**\n\t\t * Store information about each column that is in use\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoColumns\": [],\n\t\n\t\t/**\n\t\t * Store information about the table's header\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoHeader\": [],\n\t\n\t\t/**\n\t\t * Store information about the table's footer\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoFooter\": [],\n\t\n\t\t/**\n\t\t * Store the applied global search information in case we want to force a\n\t\t * research or compare the old search to a new one.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @namespace\n\t\t *  @extends DataTable.models.oSearch\n\t\t */\n\t\t\"oPreviousSearch\": {},\n\t\n\t\t/**\n\t\t * Store the applied search for each column - see\n\t\t * {@link DataTable.models.oSearch} for the format that is used for the\n\t\t * filtering information for each column.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoPreSearchCols\": [],\n\t\n\t\t/**\n\t\t * Sorting that is applied to the table. Note that the inner arrays are\n\t\t * used in the following manner:\n\t\t * <ul>\n\t\t *   <li>Index 0 - column number</li>\n\t\t *   <li>Index 1 - current sorting direction</li>\n\t\t * </ul>\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type array\n\t\t *  @todo These inner arrays should really be objects\n\t\t */\n\t\t\"aaSorting\": null,\n\t\n\t\t/**\n\t\t * Sorting that is always applied to the table (i.e. prefixed in front of\n\t\t * aaSorting).\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aaSortingFixed\": [],\n\t\n\t\t/**\n\t\t * Classes to use for the striping of a table.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"asStripeClasses\": null,\n\t\n\t\t/**\n\t\t * If restoring a table - we should restore its striping classes as well\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"asDestroyStripes\": [],\n\t\n\t\t/**\n\t\t * If restoring a table - we should restore its width\n\t\t *  @type int\n\t\t *  @default 0\n\t\t */\n\t\t\"sDestroyWidth\": 0,\n\t\n\t\t/**\n\t\t * Callback functions array for every time a row is inserted (i.e. on a draw).\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoRowCallback\": [],\n\t\n\t\t/**\n\t\t * Callback functions for the header on each draw.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoHeaderCallback\": [],\n\t\n\t\t/**\n\t\t * Callback function for the footer on each draw.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoFooterCallback\": [],\n\t\n\t\t/**\n\t\t * Array of callback functions for draw callback functions\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoDrawCallback\": [],\n\t\n\t\t/**\n\t\t * Array of callback functions for row created function\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoRowCreatedCallback\": [],\n\t\n\t\t/**\n\t\t * Callback functions for just before the table is redrawn. A return of\n\t\t * false will be used to cancel the draw.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoPreDrawCallback\": [],\n\t\n\t\t/**\n\t\t * Callback functions for when the table has been initialised.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoInitComplete\": [],\n\t\n\t\n\t\t/**\n\t\t * Callbacks for modifying the settings to be stored for state saving, prior to\n\t\t * saving state.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoStateSaveParams\": [],\n\t\n\t\t/**\n\t\t * Callbacks for modifying the settings that have been stored for state saving\n\t\t * prior to using the stored values to restore the state.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoStateLoadParams\": [],\n\t\n\t\t/**\n\t\t * Callbacks for operating on the settings object once the saved state has been\n\t\t * loaded\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoStateLoaded\": [],\n\t\n\t\t/**\n\t\t * Cache the table ID for quick access\n\t\t *  @type string\n\t\t *  @default <i>Empty string</i>\n\t\t */\n\t\t\"sTableId\": \"\",\n\t\n\t\t/**\n\t\t * The TABLE node for the main table\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTable\": null,\n\t\n\t\t/**\n\t\t * Permanent ref to the thead element\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTHead\": null,\n\t\n\t\t/**\n\t\t * Permanent ref to the tfoot element - if it exists\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTFoot\": null,\n\t\n\t\t/**\n\t\t * Permanent ref to the tbody element\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTBody\": null,\n\t\n\t\t/**\n\t\t * Cache the wrapper node (contains all DataTables controlled elements)\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTableWrapper\": null,\n\t\n\t\t/**\n\t\t * Indicate if when using server-side processing the loading of data\n\t\t * should be deferred until the second draw.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t */\n\t\t\"bDeferLoading\": false,\n\t\n\t\t/**\n\t\t * Indicate if all required information has been read in\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t */\n\t\t\"bInitialised\": false,\n\t\n\t\t/**\n\t\t * Information about open rows. Each object in the array has the parameters\n\t\t * 'nTr' and 'nParent'\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoOpenRows\": [],\n\t\n\t\t/**\n\t\t * Dictate the positioning of DataTables' control elements - see\n\t\t * {@link DataTable.model.oInit.sDom}.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sDom\": null,\n\t\n\t\t/**\n\t\t * Search delay (in mS)\n\t\t *  @type integer\n\t\t *  @default null\n\t\t */\n\t\t\"searchDelay\": null,\n\t\n\t\t/**\n\t\t * Which type of pagination should be used.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type string\n\t\t *  @default two_button\n\t\t */\n\t\t\"sPaginationType\": \"two_button\",\n\t\n\t\t/**\n\t\t * The state duration (for `stateSave`) in seconds.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type int\n\t\t *  @default 0\n\t\t */\n\t\t\"iStateDuration\": 0,\n\t\n\t\t/**\n\t\t * Array of callback functions for state saving. Each array element is an\n\t\t * object with the following parameters:\n\t\t *   <ul>\n\t\t *     <li>function:fn - function to call. Takes two parameters, oSettings\n\t\t *       and the JSON string to save that has been thus far created. Returns\n\t\t *       a JSON string to be inserted into a json object\n\t\t *       (i.e. '\"param\": [ 0, 1, 2]')</li>\n\t\t *     <li>string:sName - name of callback</li>\n\t\t *   </ul>\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoStateSave\": [],\n\t\n\t\t/**\n\t\t * Array of callback functions for state loading. Each array element is an\n\t\t * object with the following parameters:\n\t\t *   <ul>\n\t\t *     <li>function:fn - function to call. Takes two parameters, oSettings\n\t\t *       and the object stored. May return false to cancel state loading</li>\n\t\t *     <li>string:sName - name of callback</li>\n\t\t *   </ul>\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoStateLoad\": [],\n\t\n\t\t/**\n\t\t * State that was saved. Useful for back reference\n\t\t *  @type object\n\t\t *  @default null\n\t\t */\n\t\t\"oSavedState\": null,\n\t\n\t\t/**\n\t\t * State that was loaded. Useful for back reference\n\t\t *  @type object\n\t\t *  @default null\n\t\t */\n\t\t\"oLoadedState\": null,\n\t\n\t\t/**\n\t\t * Source url for AJAX data for the table.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sAjaxSource\": null,\n\t\n\t\t/**\n\t\t * Property from a given object from which to read the table data from. This\n\t\t * can be an empty string (when not server-side processing), in which case\n\t\t * it is  assumed an an array is given directly.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type string\n\t\t */\n\t\t\"sAjaxDataProp\": null,\n\t\n\t\t/**\n\t\t * Note if draw should be blocked while getting data\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t */\n\t\t\"bAjaxDataGet\": true,\n\t\n\t\t/**\n\t\t * The last jQuery XHR object that was used for server-side data gathering.\n\t\t * This can be used for working with the XHR information in one of the\n\t\t * callbacks\n\t\t *  @type object\n\t\t *  @default null\n\t\t */\n\t\t\"jqXHR\": null,\n\t\n\t\t/**\n\t\t * JSON returned from the server in the last Ajax request\n\t\t *  @type object\n\t\t *  @default undefined\n\t\t */\n\t\t\"json\": undefined,\n\t\n\t\t/**\n\t\t * Data submitted as part of the last Ajax request\n\t\t *  @type object\n\t\t *  @default undefined\n\t\t */\n\t\t\"oAjaxData\": undefined,\n\t\n\t\t/**\n\t\t * Function to get the server-side data.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type function\n\t\t */\n\t\t\"fnServerData\": null,\n\t\n\t\t/**\n\t\t * Functions which are called prior to sending an Ajax request so extra\n\t\t * parameters can easily be sent to the server\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoServerParams\": [],\n\t\n\t\t/**\n\t\t * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if\n\t\t * required).\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type string\n\t\t */\n\t\t\"sServerMethod\": null,\n\t\n\t\t/**\n\t\t * Format numbers for display.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type function\n\t\t */\n\t\t\"fnFormatNumber\": null,\n\t\n\t\t/**\n\t\t * List of options that can be used for the user selectable length menu.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aLengthMenu\": null,\n\t\n\t\t/**\n\t\t * Counter for the draws that the table does. Also used as a tracker for\n\t\t * server-side processing\n\t\t *  @type int\n\t\t *  @default 0\n\t\t */\n\t\t\"iDraw\": 0,\n\t\n\t\t/**\n\t\t * Indicate if a redraw is being done - useful for Ajax\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t */\n\t\t\"bDrawing\": false,\n\t\n\t\t/**\n\t\t * Draw index (iDraw) of the last error when parsing the returned data\n\t\t *  @type int\n\t\t *  @default -1\n\t\t */\n\t\t\"iDrawError\": -1,\n\t\n\t\t/**\n\t\t * Paging display length\n\t\t *  @type int\n\t\t *  @default 10\n\t\t */\n\t\t\"_iDisplayLength\": 10,\n\t\n\t\t/**\n\t\t * Paging start point - aiDisplay index\n\t\t *  @type int\n\t\t *  @default 0\n\t\t */\n\t\t\"_iDisplayStart\": 0,\n\t\n\t\t/**\n\t\t * Server-side processing - number of records in the result set\n\t\t * (i.e. before filtering), Use fnRecordsTotal rather than\n\t\t * this property to get the value of the number of records, regardless of\n\t\t * the server-side processing setting.\n\t\t *  @type int\n\t\t *  @default 0\n\t\t *  @private\n\t\t */\n\t\t\"_iRecordsTotal\": 0,\n\t\n\t\t/**\n\t\t * Server-side processing - number of records in the current display set\n\t\t * (i.e. after filtering). Use fnRecordsDisplay rather than\n\t\t * this property to get the value of the number of records, regardless of\n\t\t * the server-side processing setting.\n\t\t *  @type boolean\n\t\t *  @default 0\n\t\t *  @private\n\t\t */\n\t\t\"_iRecordsDisplay\": 0,\n\t\n\t\t/**\n\t\t * Flag to indicate if jQuery UI marking and classes should be used.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bJUI\": null,\n\t\n\t\t/**\n\t\t * The classes to use for the table\n\t\t *  @type object\n\t\t *  @default {}\n\t\t */\n\t\t\"oClasses\": {},\n\t\n\t\t/**\n\t\t * Flag attached to the settings object so you can check in the draw\n\t\t * callback if filtering has been done in the draw. Deprecated in favour of\n\t\t * events.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *  @deprecated\n\t\t */\n\t\t\"bFiltered\": false,\n\t\n\t\t/**\n\t\t * Flag attached to the settings object so you can check in the draw\n\t\t * callback if sorting has been done in the draw. Deprecated in favour of\n\t\t * events.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *  @deprecated\n\t\t */\n\t\t\"bSorted\": false,\n\t\n\t\t/**\n\t\t * Indicate that if multiple rows are in the header and there is more than\n\t\t * one unique cell per column, if the top one (true) or bottom one (false)\n\t\t * should be used for sorting / title by DataTables.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bSortCellsTop\": null,\n\t\n\t\t/**\n\t\t * Initialisation object that is used for the table\n\t\t *  @type object\n\t\t *  @default null\n\t\t */\n\t\t\"oInit\": null,\n\t\n\t\t/**\n\t\t * Destroy callback functions - for plug-ins to attach themselves to the\n\t\t * destroy so they can clean up markup and events.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoDestroyCallback\": [],\n\t\n\t\n\t\t/**\n\t\t * Get the number of records in the current record set, before filtering\n\t\t *  @type function\n\t\t */\n\t\t\"fnRecordsTotal\": function ()\n\t\t{\n\t\t\treturn _fnDataSource( this ) == 'ssp' ?\n\t\t\t\tthis._iRecordsTotal * 1 :\n\t\t\t\tthis.aiDisplayMaster.length;\n\t\t},\n\t\n\t\t/**\n\t\t * Get the number of records in the current record set, after filtering\n\t\t *  @type function\n\t\t */\n\t\t\"fnRecordsDisplay\": function ()\n\t\t{\n\t\t\treturn _fnDataSource( this ) == 'ssp' ?\n\t\t\t\tthis._iRecordsDisplay * 1 :\n\t\t\t\tthis.aiDisplay.length;\n\t\t},\n\t\n\t\t/**\n\t\t * Get the display end point - aiDisplay index\n\t\t *  @type function\n\t\t */\n\t\t\"fnDisplayEnd\": function ()\n\t\t{\n\t\t\tvar\n\t\t\t\tlen      = this._iDisplayLength,\n\t\t\t\tstart    = this._iDisplayStart,\n\t\t\t\tcalc     = start + len,\n\t\t\t\trecords  = this.aiDisplay.length,\n\t\t\t\tfeatures = this.oFeatures,\n\t\t\t\tpaginate = features.bPaginate;\n\t\n\t\t\tif ( features.bServerSide ) {\n\t\t\t\treturn paginate === false || len === -1 ?\n\t\t\t\t\tstart + records :\n\t\t\t\t\tMath.min( start+len, this._iRecordsDisplay );\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn ! paginate || calc>records || len===-1 ?\n\t\t\t\t\trecords :\n\t\t\t\t\tcalc;\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * The DataTables object for this table\n\t\t *  @type object\n\t\t *  @default null\n\t\t */\n\t\t\"oInstance\": null,\n\t\n\t\t/**\n\t\t * Unique identifier for each instance of the DataTables object. If there\n\t\t * is an ID on the table node, then it takes that value, otherwise an\n\t\t * incrementing internal counter is used.\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sInstance\": null,\n\t\n\t\t/**\n\t\t * tabindex attribute value that is added to DataTables control elements, allowing\n\t\t * keyboard navigation of the table and its controls.\n\t\t */\n\t\t\"iTabIndex\": 0,\n\t\n\t\t/**\n\t\t * DIV container for the footer scrolling table if scrolling\n\t\t */\n\t\t\"nScrollHead\": null,\n\t\n\t\t/**\n\t\t * DIV container for the footer scrolling table if scrolling\n\t\t */\n\t\t\"nScrollFoot\": null,\n\t\n\t\t/**\n\t\t * Last applied sort\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aLastSort\": [],\n\t\n\t\t/**\n\t\t * Stored plug-in instances\n\t\t *  @type object\n\t\t *  @default {}\n\t\t */\n\t\t\"oPlugins\": {}\n\t};\n\n\t/**\n\t * Extension object for DataTables that is used to provide all extension\n\t * options.\n\t *\n\t * Note that the `DataTable.ext` object is available through\n\t * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is\n\t * also aliased to `jQuery.fn.dataTableExt` for historic reasons.\n\t *  @namespace\n\t *  @extends DataTable.models.ext\n\t */\n\t\n\t\n\t/**\n\t * DataTables extensions\n\t * \n\t * This namespace acts as a collection area for plug-ins that can be used to\n\t * extend DataTables capabilities. Indeed many of the build in methods\n\t * use this method to provide their own capabilities (sorting methods for\n\t * example).\n\t *\n\t * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy\n\t * reasons\n\t *\n\t *  @namespace\n\t */\n\tDataTable.ext = _ext = {\n\t\t/**\n\t\t * Buttons. For use with the Buttons extension for DataTables. This is\n\t\t * defined here so other extensions can define buttons regardless of load\n\t\t * order. It is _not_ used by DataTables core.\n\t\t *\n\t\t *  @type object\n\t\t *  @default {}\n\t\t */\n\t\tbuttons: {},\n\t\n\t\n\t\t/**\n\t\t * Element class names\n\t\t *\n\t\t *  @type object\n\t\t *  @default {}\n\t\t */\n\t\tclasses: {},\n\t\n\t\n\t\t/**\n\t\t * Error reporting.\n\t\t * \n\t\t * How should DataTables report an error. Can take the value 'alert',\n\t\t * 'throw', 'none' or a function.\n\t\t *\n\t\t *  @type string|function\n\t\t *  @default alert\n\t\t */\n\t\terrMode: \"alert\",\n\t\n\t\n\t\t/**\n\t\t * Feature plug-ins.\n\t\t * \n\t\t * This is an array of objects which describe the feature plug-ins that are\n\t\t * available to DataTables. These feature plug-ins are then available for\n\t\t * use through the `dom` initialisation option.\n\t\t * \n\t\t * Each feature plug-in is described by an object which must have the\n\t\t * following properties:\n\t\t * \n\t\t * * `fnInit` - function that is used to initialise the plug-in,\n\t\t * * `cFeature` - a character so the feature can be enabled by the `dom`\n\t\t *   instillation option. This is case sensitive.\n\t\t *\n\t\t * The `fnInit` function has the following input parameters:\n\t\t *\n\t\t * 1. `{object}` DataTables settings object: see\n\t\t *    {@link DataTable.models.oSettings}\n\t\t *\n\t\t * And the following return is expected:\n\t\t * \n\t\t * * {node|null} The element which contains your feature. Note that the\n\t\t *   return may also be void if your plug-in does not require to inject any\n\t\t *   DOM elements into DataTables control (`dom`) - for example this might\n\t\t *   be useful when developing a plug-in which allows table control via\n\t\t *   keyboard entry\n\t\t *\n\t\t *  @type array\n\t\t *\n\t\t *  @example\n\t\t *    $.fn.dataTable.ext.features.push( {\n\t\t *      \"fnInit\": function( oSettings ) {\n\t\t *        return new TableTools( { \"oDTSettings\": oSettings } );\n\t\t *      },\n\t\t *      \"cFeature\": \"T\"\n\t\t *    } );\n\t\t */\n\t\tfeature: [],\n\t\n\t\n\t\t/**\n\t\t * Row searching.\n\t\t * \n\t\t * This method of searching is complimentary to the default type based\n\t\t * searching, and a lot more comprehensive as it allows you complete control\n\t\t * over the searching logic. Each element in this array is a function\n\t\t * (parameters described below) that is called for every row in the table,\n\t\t * and your logic decides if it should be included in the searching data set\n\t\t * or not.\n\t\t *\n\t\t * Searching functions have the following input parameters:\n\t\t *\n\t\t * 1. `{object}` DataTables settings object: see\n\t\t *    {@link DataTable.models.oSettings}\n\t\t * 2. `{array|object}` Data for the row to be processed (same as the\n\t\t *    original format that was passed in as the data source, or an array\n\t\t *    from a DOM data source\n\t\t * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which\n\t\t *    can be useful to retrieve the `TR` element if you need DOM interaction.\n\t\t *\n\t\t * And the following return is expected:\n\t\t *\n\t\t * * {boolean} Include the row in the searched result set (true) or not\n\t\t *   (false)\n\t\t *\n\t\t * Note that as with the main search ability in DataTables, technically this\n\t\t * is \"filtering\", since it is subtractive. However, for consistency in\n\t\t * naming we call it searching here.\n\t\t *\n\t\t *  @type array\n\t\t *  @default []\n\t\t *\n\t\t *  @example\n\t\t *    // The following example shows custom search being applied to the\n\t\t *    // fourth column (i.e. the data[3] index) based on two input values\n\t\t *    // from the end-user, matching the data in a certain range.\n\t\t *    $.fn.dataTable.ext.search.push(\n\t\t *      function( settings, data, dataIndex ) {\n\t\t *        var min = document.getElementById('min').value * 1;\n\t\t *        var max = document.getElementById('max').value * 1;\n\t\t *        var version = data[3] == \"-\" ? 0 : data[3]*1;\n\t\t *\n\t\t *        if ( min == \"\" && max == \"\" ) {\n\t\t *          return true;\n\t\t *        }\n\t\t *        else if ( min == \"\" && version < max ) {\n\t\t *          return true;\n\t\t *        }\n\t\t *        else if ( min < version && \"\" == max ) {\n\t\t *          return true;\n\t\t *        }\n\t\t *        else if ( min < version && version < max ) {\n\t\t *          return true;\n\t\t *        }\n\t\t *        return false;\n\t\t *      }\n\t\t *    );\n\t\t */\n\t\tsearch: [],\n\t\n\t\n\t\t/**\n\t\t * Selector extensions\n\t\t *\n\t\t * The `selector` option can be used to extend the options available for the\n\t\t * selector modifier options (`selector-modifier` object data type) that\n\t\t * each of the three built in selector types offer (row, column and cell +\n\t\t * their plural counterparts). For example the Select extension uses this\n\t\t * mechanism to provide an option to select only rows, columns and cells\n\t\t * that have been marked as selected by the end user (`{selected: true}`),\n\t\t * which can be used in conjunction with the existing built in selector\n\t\t * options.\n\t\t *\n\t\t * Each property is an array to which functions can be pushed. The functions\n\t\t * take three attributes:\n\t\t *\n\t\t * * Settings object for the host table\n\t\t * * Options object (`selector-modifier` object type)\n\t\t * * Array of selected item indexes\n\t\t *\n\t\t * The return is an array of the resulting item indexes after the custom\n\t\t * selector has been applied.\n\t\t *\n\t\t *  @type object\n\t\t */\n\t\tselector: {\n\t\t\tcell: [],\n\t\t\tcolumn: [],\n\t\t\trow: []\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * Internal functions, exposed for used in plug-ins.\n\t\t * \n\t\t * Please note that you should not need to use the internal methods for\n\t\t * anything other than a plug-in (and even then, try to avoid if possible).\n\t\t * The internal function may change between releases.\n\t\t *\n\t\t *  @type object\n\t\t *  @default {}\n\t\t */\n\t\tinternal: {},\n\t\n\t\n\t\t/**\n\t\t * Legacy configuration options. Enable and disable legacy options that\n\t\t * are available in DataTables.\n\t\t *\n\t\t *  @type object\n\t\t */\n\t\tlegacy: {\n\t\t\t/**\n\t\t\t * Enable / disable DataTables 1.9 compatible server-side processing\n\t\t\t * requests\n\t\t\t *\n\t\t\t *  @type boolean\n\t\t\t *  @default null\n\t\t\t */\n\t\t\tajax: null\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * Pagination plug-in methods.\n\t\t * \n\t\t * Each entry in this object is a function and defines which buttons should\n\t\t * be shown by the pagination rendering method that is used for the table:\n\t\t * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the\n\t\t * buttons are displayed in the document, while the functions here tell it\n\t\t * what buttons to display. This is done by returning an array of button\n\t\t * descriptions (what each button will do).\n\t\t *\n\t\t * Pagination types (the four built in options and any additional plug-in\n\t\t * options defined here) can be used through the `paginationType`\n\t\t * initialisation parameter.\n\t\t *\n\t\t * The functions defined take two parameters:\n\t\t *\n\t\t * 1. `{int} page` The current page index\n\t\t * 2. `{int} pages` The number of pages in the table\n\t\t *\n\t\t * Each function is expected to return an array where each element of the\n\t\t * array can be one of:\n\t\t *\n\t\t * * `first` - Jump to first page when activated\n\t\t * * `last` - Jump to last page when activated\n\t\t * * `previous` - Show previous page when activated\n\t\t * * `next` - Show next page when activated\n\t\t * * `{int}` - Show page of the index given\n\t\t * * `{array}` - A nested array containing the above elements to add a\n\t\t *   containing 'DIV' element (might be useful for styling).\n\t\t *\n\t\t * Note that DataTables v1.9- used this object slightly differently whereby\n\t\t * an object with two functions would be defined for each plug-in. That\n\t\t * ability is still supported by DataTables 1.10+ to provide backwards\n\t\t * compatibility, but this option of use is now decremented and no longer\n\t\t * documented in DataTables 1.10+.\n\t\t *\n\t\t *  @type object\n\t\t *  @default {}\n\t\t *\n\t\t *  @example\n\t\t *    // Show previous, next and current page buttons only\n\t\t *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {\n\t\t *      return [ 'previous', page, 'next' ];\n\t\t *    };\n\t\t */\n\t\tpager: {},\n\t\n\t\n\t\trenderer: {\n\t\t\tpageButton: {},\n\t\t\theader: {}\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * Ordering plug-ins - custom data source\n\t\t * \n\t\t * The extension options for ordering of data available here is complimentary\n\t\t * to the default type based ordering that DataTables typically uses. It\n\t\t * allows much greater control over the the data that is being used to\n\t\t * order a column, but is necessarily therefore more complex.\n\t\t * \n\t\t * This type of ordering is useful if you want to do ordering based on data\n\t\t * live from the DOM (for example the contents of an 'input' element) rather\n\t\t * than just the static string that DataTables knows of.\n\t\t * \n\t\t * The way these plug-ins work is that you create an array of the values you\n\t\t * wish to be ordering for the column in question and then return that\n\t\t * array. The data in the array much be in the index order of the rows in\n\t\t * the table (not the currently ordering order!). Which order data gathering\n\t\t * function is run here depends on the `dt-init columns.orderDataType`\n\t\t * parameter that is used for the column (if any).\n\t\t *\n\t\t * The functions defined take two parameters:\n\t\t *\n\t\t * 1. `{object}` DataTables settings object: see\n\t\t *    {@link DataTable.models.oSettings}\n\t\t * 2. `{int}` Target column index\n\t\t *\n\t\t * Each function is expected to return an array:\n\t\t *\n\t\t * * `{array}` Data for the column to be ordering upon\n\t\t *\n\t\t *  @type array\n\t\t *\n\t\t *  @example\n\t\t *    // Ordering using `input` node values\n\t\t *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )\n\t\t *    {\n\t\t *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {\n\t\t *        return $('input', td).val();\n\t\t *      } );\n\t\t *    }\n\t\t */\n\t\torder: {},\n\t\n\t\n\t\t/**\n\t\t * Type based plug-ins.\n\t\t *\n\t\t * Each column in DataTables has a type assigned to it, either by automatic\n\t\t * detection or by direct assignment using the `type` option for the column.\n\t\t * The type of a column will effect how it is ordering and search (plug-ins\n\t\t * can also make use of the column type if required).\n\t\t *\n\t\t * @namespace\n\t\t */\n\t\ttype: {\n\t\t\t/**\n\t\t\t * Type detection functions.\n\t\t\t *\n\t\t\t * The functions defined in this object are used to automatically detect\n\t\t\t * a column's type, making initialisation of DataTables super easy, even\n\t\t\t * when complex data is in the table.\n\t\t\t *\n\t\t\t * The functions defined take two parameters:\n\t\t\t *\n\t\t     *  1. `{*}` Data from the column cell to be analysed\n\t\t     *  2. `{settings}` DataTables settings object. This can be used to\n\t\t     *     perform context specific type detection - for example detection\n\t\t     *     based on language settings such as using a comma for a decimal\n\t\t     *     place. Generally speaking the options from the settings will not\n\t\t     *     be required\n\t\t\t *\n\t\t\t * Each function is expected to return:\n\t\t\t *\n\t\t\t * * `{string|null}` Data type detected, or null if unknown (and thus\n\t\t\t *   pass it on to the other type detection functions.\n\t\t\t *\n\t\t\t *  @type array\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Currency type detection plug-in:\n\t\t\t *    $.fn.dataTable.ext.type.detect.push(\n\t\t\t *      function ( data, settings ) {\n\t\t\t *        // Check the numeric part\n\t\t\t *        if ( ! $.isNumeric( data.substring(1) ) ) {\n\t\t\t *          return null;\n\t\t\t *        }\n\t\t\t *\n\t\t\t *        // Check prefixed by currency\n\t\t\t *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {\n\t\t\t *          return 'currency';\n\t\t\t *        }\n\t\t\t *        return null;\n\t\t\t *      }\n\t\t\t *    );\n\t\t\t */\n\t\t\tdetect: [],\n\t\n\t\n\t\t\t/**\n\t\t\t * Type based search formatting.\n\t\t\t *\n\t\t\t * The type based searching functions can be used to pre-format the\n\t\t\t * data to be search on. For example, it can be used to strip HTML\n\t\t\t * tags or to de-format telephone numbers for numeric only searching.\n\t\t\t *\n\t\t\t * Note that is a search is not defined for a column of a given type,\n\t\t\t * no search formatting will be performed.\n\t\t\t * \n\t\t\t * Pre-processing of searching data plug-ins - When you assign the sType\n\t\t\t * for a column (or have it automatically detected for you by DataTables\n\t\t\t * or a type detection plug-in), you will typically be using this for\n\t\t\t * custom sorting, but it can also be used to provide custom searching\n\t\t\t * by allowing you to pre-processing the data and returning the data in\n\t\t\t * the format that should be searched upon. This is done by adding\n\t\t\t * functions this object with a parameter name which matches the sType\n\t\t\t * for that target column. This is the corollary of <i>afnSortData</i>\n\t\t\t * for searching data.\n\t\t\t *\n\t\t\t * The functions defined take a single parameter:\n\t\t\t *\n\t\t     *  1. `{*}` Data from the column cell to be prepared for searching\n\t\t\t *\n\t\t\t * Each function is expected to return:\n\t\t\t *\n\t\t\t * * `{string|null}` Formatted string that will be used for the searching.\n\t\t\t *\n\t\t\t *  @type object\n\t\t\t *  @default {}\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {\n\t\t\t *      return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );\n\t\t\t *    }\n\t\t\t */\n\t\t\tsearch: {},\n\t\n\t\n\t\t\t/**\n\t\t\t * Type based ordering.\n\t\t\t *\n\t\t\t * The column type tells DataTables what ordering to apply to the table\n\t\t\t * when a column is sorted upon. The order for each type that is defined,\n\t\t\t * is defined by the functions available in this object.\n\t\t\t *\n\t\t\t * Each ordering option can be described by three properties added to\n\t\t\t * this object:\n\t\t\t *\n\t\t\t * * `{type}-pre` - Pre-formatting function\n\t\t\t * * `{type}-asc` - Ascending order function\n\t\t\t * * `{type}-desc` - Descending order function\n\t\t\t *\n\t\t\t * All three can be used together, only `{type}-pre` or only\n\t\t\t * `{type}-asc` and `{type}-desc` together. It is generally recommended\n\t\t\t * that only `{type}-pre` is used, as this provides the optimal\n\t\t\t * implementation in terms of speed, although the others are provided\n\t\t\t * for compatibility with existing Javascript sort functions.\n\t\t\t *\n\t\t\t * `{type}-pre`: Functions defined take a single parameter:\n\t\t\t *\n\t\t     *  1. `{*}` Data from the column cell to be prepared for ordering\n\t\t\t *\n\t\t\t * And return:\n\t\t\t *\n\t\t\t * * `{*}` Data to be sorted upon\n\t\t\t *\n\t\t\t * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort\n\t\t\t * functions, taking two parameters:\n\t\t\t *\n\t\t     *  1. `{*}` Data to compare to the second parameter\n\t\t     *  2. `{*}` Data to compare to the first parameter\n\t\t\t *\n\t\t\t * And returning:\n\t\t\t *\n\t\t\t * * `{*}` Ordering match: <0 if first parameter should be sorted lower\n\t\t\t *   than the second parameter, ===0 if the two parameters are equal and\n\t\t\t *   >0 if the first parameter should be sorted height than the second\n\t\t\t *   parameter.\n\t\t\t * \n\t\t\t *  @type object\n\t\t\t *  @default {}\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Numeric ordering of formatted numbers with a pre-formatter\n\t\t\t *    $.extend( $.fn.dataTable.ext.type.order, {\n\t\t\t *      \"string-pre\": function(x) {\n\t\t\t *        a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );\n\t\t\t *        return parseFloat( a );\n\t\t\t *      }\n\t\t\t *    } );\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Case-sensitive string ordering, with no pre-formatting method\n\t\t\t *    $.extend( $.fn.dataTable.ext.order, {\n\t\t\t *      \"string-case-asc\": function(x,y) {\n\t\t\t *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n\t\t\t *      },\n\t\t\t *      \"string-case-desc\": function(x,y) {\n\t\t\t *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));\n\t\t\t *      }\n\t\t\t *    } );\n\t\t\t */\n\t\t\torder: {}\n\t\t},\n\t\n\t\t/**\n\t\t * Unique DataTables instance counter\n\t\t *\n\t\t * @type int\n\t\t * @private\n\t\t */\n\t\t_unique: 0,\n\t\n\t\n\t\t//\n\t\t// Depreciated\n\t\t// The following properties are retained for backwards compatiblity only.\n\t\t// The should not be used in new projects and will be removed in a future\n\t\t// version\n\t\t//\n\t\n\t\t/**\n\t\t * Version check function.\n\t\t *  @type function\n\t\t *  @depreciated Since 1.10\n\t\t */\n\t\tfnVersionCheck: DataTable.fnVersionCheck,\n\t\n\t\n\t\t/**\n\t\t * Index for what 'this' index API functions should use\n\t\t *  @type int\n\t\t *  @deprecated Since v1.10\n\t\t */\n\t\tiApiIndex: 0,\n\t\n\t\n\t\t/**\n\t\t * jQuery UI class container\n\t\t *  @type object\n\t\t *  @deprecated Since v1.10\n\t\t */\n\t\toJUIClasses: {},\n\t\n\t\n\t\t/**\n\t\t * Software version\n\t\t *  @type string\n\t\t *  @deprecated Since v1.10\n\t\t */\n\t\tsVersion: DataTable.version\n\t};\n\t\n\t\n\t//\n\t// Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts\n\t//\n\t$.extend( _ext, {\n\t\tafnFiltering: _ext.search,\n\t\taTypes:       _ext.type.detect,\n\t\tofnSearch:    _ext.type.search,\n\t\toSort:        _ext.type.order,\n\t\tafnSortData:  _ext.order,\n\t\taoFeatures:   _ext.feature,\n\t\toApi:         _ext.internal,\n\t\toStdClasses:  _ext.classes,\n\t\toPagination:  _ext.pager\n\t} );\n\t\n\t\n\t$.extend( DataTable.ext.classes, {\n\t\t\"sTable\": \"dataTable\",\n\t\t\"sNoFooter\": \"no-footer\",\n\t\n\t\t/* Paging buttons */\n\t\t\"sPageButton\": \"paginate_button\",\n\t\t\"sPageButtonActive\": \"current\",\n\t\t\"sPageButtonDisabled\": \"disabled\",\n\t\n\t\t/* Striping classes */\n\t\t\"sStripeOdd\": \"odd\",\n\t\t\"sStripeEven\": \"even\",\n\t\n\t\t/* Empty row */\n\t\t\"sRowEmpty\": \"dataTables_empty\",\n\t\n\t\t/* Features */\n\t\t\"sWrapper\": \"dataTables_wrapper\",\n\t\t\"sFilter\": \"dataTables_filter\",\n\t\t\"sInfo\": \"dataTables_info\",\n\t\t\"sPaging\": \"dataTables_paginate paging_\", /* Note that the type is postfixed */\n\t\t\"sLength\": \"dataTables_length\",\n\t\t\"sProcessing\": \"dataTables_processing\",\n\t\n\t\t/* Sorting */\n\t\t\"sSortAsc\": \"sorting_asc\",\n\t\t\"sSortDesc\": \"sorting_desc\",\n\t\t\"sSortable\": \"sorting\", /* Sortable in both directions */\n\t\t\"sSortableAsc\": \"sorting_asc_disabled\",\n\t\t\"sSortableDesc\": \"sorting_desc_disabled\",\n\t\t\"sSortableNone\": \"sorting_disabled\",\n\t\t\"sSortColumn\": \"sorting_\", /* Note that an int is postfixed for the sorting order */\n\t\n\t\t/* Filtering */\n\t\t\"sFilterInput\": \"\",\n\t\n\t\t/* Page length */\n\t\t\"sLengthSelect\": \"\",\n\t\n\t\t/* Scrolling */\n\t\t\"sScrollWrapper\": \"dataTables_scroll\",\n\t\t\"sScrollHead\": \"dataTables_scrollHead\",\n\t\t\"sScrollHeadInner\": \"dataTables_scrollHeadInner\",\n\t\t\"sScrollBody\": \"dataTables_scrollBody\",\n\t\t\"sScrollFoot\": \"dataTables_scrollFoot\",\n\t\t\"sScrollFootInner\": \"dataTables_scrollFootInner\",\n\t\n\t\t/* Misc */\n\t\t\"sHeaderTH\": \"\",\n\t\t\"sFooterTH\": \"\",\n\t\n\t\t// Deprecated\n\t\t\"sSortJUIAsc\": \"\",\n\t\t\"sSortJUIDesc\": \"\",\n\t\t\"sSortJUI\": \"\",\n\t\t\"sSortJUIAscAllowed\": \"\",\n\t\t\"sSortJUIDescAllowed\": \"\",\n\t\t\"sSortJUIWrapper\": \"\",\n\t\t\"sSortIcon\": \"\",\n\t\t\"sJUIHeader\": \"\",\n\t\t\"sJUIFooter\": \"\"\n\t} );\n\t\n\t\n\t(function() {\n\t\n\t// Reused strings for better compression. Closure compiler appears to have a\n\t// weird edge case where it is trying to expand strings rather than use the\n\t// variable version. This results in about 200 bytes being added, for very\n\t// little preference benefit since it this run on script load only.\n\tvar _empty = '';\n\t_empty = '';\n\t\n\tvar _stateDefault = _empty + 'ui-state-default';\n\tvar _sortIcon     = _empty + 'css_right ui-icon ui-icon-';\n\tvar _headerFooter = _empty + 'fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix';\n\t\n\t$.extend( DataTable.ext.oJUIClasses, DataTable.ext.classes, {\n\t\t/* Full numbers paging buttons */\n\t\t\"sPageButton\":         \"fg-button ui-button \"+_stateDefault,\n\t\t\"sPageButtonActive\":   \"ui-state-disabled\",\n\t\t\"sPageButtonDisabled\": \"ui-state-disabled\",\n\t\n\t\t/* Features */\n\t\t\"sPaging\": \"dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi \"+\n\t\t\t\"ui-buttonset-multi paging_\", /* Note that the type is postfixed */\n\t\n\t\t/* Sorting */\n\t\t\"sSortAsc\":            _stateDefault+\" sorting_asc\",\n\t\t\"sSortDesc\":           _stateDefault+\" sorting_desc\",\n\t\t\"sSortable\":           _stateDefault+\" sorting\",\n\t\t\"sSortableAsc\":        _stateDefault+\" sorting_asc_disabled\",\n\t\t\"sSortableDesc\":       _stateDefault+\" sorting_desc_disabled\",\n\t\t\"sSortableNone\":       _stateDefault+\" sorting_disabled\",\n\t\t\"sSortJUIAsc\":         _sortIcon+\"triangle-1-n\",\n\t\t\"sSortJUIDesc\":        _sortIcon+\"triangle-1-s\",\n\t\t\"sSortJUI\":            _sortIcon+\"carat-2-n-s\",\n\t\t\"sSortJUIAscAllowed\":  _sortIcon+\"carat-1-n\",\n\t\t\"sSortJUIDescAllowed\": _sortIcon+\"carat-1-s\",\n\t\t\"sSortJUIWrapper\":     \"DataTables_sort_wrapper\",\n\t\t\"sSortIcon\":           \"DataTables_sort_icon\",\n\t\n\t\t/* Scrolling */\n\t\t\"sScrollHead\": \"dataTables_scrollHead \"+_stateDefault,\n\t\t\"sScrollFoot\": \"dataTables_scrollFoot \"+_stateDefault,\n\t\n\t\t/* Misc */\n\t\t\"sHeaderTH\":  _stateDefault,\n\t\t\"sFooterTH\":  _stateDefault,\n\t\t\"sJUIHeader\": _headerFooter+\" ui-corner-tl ui-corner-tr\",\n\t\t\"sJUIFooter\": _headerFooter+\" ui-corner-bl ui-corner-br\"\n\t} );\n\t\n\t}());\n\t\n\t\n\t\n\tvar extPagination = DataTable.ext.pager;\n\t\n\tfunction _numbers ( page, pages ) {\n\t\tvar\n\t\t\tnumbers = [],\n\t\t\tbuttons = extPagination.numbers_length,\n\t\t\thalf = Math.floor( buttons / 2 ),\n\t\t\ti = 1;\n\t\n\t\tif ( pages <= buttons ) {\n\t\t\tnumbers = _range( 0, pages );\n\t\t}\n\t\telse if ( page <= half ) {\n\t\t\tnumbers = _range( 0, buttons-2 );\n\t\t\tnumbers.push( 'ellipsis' );\n\t\t\tnumbers.push( pages-1 );\n\t\t}\n\t\telse if ( page >= pages - 1 - half ) {\n\t\t\tnumbers = _range( pages-(buttons-2), pages );\n\t\t\tnumbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6\n\t\t\tnumbers.splice( 0, 0, 0 );\n\t\t}\n\t\telse {\n\t\t\tnumbers = _range( page-half+2, page+half-1 );\n\t\t\tnumbers.push( 'ellipsis' );\n\t\t\tnumbers.push( pages-1 );\n\t\t\tnumbers.splice( 0, 0, 'ellipsis' );\n\t\t\tnumbers.splice( 0, 0, 0 );\n\t\t}\n\t\n\t\tnumbers.DT_el = 'span';\n\t\treturn numbers;\n\t}\n\t\n\t\n\t$.extend( extPagination, {\n\t\tsimple: function ( page, pages ) {\n\t\t\treturn [ 'previous', 'next' ];\n\t\t},\n\t\n\t\tfull: function ( page, pages ) {\n\t\t\treturn [  'first', 'previous', 'next', 'last' ];\n\t\t},\n\t\n\t\tsimple_numbers: function ( page, pages ) {\n\t\t\treturn [ 'previous', _numbers(page, pages), 'next' ];\n\t\t},\n\t\n\t\tfull_numbers: function ( page, pages ) {\n\t\t\treturn [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];\n\t\t},\n\t\n\t\t// For testing and plug-ins to use\n\t\t_numbers: _numbers,\n\t\n\t\t// Number of number buttons (including ellipsis) to show. _Must be odd!_\n\t\tnumbers_length: 7\n\t} );\n\t\n\t\n\t$.extend( true, DataTable.ext.renderer, {\n\t\tpageButton: {\n\t\t\t_: function ( settings, host, idx, buttons, page, pages ) {\n\t\t\t\tvar classes = settings.oClasses;\n\t\t\t\tvar lang = settings.oLanguage.oPaginate;\n\t\t\t\tvar btnDisplay, btnClass, counter=0;\n\t\n\t\t\t\tvar attach = function( container, buttons ) {\n\t\t\t\t\tvar i, ien, node, button;\n\t\t\t\t\tvar clickHandler = function ( e ) {\n\t\t\t\t\t\t_fnPageChange( settings, e.data.action, true );\n\t\t\t\t\t};\n\t\n\t\t\t\t\tfor ( i=0, ien=buttons.length ; i<ien ; i++ ) {\n\t\t\t\t\t\tbutton = buttons[i];\n\t\n\t\t\t\t\t\tif ( $.isArray( button ) ) {\n\t\t\t\t\t\t\tvar inner = $( '<'+(button.DT_el || 'div')+'/>' )\n\t\t\t\t\t\t\t\t.appendTo( container );\n\t\t\t\t\t\t\tattach( inner, button );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tbtnDisplay = '';\n\t\t\t\t\t\t\tbtnClass = '';\n\t\n\t\t\t\t\t\t\tswitch ( button ) {\n\t\t\t\t\t\t\t\tcase 'ellipsis':\n\t\t\t\t\t\t\t\t\tcontainer.append('<span class=\"ellipsis\">&#x2026;</span>');\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\tcase 'first':\n\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sFirst;\n\t\t\t\t\t\t\t\t\tbtnClass = button + (page > 0 ?\n\t\t\t\t\t\t\t\t\t\t'' : ' '+classes.sPageButtonDisabled);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\tcase 'previous':\n\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sPrevious;\n\t\t\t\t\t\t\t\t\tbtnClass = button + (page > 0 ?\n\t\t\t\t\t\t\t\t\t\t'' : ' '+classes.sPageButtonDisabled);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\tcase 'next':\n\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sNext;\n\t\t\t\t\t\t\t\t\tbtnClass = button + (page < pages-1 ?\n\t\t\t\t\t\t\t\t\t\t'' : ' '+classes.sPageButtonDisabled);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\tcase 'last':\n\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sLast;\n\t\t\t\t\t\t\t\t\tbtnClass = button + (page < pages-1 ?\n\t\t\t\t\t\t\t\t\t\t'' : ' '+classes.sPageButtonDisabled);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tbtnDisplay = button + 1;\n\t\t\t\t\t\t\t\t\tbtnClass = page === button ?\n\t\t\t\t\t\t\t\t\t\tclasses.sPageButtonActive : '';\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tif ( btnDisplay ) {\n\t\t\t\t\t\t\t\tnode = $('<a>', {\n\t\t\t\t\t\t\t\t\t\t'class': classes.sPageButton+' '+btnClass,\n\t\t\t\t\t\t\t\t\t\t'aria-controls': settings.sTableId,\n\t\t\t\t\t\t\t\t\t\t'data-dt-idx': counter,\n\t\t\t\t\t\t\t\t\t\t'tabindex': settings.iTabIndex,\n\t\t\t\t\t\t\t\t\t\t'id': idx === 0 && typeof button === 'string' ?\n\t\t\t\t\t\t\t\t\t\t\tsettings.sTableId +'_'+ button :\n\t\t\t\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t\t\t\t.html( btnDisplay )\n\t\t\t\t\t\t\t\t\t.appendTo( container );\n\t\n\t\t\t\t\t\t\t\t_fnBindAction(\n\t\t\t\t\t\t\t\t\tnode, {action: button}, clickHandler\n\t\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\t\tcounter++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\n\t\t\t\t// IE9 throws an 'unknown error' if document.activeElement is used\n\t\t\t\t// inside an iframe or frame. Try / catch the error. Not good for\n\t\t\t\t// accessibility, but neither are frames.\n\t\t\t\tvar activeEl;\n\t\n\t\t\t\ttry {\n\t\t\t\t\t// Because this approach is destroying and recreating the paging\n\t\t\t\t\t// elements, focus is lost on the select button which is bad for\n\t\t\t\t\t// accessibility. So we want to restore focus once the draw has\n\t\t\t\t\t// completed\n\t\t\t\t\tactiveEl = $(document.activeElement).data('dt-idx');\n\t\t\t\t}\n\t\t\t\tcatch (e) {}\n\t\n\t\t\t\tattach( $(host).empty(), buttons );\n\t\n\t\t\t\tif ( activeEl ) {\n\t\t\t\t\t$(host).find( '[data-dt-idx='+activeEl+']' ).focus();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} );\n\t\n\t\n\t\n\t// Built in type detection. See model.ext.aTypes for information about\n\t// what is required from this methods.\n\t$.extend( DataTable.ext.type.detect, [\n\t\t// Plain numbers - first since V8 detects some plain numbers as dates\n\t\t// e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).\n\t\tfunction ( d, settings )\n\t\t{\n\t\t\tvar decimal = settings.oLanguage.sDecimal;\n\t\t\treturn _isNumber( d, decimal ) ? 'num'+decimal : null;\n\t\t},\n\t\n\t\t// Dates (only those recognised by the browser's Date.parse)\n\t\tfunction ( d, settings )\n\t\t{\n\t\t\t// V8 will remove any unknown characters at the start and end of the\n\t\t\t// expression, leading to false matches such as `$245.12` or `10%` being\n\t\t\t// a valid date. See forum thread 18941 for detail.\n\t\t\tif ( d && !(d instanceof Date) && ( ! _re_date_start.test(d) || ! _re_date_end.test(d) ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tvar parsed = Date.parse(d);\n\t\t\treturn (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;\n\t\t},\n\t\n\t\t// Formatted numbers\n\t\tfunction ( d, settings )\n\t\t{\n\t\t\tvar decimal = settings.oLanguage.sDecimal;\n\t\t\treturn _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;\n\t\t},\n\t\n\t\t// HTML numeric\n\t\tfunction ( d, settings )\n\t\t{\n\t\t\tvar decimal = settings.oLanguage.sDecimal;\n\t\t\treturn _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;\n\t\t},\n\t\n\t\t// HTML numeric, formatted\n\t\tfunction ( d, settings )\n\t\t{\n\t\t\tvar decimal = settings.oLanguage.sDecimal;\n\t\t\treturn _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;\n\t\t},\n\t\n\t\t// HTML (this is strict checking - there must be html)\n\t\tfunction ( d, settings )\n\t\t{\n\t\t\treturn _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?\n\t\t\t\t'html' : null;\n\t\t}\n\t] );\n\t\n\t\n\t\n\t// Filter formatting functions. See model.ext.ofnSearch for information about\n\t// what is required from these methods.\n\t// \n\t// Note that additional search methods are added for the html numbers and\n\t// html formatted numbers by `_addNumericSort()` when we know what the decimal\n\t// place is\n\t\n\t\n\t$.extend( DataTable.ext.type.search, {\n\t\thtml: function ( data ) {\n\t\t\treturn _empty(data) ?\n\t\t\t\tdata :\n\t\t\t\ttypeof data === 'string' ?\n\t\t\t\t\tdata\n\t\t\t\t\t\t.replace( _re_new_lines, \" \" )\n\t\t\t\t\t\t.replace( _re_html, \"\" ) :\n\t\t\t\t\t'';\n\t\t},\n\t\n\t\tstring: function ( data ) {\n\t\t\treturn _empty(data) ?\n\t\t\t\tdata :\n\t\t\t\ttypeof data === 'string' ?\n\t\t\t\t\tdata.replace( _re_new_lines, \" \" ) :\n\t\t\t\t\tdata;\n\t\t}\n\t} );\n\t\n\t\n\t\n\tvar __numericReplace = function ( d, decimalPlace, re1, re2 ) {\n\t\tif ( d !== 0 && (!d || d === '-') ) {\n\t\t\treturn -Infinity;\n\t\t}\n\t\n\t\t// If a decimal place other than `.` is used, it needs to be given to the\n\t\t// function so we can detect it and replace with a `.` which is the only\n\t\t// decimal place Javascript recognises - it is not locale aware.\n\t\tif ( decimalPlace ) {\n\t\t\td = _numToDecimal( d, decimalPlace );\n\t\t}\n\t\n\t\tif ( d.replace ) {\n\t\t\tif ( re1 ) {\n\t\t\t\td = d.replace( re1, '' );\n\t\t\t}\n\t\n\t\t\tif ( re2 ) {\n\t\t\t\td = d.replace( re2, '' );\n\t\t\t}\n\t\t}\n\t\n\t\treturn d * 1;\n\t};\n\t\n\t\n\t// Add the numeric 'deformatting' functions for sorting and search. This is done\n\t// in a function to provide an easy ability for the language options to add\n\t// additional methods if a non-period decimal place is used.\n\tfunction _addNumericSort ( decimalPlace ) {\n\t\t$.each(\n\t\t\t{\n\t\t\t\t// Plain numbers\n\t\t\t\t\"num\": function ( d ) {\n\t\t\t\t\treturn __numericReplace( d, decimalPlace );\n\t\t\t\t},\n\t\n\t\t\t\t// Formatted numbers\n\t\t\t\t\"num-fmt\": function ( d ) {\n\t\t\t\t\treturn __numericReplace( d, decimalPlace, _re_formatted_numeric );\n\t\t\t\t},\n\t\n\t\t\t\t// HTML numeric\n\t\t\t\t\"html-num\": function ( d ) {\n\t\t\t\t\treturn __numericReplace( d, decimalPlace, _re_html );\n\t\t\t\t},\n\t\n\t\t\t\t// HTML numeric, formatted\n\t\t\t\t\"html-num-fmt\": function ( d ) {\n\t\t\t\t\treturn __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );\n\t\t\t\t}\n\t\t\t},\n\t\t\tfunction ( key, fn ) {\n\t\t\t\t// Add the ordering method\n\t\t\t\t_ext.type.order[ key+decimalPlace+'-pre' ] = fn;\n\t\n\t\t\t\t// For HTML types add a search formatter that will strip the HTML\n\t\t\t\tif ( key.match(/^html\\-/) ) {\n\t\t\t\t\t_ext.type.search[ key+decimalPlace ] = _ext.type.search.html;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n\t\n\t\n\t// Default sort methods\n\t$.extend( _ext.type.order, {\n\t\t// Dates\n\t\t\"date-pre\": function ( d ) {\n\t\t\treturn Date.parse( d ) || 0;\n\t\t},\n\t\n\t\t// html\n\t\t\"html-pre\": function ( a ) {\n\t\t\treturn _empty(a) ?\n\t\t\t\t'' :\n\t\t\t\ta.replace ?\n\t\t\t\t\ta.replace( /<.*?>/g, \"\" ).toLowerCase() :\n\t\t\t\t\ta+'';\n\t\t},\n\t\n\t\t// string\n\t\t\"string-pre\": function ( a ) {\n\t\t\t// This is a little complex, but faster than always calling toString,\n\t\t\t// http://jsperf.com/tostring-v-check\n\t\t\treturn _empty(a) ?\n\t\t\t\t'' :\n\t\t\t\ttypeof a === 'string' ?\n\t\t\t\t\ta.toLowerCase() :\n\t\t\t\t\t! a.toString ?\n\t\t\t\t\t\t'' :\n\t\t\t\t\t\ta.toString();\n\t\t},\n\t\n\t\t// string-asc and -desc are retained only for compatibility with the old\n\t\t// sort methods\n\t\t\"string-asc\": function ( x, y ) {\n\t\t\treturn ((x < y) ? -1 : ((x > y) ? 1 : 0));\n\t\t},\n\t\n\t\t\"string-desc\": function ( x, y ) {\n\t\t\treturn ((x < y) ? 1 : ((x > y) ? -1 : 0));\n\t\t}\n\t} );\n\t\n\t\n\t// Numeric sorting types - order doesn't matter here\n\t_addNumericSort( '' );\n\t\n\t\n\t$.extend( true, DataTable.ext.renderer, {\n\t\theader: {\n\t\t\t_: function ( settings, cell, column, classes ) {\n\t\t\t\t// No additional mark-up required\n\t\t\t\t// Attach a sort listener to update on sort - note that using the\n\t\t\t\t// `DT` namespace will allow the event to be removed automatically\n\t\t\t\t// on destroy, while the `dt` namespaced event is the one we are\n\t\t\t\t// listening for\n\t\t\t\t$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\n\t\t\t\t\tif ( settings !== ctx ) { // need to check this this is the host\n\t\t\t\t\t\treturn;               // table, not a nested one\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar colIdx = column.idx;\n\t\n\t\t\t\t\tcell\n\t\t\t\t\t\t.removeClass(\n\t\t\t\t\t\t\tcolumn.sSortingClass +' '+\n\t\t\t\t\t\t\tclasses.sSortAsc +' '+\n\t\t\t\t\t\t\tclasses.sSortDesc\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?\n\t\t\t\t\t\t\tclasses.sSortAsc : columns[ colIdx ] == 'desc' ?\n\t\t\t\t\t\t\t\tclasses.sSortDesc :\n\t\t\t\t\t\t\t\tcolumn.sSortingClass\n\t\t\t\t\t\t);\n\t\t\t\t} );\n\t\t\t},\n\t\n\t\t\tjqueryui: function ( settings, cell, column, classes ) {\n\t\t\t\t$('<div/>')\n\t\t\t\t\t.addClass( classes.sSortJUIWrapper )\n\t\t\t\t\t.append( cell.contents() )\n\t\t\t\t\t.append( $('<span/>')\n\t\t\t\t\t\t.addClass( classes.sSortIcon+' '+column.sSortingClassJUI )\n\t\t\t\t\t)\n\t\t\t\t\t.appendTo( cell );\n\t\n\t\t\t\t// Attach a sort listener to update on sort\n\t\t\t\t$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\n\t\t\t\t\tif ( settings !== ctx ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar colIdx = column.idx;\n\t\n\t\t\t\t\tcell\n\t\t\t\t\t\t.removeClass( classes.sSortAsc +\" \"+classes.sSortDesc )\n\t\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?\n\t\t\t\t\t\t\tclasses.sSortAsc : columns[ colIdx ] == 'desc' ?\n\t\t\t\t\t\t\t\tclasses.sSortDesc :\n\t\t\t\t\t\t\t\tcolumn.sSortingClass\n\t\t\t\t\t\t);\n\t\n\t\t\t\t\tcell\n\t\t\t\t\t\t.find( 'span.'+classes.sSortIcon )\n\t\t\t\t\t\t.removeClass(\n\t\t\t\t\t\t\tclasses.sSortJUIAsc +\" \"+\n\t\t\t\t\t\t\tclasses.sSortJUIDesc +\" \"+\n\t\t\t\t\t\t\tclasses.sSortJUI +\" \"+\n\t\t\t\t\t\t\tclasses.sSortJUIAscAllowed +\" \"+\n\t\t\t\t\t\t\tclasses.sSortJUIDescAllowed\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?\n\t\t\t\t\t\t\tclasses.sSortJUIAsc : columns[ colIdx ] == 'desc' ?\n\t\t\t\t\t\t\t\tclasses.sSortJUIDesc :\n\t\t\t\t\t\t\t\tcolumn.sSortingClassJUI\n\t\t\t\t\t\t);\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\t/*\n\t * Public helper functions. These aren't used internally by DataTables, or\n\t * called by any of the options passed into DataTables, but they can be used\n\t * externally by developers working with DataTables. They are helper functions\n\t * to make working with DataTables a little bit easier.\n\t */\n\t\n\t/**\n\t * Helpers for `columns.render`.\n\t *\n\t * The options defined here can be used with the `columns.render` initialisation\n\t * option to provide a display renderer. The following functions are defined:\n\t *\n\t * * `number` - Will format numeric data (defined by `columns.data`) for\n\t *   display, retaining the original unformatted data for sorting and filtering.\n\t *   It takes 4 parameters:\n\t *   * `string` - Thousands grouping separator\n\t *   * `string` - Decimal point indicator\n\t *   * `integer` - Number of decimal points to show\n\t *   * `string` (optional) - Prefix.\n\t *\n\t * @example\n\t *   // Column definition using the number renderer\n\t *   {\n\t *     data: \"salary\",\n\t *     render: $.fn.dataTable.render.number( '\\'', '.', 0, '$' )\n\t *   }\n\t *\n\t * @namespace\n\t */\n\tDataTable.render = {\n\t\tnumber: function ( thousands, decimal, precision, prefix ) {\n\t\t\treturn {\n\t\t\t\tdisplay: function ( d ) {\n\t\t\t\t\tif ( typeof d !== 'number' && typeof d !== 'string' ) {\n\t\t\t\t\t\treturn d;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar negative = d < 0 ? '-' : '';\n\t\t\t\t\td = Math.abs( parseFloat( d ) );\n\t\n\t\t\t\t\tvar intPart = parseInt( d, 10 );\n\t\t\t\t\tvar floatPart = precision ?\n\t\t\t\t\t\tdecimal+(d - intPart).toFixed( precision ).substring( 2 ):\n\t\t\t\t\t\t'';\n\t\n\t\t\t\t\treturn negative + (prefix||'') +\n\t\t\t\t\t\tintPart.toString().replace(\n\t\t\t\t\t\t\t/\\B(?=(\\d{3})+(?!\\d))/g, thousands\n\t\t\t\t\t\t) +\n\t\t\t\t\t\tfloatPart;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n\t\n\t\n\t/*\n\t * This is really a good bit rubbish this method of exposing the internal methods\n\t * publicly... - To be fixed in 2.0 using methods on the prototype\n\t */\n\t\n\t\n\t/**\n\t * Create a wrapper function for exporting an internal functions to an external API.\n\t *  @param {string} fn API function name\n\t *  @returns {function} wrapped function\n\t *  @memberof DataTable#internal\n\t */\n\tfunction _fnExternApiFunc (fn)\n\t{\n\t\treturn function() {\n\t\t\tvar args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(\n\t\t\t\tArray.prototype.slice.call(arguments)\n\t\t\t);\n\t\t\treturn DataTable.ext.internal[fn].apply( this, args );\n\t\t};\n\t}\n\t\n\t\n\t/**\n\t * Reference to internal functions for use by plug-in developers. Note that\n\t * these methods are references to internal functions and are considered to be\n\t * private. If you use these methods, be aware that they are liable to change\n\t * between versions.\n\t *  @namespace\n\t */\n\t$.extend( DataTable.ext.internal, {\n\t\t_fnExternApiFunc: _fnExternApiFunc,\n\t\t_fnBuildAjax: _fnBuildAjax,\n\t\t_fnAjaxUpdate: _fnAjaxUpdate,\n\t\t_fnAjaxParameters: _fnAjaxParameters,\n\t\t_fnAjaxUpdateDraw: _fnAjaxUpdateDraw,\n\t\t_fnAjaxDataSrc: _fnAjaxDataSrc,\n\t\t_fnAddColumn: _fnAddColumn,\n\t\t_fnColumnOptions: _fnColumnOptions,\n\t\t_fnAdjustColumnSizing: _fnAdjustColumnSizing,\n\t\t_fnVisibleToColumnIndex: _fnVisibleToColumnIndex,\n\t\t_fnColumnIndexToVisible: _fnColumnIndexToVisible,\n\t\t_fnVisbleColumns: _fnVisbleColumns,\n\t\t_fnGetColumns: _fnGetColumns,\n\t\t_fnColumnTypes: _fnColumnTypes,\n\t\t_fnApplyColumnDefs: _fnApplyColumnDefs,\n\t\t_fnHungarianMap: _fnHungarianMap,\n\t\t_fnCamelToHungarian: _fnCamelToHungarian,\n\t\t_fnLanguageCompat: _fnLanguageCompat,\n\t\t_fnBrowserDetect: _fnBrowserDetect,\n\t\t_fnAddData: _fnAddData,\n\t\t_fnAddTr: _fnAddTr,\n\t\t_fnNodeToDataIndex: _fnNodeToDataIndex,\n\t\t_fnNodeToColumnIndex: _fnNodeToColumnIndex,\n\t\t_fnGetCellData: _fnGetCellData,\n\t\t_fnSetCellData: _fnSetCellData,\n\t\t_fnSplitObjNotation: _fnSplitObjNotation,\n\t\t_fnGetObjectDataFn: _fnGetObjectDataFn,\n\t\t_fnSetObjectDataFn: _fnSetObjectDataFn,\n\t\t_fnGetDataMaster: _fnGetDataMaster,\n\t\t_fnClearTable: _fnClearTable,\n\t\t_fnDeleteIndex: _fnDeleteIndex,\n\t\t_fnInvalidate: _fnInvalidate,\n\t\t_fnGetRowElements: _fnGetRowElements,\n\t\t_fnCreateTr: _fnCreateTr,\n\t\t_fnBuildHead: _fnBuildHead,\n\t\t_fnDrawHead: _fnDrawHead,\n\t\t_fnDraw: _fnDraw,\n\t\t_fnReDraw: _fnReDraw,\n\t\t_fnAddOptionsHtml: _fnAddOptionsHtml,\n\t\t_fnDetectHeader: _fnDetectHeader,\n\t\t_fnGetUniqueThs: _fnGetUniqueThs,\n\t\t_fnFeatureHtmlFilter: _fnFeatureHtmlFilter,\n\t\t_fnFilterComplete: _fnFilterComplete,\n\t\t_fnFilterCustom: _fnFilterCustom,\n\t\t_fnFilterColumn: _fnFilterColumn,\n\t\t_fnFilter: _fnFilter,\n\t\t_fnFilterCreateSearch: _fnFilterCreateSearch,\n\t\t_fnEscapeRegex: _fnEscapeRegex,\n\t\t_fnFilterData: _fnFilterData,\n\t\t_fnFeatureHtmlInfo: _fnFeatureHtmlInfo,\n\t\t_fnUpdateInfo: _fnUpdateInfo,\n\t\t_fnInfoMacros: _fnInfoMacros,\n\t\t_fnInitialise: _fnInitialise,\n\t\t_fnInitComplete: _fnInitComplete,\n\t\t_fnLengthChange: _fnLengthChange,\n\t\t_fnFeatureHtmlLength: _fnFeatureHtmlLength,\n\t\t_fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,\n\t\t_fnPageChange: _fnPageChange,\n\t\t_fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,\n\t\t_fnProcessingDisplay: _fnProcessingDisplay,\n\t\t_fnFeatureHtmlTable: _fnFeatureHtmlTable,\n\t\t_fnScrollDraw: _fnScrollDraw,\n\t\t_fnApplyToChildren: _fnApplyToChildren,\n\t\t_fnCalculateColumnWidths: _fnCalculateColumnWidths,\n\t\t_fnThrottle: _fnThrottle,\n\t\t_fnConvertToWidth: _fnConvertToWidth,\n\t\t_fnScrollingWidthAdjust: _fnScrollingWidthAdjust,\n\t\t_fnGetWidestNode: _fnGetWidestNode,\n\t\t_fnGetMaxLenString: _fnGetMaxLenString,\n\t\t_fnStringToCss: _fnStringToCss,\n\t\t_fnScrollBarWidth: _fnScrollBarWidth,\n\t\t_fnSortFlatten: _fnSortFlatten,\n\t\t_fnSort: _fnSort,\n\t\t_fnSortAria: _fnSortAria,\n\t\t_fnSortListener: _fnSortListener,\n\t\t_fnSortAttachListener: _fnSortAttachListener,\n\t\t_fnSortingClasses: _fnSortingClasses,\n\t\t_fnSortData: _fnSortData,\n\t\t_fnSaveState: _fnSaveState,\n\t\t_fnLoadState: _fnLoadState,\n\t\t_fnSettingsFromNode: _fnSettingsFromNode,\n\t\t_fnLog: _fnLog,\n\t\t_fnMap: _fnMap,\n\t\t_fnBindAction: _fnBindAction,\n\t\t_fnCallbackReg: _fnCallbackReg,\n\t\t_fnCallbackFire: _fnCallbackFire,\n\t\t_fnLengthOverflow: _fnLengthOverflow,\n\t\t_fnRenderer: _fnRenderer,\n\t\t_fnDataSource: _fnDataSource,\n\t\t_fnRowAttributes: _fnRowAttributes,\n\t\t_fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant\n\t\t                                // in 1.10, so this dead-end function is\n\t\t                                // added to prevent errors\n\t} );\n\t\n\n\t// jQuery access\n\t$.fn.dataTable = DataTable;\n\n\t// Legacy aliases\n\t$.fn.dataTableSettings = DataTable.settings;\n\t$.fn.dataTableExt = DataTable.ext;\n\n\t// With a capital `D` we return a DataTables API instance rather than a\n\t// jQuery object\n\t$.fn.DataTable = function ( opts ) {\n\t\treturn $(this).dataTable( opts ).api();\n\t};\n\n\t// All properties that are available to $.fn.dataTable should also be\n\t// available on $.fn.DataTable\n\t$.each( DataTable, function ( prop, val ) {\n\t\t$.fn.DataTable[ prop ] = val;\n\t} );\n\n\n\t// Information about events fired by DataTables - for documentation.\n\t/**\n\t * Draw event, fired whenever the table is redrawn on the page, at the same\n\t * point as fnDrawCallback. This may be useful for binding events or\n\t * performing calculations when the table is altered at all.\n\t *  @name DataTable#draw.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t */\n\n\t/**\n\t * Search event, fired when the searching applied to the table (using the\n\t * built-in global search, or column filters) is altered.\n\t *  @name DataTable#search.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t */\n\n\t/**\n\t * Page change event, fired when the paging of the table is altered.\n\t *  @name DataTable#page.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t */\n\n\t/**\n\t * Order event, fired when the ordering applied to the table is altered.\n\t *  @name DataTable#order.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t */\n\n\t/**\n\t * DataTables initialisation complete event, fired when the table is fully\n\t * drawn, including Ajax data loaded, if Ajax data is required.\n\t *  @name DataTable#init.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} oSettings DataTables settings object\n\t *  @param {object} json The JSON object request from the server - only\n\t *    present if client-side Ajax sourced data is used</li></ol>\n\t */\n\n\t/**\n\t * State save event, fired when the table has changed state a new state save\n\t * is required. This event allows modification of the state saving object\n\t * prior to actually doing the save, including addition or other state\n\t * properties (for plug-ins) or modification of a DataTables core property.\n\t *  @name DataTable#stateSaveParams.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} oSettings DataTables settings object\n\t *  @param {object} json The state information to be saved\n\t */\n\n\t/**\n\t * State load event, fired when the table is loading state from the stored\n\t * data, but prior to the settings object being modified by the saved state\n\t * - allowing modification of the saved state is required or loading of\n\t * state for a plug-in.\n\t *  @name DataTable#stateLoadParams.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} oSettings DataTables settings object\n\t *  @param {object} json The saved state information\n\t */\n\n\t/**\n\t * State loaded event, fired when state has been loaded from stored data and\n\t * the settings object has been modified by the loaded data.\n\t *  @name DataTable#stateLoaded.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} oSettings DataTables settings object\n\t *  @param {object} json The saved state information\n\t */\n\n\t/**\n\t * Processing event, fired when DataTables is doing some kind of processing\n\t * (be it, order, searcg or anything else). It can be used to indicate to\n\t * the end user that there is something happening, or that something has\n\t * finished.\n\t *  @name DataTable#processing.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} oSettings DataTables settings object\n\t *  @param {boolean} bShow Flag for if DataTables is doing processing or not\n\t */\n\n\t/**\n\t * Ajax (XHR) event, fired whenever an Ajax request is completed from a\n\t * request to made to the server for new data. This event is called before\n\t * DataTables processed the returned data, so it can also be used to pre-\n\t * process the data returned from the server, if needed.\n\t *\n\t * Note that this trigger is called in `fnServerData`, if you override\n\t * `fnServerData` and which to use this event, you need to trigger it in you\n\t * success function.\n\t *  @name DataTable#xhr.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t *  @param {object} json JSON returned from the server\n\t *\n\t *  @example\n\t *     // Use a custom property returned from the server in another DOM element\n\t *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\n\t *       $('#status').html( json.status );\n\t *     } );\n\t *\n\t *  @example\n\t *     // Pre-process the data returned from the server\n\t *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\n\t *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {\n\t *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;\n\t *       }\n\t *       // Note no return - manipulate the data directly in the JSON object.\n\t *     } );\n\t */\n\n\t/**\n\t * Destroy event, fired when the DataTable is destroyed by calling fnDestroy\n\t * or passing the bDestroy:true parameter in the initialisation object. This\n\t * can be used to remove bound events, added DOM nodes, etc.\n\t *  @name DataTable#destroy.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t */\n\n\t/**\n\t * Page length change event, fired when number of records to show on each\n\t * page (the length) is changed.\n\t *  @name DataTable#length.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t *  @param {integer} len New length\n\t */\n\n\t/**\n\t * Column sizing has changed.\n\t *  @name DataTable#column-sizing.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t */\n\n\t/**\n\t * Column visibility has changed.\n\t *  @name DataTable#column-visibility.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t *  @param {int} column Column index\n\t *  @param {bool} vis `false` if column now hidden, or `true` if visible\n\t */\n\n\treturn $.fn.dataTable;\n}));\n\n}(window, document));\n\n","/*! DataTables Bootstrap integration\n * ©2011-2014 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * DataTables integration for Bootstrap 3. This requires Bootstrap 3 and\n * DataTables 1.10 or newer.\n *\n * This file sets the defaults and adds options to DataTables to style its\n * controls using Bootstrap. See http://datatables.net/manual/styling/bootstrap\n * for further information.\n */\n(function(window, document, undefined){\n\nvar factory = function( $, DataTable ) {\n\"use strict\";\n\n\n/* Set the defaults for DataTables initialisation */\n$.extend( true, DataTable.defaults, {\n\tdom:\n\t\t\"<'row'<'col-xs-6'l><'col-xs-6'f>r>\" +\n\t\t\"<'row'<'col-xs-12't>>\" +\n\t\t\"<'row'<'col-xs-6'i><'col-xs-6'p>>\",\n\trenderer: 'bootstrap'\n} );\n\n\n/* Default class modification */\n$.extend( DataTable.ext.classes, {\n\tsWrapper:      \"dataTables_wrapper form-inline dt-bootstrap\",\n\tsFilterInput:  \"form-control input-sm\",\n\tsLengthSelect: \"form-control input-sm\"\n} );\n\n\n/* Bootstrap paging button renderer */\nDataTable.ext.renderer.pageButton.bootstrap = function ( settings, host, idx, buttons, page, pages ) {\n\tvar api     = new DataTable.Api( settings );\n\tvar classes = settings.oClasses;\n\tvar lang    = settings.oLanguage.oPaginate;\n\tvar btnDisplay, btnClass;\n\n\tvar attach = function( container, buttons ) {\n\t\tvar i, ien, node, button;\n\t\tvar clickHandler = function ( e ) {\n\t\t\te.preventDefault();\n\t\t\tif ( !$(e.currentTarget).hasClass('disabled') ) {\n\t\t\t\tapi.page( e.data.action ).draw( false );\n\t\t\t}\n\t\t};\n\n\t\tfor ( i=0, ien=buttons.length ; i<ien ; i++ ) {\n\t\t\tbutton = buttons[i];\n\n\t\t\tif ( $.isArray( button ) ) {\n\t\t\t\tattach( container, button );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbtnDisplay = '';\n\t\t\t\tbtnClass = '';\n\n\t\t\t\tswitch ( button ) {\n\t\t\t\t\tcase 'ellipsis':\n\t\t\t\t\t\tbtnDisplay = '&hellip;';\n\t\t\t\t\t\tbtnClass = 'disabled';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'first':\n\t\t\t\t\t\tbtnDisplay = lang.sFirst;\n\t\t\t\t\t\tbtnClass = button + (page > 0 ?\n\t\t\t\t\t\t\t'' : ' disabled');\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'previous':\n\t\t\t\t\t\tbtnDisplay = lang.sPrevious;\n\t\t\t\t\t\tbtnClass = button + (page > 0 ?\n\t\t\t\t\t\t\t'' : ' disabled');\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'next':\n\t\t\t\t\t\tbtnDisplay = lang.sNext;\n\t\t\t\t\t\tbtnClass = button + (page < pages-1 ?\n\t\t\t\t\t\t\t'' : ' disabled');\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'last':\n\t\t\t\t\t\tbtnDisplay = lang.sLast;\n\t\t\t\t\t\tbtnClass = button + (page < pages-1 ?\n\t\t\t\t\t\t\t'' : ' disabled');\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbtnDisplay = button + 1;\n\t\t\t\t\t\tbtnClass = page === button ?\n\t\t\t\t\t\t\t'active' : '';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif ( btnDisplay ) {\n\t\t\t\t\tnode = $('<li>', {\n\t\t\t\t\t\t\t'class': classes.sPageButton+' '+btnClass,\n\t\t\t\t\t\t\t'aria-controls': settings.sTableId,\n\t\t\t\t\t\t\t'tabindex': settings.iTabIndex,\n\t\t\t\t\t\t\t'id': idx === 0 && typeof button === 'string' ?\n\t\t\t\t\t\t\t\tsettings.sTableId +'_'+ button :\n\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t} )\n\t\t\t\t\t\t.append( $('<a>', {\n\t\t\t\t\t\t\t\t'href': '#'\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t\t.html( btnDisplay )\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.appendTo( container );\n\n\t\t\t\t\tsettings.oApi._fnBindAction(\n\t\t\t\t\t\tnode, {action: button}, clickHandler\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tattach(\n\t\t$(host).empty().html('<ul class=\"pagination\"/>').children('ul'),\n\t\tbuttons\n\t);\n};\n\n\n/*\n * TableTools Bootstrap compatibility\n * Required TableTools 2.1+\n */\nif ( DataTable.TableTools ) {\n\t// Set the classes that TableTools uses to something suitable for Bootstrap\n\t$.extend( true, DataTable.TableTools.classes, {\n\t\t\"container\": \"DTTT btn-group\",\n\t\t\"buttons\": {\n\t\t\t\"normal\": \"btn btn-default\",\n\t\t\t\"disabled\": \"disabled\"\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"container\": \"DTTT_dropdown dropdown-menu\",\n\t\t\t\"buttons\": {\n\t\t\t\t\"normal\": \"\",\n\t\t\t\t\"disabled\": \"disabled\"\n\t\t\t}\n\t\t},\n\t\t\"print\": {\n\t\t\t\"info\": \"DTTT_print_info\"\n\t\t},\n\t\t\"select\": {\n\t\t\t\"row\": \"active\"\n\t\t}\n\t} );\n\n\t// Have the collection use a bootstrap compatible drop down\n\t$.extend( true, DataTable.TableTools.DEFAULTS.oTags, {\n\t\t\"collection\": {\n\t\t\t\"container\": \"ul\",\n\t\t\t\"button\": \"li\",\n\t\t\t\"liner\": \"a\"\n\t\t}\n\t} );\n}\n\n}; // /factory\n\n\n// Define as an AMD module if possible\nif ( typeof define === 'function' && define.amd ) {\n\tdefine( ['jquery', 'datatables'], factory );\n}\nelse if ( typeof exports === 'object' ) {\n    // Node/CommonJS\n    factory( require('jquery'), require('datatables') );\n}\nelse if ( jQuery ) {\n\t// Otherwise simply initialise as normal, stopping multiple evaluation\n\tfactory( jQuery, jQuery.fn.dataTable );\n}\n\n\n})(window, document);\n\n","\nTemplate.__checkName(\"tabular\");\nTemplate[\"tabular\"] = new Template(\"Template.tabular\", (function() {\n  var view = this;\n  return HTML.DIV(\"\\n    \\n    \", HTML.TABLE(HTML.Attrs(function() {\n    return Spacebars.attrMustache(view.lookup(\"atts\"));\n  })), \"\\n  \");\n}));\n","/* global Util:true, _ */\n\nUtil = {};\n\nUtil.cleanFieldName = function cleanFieldName(field) {\n  // for field names with a dot, we just need\n  // the top level field name\n  var dot = field.indexOf(\".\");\n  if (dot !== -1) {\n    field = field.slice(0, dot);\n  }\n\n  // If it's referencing an array, strip off the brackets\n  field = field.split('[')[0];\n\n  return field;\n};\n\nUtil.cleanFieldNameForSearch = function cleanFieldNameForSearch(field) {\n  // If it's referencing an array, replace the brackets\n  // This will only work with an object which doesn't have [\"foo\"]\n  return field.replace(/\\[\\w+\\]/, \"\");\n};\n\nUtil.sortsAreEqual = function sortsAreEqual(oldVal, newVal) {\n  if (oldVal === newVal) {\n    return true;\n  }\n  var areSame = false;\n  if (_.isArray(oldVal) && _.isArray(newVal) && oldVal.length === newVal.length) {\n    areSame = _.every(newVal, function (innerArray, i) {\n      return innerArray[0] === oldVal[i][0] &&\n        innerArray[1] === oldVal[i][1];\n    });\n  }\n  return areSame;\n};\n\nUtil.objectsAreEqual = function objectsAreEqual(oldVal, newVal) {\n  if (oldVal === newVal) {\n    return true;\n  }\n  return JSON.stringify(oldVal) === JSON.stringify(newVal);\n};\n\n// Take the DataTables `order` format and column info\n// and convert it into a mongo sort array.\nUtil.getMongoSort = function getMongoSort(order, columns) {\n  if (!order || !columns) {\n    return;\n  }\n\n  // TODO support the nested arrays format for sort\n  // and ignore instance functions like \"foo()\"\n  var sort = [];\n  _.each(order, function (ord) {\n    var propName = columns[ord.column].data;\n    var orderable = columns[ord.column].orderable;\n    if (typeof propName === 'string' && orderable !== false) {\n      sort.push([propName, ord.dir]);\n    }\n  });\n  return sort;\n};\n","/* global Tabular, Mongo */\n\n// We are creating a named client Collection that we will only modify from server\nTabular.tableRecords = new Mongo.Collection('tabular_records');\n\nTabular.getRecord = function(name) {\n  return Tabular.tableRecords.findOne(name);\n};\n","/* global tableInit:true, _, Blaze, Util */\n\n/**\n * Uses the Tabular.Table instance to get the columns, fields, and searchFields\n * @param {Tabular.Table} tabularTable The Tabular.Table instance\n * @param {Template}      template     The Template instance\n */\ntableInit = function tableInit(tabularTable, template) {\n  var columns = _.clone(tabularTable.options.columns);\n  var fields = {}, searchFields = [];\n\n  // Loop through the provided columns object\n  _.each(columns, function (col) {\n    // The `tmpl` column option is special for this\n    // package. We parse it into other column options\n    // and then remove it.\n    var tmpl = col.tmpl;\n    if (tmpl) {\n      // Cell should be initially blank\n      col.defaultContent = \"\";\n\n      // If there's also data attached, then we can still\n      // sort on this column. If not, then we shouldn't try.\n      if (!(\"data\" in col)) {\n        col.orderable = false;\n      }\n\n      // When the cell is created, render it's content from\n      // the provided template with row data.\n      col.createdCell = function (cell, cellData, rowData) {\n        // Allow the table to adjust the template context if desired\n        if (typeof col.tmplContext === 'function') {\n          rowData = col.tmplContext(rowData);\n        }\n\n        Blaze.renderWithData(tmpl, rowData, cell);\n      };\n\n      // Then delete the `tmpl` property since DataTables\n      // doesn't need it.\n      delete col.tmpl;\n    }\n\n    // Automatically protect against errors from null and undefined\n    // values\n    if (!(\"defaultContent\" in col)) {\n      col.defaultContent = \"\";\n    }\n\n    // Build the list of field names we want included\n    var dataProp = col.data;\n    if (typeof dataProp === \"string\") {\n      // If it's referencing an instance function, don't\n      // include it. Prevent sorting and searching because\n      // our pub function won't be able to do it.\n      if (dataProp.indexOf(\"()\") !== -1) {\n        col.orderable = false;\n        col.searchable = false;\n        return;\n      }\n\n      fields[Util.cleanFieldName(dataProp)] = 1;\n\n      // DataTables says default value for col.searchable is `true`,\n      // so we will search on all columns that haven't been set to\n      // `false`.\n      if (col.searchable !== false) {\n        searchFields.push(Util.cleanFieldNameForSearch(dataProp));\n      }\n    }\n\n    // If we're displaying a template for this field,\n    // and we've also provided data, we want to\n    // pass the data prop along to DataTables\n    // to enable sorting and filtering.\n    // However, DataTables will then add that data to\n    // the displayed cell, which we don't want since\n    // we're rendering a template there with Blaze.\n    // We can prevent this issue by having the \"render\"\n    // function return an empty string for display content.\n    if (tmpl && \"data\" in col && !(\"render\" in col)) {\n      col.render = function (data, type) {\n        if (type === 'display') {\n          return '';\n        }\n        return data;\n      };\n    }\n  });\n\n  template.tabular.columns = columns;\n  template.tabular.fields = fields;\n  template.tabular.searchFields = searchFields;\n};\n","/* global getPubSelector:true, _ */\n\ngetPubSelector = function getPubSelector(selector, searchString, searchFields, searchCaseInsensitive, columns) {\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // if search was invoked via .columns().search(), build a query off that\n  // https://datatables.net/reference/api/columns().search()\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  var searchColumns = _.filter(columns, function(column) {\n    return column.search && column.search.value !== '';\n  });\n\n  // required args\n  if ((!searchString && searchColumns.length === 0) || !searchFields || searchFields.length === 0) {\n    return selector;\n  }\n\n  // See if we can resolve the search string to a number,\n  // in which case we use an extra query because $regex\n  // matches string fields only.\n  var searches = [];\n\n  // normalize search fields array to mirror the structure\n  // as passed by the datatables ajax.data function\n  searchFields = _.map(searchFields, function(field) {\n    return {\n      data: field,\n      search: {\n        value: searchString\n      }\n    };\n  });\n\n  var searchTerms = _.isEmpty(searchColumns) ? searchFields : searchColumns;\n\n  _.each(searchTerms, function(field) {\n    var searchValue = field.search.value || '';\n\n    // Split and OR by whitespace, as per default DataTables search behavior\n    searchValue = searchValue.match(/\\S+/g);\n\n    _.each(searchValue, function (searchTerm) {\n      var m1 = {}, m2 = {};\n\n      // String search\n      m1[field.data] = { $regex: searchTerm };\n\n      // DataTables searches are case insensitive by default\n      if (searchCaseInsensitive !== false) {\n        m1[field.data].$options = \"i\";\n      }\n\n      searches.push(m1);\n\n      // Number search\n      var numSearchString = Number(searchTerm);\n      if (!isNaN(numSearchString)) {\n        m2[field.data] = numSearchString;\n        searches.push(m2);\n      }\n    });\n  });\n\n  var result;\n  if (selector) {\n    result = {$and: [selector, {$or: searches}]};\n  } else {\n    result = {$or: searches};\n  }\n\n  return result;\n};\n","/* global _, Template, Tabular, Tracker, ReactiveVar, Session, Meteor, tableInit, getPubSelector, Util */\n\nTemplate.tabular.helpers({\n  atts: function () {\n    // We remove the \"table\" and \"selector\" attributes and assume the rest belong\n    // on the <table> element\n    return _.omit(this, \"table\", \"selector\");\n  }\n});\n\nvar tabularOnRendered = function () {\n  var template = this,\n      table, resetTablePaging = false,\n      $tableElement = template.$('table');\n\n  template.tabular = {};\n  template.tabular.data = [];\n  template.tabular.pubSelector = new ReactiveVar({}, Util.objectsAreEqual);\n  template.tabular.skip = new ReactiveVar(0);\n  template.tabular.limit = new ReactiveVar(10);\n  template.tabular.sort = new ReactiveVar(null, Util.sortsAreEqual);\n  template.tabular.columns = null;\n  template.tabular.fields = null;\n  template.tabular.searchFields = null;\n  template.tabular.searchCaseInsensitive = true;\n  template.tabular.tableName = new ReactiveVar(null);\n  template.tabular.options = new ReactiveVar({}, Util.objectsAreEqual);\n  template.tabular.docPub = new ReactiveVar(null);\n  template.tabular.collection = new ReactiveVar(null);\n  template.tabular.ready = new ReactiveVar(false);\n  template.tabular.recordsTotal = 0;\n  template.tabular.recordsFiltered = 0;\n  template.tabular.isLoading = new ReactiveVar(true);\n\n  // These are some DataTables options that we need for everything to work.\n  // We add them to the options specified by the user.\n  var ajaxOptions = {\n    // tell DataTables that we're getting the table data from a server\n    serverSide: true,\n    // define the function that DataTables will call upon first load and whenever\n    // we tell it to reload data, such as when paging, etc.\n    ajax: function (data, callback/*, settings*/) {\n      // When DataTables requests data, first we set\n      // the new skip, limit, order, and pubSelector values\n      // that DataTables has requested. These trigger\n      // the first subscription, which will then trigger the\n      // second subscription.\n\n      template.tabular.isLoading.set(true);\n      //console.log('data', template.tabular.data);\n\n      // Update skip\n      template.tabular.skip.set(data.start);\n      Session.set('Tabular.LastSkip', data.start);\n\n      // Update limit\n      var options = template.tabular.options.get();\n      var hardLimit = options && options.limit;\n      if (data.length === -1) {\n        if (hardLimit === undefined) {\n          console.warn('When using no paging or an \"All\" option with tabular, it is best to also add a hard limit in your table options like {limit: 500}');\n          template.tabular.limit.set(null);\n        } else {\n          template.tabular.limit.set(hardLimit);\n        }\n      } else {\n        template.tabular.limit.set(data.length);\n      }\n\n      // Update sort\n      template.tabular.sort.set(Util.getMongoSort(data.order, template.tabular.columns));\n      // Update pubSelector\n      var pubSelector = getPubSelector(\n        template.tabular.selector,\n        (data.search && data.search.value) || null,\n        template.tabular.searchFields,\n        template.tabular.searchCaseInsensitive,\n        data.columns || null\n      );\n      template.tabular.pubSelector.set(pubSelector);\n\n      // We're ready to subscribe to the data.\n      // Matters on the first run only.\n      template.tabular.ready.set(true);\n\n      //console.log('ajax');\n\n      callback({\n        draw: data.draw,\n        recordsTotal: template.tabular.recordsTotal,\n        recordsFiltered: template.tabular.recordsFiltered,\n        data: template.tabular.data\n      });\n\n    }\n  };\n\n  // For testing\n  //setUpTestingAutoRunLogging(template);\n\n  // Reactively determine table columns, fields, and searchFields.\n  // This will rerun whenever the current template data changes.\n  var lastTableName;\n  template.autorun(function () {\n    var data = Template.currentData();\n\n    //console.log('currentData autorun', data);\n\n    if (!data) {return;}\n\n    // We get the current TabularTable instance, and cache it on the\n    // template instance for access elsewhere\n    var tabularTable = template.tabular.tableDef = data.table;\n\n    if (!(tabularTable instanceof Tabular.Table)) {\n      throw new Error(\"You must pass Tabular.Table instance as the table attribute\");\n    }\n\n    // Always update the selector reactively\n    template.tabular.selector = data.selector;\n\n    // The remaining stuff relates to changing the `table`\n    // attribute. If we didn't change it, we can stop here,\n    // but we need to reload the table if this is not the first\n    // run\n    if (tabularTable.name === lastTableName) {\n      if (table) {\n        // passing `false` as the second arg tells it to\n        // reset the paging\n        table.ajax.reload(null, true);\n      }\n      return;\n    }\n\n    // If we reactively changed the `table` attribute, run\n    // onUnload for the previous table\n    if (lastTableName !== undefined) {\n      var lastTableDef = Tabular.tablesByName[lastTableName];\n      if (lastTableDef && typeof lastTableDef.onUnload === 'function') {\n        lastTableDef.onUnload();\n      }\n    }\n\n    // Cache this table name as the last table name for next run\n    lastTableName = tabularTable.name;\n\n    // Figure out and update the columns, fields, and searchFields\n    tableInit(tabularTable, template);\n\n    // Set/update everything else\n    template.tabular.searchCaseInsensitive = (tabularTable.options && tabularTable.options.search && tabularTable.options.search.caseInsensitive) || true;\n    template.tabular.options.set(tabularTable.options);\n    template.tabular.tableName.set(tabularTable.name);\n    template.tabular.docPub.set(tabularTable.pub);\n    template.tabular.collection.set(tabularTable.collection);\n\n    // userOptions rerun should do this?\n    if (table) {\n      // passing `true` as the second arg tells it to\n      // reset the paging\n      table.ajax.reload(null, true);\n    }\n  });\n\n  // First Subscription\n  // Subscribe to an array of _ids that should be on the\n  // current page of the table, plus some aggregate\n  // numbers that DataTables needs in order to show the paging.\n  // The server will reactively keep this info accurate.\n  // It's not necessary to call stop\n  // on subscriptions that are within autorun computations.\n  template.autorun(function () {\n    if (!template.tabular.ready.get()) {\n      return;\n    }\n\n    //console.log('tabular_getInfo autorun');\n\n    Meteor.subscribe(\n      \"tabular_getInfo\",\n      template.tabular.tableName.get(),\n      template.tabular.pubSelector.get(),\n      template.tabular.sort.get(),\n      template.tabular.skip.get(),\n      template.tabular.limit.get()\n    );\n  });\n\n  // Second Subscription\n  // Reactively subscribe to the documents with _ids given to us. Limit the\n  // fields to only those we need to display. It's not necessary to call stop\n  // on subscriptions that are within autorun computations.\n  template.autorun(function () {\n    // tableInfo is reactive and causes a rerun whenever the\n    // list of docs that should currently be in the table changes.\n    // It does not cause reruns based on the documents themselves\n    // changing.\n    var tableName = template.tabular.tableName.get();\n    var tableInfo = Tabular.getRecord(tableName) || {};\n\n    //console.log('tableName and tableInfo autorun', tableName, tableInfo);\n\n    template.tabular.recordsTotal = tableInfo.recordsTotal || 0;\n    template.tabular.recordsFiltered = tableInfo.recordsFiltered || 0;\n\n    // In some cases, there is no point in subscribing to nothing\n    if (_.isEmpty(tableInfo) ||\n        template.tabular.recordsTotal === 0 ||\n        template.tabular.recordsFiltered === 0) {\n      return;\n    }\n\n    template.tabular.tableDef.sub.subscribe(\n      template.tabular.docPub.get(),\n      tableName,\n      tableInfo.ids || [],\n      template.tabular.fields\n    );\n  });\n\n  // Build the table. We rerun this only when the table\n  // options specified by the user changes, which should be\n  // only when the `table` attribute changes reactively.\n  template.autorun(function (c) {\n    var userOptions = template.tabular.options.get();\n    var options = _.extend({}, ajaxOptions, userOptions);\n\n    //console.log('userOptions autorun', options);\n\n    // unless the user provides her own displayStart,\n    // we use a value from Session. This keeps the\n    // same page selected after a hot code push.\n    if (c.firstRun && !('displayStart' in options)) {\n      options.displayStart = Tracker.nonreactive(function () {\n        return Session.get('Tabular.LastSkip');\n      });\n    }\n\n    if (!('order' in options)) {\n      options.order = [];\n    }\n\n    // After the first time, we need to destroy before rebuilding.\n    if (table) {\n      var dt = $tableElement.DataTable();\n      if (dt) {\n        dt.destroy();\n        $tableElement.empty();\n      }\n    }\n\n    // We start with an empty table.\n    // Data will be populated by ajax function now.\n    table = $tableElement.DataTable(options);\n  });\n\n  template.autorun(function () {\n    // Get table name non-reactively\n    var tableName = Tracker.nonreactive(function () {\n      return template.tabular.tableName.get();\n    });\n    // Get the collection that we're showing in the table non-reactively\n    var collection = Tracker.nonreactive(function () {\n      return template.tabular.collection.get();\n    });\n\n    // React when the requested list of records changes.\n    // This can happen for various reasons.\n    // * DataTables reran ajax due to sort changing.\n    // * DataTables reran ajax due to page changing.\n    // * DataTables reran ajax due to results-per-page changing.\n    // * DataTables reran ajax due to search terms changing.\n    // * `selector` attribute changed reactively\n    // * Docs were added/changed/removed by this user or\n    //   another user, causing visible result set to change.\n    var tableInfo = Tabular.getRecord(tableName);\n\n    if (!collection || !tableInfo) {\n      return;\n    }\n\n    // Build options object to pass to `find`.\n    // It's important that we use the same options\n    // that were used in generating the list of `_id`s\n    // on the server.\n    var findOptions = {};\n    var fields = template.tabular.fields;\n    if (fields) {\n      // Extend with extraFields from table definition\n      if (typeof template.tabular.tableDef.extraFields === 'object') {\n        _.extend(fields, template.tabular.tableDef.extraFields);\n      }\n      findOptions.fields = fields;\n    }\n\n    // Sort does not need to be reactive here; using\n    // reactive sort would result in extra rerunning.\n    var sort = Tracker.nonreactive(function () {\n      return template.tabular.sort.get();\n    });\n    if (sort) {\n      findOptions.sort = sort;\n    }\n\n    // Get the updated list of docs we should be showing\n    var cursor = collection.find({_id: {$in: tableInfo.ids}}, findOptions);\n\n    //console.log('tableInfo, fields, sort, find autorun', cursor.count());\n\n    // We're subscribing to the docs just in time, so there's\n    // a good chance that they aren't all sent to the client yet.\n    // We'll stop here if we didn't find all the docs we asked for.\n    // This will rerun one or more times as the docs are received\n    // from the server, and eventually we'll have them all.\n    // Without this check in here, there's a lot of flashing in the\n    // table as rows are added.\n    if (cursor.count() < tableInfo.ids.length) {\n      return;\n    }\n\n    // Get data as array for DataTables to consume in the ajax function\n    template.tabular.data = cursor.fetch();\n\n    template.tabular.isLoading.set(false);\n\n    // For these types of reactive changes, we don't want to\n    // reset the page we're on, so we pass `false` as second arg.\n    // The exception is if we changed the results-per-page number,\n    // in which cases `resetTablePaging` will be `true` and we will do so.\n    if (table) {\n      if (resetTablePaging) {\n        table.ajax.reload(null, true);\n        resetTablePaging = false;\n      } else {\n        table.ajax.reload(null, false);\n      }\n    }\n\n  });\n\n  // XXX Not working\n  template.autorun(function () {\n    var visibility = template.tabular.isLoading.get() ? 'visible' : 'hidden';\n    template.$('.dataTables_processing').css('visibility', visibility);\n  });\n\n  // force table paging to reset to first page when we change page length\n  $tableElement.on('length.dt', function () {\n    resetTablePaging = true;\n  });\n};\n\nif (typeof Template.tabular.onRendered === 'function') {\n  Template.tabular.onRendered(tabularOnRendered);\n} else {\n  Template.tabular.rendered = tabularOnRendered;\n}\n\nvar tabularOnDestroyed = function () {\n  // Clear last skip tracking\n  Session.set('Tabular.LastSkip', 0);\n  // Run a user-provided onUnload function\n  if (this.tabular &&\n      this.tabular.tableDef &&\n      typeof this.tabular.tableDef.onUnload === 'function') {\n    this.tabular.tableDef.onUnload();\n  }\n};\n\nif (typeof Template.tabular.onDestroyed === 'function') {\n  Template.tabular.onDestroyed(tabularOnDestroyed);\n} else {\n  Template.tabular.destroyed = tabularOnDestroyed;\n}\n\n//function setUpTestingAutoRunLogging(template) {\n//  template.autorun(function () {\n//    var val = template.tabular.tableName.get();\n//    console.log('tableName changed', val);\n//  });\n//\n//  template.autorun(function () {\n//    var val = template.tabular.pubSelector.get();\n//    console.log('pubSelector changed', val);\n//  });\n//\n//  template.autorun(function () {\n//    var val = template.tabular.sort.get();\n//    console.log('sort changed', val);\n//  });\n//\n//  template.autorun(function () {\n//    var val = template.tabular.skip.get();\n//    console.log('skip changed', val);\n//  });\n//\n//  template.autorun(function () {\n//    var val = template.tabular.limit.get();\n//    console.log('limit changed', val);\n//  });\n//}\n"]}}]