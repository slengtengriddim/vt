[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar module, exports, R;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ramda_ramda/meteor-pre.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Defining this will trick upstream/ramda.js into putting its exports into module.exports                             // 1\nmodule = {};                                                                                                           // 2\n                                                                                                                       // 3\n// This also needed to complete the trick...                                                                           // 4\nexports = {};                                                                                                          // 5\n                                                                                                                       // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ramda_ramda/upstream/dist/ramda.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n//  Ramda v0.19.0                                                                                                      // 1\n//  https://github.com/ramda/ramda                                                                                     // 2\n//  (c) 2013-2015 Scott Sauyet, Michael Hurley, and David Chambers                                                     // 3\n//  Ramda may be freely distributed under the MIT license.                                                             // 4\n                                                                                                                       // 5\n;(function() {                                                                                                         // 6\n                                                                                                                       // 7\n  'use strict';                                                                                                        // 8\n                                                                                                                       // 9\n  /**                                                                                                                  // 10\n     * A special placeholder value used to specify \"gaps\" within curried functions,                                    // 11\n     * allowing partial application of any combination of arguments, regardless of                                     // 12\n     * their positions.                                                                                                // 13\n     *                                                                                                                 // 14\n     * If `g` is a curried ternary function and `_` is `R.__`, the following are                                       // 15\n     * equivalent:                                                                                                     // 16\n     *                                                                                                                 // 17\n     *   - `g(1, 2, 3)`                                                                                                // 18\n     *   - `g(_, 2, 3)(1)`                                                                                             // 19\n     *   - `g(_, _, 3)(1)(2)`                                                                                          // 20\n     *   - `g(_, _, 3)(1, 2)`                                                                                          // 21\n     *   - `g(_, 2, _)(1, 3)`                                                                                          // 22\n     *   - `g(_, 2)(1)(3)`                                                                                             // 23\n     *   - `g(_, 2)(1, 3)`                                                                                             // 24\n     *   - `g(_, 2)(_, 3)(1)`                                                                                          // 25\n     *                                                                                                                 // 26\n     * @constant                                                                                                       // 27\n     * @memberOf R                                                                                                     // 28\n     * @since v0.6.0                                                                                                   // 29\n     * @category Function                                                                                              // 30\n     * @example                                                                                                        // 31\n     *                                                                                                                 // 32\n     *      var greet = R.replace('{name}', R.__, 'Hello, {name}!');                                                   // 33\n     *      greet('Alice'); //=> 'Hello, Alice!'                                                                       // 34\n     */                                                                                                                // 35\n    var __ = { '@@functional/placeholder': true };                                                                     // 36\n                                                                                                                       // 37\n    /* eslint-disable no-unused-vars */                                                                                // 38\n    var _arity = function _arity(n, fn) {                                                                              // 39\n        /* eslint-disable no-unused-vars */                                                                            // 40\n        switch (n) {                                                                                                   // 41\n        case 0:                                                                                                        // 42\n            return function () {                                                                                       // 43\n                return fn.apply(this, arguments);                                                                      // 44\n            };                                                                                                         // 45\n        case 1:                                                                                                        // 46\n            return function (a0) {                                                                                     // 47\n                return fn.apply(this, arguments);                                                                      // 48\n            };                                                                                                         // 49\n        case 2:                                                                                                        // 50\n            return function (a0, a1) {                                                                                 // 51\n                return fn.apply(this, arguments);                                                                      // 52\n            };                                                                                                         // 53\n        case 3:                                                                                                        // 54\n            return function (a0, a1, a2) {                                                                             // 55\n                return fn.apply(this, arguments);                                                                      // 56\n            };                                                                                                         // 57\n        case 4:                                                                                                        // 58\n            return function (a0, a1, a2, a3) {                                                                         // 59\n                return fn.apply(this, arguments);                                                                      // 60\n            };                                                                                                         // 61\n        case 5:                                                                                                        // 62\n            return function (a0, a1, a2, a3, a4) {                                                                     // 63\n                return fn.apply(this, arguments);                                                                      // 64\n            };                                                                                                         // 65\n        case 6:                                                                                                        // 66\n            return function (a0, a1, a2, a3, a4, a5) {                                                                 // 67\n                return fn.apply(this, arguments);                                                                      // 68\n            };                                                                                                         // 69\n        case 7:                                                                                                        // 70\n            return function (a0, a1, a2, a3, a4, a5, a6) {                                                             // 71\n                return fn.apply(this, arguments);                                                                      // 72\n            };                                                                                                         // 73\n        case 8:                                                                                                        // 74\n            return function (a0, a1, a2, a3, a4, a5, a6, a7) {                                                         // 75\n                return fn.apply(this, arguments);                                                                      // 76\n            };                                                                                                         // 77\n        case 9:                                                                                                        // 78\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {                                                     // 79\n                return fn.apply(this, arguments);                                                                      // 80\n            };                                                                                                         // 81\n        case 10:                                                                                                       // 82\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {                                                 // 83\n                return fn.apply(this, arguments);                                                                      // 84\n            };                                                                                                         // 85\n        default:                                                                                                       // 86\n            throw new Error('First argument to _arity must be a non-negative integer no greater than ten');            // 87\n        }                                                                                                              // 88\n    };                                                                                                                 // 89\n                                                                                                                       // 90\n    var _arrayFromIterator = function _arrayFromIterator(iter) {                                                       // 91\n        var list = [];                                                                                                 // 92\n        var next;                                                                                                      // 93\n        while (!(next = iter.next()).done) {                                                                           // 94\n            list.push(next.value);                                                                                     // 95\n        }                                                                                                              // 96\n        return list;                                                                                                   // 97\n    };                                                                                                                 // 98\n                                                                                                                       // 99\n    var _cloneRegExp = function _cloneRegExp(pattern) {                                                                // 100\n        return new RegExp(pattern.source, (pattern.global ? 'g' : '') + (pattern.ignoreCase ? 'i' : '') + (pattern.multiline ? 'm' : '') + (pattern.sticky ? 'y' : '') + (pattern.unicode ? 'u' : ''));\n    };                                                                                                                 // 102\n                                                                                                                       // 103\n    var _complement = function _complement(f) {                                                                        // 104\n        return function () {                                                                                           // 105\n            return !f.apply(this, arguments);                                                                          // 106\n        };                                                                                                             // 107\n    };                                                                                                                 // 108\n                                                                                                                       // 109\n    /**                                                                                                                // 110\n     * Private `concat` function to merge two array-like objects.                                                      // 111\n     *                                                                                                                 // 112\n     * @private                                                                                                        // 113\n     * @param {Array|Arguments} [set1=[]] An array-like object.                                                        // 114\n     * @param {Array|Arguments} [set2=[]] An array-like object.                                                        // 115\n     * @return {Array} A new, merged array.                                                                            // 116\n     * @example                                                                                                        // 117\n     *                                                                                                                 // 118\n     *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]                                                     // 119\n     */                                                                                                                // 120\n    var _concat = function _concat(set1, set2) {                                                                       // 121\n        set1 = set1 || [];                                                                                             // 122\n        set2 = set2 || [];                                                                                             // 123\n        var idx;                                                                                                       // 124\n        var len1 = set1.length;                                                                                        // 125\n        var len2 = set2.length;                                                                                        // 126\n        var result = [];                                                                                               // 127\n        idx = 0;                                                                                                       // 128\n        while (idx < len1) {                                                                                           // 129\n            result[result.length] = set1[idx];                                                                         // 130\n            idx += 1;                                                                                                  // 131\n        }                                                                                                              // 132\n        idx = 0;                                                                                                       // 133\n        while (idx < len2) {                                                                                           // 134\n            result[result.length] = set2[idx];                                                                         // 135\n            idx += 1;                                                                                                  // 136\n        }                                                                                                              // 137\n        return result;                                                                                                 // 138\n    };                                                                                                                 // 139\n                                                                                                                       // 140\n    var _containsWith = function _containsWith(pred, x, list) {                                                        // 141\n        var idx = 0;                                                                                                   // 142\n        var len = list.length;                                                                                         // 143\n        while (idx < len) {                                                                                            // 144\n            if (pred(x, list[idx])) {                                                                                  // 145\n                return true;                                                                                           // 146\n            }                                                                                                          // 147\n            idx += 1;                                                                                                  // 148\n        }                                                                                                              // 149\n        return false;                                                                                                  // 150\n    };                                                                                                                 // 151\n                                                                                                                       // 152\n    var _filter = function _filter(fn, list) {                                                                         // 153\n        var idx = 0;                                                                                                   // 154\n        var len = list.length;                                                                                         // 155\n        var result = [];                                                                                               // 156\n        while (idx < len) {                                                                                            // 157\n            if (fn(list[idx])) {                                                                                       // 158\n                result[result.length] = list[idx];                                                                     // 159\n            }                                                                                                          // 160\n            idx += 1;                                                                                                  // 161\n        }                                                                                                              // 162\n        return result;                                                                                                 // 163\n    };                                                                                                                 // 164\n                                                                                                                       // 165\n    var _forceReduced = function _forceReduced(x) {                                                                    // 166\n        return {                                                                                                       // 167\n            '@@transducer/value': x,                                                                                   // 168\n            '@@transducer/reduced': true                                                                               // 169\n        };                                                                                                             // 170\n    };                                                                                                                 // 171\n                                                                                                                       // 172\n    var _has = function _has(prop, obj) {                                                                              // 173\n        return Object.prototype.hasOwnProperty.call(obj, prop);                                                        // 174\n    };                                                                                                                 // 175\n                                                                                                                       // 176\n    var _identity = function _identity(x) {                                                                            // 177\n        return x;                                                                                                      // 178\n    };                                                                                                                 // 179\n                                                                                                                       // 180\n    var _isArguments = function () {                                                                                   // 181\n        var toString = Object.prototype.toString;                                                                      // 182\n        return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {                          // 183\n            return toString.call(x) === '[object Arguments]';                                                          // 184\n        } : function _isArguments(x) {                                                                                 // 185\n            return _has('callee', x);                                                                                  // 186\n        };                                                                                                             // 187\n    }();                                                                                                               // 188\n                                                                                                                       // 189\n    /**                                                                                                                // 190\n     * Tests whether or not an object is an array.                                                                     // 191\n     *                                                                                                                 // 192\n     * @private                                                                                                        // 193\n     * @param {*} val The object to test.                                                                              // 194\n     * @return {Boolean} `true` if `val` is an array, `false` otherwise.                                               // 195\n     * @example                                                                                                        // 196\n     *                                                                                                                 // 197\n     *      _isArray([]); //=> true                                                                                    // 198\n     *      _isArray(null); //=> false                                                                                 // 199\n     *      _isArray({}); //=> false                                                                                   // 200\n     */                                                                                                                // 201\n    var _isArray = Array.isArray || function _isArray(val) {                                                           // 202\n        return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';             // 203\n    };                                                                                                                 // 204\n                                                                                                                       // 205\n    /**                                                                                                                // 206\n     * Determine if the passed argument is an integer.                                                                 // 207\n     *                                                                                                                 // 208\n     * @private                                                                                                        // 209\n     * @param {*} n                                                                                                    // 210\n     * @category Type                                                                                                  // 211\n     * @return {Boolean}                                                                                               // 212\n     */                                                                                                                // 213\n    var _isInteger = Number.isInteger || function _isInteger(n) {                                                      // 214\n        return n << 0 === n;                                                                                           // 215\n    };                                                                                                                 // 216\n                                                                                                                       // 217\n    var _isNumber = function _isNumber(x) {                                                                            // 218\n        return Object.prototype.toString.call(x) === '[object Number]';                                                // 219\n    };                                                                                                                 // 220\n                                                                                                                       // 221\n    var _isObject = function _isObject(x) {                                                                            // 222\n        return Object.prototype.toString.call(x) === '[object Object]';                                                // 223\n    };                                                                                                                 // 224\n                                                                                                                       // 225\n    var _isPlaceholder = function _isPlaceholder(a) {                                                                  // 226\n        return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;                           // 227\n    };                                                                                                                 // 228\n                                                                                                                       // 229\n    var _isRegExp = function _isRegExp(x) {                                                                            // 230\n        return Object.prototype.toString.call(x) === '[object RegExp]';                                                // 231\n    };                                                                                                                 // 232\n                                                                                                                       // 233\n    var _isString = function _isString(x) {                                                                            // 234\n        return Object.prototype.toString.call(x) === '[object String]';                                                // 235\n    };                                                                                                                 // 236\n                                                                                                                       // 237\n    var _isTransformer = function _isTransformer(obj) {                                                                // 238\n        return typeof obj['@@transducer/step'] === 'function';                                                         // 239\n    };                                                                                                                 // 240\n                                                                                                                       // 241\n    var _map = function _map(fn, functor) {                                                                            // 242\n        var idx = 0;                                                                                                   // 243\n        var len = functor.length;                                                                                      // 244\n        var result = Array(len);                                                                                       // 245\n        while (idx < len) {                                                                                            // 246\n            result[idx] = fn(functor[idx]);                                                                            // 247\n            idx += 1;                                                                                                  // 248\n        }                                                                                                              // 249\n        return result;                                                                                                 // 250\n    };                                                                                                                 // 251\n                                                                                                                       // 252\n    var _of = function _of(x) {                                                                                        // 253\n        return [x];                                                                                                    // 254\n    };                                                                                                                 // 255\n                                                                                                                       // 256\n    var _pipe = function _pipe(f, g) {                                                                                 // 257\n        return function () {                                                                                           // 258\n            return g.call(this, f.apply(this, arguments));                                                             // 259\n        };                                                                                                             // 260\n    };                                                                                                                 // 261\n                                                                                                                       // 262\n    var _pipeP = function _pipeP(f, g) {                                                                               // 263\n        return function () {                                                                                           // 264\n            var ctx = this;                                                                                            // 265\n            return f.apply(ctx, arguments).then(function (x) {                                                         // 266\n                return g.call(ctx, x);                                                                                 // 267\n            });                                                                                                        // 268\n        };                                                                                                             // 269\n    };                                                                                                                 // 270\n                                                                                                                       // 271\n    // \\b matches word boundary; [\\b] matches backspace                                                                // 272\n    var _quote = function _quote(s) {                                                                                  // 273\n        var escaped = s.replace(/\\\\/g, '\\\\\\\\').replace(/[\\b]/g, '\\\\b')    // \\b matches word boundary; [\\b] matches backspace\n    .replace(/\\f/g, '\\\\f').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\t/g, '\\\\t').replace(/\\v/g, '\\\\v').replace(/\\0/g, '\\\\0');\n        return '\"' + escaped.replace(/\"/g, '\\\\\"') + '\"';                                                               // 276\n    };                                                                                                                 // 277\n                                                                                                                       // 278\n    var _reduced = function _reduced(x) {                                                                              // 279\n        return x && x['@@transducer/reduced'] ? x : {                                                                  // 280\n            '@@transducer/value': x,                                                                                   // 281\n            '@@transducer/reduced': true                                                                               // 282\n        };                                                                                                             // 283\n    };                                                                                                                 // 284\n                                                                                                                       // 285\n    /**                                                                                                                // 286\n     * An optimized, private array `slice` implementation.                                                             // 287\n     *                                                                                                                 // 288\n     * @private                                                                                                        // 289\n     * @param {Arguments|Array} args The array or arguments object to consider.                                        // 290\n     * @param {Number} [from=0] The array index to slice from, inclusive.                                              // 291\n     * @param {Number} [to=args.length] The array index to slice to, exclusive.                                        // 292\n     * @return {Array} A new, sliced array.                                                                            // 293\n     * @example                                                                                                        // 294\n     *                                                                                                                 // 295\n     *      _slice([1, 2, 3, 4, 5], 1, 3); //=> [2, 3]                                                                 // 296\n     *                                                                                                                 // 297\n     *      var firstThreeArgs = function(a, b, c, d) {                                                                // 298\n     *        return _slice(arguments, 0, 3);                                                                          // 299\n     *      };                                                                                                         // 300\n     *      firstThreeArgs(1, 2, 3, 4); //=> [1, 2, 3]                                                                 // 301\n     */                                                                                                                // 302\n    var _slice = function _slice(args, from, to) {                                                                     // 303\n        switch (arguments.length) {                                                                                    // 304\n        case 1:                                                                                                        // 305\n            return _slice(args, 0, args.length);                                                                       // 306\n        case 2:                                                                                                        // 307\n            return _slice(args, from, args.length);                                                                    // 308\n        default:                                                                                                       // 309\n            var list = [];                                                                                             // 310\n            var idx = 0;                                                                                               // 311\n            var len = Math.max(0, Math.min(args.length, to) - from);                                                   // 312\n            while (idx < len) {                                                                                        // 313\n                list[idx] = args[from + idx];                                                                          // 314\n                idx += 1;                                                                                              // 315\n            }                                                                                                          // 316\n            return list;                                                                                               // 317\n        }                                                                                                              // 318\n    };                                                                                                                 // 319\n                                                                                                                       // 320\n    /**                                                                                                                // 321\n     * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n     */                                                                                                                // 323\n    var _toISOString = function () {                                                                                   // 324\n        var pad = function pad(n) {                                                                                    // 325\n            return (n < 10 ? '0' : '') + n;                                                                            // 326\n        };                                                                                                             // 327\n        return typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {                           // 328\n            return d.toISOString();                                                                                    // 329\n        } : function _toISOString(d) {                                                                                 // 330\n            return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';\n        };                                                                                                             // 332\n    }();                                                                                                               // 333\n                                                                                                                       // 334\n    var _xfBase = {                                                                                                    // 335\n        init: function () {                                                                                            // 336\n            return this.xf['@@transducer/init']();                                                                     // 337\n        },                                                                                                             // 338\n        result: function (result) {                                                                                    // 339\n            return this.xf['@@transducer/result'](result);                                                             // 340\n        }                                                                                                              // 341\n    };                                                                                                                 // 342\n                                                                                                                       // 343\n    var _xwrap = function () {                                                                                         // 344\n        function XWrap(fn) {                                                                                           // 345\n            this.f = fn;                                                                                               // 346\n        }                                                                                                              // 347\n        XWrap.prototype['@@transducer/init'] = function () {                                                           // 348\n            throw new Error('init not implemented on XWrap');                                                          // 349\n        };                                                                                                             // 350\n        XWrap.prototype['@@transducer/result'] = function (acc) {                                                      // 351\n            return acc;                                                                                                // 352\n        };                                                                                                             // 353\n        XWrap.prototype['@@transducer/step'] = function (acc, x) {                                                     // 354\n            return this.f(acc, x);                                                                                     // 355\n        };                                                                                                             // 356\n        return function _xwrap(fn) {                                                                                   // 357\n            return new XWrap(fn);                                                                                      // 358\n        };                                                                                                             // 359\n    }();                                                                                                               // 360\n                                                                                                                       // 361\n    var _aperture = function _aperture(n, list) {                                                                      // 362\n        var idx = 0;                                                                                                   // 363\n        var limit = list.length - (n - 1);                                                                             // 364\n        var acc = new Array(limit >= 0 ? limit : 0);                                                                   // 365\n        while (idx < limit) {                                                                                          // 366\n            acc[idx] = _slice(list, idx, idx + n);                                                                     // 367\n            idx += 1;                                                                                                  // 368\n        }                                                                                                              // 369\n        return acc;                                                                                                    // 370\n    };                                                                                                                 // 371\n                                                                                                                       // 372\n    /**                                                                                                                // 373\n     * Similar to hasMethod, this checks whether a function has a [methodname]                                         // 374\n     * function. If it isn't an array it will execute that function otherwise it                                       // 375\n     * will default to the ramda implementation.                                                                       // 376\n     *                                                                                                                 // 377\n     * @private                                                                                                        // 378\n     * @param {Function} fn ramda implemtation                                                                         // 379\n     * @param {String} methodname property to check for a custom implementation                                        // 380\n     * @return {Object} Whatever the return value of the method is.                                                    // 381\n     */                                                                                                                // 382\n    var _checkForMethod = function _checkForMethod(methodname, fn) {                                                   // 383\n        return function () {                                                                                           // 384\n            var length = arguments.length;                                                                             // 385\n            if (length === 0) {                                                                                        // 386\n                return fn();                                                                                           // 387\n            }                                                                                                          // 388\n            var obj = arguments[length - 1];                                                                           // 389\n            return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, _slice(arguments, 0, length - 1));\n        };                                                                                                             // 391\n    };                                                                                                                 // 392\n                                                                                                                       // 393\n    /**                                                                                                                // 394\n     * Optimized internal one-arity curry function.                                                                    // 395\n     *                                                                                                                 // 396\n     * @private                                                                                                        // 397\n     * @category Function                                                                                              // 398\n     * @param {Function} fn The function to curry.                                                                     // 399\n     * @return {Function} The curried function.                                                                        // 400\n     */                                                                                                                // 401\n    var _curry1 = function _curry1(fn) {                                                                               // 402\n        return function f1(a) {                                                                                        // 403\n            if (arguments.length === 0 || _isPlaceholder(a)) {                                                         // 404\n                return f1;                                                                                             // 405\n            } else {                                                                                                   // 406\n                return fn.apply(this, arguments);                                                                      // 407\n            }                                                                                                          // 408\n        };                                                                                                             // 409\n    };                                                                                                                 // 410\n                                                                                                                       // 411\n    /**                                                                                                                // 412\n     * Optimized internal two-arity curry function.                                                                    // 413\n     *                                                                                                                 // 414\n     * @private                                                                                                        // 415\n     * @category Function                                                                                              // 416\n     * @param {Function} fn The function to curry.                                                                     // 417\n     * @return {Function} The curried function.                                                                        // 418\n     */                                                                                                                // 419\n    var _curry2 = function _curry2(fn) {                                                                               // 420\n        return function f2(a, b) {                                                                                     // 421\n            switch (arguments.length) {                                                                                // 422\n            case 0:                                                                                                    // 423\n                return f2;                                                                                             // 424\n            case 1:                                                                                                    // 425\n                return _isPlaceholder(a) ? f2 : _curry1(function (_b) {                                                // 426\n                    return fn(a, _b);                                                                                  // 427\n                });                                                                                                    // 428\n            default:                                                                                                   // 429\n                return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {       // 430\n                    return fn(_a, b);                                                                                  // 431\n                }) : _isPlaceholder(b) ? _curry1(function (_b) {                                                       // 432\n                    return fn(a, _b);                                                                                  // 433\n                }) : fn(a, b);                                                                                         // 434\n            }                                                                                                          // 435\n        };                                                                                                             // 436\n    };                                                                                                                 // 437\n                                                                                                                       // 438\n    /**                                                                                                                // 439\n     * Optimized internal three-arity curry function.                                                                  // 440\n     *                                                                                                                 // 441\n     * @private                                                                                                        // 442\n     * @category Function                                                                                              // 443\n     * @param {Function} fn The function to curry.                                                                     // 444\n     * @return {Function} The curried function.                                                                        // 445\n     */                                                                                                                // 446\n    var _curry3 = function _curry3(fn) {                                                                               // 447\n        return function f3(a, b, c) {                                                                                  // 448\n            switch (arguments.length) {                                                                                // 449\n            case 0:                                                                                                    // 450\n                return f3;                                                                                             // 451\n            case 1:                                                                                                    // 452\n                return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {                                            // 453\n                    return fn(a, _b, _c);                                                                              // 454\n                });                                                                                                    // 455\n            case 2:                                                                                                    // 456\n                return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {   // 457\n                    return fn(_a, b, _c);                                                                              // 458\n                }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {                                                   // 459\n                    return fn(a, _b, _c);                                                                              // 460\n                }) : _curry1(function (_c) {                                                                           // 461\n                    return fn(a, b, _c);                                                                               // 462\n                });                                                                                                    // 463\n            default:                                                                                                   // 464\n                return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {\n                    return fn(_a, _b, c);                                                                              // 466\n                }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {                              // 467\n                    return fn(_a, b, _c);                                                                              // 468\n                }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {                              // 469\n                    return fn(a, _b, _c);                                                                              // 470\n                }) : _isPlaceholder(a) ? _curry1(function (_a) {                                                       // 471\n                    return fn(_a, b, c);                                                                               // 472\n                }) : _isPlaceholder(b) ? _curry1(function (_b) {                                                       // 473\n                    return fn(a, _b, c);                                                                               // 474\n                }) : _isPlaceholder(c) ? _curry1(function (_c) {                                                       // 475\n                    return fn(a, b, _c);                                                                               // 476\n                }) : fn(a, b, c);                                                                                      // 477\n            }                                                                                                          // 478\n        };                                                                                                             // 479\n    };                                                                                                                 // 480\n                                                                                                                       // 481\n    /**                                                                                                                // 482\n     * Internal curryN function.                                                                                       // 483\n     *                                                                                                                 // 484\n     * @private                                                                                                        // 485\n     * @category Function                                                                                              // 486\n     * @param {Number} length The arity of the curried function.                                                       // 487\n     * @param {Array} received An array of arguments received thus far.                                                // 488\n     * @param {Function} fn The function to curry.                                                                     // 489\n     * @return {Function} The curried function.                                                                        // 490\n     */                                                                                                                // 491\n    var _curryN = function _curryN(length, received, fn) {                                                             // 492\n        return function () {                                                                                           // 493\n            var combined = [];                                                                                         // 494\n            var argsIdx = 0;                                                                                           // 495\n            var left = length;                                                                                         // 496\n            var combinedIdx = 0;                                                                                       // 497\n            while (combinedIdx < received.length || argsIdx < arguments.length) {                                      // 498\n                var result;                                                                                            // 499\n                if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {\n                    result = received[combinedIdx];                                                                    // 501\n                } else {                                                                                               // 502\n                    result = arguments[argsIdx];                                                                       // 503\n                    argsIdx += 1;                                                                                      // 504\n                }                                                                                                      // 505\n                combined[combinedIdx] = result;                                                                        // 506\n                if (!_isPlaceholder(result)) {                                                                         // 507\n                    left -= 1;                                                                                         // 508\n                }                                                                                                      // 509\n                combinedIdx += 1;                                                                                      // 510\n            }                                                                                                          // 511\n            return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));                 // 512\n        };                                                                                                             // 513\n    };                                                                                                                 // 514\n                                                                                                                       // 515\n    /**                                                                                                                // 516\n     * Returns a function that dispatches with different strategies based on the                                       // 517\n     * object in list position (last argument). If it is an array, executes [fn].                                      // 518\n     * Otherwise, if it has a function with [methodname], it will execute that                                         // 519\n     * function (functor case). Otherwise, if it is a transformer, uses transducer                                     // 520\n     * [xf] to return a new transformer (transducer case). Otherwise, it will                                          // 521\n     * default to executing [fn].                                                                                      // 522\n     *                                                                                                                 // 523\n     * @private                                                                                                        // 524\n     * @param {String} methodname property to check for a custom implementation                                        // 525\n     * @param {Function} xf transducer to initialize if object is transformer                                          // 526\n     * @param {Function} fn default ramda implementation                                                               // 527\n     * @return {Function} A function that dispatches on object in list position                                        // 528\n     */                                                                                                                // 529\n    var _dispatchable = function _dispatchable(methodname, xf, fn) {                                                   // 530\n        return function () {                                                                                           // 531\n            var length = arguments.length;                                                                             // 532\n            if (length === 0) {                                                                                        // 533\n                return fn();                                                                                           // 534\n            }                                                                                                          // 535\n            var obj = arguments[length - 1];                                                                           // 536\n            if (!_isArray(obj)) {                                                                                      // 537\n                var args = _slice(arguments, 0, length - 1);                                                           // 538\n                if (typeof obj[methodname] === 'function') {                                                           // 539\n                    return obj[methodname].apply(obj, args);                                                           // 540\n                }                                                                                                      // 541\n                if (_isTransformer(obj)) {                                                                             // 542\n                    var transducer = xf.apply(null, args);                                                             // 543\n                    return transducer(obj);                                                                            // 544\n                }                                                                                                      // 545\n            }                                                                                                          // 546\n            return fn.apply(this, arguments);                                                                          // 547\n        };                                                                                                             // 548\n    };                                                                                                                 // 549\n                                                                                                                       // 550\n    var _dropLastWhile = function dropLastWhile(pred, list) {                                                          // 551\n        var idx = list.length - 1;                                                                                     // 552\n        while (idx >= 0 && pred(list[idx])) {                                                                          // 553\n            idx -= 1;                                                                                                  // 554\n        }                                                                                                              // 555\n        return _slice(list, 0, idx + 1);                                                                               // 556\n    };                                                                                                                 // 557\n                                                                                                                       // 558\n    var _xall = function () {                                                                                          // 559\n        function XAll(f, xf) {                                                                                         // 560\n            this.xf = xf;                                                                                              // 561\n            this.f = f;                                                                                                // 562\n            this.all = true;                                                                                           // 563\n        }                                                                                                              // 564\n        XAll.prototype['@@transducer/init'] = _xfBase.init;                                                            // 565\n        XAll.prototype['@@transducer/result'] = function (result) {                                                    // 566\n            if (this.all) {                                                                                            // 567\n                result = this.xf['@@transducer/step'](result, true);                                                   // 568\n            }                                                                                                          // 569\n            return this.xf['@@transducer/result'](result);                                                             // 570\n        };                                                                                                             // 571\n        XAll.prototype['@@transducer/step'] = function (result, input) {                                               // 572\n            if (!this.f(input)) {                                                                                      // 573\n                this.all = false;                                                                                      // 574\n                result = _reduced(this.xf['@@transducer/step'](result, false));                                        // 575\n            }                                                                                                          // 576\n            return result;                                                                                             // 577\n        };                                                                                                             // 578\n        return _curry2(function _xall(f, xf) {                                                                         // 579\n            return new XAll(f, xf);                                                                                    // 580\n        });                                                                                                            // 581\n    }();                                                                                                               // 582\n                                                                                                                       // 583\n    var _xany = function () {                                                                                          // 584\n        function XAny(f, xf) {                                                                                         // 585\n            this.xf = xf;                                                                                              // 586\n            this.f = f;                                                                                                // 587\n            this.any = false;                                                                                          // 588\n        }                                                                                                              // 589\n        XAny.prototype['@@transducer/init'] = _xfBase.init;                                                            // 590\n        XAny.prototype['@@transducer/result'] = function (result) {                                                    // 591\n            if (!this.any) {                                                                                           // 592\n                result = this.xf['@@transducer/step'](result, false);                                                  // 593\n            }                                                                                                          // 594\n            return this.xf['@@transducer/result'](result);                                                             // 595\n        };                                                                                                             // 596\n        XAny.prototype['@@transducer/step'] = function (result, input) {                                               // 597\n            if (this.f(input)) {                                                                                       // 598\n                this.any = true;                                                                                       // 599\n                result = _reduced(this.xf['@@transducer/step'](result, true));                                         // 600\n            }                                                                                                          // 601\n            return result;                                                                                             // 602\n        };                                                                                                             // 603\n        return _curry2(function _xany(f, xf) {                                                                         // 604\n            return new XAny(f, xf);                                                                                    // 605\n        });                                                                                                            // 606\n    }();                                                                                                               // 607\n                                                                                                                       // 608\n    var _xaperture = function () {                                                                                     // 609\n        function XAperture(n, xf) {                                                                                    // 610\n            this.xf = xf;                                                                                              // 611\n            this.pos = 0;                                                                                              // 612\n            this.full = false;                                                                                         // 613\n            this.acc = new Array(n);                                                                                   // 614\n        }                                                                                                              // 615\n        XAperture.prototype['@@transducer/init'] = _xfBase.init;                                                       // 616\n        XAperture.prototype['@@transducer/result'] = function (result) {                                               // 617\n            this.acc = null;                                                                                           // 618\n            return this.xf['@@transducer/result'](result);                                                             // 619\n        };                                                                                                             // 620\n        XAperture.prototype['@@transducer/step'] = function (result, input) {                                          // 621\n            this.store(input);                                                                                         // 622\n            return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;                          // 623\n        };                                                                                                             // 624\n        XAperture.prototype.store = function (input) {                                                                 // 625\n            this.acc[this.pos] = input;                                                                                // 626\n            this.pos += 1;                                                                                             // 627\n            if (this.pos === this.acc.length) {                                                                        // 628\n                this.pos = 0;                                                                                          // 629\n                this.full = true;                                                                                      // 630\n            }                                                                                                          // 631\n        };                                                                                                             // 632\n        XAperture.prototype.getCopy = function () {                                                                    // 633\n            return _concat(_slice(this.acc, this.pos), _slice(this.acc, 0, this.pos));                                 // 634\n        };                                                                                                             // 635\n        return _curry2(function _xaperture(n, xf) {                                                                    // 636\n            return new XAperture(n, xf);                                                                               // 637\n        });                                                                                                            // 638\n    }();                                                                                                               // 639\n                                                                                                                       // 640\n    var _xdrop = function () {                                                                                         // 641\n        function XDrop(n, xf) {                                                                                        // 642\n            this.xf = xf;                                                                                              // 643\n            this.n = n;                                                                                                // 644\n        }                                                                                                              // 645\n        XDrop.prototype['@@transducer/init'] = _xfBase.init;                                                           // 646\n        XDrop.prototype['@@transducer/result'] = _xfBase.result;                                                       // 647\n        XDrop.prototype['@@transducer/step'] = function (result, input) {                                              // 648\n            if (this.n > 0) {                                                                                          // 649\n                this.n -= 1;                                                                                           // 650\n                return result;                                                                                         // 651\n            }                                                                                                          // 652\n            return this.xf['@@transducer/step'](result, input);                                                        // 653\n        };                                                                                                             // 654\n        return _curry2(function _xdrop(n, xf) {                                                                        // 655\n            return new XDrop(n, xf);                                                                                   // 656\n        });                                                                                                            // 657\n    }();                                                                                                               // 658\n                                                                                                                       // 659\n    var _xdropLast = function () {                                                                                     // 660\n        function XDropLast(n, xf) {                                                                                    // 661\n            this.xf = xf;                                                                                              // 662\n            this.pos = 0;                                                                                              // 663\n            this.full = false;                                                                                         // 664\n            this.acc = new Array(n);                                                                                   // 665\n        }                                                                                                              // 666\n        XDropLast.prototype['@@transducer/init'] = _xfBase.init;                                                       // 667\n        XDropLast.prototype['@@transducer/result'] = function (result) {                                               // 668\n            this.acc = null;                                                                                           // 669\n            return this.xf['@@transducer/result'](result);                                                             // 670\n        };                                                                                                             // 671\n        XDropLast.prototype['@@transducer/step'] = function (result, input) {                                          // 672\n            if (this.full) {                                                                                           // 673\n                result = this.xf['@@transducer/step'](result, this.acc[this.pos]);                                     // 674\n            }                                                                                                          // 675\n            this.store(input);                                                                                         // 676\n            return result;                                                                                             // 677\n        };                                                                                                             // 678\n        XDropLast.prototype.store = function (input) {                                                                 // 679\n            this.acc[this.pos] = input;                                                                                // 680\n            this.pos += 1;                                                                                             // 681\n            if (this.pos === this.acc.length) {                                                                        // 682\n                this.pos = 0;                                                                                          // 683\n                this.full = true;                                                                                      // 684\n            }                                                                                                          // 685\n        };                                                                                                             // 686\n        return _curry2(function _xdropLast(n, xf) {                                                                    // 687\n            return new XDropLast(n, xf);                                                                               // 688\n        });                                                                                                            // 689\n    }();                                                                                                               // 690\n                                                                                                                       // 691\n    var _xdropRepeatsWith = function () {                                                                              // 692\n        function XDropRepeatsWith(pred, xf) {                                                                          // 693\n            this.xf = xf;                                                                                              // 694\n            this.pred = pred;                                                                                          // 695\n            this.lastValue = undefined;                                                                                // 696\n            this.seenFirstValue = false;                                                                               // 697\n        }                                                                                                              // 698\n        XDropRepeatsWith.prototype['@@transducer/init'] = function () {                                                // 699\n            return this.xf['@@transducer/init']();                                                                     // 700\n        };                                                                                                             // 701\n        XDropRepeatsWith.prototype['@@transducer/result'] = function (result) {                                        // 702\n            return this.xf['@@transducer/result'](result);                                                             // 703\n        };                                                                                                             // 704\n        XDropRepeatsWith.prototype['@@transducer/step'] = function (result, input) {                                   // 705\n            var sameAsLast = false;                                                                                    // 706\n            if (!this.seenFirstValue) {                                                                                // 707\n                this.seenFirstValue = true;                                                                            // 708\n            } else if (this.pred(this.lastValue, input)) {                                                             // 709\n                sameAsLast = true;                                                                                     // 710\n            }                                                                                                          // 711\n            this.lastValue = input;                                                                                    // 712\n            return sameAsLast ? result : this.xf['@@transducer/step'](result, input);                                  // 713\n        };                                                                                                             // 714\n        return _curry2(function _xdropRepeatsWith(pred, xf) {                                                          // 715\n            return new XDropRepeatsWith(pred, xf);                                                                     // 716\n        });                                                                                                            // 717\n    }();                                                                                                               // 718\n                                                                                                                       // 719\n    var _xdropWhile = function () {                                                                                    // 720\n        function XDropWhile(f, xf) {                                                                                   // 721\n            this.xf = xf;                                                                                              // 722\n            this.f = f;                                                                                                // 723\n        }                                                                                                              // 724\n        XDropWhile.prototype['@@transducer/init'] = _xfBase.init;                                                      // 725\n        XDropWhile.prototype['@@transducer/result'] = _xfBase.result;                                                  // 726\n        XDropWhile.prototype['@@transducer/step'] = function (result, input) {                                         // 727\n            if (this.f) {                                                                                              // 728\n                if (this.f(input)) {                                                                                   // 729\n                    return result;                                                                                     // 730\n                }                                                                                                      // 731\n                this.f = null;                                                                                         // 732\n            }                                                                                                          // 733\n            return this.xf['@@transducer/step'](result, input);                                                        // 734\n        };                                                                                                             // 735\n        return _curry2(function _xdropWhile(f, xf) {                                                                   // 736\n            return new XDropWhile(f, xf);                                                                              // 737\n        });                                                                                                            // 738\n    }();                                                                                                               // 739\n                                                                                                                       // 740\n    var _xfilter = function () {                                                                                       // 741\n        function XFilter(f, xf) {                                                                                      // 742\n            this.xf = xf;                                                                                              // 743\n            this.f = f;                                                                                                // 744\n        }                                                                                                              // 745\n        XFilter.prototype['@@transducer/init'] = _xfBase.init;                                                         // 746\n        XFilter.prototype['@@transducer/result'] = _xfBase.result;                                                     // 747\n        XFilter.prototype['@@transducer/step'] = function (result, input) {                                            // 748\n            return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;                               // 749\n        };                                                                                                             // 750\n        return _curry2(function _xfilter(f, xf) {                                                                      // 751\n            return new XFilter(f, xf);                                                                                 // 752\n        });                                                                                                            // 753\n    }();                                                                                                               // 754\n                                                                                                                       // 755\n    var _xfind = function () {                                                                                         // 756\n        function XFind(f, xf) {                                                                                        // 757\n            this.xf = xf;                                                                                              // 758\n            this.f = f;                                                                                                // 759\n            this.found = false;                                                                                        // 760\n        }                                                                                                              // 761\n        XFind.prototype['@@transducer/init'] = _xfBase.init;                                                           // 762\n        XFind.prototype['@@transducer/result'] = function (result) {                                                   // 763\n            if (!this.found) {                                                                                         // 764\n                result = this.xf['@@transducer/step'](result, void 0);                                                 // 765\n            }                                                                                                          // 766\n            return this.xf['@@transducer/result'](result);                                                             // 767\n        };                                                                                                             // 768\n        XFind.prototype['@@transducer/step'] = function (result, input) {                                              // 769\n            if (this.f(input)) {                                                                                       // 770\n                this.found = true;                                                                                     // 771\n                result = _reduced(this.xf['@@transducer/step'](result, input));                                        // 772\n            }                                                                                                          // 773\n            return result;                                                                                             // 774\n        };                                                                                                             // 775\n        return _curry2(function _xfind(f, xf) {                                                                        // 776\n            return new XFind(f, xf);                                                                                   // 777\n        });                                                                                                            // 778\n    }();                                                                                                               // 779\n                                                                                                                       // 780\n    var _xfindIndex = function () {                                                                                    // 781\n        function XFindIndex(f, xf) {                                                                                   // 782\n            this.xf = xf;                                                                                              // 783\n            this.f = f;                                                                                                // 784\n            this.idx = -1;                                                                                             // 785\n            this.found = false;                                                                                        // 786\n        }                                                                                                              // 787\n        XFindIndex.prototype['@@transducer/init'] = _xfBase.init;                                                      // 788\n        XFindIndex.prototype['@@transducer/result'] = function (result) {                                              // 789\n            if (!this.found) {                                                                                         // 790\n                result = this.xf['@@transducer/step'](result, -1);                                                     // 791\n            }                                                                                                          // 792\n            return this.xf['@@transducer/result'](result);                                                             // 793\n        };                                                                                                             // 794\n        XFindIndex.prototype['@@transducer/step'] = function (result, input) {                                         // 795\n            this.idx += 1;                                                                                             // 796\n            if (this.f(input)) {                                                                                       // 797\n                this.found = true;                                                                                     // 798\n                result = _reduced(this.xf['@@transducer/step'](result, this.idx));                                     // 799\n            }                                                                                                          // 800\n            return result;                                                                                             // 801\n        };                                                                                                             // 802\n        return _curry2(function _xfindIndex(f, xf) {                                                                   // 803\n            return new XFindIndex(f, xf);                                                                              // 804\n        });                                                                                                            // 805\n    }();                                                                                                               // 806\n                                                                                                                       // 807\n    var _xfindLast = function () {                                                                                     // 808\n        function XFindLast(f, xf) {                                                                                    // 809\n            this.xf = xf;                                                                                              // 810\n            this.f = f;                                                                                                // 811\n        }                                                                                                              // 812\n        XFindLast.prototype['@@transducer/init'] = _xfBase.init;                                                       // 813\n        XFindLast.prototype['@@transducer/result'] = function (result) {                                               // 814\n            return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));                    // 815\n        };                                                                                                             // 816\n        XFindLast.prototype['@@transducer/step'] = function (result, input) {                                          // 817\n            if (this.f(input)) {                                                                                       // 818\n                this.last = input;                                                                                     // 819\n            }                                                                                                          // 820\n            return result;                                                                                             // 821\n        };                                                                                                             // 822\n        return _curry2(function _xfindLast(f, xf) {                                                                    // 823\n            return new XFindLast(f, xf);                                                                               // 824\n        });                                                                                                            // 825\n    }();                                                                                                               // 826\n                                                                                                                       // 827\n    var _xfindLastIndex = function () {                                                                                // 828\n        function XFindLastIndex(f, xf) {                                                                               // 829\n            this.xf = xf;                                                                                              // 830\n            this.f = f;                                                                                                // 831\n            this.idx = -1;                                                                                             // 832\n            this.lastIdx = -1;                                                                                         // 833\n        }                                                                                                              // 834\n        XFindLastIndex.prototype['@@transducer/init'] = _xfBase.init;                                                  // 835\n        XFindLastIndex.prototype['@@transducer/result'] = function (result) {                                          // 836\n            return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));                 // 837\n        };                                                                                                             // 838\n        XFindLastIndex.prototype['@@transducer/step'] = function (result, input) {                                     // 839\n            this.idx += 1;                                                                                             // 840\n            if (this.f(input)) {                                                                                       // 841\n                this.lastIdx = this.idx;                                                                               // 842\n            }                                                                                                          // 843\n            return result;                                                                                             // 844\n        };                                                                                                             // 845\n        return _curry2(function _xfindLastIndex(f, xf) {                                                               // 846\n            return new XFindLastIndex(f, xf);                                                                          // 847\n        });                                                                                                            // 848\n    }();                                                                                                               // 849\n                                                                                                                       // 850\n    var _xmap = function () {                                                                                          // 851\n        function XMap(f, xf) {                                                                                         // 852\n            this.xf = xf;                                                                                              // 853\n            this.f = f;                                                                                                // 854\n        }                                                                                                              // 855\n        XMap.prototype['@@transducer/init'] = _xfBase.init;                                                            // 856\n        XMap.prototype['@@transducer/result'] = _xfBase.result;                                                        // 857\n        XMap.prototype['@@transducer/step'] = function (result, input) {                                               // 858\n            return this.xf['@@transducer/step'](result, this.f(input));                                                // 859\n        };                                                                                                             // 860\n        return _curry2(function _xmap(f, xf) {                                                                         // 861\n            return new XMap(f, xf);                                                                                    // 862\n        });                                                                                                            // 863\n    }();                                                                                                               // 864\n                                                                                                                       // 865\n    var _xtake = function () {                                                                                         // 866\n        function XTake(n, xf) {                                                                                        // 867\n            this.xf = xf;                                                                                              // 868\n            this.n = n;                                                                                                // 869\n        }                                                                                                              // 870\n        XTake.prototype['@@transducer/init'] = _xfBase.init;                                                           // 871\n        XTake.prototype['@@transducer/result'] = _xfBase.result;                                                       // 872\n        XTake.prototype['@@transducer/step'] = function (result, input) {                                              // 873\n            if (this.n === 0) {                                                                                        // 874\n                return _reduced(result);                                                                               // 875\n            } else {                                                                                                   // 876\n                this.n -= 1;                                                                                           // 877\n                return this.xf['@@transducer/step'](result, input);                                                    // 878\n            }                                                                                                          // 879\n        };                                                                                                             // 880\n        return _curry2(function _xtake(n, xf) {                                                                        // 881\n            return new XTake(n, xf);                                                                                   // 882\n        });                                                                                                            // 883\n    }();                                                                                                               // 884\n                                                                                                                       // 885\n    var _xtakeWhile = function () {                                                                                    // 886\n        function XTakeWhile(f, xf) {                                                                                   // 887\n            this.xf = xf;                                                                                              // 888\n            this.f = f;                                                                                                // 889\n        }                                                                                                              // 890\n        XTakeWhile.prototype['@@transducer/init'] = _xfBase.init;                                                      // 891\n        XTakeWhile.prototype['@@transducer/result'] = _xfBase.result;                                                  // 892\n        XTakeWhile.prototype['@@transducer/step'] = function (result, input) {                                         // 893\n            return this.f(input) ? this.xf['@@transducer/step'](result, input) : _reduced(result);                     // 894\n        };                                                                                                             // 895\n        return _curry2(function _xtakeWhile(f, xf) {                                                                   // 896\n            return new XTakeWhile(f, xf);                                                                              // 897\n        });                                                                                                            // 898\n    }();                                                                                                               // 899\n                                                                                                                       // 900\n    /**                                                                                                                // 901\n     * Adds two numbers. Equivalent to `a + b` but curried.                                                            // 902\n     *                                                                                                                 // 903\n     * @func                                                                                                           // 904\n     * @memberOf R                                                                                                     // 905\n     * @since v0.1.0                                                                                                   // 906\n     * @category Math                                                                                                  // 907\n     * @sig Number -> Number -> Number                                                                                 // 908\n     * @param {Number} a                                                                                               // 909\n     * @param {Number} b                                                                                               // 910\n     * @return {Number}                                                                                                // 911\n     * @see R.subtract                                                                                                 // 912\n     * @example                                                                                                        // 913\n     *                                                                                                                 // 914\n     *      R.add(2, 3);       //=>  5                                                                                 // 915\n     *      R.add(7)(10);      //=> 17                                                                                 // 916\n     */                                                                                                                // 917\n    var add = _curry2(function add(a, b) {                                                                             // 918\n        return a + b;                                                                                                  // 919\n    });                                                                                                                // 920\n                                                                                                                       // 921\n    /**                                                                                                                // 922\n     * Applies a function to the value at the given index of an array, returning a                                     // 923\n     * new copy of the array with the element at the given index replaced with the                                     // 924\n     * result of the function application.                                                                             // 925\n     *                                                                                                                 // 926\n     * @func                                                                                                           // 927\n     * @memberOf R                                                                                                     // 928\n     * @since v0.14.0                                                                                                  // 929\n     * @category List                                                                                                  // 930\n     * @sig (a -> a) -> Number -> [a] -> [a]                                                                           // 931\n     * @param {Function} fn The function to apply.                                                                     // 932\n     * @param {Number} idx The index.                                                                                  // 933\n     * @param {Array|Arguments} list An array-like object whose value                                                  // 934\n     *        at the supplied index will be replaced.                                                                  // 935\n     * @return {Array} A copy of the supplied array-like object with                                                   // 936\n     *         the element at index `idx` replaced with the value                                                      // 937\n     *         returned by applying `fn` to the existing element.                                                      // 938\n     * @see R.update                                                                                                   // 939\n     * @example                                                                                                        // 940\n     *                                                                                                                 // 941\n     *      R.adjust(R.add(10), 1, [0, 1, 2]);     //=> [0, 11, 2]                                                     // 942\n     *      R.adjust(R.add(10))(1)([0, 1, 2]);     //=> [0, 11, 2]                                                     // 943\n     */                                                                                                                // 944\n    var adjust = _curry3(function adjust(fn, idx, list) {                                                              // 945\n        if (idx >= list.length || idx < -list.length) {                                                                // 946\n            return list;                                                                                               // 947\n        }                                                                                                              // 948\n        var start = idx < 0 ? list.length : 0;                                                                         // 949\n        var _idx = start + idx;                                                                                        // 950\n        var _list = _concat(list);                                                                                     // 951\n        _list[_idx] = fn(list[_idx]);                                                                                  // 952\n        return _list;                                                                                                  // 953\n    });                                                                                                                // 954\n                                                                                                                       // 955\n    /**                                                                                                                // 956\n     * Returns `true` if all elements of the list match the predicate, `false` if                                      // 957\n     * there are any that don't.                                                                                       // 958\n     *                                                                                                                 // 959\n     * Dispatches to the `all` method of the second argument, if present.                                              // 960\n     *                                                                                                                 // 961\n     * Acts as a transducer if a transformer is given in list position.                                                // 962\n     *                                                                                                                 // 963\n     * @func                                                                                                           // 964\n     * @memberOf R                                                                                                     // 965\n     * @since v0.1.0                                                                                                   // 966\n     * @category List                                                                                                  // 967\n     * @sig (a -> Boolean) -> [a] -> Boolean                                                                           // 968\n     * @param {Function} fn The predicate function.                                                                    // 969\n     * @param {Array} list The array to consider.                                                                      // 970\n     * @return {Boolean} `true` if the predicate is satisfied by every element, `false`                                // 971\n     *         otherwise.                                                                                              // 972\n     * @see R.any, R.none, R.transduce                                                                                 // 973\n     * @example                                                                                                        // 974\n     *                                                                                                                 // 975\n     *      var lessThan2 = R.flip(R.lt)(2);                                                                           // 976\n     *      var lessThan3 = R.flip(R.lt)(3);                                                                           // 977\n     *      R.all(lessThan2)([1, 2]); //=> false                                                                       // 978\n     *      R.all(lessThan3)([1, 2]); //=> true                                                                        // 979\n     */                                                                                                                // 980\n    var all = _curry2(_dispatchable('all', _xall, function all(fn, list) {                                             // 981\n        var idx = 0;                                                                                                   // 982\n        while (idx < list.length) {                                                                                    // 983\n            if (!fn(list[idx])) {                                                                                      // 984\n                return false;                                                                                          // 985\n            }                                                                                                          // 986\n            idx += 1;                                                                                                  // 987\n        }                                                                                                              // 988\n        return true;                                                                                                   // 989\n    }));                                                                                                               // 990\n                                                                                                                       // 991\n    /**                                                                                                                // 992\n     * Returns a function that always returns the given value. Note that for                                           // 993\n     * non-primitives the value returned is a reference to the original value.                                         // 994\n     *                                                                                                                 // 995\n     * This function is known as `const`, `constant`, or `K` (for K combinator) in                                     // 996\n     * other languages and libraries.                                                                                  // 997\n     *                                                                                                                 // 998\n     * @func                                                                                                           // 999\n     * @memberOf R                                                                                                     // 1000\n     * @since v0.1.0                                                                                                   // 1001\n     * @category Function                                                                                              // 1002\n     * @sig a -> (* -> a)                                                                                              // 1003\n     * @param {*} val The value to wrap in a function                                                                  // 1004\n     * @return {Function} A Function :: * -> val.                                                                      // 1005\n     * @example                                                                                                        // 1006\n     *                                                                                                                 // 1007\n     *      var t = R.always('Tee');                                                                                   // 1008\n     *      t(); //=> 'Tee'                                                                                            // 1009\n     */                                                                                                                // 1010\n    var always = _curry1(function always(val) {                                                                        // 1011\n        return function () {                                                                                           // 1012\n            return val;                                                                                                // 1013\n        };                                                                                                             // 1014\n    });                                                                                                                // 1015\n                                                                                                                       // 1016\n    /**                                                                                                                // 1017\n     * Returns `true` if both arguments are `true`; `false` otherwise.                                                 // 1018\n     *                                                                                                                 // 1019\n     * @func                                                                                                           // 1020\n     * @memberOf R                                                                                                     // 1021\n     * @since v0.1.0                                                                                                   // 1022\n     * @category Logic                                                                                                 // 1023\n     * @sig * -> * -> *                                                                                                // 1024\n     * @param {Boolean} a A boolean value                                                                              // 1025\n     * @param {Boolean} b A boolean value                                                                              // 1026\n     * @return {Boolean} `true` if both arguments are `true`, `false` otherwise                                        // 1027\n     * @see R.both                                                                                                     // 1028\n     * @example                                                                                                        // 1029\n     *                                                                                                                 // 1030\n     *      R.and(true, true); //=> true                                                                               // 1031\n     *      R.and(true, false); //=> false                                                                             // 1032\n     *      R.and(false, true); //=> false                                                                             // 1033\n     *      R.and(false, false); //=> false                                                                            // 1034\n     */                                                                                                                // 1035\n    var and = _curry2(function and(a, b) {                                                                             // 1036\n        return a && b;                                                                                                 // 1037\n    });                                                                                                                // 1038\n                                                                                                                       // 1039\n    /**                                                                                                                // 1040\n     * Returns `true` if at least one of elements of the list match the predicate,                                     // 1041\n     * `false` otherwise.                                                                                              // 1042\n     *                                                                                                                 // 1043\n     * Dispatches to the `any` method of the second argument, if present.                                              // 1044\n     *                                                                                                                 // 1045\n     * Acts as a transducer if a transformer is given in list position.                                                // 1046\n     *                                                                                                                 // 1047\n     * @func                                                                                                           // 1048\n     * @memberOf R                                                                                                     // 1049\n     * @since v0.1.0                                                                                                   // 1050\n     * @category List                                                                                                  // 1051\n     * @sig (a -> Boolean) -> [a] -> Boolean                                                                           // 1052\n     * @param {Function} fn The predicate function.                                                                    // 1053\n     * @param {Array} list The array to consider.                                                                      // 1054\n     * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`                         // 1055\n     *         otherwise.                                                                                              // 1056\n     * @see R.all, R.none, R.transduce                                                                                 // 1057\n     * @example                                                                                                        // 1058\n     *                                                                                                                 // 1059\n     *      var lessThan0 = R.flip(R.lt)(0);                                                                           // 1060\n     *      var lessThan2 = R.flip(R.lt)(2);                                                                           // 1061\n     *      R.any(lessThan0)([1, 2]); //=> false                                                                       // 1062\n     *      R.any(lessThan2)([1, 2]); //=> true                                                                        // 1063\n     */                                                                                                                // 1064\n    var any = _curry2(_dispatchable('any', _xany, function any(fn, list) {                                             // 1065\n        var idx = 0;                                                                                                   // 1066\n        while (idx < list.length) {                                                                                    // 1067\n            if (fn(list[idx])) {                                                                                       // 1068\n                return true;                                                                                           // 1069\n            }                                                                                                          // 1070\n            idx += 1;                                                                                                  // 1071\n        }                                                                                                              // 1072\n        return false;                                                                                                  // 1073\n    }));                                                                                                               // 1074\n                                                                                                                       // 1075\n    /**                                                                                                                // 1076\n     * Returns a new list, composed of n-tuples of consecutive elements If `n` is                                      // 1077\n     * greater than the length of the list, an empty list is returned.                                                 // 1078\n     *                                                                                                                 // 1079\n     * Dispatches to the `aperture` method of the second argument, if present.                                         // 1080\n     *                                                                                                                 // 1081\n     * Acts as a transducer if a transformer is given in list position.                                                // 1082\n     *                                                                                                                 // 1083\n     * @func                                                                                                           // 1084\n     * @memberOf R                                                                                                     // 1085\n     * @since v0.12.0                                                                                                  // 1086\n     * @category List                                                                                                  // 1087\n     * @sig Number -> [a] -> [[a]]                                                                                     // 1088\n     * @param {Number} n The size of the tuples to create                                                              // 1089\n     * @param {Array} list The list to split into `n`-tuples                                                           // 1090\n     * @return {Array} The new list.                                                                                   // 1091\n     * @see R.transduce                                                                                                // 1092\n     * @example                                                                                                        // 1093\n     *                                                                                                                 // 1094\n     *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]                                      // 1095\n     *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]                                     // 1096\n     *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []                                                                    // 1097\n     */                                                                                                                // 1098\n    var aperture = _curry2(_dispatchable('aperture', _xaperture, _aperture));                                          // 1099\n                                                                                                                       // 1100\n    /**                                                                                                                // 1101\n     * Returns a new list containing the contents of the given list, followed by                                       // 1102\n     * the given element.                                                                                              // 1103\n     *                                                                                                                 // 1104\n     * @func                                                                                                           // 1105\n     * @memberOf R                                                                                                     // 1106\n     * @since v0.1.0                                                                                                   // 1107\n     * @category List                                                                                                  // 1108\n     * @sig a -> [a] -> [a]                                                                                            // 1109\n     * @param {*} el The element to add to the end of the new list.                                                    // 1110\n     * @param {Array} list The list whose contents will be added to the beginning of the output                        // 1111\n     *        list.                                                                                                    // 1112\n     * @return {Array} A new list containing the contents of the old list followed by `el`.                            // 1113\n     * @see R.prepend                                                                                                  // 1114\n     * @example                                                                                                        // 1115\n     *                                                                                                                 // 1116\n     *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']                                      // 1117\n     *      R.append('tests', []); //=> ['tests']                                                                      // 1118\n     *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]                                  // 1119\n     */                                                                                                                // 1120\n    var append = _curry2(function append(el, list) {                                                                   // 1121\n        return _concat(list, [el]);                                                                                    // 1122\n    });                                                                                                                // 1123\n                                                                                                                       // 1124\n    /**                                                                                                                // 1125\n     * Applies function `fn` to the argument list `args`. This is useful for                                           // 1126\n     * creating a fixed-arity function from a variadic function. `fn` should be a                                      // 1127\n     * bound function if context is significant.                                                                       // 1128\n     *                                                                                                                 // 1129\n     * @func                                                                                                           // 1130\n     * @memberOf R                                                                                                     // 1131\n     * @since v0.7.0                                                                                                   // 1132\n     * @category Function                                                                                              // 1133\n     * @sig (*... -> a) -> [*] -> a                                                                                    // 1134\n     * @param {Function} fn                                                                                            // 1135\n     * @param {Array} args                                                                                             // 1136\n     * @return {*}                                                                                                     // 1137\n     * @see R.call, R.unapply                                                                                          // 1138\n     * @example                                                                                                        // 1139\n     *                                                                                                                 // 1140\n     *      var nums = [1, 2, 3, -99, 42, 6, 7];                                                                       // 1141\n     *      R.apply(Math.max, nums); //=> 42                                                                           // 1142\n     */                                                                                                                // 1143\n    var apply = _curry2(function apply(fn, args) {                                                                     // 1144\n        return fn.apply(this, args);                                                                                   // 1145\n    });                                                                                                                // 1146\n                                                                                                                       // 1147\n    /**                                                                                                                // 1148\n     * Makes a shallow clone of an object, setting or overriding the specified                                         // 1149\n     * property with the given value. Note that this copies and flattens prototype                                     // 1150\n     * properties onto the new object as well. All non-primitive properties are                                        // 1151\n     * copied by reference.                                                                                            // 1152\n     *                                                                                                                 // 1153\n     * @func                                                                                                           // 1154\n     * @memberOf R                                                                                                     // 1155\n     * @since v0.8.0                                                                                                   // 1156\n     * @category Object                                                                                                // 1157\n     * @sig String -> a -> {k: v} -> {k: v}                                                                            // 1158\n     * @param {String} prop the property name to set                                                                   // 1159\n     * @param {*} val the new value                                                                                    // 1160\n     * @param {Object} obj the object to clone                                                                         // 1161\n     * @return {Object} a new object similar to the original except for the specified property.                        // 1162\n     * @see R.dissoc                                                                                                   // 1163\n     * @example                                                                                                        // 1164\n     *                                                                                                                 // 1165\n     *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}                                                     // 1166\n     */                                                                                                                // 1167\n    var assoc = _curry3(function assoc(prop, val, obj) {                                                               // 1168\n        var result = {};                                                                                               // 1169\n        for (var p in obj) {                                                                                           // 1170\n            result[p] = obj[p];                                                                                        // 1171\n        }                                                                                                              // 1172\n        result[prop] = val;                                                                                            // 1173\n        return result;                                                                                                 // 1174\n    });                                                                                                                // 1175\n                                                                                                                       // 1176\n    /**                                                                                                                // 1177\n     * Makes a shallow clone of an object, setting or overriding the nodes required                                    // 1178\n     * to create the given path, and placing the specific value at the tail end of                                     // 1179\n     * that path. Note that this copies and flattens prototype properties onto the                                     // 1180\n     * new object as well. All non-primitive properties are copied by reference.                                       // 1181\n     *                                                                                                                 // 1182\n     * @func                                                                                                           // 1183\n     * @memberOf R                                                                                                     // 1184\n     * @since v0.8.0                                                                                                   // 1185\n     * @category Object                                                                                                // 1186\n     * @sig [String] -> a -> {k: v} -> {k: v}                                                                          // 1187\n     * @param {Array} path the path to set                                                                             // 1188\n     * @param {*} val the new value                                                                                    // 1189\n     * @param {Object} obj the object to clone                                                                         // 1190\n     * @return {Object} a new object similar to the original except along the specified path.                          // 1191\n     * @see R.dissocPath                                                                                               // 1192\n     * @example                                                                                                        // 1193\n     *                                                                                                                 // 1194\n     *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}                                 // 1195\n     */                                                                                                                // 1196\n    var assocPath = _curry3(function assocPath(path, val, obj) {                                                       // 1197\n        switch (path.length) {                                                                                         // 1198\n        case 0:                                                                                                        // 1199\n            return val;                                                                                                // 1200\n        case 1:                                                                                                        // 1201\n            return assoc(path[0], val, obj);                                                                           // 1202\n        default:                                                                                                       // 1203\n            return assoc(path[0], assocPath(_slice(path, 1), val, Object(obj[path[0]])), obj);                         // 1204\n        }                                                                                                              // 1205\n    });                                                                                                                // 1206\n                                                                                                                       // 1207\n    /**                                                                                                                // 1208\n     * Creates a function that is bound to a context.                                                                  // 1209\n     * Note: `R.bind` does not provide the additional argument-binding capabilities of                                 // 1210\n     * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n     *                                                                                                                 // 1212\n     * @func                                                                                                           // 1213\n     * @memberOf R                                                                                                     // 1214\n     * @since v0.6.0                                                                                                   // 1215\n     * @category Function                                                                                              // 1216\n     * @category Object                                                                                                // 1217\n     * @sig (* -> *) -> {*} -> (* -> *)                                                                                // 1218\n     * @param {Function} fn The function to bind to context                                                            // 1219\n     * @param {Object} thisObj The context to bind `fn` to                                                             // 1220\n     * @return {Function} A function that will execute in the context of `thisObj`.                                    // 1221\n     * @see R.partial                                                                                                  // 1222\n     */                                                                                                                // 1223\n    var bind = _curry2(function bind(fn, thisObj) {                                                                    // 1224\n        return _arity(fn.length, function () {                                                                         // 1225\n            return fn.apply(thisObj, arguments);                                                                       // 1226\n        });                                                                                                            // 1227\n    });                                                                                                                // 1228\n                                                                                                                       // 1229\n    /**                                                                                                                // 1230\n     * A function wrapping calls to the two functions in an `&&` operation,                                            // 1231\n     * returning the result of the first function if it is false-y and the result                                      // 1232\n     * of the second function otherwise. Note that this is short-circuited,                                            // 1233\n     * meaning that the second function will not be invoked if the first returns a                                     // 1234\n     * false-y value.                                                                                                  // 1235\n     *                                                                                                                 // 1236\n     * @func                                                                                                           // 1237\n     * @memberOf R                                                                                                     // 1238\n     * @since v0.12.0                                                                                                  // 1239\n     * @category Logic                                                                                                 // 1240\n     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)                                                // 1241\n     * @param {Function} f a predicate                                                                                 // 1242\n     * @param {Function} g another predicate                                                                           // 1243\n     * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.       // 1244\n     * @see R.and                                                                                                      // 1245\n     * @example                                                                                                        // 1246\n     *                                                                                                                 // 1247\n     *      var gt10 = x => x > 10;                                                                                    // 1248\n     *      var even = x => x % 2 === 0;                                                                               // 1249\n     *      var f = R.both(gt10, even);                                                                                // 1250\n     *      f(100); //=> true                                                                                          // 1251\n     *      f(101); //=> false                                                                                         // 1252\n     */                                                                                                                // 1253\n    var both = _curry2(function both(f, g) {                                                                           // 1254\n        return function _both() {                                                                                      // 1255\n            return f.apply(this, arguments) && g.apply(this, arguments);                                               // 1256\n        };                                                                                                             // 1257\n    });                                                                                                                // 1258\n                                                                                                                       // 1259\n    /**                                                                                                                // 1260\n     * Makes a comparator function out of a function that reports whether the first                                    // 1261\n     * element is less than the second.                                                                                // 1262\n     *                                                                                                                 // 1263\n     * @func                                                                                                           // 1264\n     * @memberOf R                                                                                                     // 1265\n     * @since v0.1.0                                                                                                   // 1266\n     * @category Function                                                                                              // 1267\n     * @sig (a, b -> Boolean) -> (a, b -> Number)                                                                      // 1268\n     * @param {Function} pred A predicate function of arity two.                                                       // 1269\n     * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`.         // 1270\n     * @example                                                                                                        // 1271\n     *                                                                                                                 // 1272\n     *      var cmp = R.comparator((a, b) => a.age < b.age);                                                           // 1273\n     *      var people = [                                                                                             // 1274\n     *        // ...                                                                                                   // 1275\n     *      ];                                                                                                         // 1276\n     *      R.sort(cmp, people);                                                                                       // 1277\n     */                                                                                                                // 1278\n    var comparator = _curry1(function comparator(pred) {                                                               // 1279\n        return function (a, b) {                                                                                       // 1280\n            return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;                                                               // 1281\n        };                                                                                                             // 1282\n    });                                                                                                                // 1283\n                                                                                                                       // 1284\n    /**                                                                                                                // 1285\n     * Returns a function, `fn`, which encapsulates if/else-if/else logic.                                             // 1286\n     * `R.cond` takes a list of [predicate, transform] pairs. All of the arguments                                     // 1287\n     * to `fn` are applied to each of the predicates in turn until one returns a                                       // 1288\n     * \"truthy\" value, at which point `fn` returns the result of applying its                                          // 1289\n     * arguments to the corresponding transformer. If none of the predicates                                           // 1290\n     * matches, `fn` returns undefined.                                                                                // 1291\n     *                                                                                                                 // 1292\n     * @func                                                                                                           // 1293\n     * @memberOf R                                                                                                     // 1294\n     * @since v0.6.0                                                                                                   // 1295\n     * @category Logic                                                                                                 // 1296\n     * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)                                                           // 1297\n     * @param {Array} pairs                                                                                            // 1298\n     * @return {Function}                                                                                              // 1299\n     * @example                                                                                                        // 1300\n     *                                                                                                                 // 1301\n     *      var fn = R.cond([                                                                                          // 1302\n     *        [R.equals(0),   R.always('water freezes at 0°C')],                                                       // 1303\n     *        [R.equals(100), R.always('water boils at 100°C')],                                                       // 1304\n     *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']                                     // 1305\n     *      ]);                                                                                                        // 1306\n     *      fn(0); //=> 'water freezes at 0°C'                                                                         // 1307\n     *      fn(50); //=> 'nothing special happens at 50°C'                                                             // 1308\n     *      fn(100); //=> 'water boils at 100°C'                                                                       // 1309\n     */                                                                                                                // 1310\n    var cond = _curry1(function cond(pairs) {                                                                          // 1311\n        return function () {                                                                                           // 1312\n            var idx = 0;                                                                                               // 1313\n            while (idx < pairs.length) {                                                                               // 1314\n                if (pairs[idx][0].apply(this, arguments)) {                                                            // 1315\n                    return pairs[idx][1].apply(this, arguments);                                                       // 1316\n                }                                                                                                      // 1317\n                idx += 1;                                                                                              // 1318\n            }                                                                                                          // 1319\n        };                                                                                                             // 1320\n    });                                                                                                                // 1321\n                                                                                                                       // 1322\n    /**                                                                                                                // 1323\n     * Counts the elements of a list according to how many match each value of a                                       // 1324\n     * key generated by the supplied function. Returns an object mapping the keys                                      // 1325\n     * produced by `fn` to the number of occurrences in the list. Note that all                                        // 1326\n     * keys are coerced to strings because of how JavaScript objects work.                                             // 1327\n     *                                                                                                                 // 1328\n     * @func                                                                                                           // 1329\n     * @memberOf R                                                                                                     // 1330\n     * @since v0.1.0                                                                                                   // 1331\n     * @category Relation                                                                                              // 1332\n     * @sig (a -> String) -> [a] -> {*}                                                                                // 1333\n     * @param {Function} fn The function used to map values to keys.                                                   // 1334\n     * @param {Array} list The list to count elements from.                                                            // 1335\n     * @return {Object} An object mapping keys to number of occurrences in the list.                                   // 1336\n     * @example                                                                                                        // 1337\n     *                                                                                                                 // 1338\n     *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];                                                              // 1339\n     *      var letters = R.split('', 'abcABCaaaBBc');                                                                 // 1340\n     *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}                                           // 1341\n     *      R.countBy(R.toLower)(letters);   //=> {'a': 5, 'b': 4, 'c': 3}                                             // 1342\n     */                                                                                                                // 1343\n    var countBy = _curry2(function countBy(fn, list) {                                                                 // 1344\n        var counts = {};                                                                                               // 1345\n        var len = list.length;                                                                                         // 1346\n        var idx = 0;                                                                                                   // 1347\n        while (idx < len) {                                                                                            // 1348\n            var key = fn(list[idx]);                                                                                   // 1349\n            counts[key] = (_has(key, counts) ? counts[key] : 0) + 1;                                                   // 1350\n            idx += 1;                                                                                                  // 1351\n        }                                                                                                              // 1352\n        return counts;                                                                                                 // 1353\n    });                                                                                                                // 1354\n                                                                                                                       // 1355\n    /**                                                                                                                // 1356\n     * Returns a curried equivalent of the provided function, with the specified                                       // 1357\n     * arity. The curried function has two unusual capabilities. First, its                                            // 1358\n     * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the                                    // 1359\n     * following are equivalent:                                                                                       // 1360\n     *                                                                                                                 // 1361\n     *   - `g(1)(2)(3)`                                                                                                // 1362\n     *   - `g(1)(2, 3)`                                                                                                // 1363\n     *   - `g(1, 2)(3)`                                                                                                // 1364\n     *   - `g(1, 2, 3)`                                                                                                // 1365\n     *                                                                                                                 // 1366\n     * Secondly, the special placeholder value `R.__` may be used to specify                                           // 1367\n     * \"gaps\", allowing partial application of any combination of arguments,                                           // 1368\n     * regardless of their positions. If `g` is as above and `_` is `R.__`, the                                        // 1369\n     * following are equivalent:                                                                                       // 1370\n     *                                                                                                                 // 1371\n     *   - `g(1, 2, 3)`                                                                                                // 1372\n     *   - `g(_, 2, 3)(1)`                                                                                             // 1373\n     *   - `g(_, _, 3)(1)(2)`                                                                                          // 1374\n     *   - `g(_, _, 3)(1, 2)`                                                                                          // 1375\n     *   - `g(_, 2)(1)(3)`                                                                                             // 1376\n     *   - `g(_, 2)(1, 3)`                                                                                             // 1377\n     *   - `g(_, 2)(_, 3)(1)`                                                                                          // 1378\n     *                                                                                                                 // 1379\n     * @func                                                                                                           // 1380\n     * @memberOf R                                                                                                     // 1381\n     * @since v0.5.0                                                                                                   // 1382\n     * @category Function                                                                                              // 1383\n     * @sig Number -> (* -> a) -> (* -> a)                                                                             // 1384\n     * @param {Number} length The arity for the returned function.                                                     // 1385\n     * @param {Function} fn The function to curry.                                                                     // 1386\n     * @return {Function} A new, curried function.                                                                     // 1387\n     * @see R.curry                                                                                                    // 1388\n     * @example                                                                                                        // 1389\n     *                                                                                                                 // 1390\n     *      var sumArgs = (...args) => R.sum(args);                                                                    // 1391\n     *                                                                                                                 // 1392\n     *      var curriedAddFourNumbers = R.curryN(4, sumArgs);                                                          // 1393\n     *      var f = curriedAddFourNumbers(1, 2);                                                                       // 1394\n     *      var g = f(3);                                                                                              // 1395\n     *      g(4); //=> 10                                                                                              // 1396\n     */                                                                                                                // 1397\n    var curryN = _curry2(function curryN(length, fn) {                                                                 // 1398\n        if (length === 1) {                                                                                            // 1399\n            return _curry1(fn);                                                                                        // 1400\n        }                                                                                                              // 1401\n        return _arity(length, _curryN(length, [], fn));                                                                // 1402\n    });                                                                                                                // 1403\n                                                                                                                       // 1404\n    /**                                                                                                                // 1405\n     * Decrements its argument.                                                                                        // 1406\n     *                                                                                                                 // 1407\n     * @func                                                                                                           // 1408\n     * @memberOf R                                                                                                     // 1409\n     * @since v0.9.0                                                                                                   // 1410\n     * @category Math                                                                                                  // 1411\n     * @sig Number -> Number                                                                                           // 1412\n     * @param {Number} n                                                                                               // 1413\n     * @return {Number}                                                                                                // 1414\n     * @see R.inc                                                                                                      // 1415\n     * @example                                                                                                        // 1416\n     *                                                                                                                 // 1417\n     *      R.dec(42); //=> 41                                                                                         // 1418\n     */                                                                                                                // 1419\n    var dec = add(-1);                                                                                                 // 1420\n                                                                                                                       // 1421\n    /**                                                                                                                // 1422\n     * Returns the second argument if it is not `null`, `undefined` or `NaN`                                           // 1423\n     * otherwise the first argument is returned.                                                                       // 1424\n     *                                                                                                                 // 1425\n     * @func                                                                                                           // 1426\n     * @memberOf R                                                                                                     // 1427\n     * @since v0.10.0                                                                                                  // 1428\n     * @category Logic                                                                                                 // 1429\n     * @sig a -> b -> a | b                                                                                            // 1430\n     * @param {a} val The default value.                                                                               // 1431\n     * @param {b} val The value to return if it is not null or undefined                                               // 1432\n     * @return {*} The the second value or the default value                                                           // 1433\n     * @example                                                                                                        // 1434\n     *                                                                                                                 // 1435\n     *      var defaultTo42 = R.defaultTo(42);                                                                         // 1436\n     *                                                                                                                 // 1437\n     *      defaultTo42(null);  //=> 42                                                                                // 1438\n     *      defaultTo42(undefined);  //=> 42                                                                           // 1439\n     *      defaultTo42('Ramda');  //=> 'Ramda'                                                                        // 1440\n     *      defaultTo42(parseInt('string')); //=> 42                                                                   // 1441\n     */                                                                                                                // 1442\n    var defaultTo = _curry2(function defaultTo(d, v) {                                                                 // 1443\n        return v == null || v !== v ? d : v;                                                                           // 1444\n    });                                                                                                                // 1445\n                                                                                                                       // 1446\n    /**                                                                                                                // 1447\n     * Finds the set (i.e. no duplicates) of all elements in the first list not                                        // 1448\n     * contained in the second list. Duplication is determined according to the                                        // 1449\n     * value returned by applying the supplied predicate to two list elements.                                         // 1450\n     *                                                                                                                 // 1451\n     * @func                                                                                                           // 1452\n     * @memberOf R                                                                                                     // 1453\n     * @since v0.1.0                                                                                                   // 1454\n     * @category Relation                                                                                              // 1455\n     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]                                                                   // 1456\n     * @param {Function} pred A predicate used to test whether two items are equal.                                    // 1457\n     * @param {Array} list1 The first list.                                                                            // 1458\n     * @param {Array} list2 The second list.                                                                           // 1459\n     * @return {Array} The elements in `list1` that are not in `list2`.                                                // 1460\n     * @see R.difference                                                                                               // 1461\n     * @example                                                                                                        // 1462\n     *                                                                                                                 // 1463\n     *      function cmp(x, y) => x.a === y.a;                                                                         // 1464\n     *      var l1 = [{a: 1}, {a: 2}, {a: 3}];                                                                         // 1465\n     *      var l2 = [{a: 3}, {a: 4}];                                                                                 // 1466\n     *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]                                                       // 1467\n     */                                                                                                                // 1468\n    var differenceWith = _curry3(function differenceWith(pred, first, second) {                                        // 1469\n        var out = [];                                                                                                  // 1470\n        var idx = 0;                                                                                                   // 1471\n        var firstLen = first.length;                                                                                   // 1472\n        while (idx < firstLen) {                                                                                       // 1473\n            if (!_containsWith(pred, first[idx], second) && !_containsWith(pred, first[idx], out)) {                   // 1474\n                out.push(first[idx]);                                                                                  // 1475\n            }                                                                                                          // 1476\n            idx += 1;                                                                                                  // 1477\n        }                                                                                                              // 1478\n        return out;                                                                                                    // 1479\n    });                                                                                                                // 1480\n                                                                                                                       // 1481\n    /**                                                                                                                // 1482\n     * Returns a new object that does not contain a `prop` property.                                                   // 1483\n     *                                                                                                                 // 1484\n     * @func                                                                                                           // 1485\n     * @memberOf R                                                                                                     // 1486\n     * @since v0.10.0                                                                                                  // 1487\n     * @category Object                                                                                                // 1488\n     * @sig String -> {k: v} -> {k: v}                                                                                 // 1489\n     * @param {String} prop the name of the property to dissociate                                                     // 1490\n     * @param {Object} obj the object to clone                                                                         // 1491\n     * @return {Object} a new object similar to the original but without the specified property                        // 1492\n     * @see R.assoc                                                                                                    // 1493\n     * @example                                                                                                        // 1494\n     *                                                                                                                 // 1495\n     *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}                                                       // 1496\n     */                                                                                                                // 1497\n    var dissoc = _curry2(function dissoc(prop, obj) {                                                                  // 1498\n        var result = {};                                                                                               // 1499\n        for (var p in obj) {                                                                                           // 1500\n            if (p !== prop) {                                                                                          // 1501\n                result[p] = obj[p];                                                                                    // 1502\n            }                                                                                                          // 1503\n        }                                                                                                              // 1504\n        return result;                                                                                                 // 1505\n    });                                                                                                                // 1506\n                                                                                                                       // 1507\n    /**                                                                                                                // 1508\n     * Makes a shallow clone of an object, omitting the property at the given path.                                    // 1509\n     * Note that this copies and flattens prototype properties onto the new object                                     // 1510\n     * as well. All non-primitive properties are copied by reference.                                                  // 1511\n     *                                                                                                                 // 1512\n     * @func                                                                                                           // 1513\n     * @memberOf R                                                                                                     // 1514\n     * @since v0.11.0                                                                                                  // 1515\n     * @category Object                                                                                                // 1516\n     * @sig [String] -> {k: v} -> {k: v}                                                                               // 1517\n     * @param {Array} path the path to set                                                                             // 1518\n     * @param {Object} obj the object to clone                                                                         // 1519\n     * @return {Object} a new object without the property at path                                                      // 1520\n     * @see R.assocPath                                                                                                // 1521\n     * @example                                                                                                        // 1522\n     *                                                                                                                 // 1523\n     *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}                                        // 1524\n     */                                                                                                                // 1525\n    var dissocPath = _curry2(function dissocPath(path, obj) {                                                          // 1526\n        switch (path.length) {                                                                                         // 1527\n        case 0:                                                                                                        // 1528\n            return obj;                                                                                                // 1529\n        case 1:                                                                                                        // 1530\n            return dissoc(path[0], obj);                                                                               // 1531\n        default:                                                                                                       // 1532\n            var head = path[0];                                                                                        // 1533\n            var tail = _slice(path, 1);                                                                                // 1534\n            return obj[head] == null ? obj : assoc(head, dissocPath(tail, obj[head]), obj);                            // 1535\n        }                                                                                                              // 1536\n    });                                                                                                                // 1537\n                                                                                                                       // 1538\n    /**                                                                                                                // 1539\n     * Divides two numbers. Equivalent to `a / b`.                                                                     // 1540\n     *                                                                                                                 // 1541\n     * @func                                                                                                           // 1542\n     * @memberOf R                                                                                                     // 1543\n     * @since v0.1.0                                                                                                   // 1544\n     * @category Math                                                                                                  // 1545\n     * @sig Number -> Number -> Number                                                                                 // 1546\n     * @param {Number} a The first value.                                                                              // 1547\n     * @param {Number} b The second value.                                                                             // 1548\n     * @return {Number} The result of `a / b`.                                                                         // 1549\n     * @see R.multiply                                                                                                 // 1550\n     * @example                                                                                                        // 1551\n     *                                                                                                                 // 1552\n     *      R.divide(71, 100); //=> 0.71                                                                               // 1553\n     *                                                                                                                 // 1554\n     *      var half = R.divide(R.__, 2);                                                                              // 1555\n     *      half(42); //=> 21                                                                                          // 1556\n     *                                                                                                                 // 1557\n     *      var reciprocal = R.divide(1);                                                                              // 1558\n     *      reciprocal(4);   //=> 0.25                                                                                 // 1559\n     */                                                                                                                // 1560\n    var divide = _curry2(function divide(a, b) {                                                                       // 1561\n        return a / b;                                                                                                  // 1562\n    });                                                                                                                // 1563\n                                                                                                                       // 1564\n    /**                                                                                                                // 1565\n     * Returns a new list containing the last `n` elements of a given list, passing                                    // 1566\n     * each value to the supplied predicate function, skipping elements while the                                      // 1567\n     * predicate function returns `true`. The predicate function is passed one                                         // 1568\n     * argument: *(value)*.                                                                                            // 1569\n     *                                                                                                                 // 1570\n     * Dispatches to the `dropWhile` method of the second argument, if present.                                        // 1571\n     *                                                                                                                 // 1572\n     * Acts as a transducer if a transformer is given in list position.                                                // 1573\n     *                                                                                                                 // 1574\n     * @func                                                                                                           // 1575\n     * @memberOf R                                                                                                     // 1576\n     * @since v0.9.0                                                                                                   // 1577\n     * @category List                                                                                                  // 1578\n     * @sig (a -> Boolean) -> [a] -> [a]                                                                               // 1579\n     * @param {Function} fn The function called per iteration.                                                         // 1580\n     * @param {Array} list The collection to iterate over.                                                             // 1581\n     * @return {Array} A new array.                                                                                    // 1582\n     * @see R.takeWhile, R.transduce, R.addIndex                                                                       // 1583\n     * @example                                                                                                        // 1584\n     *                                                                                                                 // 1585\n     *      var lteTwo = x => x <= 2;                                                                                  // 1586\n     *                                                                                                                 // 1587\n     *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]                                           // 1588\n     */                                                                                                                // 1589\n    var dropWhile = _curry2(_dispatchable('dropWhile', _xdropWhile, function dropWhile(pred, list) {                   // 1590\n        var idx = 0;                                                                                                   // 1591\n        var len = list.length;                                                                                         // 1592\n        while (idx < len && pred(list[idx])) {                                                                         // 1593\n            idx += 1;                                                                                                  // 1594\n        }                                                                                                              // 1595\n        return _slice(list, idx);                                                                                      // 1596\n    }));                                                                                                               // 1597\n                                                                                                                       // 1598\n    /**                                                                                                                // 1599\n     * A function wrapping calls to the two functions in an `||` operation,                                            // 1600\n     * returning the result of the first function if it is truth-y and the result                                      // 1601\n     * of the second function otherwise. Note that this is short-circuited,                                            // 1602\n     * meaning that the second function will not be invoked if the first returns a                                     // 1603\n     * truth-y value.                                                                                                  // 1604\n     *                                                                                                                 // 1605\n     * @func                                                                                                           // 1606\n     * @memberOf R                                                                                                     // 1607\n     * @since v0.12.0                                                                                                  // 1608\n     * @category Logic                                                                                                 // 1609\n     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)                                                // 1610\n     * @param {Function} f a predicate                                                                                 // 1611\n     * @param {Function} g another predicate                                                                           // 1612\n     * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.       // 1613\n     * @see R.or                                                                                                       // 1614\n     * @example                                                                                                        // 1615\n     *                                                                                                                 // 1616\n     *      var gt10 = x => x > 10;                                                                                    // 1617\n     *      var even = x => x % 2 === 0;                                                                               // 1618\n     *      var f = R.either(gt10, even);                                                                              // 1619\n     *      f(101); //=> true                                                                                          // 1620\n     *      f(8); //=> true                                                                                            // 1621\n     */                                                                                                                // 1622\n    var either = _curry2(function either(f, g) {                                                                       // 1623\n        return function _either() {                                                                                    // 1624\n            return f.apply(this, arguments) || g.apply(this, arguments);                                               // 1625\n        };                                                                                                             // 1626\n    });                                                                                                                // 1627\n                                                                                                                       // 1628\n    /**                                                                                                                // 1629\n     * Returns the empty value of its argument's type. Ramda defines the empty                                         // 1630\n     * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other                                       // 1631\n     * types are supported if they define `<Type>.empty` and/or                                                        // 1632\n     * `<Type>.prototype.empty`.                                                                                       // 1633\n     *                                                                                                                 // 1634\n     * Dispatches to the `empty` method of the first argument, if present.                                             // 1635\n     *                                                                                                                 // 1636\n     * @func                                                                                                           // 1637\n     * @memberOf R                                                                                                     // 1638\n     * @since v0.3.0                                                                                                   // 1639\n     * @category Function                                                                                              // 1640\n     * @sig a -> a                                                                                                     // 1641\n     * @param {*} x                                                                                                    // 1642\n     * @return {*}                                                                                                     // 1643\n     * @example                                                                                                        // 1644\n     *                                                                                                                 // 1645\n     *      R.empty(Just(42));      //=> Nothing()                                                                     // 1646\n     *      R.empty([1, 2, 3]);     //=> []                                                                            // 1647\n     *      R.empty('unicorns');    //=> ''                                                                            // 1648\n     *      R.empty({x: 1, y: 2});  //=> {}                                                                            // 1649\n     */                                                                                                                // 1650\n    // else                                                                                                            // 1651\n    var empty = _curry1(function empty(x) {                                                                            // 1652\n        return x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? '' : _isObject(x) ? {} : _isArguments(x) ? function () {\n            return arguments;                                                                                          // 1654\n        }() : // else                                                                                                  // 1655\n        void 0;                                                                                                        // 1656\n    });                                                                                                                // 1657\n                                                                                                                       // 1658\n    /**                                                                                                                // 1659\n     * Creates a new object by recursively evolving a shallow copy of `object`,                                        // 1660\n     * according to the `transformation` functions. All non-primitive properties                                       // 1661\n     * are copied by reference.                                                                                        // 1662\n     *                                                                                                                 // 1663\n     * A `transformation` function will not be invoked if its corresponding key                                        // 1664\n     * does not exist in the evolved object.                                                                           // 1665\n     *                                                                                                                 // 1666\n     * @func                                                                                                           // 1667\n     * @memberOf R                                                                                                     // 1668\n     * @since v0.9.0                                                                                                   // 1669\n     * @category Object                                                                                                // 1670\n     * @sig {k: (v -> v)} -> {k: v} -> {k: v}                                                                          // 1671\n     * @param {Object} transformations The object specifying transformation functions to apply                         // 1672\n     *        to the object.                                                                                           // 1673\n     * @param {Object} object The object to be transformed.                                                            // 1674\n     * @return {Object} The transformed object.                                                                        // 1675\n     * @example                                                                                                        // 1676\n     *                                                                                                                 // 1677\n     *      var tomato  = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};                     // 1678\n     *      var transformations = {                                                                                    // 1679\n     *        firstName: R.trim,                                                                                       // 1680\n     *        lastName: R.trim, // Will not get invoked.                                                               // 1681\n     *        data: {elapsed: R.add(1), remaining: R.add(-1)}                                                          // 1682\n     *      };                                                                                                         // 1683\n     *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}\n     */                                                                                                                // 1685\n    var evolve = _curry2(function evolve(transformations, object) {                                                    // 1686\n        var result = {};                                                                                               // 1687\n        var transformation, key, type;                                                                                 // 1688\n        for (key in object) {                                                                                          // 1689\n            transformation = transformations[key];                                                                     // 1690\n            type = typeof transformation;                                                                              // 1691\n            result[key] = type === 'function' ? transformation(object[key]) : type === 'object' ? evolve(transformations[key], object[key]) : object[key];\n        }                                                                                                              // 1693\n        return result;                                                                                                 // 1694\n    });                                                                                                                // 1695\n                                                                                                                       // 1696\n    /**                                                                                                                // 1697\n     * Returns the first element of the list which matches the predicate, or                                           // 1698\n     * `undefined` if no element matches.                                                                              // 1699\n     *                                                                                                                 // 1700\n     * Dispatches to the `find` method of the second argument, if present.                                             // 1701\n     *                                                                                                                 // 1702\n     * Acts as a transducer if a transformer is given in list position.                                                // 1703\n     *                                                                                                                 // 1704\n     * @func                                                                                                           // 1705\n     * @memberOf R                                                                                                     // 1706\n     * @since v0.1.0                                                                                                   // 1707\n     * @category List                                                                                                  // 1708\n     * @sig (a -> Boolean) -> [a] -> a | undefined                                                                     // 1709\n     * @param {Function} fn The predicate function used to determine if the element is the                             // 1710\n     *        desired one.                                                                                             // 1711\n     * @param {Array} list The array to consider.                                                                      // 1712\n     * @return {Object} The element found, or `undefined`.                                                             // 1713\n     * @see R.transduce                                                                                                // 1714\n     * @example                                                                                                        // 1715\n     *                                                                                                                 // 1716\n     *      var xs = [{a: 1}, {a: 2}, {a: 3}];                                                                         // 1717\n     *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}                                                                  // 1718\n     *      R.find(R.propEq('a', 4))(xs); //=> undefined                                                               // 1719\n     */                                                                                                                // 1720\n    var find = _curry2(_dispatchable('find', _xfind, function find(fn, list) {                                         // 1721\n        var idx = 0;                                                                                                   // 1722\n        var len = list.length;                                                                                         // 1723\n        while (idx < len) {                                                                                            // 1724\n            if (fn(list[idx])) {                                                                                       // 1725\n                return list[idx];                                                                                      // 1726\n            }                                                                                                          // 1727\n            idx += 1;                                                                                                  // 1728\n        }                                                                                                              // 1729\n    }));                                                                                                               // 1730\n                                                                                                                       // 1731\n    /**                                                                                                                // 1732\n     * Returns the index of the first element of the list which matches the                                            // 1733\n     * predicate, or `-1` if no element matches.                                                                       // 1734\n     *                                                                                                                 // 1735\n     * Dispatches to the `findIndex` method of the second argument, if present.                                        // 1736\n     *                                                                                                                 // 1737\n     * Acts as a transducer if a transformer is given in list position.                                                // 1738\n     *                                                                                                                 // 1739\n     * @func                                                                                                           // 1740\n     * @memberOf R                                                                                                     // 1741\n     * @since v0.1.1                                                                                                   // 1742\n     * @category List                                                                                                  // 1743\n     * @sig (a -> Boolean) -> [a] -> Number                                                                            // 1744\n     * @param {Function} fn The predicate function used to determine if the element is the                             // 1745\n     * desired one.                                                                                                    // 1746\n     * @param {Array} list The array to consider.                                                                      // 1747\n     * @return {Number} The index of the element found, or `-1`.                                                       // 1748\n     * @see R.transduce                                                                                                // 1749\n     * @example                                                                                                        // 1750\n     *                                                                                                                 // 1751\n     *      var xs = [{a: 1}, {a: 2}, {a: 3}];                                                                         // 1752\n     *      R.findIndex(R.propEq('a', 2))(xs); //=> 1                                                                  // 1753\n     *      R.findIndex(R.propEq('a', 4))(xs); //=> -1                                                                 // 1754\n     */                                                                                                                // 1755\n    var findIndex = _curry2(_dispatchable('findIndex', _xfindIndex, function findIndex(fn, list) {                     // 1756\n        var idx = 0;                                                                                                   // 1757\n        var len = list.length;                                                                                         // 1758\n        while (idx < len) {                                                                                            // 1759\n            if (fn(list[idx])) {                                                                                       // 1760\n                return idx;                                                                                            // 1761\n            }                                                                                                          // 1762\n            idx += 1;                                                                                                  // 1763\n        }                                                                                                              // 1764\n        return -1;                                                                                                     // 1765\n    }));                                                                                                               // 1766\n                                                                                                                       // 1767\n    /**                                                                                                                // 1768\n     * Returns the last element of the list which matches the predicate, or                                            // 1769\n     * `undefined` if no element matches.                                                                              // 1770\n     *                                                                                                                 // 1771\n     * Dispatches to the `findLast` method of the second argument, if present.                                         // 1772\n     *                                                                                                                 // 1773\n     * Acts as a transducer if a transformer is given in list position.                                                // 1774\n     *                                                                                                                 // 1775\n     * @func                                                                                                           // 1776\n     * @memberOf R                                                                                                     // 1777\n     * @since v0.1.1                                                                                                   // 1778\n     * @category List                                                                                                  // 1779\n     * @sig (a -> Boolean) -> [a] -> a | undefined                                                                     // 1780\n     * @param {Function} fn The predicate function used to determine if the element is the                             // 1781\n     * desired one.                                                                                                    // 1782\n     * @param {Array} list The array to consider.                                                                      // 1783\n     * @return {Object} The element found, or `undefined`.                                                             // 1784\n     * @see R.transduce                                                                                                // 1785\n     * @example                                                                                                        // 1786\n     *                                                                                                                 // 1787\n     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];                                                                      // 1788\n     *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}                                                        // 1789\n     *      R.findLast(R.propEq('a', 4))(xs); //=> undefined                                                           // 1790\n     */                                                                                                                // 1791\n    var findLast = _curry2(_dispatchable('findLast', _xfindLast, function findLast(fn, list) {                         // 1792\n        var idx = list.length - 1;                                                                                     // 1793\n        while (idx >= 0) {                                                                                             // 1794\n            if (fn(list[idx])) {                                                                                       // 1795\n                return list[idx];                                                                                      // 1796\n            }                                                                                                          // 1797\n            idx -= 1;                                                                                                  // 1798\n        }                                                                                                              // 1799\n    }));                                                                                                               // 1800\n                                                                                                                       // 1801\n    /**                                                                                                                // 1802\n     * Returns the index of the last element of the list which matches the                                             // 1803\n     * predicate, or `-1` if no element matches.                                                                       // 1804\n     *                                                                                                                 // 1805\n     * Dispatches to the `findLastIndex` method of the second argument, if present.                                    // 1806\n     *                                                                                                                 // 1807\n     * Acts as a transducer if a transformer is given in list position.                                                // 1808\n     *                                                                                                                 // 1809\n     * @func                                                                                                           // 1810\n     * @memberOf R                                                                                                     // 1811\n     * @since v0.1.1                                                                                                   // 1812\n     * @category List                                                                                                  // 1813\n     * @sig (a -> Boolean) -> [a] -> Number                                                                            // 1814\n     * @param {Function} fn The predicate function used to determine if the element is the                             // 1815\n     * desired one.                                                                                                    // 1816\n     * @param {Array} list The array to consider.                                                                      // 1817\n     * @return {Number} The index of the element found, or `-1`.                                                       // 1818\n     * @see R.transduce                                                                                                // 1819\n     * @example                                                                                                        // 1820\n     *                                                                                                                 // 1821\n     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];                                                                      // 1822\n     *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1                                                              // 1823\n     *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1                                                             // 1824\n     */                                                                                                                // 1825\n    var findLastIndex = _curry2(_dispatchable('findLastIndex', _xfindLastIndex, function findLastIndex(fn, list) {     // 1826\n        var idx = list.length - 1;                                                                                     // 1827\n        while (idx >= 0) {                                                                                             // 1828\n            if (fn(list[idx])) {                                                                                       // 1829\n                return idx;                                                                                            // 1830\n            }                                                                                                          // 1831\n            idx -= 1;                                                                                                  // 1832\n        }                                                                                                              // 1833\n        return -1;                                                                                                     // 1834\n    }));                                                                                                               // 1835\n                                                                                                                       // 1836\n    /**                                                                                                                // 1837\n     * Iterate over an input `list`, calling a provided function `fn` for each                                         // 1838\n     * element in the list.                                                                                            // 1839\n     *                                                                                                                 // 1840\n     * `fn` receives one argument: *(value)*.                                                                          // 1841\n     *                                                                                                                 // 1842\n     * Note: `R.forEach` does not skip deleted or unassigned indices (sparse                                           // 1843\n     * arrays), unlike the native `Array.prototype.forEach` method. For more                                           // 1844\n     * details on this behavior, see:                                                                                  // 1845\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description      // 1846\n     *                                                                                                                 // 1847\n     * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns                                     // 1848\n     * the original array. In some libraries this function is named `each`.                                            // 1849\n     *                                                                                                                 // 1850\n     * Dispatches to the `forEach` method of the second argument, if present.                                          // 1851\n     *                                                                                                                 // 1852\n     * @func                                                                                                           // 1853\n     * @memberOf R                                                                                                     // 1854\n     * @since v0.1.1                                                                                                   // 1855\n     * @category List                                                                                                  // 1856\n     * @sig (a -> *) -> [a] -> [a]                                                                                     // 1857\n     * @param {Function} fn The function to invoke. Receives one argument, `value`.                                    // 1858\n     * @param {Array} list The list to iterate over.                                                                   // 1859\n     * @return {Array} The original list.                                                                              // 1860\n     * @see R.addIndex                                                                                                 // 1861\n     * @example                                                                                                        // 1862\n     *                                                                                                                 // 1863\n     *      var printXPlusFive = x => console.log(x + 5);                                                              // 1864\n     *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]                                                       // 1865\n     *      //-> 6                                                                                                     // 1866\n     *      //-> 7                                                                                                     // 1867\n     *      //-> 8                                                                                                     // 1868\n     */                                                                                                                // 1869\n    var forEach = _curry2(_checkForMethod('forEach', function forEach(fn, list) {                                      // 1870\n        var len = list.length;                                                                                         // 1871\n        var idx = 0;                                                                                                   // 1872\n        while (idx < len) {                                                                                            // 1873\n            fn(list[idx]);                                                                                             // 1874\n            idx += 1;                                                                                                  // 1875\n        }                                                                                                              // 1876\n        return list;                                                                                                   // 1877\n    }));                                                                                                               // 1878\n                                                                                                                       // 1879\n    /**                                                                                                                // 1880\n     * Creates a new object out of a list key-value pairs.                                                             // 1881\n     *                                                                                                                 // 1882\n     * @func                                                                                                           // 1883\n     * @memberOf R                                                                                                     // 1884\n     * @since v0.3.0                                                                                                   // 1885\n     * @category List                                                                                                  // 1886\n     * @sig [[k,v]] -> {k: v}                                                                                          // 1887\n     * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.      // 1888\n     * @return {Object} The object made by pairing up `keys` and `values`.                                             // 1889\n     * @see R.toPairs, R.pair                                                                                          // 1890\n     * @example                                                                                                        // 1891\n     *                                                                                                                 // 1892\n     *      R.fromPairs([['a', 1], ['b', 2],  ['c', 3]]); //=> {a: 1, b: 2, c: 3}                                      // 1893\n     */                                                                                                                // 1894\n    var fromPairs = _curry1(function fromPairs(pairs) {                                                                // 1895\n        var idx = 0;                                                                                                   // 1896\n        var len = pairs.length;                                                                                        // 1897\n        var out = {};                                                                                                  // 1898\n        while (idx < len) {                                                                                            // 1899\n            if (_isArray(pairs[idx]) && pairs[idx].length) {                                                           // 1900\n                out[pairs[idx][0]] = pairs[idx][1];                                                                    // 1901\n            }                                                                                                          // 1902\n            idx += 1;                                                                                                  // 1903\n        }                                                                                                              // 1904\n        return out;                                                                                                    // 1905\n    });                                                                                                                // 1906\n                                                                                                                       // 1907\n    /**                                                                                                                // 1908\n     * Returns `true` if the first argument is greater than the second; `false`                                        // 1909\n     * otherwise.                                                                                                      // 1910\n     *                                                                                                                 // 1911\n     * @func                                                                                                           // 1912\n     * @memberOf R                                                                                                     // 1913\n     * @since v0.1.0                                                                                                   // 1914\n     * @category Relation                                                                                              // 1915\n     * @sig Ord a => a -> a -> Boolean                                                                                 // 1916\n     * @param {*} a                                                                                                    // 1917\n     * @param {*} b                                                                                                    // 1918\n     * @return {Boolean}                                                                                               // 1919\n     * @see R.lt                                                                                                       // 1920\n     * @example                                                                                                        // 1921\n     *                                                                                                                 // 1922\n     *      R.gt(2, 1); //=> true                                                                                      // 1923\n     *      R.gt(2, 2); //=> false                                                                                     // 1924\n     *      R.gt(2, 3); //=> false                                                                                     // 1925\n     *      R.gt('a', 'z'); //=> false                                                                                 // 1926\n     *      R.gt('z', 'a'); //=> true                                                                                  // 1927\n     */                                                                                                                // 1928\n    var gt = _curry2(function gt(a, b) {                                                                               // 1929\n        return a > b;                                                                                                  // 1930\n    });                                                                                                                // 1931\n                                                                                                                       // 1932\n    /**                                                                                                                // 1933\n     * Returns `true` if the first argument is greater than or equal to the second;                                    // 1934\n     * `false` otherwise.                                                                                              // 1935\n     *                                                                                                                 // 1936\n     * @func                                                                                                           // 1937\n     * @memberOf R                                                                                                     // 1938\n     * @since v0.1.0                                                                                                   // 1939\n     * @category Relation                                                                                              // 1940\n     * @sig Ord a => a -> a -> Boolean                                                                                 // 1941\n     * @param {Number} a                                                                                               // 1942\n     * @param {Number} b                                                                                               // 1943\n     * @return {Boolean}                                                                                               // 1944\n     * @see R.lte                                                                                                      // 1945\n     * @example                                                                                                        // 1946\n     *                                                                                                                 // 1947\n     *      R.gte(2, 1); //=> true                                                                                     // 1948\n     *      R.gte(2, 2); //=> true                                                                                     // 1949\n     *      R.gte(2, 3); //=> false                                                                                    // 1950\n     *      R.gte('a', 'z'); //=> false                                                                                // 1951\n     *      R.gte('z', 'a'); //=> true                                                                                 // 1952\n     */                                                                                                                // 1953\n    var gte = _curry2(function gte(a, b) {                                                                             // 1954\n        return a >= b;                                                                                                 // 1955\n    });                                                                                                                // 1956\n                                                                                                                       // 1957\n    /**                                                                                                                // 1958\n     * Returns whether or not an object has an own property with the specified name                                    // 1959\n     *                                                                                                                 // 1960\n     * @func                                                                                                           // 1961\n     * @memberOf R                                                                                                     // 1962\n     * @since v0.7.0                                                                                                   // 1963\n     * @category Object                                                                                                // 1964\n     * @sig s -> {s: x} -> Boolean                                                                                     // 1965\n     * @param {String} prop The name of the property to check for.                                                     // 1966\n     * @param {Object} obj The object to query.                                                                        // 1967\n     * @return {Boolean} Whether the property exists.                                                                  // 1968\n     * @example                                                                                                        // 1969\n     *                                                                                                                 // 1970\n     *      var hasName = R.has('name');                                                                               // 1971\n     *      hasName({name: 'alice'});   //=> true                                                                      // 1972\n     *      hasName({name: 'bob'});     //=> true                                                                      // 1973\n     *      hasName({});                //=> false                                                                     // 1974\n     *                                                                                                                 // 1975\n     *      var point = {x: 0, y: 0};                                                                                  // 1976\n     *      var pointHas = R.has(R.__, point);                                                                         // 1977\n     *      pointHas('x');  //=> true                                                                                  // 1978\n     *      pointHas('y');  //=> true                                                                                  // 1979\n     *      pointHas('z');  //=> false                                                                                 // 1980\n     */                                                                                                                // 1981\n    var has = _curry2(_has);                                                                                           // 1982\n                                                                                                                       // 1983\n    /**                                                                                                                // 1984\n     * Returns whether or not an object or its prototype chain has a property with                                     // 1985\n     * the specified name                                                                                              // 1986\n     *                                                                                                                 // 1987\n     * @func                                                                                                           // 1988\n     * @memberOf R                                                                                                     // 1989\n     * @since v0.7.0                                                                                                   // 1990\n     * @category Object                                                                                                // 1991\n     * @sig s -> {s: x} -> Boolean                                                                                     // 1992\n     * @param {String} prop The name of the property to check for.                                                     // 1993\n     * @param {Object} obj The object to query.                                                                        // 1994\n     * @return {Boolean} Whether the property exists.                                                                  // 1995\n     * @example                                                                                                        // 1996\n     *                                                                                                                 // 1997\n     *      function Rectangle(width, height) {                                                                        // 1998\n     *        this.width = width;                                                                                      // 1999\n     *        this.height = height;                                                                                    // 2000\n     *      }                                                                                                          // 2001\n     *      Rectangle.prototype.area = function() {                                                                    // 2002\n     *        return this.width * this.height;                                                                         // 2003\n     *      };                                                                                                         // 2004\n     *                                                                                                                 // 2005\n     *      var square = new Rectangle(2, 2);                                                                          // 2006\n     *      R.hasIn('width', square);  //=> true                                                                       // 2007\n     *      R.hasIn('area', square);  //=> true                                                                        // 2008\n     */                                                                                                                // 2009\n    var hasIn = _curry2(function hasIn(prop, obj) {                                                                    // 2010\n        return prop in obj;                                                                                            // 2011\n    });                                                                                                                // 2012\n                                                                                                                       // 2013\n    /**                                                                                                                // 2014\n     * Returns true if its arguments are identical, false otherwise. Values are                                        // 2015\n     * identical if they reference the same memory. `NaN` is identical to `NaN`;                                       // 2016\n     * `0` and `-0` are not identical.                                                                                 // 2017\n     *                                                                                                                 // 2018\n     * @func                                                                                                           // 2019\n     * @memberOf R                                                                                                     // 2020\n     * @since v0.15.0                                                                                                  // 2021\n     * @category Relation                                                                                              // 2022\n     * @sig a -> a -> Boolean                                                                                          // 2023\n     * @param {*} a                                                                                                    // 2024\n     * @param {*} b                                                                                                    // 2025\n     * @return {Boolean}                                                                                               // 2026\n     * @example                                                                                                        // 2027\n     *                                                                                                                 // 2028\n     *      var o = {};                                                                                                // 2029\n     *      R.identical(o, o); //=> true                                                                               // 2030\n     *      R.identical(1, 1); //=> true                                                                               // 2031\n     *      R.identical(1, '1'); //=> false                                                                            // 2032\n     *      R.identical([], []); //=> false                                                                            // 2033\n     *      R.identical(0, -0); //=> false                                                                             // 2034\n     *      R.identical(NaN, NaN); //=> true                                                                           // 2035\n     */                                                                                                                // 2036\n    // SameValue algorithm                                                                                             // 2037\n    // Steps 1-5, 7-10                                                                                                 // 2038\n    // Steps 6.b-6.e: +0 != -0                                                                                         // 2039\n    // Step 6.a: NaN == NaN                                                                                            // 2040\n    var identical = _curry2(function identical(a, b) {                                                                 // 2041\n        // SameValue algorithm                                                                                         // 2042\n        if (a === b) {                                                                                                 // 2043\n            // Steps 1-5, 7-10                                                                                         // 2044\n            // Steps 6.b-6.e: +0 != -0                                                                                 // 2045\n            return a !== 0 || 1 / a === 1 / b;                                                                         // 2046\n        } else {                                                                                                       // 2047\n            // Step 6.a: NaN == NaN                                                                                    // 2048\n            return a !== a && b !== b;                                                                                 // 2049\n        }                                                                                                              // 2050\n    });                                                                                                                // 2051\n                                                                                                                       // 2052\n    /**                                                                                                                // 2053\n     * A function that does nothing but return the parameter supplied to it. Good                                      // 2054\n     * as a default or placeholder function.                                                                           // 2055\n     *                                                                                                                 // 2056\n     * @func                                                                                                           // 2057\n     * @memberOf R                                                                                                     // 2058\n     * @since v0.1.0                                                                                                   // 2059\n     * @category Function                                                                                              // 2060\n     * @sig a -> a                                                                                                     // 2061\n     * @param {*} x The value to return.                                                                               // 2062\n     * @return {*} The input value, `x`.                                                                               // 2063\n     * @example                                                                                                        // 2064\n     *                                                                                                                 // 2065\n     *      R.identity(1); //=> 1                                                                                      // 2066\n     *                                                                                                                 // 2067\n     *      var obj = {};                                                                                              // 2068\n     *      R.identity(obj) === obj; //=> true                                                                         // 2069\n     */                                                                                                                // 2070\n    var identity = _curry1(_identity);                                                                                 // 2071\n                                                                                                                       // 2072\n    /**                                                                                                                // 2073\n     * Creates a function that will process either the `onTrue` or the `onFalse`                                       // 2074\n     * function depending upon the result of the `condition` predicate.                                                // 2075\n     *                                                                                                                 // 2076\n     * @func                                                                                                           // 2077\n     * @memberOf R                                                                                                     // 2078\n     * @since v0.8.0                                                                                                   // 2079\n     * @category Logic                                                                                                 // 2080\n     * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)                                             // 2081\n     * @param {Function} condition A predicate function                                                                // 2082\n     * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.                 // 2083\n     * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.                 // 2084\n     * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`                  // 2085\n     *                    function depending upon the result of the `condition` predicate.                             // 2086\n     * @see R.unless, R.when                                                                                           // 2087\n     * @example                                                                                                        // 2088\n     *                                                                                                                 // 2089\n     *      var incCount = R.ifElse(                                                                                   // 2090\n     *        R.has('count'),                                                                                          // 2091\n     *        R.over(R.lensProp('count'), R.inc),                                                                      // 2092\n     *        R.assoc('count', 1)                                                                                      // 2093\n     *      );                                                                                                         // 2094\n     *      incCount({});           //=> { count: 1 }                                                                  // 2095\n     *      incCount({ count: 1 }); //=> { count: 2 }                                                                  // 2096\n     */                                                                                                                // 2097\n    var ifElse = _curry3(function ifElse(condition, onTrue, onFalse) {                                                 // 2098\n        return curryN(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {                  // 2099\n            return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);  // 2100\n        });                                                                                                            // 2101\n    });                                                                                                                // 2102\n                                                                                                                       // 2103\n    /**                                                                                                                // 2104\n     * Increments its argument.                                                                                        // 2105\n     *                                                                                                                 // 2106\n     * @func                                                                                                           // 2107\n     * @memberOf R                                                                                                     // 2108\n     * @since v0.9.0                                                                                                   // 2109\n     * @category Math                                                                                                  // 2110\n     * @sig Number -> Number                                                                                           // 2111\n     * @param {Number} n                                                                                               // 2112\n     * @return {Number}                                                                                                // 2113\n     * @see R.dec                                                                                                      // 2114\n     * @example                                                                                                        // 2115\n     *                                                                                                                 // 2116\n     *      R.inc(42); //=> 43                                                                                         // 2117\n     */                                                                                                                // 2118\n    var inc = add(1);                                                                                                  // 2119\n                                                                                                                       // 2120\n    /**                                                                                                                // 2121\n     * Inserts the supplied element into the list, at index `index`. _Note that                                        // 2122\n     * this is not destructive_: it returns a copy of the list with the changes.                                       // 2123\n     * <small>No lists have been harmed in the application of this function.</small>                                   // 2124\n     *                                                                                                                 // 2125\n     * @func                                                                                                           // 2126\n     * @memberOf R                                                                                                     // 2127\n     * @since v0.2.2                                                                                                   // 2128\n     * @category List                                                                                                  // 2129\n     * @sig Number -> a -> [a] -> [a]                                                                                  // 2130\n     * @param {Number} index The position to insert the element                                                        // 2131\n     * @param {*} elt The element to insert into the Array                                                             // 2132\n     * @param {Array} list The list to insert into                                                                     // 2133\n     * @return {Array} A new Array with `elt` inserted at `index`.                                                     // 2134\n     * @example                                                                                                        // 2135\n     *                                                                                                                 // 2136\n     *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]                                                            // 2137\n     */                                                                                                                // 2138\n    var insert = _curry3(function insert(idx, elt, list) {                                                             // 2139\n        idx = idx < list.length && idx >= 0 ? idx : list.length;                                                       // 2140\n        var result = _slice(list);                                                                                     // 2141\n        result.splice(idx, 0, elt);                                                                                    // 2142\n        return result;                                                                                                 // 2143\n    });                                                                                                                // 2144\n                                                                                                                       // 2145\n    /**                                                                                                                // 2146\n     * Inserts the sub-list into the list, at index `index`. _Note that this is not                                    // 2147\n     * destructive_: it returns a copy of the list with the changes.                                                   // 2148\n     * <small>No lists have been harmed in the application of this function.</small>                                   // 2149\n     *                                                                                                                 // 2150\n     * @func                                                                                                           // 2151\n     * @memberOf R                                                                                                     // 2152\n     * @since v0.9.0                                                                                                   // 2153\n     * @category List                                                                                                  // 2154\n     * @sig Number -> [a] -> [a] -> [a]                                                                                // 2155\n     * @param {Number} index The position to insert the sub-list                                                       // 2156\n     * @param {Array} elts The sub-list to insert into the Array                                                       // 2157\n     * @param {Array} list The list to insert the sub-list into                                                        // 2158\n     * @return {Array} A new Array with `elts` inserted starting at `index`.                                           // 2159\n     * @example                                                                                                        // 2160\n     *                                                                                                                 // 2161\n     *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]                                       // 2162\n     */                                                                                                                // 2163\n    var insertAll = _curry3(function insertAll(idx, elts, list) {                                                      // 2164\n        idx = idx < list.length && idx >= 0 ? idx : list.length;                                                       // 2165\n        return _concat(_concat(_slice(list, 0, idx), elts), _slice(list, idx));                                        // 2166\n    });                                                                                                                // 2167\n                                                                                                                       // 2168\n    /**                                                                                                                // 2169\n     * Creates a new list with the separator interposed between elements.                                              // 2170\n     *                                                                                                                 // 2171\n     * Dispatches to the `intersperse` method of the second argument, if present.                                      // 2172\n     *                                                                                                                 // 2173\n     * @func                                                                                                           // 2174\n     * @memberOf R                                                                                                     // 2175\n     * @since v0.14.0                                                                                                  // 2176\n     * @category List                                                                                                  // 2177\n     * @sig a -> [a] -> [a]                                                                                            // 2178\n     * @param {*} separator The element to add to the list.                                                            // 2179\n     * @param {Array} list The list to be interposed.                                                                  // 2180\n     * @return {Array} The new list.                                                                                   // 2181\n     * @example                                                                                                        // 2182\n     *                                                                                                                 // 2183\n     *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']                                      // 2184\n     */                                                                                                                // 2185\n    var intersperse = _curry2(_checkForMethod('intersperse', function intersperse(separator, list) {                   // 2186\n        var out = [];                                                                                                  // 2187\n        var idx = 0;                                                                                                   // 2188\n        var length = list.length;                                                                                      // 2189\n        while (idx < length) {                                                                                         // 2190\n            if (idx === length - 1) {                                                                                  // 2191\n                out.push(list[idx]);                                                                                   // 2192\n            } else {                                                                                                   // 2193\n                out.push(list[idx], separator);                                                                        // 2194\n            }                                                                                                          // 2195\n            idx += 1;                                                                                                  // 2196\n        }                                                                                                              // 2197\n        return out;                                                                                                    // 2198\n    }));                                                                                                               // 2199\n                                                                                                                       // 2200\n    /**                                                                                                                // 2201\n     * See if an object (`val`) is an instance of the supplied constructor. This                                       // 2202\n     * function will check up the inheritance chain, if any.                                                           // 2203\n     *                                                                                                                 // 2204\n     * @func                                                                                                           // 2205\n     * @memberOf R                                                                                                     // 2206\n     * @since v0.3.0                                                                                                   // 2207\n     * @category Type                                                                                                  // 2208\n     * @sig (* -> {*}) -> a -> Boolean                                                                                 // 2209\n     * @param {Object} ctor A constructor                                                                              // 2210\n     * @param {*} val The value to test                                                                                // 2211\n     * @return {Boolean}                                                                                               // 2212\n     * @example                                                                                                        // 2213\n     *                                                                                                                 // 2214\n     *      R.is(Object, {}); //=> true                                                                                // 2215\n     *      R.is(Number, 1); //=> true                                                                                 // 2216\n     *      R.is(Object, 1); //=> false                                                                                // 2217\n     *      R.is(String, 's'); //=> true                                                                               // 2218\n     *      R.is(String, new String('')); //=> true                                                                    // 2219\n     *      R.is(Object, new String('')); //=> true                                                                    // 2220\n     *      R.is(Object, 's'); //=> false                                                                              // 2221\n     *      R.is(Number, {}); //=> false                                                                               // 2222\n     */                                                                                                                // 2223\n    var is = _curry2(function is(Ctor, val) {                                                                          // 2224\n        return val != null && val.constructor === Ctor || val instanceof Ctor;                                         // 2225\n    });                                                                                                                // 2226\n                                                                                                                       // 2227\n    /**                                                                                                                // 2228\n     * Tests whether or not an object is similar to an array.                                                          // 2229\n     *                                                                                                                 // 2230\n     * @func                                                                                                           // 2231\n     * @memberOf R                                                                                                     // 2232\n     * @since v0.5.0                                                                                                   // 2233\n     * @category Type                                                                                                  // 2234\n     * @category List                                                                                                  // 2235\n     * @sig * -> Boolean                                                                                               // 2236\n     * @param {*} x The object to test.                                                                                // 2237\n     * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.   // 2238\n     * @example                                                                                                        // 2239\n     *                                                                                                                 // 2240\n     *      R.isArrayLike([]); //=> true                                                                               // 2241\n     *      R.isArrayLike(true); //=> false                                                                            // 2242\n     *      R.isArrayLike({}); //=> false                                                                              // 2243\n     *      R.isArrayLike({length: 10}); //=> false                                                                    // 2244\n     *      R.isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true                                               // 2245\n     */                                                                                                                // 2246\n    var isArrayLike = _curry1(function isArrayLike(x) {                                                                // 2247\n        if (_isArray(x)) {                                                                                             // 2248\n            return true;                                                                                               // 2249\n        }                                                                                                              // 2250\n        if (!x) {                                                                                                      // 2251\n            return false;                                                                                              // 2252\n        }                                                                                                              // 2253\n        if (typeof x !== 'object') {                                                                                   // 2254\n            return false;                                                                                              // 2255\n        }                                                                                                              // 2256\n        if (x instanceof String) {                                                                                     // 2257\n            return false;                                                                                              // 2258\n        }                                                                                                              // 2259\n        if (x.nodeType === 1) {                                                                                        // 2260\n            return !!x.length;                                                                                         // 2261\n        }                                                                                                              // 2262\n        if (x.length === 0) {                                                                                          // 2263\n            return true;                                                                                               // 2264\n        }                                                                                                              // 2265\n        if (x.length > 0) {                                                                                            // 2266\n            return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);                                              // 2267\n        }                                                                                                              // 2268\n        return false;                                                                                                  // 2269\n    });                                                                                                                // 2270\n                                                                                                                       // 2271\n    /**                                                                                                                // 2272\n     * Checks if the input value is `null` or `undefined`.                                                             // 2273\n     *                                                                                                                 // 2274\n     * @func                                                                                                           // 2275\n     * @memberOf R                                                                                                     // 2276\n     * @since v0.9.0                                                                                                   // 2277\n     * @category Type                                                                                                  // 2278\n     * @sig * -> Boolean                                                                                               // 2279\n     * @param {*} x The value to test.                                                                                 // 2280\n     * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.                                    // 2281\n     * @example                                                                                                        // 2282\n     *                                                                                                                 // 2283\n     *      R.isNil(null); //=> true                                                                                   // 2284\n     *      R.isNil(undefined); //=> true                                                                              // 2285\n     *      R.isNil(0); //=> false                                                                                     // 2286\n     *      R.isNil([]); //=> false                                                                                    // 2287\n     */                                                                                                                // 2288\n    var isNil = _curry1(function isNil(x) {                                                                            // 2289\n        return x == null;                                                                                              // 2290\n    });                                                                                                                // 2291\n                                                                                                                       // 2292\n    /**                                                                                                                // 2293\n     * Returns a list containing the names of all the enumerable own properties of                                     // 2294\n     * the supplied object.                                                                                            // 2295\n     * Note that the order of the output array is not guaranteed to be consistent                                      // 2296\n     * across different JS platforms.                                                                                  // 2297\n     *                                                                                                                 // 2298\n     * @func                                                                                                           // 2299\n     * @memberOf R                                                                                                     // 2300\n     * @since v0.1.0                                                                                                   // 2301\n     * @category Object                                                                                                // 2302\n     * @sig {k: v} -> [k]                                                                                              // 2303\n     * @param {Object} obj The object to extract properties from                                                       // 2304\n     * @return {Array} An array of the object's own properties.                                                        // 2305\n     * @example                                                                                                        // 2306\n     *                                                                                                                 // 2307\n     *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']                                                           // 2308\n     */                                                                                                                // 2309\n    // cover IE < 9 keys issues                                                                                        // 2310\n    var keys = function () {                                                                                           // 2311\n        // cover IE < 9 keys issues                                                                                    // 2312\n        var hasEnumBug = !{ toString: null }.propertyIsEnumerable('toString');                                         // 2313\n        var nonEnumerableProps = [                                                                                     // 2314\n            'constructor',                                                                                             // 2315\n            'valueOf',                                                                                                 // 2316\n            'isPrototypeOf',                                                                                           // 2317\n            'toString',                                                                                                // 2318\n            'propertyIsEnumerable',                                                                                    // 2319\n            'hasOwnProperty',                                                                                          // 2320\n            'toLocaleString'                                                                                           // 2321\n        ];                                                                                                             // 2322\n        var contains = function contains(list, item) {                                                                 // 2323\n            var idx = 0;                                                                                               // 2324\n            while (idx < list.length) {                                                                                // 2325\n                if (list[idx] === item) {                                                                              // 2326\n                    return true;                                                                                       // 2327\n                }                                                                                                      // 2328\n                idx += 1;                                                                                              // 2329\n            }                                                                                                          // 2330\n            return false;                                                                                              // 2331\n        };                                                                                                             // 2332\n        return typeof Object.keys === 'function' ? _curry1(function keys(obj) {                                        // 2333\n            return Object(obj) !== obj ? [] : Object.keys(obj);                                                        // 2334\n        }) : _curry1(function keys(obj) {                                                                              // 2335\n            if (Object(obj) !== obj) {                                                                                 // 2336\n                return [];                                                                                             // 2337\n            }                                                                                                          // 2338\n            var prop, nIdx;                                                                                            // 2339\n            var ks = [];                                                                                               // 2340\n            for (prop in obj) {                                                                                        // 2341\n                if (_has(prop, obj)) {                                                                                 // 2342\n                    ks[ks.length] = prop;                                                                              // 2343\n                }                                                                                                      // 2344\n            }                                                                                                          // 2345\n            if (hasEnumBug) {                                                                                          // 2346\n                nIdx = nonEnumerableProps.length - 1;                                                                  // 2347\n                while (nIdx >= 0) {                                                                                    // 2348\n                    prop = nonEnumerableProps[nIdx];                                                                   // 2349\n                    if (_has(prop, obj) && !contains(ks, prop)) {                                                      // 2350\n                        ks[ks.length] = prop;                                                                          // 2351\n                    }                                                                                                  // 2352\n                    nIdx -= 1;                                                                                         // 2353\n                }                                                                                                      // 2354\n            }                                                                                                          // 2355\n            return ks;                                                                                                 // 2356\n        });                                                                                                            // 2357\n    }();                                                                                                               // 2358\n                                                                                                                       // 2359\n    /**                                                                                                                // 2360\n     * Returns a list containing the names of all the properties of the supplied                                       // 2361\n     * object, including prototype properties.                                                                         // 2362\n     * Note that the order of the output array is not guaranteed to be consistent                                      // 2363\n     * across different JS platforms.                                                                                  // 2364\n     *                                                                                                                 // 2365\n     * @func                                                                                                           // 2366\n     * @memberOf R                                                                                                     // 2367\n     * @since v0.2.0                                                                                                   // 2368\n     * @category Object                                                                                                // 2369\n     * @sig {k: v} -> [k]                                                                                              // 2370\n     * @param {Object} obj The object to extract properties from                                                       // 2371\n     * @return {Array} An array of the object's own and prototype properties.                                          // 2372\n     * @example                                                                                                        // 2373\n     *                                                                                                                 // 2374\n     *      var F = function() { this.x = 'X'; };                                                                      // 2375\n     *      F.prototype.y = 'Y';                                                                                       // 2376\n     *      var f = new F();                                                                                           // 2377\n     *      R.keysIn(f); //=> ['x', 'y']                                                                               // 2378\n     */                                                                                                                // 2379\n    var keysIn = _curry1(function keysIn(obj) {                                                                        // 2380\n        var prop;                                                                                                      // 2381\n        var ks = [];                                                                                                   // 2382\n        for (prop in obj) {                                                                                            // 2383\n            ks[ks.length] = prop;                                                                                      // 2384\n        }                                                                                                              // 2385\n        return ks;                                                                                                     // 2386\n    });                                                                                                                // 2387\n                                                                                                                       // 2388\n    /**                                                                                                                // 2389\n     * Returns the number of elements in the array by returning `list.length`.                                         // 2390\n     *                                                                                                                 // 2391\n     * @func                                                                                                           // 2392\n     * @memberOf R                                                                                                     // 2393\n     * @since v0.3.0                                                                                                   // 2394\n     * @category List                                                                                                  // 2395\n     * @sig [a] -> Number                                                                                              // 2396\n     * @param {Array} list The array to inspect.                                                                       // 2397\n     * @return {Number} The length of the array.                                                                       // 2398\n     * @example                                                                                                        // 2399\n     *                                                                                                                 // 2400\n     *      R.length([]); //=> 0                                                                                       // 2401\n     *      R.length([1, 2, 3]); //=> 3                                                                                // 2402\n     */                                                                                                                // 2403\n    var length = _curry1(function length(list) {                                                                       // 2404\n        return list != null && is(Number, list.length) ? list.length : NaN;                                            // 2405\n    });                                                                                                                // 2406\n                                                                                                                       // 2407\n    /**                                                                                                                // 2408\n     * Returns `true` if the first argument is less than the second; `false`                                           // 2409\n     * otherwise.                                                                                                      // 2410\n     *                                                                                                                 // 2411\n     * @func                                                                                                           // 2412\n     * @memberOf R                                                                                                     // 2413\n     * @since v0.1.0                                                                                                   // 2414\n     * @category Relation                                                                                              // 2415\n     * @sig Ord a => a -> a -> Boolean                                                                                 // 2416\n     * @param {*} a                                                                                                    // 2417\n     * @param {*} b                                                                                                    // 2418\n     * @return {Boolean}                                                                                               // 2419\n     * @see R.gt                                                                                                       // 2420\n     * @example                                                                                                        // 2421\n     *                                                                                                                 // 2422\n     *      R.lt(2, 1); //=> false                                                                                     // 2423\n     *      R.lt(2, 2); //=> false                                                                                     // 2424\n     *      R.lt(2, 3); //=> true                                                                                      // 2425\n     *      R.lt('a', 'z'); //=> true                                                                                  // 2426\n     *      R.lt('z', 'a'); //=> false                                                                                 // 2427\n     */                                                                                                                // 2428\n    var lt = _curry2(function lt(a, b) {                                                                               // 2429\n        return a < b;                                                                                                  // 2430\n    });                                                                                                                // 2431\n                                                                                                                       // 2432\n    /**                                                                                                                // 2433\n     * Returns `true` if the first argument is less than or equal to the second;                                       // 2434\n     * `false` otherwise.                                                                                              // 2435\n     *                                                                                                                 // 2436\n     * @func                                                                                                           // 2437\n     * @memberOf R                                                                                                     // 2438\n     * @since v0.1.0                                                                                                   // 2439\n     * @category Relation                                                                                              // 2440\n     * @sig Ord a => a -> a -> Boolean                                                                                 // 2441\n     * @param {Number} a                                                                                               // 2442\n     * @param {Number} b                                                                                               // 2443\n     * @return {Boolean}                                                                                               // 2444\n     * @see R.gte                                                                                                      // 2445\n     * @example                                                                                                        // 2446\n     *                                                                                                                 // 2447\n     *      R.lte(2, 1); //=> false                                                                                    // 2448\n     *      R.lte(2, 2); //=> true                                                                                     // 2449\n     *      R.lte(2, 3); //=> true                                                                                     // 2450\n     *      R.lte('a', 'z'); //=> true                                                                                 // 2451\n     *      R.lte('z', 'a'); //=> false                                                                                // 2452\n     */                                                                                                                // 2453\n    var lte = _curry2(function lte(a, b) {                                                                             // 2454\n        return a <= b;                                                                                                 // 2455\n    });                                                                                                                // 2456\n                                                                                                                       // 2457\n    /**                                                                                                                // 2458\n     * The mapAccum function behaves like a combination of map and reduce; it                                          // 2459\n     * applies a function to each element of a list, passing an accumulating                                           // 2460\n     * parameter from left to right, and returning a final value of this                                               // 2461\n     * accumulator together with the new list.                                                                         // 2462\n     *                                                                                                                 // 2463\n     * The iterator function receives two arguments, *acc* and *value*, and should                                     // 2464\n     * return a tuple *[acc, value]*.                                                                                  // 2465\n     *                                                                                                                 // 2466\n     * @func                                                                                                           // 2467\n     * @memberOf R                                                                                                     // 2468\n     * @since v0.10.0                                                                                                  // 2469\n     * @category List                                                                                                  // 2470\n     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])                                                         // 2471\n     * @param {Function} fn The function to be called on every element of the input `list`.                            // 2472\n     * @param {*} acc The accumulator value.                                                                           // 2473\n     * @param {Array} list The list to iterate over.                                                                   // 2474\n     * @return {*} The final, accumulated value.                                                                       // 2475\n     * @see R.addIndex                                                                                                 // 2476\n     * @example                                                                                                        // 2477\n     *                                                                                                                 // 2478\n     *      var digits = ['1', '2', '3', '4'];                                                                         // 2479\n     *      var append = (a, b) => [a + b, a + b];                                                                     // 2480\n     *                                                                                                                 // 2481\n     *      R.mapAccum(append, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]                              // 2482\n     */                                                                                                                // 2483\n    var mapAccum = _curry3(function mapAccum(fn, acc, list) {                                                          // 2484\n        var idx = 0;                                                                                                   // 2485\n        var len = list.length;                                                                                         // 2486\n        var result = [];                                                                                               // 2487\n        var tuple = [acc];                                                                                             // 2488\n        while (idx < len) {                                                                                            // 2489\n            tuple = fn(tuple[0], list[idx]);                                                                           // 2490\n            result[idx] = tuple[1];                                                                                    // 2491\n            idx += 1;                                                                                                  // 2492\n        }                                                                                                              // 2493\n        return [                                                                                                       // 2494\n            tuple[0],                                                                                                  // 2495\n            result                                                                                                     // 2496\n        ];                                                                                                             // 2497\n    });                                                                                                                // 2498\n                                                                                                                       // 2499\n    /**                                                                                                                // 2500\n     * The mapAccumRight function behaves like a combination of map and reduce; it                                     // 2501\n     * applies a function to each element of a list, passing an accumulating                                           // 2502\n     * parameter from right to left, and returning a final value of this                                               // 2503\n     * accumulator together with the new list.                                                                         // 2504\n     *                                                                                                                 // 2505\n     * Similar to `mapAccum`, except moves through the input list from the right to                                    // 2506\n     * the left.                                                                                                       // 2507\n     *                                                                                                                 // 2508\n     * The iterator function receives two arguments, *acc* and *value*, and should                                     // 2509\n     * return a tuple *[acc, value]*.                                                                                  // 2510\n     *                                                                                                                 // 2511\n     * @func                                                                                                           // 2512\n     * @memberOf R                                                                                                     // 2513\n     * @since v0.10.0                                                                                                  // 2514\n     * @category List                                                                                                  // 2515\n     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])                                                         // 2516\n     * @param {Function} fn The function to be called on every element of the input `list`.                            // 2517\n     * @param {*} acc The accumulator value.                                                                           // 2518\n     * @param {Array} list The list to iterate over.                                                                   // 2519\n     * @return {*} The final, accumulated value.                                                                       // 2520\n     * @see R.addIndex                                                                                                 // 2521\n     * @example                                                                                                        // 2522\n     *                                                                                                                 // 2523\n     *      var digits = ['1', '2', '3', '4'];                                                                         // 2524\n     *      var append = (a, b) => [a + b, a + b];                                                                     // 2525\n     *                                                                                                                 // 2526\n     *      R.mapAccumRight(append, 0, digits); //=> ['04321', ['04321', '0432', '043', '04']]                         // 2527\n     */                                                                                                                // 2528\n    var mapAccumRight = _curry3(function mapAccumRight(fn, acc, list) {                                                // 2529\n        var idx = list.length - 1;                                                                                     // 2530\n        var result = [];                                                                                               // 2531\n        var tuple = [acc];                                                                                             // 2532\n        while (idx >= 0) {                                                                                             // 2533\n            tuple = fn(tuple[0], list[idx]);                                                                           // 2534\n            result[idx] = tuple[1];                                                                                    // 2535\n            idx -= 1;                                                                                                  // 2536\n        }                                                                                                              // 2537\n        return [                                                                                                       // 2538\n            tuple[0],                                                                                                  // 2539\n            result                                                                                                     // 2540\n        ];                                                                                                             // 2541\n    });                                                                                                                // 2542\n                                                                                                                       // 2543\n    /**                                                                                                                // 2544\n     * Tests a regular expression against a String. Note that this function will                                       // 2545\n     * return an empty array when there are no matches. This differs from                                              // 2546\n     * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n     * which returns `null` when there are no matches.                                                                 // 2548\n     *                                                                                                                 // 2549\n     * @func                                                                                                           // 2550\n     * @memberOf R                                                                                                     // 2551\n     * @since v0.1.0                                                                                                   // 2552\n     * @category String                                                                                                // 2553\n     * @sig RegExp -> String -> [String | Undefined]                                                                   // 2554\n     * @param {RegExp} rx A regular expression.                                                                        // 2555\n     * @param {String} str The string to match against                                                                 // 2556\n     * @return {Array} The list of matches or empty array.                                                             // 2557\n     * @see R.test                                                                                                     // 2558\n     * @example                                                                                                        // 2559\n     *                                                                                                                 // 2560\n     *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']                                                   // 2561\n     *      R.match(/a/, 'b'); //=> []                                                                                 // 2562\n     *      R.match(/a/, null); //=> TypeError: null does not have a method named \"match\"                              // 2563\n     */                                                                                                                // 2564\n    var match = _curry2(function match(rx, str) {                                                                      // 2565\n        return str.match(rx) || [];                                                                                    // 2566\n    });                                                                                                                // 2567\n                                                                                                                       // 2568\n    /**                                                                                                                // 2569\n     * mathMod behaves like the modulo operator should mathematically, unlike the                                      // 2570\n     * `%` operator (and by extension, R.modulo). So while \"-17 % 5\" is -2,                                            // 2571\n     * mathMod(-17, 5) is 3. mathMod requires Integer arguments, and returns NaN                                       // 2572\n     * when the modulus is zero or negative.                                                                           // 2573\n     *                                                                                                                 // 2574\n     * @func                                                                                                           // 2575\n     * @memberOf R                                                                                                     // 2576\n     * @since v0.3.0                                                                                                   // 2577\n     * @category Math                                                                                                  // 2578\n     * @sig Number -> Number -> Number                                                                                 // 2579\n     * @param {Number} m The dividend.                                                                                 // 2580\n     * @param {Number} p the modulus.                                                                                  // 2581\n     * @return {Number} The result of `b mod a`.                                                                       // 2582\n     * @example                                                                                                        // 2583\n     *                                                                                                                 // 2584\n     *      R.mathMod(-17, 5);  //=> 3                                                                                 // 2585\n     *      R.mathMod(17, 5);   //=> 2                                                                                 // 2586\n     *      R.mathMod(17, -5);  //=> NaN                                                                               // 2587\n     *      R.mathMod(17, 0);   //=> NaN                                                                               // 2588\n     *      R.mathMod(17.2, 5); //=> NaN                                                                               // 2589\n     *      R.mathMod(17, 5.3); //=> NaN                                                                               // 2590\n     *                                                                                                                 // 2591\n     *      var clock = R.mathMod(R.__, 12);                                                                           // 2592\n     *      clock(15); //=> 3                                                                                          // 2593\n     *      clock(24); //=> 0                                                                                          // 2594\n     *                                                                                                                 // 2595\n     *      var seventeenMod = R.mathMod(17);                                                                          // 2596\n     *      seventeenMod(3);  //=> 2                                                                                   // 2597\n     *      seventeenMod(4);  //=> 1                                                                                   // 2598\n     *      seventeenMod(10); //=> 7                                                                                   // 2599\n     */                                                                                                                // 2600\n    var mathMod = _curry2(function mathMod(m, p) {                                                                     // 2601\n        if (!_isInteger(m)) {                                                                                          // 2602\n            return NaN;                                                                                                // 2603\n        }                                                                                                              // 2604\n        if (!_isInteger(p) || p < 1) {                                                                                 // 2605\n            return NaN;                                                                                                // 2606\n        }                                                                                                              // 2607\n        return (m % p + p) % p;                                                                                        // 2608\n    });                                                                                                                // 2609\n                                                                                                                       // 2610\n    /**                                                                                                                // 2611\n     * Returns the larger of its two arguments.                                                                        // 2612\n     *                                                                                                                 // 2613\n     * @func                                                                                                           // 2614\n     * @memberOf R                                                                                                     // 2615\n     * @since v0.1.0                                                                                                   // 2616\n     * @category Relation                                                                                              // 2617\n     * @sig Ord a => a -> a -> a                                                                                       // 2618\n     * @param {*} a                                                                                                    // 2619\n     * @param {*} b                                                                                                    // 2620\n     * @return {*}                                                                                                     // 2621\n     * @see R.maxBy, R.min                                                                                             // 2622\n     * @example                                                                                                        // 2623\n     *                                                                                                                 // 2624\n     *      R.max(789, 123); //=> 789                                                                                  // 2625\n     *      R.max('a', 'b'); //=> 'b'                                                                                  // 2626\n     */                                                                                                                // 2627\n    var max = _curry2(function max(a, b) {                                                                             // 2628\n        return b > a ? b : a;                                                                                          // 2629\n    });                                                                                                                // 2630\n                                                                                                                       // 2631\n    /**                                                                                                                // 2632\n     * Takes a function and two values, and returns whichever value produces the                                       // 2633\n     * larger result when passed to the provided function.                                                             // 2634\n     *                                                                                                                 // 2635\n     * @func                                                                                                           // 2636\n     * @memberOf R                                                                                                     // 2637\n     * @since v0.8.0                                                                                                   // 2638\n     * @category Relation                                                                                              // 2639\n     * @sig Ord b => (a -> b) -> a -> a -> a                                                                           // 2640\n     * @param {Function} f                                                                                             // 2641\n     * @param {*} a                                                                                                    // 2642\n     * @param {*} b                                                                                                    // 2643\n     * @return {*}                                                                                                     // 2644\n     * @see R.max, R.minBy                                                                                             // 2645\n     * @example                                                                                                        // 2646\n     *                                                                                                                 // 2647\n     *      //  square :: Number -> Number                                                                             // 2648\n     *      var square = n => n * n;                                                                                   // 2649\n     *                                                                                                                 // 2650\n     *      R.maxBy(square, -3, 2); //=> -3                                                                            // 2651\n     *                                                                                                                 // 2652\n     *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5                                                   // 2653\n     *      R.reduce(R.maxBy(square), 0, []); //=> 0                                                                   // 2654\n     */                                                                                                                // 2655\n    var maxBy = _curry3(function maxBy(f, a, b) {                                                                      // 2656\n        return f(b) > f(a) ? b : a;                                                                                    // 2657\n    });                                                                                                                // 2658\n                                                                                                                       // 2659\n    /**                                                                                                                // 2660\n     * Creates a new object with the own properties of the two provided objects. If                                    // 2661\n     * a key exists in both objects, the provided function is applied to the key                                       // 2662\n     * and the values associated with the key in each object, with the result being                                    // 2663\n     * used as the value associated with the key in the returned object. The key                                       // 2664\n     * will be excluded from the returned object if the resulting value is                                             // 2665\n     * `undefined`.                                                                                                    // 2666\n     *                                                                                                                 // 2667\n     * @func                                                                                                           // 2668\n     * @memberOf R                                                                                                     // 2669\n     * @since 0.19.0                                                                                                   // 2670\n     * @category Object                                                                                                // 2671\n     * @sig (String -> a -> a -> a) -> {a} -> {a} -> {a}                                                               // 2672\n     * @param {Function} fn                                                                                            // 2673\n     * @param {Object} l                                                                                               // 2674\n     * @param {Object} r                                                                                               // 2675\n     * @return {Object}                                                                                                // 2676\n     * @see R.merge, R.mergeWith                                                                                       // 2677\n     * @example                                                                                                        // 2678\n     *                                                                                                                 // 2679\n     *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r                                         // 2680\n     *      R.mergeWithKey(concatValues,                                                                               // 2681\n     *                     { a: true, thing: 'foo', values: [10, 20] },                                                // 2682\n     *                     { b: true, thing: 'bar', values: [15, 35] });                                               // 2683\n     *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }                                          // 2684\n     */                                                                                                                // 2685\n    var mergeWithKey = _curry3(function mergeWithKey(fn, l, r) {                                                       // 2686\n        var result = {};                                                                                               // 2687\n        var k;                                                                                                         // 2688\n        for (k in l) {                                                                                                 // 2689\n            if (_has(k, l)) {                                                                                          // 2690\n                result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];                                                     // 2691\n            }                                                                                                          // 2692\n        }                                                                                                              // 2693\n        for (k in r) {                                                                                                 // 2694\n            if (_has(k, r) && !_has(k, result)) {                                                                      // 2695\n                result[k] = r[k];                                                                                      // 2696\n            }                                                                                                          // 2697\n        }                                                                                                              // 2698\n        return result;                                                                                                 // 2699\n    });                                                                                                                // 2700\n                                                                                                                       // 2701\n    /**                                                                                                                // 2702\n     * Returns the smaller of its two arguments.                                                                       // 2703\n     *                                                                                                                 // 2704\n     * @func                                                                                                           // 2705\n     * @memberOf R                                                                                                     // 2706\n     * @since v0.1.0                                                                                                   // 2707\n     * @category Relation                                                                                              // 2708\n     * @sig Ord a => a -> a -> a                                                                                       // 2709\n     * @param {*} a                                                                                                    // 2710\n     * @param {*} b                                                                                                    // 2711\n     * @return {*}                                                                                                     // 2712\n     * @see R.minBy, R.max                                                                                             // 2713\n     * @example                                                                                                        // 2714\n     *                                                                                                                 // 2715\n     *      R.min(789, 123); //=> 123                                                                                  // 2716\n     *      R.min('a', 'b'); //=> 'a'                                                                                  // 2717\n     */                                                                                                                // 2718\n    var min = _curry2(function min(a, b) {                                                                             // 2719\n        return b < a ? b : a;                                                                                          // 2720\n    });                                                                                                                // 2721\n                                                                                                                       // 2722\n    /**                                                                                                                // 2723\n     * Takes a function and two values, and returns whichever value produces the                                       // 2724\n     * smaller result when passed to the provided function.                                                            // 2725\n     *                                                                                                                 // 2726\n     * @func                                                                                                           // 2727\n     * @memberOf R                                                                                                     // 2728\n     * @since v0.8.0                                                                                                   // 2729\n     * @category Relation                                                                                              // 2730\n     * @sig Ord b => (a -> b) -> a -> a -> a                                                                           // 2731\n     * @param {Function} f                                                                                             // 2732\n     * @param {*} a                                                                                                    // 2733\n     * @param {*} b                                                                                                    // 2734\n     * @return {*}                                                                                                     // 2735\n     * @see R.min, R.maxBy                                                                                             // 2736\n     * @example                                                                                                        // 2737\n     *                                                                                                                 // 2738\n     *      //  square :: Number -> Number                                                                             // 2739\n     *      var square = n => n * n;                                                                                   // 2740\n     *                                                                                                                 // 2741\n     *      R.minBy(square, -3, 2); //=> 2                                                                             // 2742\n     *                                                                                                                 // 2743\n     *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1                                             // 2744\n     *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity                                                     // 2745\n     */                                                                                                                // 2746\n    var minBy = _curry3(function minBy(f, a, b) {                                                                      // 2747\n        return f(b) < f(a) ? b : a;                                                                                    // 2748\n    });                                                                                                                // 2749\n                                                                                                                       // 2750\n    /**                                                                                                                // 2751\n     * Divides the second parameter by the first and returns the remainder. Note                                       // 2752\n     * that this function preserves the JavaScript-style behavior for modulo. For                                      // 2753\n     * mathematical modulo see `mathMod`.                                                                              // 2754\n     *                                                                                                                 // 2755\n     * @func                                                                                                           // 2756\n     * @memberOf R                                                                                                     // 2757\n     * @since v0.1.1                                                                                                   // 2758\n     * @category Math                                                                                                  // 2759\n     * @sig Number -> Number -> Number                                                                                 // 2760\n     * @param {Number} a The value to the divide.                                                                      // 2761\n     * @param {Number} b The pseudo-modulus                                                                            // 2762\n     * @return {Number} The result of `b % a`.                                                                         // 2763\n     * @see R.mathMod                                                                                                  // 2764\n     * @example                                                                                                        // 2765\n     *                                                                                                                 // 2766\n     *      R.modulo(17, 3); //=> 2                                                                                    // 2767\n     *      // JS behavior:                                                                                            // 2768\n     *      R.modulo(-17, 3); //=> -2                                                                                  // 2769\n     *      R.modulo(17, -3); //=> 2                                                                                   // 2770\n     *                                                                                                                 // 2771\n     *      var isOdd = R.modulo(R.__, 2);                                                                             // 2772\n     *      isOdd(42); //=> 0                                                                                          // 2773\n     *      isOdd(21); //=> 1                                                                                          // 2774\n     */                                                                                                                // 2775\n    var modulo = _curry2(function modulo(a, b) {                                                                       // 2776\n        return a % b;                                                                                                  // 2777\n    });                                                                                                                // 2778\n                                                                                                                       // 2779\n    /**                                                                                                                // 2780\n     * Multiplies two numbers. Equivalent to `a * b` but curried.                                                      // 2781\n     *                                                                                                                 // 2782\n     * @func                                                                                                           // 2783\n     * @memberOf R                                                                                                     // 2784\n     * @since v0.1.0                                                                                                   // 2785\n     * @category Math                                                                                                  // 2786\n     * @sig Number -> Number -> Number                                                                                 // 2787\n     * @param {Number} a The first value.                                                                              // 2788\n     * @param {Number} b The second value.                                                                             // 2789\n     * @return {Number} The result of `a * b`.                                                                         // 2790\n     * @see R.divide                                                                                                   // 2791\n     * @example                                                                                                        // 2792\n     *                                                                                                                 // 2793\n     *      var double = R.multiply(2);                                                                                // 2794\n     *      var triple = R.multiply(3);                                                                                // 2795\n     *      double(3);       //=>  6                                                                                   // 2796\n     *      triple(4);       //=> 12                                                                                   // 2797\n     *      R.multiply(2, 5);  //=> 10                                                                                 // 2798\n     */                                                                                                                // 2799\n    var multiply = _curry2(function multiply(a, b) {                                                                   // 2800\n        return a * b;                                                                                                  // 2801\n    });                                                                                                                // 2802\n                                                                                                                       // 2803\n    /**                                                                                                                // 2804\n     * Wraps a function of any arity (including nullary) in a function that accepts                                    // 2805\n     * exactly `n` parameters. Any extraneous parameters will not be passed to the                                     // 2806\n     * supplied function.                                                                                              // 2807\n     *                                                                                                                 // 2808\n     * @func                                                                                                           // 2809\n     * @memberOf R                                                                                                     // 2810\n     * @since v0.1.0                                                                                                   // 2811\n     * @category Function                                                                                              // 2812\n     * @sig Number -> (* -> a) -> (* -> a)                                                                             // 2813\n     * @param {Number} n The desired arity of the new function.                                                        // 2814\n     * @param {Function} fn The function to wrap.                                                                      // 2815\n     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of                        // 2816\n     *         arity `n`.                                                                                              // 2817\n     * @example                                                                                                        // 2818\n     *                                                                                                                 // 2819\n     *      var takesTwoArgs = (a, b) => [a, b];                                                                       // 2820\n     *                                                                                                                 // 2821\n     *      takesTwoArgs.length; //=> 2                                                                                // 2822\n     *      takesTwoArgs(1, 2); //=> [1, 2]                                                                            // 2823\n     *                                                                                                                 // 2824\n     *      var takesOneArg = R.nAry(1, takesTwoArgs);                                                                 // 2825\n     *      takesOneArg.length; //=> 1                                                                                 // 2826\n     *      // Only `n` arguments are passed to the wrapped function                                                   // 2827\n     *      takesOneArg(1, 2); //=> [1, undefined]                                                                     // 2828\n     */                                                                                                                // 2829\n    var nAry = _curry2(function nAry(n, fn) {                                                                          // 2830\n        switch (n) {                                                                                                   // 2831\n        case 0:                                                                                                        // 2832\n            return function () {                                                                                       // 2833\n                return fn.call(this);                                                                                  // 2834\n            };                                                                                                         // 2835\n        case 1:                                                                                                        // 2836\n            return function (a0) {                                                                                     // 2837\n                return fn.call(this, a0);                                                                              // 2838\n            };                                                                                                         // 2839\n        case 2:                                                                                                        // 2840\n            return function (a0, a1) {                                                                                 // 2841\n                return fn.call(this, a0, a1);                                                                          // 2842\n            };                                                                                                         // 2843\n        case 3:                                                                                                        // 2844\n            return function (a0, a1, a2) {                                                                             // 2845\n                return fn.call(this, a0, a1, a2);                                                                      // 2846\n            };                                                                                                         // 2847\n        case 4:                                                                                                        // 2848\n            return function (a0, a1, a2, a3) {                                                                         // 2849\n                return fn.call(this, a0, a1, a2, a3);                                                                  // 2850\n            };                                                                                                         // 2851\n        case 5:                                                                                                        // 2852\n            return function (a0, a1, a2, a3, a4) {                                                                     // 2853\n                return fn.call(this, a0, a1, a2, a3, a4);                                                              // 2854\n            };                                                                                                         // 2855\n        case 6:                                                                                                        // 2856\n            return function (a0, a1, a2, a3, a4, a5) {                                                                 // 2857\n                return fn.call(this, a0, a1, a2, a3, a4, a5);                                                          // 2858\n            };                                                                                                         // 2859\n        case 7:                                                                                                        // 2860\n            return function (a0, a1, a2, a3, a4, a5, a6) {                                                             // 2861\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6);                                                      // 2862\n            };                                                                                                         // 2863\n        case 8:                                                                                                        // 2864\n            return function (a0, a1, a2, a3, a4, a5, a6, a7) {                                                         // 2865\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);                                                  // 2866\n            };                                                                                                         // 2867\n        case 9:                                                                                                        // 2868\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {                                                     // 2869\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);                                              // 2870\n            };                                                                                                         // 2871\n        case 10:                                                                                                       // 2872\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {                                                 // 2873\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);                                          // 2874\n            };                                                                                                         // 2875\n        default:                                                                                                       // 2876\n            throw new Error('First argument to nAry must be a non-negative integer no greater than ten');              // 2877\n        }                                                                                                              // 2878\n    });                                                                                                                // 2879\n                                                                                                                       // 2880\n    /**                                                                                                                // 2881\n     * Negates its argument.                                                                                           // 2882\n     *                                                                                                                 // 2883\n     * @func                                                                                                           // 2884\n     * @memberOf R                                                                                                     // 2885\n     * @since v0.9.0                                                                                                   // 2886\n     * @category Math                                                                                                  // 2887\n     * @sig Number -> Number                                                                                           // 2888\n     * @param {Number} n                                                                                               // 2889\n     * @return {Number}                                                                                                // 2890\n     * @example                                                                                                        // 2891\n     *                                                                                                                 // 2892\n     *      R.negate(42); //=> -42                                                                                     // 2893\n     */                                                                                                                // 2894\n    var negate = _curry1(function negate(n) {                                                                          // 2895\n        return -n;                                                                                                     // 2896\n    });                                                                                                                // 2897\n                                                                                                                       // 2898\n    /**                                                                                                                // 2899\n     * Returns `true` if no elements of the list match the predicate, `false`                                          // 2900\n     * otherwise.                                                                                                      // 2901\n     *                                                                                                                 // 2902\n     * Dispatches to the `any` method of the second argument, if present.                                              // 2903\n     *                                                                                                                 // 2904\n     * @func                                                                                                           // 2905\n     * @memberOf R                                                                                                     // 2906\n     * @since v0.12.0                                                                                                  // 2907\n     * @category List                                                                                                  // 2908\n     * @sig (a -> Boolean) -> [a] -> Boolean                                                                           // 2909\n     * @param {Function} fn The predicate function.                                                                    // 2910\n     * @param {Array} list The array to consider.                                                                      // 2911\n     * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.                 // 2912\n     * @see R.all, R.any                                                                                               // 2913\n     * @example                                                                                                        // 2914\n     *                                                                                                                 // 2915\n     *      R.none(R.isNaN, [1, 2, 3]); //=> true                                                                      // 2916\n     *      R.none(R.isNaN, [1, 2, 3, NaN]); //=> false                                                                // 2917\n     */                                                                                                                // 2918\n    var none = _curry2(_complement(_dispatchable('any', _xany, any)));                                                 // 2919\n                                                                                                                       // 2920\n    /**                                                                                                                // 2921\n     * A function that returns the `!` of its argument. It will return `true` when                                     // 2922\n     * passed false-y value, and `false` when passed a truth-y one.                                                    // 2923\n     *                                                                                                                 // 2924\n     * @func                                                                                                           // 2925\n     * @memberOf R                                                                                                     // 2926\n     * @since v0.1.0                                                                                                   // 2927\n     * @category Logic                                                                                                 // 2928\n     * @sig * -> Boolean                                                                                               // 2929\n     * @param {*} a any value                                                                                          // 2930\n     * @return {Boolean} the logical inverse of passed argument.                                                       // 2931\n     * @see R.complement                                                                                               // 2932\n     * @example                                                                                                        // 2933\n     *                                                                                                                 // 2934\n     *      R.not(true); //=> false                                                                                    // 2935\n     *      R.not(false); //=> true                                                                                    // 2936\n     *      R.not(0); => true                                                                                          // 2937\n     *      R.not(1); => false                                                                                         // 2938\n     */                                                                                                                // 2939\n    var not = _curry1(function not(a) {                                                                                // 2940\n        return !a;                                                                                                     // 2941\n    });                                                                                                                // 2942\n                                                                                                                       // 2943\n    /**                                                                                                                // 2944\n     * Returns the nth element of the given list or string. If n is negative the                                       // 2945\n     * element at index length + n is returned.                                                                        // 2946\n     *                                                                                                                 // 2947\n     * @func                                                                                                           // 2948\n     * @memberOf R                                                                                                     // 2949\n     * @since v0.1.0                                                                                                   // 2950\n     * @category List                                                                                                  // 2951\n     * @sig Number -> [a] -> a | Undefined                                                                             // 2952\n     * @sig Number -> String -> String                                                                                 // 2953\n     * @param {Number} offset                                                                                          // 2954\n     * @param {*} list                                                                                                 // 2955\n     * @return {*}                                                                                                     // 2956\n     * @example                                                                                                        // 2957\n     *                                                                                                                 // 2958\n     *      var list = ['foo', 'bar', 'baz', 'quux'];                                                                  // 2959\n     *      R.nth(1, list); //=> 'bar'                                                                                 // 2960\n     *      R.nth(-1, list); //=> 'quux'                                                                               // 2961\n     *      R.nth(-99, list); //=> undefined                                                                           // 2962\n     *                                                                                                                 // 2963\n     *      R.nth('abc', 2); //=> 'c'                                                                                  // 2964\n     *      R.nth('abc', 3); //=> ''                                                                                   // 2965\n     */                                                                                                                // 2966\n    var nth = _curry2(function nth(offset, list) {                                                                     // 2967\n        var idx = offset < 0 ? list.length + offset : offset;                                                          // 2968\n        return _isString(list) ? list.charAt(idx) : list[idx];                                                         // 2969\n    });                                                                                                                // 2970\n                                                                                                                       // 2971\n    /**                                                                                                                // 2972\n     * Returns a function which returns its nth argument.                                                              // 2973\n     *                                                                                                                 // 2974\n     * @func                                                                                                           // 2975\n     * @memberOf R                                                                                                     // 2976\n     * @since v0.9.0                                                                                                   // 2977\n     * @category Function                                                                                              // 2978\n     * @sig Number -> *... -> *                                                                                        // 2979\n     * @param {Number} n                                                                                               // 2980\n     * @return {Function}                                                                                              // 2981\n     * @example                                                                                                        // 2982\n     *                                                                                                                 // 2983\n     *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'                                                                       // 2984\n     *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'                                                                      // 2985\n     */                                                                                                                // 2986\n    var nthArg = _curry1(function nthArg(n) {                                                                          // 2987\n        return function () {                                                                                           // 2988\n            return nth(n, arguments);                                                                                  // 2989\n        };                                                                                                             // 2990\n    });                                                                                                                // 2991\n                                                                                                                       // 2992\n    /**                                                                                                                // 2993\n     * Creates an object containing a single key:value pair.                                                           // 2994\n     *                                                                                                                 // 2995\n     * @func                                                                                                           // 2996\n     * @memberOf R                                                                                                     // 2997\n     * @since v0.18.0                                                                                                  // 2998\n     * @category Object                                                                                                // 2999\n     * @sig String -> a -> {String:a}                                                                                  // 3000\n     * @param {String} key                                                                                             // 3001\n     * @param {*} val                                                                                                  // 3002\n     * @return {Object}                                                                                                // 3003\n     * @see R.pair                                                                                                     // 3004\n     * @example                                                                                                        // 3005\n     *                                                                                                                 // 3006\n     *      var matchPhrases = R.compose(                                                                              // 3007\n     *        R.objOf('must'),                                                                                         // 3008\n     *        R.map(R.objOf('match_phrase'))                                                                           // 3009\n     *      );                                                                                                         // 3010\n     *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}\n     */                                                                                                                // 3012\n    var objOf = _curry2(function objOf(key, val) {                                                                     // 3013\n        var obj = {};                                                                                                  // 3014\n        obj[key] = val;                                                                                                // 3015\n        return obj;                                                                                                    // 3016\n    });                                                                                                                // 3017\n                                                                                                                       // 3018\n    /**                                                                                                                // 3019\n     * Returns a singleton array containing the value provided.                                                        // 3020\n     *                                                                                                                 // 3021\n     * Note this `of` is different from the ES6 `of`; See                                                              // 3022\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of                       // 3023\n     *                                                                                                                 // 3024\n     * @func                                                                                                           // 3025\n     * @memberOf R                                                                                                     // 3026\n     * @since v0.3.0                                                                                                   // 3027\n     * @category Function                                                                                              // 3028\n     * @sig a -> [a]                                                                                                   // 3029\n     * @param {*} x any value                                                                                          // 3030\n     * @return {Array} An array wrapping `x`.                                                                          // 3031\n     * @example                                                                                                        // 3032\n     *                                                                                                                 // 3033\n     *      R.of(null); //=> [null]                                                                                    // 3034\n     *      R.of([42]); //=> [[42]]                                                                                    // 3035\n     */                                                                                                                // 3036\n    var of = _curry1(_of);                                                                                             // 3037\n                                                                                                                       // 3038\n    /**                                                                                                                // 3039\n     * Accepts a function `fn` and returns a function that guards invocation of                                        // 3040\n     * `fn` such that `fn` can only ever be called once, no matter how many times                                      // 3041\n     * the returned function is invoked. The first value calculated is returned in                                     // 3042\n     * subsequent invocations.                                                                                         // 3043\n     *                                                                                                                 // 3044\n     * @func                                                                                                           // 3045\n     * @memberOf R                                                                                                     // 3046\n     * @since v0.1.0                                                                                                   // 3047\n     * @category Function                                                                                              // 3048\n     * @sig (a... -> b) -> (a... -> b)                                                                                 // 3049\n     * @param {Function} fn The function to wrap in a call-only-once wrapper.                                          // 3050\n     * @return {Function} The wrapped function.                                                                        // 3051\n     * @example                                                                                                        // 3052\n     *                                                                                                                 // 3053\n     *      var addOneOnce = R.once(x => x + 1);                                                                       // 3054\n     *      addOneOnce(10); //=> 11                                                                                    // 3055\n     *      addOneOnce(addOneOnce(50)); //=> 11                                                                        // 3056\n     */                                                                                                                // 3057\n    var once = _curry1(function once(fn) {                                                                             // 3058\n        var called = false;                                                                                            // 3059\n        var result;                                                                                                    // 3060\n        return _arity(fn.length, function () {                                                                         // 3061\n            if (called) {                                                                                              // 3062\n                return result;                                                                                         // 3063\n            }                                                                                                          // 3064\n            called = true;                                                                                             // 3065\n            result = fn.apply(this, arguments);                                                                        // 3066\n            return result;                                                                                             // 3067\n        });                                                                                                            // 3068\n    });                                                                                                                // 3069\n                                                                                                                       // 3070\n    /**                                                                                                                // 3071\n     * Returns `true` if one or both of its arguments are `true`. Returns `false`                                      // 3072\n     * if both arguments are `false`.                                                                                  // 3073\n     *                                                                                                                 // 3074\n     * @func                                                                                                           // 3075\n     * @memberOf R                                                                                                     // 3076\n     * @since v0.1.0                                                                                                   // 3077\n     * @category Logic                                                                                                 // 3078\n     * @sig * -> * -> *                                                                                                // 3079\n     * @param {Boolean} a A boolean value                                                                              // 3080\n     * @param {Boolean} b A boolean value                                                                              // 3081\n     * @return {Boolean} `true` if one or both arguments are `true`, `false` otherwise                                 // 3082\n     * @see R.either                                                                                                   // 3083\n     * @example                                                                                                        // 3084\n     *                                                                                                                 // 3085\n     *      R.or(true, true); //=> true                                                                                // 3086\n     *      R.or(true, false); //=> true                                                                               // 3087\n     *      R.or(false, true); //=> true                                                                               // 3088\n     *      R.or(false, false); //=> false                                                                             // 3089\n     */                                                                                                                // 3090\n    var or = _curry2(function or(a, b) {                                                                               // 3091\n        return a || b;                                                                                                 // 3092\n    });                                                                                                                // 3093\n                                                                                                                       // 3094\n    /**                                                                                                                // 3095\n     * Returns the result of \"setting\" the portion of the given data structure                                         // 3096\n     * focused by the given lens to the result of applying the given function to                                       // 3097\n     * the focused value.                                                                                              // 3098\n     *                                                                                                                 // 3099\n     * @func                                                                                                           // 3100\n     * @memberOf R                                                                                                     // 3101\n     * @since v0.16.0                                                                                                  // 3102\n     * @category Object                                                                                                // 3103\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s                                                        // 3104\n     * @sig Lens s a -> (a -> a) -> s -> s                                                                             // 3105\n     * @param {Lens} lens                                                                                              // 3106\n     * @param {*} v                                                                                                    // 3107\n     * @param {*} x                                                                                                    // 3108\n     * @return {*}                                                                                                     // 3109\n     * @see R.prop, R.lensIndex, R.lensProp                                                                            // 3110\n     * @example                                                                                                        // 3111\n     *                                                                                                                 // 3112\n     *      var headLens = R.lensIndex(0);                                                                             // 3113\n     *                                                                                                                 // 3114\n     *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']                             // 3115\n     */                                                                                                                // 3116\n    var over = function () {                                                                                           // 3117\n        var Identity = function (x) {                                                                                  // 3118\n            return {                                                                                                   // 3119\n                value: x,                                                                                              // 3120\n                map: function (f) {                                                                                    // 3121\n                    return Identity(f(x));                                                                             // 3122\n                }                                                                                                      // 3123\n            };                                                                                                         // 3124\n        };                                                                                                             // 3125\n        return _curry3(function over(lens, f, x) {                                                                     // 3126\n            return lens(function (y) {                                                                                 // 3127\n                return Identity(f(y));                                                                                 // 3128\n            })(x).value;                                                                                               // 3129\n        });                                                                                                            // 3130\n    }();                                                                                                               // 3131\n                                                                                                                       // 3132\n    /**                                                                                                                // 3133\n     * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.                                                 // 3134\n     *                                                                                                                 // 3135\n     * @func                                                                                                           // 3136\n     * @memberOf R                                                                                                     // 3137\n     * @since v0.18.0                                                                                                  // 3138\n     * @category List                                                                                                  // 3139\n     * @sig a -> b -> (a,b)                                                                                            // 3140\n     * @param {*} fst                                                                                                  // 3141\n     * @param {*} snd                                                                                                  // 3142\n     * @return {Array}                                                                                                 // 3143\n     * @see R.createMapEntry, R.of                                                                                     // 3144\n     * @example                                                                                                        // 3145\n     *                                                                                                                 // 3146\n     *      R.pair('foo', 'bar'); //=> ['foo', 'bar']                                                                  // 3147\n     */                                                                                                                // 3148\n    var pair = _curry2(function pair(fst, snd) {                                                                       // 3149\n        return [                                                                                                       // 3150\n            fst,                                                                                                       // 3151\n            snd                                                                                                        // 3152\n        ];                                                                                                             // 3153\n    });                                                                                                                // 3154\n                                                                                                                       // 3155\n    /**                                                                                                                // 3156\n     * Retrieve the value at a given path.                                                                             // 3157\n     *                                                                                                                 // 3158\n     * @func                                                                                                           // 3159\n     * @memberOf R                                                                                                     // 3160\n     * @since v0.2.0                                                                                                   // 3161\n     * @category Object                                                                                                // 3162\n     * @sig [String] -> {k: v} -> v | Undefined                                                                        // 3163\n     * @param {Array} path The path to use.                                                                            // 3164\n     * @param {Object} obj The object to retrieve the nested property from.                                            // 3165\n     * @return {*} The data at `path`.                                                                                 // 3166\n     * @example                                                                                                        // 3167\n     *                                                                                                                 // 3168\n     *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2                                                                    // 3169\n     *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined                                                            // 3170\n     */                                                                                                                // 3171\n    var path = _curry2(function path(paths, obj) {                                                                     // 3172\n        var val = obj;                                                                                                 // 3173\n        var idx = 0;                                                                                                   // 3174\n        while (idx < paths.length) {                                                                                   // 3175\n            if (val == null) {                                                                                         // 3176\n                return;                                                                                                // 3177\n            }                                                                                                          // 3178\n            val = val[paths[idx]];                                                                                     // 3179\n            idx += 1;                                                                                                  // 3180\n        }                                                                                                              // 3181\n        return val;                                                                                                    // 3182\n    });                                                                                                                // 3183\n                                                                                                                       // 3184\n    /**                                                                                                                // 3185\n     * If the given, non-null object has a value at the given path, returns the                                        // 3186\n     * value at that path. Otherwise returns the provided default value.                                               // 3187\n     *                                                                                                                 // 3188\n     * @func                                                                                                           // 3189\n     * @memberOf R                                                                                                     // 3190\n     * @since v0.18.0                                                                                                  // 3191\n     * @category Object                                                                                                // 3192\n     * @sig a -> [String] -> Object -> a                                                                               // 3193\n     * @param {*} d The default value.                                                                                 // 3194\n     * @param {Array} p The path to use.                                                                               // 3195\n     * @param {Object} obj The object to retrieve the nested property from.                                            // 3196\n     * @return {*} The data at `path` of the supplied object or the default value.                                     // 3197\n     * @example                                                                                                        // 3198\n     *                                                                                                                 // 3199\n     *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2                                                           // 3200\n     *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> \"N/A\"                                                       // 3201\n     */                                                                                                                // 3202\n    var pathOr = _curry3(function pathOr(d, p, obj) {                                                                  // 3203\n        return defaultTo(d, path(p, obj));                                                                             // 3204\n    });                                                                                                                // 3205\n                                                                                                                       // 3206\n    /**                                                                                                                // 3207\n     * Returns `true` if the specified object property at given path satisfies the                                     // 3208\n     * given predicate; `false` otherwise.                                                                             // 3209\n     *                                                                                                                 // 3210\n     * @func                                                                                                           // 3211\n     * @memberOf R                                                                                                     // 3212\n     * @since 0.19.0                                                                                                   // 3213\n     * @category Logic                                                                                                 // 3214\n     * @sig (a -> Boolean) -> [String] -> Object -> Boolean                                                            // 3215\n     * @param {Function} pred                                                                                          // 3216\n     * @param {Array} propPath                                                                                         // 3217\n     * @param {*} obj                                                                                                  // 3218\n     * @return {Boolean}                                                                                               // 3219\n     * @see R.propSatisfies, R.path                                                                                    // 3220\n     * @example                                                                                                        // 3221\n     *                                                                                                                 // 3222\n     *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true                                            // 3223\n     */                                                                                                                // 3224\n    var pathSatisfies = _curry3(function pathSatisfies(pred, propPath, obj) {                                          // 3225\n        return propPath.length > 0 && pred(path(propPath, obj));                                                       // 3226\n    });                                                                                                                // 3227\n                                                                                                                       // 3228\n    /**                                                                                                                // 3229\n     * Returns a partial copy of an object containing only the keys specified. If                                      // 3230\n     * the key does not exist, the property is ignored.                                                                // 3231\n     *                                                                                                                 // 3232\n     * @func                                                                                                           // 3233\n     * @memberOf R                                                                                                     // 3234\n     * @since v0.1.0                                                                                                   // 3235\n     * @category Object                                                                                                // 3236\n     * @sig [k] -> {k: v} -> {k: v}                                                                                    // 3237\n     * @param {Array} names an array of String property names to copy onto a new object                                // 3238\n     * @param {Object} obj The object to copy from                                                                     // 3239\n     * @return {Object} A new object with only properties from `names` on it.                                          // 3240\n     * @see R.omit, R.props                                                                                            // 3241\n     * @example                                                                                                        // 3242\n     *                                                                                                                 // 3243\n     *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}                                            // 3244\n     *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}                                             // 3245\n     */                                                                                                                // 3246\n    var pick = _curry2(function pick(names, obj) {                                                                     // 3247\n        var result = {};                                                                                               // 3248\n        var idx = 0;                                                                                                   // 3249\n        while (idx < names.length) {                                                                                   // 3250\n            if (names[idx] in obj) {                                                                                   // 3251\n                result[names[idx]] = obj[names[idx]];                                                                  // 3252\n            }                                                                                                          // 3253\n            idx += 1;                                                                                                  // 3254\n        }                                                                                                              // 3255\n        return result;                                                                                                 // 3256\n    });                                                                                                                // 3257\n                                                                                                                       // 3258\n    /**                                                                                                                // 3259\n     * Similar to `pick` except that this one includes a `key: undefined` pair for                                     // 3260\n     * properties that don't exist.                                                                                    // 3261\n     *                                                                                                                 // 3262\n     * @func                                                                                                           // 3263\n     * @memberOf R                                                                                                     // 3264\n     * @since v0.1.0                                                                                                   // 3265\n     * @category Object                                                                                                // 3266\n     * @sig [k] -> {k: v} -> {k: v}                                                                                    // 3267\n     * @param {Array} names an array of String property names to copy onto a new object                                // 3268\n     * @param {Object} obj The object to copy from                                                                     // 3269\n     * @return {Object} A new object with only properties from `names` on it.                                          // 3270\n     * @see R.pick                                                                                                     // 3271\n     * @example                                                                                                        // 3272\n     *                                                                                                                 // 3273\n     *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}                                         // 3274\n     *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}              // 3275\n     */                                                                                                                // 3276\n    var pickAll = _curry2(function pickAll(names, obj) {                                                               // 3277\n        var result = {};                                                                                               // 3278\n        var idx = 0;                                                                                                   // 3279\n        var len = names.length;                                                                                        // 3280\n        while (idx < len) {                                                                                            // 3281\n            var name = names[idx];                                                                                     // 3282\n            result[name] = obj[name];                                                                                  // 3283\n            idx += 1;                                                                                                  // 3284\n        }                                                                                                              // 3285\n        return result;                                                                                                 // 3286\n    });                                                                                                                // 3287\n                                                                                                                       // 3288\n    /**                                                                                                                // 3289\n     * Returns a partial copy of an object containing only the keys that satisfy                                       // 3290\n     * the supplied predicate.                                                                                         // 3291\n     *                                                                                                                 // 3292\n     * @func                                                                                                           // 3293\n     * @memberOf R                                                                                                     // 3294\n     * @since v0.8.0                                                                                                   // 3295\n     * @category Object                                                                                                // 3296\n     * @sig (v, k -> Boolean) -> {k: v} -> {k: v}                                                                      // 3297\n     * @param {Function} pred A predicate to determine whether or not a key                                            // 3298\n     *        should be included on the output object.                                                                 // 3299\n     * @param {Object} obj The object to copy from                                                                     // 3300\n     * @return {Object} A new object with only properties that satisfy `pred`                                          // 3301\n     *         on it.                                                                                                  // 3302\n     * @see R.pick, R.filter                                                                                           // 3303\n     * @example                                                                                                        // 3304\n     *                                                                                                                 // 3305\n     *      var isUpperCase = (val, key) => key.toUpperCase() === key;                                                 // 3306\n     *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}                                         // 3307\n     */                                                                                                                // 3308\n    var pickBy = _curry2(function pickBy(test, obj) {                                                                  // 3309\n        var result = {};                                                                                               // 3310\n        for (var prop in obj) {                                                                                        // 3311\n            if (test(obj[prop], prop, obj)) {                                                                          // 3312\n                result[prop] = obj[prop];                                                                              // 3313\n            }                                                                                                          // 3314\n        }                                                                                                              // 3315\n        return result;                                                                                                 // 3316\n    });                                                                                                                // 3317\n                                                                                                                       // 3318\n    /**                                                                                                                // 3319\n     * Returns a new list with the given element at the front, followed by the                                         // 3320\n     * contents of the list.                                                                                           // 3321\n     *                                                                                                                 // 3322\n     * @func                                                                                                           // 3323\n     * @memberOf R                                                                                                     // 3324\n     * @since v0.1.0                                                                                                   // 3325\n     * @category List                                                                                                  // 3326\n     * @sig a -> [a] -> [a]                                                                                            // 3327\n     * @param {*} el The item to add to the head of the output list.                                                   // 3328\n     * @param {Array} list The array to add to the tail of the output list.                                            // 3329\n     * @return {Array} A new array.                                                                                    // 3330\n     * @see R.append                                                                                                   // 3331\n     * @example                                                                                                        // 3332\n     *                                                                                                                 // 3333\n     *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']                                     // 3334\n     */                                                                                                                // 3335\n    var prepend = _curry2(function prepend(el, list) {                                                                 // 3336\n        return _concat([el], list);                                                                                    // 3337\n    });                                                                                                                // 3338\n                                                                                                                       // 3339\n    /**                                                                                                                // 3340\n     * Returns a function that when supplied an object returns the indicated                                           // 3341\n     * property of that object, if it exists.                                                                          // 3342\n     *                                                                                                                 // 3343\n     * @func                                                                                                           // 3344\n     * @memberOf R                                                                                                     // 3345\n     * @since v0.1.0                                                                                                   // 3346\n     * @category Object                                                                                                // 3347\n     * @sig s -> {s: a} -> a | Undefined                                                                               // 3348\n     * @param {String} p The property name                                                                             // 3349\n     * @param {Object} obj The object to query                                                                         // 3350\n     * @return {*} The value at `obj.p`.                                                                               // 3351\n     * @example                                                                                                        // 3352\n     *                                                                                                                 // 3353\n     *      R.prop('x', {x: 100}); //=> 100                                                                            // 3354\n     *      R.prop('x', {}); //=> undefined                                                                            // 3355\n     */                                                                                                                // 3356\n    var prop = _curry2(function prop(p, obj) {                                                                         // 3357\n        return obj[p];                                                                                                 // 3358\n    });                                                                                                                // 3359\n                                                                                                                       // 3360\n    /**                                                                                                                // 3361\n     * If the given, non-null object has an own property with the specified name,                                      // 3362\n     * returns the value of that property. Otherwise returns the provided default                                      // 3363\n     * value.                                                                                                          // 3364\n     *                                                                                                                 // 3365\n     * @func                                                                                                           // 3366\n     * @memberOf R                                                                                                     // 3367\n     * @since v0.6.0                                                                                                   // 3368\n     * @category Object                                                                                                // 3369\n     * @sig a -> String -> Object -> a                                                                                 // 3370\n     * @param {*} val The default value.                                                                               // 3371\n     * @param {String} p The name of the property to return.                                                           // 3372\n     * @param {Object} obj The object to query.                                                                        // 3373\n     * @return {*} The value of given property of the supplied object or the default value.                            // 3374\n     * @example                                                                                                        // 3375\n     *                                                                                                                 // 3376\n     *      var alice = {                                                                                              // 3377\n     *        name: 'ALICE',                                                                                           // 3378\n     *        age: 101                                                                                                 // 3379\n     *      };                                                                                                         // 3380\n     *      var favorite = R.prop('favoriteLibrary');                                                                  // 3381\n     *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');                                            // 3382\n     *                                                                                                                 // 3383\n     *      favorite(alice);  //=> undefined                                                                           // 3384\n     *      favoriteWithDefault(alice);  //=> 'Ramda'                                                                  // 3385\n     */                                                                                                                // 3386\n    var propOr = _curry3(function propOr(val, p, obj) {                                                                // 3387\n        return obj != null && _has(p, obj) ? obj[p] : val;                                                             // 3388\n    });                                                                                                                // 3389\n                                                                                                                       // 3390\n    /**                                                                                                                // 3391\n     * Returns `true` if the specified object property satisfies the given                                             // 3392\n     * predicate; `false` otherwise.                                                                                   // 3393\n     *                                                                                                                 // 3394\n     * @func                                                                                                           // 3395\n     * @memberOf R                                                                                                     // 3396\n     * @since v0.16.0                                                                                                  // 3397\n     * @category Logic                                                                                                 // 3398\n     * @sig (a -> Boolean) -> String -> {String: a} -> Boolean                                                         // 3399\n     * @param {Function} pred                                                                                          // 3400\n     * @param {String} name                                                                                            // 3401\n     * @param {*} obj                                                                                                  // 3402\n     * @return {Boolean}                                                                                               // 3403\n     * @see R.propEq, R.propIs                                                                                         // 3404\n     * @example                                                                                                        // 3405\n     *                                                                                                                 // 3406\n     *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true                                                  // 3407\n     */                                                                                                                // 3408\n    var propSatisfies = _curry3(function propSatisfies(pred, name, obj) {                                              // 3409\n        return pred(obj[name]);                                                                                        // 3410\n    });                                                                                                                // 3411\n                                                                                                                       // 3412\n    /**                                                                                                                // 3413\n     * Acts as multiple `prop`: array of keys in, array of values out. Preserves                                       // 3414\n     * order.                                                                                                          // 3415\n     *                                                                                                                 // 3416\n     * @func                                                                                                           // 3417\n     * @memberOf R                                                                                                     // 3418\n     * @since v0.1.0                                                                                                   // 3419\n     * @category Object                                                                                                // 3420\n     * @sig [k] -> {k: v} -> [v]                                                                                       // 3421\n     * @param {Array} ps The property names to fetch                                                                   // 3422\n     * @param {Object} obj The object to query                                                                         // 3423\n     * @return {Array} The corresponding values or partially applied function.                                         // 3424\n     * @example                                                                                                        // 3425\n     *                                                                                                                 // 3426\n     *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]                                                             // 3427\n     *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]                                             // 3428\n     *                                                                                                                 // 3429\n     *      var fullName = R.compose(R.join(' '), R.props(['first', 'last']));                                         // 3430\n     *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'                         // 3431\n     */                                                                                                                // 3432\n    var props = _curry2(function props(ps, obj) {                                                                      // 3433\n        var len = ps.length;                                                                                           // 3434\n        var out = [];                                                                                                  // 3435\n        var idx = 0;                                                                                                   // 3436\n        while (idx < len) {                                                                                            // 3437\n            out[idx] = obj[ps[idx]];                                                                                   // 3438\n            idx += 1;                                                                                                  // 3439\n        }                                                                                                              // 3440\n        return out;                                                                                                    // 3441\n    });                                                                                                                // 3442\n                                                                                                                       // 3443\n    /**                                                                                                                // 3444\n     * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).                                          // 3445\n     *                                                                                                                 // 3446\n     * @func                                                                                                           // 3447\n     * @memberOf R                                                                                                     // 3448\n     * @since v0.1.0                                                                                                   // 3449\n     * @category List                                                                                                  // 3450\n     * @sig Number -> Number -> [Number]                                                                               // 3451\n     * @param {Number} from The first number in the list.                                                              // 3452\n     * @param {Number} to One more than the last number in the list.                                                   // 3453\n     * @return {Array} The list of numbers in tthe set `[a, b)`.                                                       // 3454\n     * @example                                                                                                        // 3455\n     *                                                                                                                 // 3456\n     *      R.range(1, 5);    //=> [1, 2, 3, 4]                                                                        // 3457\n     *      R.range(50, 53);  //=> [50, 51, 52]                                                                        // 3458\n     */                                                                                                                // 3459\n    var range = _curry2(function range(from, to) {                                                                     // 3460\n        if (!(_isNumber(from) && _isNumber(to))) {                                                                     // 3461\n            throw new TypeError('Both arguments to range must be numbers');                                            // 3462\n        }                                                                                                              // 3463\n        var result = [];                                                                                               // 3464\n        var n = from;                                                                                                  // 3465\n        while (n < to) {                                                                                               // 3466\n            result.push(n);                                                                                            // 3467\n            n += 1;                                                                                                    // 3468\n        }                                                                                                              // 3469\n        return result;                                                                                                 // 3470\n    });                                                                                                                // 3471\n                                                                                                                       // 3472\n    /**                                                                                                                // 3473\n     * Returns a single item by iterating through the list, successively calling                                       // 3474\n     * the iterator function and passing it an accumulator value and the current                                       // 3475\n     * value from the array, and then passing the result to the next call.                                             // 3476\n     *                                                                                                                 // 3477\n     * Similar to `reduce`, except moves through the input list from the right to                                      // 3478\n     * the left.                                                                                                       // 3479\n     *                                                                                                                 // 3480\n     * The iterator function receives two values: *(acc, value)*                                                       // 3481\n     *                                                                                                                 // 3482\n     * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse                                       // 3483\n     * arrays), unlike the native `Array.prototype.reduce` method. For more details                                    // 3484\n     * on this behavior, see:                                                                                          // 3485\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description  // 3486\n     *                                                                                                                 // 3487\n     * @func                                                                                                           // 3488\n     * @memberOf R                                                                                                     // 3489\n     * @since v0.1.0                                                                                                   // 3490\n     * @category List                                                                                                  // 3491\n     * @sig (a,b -> a) -> a -> [b] -> a                                                                                // 3492\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the                        // 3493\n     *        current element from the array.                                                                          // 3494\n     * @param {*} acc The accumulator value.                                                                           // 3495\n     * @param {Array} list The list to iterate over.                                                                   // 3496\n     * @return {*} The final, accumulated value.                                                                       // 3497\n     * @see R.addIndex                                                                                                 // 3498\n     * @example                                                                                                        // 3499\n     *                                                                                                                 // 3500\n     *      var pairs = [ ['a', 1], ['b', 2], ['c', 3] ];                                                              // 3501\n     *      var flattenPairs = (acc, pair) => acc.concat(pair);                                                        // 3502\n     *                                                                                                                 // 3503\n     *      R.reduceRight(flattenPairs, [], pairs); //=> [ 'c', 3, 'b', 2, 'a', 1 ]                                    // 3504\n     */                                                                                                                // 3505\n    var reduceRight = _curry3(function reduceRight(fn, acc, list) {                                                    // 3506\n        var idx = list.length - 1;                                                                                     // 3507\n        while (idx >= 0) {                                                                                             // 3508\n            acc = fn(acc, list[idx]);                                                                                  // 3509\n            idx -= 1;                                                                                                  // 3510\n        }                                                                                                              // 3511\n        return acc;                                                                                                    // 3512\n    });                                                                                                                // 3513\n                                                                                                                       // 3514\n    /**                                                                                                                // 3515\n     * Returns a value wrapped to indicate that it is the final value of the reduce                                    // 3516\n     * and transduce functions. The returned value should be considered a black                                        // 3517\n     * box: the internal structure is not guaranteed to be stable.                                                     // 3518\n     *                                                                                                                 // 3519\n     * Note: this optimization is unavailable to functions not explicitly listed                                       // 3520\n     * above. For instance, it is not currently supported by reduceRight.                                              // 3521\n     *                                                                                                                 // 3522\n     * @func                                                                                                           // 3523\n     * @memberOf R                                                                                                     // 3524\n     * @since v0.15.0                                                                                                  // 3525\n     * @category List                                                                                                  // 3526\n     * @sig a -> *                                                                                                     // 3527\n     * @param {*} x The final value of the reduce.                                                                     // 3528\n     * @return {*} The wrapped value.                                                                                  // 3529\n     * @see R.reduce, R.transduce                                                                                      // 3530\n     * @example                                                                                                        // 3531\n     *                                                                                                                 // 3532\n     *      R.reduce(                                                                                                  // 3533\n     *        R.pipe(R.add, R.when(R.gte(R.__, 10), R.reduced)),                                                       // 3534\n     *        0,                                                                                                       // 3535\n     *        [1, 2, 3, 4, 5]) // 10                                                                                   // 3536\n     */                                                                                                                // 3537\n    var reduced = _curry1(_reduced);                                                                                   // 3538\n                                                                                                                       // 3539\n    /**                                                                                                                // 3540\n     * Removes the sub-list of `list` starting at index `start` and containing                                         // 3541\n     * `count` elements. _Note that this is not destructive_: it returns a copy of                                     // 3542\n     * the list with the changes.                                                                                      // 3543\n     * <small>No lists have been harmed in the application of this function.</small>                                   // 3544\n     *                                                                                                                 // 3545\n     * @func                                                                                                           // 3546\n     * @memberOf R                                                                                                     // 3547\n     * @since v0.2.2                                                                                                   // 3548\n     * @category List                                                                                                  // 3549\n     * @sig Number -> Number -> [a] -> [a]                                                                             // 3550\n     * @param {Number} start The position to start removing elements                                                   // 3551\n     * @param {Number} count The number of elements to remove                                                          // 3552\n     * @param {Array} list The list to remove from                                                                     // 3553\n     * @return {Array} A new Array with `count` elements from `start` removed.                                         // 3554\n     * @example                                                                                                        // 3555\n     *                                                                                                                 // 3556\n     *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]                                                        // 3557\n     */                                                                                                                // 3558\n    var remove = _curry3(function remove(start, count, list) {                                                         // 3559\n        return _concat(_slice(list, 0, Math.min(start, list.length)), _slice(list, Math.min(list.length, start + count)));\n    });                                                                                                                // 3561\n                                                                                                                       // 3562\n    /**                                                                                                                // 3563\n     * Replace a substring or regex match in a string with a replacement.                                              // 3564\n     *                                                                                                                 // 3565\n     * @func                                                                                                           // 3566\n     * @memberOf R                                                                                                     // 3567\n     * @since v0.7.0                                                                                                   // 3568\n     * @category String                                                                                                // 3569\n     * @sig RegExp|String -> String -> String -> String                                                                // 3570\n     * @param {RegExp|String} pattern A regular expression or a substring to match.                                    // 3571\n     * @param {String} replacement The string to replace the matches with.                                             // 3572\n     * @param {String} str The String to do the search and replacement in.                                             // 3573\n     * @return {String} The result.                                                                                    // 3574\n     * @example                                                                                                        // 3575\n     *                                                                                                                 // 3576\n     *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'                                                 // 3577\n     *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'                                                 // 3578\n     *                                                                                                                 // 3579\n     *      // Use the \"g\" (global) flag to replace all occurrences:                                                   // 3580\n     *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'                                                // 3581\n     */                                                                                                                // 3582\n    var replace = _curry3(function replace(regex, replacement, str) {                                                  // 3583\n        return str.replace(regex, replacement);                                                                        // 3584\n    });                                                                                                                // 3585\n                                                                                                                       // 3586\n    /**                                                                                                                // 3587\n     * Returns a new list or string with the elements or characters in reverse                                         // 3588\n     * order.                                                                                                          // 3589\n     *                                                                                                                 // 3590\n     * @func                                                                                                           // 3591\n     * @memberOf R                                                                                                     // 3592\n     * @since v0.1.0                                                                                                   // 3593\n     * @category List                                                                                                  // 3594\n     * @sig [a] -> [a]                                                                                                 // 3595\n     * @sig String -> String                                                                                           // 3596\n     * @param {Array|String} list                                                                                      // 3597\n     * @return {Array|String}                                                                                          // 3598\n     * @example                                                                                                        // 3599\n     *                                                                                                                 // 3600\n     *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]                                                                      // 3601\n     *      R.reverse([1, 2]);     //=> [2, 1]                                                                         // 3602\n     *      R.reverse([1]);        //=> [1]                                                                            // 3603\n     *      R.reverse([]);         //=> []                                                                             // 3604\n     *                                                                                                                 // 3605\n     *      R.reverse('abc');      //=> 'cba'                                                                          // 3606\n     *      R.reverse('ab');       //=> 'ba'                                                                           // 3607\n     *      R.reverse('a');        //=> 'a'                                                                            // 3608\n     *      R.reverse('');         //=> ''                                                                             // 3609\n     */                                                                                                                // 3610\n    var reverse = _curry1(function reverse(list) {                                                                     // 3611\n        return _isString(list) ? list.split('').reverse().join('') : _slice(list).reverse();                           // 3612\n    });                                                                                                                // 3613\n                                                                                                                       // 3614\n    /**                                                                                                                // 3615\n     * Scan is similar to reduce, but returns a list of successively reduced values                                    // 3616\n     * from the left                                                                                                   // 3617\n     *                                                                                                                 // 3618\n     * @func                                                                                                           // 3619\n     * @memberOf R                                                                                                     // 3620\n     * @since v0.10.0                                                                                                  // 3621\n     * @category List                                                                                                  // 3622\n     * @sig (a,b -> a) -> a -> [b] -> [a]                                                                              // 3623\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the                        // 3624\n     *        current element from the array                                                                           // 3625\n     * @param {*} acc The accumulator value.                                                                           // 3626\n     * @param {Array} list The list to iterate over.                                                                   // 3627\n     * @return {Array} A list of all intermediately reduced values.                                                    // 3628\n     * @example                                                                                                        // 3629\n     *                                                                                                                 // 3630\n     *      var numbers = [1, 2, 3, 4];                                                                                // 3631\n     *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]                                     // 3632\n     */                                                                                                                // 3633\n    var scan = _curry3(function scan(fn, acc, list) {                                                                  // 3634\n        var idx = 0;                                                                                                   // 3635\n        var len = list.length;                                                                                         // 3636\n        var result = [acc];                                                                                            // 3637\n        while (idx < len) {                                                                                            // 3638\n            acc = fn(acc, list[idx]);                                                                                  // 3639\n            result[idx + 1] = acc;                                                                                     // 3640\n            idx += 1;                                                                                                  // 3641\n        }                                                                                                              // 3642\n        return result;                                                                                                 // 3643\n    });                                                                                                                // 3644\n                                                                                                                       // 3645\n    /**                                                                                                                // 3646\n     * Returns the result of \"setting\" the portion of the given data structure                                         // 3647\n     * focused by the given lens to the given value.                                                                   // 3648\n     *                                                                                                                 // 3649\n     * @func                                                                                                           // 3650\n     * @memberOf R                                                                                                     // 3651\n     * @since v0.16.0                                                                                                  // 3652\n     * @category Object                                                                                                // 3653\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s                                                        // 3654\n     * @sig Lens s a -> a -> s -> s                                                                                    // 3655\n     * @param {Lens} lens                                                                                              // 3656\n     * @param {*} v                                                                                                    // 3657\n     * @param {*} x                                                                                                    // 3658\n     * @return {*}                                                                                                     // 3659\n     * @see R.prop, R.lensIndex, R.lensProp                                                                            // 3660\n     * @example                                                                                                        // 3661\n     *                                                                                                                 // 3662\n     *      var xLens = R.lensProp('x');                                                                               // 3663\n     *                                                                                                                 // 3664\n     *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}                                                          // 3665\n     *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}                                                          // 3666\n     */                                                                                                                // 3667\n    var set = _curry3(function set(lens, v, x) {                                                                       // 3668\n        return over(lens, always(v), x);                                                                               // 3669\n    });                                                                                                                // 3670\n                                                                                                                       // 3671\n    /**                                                                                                                // 3672\n     * Returns the elements of the given list or string (or object with a `slice`                                      // 3673\n     * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).                                                  // 3674\n     *                                                                                                                 // 3675\n     * Dispatches to the `slice` method of the third argument, if present.                                             // 3676\n     *                                                                                                                 // 3677\n     * @func                                                                                                           // 3678\n     * @memberOf R                                                                                                     // 3679\n     * @since v0.1.4                                                                                                   // 3680\n     * @category List                                                                                                  // 3681\n     * @sig Number -> Number -> [a] -> [a]                                                                             // 3682\n     * @sig Number -> Number -> String -> String                                                                       // 3683\n     * @param {Number} fromIndex The start index (inclusive).                                                          // 3684\n     * @param {Number} toIndex The end index (exclusive).                                                              // 3685\n     * @param {*} list                                                                                                 // 3686\n     * @return {*}                                                                                                     // 3687\n     * @example                                                                                                        // 3688\n     *                                                                                                                 // 3689\n     *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']                                                // 3690\n     *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']                                           // 3691\n     *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']                                           // 3692\n     *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']                                                // 3693\n     *      R.slice(0, 3, 'ramda');                     //=> 'ram'                                                     // 3694\n     */                                                                                                                // 3695\n    var slice = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {                            // 3696\n        return Array.prototype.slice.call(list, fromIndex, toIndex);                                                   // 3697\n    }));                                                                                                               // 3698\n                                                                                                                       // 3699\n    /**                                                                                                                // 3700\n     * Returns a copy of the list, sorted according to the comparator function,                                        // 3701\n     * which should accept two values at a time and return a negative number if the                                    // 3702\n     * first value is smaller, a positive number if it's larger, and zero if they                                      // 3703\n     * are equal. Please note that this is a **copy** of the list. It does not                                         // 3704\n     * modify the original.                                                                                            // 3705\n     *                                                                                                                 // 3706\n     * @func                                                                                                           // 3707\n     * @memberOf R                                                                                                     // 3708\n     * @since v0.1.0                                                                                                   // 3709\n     * @category List                                                                                                  // 3710\n     * @sig (a,a -> Number) -> [a] -> [a]                                                                              // 3711\n     * @param {Function} comparator A sorting function :: a -> b -> Int                                                // 3712\n     * @param {Array} list The list to sort                                                                            // 3713\n     * @return {Array} a new array with its elements sorted by the comparator function.                                // 3714\n     * @example                                                                                                        // 3715\n     *                                                                                                                 // 3716\n     *      var diff = function(a, b) { return a - b; };                                                               // 3717\n     *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]                                                                 // 3718\n     */                                                                                                                // 3719\n    var sort = _curry2(function sort(comparator, list) {                                                               // 3720\n        return _slice(list).sort(comparator);                                                                          // 3721\n    });                                                                                                                // 3722\n                                                                                                                       // 3723\n    /**                                                                                                                // 3724\n     * Sorts the list according to the supplied function.                                                              // 3725\n     *                                                                                                                 // 3726\n     * @func                                                                                                           // 3727\n     * @memberOf R                                                                                                     // 3728\n     * @since v0.1.0                                                                                                   // 3729\n     * @category Relation                                                                                              // 3730\n     * @sig Ord b => (a -> b) -> [a] -> [a]                                                                            // 3731\n     * @param {Function} fn                                                                                            // 3732\n     * @param {Array} list The list to sort.                                                                           // 3733\n     * @return {Array} A new list sorted by the keys generated by `fn`.                                                // 3734\n     * @example                                                                                                        // 3735\n     *                                                                                                                 // 3736\n     *      var sortByFirstItem = R.sortBy(R.prop(0));                                                                 // 3737\n     *      var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));                            // 3738\n     *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];                                                                   // 3739\n     *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]                                                   // 3740\n     *      var alice = {                                                                                              // 3741\n     *        name: 'ALICE',                                                                                           // 3742\n     *        age: 101                                                                                                 // 3743\n     *      };                                                                                                         // 3744\n     *      var bob = {                                                                                                // 3745\n     *        name: 'Bob',                                                                                             // 3746\n     *        age: -10                                                                                                 // 3747\n     *      };                                                                                                         // 3748\n     *      var clara = {                                                                                              // 3749\n     *        name: 'clara',                                                                                           // 3750\n     *        age: 314.159                                                                                             // 3751\n     *      };                                                                                                         // 3752\n     *      var people = [clara, bob, alice];                                                                          // 3753\n     *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]                                                // 3754\n     */                                                                                                                // 3755\n    var sortBy = _curry2(function sortBy(fn, list) {                                                                   // 3756\n        return _slice(list).sort(function (a, b) {                                                                     // 3757\n            var aa = fn(a);                                                                                            // 3758\n            var bb = fn(b);                                                                                            // 3759\n            return aa < bb ? -1 : aa > bb ? 1 : 0;                                                                     // 3760\n        });                                                                                                            // 3761\n    });                                                                                                                // 3762\n                                                                                                                       // 3763\n    /**                                                                                                                // 3764\n     * Splits a given list or string at a given index.                                                                 // 3765\n     *                                                                                                                 // 3766\n     * @func                                                                                                           // 3767\n     * @memberOf R                                                                                                     // 3768\n     * @since 0.19.0                                                                                                   // 3769\n     * @category List                                                                                                  // 3770\n     * @sig Number -> [a] -> [[a], [a]]                                                                                // 3771\n     * @sig Number -> String -> [String, String]                                                                       // 3772\n     * @param {Number} index The index where the array/string is split.                                                // 3773\n     * @param {Array|String} array The array/string to be split.                                                       // 3774\n     * @return {Array}                                                                                                 // 3775\n     * @example                                                                                                        // 3776\n     *                                                                                                                 // 3777\n     *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]                                                       // 3778\n     *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']                                                 // 3779\n     *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']                                                      // 3780\n     */                                                                                                                // 3781\n    var splitAt = _curry2(function splitAt(index, array) {                                                             // 3782\n        return [                                                                                                       // 3783\n            slice(0, index, array),                                                                                    // 3784\n            slice(index, length(array), array)                                                                         // 3785\n        ];                                                                                                             // 3786\n    });                                                                                                                // 3787\n                                                                                                                       // 3788\n    /**                                                                                                                // 3789\n     * Splits a collection into slices of the specified length.                                                        // 3790\n     *                                                                                                                 // 3791\n     * @func                                                                                                           // 3792\n     * @memberOf R                                                                                                     // 3793\n     * @since v0.16.0                                                                                                  // 3794\n     * @category List                                                                                                  // 3795\n     * @sig Number -> [a] -> [[a]]                                                                                     // 3796\n     * @sig Number -> String -> [String]                                                                               // 3797\n     * @param {Number} n                                                                                               // 3798\n     * @param {Array} list                                                                                             // 3799\n     * @return {Array}                                                                                                 // 3800\n     * @example                                                                                                        // 3801\n     *                                                                                                                 // 3802\n     *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]                                   // 3803\n     *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']                                                   // 3804\n     */                                                                                                                // 3805\n    var splitEvery = _curry2(function splitEvery(n, list) {                                                            // 3806\n        if (n <= 0) {                                                                                                  // 3807\n            throw new Error('First argument to splitEvery must be a positive integer');                                // 3808\n        }                                                                                                              // 3809\n        var result = [];                                                                                               // 3810\n        var idx = 0;                                                                                                   // 3811\n        while (idx < list.length) {                                                                                    // 3812\n            result.push(slice(idx, idx += n, list));                                                                   // 3813\n        }                                                                                                              // 3814\n        return result;                                                                                                 // 3815\n    });                                                                                                                // 3816\n                                                                                                                       // 3817\n    /**                                                                                                                // 3818\n     * Takes a list and a predicate and returns a pair of lists with the following properties:                         // 3819\n     *                                                                                                                 // 3820\n     *  - the result of concatenating the two output lists is equivalent to the input list;                            // 3821\n     *  - none of the elements of the first output list satisfies the predicate; and                                   // 3822\n     *  - if the second output list is non-empty, its first element satisfies the predicate.                           // 3823\n     *                                                                                                                 // 3824\n     * @func                                                                                                           // 3825\n     * @memberOf R                                                                                                     // 3826\n     * @since 0.19.0                                                                                                   // 3827\n     * @category List                                                                                                  // 3828\n     * @sig (a -> Boolean) -> [a] -> [[a], [a]]                                                                        // 3829\n     * @param {Function} pred The predicate that determines where the array is split.                                  // 3830\n     * @param {Array} list The array to be split.                                                                      // 3831\n     * @return {Array}                                                                                                 // 3832\n     * @example                                                                                                        // 3833\n     *                                                                                                                 // 3834\n     *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]                                // 3835\n     */                                                                                                                // 3836\n    var splitWhen = _curry2(function splitWhen(pred, list) {                                                           // 3837\n        var idx = 0;                                                                                                   // 3838\n        var len = list.length;                                                                                         // 3839\n        var prefix = [];                                                                                               // 3840\n        while (idx < len && !pred(list[idx])) {                                                                        // 3841\n            prefix.push(list[idx]);                                                                                    // 3842\n            idx += 1;                                                                                                  // 3843\n        }                                                                                                              // 3844\n        return [                                                                                                       // 3845\n            prefix,                                                                                                    // 3846\n            _slice(list, idx)                                                                                          // 3847\n        ];                                                                                                             // 3848\n    });                                                                                                                // 3849\n                                                                                                                       // 3850\n    /**                                                                                                                // 3851\n     * Subtracts two numbers. Equivalent to `a - b` but curried.                                                       // 3852\n     *                                                                                                                 // 3853\n     * @func                                                                                                           // 3854\n     * @memberOf R                                                                                                     // 3855\n     * @since v0.1.0                                                                                                   // 3856\n     * @category Math                                                                                                  // 3857\n     * @sig Number -> Number -> Number                                                                                 // 3858\n     * @param {Number} a The first value.                                                                              // 3859\n     * @param {Number} b The second value.                                                                             // 3860\n     * @return {Number} The result of `a - b`.                                                                         // 3861\n     * @see R.add                                                                                                      // 3862\n     * @example                                                                                                        // 3863\n     *                                                                                                                 // 3864\n     *      R.subtract(10, 8); //=> 2                                                                                  // 3865\n     *                                                                                                                 // 3866\n     *      var minus5 = R.subtract(R.__, 5);                                                                          // 3867\n     *      minus5(17); //=> 12                                                                                        // 3868\n     *                                                                                                                 // 3869\n     *      var complementaryAngle = R.subtract(90);                                                                   // 3870\n     *      complementaryAngle(30); //=> 60                                                                            // 3871\n     *      complementaryAngle(72); //=> 18                                                                            // 3872\n     */                                                                                                                // 3873\n    var subtract = _curry2(function subtract(a, b) {                                                                   // 3874\n        return a - b;                                                                                                  // 3875\n    });                                                                                                                // 3876\n                                                                                                                       // 3877\n    /**                                                                                                                // 3878\n     * Returns all but the first element of the given list or string (or object                                        // 3879\n     * with a `tail` method).                                                                                          // 3880\n     *                                                                                                                 // 3881\n     * Dispatches to the `slice` method of the first argument, if present.                                             // 3882\n     *                                                                                                                 // 3883\n     * @func                                                                                                           // 3884\n     * @memberOf R                                                                                                     // 3885\n     * @since v0.1.0                                                                                                   // 3886\n     * @category List                                                                                                  // 3887\n     * @sig [a] -> [a]                                                                                                 // 3888\n     * @sig String -> String                                                                                           // 3889\n     * @param {*} list                                                                                                 // 3890\n     * @return {*}                                                                                                     // 3891\n     * @see R.head, R.init, R.last                                                                                     // 3892\n     * @example                                                                                                        // 3893\n     *                                                                                                                 // 3894\n     *      R.tail([1, 2, 3]);  //=> [2, 3]                                                                            // 3895\n     *      R.tail([1, 2]);     //=> [2]                                                                               // 3896\n     *      R.tail([1]);        //=> []                                                                                // 3897\n     *      R.tail([]);         //=> []                                                                                // 3898\n     *                                                                                                                 // 3899\n     *      R.tail('abc');  //=> 'bc'                                                                                  // 3900\n     *      R.tail('ab');   //=> 'b'                                                                                   // 3901\n     *      R.tail('a');    //=> ''                                                                                    // 3902\n     *      R.tail('');     //=> ''                                                                                    // 3903\n     */                                                                                                                // 3904\n    var tail = _checkForMethod('tail', slice(1, Infinity));                                                            // 3905\n                                                                                                                       // 3906\n    /**                                                                                                                // 3907\n     * Returns the first `n` elements of the given list, string, or                                                    // 3908\n     * transducer/transformer (or object with a `take` method).                                                        // 3909\n     *                                                                                                                 // 3910\n     * Dispatches to the `take` method of the second argument, if present.                                             // 3911\n     *                                                                                                                 // 3912\n     * @func                                                                                                           // 3913\n     * @memberOf R                                                                                                     // 3914\n     * @since v0.1.0                                                                                                   // 3915\n     * @category List                                                                                                  // 3916\n     * @sig Number -> [a] -> [a]                                                                                       // 3917\n     * @sig Number -> String -> String                                                                                 // 3918\n     * @param {Number} n                                                                                               // 3919\n     * @param {*} list                                                                                                 // 3920\n     * @return {*}                                                                                                     // 3921\n     * @see R.drop                                                                                                     // 3922\n     * @example                                                                                                        // 3923\n     *                                                                                                                 // 3924\n     *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']                                                             // 3925\n     *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']                                                      // 3926\n     *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']                                               // 3927\n     *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']                                               // 3928\n     *      R.take(3, 'ramda');               //=> 'ram'                                                               // 3929\n     *                                                                                                                 // 3930\n     *      var personnel = [                                                                                          // 3931\n     *        'Dave Brubeck',                                                                                          // 3932\n     *        'Paul Desmond',                                                                                          // 3933\n     *        'Eugene Wright',                                                                                         // 3934\n     *        'Joe Morello',                                                                                           // 3935\n     *        'Gerry Mulligan',                                                                                        // 3936\n     *        'Bob Bates',                                                                                             // 3937\n     *        'Joe Dodge',                                                                                             // 3938\n     *        'Ron Crotty'                                                                                             // 3939\n     *      ];                                                                                                         // 3940\n     *                                                                                                                 // 3941\n     *      var takeFive = R.take(5);                                                                                  // 3942\n     *      takeFive(personnel);                                                                                       // 3943\n     *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']                    // 3944\n     */                                                                                                                // 3945\n    var take = _curry2(_dispatchable('take', _xtake, function take(n, xs) {                                            // 3946\n        return slice(0, n < 0 ? Infinity : n, xs);                                                                     // 3947\n    }));                                                                                                               // 3948\n                                                                                                                       // 3949\n    /**                                                                                                                // 3950\n     * Returns a new list containing the last `n` elements of a given list, passing                                    // 3951\n     * each value to the supplied predicate function, and terminating when the                                         // 3952\n     * predicate function returns `false`. Excludes the element that caused the                                        // 3953\n     * predicate function to fail. The predicate function is passed one argument:                                      // 3954\n     * *(value)*.                                                                                                      // 3955\n     *                                                                                                                 // 3956\n     * @func                                                                                                           // 3957\n     * @memberOf R                                                                                                     // 3958\n     * @since v0.16.0                                                                                                  // 3959\n     * @category List                                                                                                  // 3960\n     * @sig (a -> Boolean) -> [a] -> [a]                                                                               // 3961\n     * @param {Function} fn The function called per iteration.                                                         // 3962\n     * @param {Array} list The collection to iterate over.                                                             // 3963\n     * @return {Array} A new array.                                                                                    // 3964\n     * @see R.dropLastWhile, R.addIndex                                                                                // 3965\n     * @example                                                                                                        // 3966\n     *                                                                                                                 // 3967\n     *      var isNotOne = x => x !== 1;                                                                               // 3968\n     *                                                                                                                 // 3969\n     *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]                                                    // 3970\n     */                                                                                                                // 3971\n    var takeLastWhile = _curry2(function takeLastWhile(fn, list) {                                                     // 3972\n        var idx = list.length - 1;                                                                                     // 3973\n        while (idx >= 0 && fn(list[idx])) {                                                                            // 3974\n            idx -= 1;                                                                                                  // 3975\n        }                                                                                                              // 3976\n        return _slice(list, idx + 1, Infinity);                                                                        // 3977\n    });                                                                                                                // 3978\n                                                                                                                       // 3979\n    /**                                                                                                                // 3980\n     * Returns a new list containing the first `n` elements of a given list,                                           // 3981\n     * passing each value to the supplied predicate function, and terminating when                                     // 3982\n     * the predicate function returns `false`. Excludes the element that caused the                                    // 3983\n     * predicate function to fail. The predicate function is passed one argument:                                      // 3984\n     * *(value)*.                                                                                                      // 3985\n     *                                                                                                                 // 3986\n     * Dispatches to the `takeWhile` method of the second argument, if present.                                        // 3987\n     *                                                                                                                 // 3988\n     * Acts as a transducer if a transformer is given in list position.                                                // 3989\n     *                                                                                                                 // 3990\n     * @func                                                                                                           // 3991\n     * @memberOf R                                                                                                     // 3992\n     * @since v0.1.0                                                                                                   // 3993\n     * @category List                                                                                                  // 3994\n     * @sig (a -> Boolean) -> [a] -> [a]                                                                               // 3995\n     * @param {Function} fn The function called per iteration.                                                         // 3996\n     * @param {Array} list The collection to iterate over.                                                             // 3997\n     * @return {Array} A new array.                                                                                    // 3998\n     * @see R.dropWhile, R.transduce, R.addIndex                                                                       // 3999\n     * @example                                                                                                        // 4000\n     *                                                                                                                 // 4001\n     *      var isNotFour = x => x !== 4;                                                                              // 4002\n     *                                                                                                                 // 4003\n     *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]                                              // 4004\n     */                                                                                                                // 4005\n    var takeWhile = _curry2(_dispatchable('takeWhile', _xtakeWhile, function takeWhile(fn, list) {                     // 4006\n        var idx = 0;                                                                                                   // 4007\n        var len = list.length;                                                                                         // 4008\n        while (idx < len && fn(list[idx])) {                                                                           // 4009\n            idx += 1;                                                                                                  // 4010\n        }                                                                                                              // 4011\n        return _slice(list, 0, idx);                                                                                   // 4012\n    }));                                                                                                               // 4013\n                                                                                                                       // 4014\n    /**                                                                                                                // 4015\n     * Runs the given function with the supplied object, then returns the object.                                      // 4016\n     *                                                                                                                 // 4017\n     * @func                                                                                                           // 4018\n     * @memberOf R                                                                                                     // 4019\n     * @since v0.1.0                                                                                                   // 4020\n     * @category Function                                                                                              // 4021\n     * @sig (a -> *) -> a -> a                                                                                         // 4022\n     * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.               // 4023\n     * @param {*} x                                                                                                    // 4024\n     * @return {*} `x`.                                                                                                // 4025\n     * @example                                                                                                        // 4026\n     *                                                                                                                 // 4027\n     *      var sayX = x => console.log('x is ' + x);                                                                  // 4028\n     *      R.tap(sayX, 100); //=> 100                                                                                 // 4029\n     *      //-> 'x is 100'                                                                                            // 4030\n     */                                                                                                                // 4031\n    var tap = _curry2(function tap(fn, x) {                                                                            // 4032\n        fn(x);                                                                                                         // 4033\n        return x;                                                                                                      // 4034\n    });                                                                                                                // 4035\n                                                                                                                       // 4036\n    /**                                                                                                                // 4037\n     * Calls an input function `n` times, returning an array containing the results                                    // 4038\n     * of those function calls.                                                                                        // 4039\n     *                                                                                                                 // 4040\n     * `fn` is passed one argument: The current value of `n`, which begins at `0`                                      // 4041\n     * and is gradually incremented to `n - 1`.                                                                        // 4042\n     *                                                                                                                 // 4043\n     * @func                                                                                                           // 4044\n     * @memberOf R                                                                                                     // 4045\n     * @since v0.2.3                                                                                                   // 4046\n     * @category List                                                                                                  // 4047\n     * @sig (Number -> a) -> Number -> [a]                                                                             // 4048\n     * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.                     // 4049\n     * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.                         // 4050\n     * @return {Array} An array containing the return values of all calls to `fn`.                                     // 4051\n     * @example                                                                                                        // 4052\n     *                                                                                                                 // 4053\n     *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]                                                               // 4054\n     */                                                                                                                // 4055\n    var times = _curry2(function times(fn, n) {                                                                        // 4056\n        var len = Number(n);                                                                                           // 4057\n        var list = new Array(len);                                                                                     // 4058\n        var idx = 0;                                                                                                   // 4059\n        while (idx < len) {                                                                                            // 4060\n            list[idx] = fn(idx);                                                                                       // 4061\n            idx += 1;                                                                                                  // 4062\n        }                                                                                                              // 4063\n        return list;                                                                                                   // 4064\n    });                                                                                                                // 4065\n                                                                                                                       // 4066\n    /**                                                                                                                // 4067\n     * Converts an object into an array of key, value arrays. Only the object's                                        // 4068\n     * own properties are used.                                                                                        // 4069\n     * Note that the order of the output array is not guaranteed to be consistent                                      // 4070\n     * across different JS platforms.                                                                                  // 4071\n     *                                                                                                                 // 4072\n     * @func                                                                                                           // 4073\n     * @memberOf R                                                                                                     // 4074\n     * @since v0.4.0                                                                                                   // 4075\n     * @category Object                                                                                                // 4076\n     * @sig {String: *} -> [[String,*]]                                                                                // 4077\n     * @param {Object} obj The object to extract from                                                                  // 4078\n     * @return {Array} An array of key, value arrays from the object's own properties.                                 // 4079\n     * @see R.fromPairs                                                                                                // 4080\n     * @example                                                                                                        // 4081\n     *                                                                                                                 // 4082\n     *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]                                         // 4083\n     */                                                                                                                // 4084\n    var toPairs = _curry1(function toPairs(obj) {                                                                      // 4085\n        var pairs = [];                                                                                                // 4086\n        for (var prop in obj) {                                                                                        // 4087\n            if (_has(prop, obj)) {                                                                                     // 4088\n                pairs[pairs.length] = [                                                                                // 4089\n                    prop,                                                                                              // 4090\n                    obj[prop]                                                                                          // 4091\n                ];                                                                                                     // 4092\n            }                                                                                                          // 4093\n        }                                                                                                              // 4094\n        return pairs;                                                                                                  // 4095\n    });                                                                                                                // 4096\n                                                                                                                       // 4097\n    /**                                                                                                                // 4098\n     * Converts an object into an array of key, value arrays. The object's own                                         // 4099\n     * properties and prototype properties are used. Note that the order of the                                        // 4100\n     * output array is not guaranteed to be consistent across different JS                                             // 4101\n     * platforms.                                                                                                      // 4102\n     *                                                                                                                 // 4103\n     * @func                                                                                                           // 4104\n     * @memberOf R                                                                                                     // 4105\n     * @since v0.4.0                                                                                                   // 4106\n     * @category Object                                                                                                // 4107\n     * @sig {String: *} -> [[String,*]]                                                                                // 4108\n     * @param {Object} obj The object to extract from                                                                  // 4109\n     * @return {Array} An array of key, value arrays from the object's own                                             // 4110\n     *         and prototype properties.                                                                               // 4111\n     * @example                                                                                                        // 4112\n     *                                                                                                                 // 4113\n     *      var F = function() { this.x = 'X'; };                                                                      // 4114\n     *      F.prototype.y = 'Y';                                                                                       // 4115\n     *      var f = new F();                                                                                           // 4116\n     *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]                                                                // 4117\n     */                                                                                                                // 4118\n    var toPairsIn = _curry1(function toPairsIn(obj) {                                                                  // 4119\n        var pairs = [];                                                                                                // 4120\n        for (var prop in obj) {                                                                                        // 4121\n            pairs[pairs.length] = [                                                                                    // 4122\n                prop,                                                                                                  // 4123\n                obj[prop]                                                                                              // 4124\n            ];                                                                                                         // 4125\n        }                                                                                                              // 4126\n        return pairs;                                                                                                  // 4127\n    });                                                                                                                // 4128\n                                                                                                                       // 4129\n    /**                                                                                                                // 4130\n     * Transposes the rows and columns of a 2D list.                                                                   // 4131\n     * When passed a list of `n` lists of length `x`,                                                                  // 4132\n     * returns a list of `x` lists of length `n`.                                                                      // 4133\n     *                                                                                                                 // 4134\n     *                                                                                                                 // 4135\n     * @func                                                                                                           // 4136\n     * @memberOf R                                                                                                     // 4137\n     * @since 0.19.0                                                                                                   // 4138\n     * @category List                                                                                                  // 4139\n     * @sig [[a]] -> [[a]]                                                                                             // 4140\n     * @param {Array} list A 2D list                                                                                   // 4141\n     * @return {Array} A 2D list                                                                                       // 4142\n     * @example                                                                                                        // 4143\n     *                                                                                                                 // 4144\n     *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]                              // 4145\n     *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]                              // 4146\n     *                                                                                                                 // 4147\n     * If some of the rows are shorter than the following rows, their elements are skipped:                            // 4148\n     *                                                                                                                 // 4149\n     *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]                        // 4150\n     */                                                                                                                // 4151\n    var transpose = _curry1(function transpose(outerlist) {                                                            // 4152\n        var i = 0;                                                                                                     // 4153\n        var result = [];                                                                                               // 4154\n        while (i < outerlist.length) {                                                                                 // 4155\n            var innerlist = outerlist[i];                                                                              // 4156\n            var j = 0;                                                                                                 // 4157\n            while (j < innerlist.length) {                                                                             // 4158\n                if (typeof result[j] === 'undefined') {                                                                // 4159\n                    result[j] = [];                                                                                    // 4160\n                }                                                                                                      // 4161\n                result[j].push(innerlist[j]);                                                                          // 4162\n                j += 1;                                                                                                // 4163\n            }                                                                                                          // 4164\n            i += 1;                                                                                                    // 4165\n        }                                                                                                              // 4166\n        return result;                                                                                                 // 4167\n    });                                                                                                                // 4168\n                                                                                                                       // 4169\n    /**                                                                                                                // 4170\n     * Removes (strips) whitespace from both ends of the string.                                                       // 4171\n     *                                                                                                                 // 4172\n     * @func                                                                                                           // 4173\n     * @memberOf R                                                                                                     // 4174\n     * @since v0.6.0                                                                                                   // 4175\n     * @category String                                                                                                // 4176\n     * @sig String -> String                                                                                           // 4177\n     * @param {String} str The string to trim.                                                                         // 4178\n     * @return {String} Trimmed version of `str`.                                                                      // 4179\n     * @example                                                                                                        // 4180\n     *                                                                                                                 // 4181\n     *      R.trim('   xyz  '); //=> 'xyz'                                                                             // 4182\n     *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']                                               // 4183\n     */                                                                                                                // 4184\n    var trim = function () {                                                                                           // 4185\n        var ws = '\\t\\n\\x0B\\f\\r \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' + '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' + '\\u2029\\uFEFF';\n        var zeroWidth = '\\u200B';                                                                                      // 4187\n        var hasProtoTrim = typeof String.prototype.trim === 'function';                                                // 4188\n        if (!hasProtoTrim || (ws.trim() || !zeroWidth.trim())) {                                                       // 4189\n            return _curry1(function trim(str) {                                                                        // 4190\n                var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');                                                // 4191\n                var endRx = new RegExp('[' + ws + '][' + ws + ']*$');                                                  // 4192\n                return str.replace(beginRx, '').replace(endRx, '');                                                    // 4193\n            });                                                                                                        // 4194\n        } else {                                                                                                       // 4195\n            return _curry1(function trim(str) {                                                                        // 4196\n                return str.trim();                                                                                     // 4197\n            });                                                                                                        // 4198\n        }                                                                                                              // 4199\n    }();                                                                                                               // 4200\n                                                                                                                       // 4201\n    /**                                                                                                                // 4202\n     * Gives a single-word string description of the (native) type of a value,                                         // 4203\n     * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not                                      // 4204\n     * attempt to distinguish user Object types any further, reporting them all as                                     // 4205\n     * 'Object'.                                                                                                       // 4206\n     *                                                                                                                 // 4207\n     * @func                                                                                                           // 4208\n     * @memberOf R                                                                                                     // 4209\n     * @since v0.8.0                                                                                                   // 4210\n     * @category Type                                                                                                  // 4211\n     * @sig (* -> {*}) -> String                                                                                       // 4212\n     * @param {*} val The value to test                                                                                // 4213\n     * @return {String}                                                                                                // 4214\n     * @example                                                                                                        // 4215\n     *                                                                                                                 // 4216\n     *      R.type({}); //=> \"Object\"                                                                                  // 4217\n     *      R.type(1); //=> \"Number\"                                                                                   // 4218\n     *      R.type(false); //=> \"Boolean\"                                                                              // 4219\n     *      R.type('s'); //=> \"String\"                                                                                 // 4220\n     *      R.type(null); //=> \"Null\"                                                                                  // 4221\n     *      R.type([]); //=> \"Array\"                                                                                   // 4222\n     *      R.type(/[A-z]/); //=> \"RegExp\"                                                                             // 4223\n     */                                                                                                                // 4224\n    var type = _curry1(function type(val) {                                                                            // 4225\n        return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);\n    });                                                                                                                // 4227\n                                                                                                                       // 4228\n    /**                                                                                                                // 4229\n     * Takes a function `fn`, which takes a single array argument, and returns a                                       // 4230\n     * function which:                                                                                                 // 4231\n     *                                                                                                                 // 4232\n     *   - takes any number of positional arguments;                                                                   // 4233\n     *   - passes these arguments to `fn` as an array; and                                                             // 4234\n     *   - returns the result.                                                                                         // 4235\n     *                                                                                                                 // 4236\n     * In other words, R.unapply derives a variadic function from a function which                                     // 4237\n     * takes an array. R.unapply is the inverse of R.apply.                                                            // 4238\n     *                                                                                                                 // 4239\n     * @func                                                                                                           // 4240\n     * @memberOf R                                                                                                     // 4241\n     * @since v0.8.0                                                                                                   // 4242\n     * @category Function                                                                                              // 4243\n     * @sig ([*...] -> a) -> (*... -> a)                                                                               // 4244\n     * @param {Function} fn                                                                                            // 4245\n     * @return {Function}                                                                                              // 4246\n     * @see R.apply                                                                                                    // 4247\n     * @example                                                                                                        // 4248\n     *                                                                                                                 // 4249\n     *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'                                                         // 4250\n     */                                                                                                                // 4251\n    var unapply = _curry1(function unapply(fn) {                                                                       // 4252\n        return function () {                                                                                           // 4253\n            return fn(_slice(arguments));                                                                              // 4254\n        };                                                                                                             // 4255\n    });                                                                                                                // 4256\n                                                                                                                       // 4257\n    /**                                                                                                                // 4258\n     * Wraps a function of any arity (including nullary) in a function that accepts                                    // 4259\n     * exactly 1 parameter. Any extraneous parameters will not be passed to the                                        // 4260\n     * supplied function.                                                                                              // 4261\n     *                                                                                                                 // 4262\n     * @func                                                                                                           // 4263\n     * @memberOf R                                                                                                     // 4264\n     * @since v0.2.0                                                                                                   // 4265\n     * @category Function                                                                                              // 4266\n     * @sig (* -> b) -> (a -> b)                                                                                       // 4267\n     * @param {Function} fn The function to wrap.                                                                      // 4268\n     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of                        // 4269\n     *         arity 1.                                                                                                // 4270\n     * @example                                                                                                        // 4271\n     *                                                                                                                 // 4272\n     *      var takesTwoArgs = function(a, b) {                                                                        // 4273\n     *        return [a, b];                                                                                           // 4274\n     *      };                                                                                                         // 4275\n     *      takesTwoArgs.length; //=> 2                                                                                // 4276\n     *      takesTwoArgs(1, 2); //=> [1, 2]                                                                            // 4277\n     *                                                                                                                 // 4278\n     *      var takesOneArg = R.unary(takesTwoArgs);                                                                   // 4279\n     *      takesOneArg.length; //=> 1                                                                                 // 4280\n     *      // Only 1 argument is passed to the wrapped function                                                       // 4281\n     *      takesOneArg(1, 2); //=> [1, undefined]                                                                     // 4282\n     */                                                                                                                // 4283\n    var unary = _curry1(function unary(fn) {                                                                           // 4284\n        return nAry(1, fn);                                                                                            // 4285\n    });                                                                                                                // 4286\n                                                                                                                       // 4287\n    /**                                                                                                                // 4288\n     * Returns a function of arity `n` from a (manually) curried function.                                             // 4289\n     *                                                                                                                 // 4290\n     * @func                                                                                                           // 4291\n     * @memberOf R                                                                                                     // 4292\n     * @since v0.14.0                                                                                                  // 4293\n     * @category Function                                                                                              // 4294\n     * @sig Number -> (a -> b) -> (a -> c)                                                                             // 4295\n     * @param {Number} length The arity for the returned function.                                                     // 4296\n     * @param {Function} fn The function to uncurry.                                                                   // 4297\n     * @return {Function} A new function.                                                                              // 4298\n     * @see R.curry                                                                                                    // 4299\n     * @example                                                                                                        // 4300\n     *                                                                                                                 // 4301\n     *      var addFour = a => b => c => d => a + b + c + d;                                                           // 4302\n     *                                                                                                                 // 4303\n     *      var uncurriedAddFour = R.uncurryN(4, addFour);                                                             // 4304\n     *      uncurriedAddFour(1, 2, 3, 4); //=> 10                                                                      // 4305\n     */                                                                                                                // 4306\n    var uncurryN = _curry2(function uncurryN(depth, fn) {                                                              // 4307\n        return curryN(depth, function () {                                                                             // 4308\n            var currentDepth = 1;                                                                                      // 4309\n            var value = fn;                                                                                            // 4310\n            var idx = 0;                                                                                               // 4311\n            var endIdx;                                                                                                // 4312\n            while (currentDepth <= depth && typeof value === 'function') {                                             // 4313\n                endIdx = currentDepth === depth ? arguments.length : idx + value.length;                               // 4314\n                value = value.apply(this, _slice(arguments, idx, endIdx));                                             // 4315\n                currentDepth += 1;                                                                                     // 4316\n                idx = endIdx;                                                                                          // 4317\n            }                                                                                                          // 4318\n            return value;                                                                                              // 4319\n        });                                                                                                            // 4320\n    });                                                                                                                // 4321\n                                                                                                                       // 4322\n    /**                                                                                                                // 4323\n     * Builds a list from a seed value. Accepts an iterator function, which returns                                    // 4324\n     * either false to stop iteration or an array of length 2 containing the value                                     // 4325\n     * to add to the resulting list and the seed to be used in the next call to the                                    // 4326\n     * iterator function.                                                                                              // 4327\n     *                                                                                                                 // 4328\n     * The iterator function receives one argument: *(seed)*.                                                          // 4329\n     *                                                                                                                 // 4330\n     * @func                                                                                                           // 4331\n     * @memberOf R                                                                                                     // 4332\n     * @since v0.10.0                                                                                                  // 4333\n     * @category List                                                                                                  // 4334\n     * @sig (a -> [b]) -> * -> [b]                                                                                     // 4335\n     * @param {Function} fn The iterator function. receives one argument, `seed`, and returns                          // 4336\n     *        either false to quit iteration or an array of length two to proceed. The element                         // 4337\n     *        at index 0 of this array will be added to the resulting array, and the element                           // 4338\n     *        at index 1 will be passed to the next call to `fn`.                                                      // 4339\n     * @param {*} seed The seed value.                                                                                 // 4340\n     * @return {Array} The final list.                                                                                 // 4341\n     * @example                                                                                                        // 4342\n     *                                                                                                                 // 4343\n     *      var f = n => n > 50 ? false : [-n, n + 10];                                                                // 4344\n     *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]                                                            // 4345\n     */                                                                                                                // 4346\n    var unfold = _curry2(function unfold(fn, seed) {                                                                   // 4347\n        var pair = fn(seed);                                                                                           // 4348\n        var result = [];                                                                                               // 4349\n        while (pair && pair.length) {                                                                                  // 4350\n            result[result.length] = pair[0];                                                                           // 4351\n            pair = fn(pair[1]);                                                                                        // 4352\n        }                                                                                                              // 4353\n        return result;                                                                                                 // 4354\n    });                                                                                                                // 4355\n                                                                                                                       // 4356\n    /**                                                                                                                // 4357\n     * Returns a new list containing only one copy of each element in the original                                     // 4358\n     * list, based upon the value returned by applying the supplied predicate to                                       // 4359\n     * two list elements. Prefers the first item if two items compare equal based                                      // 4360\n     * on the predicate.                                                                                               // 4361\n     *                                                                                                                 // 4362\n     * @func                                                                                                           // 4363\n     * @memberOf R                                                                                                     // 4364\n     * @since v0.2.0                                                                                                   // 4365\n     * @category List                                                                                                  // 4366\n     * @sig (a, a -> Boolean) -> [a] -> [a]                                                                            // 4367\n     * @param {Function} pred A predicate used to test whether two items are equal.                                    // 4368\n     * @param {Array} list The array to consider.                                                                      // 4369\n     * @return {Array} The list of unique items.                                                                       // 4370\n     * @example                                                                                                        // 4371\n     *                                                                                                                 // 4372\n     *      var strEq = R.eqBy(String);                                                                                // 4373\n     *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]                                                             // 4374\n     *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]                                                               // 4375\n     *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]                                                                // 4376\n     *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']                                                              // 4377\n     */                                                                                                                // 4378\n    var uniqWith = _curry2(function uniqWith(pred, list) {                                                             // 4379\n        var idx = 0;                                                                                                   // 4380\n        var len = list.length;                                                                                         // 4381\n        var result = [];                                                                                               // 4382\n        var item;                                                                                                      // 4383\n        while (idx < len) {                                                                                            // 4384\n            item = list[idx];                                                                                          // 4385\n            if (!_containsWith(pred, item, result)) {                                                                  // 4386\n                result[result.length] = item;                                                                          // 4387\n            }                                                                                                          // 4388\n            idx += 1;                                                                                                  // 4389\n        }                                                                                                              // 4390\n        return result;                                                                                                 // 4391\n    });                                                                                                                // 4392\n                                                                                                                       // 4393\n    /**                                                                                                                // 4394\n     * Tests the final argument by passing it to the given predicate function. If                                      // 4395\n     * the predicate is not satisfied, the function will return the result of                                          // 4396\n     * calling the `whenFalseFn` function with the same argument. If the predicate                                     // 4397\n     * is satisfied, the argument is returned as is.                                                                   // 4398\n     *                                                                                                                 // 4399\n     * @func                                                                                                           // 4400\n     * @memberOf R                                                                                                     // 4401\n     * @since v0.18.0                                                                                                  // 4402\n     * @category Logic                                                                                                 // 4403\n     * @sig (a -> Boolean) -> (a -> a) -> a -> a                                                                       // 4404\n     * @param {Function} pred        A predicate function                                                              // 4405\n     * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates                                    // 4406\n     *                               to a falsy value.                                                                 // 4407\n     * @param {*}        x           An object to test with the `pred` function and                                    // 4408\n     *                               pass to `whenFalseFn` if necessary.                                               // 4409\n     * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.                                          // 4410\n     * @see R.ifElse, R.when                                                                                           // 4411\n     * @example                                                                                                        // 4412\n     *                                                                                                                 // 4413\n     *      // coerceArray :: (a|[a]) -> [a]                                                                           // 4414\n     *      var coerceArray = R.unless(R.isArrayLike, R.of);                                                           // 4415\n     *      coerceArray([1, 2, 3]); //=> [1, 2, 3]                                                                     // 4416\n     *      coerceArray(1);         //=> [1]                                                                           // 4417\n     */                                                                                                                // 4418\n    var unless = _curry3(function unless(pred, whenFalseFn, x) {                                                       // 4419\n        return pred(x) ? x : whenFalseFn(x);                                                                           // 4420\n    });                                                                                                                // 4421\n                                                                                                                       // 4422\n    /**                                                                                                                // 4423\n     * Returns a new copy of the array with the element at the provided index                                          // 4424\n     * replaced with the given value.                                                                                  // 4425\n     *                                                                                                                 // 4426\n     * @func                                                                                                           // 4427\n     * @memberOf R                                                                                                     // 4428\n     * @since v0.14.0                                                                                                  // 4429\n     * @category List                                                                                                  // 4430\n     * @sig Number -> a -> [a] -> [a]                                                                                  // 4431\n     * @param {Number} idx The index to update.                                                                        // 4432\n     * @param {*} x The value to exist at the given index of the returned array.                                       // 4433\n     * @param {Array|Arguments} list The source array-like object to be updated.                                       // 4434\n     * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.                               // 4435\n     * @see R.adjust                                                                                                   // 4436\n     * @example                                                                                                        // 4437\n     *                                                                                                                 // 4438\n     *      R.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]                                                            // 4439\n     *      R.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]                                                            // 4440\n     */                                                                                                                // 4441\n    var update = _curry3(function update(idx, x, list) {                                                               // 4442\n        return adjust(always(x), idx, list);                                                                           // 4443\n    });                                                                                                                // 4444\n                                                                                                                       // 4445\n    /**                                                                                                                // 4446\n     * Accepts a function `fn` and a list of transformer functions and returns a                                       // 4447\n     * new curried function. When the new function is invoked, it calls the                                            // 4448\n     * function `fn` with parameters consisting of the result of calling each                                          // 4449\n     * supplied handler on successive arguments to the new function.                                                   // 4450\n     *                                                                                                                 // 4451\n     * If more arguments are passed to the returned function than transformer                                          // 4452\n     * functions, those arguments are passed directly to `fn` as additional                                            // 4453\n     * parameters. If you expect additional arguments that don't need to be                                            // 4454\n     * transformed, although you can ignore them, it's best to pass an identity                                        // 4455\n     * function so that the new function reports the correct arity.                                                    // 4456\n     *                                                                                                                 // 4457\n     * @func                                                                                                           // 4458\n     * @memberOf R                                                                                                     // 4459\n     * @since v0.1.0                                                                                                   // 4460\n     * @category Function                                                                                              // 4461\n     * @sig (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)                              // 4462\n     * @param {Function} fn The function to wrap.                                                                      // 4463\n     * @param {Array} transformers A list of transformer functions                                                     // 4464\n     * @return {Function} The wrapped function.                                                                        // 4465\n     * @example                                                                                                        // 4466\n     *                                                                                                                 // 4467\n     *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81                                               // 4468\n     *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81                                               // 4469\n     *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32                                                         // 4470\n     *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32                                                         // 4471\n     */                                                                                                                // 4472\n    var useWith = _curry2(function useWith(fn, transformers) {                                                         // 4473\n        return curryN(transformers.length, function () {                                                               // 4474\n            var args = [];                                                                                             // 4475\n            var idx = 0;                                                                                               // 4476\n            while (idx < transformers.length) {                                                                        // 4477\n                args.push(transformers[idx].call(this, arguments[idx]));                                               // 4478\n                idx += 1;                                                                                              // 4479\n            }                                                                                                          // 4480\n            return fn.apply(this, args.concat(_slice(arguments, transformers.length)));                                // 4481\n        });                                                                                                            // 4482\n    });                                                                                                                // 4483\n                                                                                                                       // 4484\n    /**                                                                                                                // 4485\n     * Returns a list of all the enumerable own properties of the supplied object.                                     // 4486\n     * Note that the order of the output array is not guaranteed across different                                      // 4487\n     * JS platforms.                                                                                                   // 4488\n     *                                                                                                                 // 4489\n     * @func                                                                                                           // 4490\n     * @memberOf R                                                                                                     // 4491\n     * @since v0.1.0                                                                                                   // 4492\n     * @category Object                                                                                                // 4493\n     * @sig {k: v} -> [v]                                                                                              // 4494\n     * @param {Object} obj The object to extract values from                                                           // 4495\n     * @return {Array} An array of the values of the object's own properties.                                          // 4496\n     * @example                                                                                                        // 4497\n     *                                                                                                                 // 4498\n     *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]                                                               // 4499\n     */                                                                                                                // 4500\n    var values = _curry1(function values(obj) {                                                                        // 4501\n        var props = keys(obj);                                                                                         // 4502\n        var len = props.length;                                                                                        // 4503\n        var vals = [];                                                                                                 // 4504\n        var idx = 0;                                                                                                   // 4505\n        while (idx < len) {                                                                                            // 4506\n            vals[idx] = obj[props[idx]];                                                                               // 4507\n            idx += 1;                                                                                                  // 4508\n        }                                                                                                              // 4509\n        return vals;                                                                                                   // 4510\n    });                                                                                                                // 4511\n                                                                                                                       // 4512\n    /**                                                                                                                // 4513\n     * Returns a list of all the properties, including prototype properties, of the                                    // 4514\n     * supplied object.                                                                                                // 4515\n     * Note that the order of the output array is not guaranteed to be consistent                                      // 4516\n     * across different JS platforms.                                                                                  // 4517\n     *                                                                                                                 // 4518\n     * @func                                                                                                           // 4519\n     * @memberOf R                                                                                                     // 4520\n     * @since v0.2.0                                                                                                   // 4521\n     * @category Object                                                                                                // 4522\n     * @sig {k: v} -> [v]                                                                                              // 4523\n     * @param {Object} obj The object to extract values from                                                           // 4524\n     * @return {Array} An array of the values of the object's own and prototype properties.                            // 4525\n     * @example                                                                                                        // 4526\n     *                                                                                                                 // 4527\n     *      var F = function() { this.x = 'X'; };                                                                      // 4528\n     *      F.prototype.y = 'Y';                                                                                       // 4529\n     *      var f = new F();                                                                                           // 4530\n     *      R.valuesIn(f); //=> ['X', 'Y']                                                                             // 4531\n     */                                                                                                                // 4532\n    var valuesIn = _curry1(function valuesIn(obj) {                                                                    // 4533\n        var prop;                                                                                                      // 4534\n        var vs = [];                                                                                                   // 4535\n        for (prop in obj) {                                                                                            // 4536\n            vs[vs.length] = obj[prop];                                                                                 // 4537\n        }                                                                                                              // 4538\n        return vs;                                                                                                     // 4539\n    });                                                                                                                // 4540\n                                                                                                                       // 4541\n    /**                                                                                                                // 4542\n     * Returns a \"view\" of the given data structure, determined by the given lens.                                     // 4543\n     * The lens's focus determines which portion of the data structure is visible.                                     // 4544\n     *                                                                                                                 // 4545\n     * @func                                                                                                           // 4546\n     * @memberOf R                                                                                                     // 4547\n     * @since v0.16.0                                                                                                  // 4548\n     * @category Object                                                                                                // 4549\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s                                                        // 4550\n     * @sig Lens s a -> s -> a                                                                                         // 4551\n     * @param {Lens} lens                                                                                              // 4552\n     * @param {*} x                                                                                                    // 4553\n     * @return {*}                                                                                                     // 4554\n     * @see R.prop, R.lensIndex, R.lensProp                                                                            // 4555\n     * @example                                                                                                        // 4556\n     *                                                                                                                 // 4557\n     *      var xLens = R.lensProp('x');                                                                               // 4558\n     *                                                                                                                 // 4559\n     *      R.view(xLens, {x: 1, y: 2});  //=> 1                                                                       // 4560\n     *      R.view(xLens, {x: 4, y: 2});  //=> 4                                                                       // 4561\n     */                                                                                                                // 4562\n    var view = function () {                                                                                           // 4563\n        var Const = function (x) {                                                                                     // 4564\n            return {                                                                                                   // 4565\n                value: x,                                                                                              // 4566\n                map: function () {                                                                                     // 4567\n                    return this;                                                                                       // 4568\n                }                                                                                                      // 4569\n            };                                                                                                         // 4570\n        };                                                                                                             // 4571\n        return _curry2(function view(lens, x) {                                                                        // 4572\n            return lens(Const)(x).value;                                                                               // 4573\n        });                                                                                                            // 4574\n    }();                                                                                                               // 4575\n                                                                                                                       // 4576\n    /**                                                                                                                // 4577\n     * Tests the final argument by passing it to the given predicate function. If                                      // 4578\n     * the predicate is satisfied, the function will return the result of calling                                      // 4579\n     * the `whenTrueFn` function with the same argument. If the predicate is not                                       // 4580\n     * satisfied, the argument is returned as is.                                                                      // 4581\n     *                                                                                                                 // 4582\n     * @func                                                                                                           // 4583\n     * @memberOf R                                                                                                     // 4584\n     * @since v0.18.0                                                                                                  // 4585\n     * @category Logic                                                                                                 // 4586\n     * @sig (a -> Boolean) -> (a -> a) -> a -> a                                                                       // 4587\n     * @param {Function} pred       A predicate function                                                               // 4588\n     * @param {Function} whenTrueFn A function to invoke when the `condition`                                          // 4589\n     *                              evaluates to a truthy value.                                                       // 4590\n     * @param {*}        x          An object to test with the `pred` function and                                     // 4591\n     *                              pass to `whenTrueFn` if necessary.                                                 // 4592\n     * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.                                           // 4593\n     * @see R.ifElse, R.unless                                                                                         // 4594\n     * @example                                                                                                        // 4595\n     *                                                                                                                 // 4596\n     *      // truncate :: String -> String                                                                            // 4597\n     *      var truncate = R.when(                                                                                     // 4598\n     *        R.propSatisfies(R.gt(R.__, 10), 'length'),                                                               // 4599\n     *        R.pipe(R.take(10), R.append('…'), R.join(''))                                                            // 4600\n     *      );                                                                                                         // 4601\n     *      truncate('12345');         //=> '12345'                                                                    // 4602\n     *      truncate('0123456789ABC'); //=> '0123456789…'                                                              // 4603\n     */                                                                                                                // 4604\n    var when = _curry3(function when(pred, whenTrueFn, x) {                                                            // 4605\n        return pred(x) ? whenTrueFn(x) : x;                                                                            // 4606\n    });                                                                                                                // 4607\n                                                                                                                       // 4608\n    /**                                                                                                                // 4609\n     * Takes a spec object and a test object; returns true if the test satisfies                                       // 4610\n     * the spec. Each of the spec's own properties must be a predicate function.                                       // 4611\n     * Each predicate is applied to the value of the corresponding property of the                                     // 4612\n     * test object. `where` returns true if all the predicates return true, false                                      // 4613\n     * otherwise.                                                                                                      // 4614\n     *                                                                                                                 // 4615\n     * `where` is well suited to declaratively expressing constraints for other                                        // 4616\n     * functions such as `filter` and `find`.                                                                          // 4617\n     *                                                                                                                 // 4618\n     * @func                                                                                                           // 4619\n     * @memberOf R                                                                                                     // 4620\n     * @since v0.1.1                                                                                                   // 4621\n     * @category Object                                                                                                // 4622\n     * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean                                                         // 4623\n     * @param {Object} spec                                                                                            // 4624\n     * @param {Object} testObj                                                                                         // 4625\n     * @return {Boolean}                                                                                               // 4626\n     * @example                                                                                                        // 4627\n     *                                                                                                                 // 4628\n     *      // pred :: Object -> Boolean                                                                               // 4629\n     *      var pred = R.where({                                                                                       // 4630\n     *        a: R.equals('foo'),                                                                                      // 4631\n     *        b: R.complement(R.equals('bar')),                                                                        // 4632\n     *        x: R.gt(_, 10),                                                                                          // 4633\n     *        y: R.lt(_, 20)                                                                                           // 4634\n     *      });                                                                                                        // 4635\n     *                                                                                                                 // 4636\n     *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true                                                        // 4637\n     *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false                                                       // 4638\n     *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false                                                       // 4639\n     *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false                                                       // 4640\n     *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false                                                       // 4641\n     */                                                                                                                // 4642\n    var where = _curry2(function where(spec, testObj) {                                                                // 4643\n        for (var prop in spec) {                                                                                       // 4644\n            if (_has(prop, spec) && !spec[prop](testObj[prop])) {                                                      // 4645\n                return false;                                                                                          // 4646\n            }                                                                                                          // 4647\n        }                                                                                                              // 4648\n        return true;                                                                                                   // 4649\n    });                                                                                                                // 4650\n                                                                                                                       // 4651\n    /**                                                                                                                // 4652\n     * Wrap a function inside another to allow you to make adjustments to the                                          // 4653\n     * parameters, or do other processing either before the internal function is                                       // 4654\n     * called or with its results.                                                                                     // 4655\n     *                                                                                                                 // 4656\n     * @func                                                                                                           // 4657\n     * @memberOf R                                                                                                     // 4658\n     * @since v0.1.0                                                                                                   // 4659\n     * @category Function                                                                                              // 4660\n     * @sig (a... -> b) -> ((a... -> b) -> a... -> c) -> (a... -> c)                                                   // 4661\n     * @param {Function} fn The function to wrap.                                                                      // 4662\n     * @param {Function} wrapper The wrapper function.                                                                 // 4663\n     * @return {Function} The wrapped function.                                                                        // 4664\n     * @example                                                                                                        // 4665\n     *                                                                                                                 // 4666\n     *      var greet = name => 'Hello ' + name;                                                                       // 4667\n     *                                                                                                                 // 4668\n     *      var shoutedGreet = R.wrap(greet, (gr, name) => gr(name).toUpperCase());                                    // 4669\n     *                                                                                                                 // 4670\n     *      shoutedGreet(\"Kathy\"); //=> \"HELLO KATHY\"                                                                  // 4671\n     *                                                                                                                 // 4672\n     *      var shortenedGreet = R.wrap(greet, function(gr, name) {                                                    // 4673\n     *        return gr(name.substring(0, 3));                                                                         // 4674\n     *      });                                                                                                        // 4675\n     *      shortenedGreet(\"Robert\"); //=> \"Hello Rob\"                                                                 // 4676\n     */                                                                                                                // 4677\n    var wrap = _curry2(function wrap(fn, wrapper) {                                                                    // 4678\n        return curryN(fn.length, function () {                                                                         // 4679\n            return wrapper.apply(this, _concat([fn], arguments));                                                      // 4680\n        });                                                                                                            // 4681\n    });                                                                                                                // 4682\n                                                                                                                       // 4683\n    /**                                                                                                                // 4684\n     * Creates a new list out of the two supplied by creating each possible pair                                       // 4685\n     * from the lists.                                                                                                 // 4686\n     *                                                                                                                 // 4687\n     * @func                                                                                                           // 4688\n     * @memberOf R                                                                                                     // 4689\n     * @since v0.1.0                                                                                                   // 4690\n     * @category List                                                                                                  // 4691\n     * @sig [a] -> [b] -> [[a,b]]                                                                                      // 4692\n     * @param {Array} as The first list.                                                                               // 4693\n     * @param {Array} bs The second list.                                                                              // 4694\n     * @return {Array} The list made by combining each possible pair from                                              // 4695\n     *         `as` and `bs` into pairs (`[a, b]`).                                                                    // 4696\n     * @example                                                                                                        // 4697\n     *                                                                                                                 // 4698\n     *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]                                 // 4699\n     */                                                                                                                // 4700\n    // = xprodWith(prepend); (takes about 3 times as long...)                                                          // 4701\n    var xprod = _curry2(function xprod(a, b) {                                                                         // 4702\n        // = xprodWith(prepend); (takes about 3 times as long...)                                                      // 4703\n        var idx = 0;                                                                                                   // 4704\n        var ilen = a.length;                                                                                           // 4705\n        var j;                                                                                                         // 4706\n        var jlen = b.length;                                                                                           // 4707\n        var result = [];                                                                                               // 4708\n        while (idx < ilen) {                                                                                           // 4709\n            j = 0;                                                                                                     // 4710\n            while (j < jlen) {                                                                                         // 4711\n                result[result.length] = [                                                                              // 4712\n                    a[idx],                                                                                            // 4713\n                    b[j]                                                                                               // 4714\n                ];                                                                                                     // 4715\n                j += 1;                                                                                                // 4716\n            }                                                                                                          // 4717\n            idx += 1;                                                                                                  // 4718\n        }                                                                                                              // 4719\n        return result;                                                                                                 // 4720\n    });                                                                                                                // 4721\n                                                                                                                       // 4722\n    /**                                                                                                                // 4723\n     * Creates a new list out of the two supplied by pairing up equally-positioned                                     // 4724\n     * items from both lists. The returned list is truncated to the length of the                                      // 4725\n     * shorter of the two input lists.                                                                                 // 4726\n     * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.                                       // 4727\n     *                                                                                                                 // 4728\n     * @func                                                                                                           // 4729\n     * @memberOf R                                                                                                     // 4730\n     * @since v0.1.0                                                                                                   // 4731\n     * @category List                                                                                                  // 4732\n     * @sig [a] -> [b] -> [[a,b]]                                                                                      // 4733\n     * @param {Array} list1 The first array to consider.                                                               // 4734\n     * @param {Array} list2 The second array to consider.                                                              // 4735\n     * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.                       // 4736\n     * @example                                                                                                        // 4737\n     *                                                                                                                 // 4738\n     *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]                                     // 4739\n     */                                                                                                                // 4740\n    var zip = _curry2(function zip(a, b) {                                                                             // 4741\n        var rv = [];                                                                                                   // 4742\n        var idx = 0;                                                                                                   // 4743\n        var len = Math.min(a.length, b.length);                                                                        // 4744\n        while (idx < len) {                                                                                            // 4745\n            rv[idx] = [                                                                                                // 4746\n                a[idx],                                                                                                // 4747\n                b[idx]                                                                                                 // 4748\n            ];                                                                                                         // 4749\n            idx += 1;                                                                                                  // 4750\n        }                                                                                                              // 4751\n        return rv;                                                                                                     // 4752\n    });                                                                                                                // 4753\n                                                                                                                       // 4754\n    /**                                                                                                                // 4755\n     * Creates a new object out of a list of keys and a list of values.                                                // 4756\n     *                                                                                                                 // 4757\n     * @func                                                                                                           // 4758\n     * @memberOf R                                                                                                     // 4759\n     * @since v0.3.0                                                                                                   // 4760\n     * @category List                                                                                                  // 4761\n     * @sig [String] -> [*] -> {String: *}                                                                             // 4762\n     * @param {Array} keys The array that will be properties on the output object.                                     // 4763\n     * @param {Array} values The list of values on the output object.                                                  // 4764\n     * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.                    // 4765\n     * @example                                                                                                        // 4766\n     *                                                                                                                 // 4767\n     *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}                                              // 4768\n     */                                                                                                                // 4769\n    var zipObj = _curry2(function zipObj(keys, values) {                                                               // 4770\n        var idx = 0;                                                                                                   // 4771\n        var len = keys.length;                                                                                         // 4772\n        var out = {};                                                                                                  // 4773\n        while (idx < len) {                                                                                            // 4774\n            out[keys[idx]] = values[idx];                                                                              // 4775\n            idx += 1;                                                                                                  // 4776\n        }                                                                                                              // 4777\n        return out;                                                                                                    // 4778\n    });                                                                                                                // 4779\n                                                                                                                       // 4780\n    /**                                                                                                                // 4781\n     * Creates a new list out of the two supplied by applying the function to each                                     // 4782\n     * equally-positioned pair in the lists. The returned list is truncated to the                                     // 4783\n     * length of the shorter of the two input lists.                                                                   // 4784\n     *                                                                                                                 // 4785\n     * @function                                                                                                       // 4786\n     * @memberOf R                                                                                                     // 4787\n     * @since v0.1.0                                                                                                   // 4788\n     * @category List                                                                                                  // 4789\n     * @sig (a,b -> c) -> [a] -> [b] -> [c]                                                                            // 4790\n     * @param {Function} fn The function used to combine the two elements into one value.                              // 4791\n     * @param {Array} list1 The first array to consider.                                                               // 4792\n     * @param {Array} list2 The second array to consider.                                                              // 4793\n     * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`                         // 4794\n     *         using `fn`.                                                                                             // 4795\n     * @example                                                                                                        // 4796\n     *                                                                                                                 // 4797\n     *      var f = (x, y) => {                                                                                        // 4798\n     *        // ...                                                                                                   // 4799\n     *      };                                                                                                         // 4800\n     *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);                                                                  // 4801\n     *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]                                                                     // 4802\n     */                                                                                                                // 4803\n    var zipWith = _curry3(function zipWith(fn, a, b) {                                                                 // 4804\n        var rv = [];                                                                                                   // 4805\n        var idx = 0;                                                                                                   // 4806\n        var len = Math.min(a.length, b.length);                                                                        // 4807\n        while (idx < len) {                                                                                            // 4808\n            rv[idx] = fn(a[idx], b[idx]);                                                                              // 4809\n            idx += 1;                                                                                                  // 4810\n        }                                                                                                              // 4811\n        return rv;                                                                                                     // 4812\n    });                                                                                                                // 4813\n                                                                                                                       // 4814\n    /**                                                                                                                // 4815\n     * A function that always returns `false`. Any passed in parameters are ignored.                                   // 4816\n     *                                                                                                                 // 4817\n     * @func                                                                                                           // 4818\n     * @memberOf R                                                                                                     // 4819\n     * @since v0.9.0                                                                                                   // 4820\n     * @category Function                                                                                              // 4821\n     * @sig * -> Boolean                                                                                               // 4822\n     * @param {*}                                                                                                      // 4823\n     * @return {Boolean}                                                                                               // 4824\n     * @see R.always, R.T                                                                                              // 4825\n     * @example                                                                                                        // 4826\n     *                                                                                                                 // 4827\n     *      R.F(); //=> false                                                                                          // 4828\n     */                                                                                                                // 4829\n    var F = always(false);                                                                                             // 4830\n                                                                                                                       // 4831\n    /**                                                                                                                // 4832\n     * A function that always returns `true`. Any passed in parameters are ignored.                                    // 4833\n     *                                                                                                                 // 4834\n     * @func                                                                                                           // 4835\n     * @memberOf R                                                                                                     // 4836\n     * @since v0.9.0                                                                                                   // 4837\n     * @category Function                                                                                              // 4838\n     * @sig * -> Boolean                                                                                               // 4839\n     * @param {*}                                                                                                      // 4840\n     * @return {Boolean}                                                                                               // 4841\n     * @see R.always, R.F                                                                                              // 4842\n     * @example                                                                                                        // 4843\n     *                                                                                                                 // 4844\n     *      R.T(); //=> true                                                                                           // 4845\n     */                                                                                                                // 4846\n    var T = always(true);                                                                                              // 4847\n                                                                                                                       // 4848\n    /**                                                                                                                // 4849\n     * Copies an object.                                                                                               // 4850\n     *                                                                                                                 // 4851\n     * @private                                                                                                        // 4852\n     * @param {*} value The value to be copied                                                                         // 4853\n     * @param {Array} refFrom Array containing the source references                                                   // 4854\n     * @param {Array} refTo Array containing the copied source references                                              // 4855\n     * @return {*} The copied value.                                                                                   // 4856\n     */                                                                                                                // 4857\n    var _clone = function _clone(value, refFrom, refTo) {                                                              // 4858\n        var copy = function copy(copiedValue) {                                                                        // 4859\n            var len = refFrom.length;                                                                                  // 4860\n            var idx = 0;                                                                                               // 4861\n            while (idx < len) {                                                                                        // 4862\n                if (value === refFrom[idx]) {                                                                          // 4863\n                    return refTo[idx];                                                                                 // 4864\n                }                                                                                                      // 4865\n                idx += 1;                                                                                              // 4866\n            }                                                                                                          // 4867\n            refFrom[idx + 1] = value;                                                                                  // 4868\n            refTo[idx + 1] = copiedValue;                                                                              // 4869\n            for (var key in value) {                                                                                   // 4870\n                copiedValue[key] = _clone(value[key], refFrom, refTo);                                                 // 4871\n            }                                                                                                          // 4872\n            return copiedValue;                                                                                        // 4873\n        };                                                                                                             // 4874\n        switch (type(value)) {                                                                                         // 4875\n        case 'Object':                                                                                                 // 4876\n            return copy({});                                                                                           // 4877\n        case 'Array':                                                                                                  // 4878\n            return copy([]);                                                                                           // 4879\n        case 'Date':                                                                                                   // 4880\n            return new Date(value);                                                                                    // 4881\n        case 'RegExp':                                                                                                 // 4882\n            return _cloneRegExp(value);                                                                                // 4883\n        default:                                                                                                       // 4884\n            return value;                                                                                              // 4885\n        }                                                                                                              // 4886\n    };                                                                                                                 // 4887\n                                                                                                                       // 4888\n    var _createPartialApplicator = function _createPartialApplicator(concat) {                                         // 4889\n        return _curry2(function (fn, args) {                                                                           // 4890\n            return _arity(Math.max(0, fn.length - args.length), function () {                                          // 4891\n                return fn.apply(this, concat(args, arguments));                                                        // 4892\n            });                                                                                                        // 4893\n        });                                                                                                            // 4894\n    };                                                                                                                 // 4895\n                                                                                                                       // 4896\n    var _dropLast = function dropLast(n, xs) {                                                                         // 4897\n        return take(n < xs.length ? xs.length - n : 0, xs);                                                            // 4898\n    };                                                                                                                 // 4899\n                                                                                                                       // 4900\n    // Values of other types are only equal if identical.                                                              // 4901\n    var _equals = function _equals(a, b, stackA, stackB) {                                                             // 4902\n        if (identical(a, b)) {                                                                                         // 4903\n            return true;                                                                                               // 4904\n        }                                                                                                              // 4905\n        if (type(a) !== type(b)) {                                                                                     // 4906\n            return false;                                                                                              // 4907\n        }                                                                                                              // 4908\n        if (a == null || b == null) {                                                                                  // 4909\n            return false;                                                                                              // 4910\n        }                                                                                                              // 4911\n        if (typeof a.equals === 'function' || typeof b.equals === 'function') {                                        // 4912\n            return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);     // 4913\n        }                                                                                                              // 4914\n        switch (type(a)) {                                                                                             // 4915\n        case 'Arguments':                                                                                              // 4916\n        case 'Array':                                                                                                  // 4917\n        case 'Object':                                                                                                 // 4918\n            break;                                                                                                     // 4919\n        case 'Boolean':                                                                                                // 4920\n        case 'Number':                                                                                                 // 4921\n        case 'String':                                                                                                 // 4922\n            if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {                                     // 4923\n                return false;                                                                                          // 4924\n            }                                                                                                          // 4925\n            break;                                                                                                     // 4926\n        case 'Date':                                                                                                   // 4927\n            if (!identical(a.valueOf(), b.valueOf())) {                                                                // 4928\n                return false;                                                                                          // 4929\n            }                                                                                                          // 4930\n            break;                                                                                                     // 4931\n        case 'Error':                                                                                                  // 4932\n            if (!(a.name === b.name && a.message === b.message)) {                                                     // 4933\n                return false;                                                                                          // 4934\n            }                                                                                                          // 4935\n            break;                                                                                                     // 4936\n        case 'RegExp':                                                                                                 // 4937\n            if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {\n                return false;                                                                                          // 4939\n            }                                                                                                          // 4940\n            break;                                                                                                     // 4941\n        case 'Map':                                                                                                    // 4942\n        case 'Set':                                                                                                    // 4943\n            if (!_equals(_arrayFromIterator(a.entries()), _arrayFromIterator(b.entries()), stackA, stackB)) {          // 4944\n                return false;                                                                                          // 4945\n            }                                                                                                          // 4946\n            break;                                                                                                     // 4947\n        case 'Int8Array':                                                                                              // 4948\n        case 'Uint8Array':                                                                                             // 4949\n        case 'Uint8ClampedArray':                                                                                      // 4950\n        case 'Int16Array':                                                                                             // 4951\n        case 'Uint16Array':                                                                                            // 4952\n        case 'Int32Array':                                                                                             // 4953\n        case 'Uint32Array':                                                                                            // 4954\n        case 'Float32Array':                                                                                           // 4955\n        case 'Float64Array':                                                                                           // 4956\n            break;                                                                                                     // 4957\n        case 'ArrayBuffer':                                                                                            // 4958\n            break;                                                                                                     // 4959\n        default:                                                                                                       // 4960\n            // Values of other types are only equal if identical.                                                      // 4961\n            return false;                                                                                              // 4962\n        }                                                                                                              // 4963\n        var keysA = keys(a);                                                                                           // 4964\n        if (keysA.length !== keys(b).length) {                                                                         // 4965\n            return false;                                                                                              // 4966\n        }                                                                                                              // 4967\n        var idx = stackA.length - 1;                                                                                   // 4968\n        while (idx >= 0) {                                                                                             // 4969\n            if (stackA[idx] === a) {                                                                                   // 4970\n                return stackB[idx] === b;                                                                              // 4971\n            }                                                                                                          // 4972\n            idx -= 1;                                                                                                  // 4973\n        }                                                                                                              // 4974\n        stackA.push(a);                                                                                                // 4975\n        stackB.push(b);                                                                                                // 4976\n        idx = keysA.length - 1;                                                                                        // 4977\n        while (idx >= 0) {                                                                                             // 4978\n            var key = keysA[idx];                                                                                      // 4979\n            if (!(_has(key, b) && _equals(b[key], a[key], stackA, stackB))) {                                          // 4980\n                return false;                                                                                          // 4981\n            }                                                                                                          // 4982\n            idx -= 1;                                                                                                  // 4983\n        }                                                                                                              // 4984\n        stackA.pop();                                                                                                  // 4985\n        stackB.pop();                                                                                                  // 4986\n        return true;                                                                                                   // 4987\n    };                                                                                                                 // 4988\n                                                                                                                       // 4989\n    /**                                                                                                                // 4990\n     * `_makeFlat` is a helper function that returns a one-level or fully recursive                                    // 4991\n     * function based on the flag passed in.                                                                           // 4992\n     *                                                                                                                 // 4993\n     * @private                                                                                                        // 4994\n     */                                                                                                                // 4995\n    var _makeFlat = function _makeFlat(recursive) {                                                                    // 4996\n        return function flatt(list) {                                                                                  // 4997\n            var value, jlen, j;                                                                                        // 4998\n            var result = [];                                                                                           // 4999\n            var idx = 0;                                                                                               // 5000\n            var ilen = list.length;                                                                                    // 5001\n            while (idx < ilen) {                                                                                       // 5002\n                if (isArrayLike(list[idx])) {                                                                          // 5003\n                    value = recursive ? flatt(list[idx]) : list[idx];                                                  // 5004\n                    j = 0;                                                                                             // 5005\n                    jlen = value.length;                                                                               // 5006\n                    while (j < jlen) {                                                                                 // 5007\n                        result[result.length] = value[j];                                                              // 5008\n                        j += 1;                                                                                        // 5009\n                    }                                                                                                  // 5010\n                } else {                                                                                               // 5011\n                    result[result.length] = list[idx];                                                                 // 5012\n                }                                                                                                      // 5013\n                idx += 1;                                                                                              // 5014\n            }                                                                                                          // 5015\n            return result;                                                                                             // 5016\n        };                                                                                                             // 5017\n    };                                                                                                                 // 5018\n                                                                                                                       // 5019\n    var _reduce = function () {                                                                                        // 5020\n        function _arrayReduce(xf, acc, list) {                                                                         // 5021\n            var idx = 0;                                                                                               // 5022\n            var len = list.length;                                                                                     // 5023\n            while (idx < len) {                                                                                        // 5024\n                acc = xf['@@transducer/step'](acc, list[idx]);                                                         // 5025\n                if (acc && acc['@@transducer/reduced']) {                                                              // 5026\n                    acc = acc['@@transducer/value'];                                                                   // 5027\n                    break;                                                                                             // 5028\n                }                                                                                                      // 5029\n                idx += 1;                                                                                              // 5030\n            }                                                                                                          // 5031\n            return xf['@@transducer/result'](acc);                                                                     // 5032\n        }                                                                                                              // 5033\n        function _iterableReduce(xf, acc, iter) {                                                                      // 5034\n            var step = iter.next();                                                                                    // 5035\n            while (!step.done) {                                                                                       // 5036\n                acc = xf['@@transducer/step'](acc, step.value);                                                        // 5037\n                if (acc && acc['@@transducer/reduced']) {                                                              // 5038\n                    acc = acc['@@transducer/value'];                                                                   // 5039\n                    break;                                                                                             // 5040\n                }                                                                                                      // 5041\n                step = iter.next();                                                                                    // 5042\n            }                                                                                                          // 5043\n            return xf['@@transducer/result'](acc);                                                                     // 5044\n        }                                                                                                              // 5045\n        function _methodReduce(xf, acc, obj) {                                                                         // 5046\n            return xf['@@transducer/result'](obj.reduce(bind(xf['@@transducer/step'], xf), acc));                      // 5047\n        }                                                                                                              // 5048\n        var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';                              // 5049\n        return function _reduce(fn, acc, list) {                                                                       // 5050\n            if (typeof fn === 'function') {                                                                            // 5051\n                fn = _xwrap(fn);                                                                                       // 5052\n            }                                                                                                          // 5053\n            if (isArrayLike(list)) {                                                                                   // 5054\n                return _arrayReduce(fn, acc, list);                                                                    // 5055\n            }                                                                                                          // 5056\n            if (typeof list.reduce === 'function') {                                                                   // 5057\n                return _methodReduce(fn, acc, list);                                                                   // 5058\n            }                                                                                                          // 5059\n            if (list[symIterator] != null) {                                                                           // 5060\n                return _iterableReduce(fn, acc, list[symIterator]());                                                  // 5061\n            }                                                                                                          // 5062\n            if (typeof list.next === 'function') {                                                                     // 5063\n                return _iterableReduce(fn, acc, list);                                                                 // 5064\n            }                                                                                                          // 5065\n            throw new TypeError('reduce: list must be array or iterable');                                             // 5066\n        };                                                                                                             // 5067\n    }();                                                                                                               // 5068\n                                                                                                                       // 5069\n    var _xdropLastWhile = function () {                                                                                // 5070\n        function XDropLastWhile(fn, xf) {                                                                              // 5071\n            this.f = fn;                                                                                               // 5072\n            this.retained = [];                                                                                        // 5073\n            this.xf = xf;                                                                                              // 5074\n        }                                                                                                              // 5075\n        XDropLastWhile.prototype['@@transducer/init'] = _xfBase.init;                                                  // 5076\n        XDropLastWhile.prototype['@@transducer/result'] = function (result) {                                          // 5077\n            this.retained = null;                                                                                      // 5078\n            return this.xf['@@transducer/result'](result);                                                             // 5079\n        };                                                                                                             // 5080\n        XDropLastWhile.prototype['@@transducer/step'] = function (result, input) {                                     // 5081\n            return this.f(input) ? this.retain(result, input) : this.flush(result, input);                             // 5082\n        };                                                                                                             // 5083\n        XDropLastWhile.prototype.flush = function (result, input) {                                                    // 5084\n            result = _reduce(this.xf['@@transducer/step'], result, this.retained);                                     // 5085\n            this.retained = [];                                                                                        // 5086\n            return this.xf['@@transducer/step'](result, input);                                                        // 5087\n        };                                                                                                             // 5088\n        XDropLastWhile.prototype.retain = function (result, input) {                                                   // 5089\n            this.retained.push(input);                                                                                 // 5090\n            return result;                                                                                             // 5091\n        };                                                                                                             // 5092\n        return _curry2(function _xdropLastWhile(fn, xf) {                                                              // 5093\n            return new XDropLastWhile(fn, xf);                                                                         // 5094\n        });                                                                                                            // 5095\n    }();                                                                                                               // 5096\n                                                                                                                       // 5097\n    var _xgroupBy = function () {                                                                                      // 5098\n        function XGroupBy(f, xf) {                                                                                     // 5099\n            this.xf = xf;                                                                                              // 5100\n            this.f = f;                                                                                                // 5101\n            this.inputs = {};                                                                                          // 5102\n        }                                                                                                              // 5103\n        XGroupBy.prototype['@@transducer/init'] = _xfBase.init;                                                        // 5104\n        XGroupBy.prototype['@@transducer/result'] = function (result) {                                                // 5105\n            var key;                                                                                                   // 5106\n            for (key in this.inputs) {                                                                                 // 5107\n                if (_has(key, this.inputs)) {                                                                          // 5108\n                    result = this.xf['@@transducer/step'](result, this.inputs[key]);                                   // 5109\n                    if (result['@@transducer/reduced']) {                                                              // 5110\n                        result = result['@@transducer/value'];                                                         // 5111\n                        break;                                                                                         // 5112\n                    }                                                                                                  // 5113\n                }                                                                                                      // 5114\n            }                                                                                                          // 5115\n            this.inputs = null;                                                                                        // 5116\n            return this.xf['@@transducer/result'](result);                                                             // 5117\n        };                                                                                                             // 5118\n        XGroupBy.prototype['@@transducer/step'] = function (result, input) {                                           // 5119\n            var key = this.f(input);                                                                                   // 5120\n            this.inputs[key] = this.inputs[key] || [                                                                   // 5121\n                key,                                                                                                   // 5122\n                []                                                                                                     // 5123\n            ];                                                                                                         // 5124\n            this.inputs[key][1] = append(input, this.inputs[key][1]);                                                  // 5125\n            return result;                                                                                             // 5126\n        };                                                                                                             // 5127\n        return _curry2(function _xgroupBy(f, xf) {                                                                     // 5128\n            return new XGroupBy(f, xf);                                                                                // 5129\n        });                                                                                                            // 5130\n    }();                                                                                                               // 5131\n                                                                                                                       // 5132\n    /**                                                                                                                // 5133\n     * Creates a new list iteration function from an existing one by adding two new                                    // 5134\n     * parameters to its callback function: the current index, and the entire list.                                    // 5135\n     *                                                                                                                 // 5136\n     * This would turn, for instance, Ramda's simple `map` function into one that                                      // 5137\n     * more closely resembles `Array.prototype.map`. Note that this will only work                                     // 5138\n     * for functions in which the iteration callback function is the first                                             // 5139\n     * parameter, and where the list is the last parameter. (This latter might be                                      // 5140\n     * unimportant if the list parameter is not used.)                                                                 // 5141\n     *                                                                                                                 // 5142\n     * @func                                                                                                           // 5143\n     * @memberOf R                                                                                                     // 5144\n     * @since v0.15.0                                                                                                  // 5145\n     * @category Function                                                                                              // 5146\n     * @category List                                                                                                  // 5147\n     * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)                                  // 5148\n     * @param {Function} fn A list iteration function that does not pass index or list to its callback                 // 5149\n     * @return {Function} An altered list iteration function that passes (item, index, list) to its callback           // 5150\n     * @example                                                                                                        // 5151\n     *                                                                                                                 // 5152\n     *      var mapIndexed = R.addIndex(R.map);                                                                        // 5153\n     *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);                                 // 5154\n     *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']                                                            // 5155\n     */                                                                                                                // 5156\n    var addIndex = _curry1(function addIndex(fn) {                                                                     // 5157\n        return curryN(fn.length, function () {                                                                         // 5158\n            var idx = 0;                                                                                               // 5159\n            var origFn = arguments[0];                                                                                 // 5160\n            var list = arguments[arguments.length - 1];                                                                // 5161\n            var args = _slice(arguments);                                                                              // 5162\n            args[0] = function () {                                                                                    // 5163\n                var result = origFn.apply(this, _concat(arguments, [                                                   // 5164\n                    idx,                                                                                               // 5165\n                    list                                                                                               // 5166\n                ]));                                                                                                   // 5167\n                idx += 1;                                                                                              // 5168\n                return result;                                                                                         // 5169\n            };                                                                                                         // 5170\n            return fn.apply(this, args);                                                                               // 5171\n        });                                                                                                            // 5172\n    });                                                                                                                // 5173\n                                                                                                                       // 5174\n    /**                                                                                                                // 5175\n     * Wraps a function of any arity (including nullary) in a function that accepts                                    // 5176\n     * exactly 2 parameters. Any extraneous parameters will not be passed to the                                       // 5177\n     * supplied function.                                                                                              // 5178\n     *                                                                                                                 // 5179\n     * @func                                                                                                           // 5180\n     * @memberOf R                                                                                                     // 5181\n     * @since v0.2.0                                                                                                   // 5182\n     * @category Function                                                                                              // 5183\n     * @sig (* -> c) -> (a, b -> c)                                                                                    // 5184\n     * @param {Function} fn The function to wrap.                                                                      // 5185\n     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of                        // 5186\n     *         arity 2.                                                                                                // 5187\n     * @example                                                                                                        // 5188\n     *                                                                                                                 // 5189\n     *      var takesThreeArgs = function(a, b, c) {                                                                   // 5190\n     *        return [a, b, c];                                                                                        // 5191\n     *      };                                                                                                         // 5192\n     *      takesThreeArgs.length; //=> 3                                                                              // 5193\n     *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]                                                                    // 5194\n     *                                                                                                                 // 5195\n     *      var takesTwoArgs = R.binary(takesThreeArgs);                                                               // 5196\n     *      takesTwoArgs.length; //=> 2                                                                                // 5197\n     *      // Only 2 arguments are passed to the wrapped function                                                     // 5198\n     *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]                                                              // 5199\n     */                                                                                                                // 5200\n    var binary = _curry1(function binary(fn) {                                                                         // 5201\n        return nAry(2, fn);                                                                                            // 5202\n    });                                                                                                                // 5203\n                                                                                                                       // 5204\n    /**                                                                                                                // 5205\n     * Creates a deep copy of the value which may contain (nested) `Array`s and                                        // 5206\n     * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are not                                    // 5207\n     * copied, but assigned by their reference.                                                                        // 5208\n     *                                                                                                                 // 5209\n     * Dispatches to a `clone` method if present.                                                                      // 5210\n     *                                                                                                                 // 5211\n     * @func                                                                                                           // 5212\n     * @memberOf R                                                                                                     // 5213\n     * @since v0.1.0                                                                                                   // 5214\n     * @category Object                                                                                                // 5215\n     * @sig {*} -> {*}                                                                                                 // 5216\n     * @param {*} value The object or array to clone                                                                   // 5217\n     * @return {*} A new object or array.                                                                              // 5218\n     * @example                                                                                                        // 5219\n     *                                                                                                                 // 5220\n     *      var objects = [{}, {}, {}];                                                                                // 5221\n     *      var objectsClone = R.clone(objects);                                                                       // 5222\n     *      objects[0] === objectsClone[0]; //=> false                                                                 // 5223\n     */                                                                                                                // 5224\n    var clone = _curry1(function clone(value) {                                                                        // 5225\n        return value != null && typeof value.clone === 'function' ? value.clone() : _clone(value, [], []);             // 5226\n    });                                                                                                                // 5227\n                                                                                                                       // 5228\n    /**                                                                                                                // 5229\n     * Returns a curried equivalent of the provided function. The curried function                                     // 5230\n     * has two unusual capabilities. First, its arguments needn't be provided one                                      // 5231\n     * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the                                            // 5232\n     * following are equivalent:                                                                                       // 5233\n     *                                                                                                                 // 5234\n     *   - `g(1)(2)(3)`                                                                                                // 5235\n     *   - `g(1)(2, 3)`                                                                                                // 5236\n     *   - `g(1, 2)(3)`                                                                                                // 5237\n     *   - `g(1, 2, 3)`                                                                                                // 5238\n     *                                                                                                                 // 5239\n     * Secondly, the special placeholder value `R.__` may be used to specify                                           // 5240\n     * \"gaps\", allowing partial application of any combination of arguments,                                           // 5241\n     * regardless of their positions. If `g` is as above and `_` is `R.__`, the                                        // 5242\n     * following are equivalent:                                                                                       // 5243\n     *                                                                                                                 // 5244\n     *   - `g(1, 2, 3)`                                                                                                // 5245\n     *   - `g(_, 2, 3)(1)`                                                                                             // 5246\n     *   - `g(_, _, 3)(1)(2)`                                                                                          // 5247\n     *   - `g(_, _, 3)(1, 2)`                                                                                          // 5248\n     *   - `g(_, 2)(1)(3)`                                                                                             // 5249\n     *   - `g(_, 2)(1, 3)`                                                                                             // 5250\n     *   - `g(_, 2)(_, 3)(1)`                                                                                          // 5251\n     *                                                                                                                 // 5252\n     * @func                                                                                                           // 5253\n     * @memberOf R                                                                                                     // 5254\n     * @since v0.1.0                                                                                                   // 5255\n     * @category Function                                                                                              // 5256\n     * @sig (* -> a) -> (* -> a)                                                                                       // 5257\n     * @param {Function} fn The function to curry.                                                                     // 5258\n     * @return {Function} A new, curried function.                                                                     // 5259\n     * @see R.curryN                                                                                                   // 5260\n     * @example                                                                                                        // 5261\n     *                                                                                                                 // 5262\n     *      var addFourNumbers = (a, b, c, d) => a + b + c + d;                                                        // 5263\n     *                                                                                                                 // 5264\n     *      var curriedAddFourNumbers = R.curry(addFourNumbers);                                                       // 5265\n     *      var f = curriedAddFourNumbers(1, 2);                                                                       // 5266\n     *      var g = f(3);                                                                                              // 5267\n     *      g(4); //=> 10                                                                                              // 5268\n     */                                                                                                                // 5269\n    var curry = _curry1(function curry(fn) {                                                                           // 5270\n        return curryN(fn.length, fn);                                                                                  // 5271\n    });                                                                                                                // 5272\n                                                                                                                       // 5273\n    /**                                                                                                                // 5274\n     * Returns all but the first `n` elements of the given list, string, or                                            // 5275\n     * transducer/transformer (or object with a `drop` method).                                                        // 5276\n     *                                                                                                                 // 5277\n     * Dispatches to the `drop` method of the second argument, if present.                                             // 5278\n     *                                                                                                                 // 5279\n     * @func                                                                                                           // 5280\n     * @memberOf R                                                                                                     // 5281\n     * @since v0.1.0                                                                                                   // 5282\n     * @category List                                                                                                  // 5283\n     * @sig Number -> [a] -> [a]                                                                                       // 5284\n     * @sig Number -> String -> String                                                                                 // 5285\n     * @param {Number} n                                                                                               // 5286\n     * @param {*} list                                                                                                 // 5287\n     * @return {*}                                                                                                     // 5288\n     * @see R.take, R.transduce                                                                                        // 5289\n     * @example                                                                                                        // 5290\n     *                                                                                                                 // 5291\n     *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']                                                      // 5292\n     *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']                                                             // 5293\n     *      R.drop(3, ['foo', 'bar', 'baz']); //=> []                                                                  // 5294\n     *      R.drop(4, ['foo', 'bar', 'baz']); //=> []                                                                  // 5295\n     *      R.drop(3, 'ramda');               //=> 'da'                                                                // 5296\n     */                                                                                                                // 5297\n    var drop = _curry2(_dispatchable('drop', _xdrop, function drop(n, xs) {                                            // 5298\n        return slice(Math.max(0, n), Infinity, xs);                                                                    // 5299\n    }));                                                                                                               // 5300\n                                                                                                                       // 5301\n    /**                                                                                                                // 5302\n     * Returns a list containing all but the last `n` elements of the given `list`.                                    // 5303\n     *                                                                                                                 // 5304\n     * @func                                                                                                           // 5305\n     * @memberOf R                                                                                                     // 5306\n     * @since v0.16.0                                                                                                  // 5307\n     * @category List                                                                                                  // 5308\n     * @sig Number -> [a] -> [a]                                                                                       // 5309\n     * @sig Number -> String -> String                                                                                 // 5310\n     * @param {Number} n The number of elements of `xs` to skip.                                                       // 5311\n     * @param {Array} xs The collection to consider.                                                                   // 5312\n     * @return {Array}                                                                                                 // 5313\n     * @see R.takeLast                                                                                                 // 5314\n     * @example                                                                                                        // 5315\n     *                                                                                                                 // 5316\n     *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']                                                  // 5317\n     *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']                                                         // 5318\n     *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []                                                              // 5319\n     *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []                                                              // 5320\n     *      R.dropLast(3, 'ramda');               //=> 'ra'                                                            // 5321\n     */                                                                                                                // 5322\n    var dropLast = _curry2(_dispatchable('dropLast', _xdropLast, _dropLast));                                          // 5323\n                                                                                                                       // 5324\n    /**                                                                                                                // 5325\n     * Returns a new list containing all but last the`n` elements of a given list,                                     // 5326\n     * passing each value from the right to the supplied predicate function,                                           // 5327\n     * skipping elements while the predicate function returns `true`. The predicate                                    // 5328\n     * function is passed one argument: (value)*.                                                                      // 5329\n     *                                                                                                                 // 5330\n     * @func                                                                                                           // 5331\n     * @memberOf R                                                                                                     // 5332\n     * @since v0.16.0                                                                                                  // 5333\n     * @category List                                                                                                  // 5334\n     * @sig (a -> Boolean) -> [a] -> [a]                                                                               // 5335\n     * @param {Function} fn The function called per iteration.                                                         // 5336\n     * @param {Array} list The collection to iterate over.                                                             // 5337\n     * @return {Array} A new array.                                                                                    // 5338\n     * @see R.takeLastWhile, R.addIndex                                                                                // 5339\n     * @example                                                                                                        // 5340\n     *                                                                                                                 // 5341\n     *      var lteThree = x => x <= 3;                                                                                // 5342\n     *                                                                                                                 // 5343\n     *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]                                        // 5344\n     */                                                                                                                // 5345\n    var dropLastWhile = _curry2(_dispatchable('dropLastWhile', _xdropLastWhile, _dropLastWhile));                      // 5346\n                                                                                                                       // 5347\n    /**                                                                                                                // 5348\n     * Returns `true` if its arguments are equivalent, `false` otherwise. Handles                                      // 5349\n     * cyclical data structures.                                                                                       // 5350\n     *                                                                                                                 // 5351\n     * Dispatches symmetrically to the `equals` methods of both arguments, if                                          // 5352\n     * present.                                                                                                        // 5353\n     *                                                                                                                 // 5354\n     * @func                                                                                                           // 5355\n     * @memberOf R                                                                                                     // 5356\n     * @since v0.15.0                                                                                                  // 5357\n     * @category Relation                                                                                              // 5358\n     * @sig a -> b -> Boolean                                                                                          // 5359\n     * @param {*} a                                                                                                    // 5360\n     * @param {*} b                                                                                                    // 5361\n     * @return {Boolean}                                                                                               // 5362\n     * @example                                                                                                        // 5363\n     *                                                                                                                 // 5364\n     *      R.equals(1, 1); //=> true                                                                                  // 5365\n     *      R.equals(1, '1'); //=> false                                                                               // 5366\n     *      R.equals([1, 2, 3], [1, 2, 3]); //=> true                                                                  // 5367\n     *                                                                                                                 // 5368\n     *      var a = {}; a.v = a;                                                                                       // 5369\n     *      var b = {}; b.v = b;                                                                                       // 5370\n     *      R.equals(a, b); //=> true                                                                                  // 5371\n     */                                                                                                                // 5372\n    var equals = _curry2(function equals(a, b) {                                                                       // 5373\n        return _equals(a, b, [], []);                                                                                  // 5374\n    });                                                                                                                // 5375\n                                                                                                                       // 5376\n    /**                                                                                                                // 5377\n     * Takes a predicate and a \"filterable\", and returns a new filterable of the                                       // 5378\n     * same type containing the members of the given filterable which satisfy the                                      // 5379\n     * given predicate.                                                                                                // 5380\n     *                                                                                                                 // 5381\n     * Dispatches to the `filter` method of the second argument, if present.                                           // 5382\n     *                                                                                                                 // 5383\n     * Acts as a transducer if a transformer is given in list position.                                                // 5384\n     *                                                                                                                 // 5385\n     * @func                                                                                                           // 5386\n     * @memberOf R                                                                                                     // 5387\n     * @since v0.1.0                                                                                                   // 5388\n     * @category List                                                                                                  // 5389\n     * @sig Filterable f => (a -> Boolean) -> f a -> f a                                                               // 5390\n     * @param {Function} pred                                                                                          // 5391\n     * @param {Array} filterable                                                                                       // 5392\n     * @return {Array}                                                                                                 // 5393\n     * @see R.reject, R.transduce, R.addIndex                                                                          // 5394\n     * @example                                                                                                        // 5395\n     *                                                                                                                 // 5396\n     *      var isEven = n => n % 2 === 0;                                                                             // 5397\n     *                                                                                                                 // 5398\n     *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]                                                                // 5399\n     *                                                                                                                 // 5400\n     *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}                                              // 5401\n     */                                                                                                                // 5402\n    // else                                                                                                            // 5403\n    var filter = _curry2(_dispatchable('filter', _xfilter, function (pred, filterable) {                               // 5404\n        return _isObject(filterable) ? _reduce(function (acc, key) {                                                   // 5405\n            if (pred(filterable[key])) {                                                                               // 5406\n                acc[key] = filterable[key];                                                                            // 5407\n            }                                                                                                          // 5408\n            return acc;                                                                                                // 5409\n        }, {}, keys(filterable)) : // else                                                                             // 5410\n        _filter(pred, filterable);                                                                                     // 5411\n    }));                                                                                                               // 5412\n                                                                                                                       // 5413\n    /**                                                                                                                // 5414\n     * Returns a new list by pulling every item out of it (and all its sub-arrays)                                     // 5415\n     * and putting them in a new array, depth-first.                                                                   // 5416\n     *                                                                                                                 // 5417\n     * @func                                                                                                           // 5418\n     * @memberOf R                                                                                                     // 5419\n     * @since v0.1.0                                                                                                   // 5420\n     * @category List                                                                                                  // 5421\n     * @sig [a] -> [b]                                                                                                 // 5422\n     * @param {Array} list The array to consider.                                                                      // 5423\n     * @return {Array} The flattened list.                                                                             // 5424\n     * @see R.unnest                                                                                                   // 5425\n     * @example                                                                                                        // 5426\n     *                                                                                                                 // 5427\n     *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);                                              // 5428\n     *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]                                                               // 5429\n     */                                                                                                                // 5430\n    var flatten = _curry1(_makeFlat(true));                                                                            // 5431\n                                                                                                                       // 5432\n    /**                                                                                                                // 5433\n     * Returns a new function much like the supplied one, except that the first two                                    // 5434\n     * arguments' order is reversed.                                                                                   // 5435\n     *                                                                                                                 // 5436\n     * @func                                                                                                           // 5437\n     * @memberOf R                                                                                                     // 5438\n     * @since v0.1.0                                                                                                   // 5439\n     * @category Function                                                                                              // 5440\n     * @sig (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)                                                     // 5441\n     * @param {Function} fn The function to invoke with its first two parameters reversed.                             // 5442\n     * @return {*} The result of invoking `fn` with its first two parameters' order reversed.                          // 5443\n     * @example                                                                                                        // 5444\n     *                                                                                                                 // 5445\n     *      var mergeThree = (a, b, c) => [].concat(a, b, c);                                                          // 5446\n     *                                                                                                                 // 5447\n     *      mergeThree(1, 2, 3); //=> [1, 2, 3]                                                                        // 5448\n     *                                                                                                                 // 5449\n     *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]                                                                // 5450\n     */                                                                                                                // 5451\n    var flip = _curry1(function flip(fn) {                                                                             // 5452\n        return curry(function (a, b) {                                                                                 // 5453\n            var args = _slice(arguments);                                                                              // 5454\n            args[0] = b;                                                                                               // 5455\n            args[1] = a;                                                                                               // 5456\n            return fn.apply(this, args);                                                                               // 5457\n        });                                                                                                            // 5458\n    });                                                                                                                // 5459\n                                                                                                                       // 5460\n    /**                                                                                                                // 5461\n     * Splits a list into sub-lists stored in an object, based on the result of                                        // 5462\n     * calling a String-returning function on each element, and grouping the                                           // 5463\n     * results according to values returned.                                                                           // 5464\n     *                                                                                                                 // 5465\n     * Dispatches to the `groupBy` method of the second argument, if present.                                          // 5466\n     *                                                                                                                 // 5467\n     * Acts as a transducer if a transformer is given in list position.                                                // 5468\n     *                                                                                                                 // 5469\n     * @func                                                                                                           // 5470\n     * @memberOf R                                                                                                     // 5471\n     * @since v0.1.0                                                                                                   // 5472\n     * @category List                                                                                                  // 5473\n     * @sig (a -> String) -> [a] -> {String: [a]}                                                                      // 5474\n     * @param {Function} fn Function :: a -> String                                                                    // 5475\n     * @param {Array} list The array to group                                                                          // 5476\n     * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements                       // 5477\n     *         that produced that key when passed to `fn`.                                                             // 5478\n     * @see R.transduce                                                                                                // 5479\n     * @example                                                                                                        // 5480\n     *                                                                                                                 // 5481\n     *      var byGrade = R.groupBy(function(student) {                                                                // 5482\n     *        var score = student.score;                                                                               // 5483\n     *        return score < 65 ? 'F' :                                                                                // 5484\n     *               score < 70 ? 'D' :                                                                                // 5485\n     *               score < 80 ? 'C' :                                                                                // 5486\n     *               score < 90 ? 'B' : 'A';                                                                           // 5487\n     *      });                                                                                                        // 5488\n     *      var students = [{name: 'Abby', score: 84},                                                                 // 5489\n     *                      {name: 'Eddy', score: 58},                                                                 // 5490\n     *                      // ...                                                                                     // 5491\n     *                      {name: 'Jack', score: 69}];                                                                // 5492\n     *      byGrade(students);                                                                                         // 5493\n     *      // {                                                                                                       // 5494\n     *      //   'A': [{name: 'Dianne', score: 99}],                                                                   // 5495\n     *      //   'B': [{name: 'Abby', score: 84}]                                                                      // 5496\n     *      //   // ...,                                                                                               // 5497\n     *      //   'F': [{name: 'Eddy', score: 58}]                                                                      // 5498\n     *      // }                                                                                                       // 5499\n     */                                                                                                                // 5500\n    var groupBy = _curry2(_dispatchable('groupBy', _xgroupBy, function groupBy(fn, list) {                             // 5501\n        return _reduce(function (acc, elt) {                                                                           // 5502\n            var key = fn(elt);                                                                                         // 5503\n            acc[key] = append(elt, acc[key] || (acc[key] = []));                                                       // 5504\n            return acc;                                                                                                // 5505\n        }, {}, list);                                                                                                  // 5506\n    }));                                                                                                               // 5507\n                                                                                                                       // 5508\n    /**                                                                                                                // 5509\n     * Returns the first element of the given list or string. In some libraries                                        // 5510\n     * this function is named `first`.                                                                                 // 5511\n     *                                                                                                                 // 5512\n     * @func                                                                                                           // 5513\n     * @memberOf R                                                                                                     // 5514\n     * @since v0.1.0                                                                                                   // 5515\n     * @category List                                                                                                  // 5516\n     * @sig [a] -> a | Undefined                                                                                       // 5517\n     * @sig String -> String                                                                                           // 5518\n     * @param {Array|String} list                                                                                      // 5519\n     * @return {*}                                                                                                     // 5520\n     * @see R.tail, R.init, R.last                                                                                     // 5521\n     * @example                                                                                                        // 5522\n     *                                                                                                                 // 5523\n     *      R.head(['fi', 'fo', 'fum']); //=> 'fi'                                                                     // 5524\n     *      R.head([]); //=> undefined                                                                                 // 5525\n     *                                                                                                                 // 5526\n     *      R.head('abc'); //=> 'a'                                                                                    // 5527\n     *      R.head(''); //=> ''                                                                                        // 5528\n     */                                                                                                                // 5529\n    var head = nth(0);                                                                                                 // 5530\n                                                                                                                       // 5531\n    /**                                                                                                                // 5532\n     * Given a function that generates a key, turns a list of objects into an                                          // 5533\n     * object indexing the objects by the given key. Note that if multiple                                             // 5534\n     * objects generate the same value for the indexing key only the last value                                        // 5535\n     * will be included in the generated object.                                                                       // 5536\n     *                                                                                                                 // 5537\n     * @func                                                                                                           // 5538\n     * @memberOf R                                                                                                     // 5539\n     * @since 0.19.0                                                                                                   // 5540\n     * @category List                                                                                                  // 5541\n     * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}                                                                   // 5542\n     * @param {Function} fn Function :: a -> String                                                                    // 5543\n     * @param {Array} array The array of objects to index                                                              // 5544\n     * @return {Object} An object indexing each array element by the given property.                                   // 5545\n     * @example                                                                                                        // 5546\n     *                                                                                                                 // 5547\n     *      var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];                                             // 5548\n     *      R.indexBy(R.prop('id'), list);                                                                             // 5549\n     *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}                                          // 5550\n     */                                                                                                                // 5551\n    var indexBy = _curry2(function indexBy(fn, list) {                                                                 // 5552\n        return _reduce(function (acc, elem) {                                                                          // 5553\n            var key = fn(elem);                                                                                        // 5554\n            acc[key] = elem;                                                                                           // 5555\n            return acc;                                                                                                // 5556\n        }, {}, list);                                                                                                  // 5557\n    });                                                                                                                // 5558\n                                                                                                                       // 5559\n    /**                                                                                                                // 5560\n     * Returns all but the last element of the given list or string.                                                   // 5561\n     *                                                                                                                 // 5562\n     * @func                                                                                                           // 5563\n     * @memberOf R                                                                                                     // 5564\n     * @since v0.9.0                                                                                                   // 5565\n     * @category List                                                                                                  // 5566\n     * @sig [a] -> [a]                                                                                                 // 5567\n     * @sig String -> String                                                                                           // 5568\n     * @param {*} list                                                                                                 // 5569\n     * @return {*}                                                                                                     // 5570\n     * @see R.last, R.head, R.tail                                                                                     // 5571\n     * @example                                                                                                        // 5572\n     *                                                                                                                 // 5573\n     *      R.init([1, 2, 3]);  //=> [1, 2]                                                                            // 5574\n     *      R.init([1, 2]);     //=> [1]                                                                               // 5575\n     *      R.init([1]);        //=> []                                                                                // 5576\n     *      R.init([]);         //=> []                                                                                // 5577\n     *                                                                                                                 // 5578\n     *      R.init('abc');  //=> 'ab'                                                                                  // 5579\n     *      R.init('ab');   //=> 'a'                                                                                   // 5580\n     *      R.init('a');    //=> ''                                                                                    // 5581\n     *      R.init('');     //=> ''                                                                                    // 5582\n     */                                                                                                                // 5583\n    var init = slice(0, -1);                                                                                           // 5584\n                                                                                                                       // 5585\n    /**                                                                                                                // 5586\n     * Combines two lists into a set (i.e. no duplicates) composed of those                                            // 5587\n     * elements common to both lists. Duplication is determined according to the                                       // 5588\n     * value returned by applying the supplied predicate to two list elements.                                         // 5589\n     *                                                                                                                 // 5590\n     * @func                                                                                                           // 5591\n     * @memberOf R                                                                                                     // 5592\n     * @since v0.1.0                                                                                                   // 5593\n     * @category Relation                                                                                              // 5594\n     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]                                                                   // 5595\n     * @param {Function} pred A predicate function that determines whether                                             // 5596\n     *        the two supplied elements are equal.                                                                     // 5597\n     * @param {Array} list1 One list of items to compare                                                               // 5598\n     * @param {Array} list2 A second list of items to compare                                                          // 5599\n     * @return {Array} A new list containing those elements common to both lists.                                      // 5600\n     * @see R.intersection                                                                                             // 5601\n     * @example                                                                                                        // 5602\n     *                                                                                                                 // 5603\n     *      var buffaloSpringfield = [                                                                                 // 5604\n     *        {id: 824, name: 'Richie Furay'},                                                                         // 5605\n     *        {id: 956, name: 'Dewey Martin'},                                                                         // 5606\n     *        {id: 313, name: 'Bruce Palmer'},                                                                         // 5607\n     *        {id: 456, name: 'Stephen Stills'},                                                                       // 5608\n     *        {id: 177, name: 'Neil Young'}                                                                            // 5609\n     *      ];                                                                                                         // 5610\n     *      var csny = [                                                                                               // 5611\n     *        {id: 204, name: 'David Crosby'},                                                                         // 5612\n     *        {id: 456, name: 'Stephen Stills'},                                                                       // 5613\n     *        {id: 539, name: 'Graham Nash'},                                                                          // 5614\n     *        {id: 177, name: 'Neil Young'}                                                                            // 5615\n     *      ];                                                                                                         // 5616\n     *                                                                                                                 // 5617\n     *      R.intersectionWith(R.eqBy(R.prop('id')), buffaloSpringfield, csny);                                        // 5618\n     *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]                                    // 5619\n     */                                                                                                                // 5620\n    var intersectionWith = _curry3(function intersectionWith(pred, list1, list2) {                                     // 5621\n        var results = [];                                                                                              // 5622\n        var idx = 0;                                                                                                   // 5623\n        while (idx < list1.length) {                                                                                   // 5624\n            if (_containsWith(pred, list1[idx], list2)) {                                                              // 5625\n                results[results.length] = list1[idx];                                                                  // 5626\n            }                                                                                                          // 5627\n            idx += 1;                                                                                                  // 5628\n        }                                                                                                              // 5629\n        return uniqWith(pred, results);                                                                                // 5630\n    });                                                                                                                // 5631\n                                                                                                                       // 5632\n    /**                                                                                                                // 5633\n     * Same as R.invertObj, however this accounts for objects with duplicate values                                    // 5634\n     * by putting the values into an array.                                                                            // 5635\n     *                                                                                                                 // 5636\n     * @func                                                                                                           // 5637\n     * @memberOf R                                                                                                     // 5638\n     * @since v0.9.0                                                                                                   // 5639\n     * @category Object                                                                                                // 5640\n     * @sig {s: x} -> {x: [ s, ... ]}                                                                                  // 5641\n     * @param {Object} obj The object or array to invert                                                               // 5642\n     * @return {Object} out A new object with keys                                                                     // 5643\n     * in an array.                                                                                                    // 5644\n     * @example                                                                                                        // 5645\n     *                                                                                                                 // 5646\n     *      var raceResultsByFirstName = {                                                                             // 5647\n     *        first: 'alice',                                                                                          // 5648\n     *        second: 'jake',                                                                                          // 5649\n     *        third: 'alice',                                                                                          // 5650\n     *      };                                                                                                         // 5651\n     *      R.invert(raceResultsByFirstName);                                                                          // 5652\n     *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }                                                    // 5653\n     */                                                                                                                // 5654\n    var invert = _curry1(function invert(obj) {                                                                        // 5655\n        var props = keys(obj);                                                                                         // 5656\n        var len = props.length;                                                                                        // 5657\n        var idx = 0;                                                                                                   // 5658\n        var out = {};                                                                                                  // 5659\n        while (idx < len) {                                                                                            // 5660\n            var key = props[idx];                                                                                      // 5661\n            var val = obj[key];                                                                                        // 5662\n            var list = _has(val, out) ? out[val] : out[val] = [];                                                      // 5663\n            list[list.length] = key;                                                                                   // 5664\n            idx += 1;                                                                                                  // 5665\n        }                                                                                                              // 5666\n        return out;                                                                                                    // 5667\n    });                                                                                                                // 5668\n                                                                                                                       // 5669\n    /**                                                                                                                // 5670\n     * Returns a new object with the keys of the given object as values, and the                                       // 5671\n     * values of the given object, which are coerced to strings, as keys. Note                                         // 5672\n     * that the last key found is preferred when handling the same value.                                              // 5673\n     *                                                                                                                 // 5674\n     * @func                                                                                                           // 5675\n     * @memberOf R                                                                                                     // 5676\n     * @since v0.9.0                                                                                                   // 5677\n     * @category Object                                                                                                // 5678\n     * @sig {s: x} -> {x: s}                                                                                           // 5679\n     * @param {Object} obj The object or array to invert                                                               // 5680\n     * @return {Object} out A new object                                                                               // 5681\n     * @example                                                                                                        // 5682\n     *                                                                                                                 // 5683\n     *      var raceResults = {                                                                                        // 5684\n     *        first: 'alice',                                                                                          // 5685\n     *        second: 'jake'                                                                                           // 5686\n     *      };                                                                                                         // 5687\n     *      R.invertObj(raceResults);                                                                                  // 5688\n     *      //=> { 'alice': 'first', 'jake':'second' }                                                                 // 5689\n     *                                                                                                                 // 5690\n     *      // Alternatively:                                                                                          // 5691\n     *      var raceResults = ['alice', 'jake'];                                                                       // 5692\n     *      R.invertObj(raceResults);                                                                                  // 5693\n     *      //=> { 'alice': '0', 'jake':'1' }                                                                          // 5694\n     */                                                                                                                // 5695\n    var invertObj = _curry1(function invertObj(obj) {                                                                  // 5696\n        var props = keys(obj);                                                                                         // 5697\n        var len = props.length;                                                                                        // 5698\n        var idx = 0;                                                                                                   // 5699\n        var out = {};                                                                                                  // 5700\n        while (idx < len) {                                                                                            // 5701\n            var key = props[idx];                                                                                      // 5702\n            out[obj[key]] = key;                                                                                       // 5703\n            idx += 1;                                                                                                  // 5704\n        }                                                                                                              // 5705\n        return out;                                                                                                    // 5706\n    });                                                                                                                // 5707\n                                                                                                                       // 5708\n    /**                                                                                                                // 5709\n     * Returns `true` if the given value is its type's empty value; `false`                                            // 5710\n     * otherwise.                                                                                                      // 5711\n     *                                                                                                                 // 5712\n     * @func                                                                                                           // 5713\n     * @memberOf R                                                                                                     // 5714\n     * @since v0.1.0                                                                                                   // 5715\n     * @category Logic                                                                                                 // 5716\n     * @sig a -> Boolean                                                                                               // 5717\n     * @param {*} x                                                                                                    // 5718\n     * @return {Boolean}                                                                                               // 5719\n     * @see R.empty                                                                                                    // 5720\n     * @example                                                                                                        // 5721\n     *                                                                                                                 // 5722\n     *      R.isEmpty([1, 2, 3]);   //=> false                                                                         // 5723\n     *      R.isEmpty([]);          //=> true                                                                          // 5724\n     *      R.isEmpty('');          //=> true                                                                          // 5725\n     *      R.isEmpty(null);        //=> false                                                                         // 5726\n     *      R.isEmpty({});          //=> true                                                                          // 5727\n     *      R.isEmpty({length: 0}); //=> false                                                                         // 5728\n     */                                                                                                                // 5729\n    var isEmpty = _curry1(function isEmpty(x) {                                                                        // 5730\n        return x != null && equals(x, empty(x));                                                                       // 5731\n    });                                                                                                                // 5732\n                                                                                                                       // 5733\n    /**                                                                                                                // 5734\n     * Returns the last element of the given list or string.                                                           // 5735\n     *                                                                                                                 // 5736\n     * @func                                                                                                           // 5737\n     * @memberOf R                                                                                                     // 5738\n     * @since v0.1.4                                                                                                   // 5739\n     * @category List                                                                                                  // 5740\n     * @sig [a] -> a | Undefined                                                                                       // 5741\n     * @sig String -> String                                                                                           // 5742\n     * @param {*} list                                                                                                 // 5743\n     * @return {*}                                                                                                     // 5744\n     * @see R.init, R.head, R.tail                                                                                     // 5745\n     * @example                                                                                                        // 5746\n     *                                                                                                                 // 5747\n     *      R.last(['fi', 'fo', 'fum']); //=> 'fum'                                                                    // 5748\n     *      R.last([]); //=> undefined                                                                                 // 5749\n     *                                                                                                                 // 5750\n     *      R.last('abc'); //=> 'c'                                                                                    // 5751\n     *      R.last(''); //=> ''                                                                                        // 5752\n     */                                                                                                                // 5753\n    var last = nth(-1);                                                                                                // 5754\n                                                                                                                       // 5755\n    /**                                                                                                                // 5756\n     * Returns the position of the last occurrence of an item in an array, or -1 if                                    // 5757\n     * the item is not included in the array. `R.equals` is used to determine                                          // 5758\n     * equality.                                                                                                       // 5759\n     *                                                                                                                 // 5760\n     * @func                                                                                                           // 5761\n     * @memberOf R                                                                                                     // 5762\n     * @since v0.1.0                                                                                                   // 5763\n     * @category List                                                                                                  // 5764\n     * @sig a -> [a] -> Number                                                                                         // 5765\n     * @param {*} target The item to find.                                                                             // 5766\n     * @param {Array} xs The array to search in.                                                                       // 5767\n     * @return {Number} the index of the target, or -1 if the target is not found.                                     // 5768\n     * @see R.indexOf                                                                                                  // 5769\n     * @example                                                                                                        // 5770\n     *                                                                                                                 // 5771\n     *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6                                                               // 5772\n     *      R.lastIndexOf(10, [1,2,3,4]); //=> -1                                                                      // 5773\n     */                                                                                                                // 5774\n    var lastIndexOf = _curry2(function lastIndexOf(target, xs) {                                                       // 5775\n        if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {                                                   // 5776\n            return xs.lastIndexOf(target);                                                                             // 5777\n        } else {                                                                                                       // 5778\n            var idx = xs.length - 1;                                                                                   // 5779\n            while (idx >= 0) {                                                                                         // 5780\n                if (equals(xs[idx], target)) {                                                                         // 5781\n                    return idx;                                                                                        // 5782\n                }                                                                                                      // 5783\n                idx -= 1;                                                                                              // 5784\n            }                                                                                                          // 5785\n            return -1;                                                                                                 // 5786\n        }                                                                                                              // 5787\n    });                                                                                                                // 5788\n                                                                                                                       // 5789\n    /**                                                                                                                // 5790\n     * Takes a function and                                                                                            // 5791\n     * a [functor](https://github.com/fantasyland/fantasy-land#functor),                                               // 5792\n     * applies the function to each of the functor's values, and returns                                               // 5793\n     * a functor of the same shape.                                                                                    // 5794\n     *                                                                                                                 // 5795\n     * Ramda provides suitable `map` implementations for `Array` and `Object`,                                         // 5796\n     * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.                                         // 5797\n     *                                                                                                                 // 5798\n     * Dispatches to the `map` method of the second argument, if present.                                              // 5799\n     *                                                                                                                 // 5800\n     * Acts as a transducer if a transformer is given in list position.                                                // 5801\n     *                                                                                                                 // 5802\n     * Also treats functions as functors and will compose them together.                                               // 5803\n     *                                                                                                                 // 5804\n     * @func                                                                                                           // 5805\n     * @memberOf R                                                                                                     // 5806\n     * @since v0.1.0                                                                                                   // 5807\n     * @category List                                                                                                  // 5808\n     * @sig Functor f => (a -> b) -> f a -> f b                                                                        // 5809\n     * @param {Function} fn The function to be called on every element of the input `list`.                            // 5810\n     * @param {Array} list The list to be iterated over.                                                               // 5811\n     * @return {Array} The new list.                                                                                   // 5812\n     * @see R.transduce, R.addIndex                                                                                    // 5813\n     * @example                                                                                                        // 5814\n     *                                                                                                                 // 5815\n     *      var double = x => x * 2;                                                                                   // 5816\n     *                                                                                                                 // 5817\n     *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]                                                                   // 5818\n     *                                                                                                                 // 5819\n     *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}                                                 // 5820\n     */                                                                                                                // 5821\n    var map = _curry2(_dispatchable('map', _xmap, function map(fn, functor) {                                          // 5822\n        switch (Object.prototype.toString.call(functor)) {                                                             // 5823\n        case '[object Function]':                                                                                      // 5824\n            return curryN(functor.length, function () {                                                                // 5825\n                return fn.call(this, functor.apply(this, arguments));                                                  // 5826\n            });                                                                                                        // 5827\n        case '[object Object]':                                                                                        // 5828\n            return _reduce(function (acc, key) {                                                                       // 5829\n                acc[key] = fn(functor[key]);                                                                           // 5830\n                return acc;                                                                                            // 5831\n            }, {}, keys(functor));                                                                                     // 5832\n        default:                                                                                                       // 5833\n            return _map(fn, functor);                                                                                  // 5834\n        }                                                                                                              // 5835\n    }));                                                                                                               // 5836\n                                                                                                                       // 5837\n    /**                                                                                                                // 5838\n     * An Object-specific version of `map`. The function is applied to three                                           // 5839\n     * arguments: *(value, key, obj)*. If only the value is significant, use                                           // 5840\n     * `map` instead.                                                                                                  // 5841\n     *                                                                                                                 // 5842\n     * @func                                                                                                           // 5843\n     * @memberOf R                                                                                                     // 5844\n     * @since v0.9.0                                                                                                   // 5845\n     * @category Object                                                                                                // 5846\n     * @sig ((*, String, Object) -> *) -> Object -> Object                                                             // 5847\n     * @param {Function} fn                                                                                            // 5848\n     * @param {Object} obj                                                                                             // 5849\n     * @return {Object}                                                                                                // 5850\n     * @see R.map                                                                                                      // 5851\n     * @example                                                                                                        // 5852\n     *                                                                                                                 // 5853\n     *      var values = { x: 1, y: 2, z: 3 };                                                                         // 5854\n     *      var prependKeyAndDouble = (num, key, obj) => key + (num * 2);                                              // 5855\n     *                                                                                                                 // 5856\n     *      R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }                           // 5857\n     */                                                                                                                // 5858\n    var mapObjIndexed = _curry2(function mapObjIndexed(fn, obj) {                                                      // 5859\n        return _reduce(function (acc, key) {                                                                           // 5860\n            acc[key] = fn(obj[key], key, obj);                                                                         // 5861\n            return acc;                                                                                                // 5862\n        }, {}, keys(obj));                                                                                             // 5863\n    });                                                                                                                // 5864\n                                                                                                                       // 5865\n    /**                                                                                                                // 5866\n     * Creates a new object with the own properties of the two provided objects. If                                    // 5867\n     * a key exists in both objects, the provided function is applied to the values                                    // 5868\n     * associated with the key in each object, with the result being used as the                                       // 5869\n     * value associated with the key in the returned object. The key will be                                           // 5870\n     * excluded from the returned object if the resulting value is `undefined`.                                        // 5871\n     *                                                                                                                 // 5872\n     * @func                                                                                                           // 5873\n     * @memberOf R                                                                                                     // 5874\n     * @since 0.19.0                                                                                                   // 5875\n     * @category Object                                                                                                // 5876\n     * @sig (a -> a -> a) -> {a} -> {a} -> {a}                                                                         // 5877\n     * @param {Function} fn                                                                                            // 5878\n     * @param {Object} l                                                                                               // 5879\n     * @param {Object} r                                                                                               // 5880\n     * @return {Object}                                                                                                // 5881\n     * @see R.merge, R.mergeWithKey                                                                                    // 5882\n     * @example                                                                                                        // 5883\n     *                                                                                                                 // 5884\n     *      R.mergeWith(R.concat,                                                                                      // 5885\n     *                  { a: true, values: [10, 20] },                                                                 // 5886\n     *                  { b: true, values: [15, 35] });                                                                // 5887\n     *      //=> { a: true, b: true, values: [10, 20, 15, 35] }                                                        // 5888\n     */                                                                                                                // 5889\n    var mergeWith = _curry3(function mergeWith(fn, l, r) {                                                             // 5890\n        return mergeWithKey(function (_, _l, _r) {                                                                     // 5891\n            return fn(_l, _r);                                                                                         // 5892\n        }, l, r);                                                                                                      // 5893\n    });                                                                                                                // 5894\n                                                                                                                       // 5895\n    /**                                                                                                                // 5896\n     * Takes a function `f` and a list of arguments, and returns a function `g`.                                       // 5897\n     * When applied, `g` returns the result of applying `f` to the arguments                                           // 5898\n     * provided initially followed by the arguments provided to `g`.                                                   // 5899\n     *                                                                                                                 // 5900\n     * @func                                                                                                           // 5901\n     * @memberOf R                                                                                                     // 5902\n     * @since v0.10.0                                                                                                  // 5903\n     * @category Function                                                                                              // 5904\n     * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)                                     // 5905\n     * @param {Function} f                                                                                             // 5906\n     * @param {Array} args                                                                                             // 5907\n     * @return {Function}                                                                                              // 5908\n     * @see R.partialRight                                                                                             // 5909\n     * @example                                                                                                        // 5910\n     *                                                                                                                 // 5911\n     *      var multiply = (a, b) => a * b;                                                                            // 5912\n     *      var double = R.partial(multiply, [2]);                                                                     // 5913\n     *      double(2); //=> 4                                                                                          // 5914\n     *                                                                                                                 // 5915\n     *      var greet = (salutation, title, firstName, lastName) =>                                                    // 5916\n     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';                                      // 5917\n     *                                                                                                                 // 5918\n     *      var sayHello = R.partial(greet, ['Hello']);                                                                // 5919\n     *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);                                                           // 5920\n     *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'                                               // 5921\n     */                                                                                                                // 5922\n    var partial = _createPartialApplicator(_concat);                                                                   // 5923\n                                                                                                                       // 5924\n    /**                                                                                                                // 5925\n     * Takes a function `f` and a list of arguments, and returns a function `g`.                                       // 5926\n     * When applied, `g` returns the result of applying `f` to the arguments                                           // 5927\n     * provided to `g` followed by the arguments provided initially.                                                   // 5928\n     *                                                                                                                 // 5929\n     * @func                                                                                                           // 5930\n     * @memberOf R                                                                                                     // 5931\n     * @since v0.10.0                                                                                                  // 5932\n     * @category Function                                                                                              // 5933\n     * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)                                     // 5934\n     * @param {Function} f                                                                                             // 5935\n     * @param {Array} args                                                                                             // 5936\n     * @return {Function}                                                                                              // 5937\n     * @see R.partial                                                                                                  // 5938\n     * @example                                                                                                        // 5939\n     *                                                                                                                 // 5940\n     *      var greet = (salutation, title, firstName, lastName) =>                                                    // 5941\n     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';                                      // 5942\n     *                                                                                                                 // 5943\n     *      var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);                                    // 5944\n     *                                                                                                                 // 5945\n     *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'                                                   // 5946\n     */                                                                                                                // 5947\n    var partialRight = _createPartialApplicator(flip(_concat));                                                        // 5948\n                                                                                                                       // 5949\n    /**                                                                                                                // 5950\n     * Takes a predicate and a list and returns the pair of lists of elements which                                    // 5951\n     * do and do not satisfy the predicate, respectively.                                                              // 5952\n     *                                                                                                                 // 5953\n     * @func                                                                                                           // 5954\n     * @memberOf R                                                                                                     // 5955\n     * @since v0.1.4                                                                                                   // 5956\n     * @category List                                                                                                  // 5957\n     * @sig (a -> Boolean) -> [a] -> [[a],[a]]                                                                         // 5958\n     * @param {Function} pred A predicate to determine which array the element belongs to.                             // 5959\n     * @param {Array} list The array to partition.                                                                     // 5960\n     * @return {Array} A nested array, containing first an array of elements that satisfied the predicate,             // 5961\n     *         and second an array of elements that did not satisfy.                                                   // 5962\n     * @see R.filter, R.reject                                                                                         // 5963\n     * @example                                                                                                        // 5964\n     *                                                                                                                 // 5965\n     *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);                                               // 5966\n     *      //=> [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]                                                              // 5967\n     */                                                                                                                // 5968\n    var partition = _curry2(function partition(pred, list) {                                                           // 5969\n        return _reduce(function (acc, elt) {                                                                           // 5970\n            var xs = acc[pred(elt) ? 0 : 1];                                                                           // 5971\n            xs[xs.length] = elt;                                                                                       // 5972\n            return acc;                                                                                                // 5973\n        }, [                                                                                                           // 5974\n            [],                                                                                                        // 5975\n            []                                                                                                         // 5976\n        ], list);                                                                                                      // 5977\n    });                                                                                                                // 5978\n                                                                                                                       // 5979\n    /**                                                                                                                // 5980\n     * Determines whether a nested path on an object has a specific value, in                                          // 5981\n     * `R.equals` terms. Most likely used to filter a list.                                                            // 5982\n     *                                                                                                                 // 5983\n     * @func                                                                                                           // 5984\n     * @memberOf R                                                                                                     // 5985\n     * @since v0.7.0                                                                                                   // 5986\n     * @category Relation                                                                                              // 5987\n     * @sig [String] -> * -> {String: *} -> Boolean                                                                    // 5988\n     * @param {Array} path The path of the nested property to use                                                      // 5989\n     * @param {*} val The value to compare the nested property with                                                    // 5990\n     * @param {Object} obj The object to check the nested property in                                                  // 5991\n     * @return {Boolean} `true` if the value equals the nested object property,                                        // 5992\n     *         `false` otherwise.                                                                                      // 5993\n     * @example                                                                                                        // 5994\n     *                                                                                                                 // 5995\n     *      var user1 = { address: { zipCode: 90210 } };                                                               // 5996\n     *      var user2 = { address: { zipCode: 55555 } };                                                               // 5997\n     *      var user3 = { name: 'Bob' };                                                                               // 5998\n     *      var users = [ user1, user2, user3 ];                                                                       // 5999\n     *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);                                                    // 6000\n     *      R.filter(isFamous, users); //=> [ user1 ]                                                                  // 6001\n     */                                                                                                                // 6002\n    var pathEq = _curry3(function pathEq(_path, val, obj) {                                                            // 6003\n        return equals(path(_path, obj), val);                                                                          // 6004\n    });                                                                                                                // 6005\n                                                                                                                       // 6006\n    /**                                                                                                                // 6007\n     * Returns a new list by plucking the same named property off all objects in                                       // 6008\n     * the list supplied.                                                                                              // 6009\n     *                                                                                                                 // 6010\n     * @func                                                                                                           // 6011\n     * @memberOf R                                                                                                     // 6012\n     * @since v0.1.0                                                                                                   // 6013\n     * @category List                                                                                                  // 6014\n     * @sig k -> [{k: v}] -> [v]                                                                                       // 6015\n     * @param {Number|String} key The key name to pluck off of each object.                                            // 6016\n     * @param {Array} list The array to consider.                                                                      // 6017\n     * @return {Array} The list of values for the given key.                                                           // 6018\n     * @see R.props                                                                                                    // 6019\n     * @example                                                                                                        // 6020\n     *                                                                                                                 // 6021\n     *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]                                                                // 6022\n     *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]                                                                // 6023\n     */                                                                                                                // 6024\n    var pluck = _curry2(function pluck(p, list) {                                                                      // 6025\n        return map(prop(p), list);                                                                                     // 6026\n    });                                                                                                                // 6027\n                                                                                                                       // 6028\n    /**                                                                                                                // 6029\n     * Reasonable analog to SQL `select` statement.                                                                    // 6030\n     *                                                                                                                 // 6031\n     * @func                                                                                                           // 6032\n     * @memberOf R                                                                                                     // 6033\n     * @since v0.1.0                                                                                                   // 6034\n     * @category Object                                                                                                // 6035\n     * @category Relation                                                                                              // 6036\n     * @sig [k] -> [{k: v}] -> [{k: v}]                                                                                // 6037\n     * @param {Array} props The property names to project                                                              // 6038\n     * @param {Array} objs The objects to query                                                                        // 6039\n     * @return {Array} An array of objects with just the `props` properties.                                           // 6040\n     * @example                                                                                                        // 6041\n     *                                                                                                                 // 6042\n     *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};                                                // 6043\n     *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};                                               // 6044\n     *      var kids = [abby, fred];                                                                                   // 6045\n     *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]              // 6046\n     */                                                                                                                // 6047\n    // passing `identity` gives correct arity                                                                          // 6048\n    var project = useWith(_map, [                                                                                      // 6049\n        pickAll,                                                                                                       // 6050\n        identity                                                                                                       // 6051\n    ]);                                                                                                                // 6052\n                                                                                                                       // 6053\n    /**                                                                                                                // 6054\n     * Returns `true` if the specified object property is equal, in `R.equals`                                         // 6055\n     * terms, to the given value; `false` otherwise.                                                                   // 6056\n     *                                                                                                                 // 6057\n     * @func                                                                                                           // 6058\n     * @memberOf R                                                                                                     // 6059\n     * @since v0.1.0                                                                                                   // 6060\n     * @category Relation                                                                                              // 6061\n     * @sig String -> a -> Object -> Boolean                                                                           // 6062\n     * @param {String} name                                                                                            // 6063\n     * @param {*} val                                                                                                  // 6064\n     * @param {*} obj                                                                                                  // 6065\n     * @return {Boolean}                                                                                               // 6066\n     * @see R.equals, R.propSatisfies                                                                                  // 6067\n     * @example                                                                                                        // 6068\n     *                                                                                                                 // 6069\n     *      var abby = {name: 'Abby', age: 7, hair: 'blond'};                                                          // 6070\n     *      var fred = {name: 'Fred', age: 12, hair: 'brown'};                                                         // 6071\n     *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};                                                       // 6072\n     *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};                                                // 6073\n     *      var kids = [abby, fred, rusty, alois];                                                                     // 6074\n     *      var hasBrownHair = R.propEq('hair', 'brown');                                                              // 6075\n     *      R.filter(hasBrownHair, kids); //=> [fred, rusty]                                                           // 6076\n     */                                                                                                                // 6077\n    var propEq = _curry3(function propEq(name, val, obj) {                                                             // 6078\n        return propSatisfies(equals(val), name, obj);                                                                  // 6079\n    });                                                                                                                // 6080\n                                                                                                                       // 6081\n    /**                                                                                                                // 6082\n     * Returns `true` if the specified object property is of the given type;                                           // 6083\n     * `false` otherwise.                                                                                              // 6084\n     *                                                                                                                 // 6085\n     * @func                                                                                                           // 6086\n     * @memberOf R                                                                                                     // 6087\n     * @since v0.16.0                                                                                                  // 6088\n     * @category Type                                                                                                  // 6089\n     * @sig Type -> String -> Object -> Boolean                                                                        // 6090\n     * @param {Function} type                                                                                          // 6091\n     * @param {String} name                                                                                            // 6092\n     * @param {*} obj                                                                                                  // 6093\n     * @return {Boolean}                                                                                               // 6094\n     * @see R.is, R.propSatisfies                                                                                      // 6095\n     * @example                                                                                                        // 6096\n     *                                                                                                                 // 6097\n     *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true                                                            // 6098\n     *      R.propIs(Number, 'x', {x: 'foo'});    //=> false                                                           // 6099\n     *      R.propIs(Number, 'x', {});            //=> false                                                           // 6100\n     */                                                                                                                // 6101\n    var propIs = _curry3(function propIs(type, name, obj) {                                                            // 6102\n        return propSatisfies(is(type), name, obj);                                                                     // 6103\n    });                                                                                                                // 6104\n                                                                                                                       // 6105\n    /**                                                                                                                // 6106\n     * Returns a single item by iterating through the list, successively calling                                       // 6107\n     * the iterator function and passing it an accumulator value and the current                                       // 6108\n     * value from the array, and then passing the result to the next call.                                             // 6109\n     *                                                                                                                 // 6110\n     * The iterator function receives two values: *(acc, value)*. It may use                                           // 6111\n     * `R.reduced` to shortcut the iteration.                                                                          // 6112\n     *                                                                                                                 // 6113\n     * Note: `R.reduce` does not skip deleted or unassigned indices (sparse                                            // 6114\n     * arrays), unlike the native `Array.prototype.reduce` method. For more details                                    // 6115\n     * on this behavior, see:                                                                                          // 6116\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description       // 6117\n     *                                                                                                                 // 6118\n     * Dispatches to the `reduce` method of the third argument, if present.                                            // 6119\n     *                                                                                                                 // 6120\n     * @func                                                                                                           // 6121\n     * @memberOf R                                                                                                     // 6122\n     * @since v0.1.0                                                                                                   // 6123\n     * @category List                                                                                                  // 6124\n     * @sig ((a, b) -> a) -> a -> [b] -> a                                                                             // 6125\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the                        // 6126\n     *        current element from the array.                                                                          // 6127\n     * @param {*} acc The accumulator value.                                                                           // 6128\n     * @param {Array} list The list to iterate over.                                                                   // 6129\n     * @return {*} The final, accumulated value.                                                                       // 6130\n     * @see R.reduced, R.addIndex                                                                                      // 6131\n     * @example                                                                                                        // 6132\n     *                                                                                                                 // 6133\n     *      var numbers = [1, 2, 3];                                                                                   // 6134\n     *      var add = (a, b) => a + b;                                                                                 // 6135\n     *                                                                                                                 // 6136\n     *      R.reduce(add, 10, numbers); //=> 16                                                                        // 6137\n     */                                                                                                                // 6138\n    var reduce = _curry3(_reduce);                                                                                     // 6139\n                                                                                                                       // 6140\n    /**                                                                                                                // 6141\n     * The complement of `filter`.                                                                                     // 6142\n     *                                                                                                                 // 6143\n     * Acts as a transducer if a transformer is given in list position.                                                // 6144\n     *                                                                                                                 // 6145\n     * @func                                                                                                           // 6146\n     * @memberOf R                                                                                                     // 6147\n     * @since v0.1.0                                                                                                   // 6148\n     * @category List                                                                                                  // 6149\n     * @sig Filterable f => (a -> Boolean) -> f a -> f a                                                               // 6150\n     * @param {Function} pred                                                                                          // 6151\n     * @param {Array} filterable                                                                                       // 6152\n     * @return {Array}                                                                                                 // 6153\n     * @see R.filter, R.transduce, R.addIndex                                                                          // 6154\n     * @example                                                                                                        // 6155\n     *                                                                                                                 // 6156\n     *      var isOdd = (n) => n % 2 === 1;                                                                            // 6157\n     *                                                                                                                 // 6158\n     *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]                                                                 // 6159\n     *                                                                                                                 // 6160\n     *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}                                               // 6161\n     */                                                                                                                // 6162\n    var reject = _curry2(function reject(pred, filterable) {                                                           // 6163\n        return filter(_complement(pred), filterable);                                                                  // 6164\n    });                                                                                                                // 6165\n                                                                                                                       // 6166\n    /**                                                                                                                // 6167\n     * Returns a fixed list of size `n` containing a specified identical value.                                        // 6168\n     *                                                                                                                 // 6169\n     * @func                                                                                                           // 6170\n     * @memberOf R                                                                                                     // 6171\n     * @since v0.1.1                                                                                                   // 6172\n     * @category List                                                                                                  // 6173\n     * @sig a -> n -> [a]                                                                                              // 6174\n     * @param {*} value The value to repeat.                                                                           // 6175\n     * @param {Number} n The desired size of the output list.                                                          // 6176\n     * @return {Array} A new array containing `n` `value`s.                                                            // 6177\n     * @example                                                                                                        // 6178\n     *                                                                                                                 // 6179\n     *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']                                                     // 6180\n     *                                                                                                                 // 6181\n     *      var obj = {};                                                                                              // 6182\n     *      var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]                                             // 6183\n     *      repeatedObjs[0] === repeatedObjs[1]; //=> true                                                             // 6184\n     */                                                                                                                // 6185\n    var repeat = _curry2(function repeat(value, n) {                                                                   // 6186\n        return times(always(value), n);                                                                                // 6187\n    });                                                                                                                // 6188\n                                                                                                                       // 6189\n    /**                                                                                                                // 6190\n     * Adds together all the elements of a list.                                                                       // 6191\n     *                                                                                                                 // 6192\n     * @func                                                                                                           // 6193\n     * @memberOf R                                                                                                     // 6194\n     * @since v0.1.0                                                                                                   // 6195\n     * @category Math                                                                                                  // 6196\n     * @sig [Number] -> Number                                                                                         // 6197\n     * @param {Array} list An array of numbers                                                                         // 6198\n     * @return {Number} The sum of all the numbers in the list.                                                        // 6199\n     * @see R.reduce                                                                                                   // 6200\n     * @example                                                                                                        // 6201\n     *                                                                                                                 // 6202\n     *      R.sum([2,4,6,8,100,1]); //=> 121                                                                           // 6203\n     */                                                                                                                // 6204\n    var sum = reduce(add, 0);                                                                                          // 6205\n                                                                                                                       // 6206\n    /**                                                                                                                // 6207\n     * Returns a new list containing the last `n` elements of the given list.                                          // 6208\n     * If `n > list.length`, returns a list of `list.length` elements.                                                 // 6209\n     *                                                                                                                 // 6210\n     * @func                                                                                                           // 6211\n     * @memberOf R                                                                                                     // 6212\n     * @since v0.16.0                                                                                                  // 6213\n     * @category List                                                                                                  // 6214\n     * @sig Number -> [a] -> [a]                                                                                       // 6215\n     * @sig Number -> String -> String                                                                                 // 6216\n     * @param {Number} n The number of elements to return.                                                             // 6217\n     * @param {Array} xs The collection to consider.                                                                   // 6218\n     * @return {Array}                                                                                                 // 6219\n     * @see R.dropLast                                                                                                 // 6220\n     * @example                                                                                                        // 6221\n     *                                                                                                                 // 6222\n     *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']                                                         // 6223\n     *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']                                                  // 6224\n     *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']                                           // 6225\n     *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']                                           // 6226\n     *      R.takeLast(3, 'ramda');               //=> 'mda'                                                           // 6227\n     */                                                                                                                // 6228\n    var takeLast = _curry2(function takeLast(n, xs) {                                                                  // 6229\n        return drop(n >= 0 ? xs.length - n : 0, xs);                                                                   // 6230\n    });                                                                                                                // 6231\n                                                                                                                       // 6232\n    /**                                                                                                                // 6233\n     * Initializes a transducer using supplied iterator function. Returns a single                                     // 6234\n     * item by iterating through the list, successively calling the transformed                                        // 6235\n     * iterator function and passing it an accumulator value and the current value                                     // 6236\n     * from the array, and then passing the result to the next call.                                                   // 6237\n     *                                                                                                                 // 6238\n     * The iterator function receives two values: *(acc, value)*. It will be                                           // 6239\n     * wrapped as a transformer to initialize the transducer. A transformer can be                                     // 6240\n     * passed directly in place of an iterator function. In both cases, iteration                                      // 6241\n     * may be stopped early with the `R.reduced` function.                                                             // 6242\n     *                                                                                                                 // 6243\n     * A transducer is a function that accepts a transformer and returns a                                             // 6244\n     * transformer and can be composed directly.                                                                       // 6245\n     *                                                                                                                 // 6246\n     * A transformer is an an object that provides a 2-arity reducing iterator                                         // 6247\n     * function, step, 0-arity initial value function, init, and 1-arity result                                        // 6248\n     * extraction function, result. The step function is used as the iterator                                          // 6249\n     * function in reduce. The result function is used to convert the final                                            // 6250\n     * accumulator into the return type and in most cases is R.identity. The init                                      // 6251\n     * function can be used to provide an initial accumulator, but is ignored by                                       // 6252\n     * transduce.                                                                                                      // 6253\n     *                                                                                                                 // 6254\n     * The iteration is performed with R.reduce after initializing the transducer.                                     // 6255\n     *                                                                                                                 // 6256\n     * @func                                                                                                           // 6257\n     * @memberOf R                                                                                                     // 6258\n     * @since v0.12.0                                                                                                  // 6259\n     * @category List                                                                                                  // 6260\n     * @sig (c -> c) -> (a,b -> a) -> a -> [b] -> a                                                                    // 6261\n     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.                 // 6262\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the                        // 6263\n     *        current element from the array. Wrapped as transformer, if necessary, and used to                        // 6264\n     *        initialize the transducer                                                                                // 6265\n     * @param {*} acc The initial accumulator value.                                                                   // 6266\n     * @param {Array} list The list to iterate over.                                                                   // 6267\n     * @return {*} The final, accumulated value.                                                                       // 6268\n     * @see R.reduce, R.reduced, R.into                                                                                // 6269\n     * @example                                                                                                        // 6270\n     *                                                                                                                 // 6271\n     *      var numbers = [1, 2, 3, 4];                                                                                // 6272\n     *      var transducer = R.compose(R.map(R.add(1)), R.take(2));                                                    // 6273\n     *                                                                                                                 // 6274\n     *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]                                        // 6275\n     */                                                                                                                // 6276\n    var transduce = curryN(4, function transduce(xf, fn, acc, list) {                                                  // 6277\n        return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);                                     // 6278\n    });                                                                                                                // 6279\n                                                                                                                       // 6280\n    /**                                                                                                                // 6281\n     * Combines two lists into a set (i.e. no duplicates) composed of the elements                                     // 6282\n     * of each list. Duplication is determined according to the value returned by                                      // 6283\n     * applying the supplied predicate to two list elements.                                                           // 6284\n     *                                                                                                                 // 6285\n     * @func                                                                                                           // 6286\n     * @memberOf R                                                                                                     // 6287\n     * @since v0.1.0                                                                                                   // 6288\n     * @category Relation                                                                                              // 6289\n     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]                                                                   // 6290\n     * @param {Function} pred A predicate used to test whether two items are equal.                                    // 6291\n     * @param {Array} list1 The first list.                                                                            // 6292\n     * @param {Array} list2 The second list.                                                                           // 6293\n     * @return {Array} The first and second lists concatenated, with                                                   // 6294\n     *         duplicates removed.                                                                                     // 6295\n     * @see R.union                                                                                                    // 6296\n     * @example                                                                                                        // 6297\n     *                                                                                                                 // 6298\n     *      var l1 = [{a: 1}, {a: 2}];                                                                                 // 6299\n     *      var l2 = [{a: 1}, {a: 4}];                                                                                 // 6300\n     *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]                                    // 6301\n     */                                                                                                                // 6302\n    var unionWith = _curry3(function unionWith(pred, list1, list2) {                                                   // 6303\n        return uniqWith(pred, _concat(list1, list2));                                                                  // 6304\n    });                                                                                                                // 6305\n                                                                                                                       // 6306\n    /**                                                                                                                // 6307\n     * Takes a spec object and a test object; returns true if the test satisfies                                       // 6308\n     * the spec, false otherwise. An object satisfies the spec if, for each of the                                     // 6309\n     * spec's own properties, accessing that property of the object gives the same                                     // 6310\n     * value (in `R.equals` terms) as accessing that property of the spec.                                             // 6311\n     *                                                                                                                 // 6312\n     * `whereEq` is a specialization of [`where`](#where).                                                             // 6313\n     *                                                                                                                 // 6314\n     * @func                                                                                                           // 6315\n     * @memberOf R                                                                                                     // 6316\n     * @since v0.14.0                                                                                                  // 6317\n     * @category Object                                                                                                // 6318\n     * @sig {String: *} -> {String: *} -> Boolean                                                                      // 6319\n     * @param {Object} spec                                                                                            // 6320\n     * @param {Object} testObj                                                                                         // 6321\n     * @return {Boolean}                                                                                               // 6322\n     * @see R.where                                                                                                    // 6323\n     * @example                                                                                                        // 6324\n     *                                                                                                                 // 6325\n     *      // pred :: Object -> Boolean                                                                               // 6326\n     *      var pred = R.whereEq({a: 1, b: 2});                                                                        // 6327\n     *                                                                                                                 // 6328\n     *      pred({a: 1});              //=> false                                                                      // 6329\n     *      pred({a: 1, b: 2});        //=> true                                                                       // 6330\n     *      pred({a: 1, b: 2, c: 3});  //=> true                                                                       // 6331\n     *      pred({a: 1, b: 1});        //=> false                                                                      // 6332\n     */                                                                                                                // 6333\n    var whereEq = _curry2(function whereEq(spec, testObj) {                                                            // 6334\n        return where(map(equals, spec), testObj);                                                                      // 6335\n    });                                                                                                                // 6336\n                                                                                                                       // 6337\n    var _flatCat = function () {                                                                                       // 6338\n        var preservingReduced = function (xf) {                                                                        // 6339\n            return {                                                                                                   // 6340\n                '@@transducer/init': _xfBase.init,                                                                     // 6341\n                '@@transducer/result': function (result) {                                                             // 6342\n                    return xf['@@transducer/result'](result);                                                          // 6343\n                },                                                                                                     // 6344\n                '@@transducer/step': function (result, input) {                                                        // 6345\n                    var ret = xf['@@transducer/step'](result, input);                                                  // 6346\n                    return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;                                     // 6347\n                }                                                                                                      // 6348\n            };                                                                                                         // 6349\n        };                                                                                                             // 6350\n        return function _xcat(xf) {                                                                                    // 6351\n            var rxf = preservingReduced(xf);                                                                           // 6352\n            return {                                                                                                   // 6353\n                '@@transducer/init': _xfBase.init,                                                                     // 6354\n                '@@transducer/result': function (result) {                                                             // 6355\n                    return rxf['@@transducer/result'](result);                                                         // 6356\n                },                                                                                                     // 6357\n                '@@transducer/step': function (result, input) {                                                        // 6358\n                    return !isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);          // 6359\n                }                                                                                                      // 6360\n            };                                                                                                         // 6361\n        };                                                                                                             // 6362\n    }();                                                                                                               // 6363\n                                                                                                                       // 6364\n    // Array.prototype.indexOf doesn't exist below IE9                                                                 // 6365\n    // manually crawl the list to distinguish between +0 and -0                                                        // 6366\n    // NaN                                                                                                             // 6367\n    // non-zero numbers can utilise Set                                                                                // 6368\n    // all these types can utilise Set                                                                                 // 6369\n    // null can utilise Set                                                                                            // 6370\n    // anything else not covered above, defer to R.equals                                                              // 6371\n    var _indexOf = function _indexOf(list, a, idx) {                                                                   // 6372\n        var inf, item;                                                                                                 // 6373\n        // Array.prototype.indexOf doesn't exist below IE9                                                             // 6374\n        if (typeof list.indexOf === 'function') {                                                                      // 6375\n            switch (typeof a) {                                                                                        // 6376\n            case 'number':                                                                                             // 6377\n                if (a === 0) {                                                                                         // 6378\n                    // manually crawl the list to distinguish between +0 and -0                                        // 6379\n                    inf = 1 / a;                                                                                       // 6380\n                    while (idx < list.length) {                                                                        // 6381\n                        item = list[idx];                                                                              // 6382\n                        if (item === 0 && 1 / item === inf) {                                                          // 6383\n                            return idx;                                                                                // 6384\n                        }                                                                                              // 6385\n                        idx += 1;                                                                                      // 6386\n                    }                                                                                                  // 6387\n                    return -1;                                                                                         // 6388\n                } else if (a !== a) {                                                                                  // 6389\n                    // NaN                                                                                             // 6390\n                    while (idx < list.length) {                                                                        // 6391\n                        item = list[idx];                                                                              // 6392\n                        if (typeof item === 'number' && item !== item) {                                               // 6393\n                            return idx;                                                                                // 6394\n                        }                                                                                              // 6395\n                        idx += 1;                                                                                      // 6396\n                    }                                                                                                  // 6397\n                    return -1;                                                                                         // 6398\n                }                                                                                                      // 6399\n                // non-zero numbers can utilise Set                                                                    // 6400\n                return list.indexOf(a, idx);                                                                           // 6401\n            // all these types can utilise Set                                                                         // 6402\n            case 'string':                                                                                             // 6403\n            case 'boolean':                                                                                            // 6404\n            case 'function':                                                                                           // 6405\n            case 'undefined':                                                                                          // 6406\n                return list.indexOf(a, idx);                                                                           // 6407\n            case 'object':                                                                                             // 6408\n                if (a === null) {                                                                                      // 6409\n                    // null can utilise Set                                                                            // 6410\n                    return list.indexOf(a, idx);                                                                       // 6411\n                }                                                                                                      // 6412\n            }                                                                                                          // 6413\n        }                                                                                                              // 6414\n        // anything else not covered above, defer to R.equals                                                          // 6415\n        while (idx < list.length) {                                                                                    // 6416\n            if (equals(list[idx], a)) {                                                                                // 6417\n                return idx;                                                                                            // 6418\n            }                                                                                                          // 6419\n            idx += 1;                                                                                                  // 6420\n        }                                                                                                              // 6421\n        return -1;                                                                                                     // 6422\n    };                                                                                                                 // 6423\n                                                                                                                       // 6424\n    var _xchain = _curry2(function _xchain(f, xf) {                                                                    // 6425\n        return map(f, _flatCat(xf));                                                                                   // 6426\n    });                                                                                                                // 6427\n                                                                                                                       // 6428\n    /**                                                                                                                // 6429\n     * Takes a list of predicates and returns a predicate that returns true for a                                      // 6430\n     * given list of arguments if every one of the provided predicates is satisfied                                    // 6431\n     * by those arguments.                                                                                             // 6432\n     *                                                                                                                 // 6433\n     * The function returned is a curried function whose arity matches that of the                                     // 6434\n     * highest-arity predicate.                                                                                        // 6435\n     *                                                                                                                 // 6436\n     * @func                                                                                                           // 6437\n     * @memberOf R                                                                                                     // 6438\n     * @since v0.9.0                                                                                                   // 6439\n     * @category Logic                                                                                                 // 6440\n     * @sig [(*... -> Boolean)] -> (*... -> Boolean)                                                                   // 6441\n     * @param {Array} preds                                                                                            // 6442\n     * @return {Function}                                                                                              // 6443\n     * @see R.anyPass                                                                                                  // 6444\n     * @example                                                                                                        // 6445\n     *                                                                                                                 // 6446\n     *      var isQueen = R.propEq('rank', 'Q');                                                                       // 6447\n     *      var isSpade = R.propEq('suit', '♠︎');                                                                      // 6448\n     *      var isQueenOfSpades = R.allPass([isQueen, isSpade]);                                                       // 6449\n     *                                                                                                                 // 6450\n     *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false                                                       // 6451\n     *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true                                                        // 6452\n     */                                                                                                                // 6453\n    var allPass = _curry1(function allPass(preds) {                                                                    // 6454\n        return curryN(reduce(max, 0, pluck('length', preds)), function () {                                            // 6455\n            var idx = 0;                                                                                               // 6456\n            var len = preds.length;                                                                                    // 6457\n            while (idx < len) {                                                                                        // 6458\n                if (!preds[idx].apply(this, arguments)) {                                                              // 6459\n                    return false;                                                                                      // 6460\n                }                                                                                                      // 6461\n                idx += 1;                                                                                              // 6462\n            }                                                                                                          // 6463\n            return true;                                                                                               // 6464\n        });                                                                                                            // 6465\n    });                                                                                                                // 6466\n                                                                                                                       // 6467\n    /**                                                                                                                // 6468\n     * Returns `true` if all elements are unique, in `R.equals` terms, otherwise                                       // 6469\n     * `false`.                                                                                                        // 6470\n     *                                                                                                                 // 6471\n     * @func                                                                                                           // 6472\n     * @memberOf R                                                                                                     // 6473\n     * @since v0.18.0                                                                                                  // 6474\n     * @category List                                                                                                  // 6475\n     * @sig [a] -> Boolean                                                                                             // 6476\n     * @param {Array} list The array to consider.                                                                      // 6477\n     * @return {Boolean} `true` if all elements are unique, else `false`.                                              // 6478\n     * @example                                                                                                        // 6479\n     *                                                                                                                 // 6480\n     *      R.allUniq(['1', 1]); //=> true                                                                             // 6481\n     *      R.allUniq([1, 1]);   //=> false                                                                            // 6482\n     *      R.allUniq([[42], [42]]); //=> false                                                                        // 6483\n     */                                                                                                                // 6484\n    var allUniq = _curry1(function allUniq(list) {                                                                     // 6485\n        var len = list.length;                                                                                         // 6486\n        var idx = 0;                                                                                                   // 6487\n        while (idx < len) {                                                                                            // 6488\n            if (_indexOf(list, list[idx], idx + 1) >= 0) {                                                             // 6489\n                return false;                                                                                          // 6490\n            }                                                                                                          // 6491\n            idx += 1;                                                                                                  // 6492\n        }                                                                                                              // 6493\n        return true;                                                                                                   // 6494\n    });                                                                                                                // 6495\n                                                                                                                       // 6496\n    /**                                                                                                                // 6497\n     * Takes a list of predicates and returns a predicate that returns true for a                                      // 6498\n     * given list of arguments if at least one of the provided predicates is                                           // 6499\n     * satisfied by those arguments.                                                                                   // 6500\n     *                                                                                                                 // 6501\n     * The function returned is a curried function whose arity matches that of the                                     // 6502\n     * highest-arity predicate.                                                                                        // 6503\n     *                                                                                                                 // 6504\n     * @func                                                                                                           // 6505\n     * @memberOf R                                                                                                     // 6506\n     * @since v0.9.0                                                                                                   // 6507\n     * @category Logic                                                                                                 // 6508\n     * @sig [(*... -> Boolean)] -> (*... -> Boolean)                                                                   // 6509\n     * @param {Array} preds                                                                                            // 6510\n     * @return {Function}                                                                                              // 6511\n     * @see R.allPass                                                                                                  // 6512\n     * @example                                                                                                        // 6513\n     *                                                                                                                 // 6514\n     *      var gte = R.anyPass([R.gt, R.equals]);                                                                     // 6515\n     *                                                                                                                 // 6516\n     *      gte(3, 2); //=> true                                                                                       // 6517\n     *      gte(2, 2); //=> true                                                                                       // 6518\n     *      gte(2, 3); //=> false                                                                                      // 6519\n     */                                                                                                                // 6520\n    var anyPass = _curry1(function anyPass(preds) {                                                                    // 6521\n        return curryN(reduce(max, 0, pluck('length', preds)), function () {                                            // 6522\n            var idx = 0;                                                                                               // 6523\n            var len = preds.length;                                                                                    // 6524\n            while (idx < len) {                                                                                        // 6525\n                if (preds[idx].apply(this, arguments)) {                                                               // 6526\n                    return true;                                                                                       // 6527\n                }                                                                                                      // 6528\n                idx += 1;                                                                                              // 6529\n            }                                                                                                          // 6530\n            return false;                                                                                              // 6531\n        });                                                                                                            // 6532\n    });                                                                                                                // 6533\n                                                                                                                       // 6534\n    /**                                                                                                                // 6535\n     * ap applies a list of functions to a list of values.                                                             // 6536\n     *                                                                                                                 // 6537\n     * Dispatches to the `ap` method of the second argument, if present. Also                                          // 6538\n     * treats functions as applicatives.                                                                               // 6539\n     *                                                                                                                 // 6540\n     * @func                                                                                                           // 6541\n     * @memberOf R                                                                                                     // 6542\n     * @since v0.3.0                                                                                                   // 6543\n     * @category Function                                                                                              // 6544\n     * @sig [f] -> [a] -> [f a]                                                                                        // 6545\n     * @param {Array} fns An array of functions                                                                        // 6546\n     * @param {Array} vs An array of values                                                                            // 6547\n     * @return {Array} An array of results of applying each of `fns` to all of `vs` in turn.                           // 6548\n     * @example                                                                                                        // 6549\n     *                                                                                                                 // 6550\n     *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]                                          // 6551\n     */                                                                                                                // 6552\n    // else                                                                                                            // 6553\n    var ap = _curry2(function ap(applicative, fn) {                                                                    // 6554\n        return typeof applicative.ap === 'function' ? applicative.ap(fn) : typeof applicative === 'function' ? curryN(Math.max(applicative.length, fn.length), function () {\n            return applicative.apply(this, arguments)(fn.apply(this, arguments));                                      // 6556\n        }) : // else                                                                                                   // 6557\n        _reduce(function (acc, f) {                                                                                    // 6558\n            return _concat(acc, map(f, fn));                                                                           // 6559\n        }, [], applicative);                                                                                           // 6560\n    });                                                                                                                // 6561\n                                                                                                                       // 6562\n    /**                                                                                                                // 6563\n     * Returns the result of calling its first argument with the remaining                                             // 6564\n     * arguments. This is occasionally useful as a converging function for                                             // 6565\n     * `R.converge`: the left branch can produce a function while the right branch                                     // 6566\n     * produces a value to be passed to that function as an argument.                                                  // 6567\n     *                                                                                                                 // 6568\n     * @func                                                                                                           // 6569\n     * @memberOf R                                                                                                     // 6570\n     * @since v0.9.0                                                                                                   // 6571\n     * @category Function                                                                                              // 6572\n     * @sig (*... -> a),*... -> a                                                                                      // 6573\n     * @param {Function} fn The function to apply to the remaining arguments.                                          // 6574\n     * @param {...*} args Any number of positional arguments.                                                          // 6575\n     * @return {*}                                                                                                     // 6576\n     * @see R.apply                                                                                                    // 6577\n     * @example                                                                                                        // 6578\n     *                                                                                                                 // 6579\n     *      var indentN = R.pipe(R.times(R.always(' ')),                                                               // 6580\n     *                           R.join(''),                                                                           // 6581\n     *                           R.replace(/^(?!$)/gm));                                                               // 6582\n     *                                                                                                                 // 6583\n     *      var format = R.converge(R.call, [                                                                          // 6584\n     *                                  R.pipe(R.prop('indent'), indentN),                                             // 6585\n     *                                  R.prop('value')                                                                // 6586\n     *                              ]);                                                                                // 6587\n     *                                                                                                                 // 6588\n     *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'                                // 6589\n     */                                                                                                                // 6590\n    var call = curry(function call(fn) {                                                                               // 6591\n        return fn.apply(this, _slice(arguments, 1));                                                                   // 6592\n    });                                                                                                                // 6593\n                                                                                                                       // 6594\n    /**                                                                                                                // 6595\n     * `chain` maps a function over a list and concatenates the results. `chain`                                       // 6596\n     * is also known as `flatMap` in some libraries                                                                    // 6597\n     *                                                                                                                 // 6598\n     * Dispatches to the `chain` method of the second argument, if present.                                            // 6599\n     *                                                                                                                 // 6600\n     * @func                                                                                                           // 6601\n     * @memberOf R                                                                                                     // 6602\n     * @since v0.3.0                                                                                                   // 6603\n     * @category List                                                                                                  // 6604\n     * @sig (a -> [b]) -> [a] -> [b]                                                                                   // 6605\n     * @param {Function} fn                                                                                            // 6606\n     * @param {Array} list                                                                                             // 6607\n     * @return {Array}                                                                                                 // 6608\n     * @example                                                                                                        // 6609\n     *                                                                                                                 // 6610\n     *      var duplicate = n => [n, n];                                                                               // 6611\n     *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]                                                     // 6612\n     */                                                                                                                // 6613\n    var chain = _curry2(_dispatchable('chain', _xchain, function chain(fn, monad) {                                    // 6614\n        if (typeof monad === 'function') {                                                                             // 6615\n            return function () {                                                                                       // 6616\n                return monad.call(this, fn.apply(this, arguments)).apply(this, arguments);                             // 6617\n            };                                                                                                         // 6618\n        }                                                                                                              // 6619\n        return _makeFlat(false)(map(fn, monad));                                                                       // 6620\n    }));                                                                                                               // 6621\n                                                                                                                       // 6622\n    /**                                                                                                                // 6623\n     * Turns a list of Functors into a Functor of a list, applying a mapping                                           // 6624\n     * function to the elements of the list along the way.                                                             // 6625\n     *                                                                                                                 // 6626\n     * @func                                                                                                           // 6627\n     * @memberOf R                                                                                                     // 6628\n     * @since v0.8.0                                                                                                   // 6629\n     * @category List                                                                                                  // 6630\n     * @sig Functor f => (a -> f b) -> (x -> f x) -> [a] -> f [b]                                                      // 6631\n     * @param {Function} fn The transformation function                                                                // 6632\n     * @param {Function} of A function that returns the data type to return                                            // 6633\n     * @param {Array} list An array of functors of the same type                                                       // 6634\n     * @return {*}                                                                                                     // 6635\n     * @see R.traverse                                                                                                 // 6636\n     * @deprecated since v0.19.0                                                                                       // 6637\n     * @example                                                                                                        // 6638\n     *                                                                                                                 // 6639\n     *      var add10 = R.map(R.add(10));                                                                              // 6640\n     *      R.commuteMap(add10, R.of, [[1], [2, 3]]);   //=> [[11, 12], [11, 13]]                                      // 6641\n     *      R.commuteMap(add10, R.of, [[1, 2], [3]]);   //=> [[11, 13], [12, 13]]                                      // 6642\n     *      R.commuteMap(add10, R.of, [[1], [2], [3]]); //=> [[11, 12, 13]]                                            // 6643\n     *      R.commuteMap(add10, Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([11, 12, 13])                      // 6644\n     *      R.commuteMap(add10, Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()                               // 6645\n     *                                                                                                                 // 6646\n     *      var fetch = url => Future((rej, res) => http.get(url, res).on('error', rej));                              // 6647\n     *      R.commuteMap(fetch, Future.of, [                                                                           // 6648\n     *        'http://ramdajs.com',                                                                                    // 6649\n     *        'http://github.com/ramda'                                                                                // 6650\n     *      ]); //=> Future([IncomingMessage, IncomingMessage])                                                        // 6651\n     */                                                                                                                // 6652\n    var commuteMap = _curry3(function commuteMap(fn, of, list) {                                                       // 6653\n        function consF(acc, x) {                                                                                       // 6654\n            return ap(map(prepend, fn(x)), acc);                                                                       // 6655\n        }                                                                                                              // 6656\n        return reduceRight(consF, of([]), list);                                                                       // 6657\n    });                                                                                                                // 6658\n                                                                                                                       // 6659\n    /**                                                                                                                // 6660\n     * Wraps a constructor function inside a curried function that can be called                                       // 6661\n     * with the same arguments and returns the same type. The arity of the function                                    // 6662\n     * returned is specified to allow using variadic constructor functions.                                            // 6663\n     *                                                                                                                 // 6664\n     * @func                                                                                                           // 6665\n     * @memberOf R                                                                                                     // 6666\n     * @since v0.4.0                                                                                                   // 6667\n     * @category Function                                                                                              // 6668\n     * @sig Number -> (* -> {*}) -> (* -> {*})                                                                         // 6669\n     * @param {Number} n The arity of the constructor function.                                                        // 6670\n     * @param {Function} Fn The constructor function to wrap.                                                          // 6671\n     * @return {Function} A wrapped, curried constructor function.                                                     // 6672\n     * @example                                                                                                        // 6673\n     *                                                                                                                 // 6674\n     *      // Variadic constructor function                                                                           // 6675\n     *      var Widget = () => {                                                                                       // 6676\n     *        this.children = Array.prototype.slice.call(arguments);                                                   // 6677\n     *        // ...                                                                                                   // 6678\n     *      };                                                                                                         // 6679\n     *      Widget.prototype = {                                                                                       // 6680\n     *        // ...                                                                                                   // 6681\n     *      };                                                                                                         // 6682\n     *      var allConfigs = [                                                                                         // 6683\n     *        // ...                                                                                                   // 6684\n     *      ];                                                                                                         // 6685\n     *      R.map(R.constructN(1, Widget), allConfigs); // a list of Widgets                                           // 6686\n     */                                                                                                                // 6687\n    var constructN = _curry2(function constructN(n, Fn) {                                                              // 6688\n        if (n > 10) {                                                                                                  // 6689\n            throw new Error('Constructor with greater than ten arguments');                                            // 6690\n        }                                                                                                              // 6691\n        if (n === 0) {                                                                                                 // 6692\n            return function () {                                                                                       // 6693\n                return new Fn();                                                                                       // 6694\n            };                                                                                                         // 6695\n        }                                                                                                              // 6696\n        return curry(nAry(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {                                       // 6697\n            switch (arguments.length) {                                                                                // 6698\n            case 1:                                                                                                    // 6699\n                return new Fn($0);                                                                                     // 6700\n            case 2:                                                                                                    // 6701\n                return new Fn($0, $1);                                                                                 // 6702\n            case 3:                                                                                                    // 6703\n                return new Fn($0, $1, $2);                                                                             // 6704\n            case 4:                                                                                                    // 6705\n                return new Fn($0, $1, $2, $3);                                                                         // 6706\n            case 5:                                                                                                    // 6707\n                return new Fn($0, $1, $2, $3, $4);                                                                     // 6708\n            case 6:                                                                                                    // 6709\n                return new Fn($0, $1, $2, $3, $4, $5);                                                                 // 6710\n            case 7:                                                                                                    // 6711\n                return new Fn($0, $1, $2, $3, $4, $5, $6);                                                             // 6712\n            case 8:                                                                                                    // 6713\n                return new Fn($0, $1, $2, $3, $4, $5, $6, $7);                                                         // 6714\n            case 9:                                                                                                    // 6715\n                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);                                                     // 6716\n            case 10:                                                                                                   // 6717\n                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);                                                 // 6718\n            }                                                                                                          // 6719\n        }));                                                                                                           // 6720\n    });                                                                                                                // 6721\n                                                                                                                       // 6722\n    /**                                                                                                                // 6723\n     * Accepts a converging function and a list of branching functions and returns                                     // 6724\n     * a new function. When invoked, this new function is applied to some                                              // 6725\n     * arguments, each branching function is applied to those same arguments. The                                      // 6726\n     * results of each branching function are passed as arguments to the converging                                    // 6727\n     * function to produce the return value.                                                                           // 6728\n     *                                                                                                                 // 6729\n     * @func                                                                                                           // 6730\n     * @memberOf R                                                                                                     // 6731\n     * @since v0.4.2                                                                                                   // 6732\n     * @category Function                                                                                              // 6733\n     * @sig (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)      // 6734\n     * @param {Function} after A function. `after` will be invoked with the return values of                           // 6735\n     *        `fn1` and `fn2` as its arguments.                                                                        // 6736\n     * @param {Array} functions A list of functions.                                                                   // 6737\n     * @return {Function} A new function.                                                                              // 6738\n     * @example                                                                                                        // 6739\n     *                                                                                                                 // 6740\n     *      var add = (a, b) => a + b;                                                                                 // 6741\n     *      var multiply = (a, b) => a * b;                                                                            // 6742\n     *      var subtract = (a, b) => a - b;                                                                            // 6743\n     *                                                                                                                 // 6744\n     *      //≅ multiply( add(1, 2), subtract(1, 2) );                                                                 // 6745\n     *      R.converge(multiply, [add, subtract])(1, 2); //=> -3                                                       // 6746\n     *                                                                                                                 // 6747\n     *      var add3 = (a, b, c) => a + b + c;                                                                         // 6748\n     *      R.converge(add3, [multiply, add, subtract])(1, 2); //=> 4                                                  // 6749\n     */                                                                                                                // 6750\n    var converge = _curry2(function converge(after, fns) {                                                             // 6751\n        return curryN(Math.max.apply(Math, pluck('length', fns)), function () {                                        // 6752\n            var args = arguments;                                                                                      // 6753\n            var context = this;                                                                                        // 6754\n            return after.apply(context, _map(function (fn) {                                                           // 6755\n                return fn.apply(context, args);                                                                        // 6756\n            }, fns));                                                                                                  // 6757\n        });                                                                                                            // 6758\n    });                                                                                                                // 6759\n                                                                                                                       // 6760\n    /**                                                                                                                // 6761\n     * Returns a new list without any consecutively repeating elements. Equality is                                    // 6762\n     * determined by applying the supplied predicate two consecutive elements. The                                     // 6763\n     * first element in a series of equal element is the one being preserved.                                          // 6764\n     *                                                                                                                 // 6765\n     * Dispatches to the `dropRepeatsWith` method of the second argument, if present.                                  // 6766\n     *                                                                                                                 // 6767\n     * Acts as a transducer if a transformer is given in list position.                                                // 6768\n     *                                                                                                                 // 6769\n     * @func                                                                                                           // 6770\n     * @memberOf R                                                                                                     // 6771\n     * @since v0.14.0                                                                                                  // 6772\n     * @category List                                                                                                  // 6773\n     * @sig (a, a -> Boolean) -> [a] -> [a]                                                                            // 6774\n     * @param {Function} pred A predicate used to test whether two items are equal.                                    // 6775\n     * @param {Array} list The array to consider.                                                                      // 6776\n     * @return {Array} `list` without repeating elements.                                                              // 6777\n     * @see R.transduce                                                                                                // 6778\n     * @example                                                                                                        // 6779\n     *                                                                                                                 // 6780\n     *      var lengthEq = (x, y) => Math.abs(x) === Math.abs(y);                                                      // 6781\n     *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];                                                             // 6782\n     *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]                                              // 6783\n     */                                                                                                                // 6784\n    var dropRepeatsWith = _curry2(_dispatchable('dropRepeatsWith', _xdropRepeatsWith, function dropRepeatsWith(pred, list) {\n        var result = [];                                                                                               // 6786\n        var idx = 1;                                                                                                   // 6787\n        var len = list.length;                                                                                         // 6788\n        if (len !== 0) {                                                                                               // 6789\n            result[0] = list[0];                                                                                       // 6790\n            while (idx < len) {                                                                                        // 6791\n                if (!pred(last(result), list[idx])) {                                                                  // 6792\n                    result[result.length] = list[idx];                                                                 // 6793\n                }                                                                                                      // 6794\n                idx += 1;                                                                                              // 6795\n            }                                                                                                          // 6796\n        }                                                                                                              // 6797\n        return result;                                                                                                 // 6798\n    }));                                                                                                               // 6799\n                                                                                                                       // 6800\n    /**                                                                                                                // 6801\n     * Takes a function and two values in its domain and returns `true` if the                                         // 6802\n     * values map to the same value in the codomain; `false` otherwise.                                                // 6803\n     *                                                                                                                 // 6804\n     * @func                                                                                                           // 6805\n     * @memberOf R                                                                                                     // 6806\n     * @since v0.18.0                                                                                                  // 6807\n     * @category Relation                                                                                              // 6808\n     * @sig (a -> b) -> a -> a -> Boolean                                                                              // 6809\n     * @param {Function} f                                                                                             // 6810\n     * @param {*} x                                                                                                    // 6811\n     * @param {*} y                                                                                                    // 6812\n     * @return {Boolean}                                                                                               // 6813\n     * @example                                                                                                        // 6814\n     *                                                                                                                 // 6815\n     *      R.eqBy(Math.abs, 5, -5); //=> true                                                                         // 6816\n     */                                                                                                                // 6817\n    var eqBy = _curry3(function eqBy(f, x, y) {                                                                        // 6818\n        return equals(f(x), f(y));                                                                                     // 6819\n    });                                                                                                                // 6820\n                                                                                                                       // 6821\n    /**                                                                                                                // 6822\n     * Reports whether two objects have the same value, in `R.equals` terms, for                                       // 6823\n     * the specified property. Useful as a curried predicate.                                                          // 6824\n     *                                                                                                                 // 6825\n     * @func                                                                                                           // 6826\n     * @memberOf R                                                                                                     // 6827\n     * @since v0.1.0                                                                                                   // 6828\n     * @category Object                                                                                                // 6829\n     * @sig k -> {k: v} -> {k: v} -> Boolean                                                                           // 6830\n     * @param {String} prop The name of the property to compare                                                        // 6831\n     * @param {Object} obj1                                                                                            // 6832\n     * @param {Object} obj2                                                                                            // 6833\n     * @return {Boolean}                                                                                               // 6834\n     *                                                                                                                 // 6835\n     * @example                                                                                                        // 6836\n     *                                                                                                                 // 6837\n     *      var o1 = { a: 1, b: 2, c: 3, d: 4 };                                                                       // 6838\n     *      var o2 = { a: 10, b: 20, c: 3, d: 40 };                                                                    // 6839\n     *      R.eqProps('a', o1, o2); //=> false                                                                         // 6840\n     *      R.eqProps('c', o1, o2); //=> true                                                                          // 6841\n     */                                                                                                                // 6842\n    var eqProps = _curry3(function eqProps(prop, obj1, obj2) {                                                         // 6843\n        return equals(obj1[prop], obj2[prop]);                                                                         // 6844\n    });                                                                                                                // 6845\n                                                                                                                       // 6846\n    /**                                                                                                                // 6847\n     * Returns the position of the first occurrence of an item in an array, or -1                                      // 6848\n     * if the item is not included in the array. `R.equals` is used to determine                                       // 6849\n     * equality.                                                                                                       // 6850\n     *                                                                                                                 // 6851\n     * @func                                                                                                           // 6852\n     * @memberOf R                                                                                                     // 6853\n     * @since v0.1.0                                                                                                   // 6854\n     * @category List                                                                                                  // 6855\n     * @sig a -> [a] -> Number                                                                                         // 6856\n     * @param {*} target The item to find.                                                                             // 6857\n     * @param {Array} xs The array to search in.                                                                       // 6858\n     * @return {Number} the index of the target, or -1 if the target is not found.                                     // 6859\n     * @see R.lastIndexOf                                                                                              // 6860\n     * @example                                                                                                        // 6861\n     *                                                                                                                 // 6862\n     *      R.indexOf(3, [1,2,3,4]); //=> 2                                                                            // 6863\n     *      R.indexOf(10, [1,2,3,4]); //=> -1                                                                          // 6864\n     */                                                                                                                // 6865\n    var indexOf = _curry2(function indexOf(target, xs) {                                                               // 6866\n        return typeof xs.indexOf === 'function' && !_isArray(xs) ? xs.indexOf(target) : _indexOf(xs, target, 0);       // 6867\n    });                                                                                                                // 6868\n                                                                                                                       // 6869\n    /**                                                                                                                // 6870\n     * juxt applies a list of functions to a list of values.                                                           // 6871\n     *                                                                                                                 // 6872\n     * @func                                                                                                           // 6873\n     * @memberOf R                                                                                                     // 6874\n     * @since 0.19.0                                                                                                   // 6875\n     * @category Function                                                                                              // 6876\n     * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])                                                           // 6877\n     * @param {Array} fns An array of functions                                                                        // 6878\n     * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\n     * @example                                                                                                        // 6880\n     *                                                                                                                 // 6881\n     *      var range = R.juxt([Math.min, Math.max]);                                                                  // 6882\n     *      range(3, 4, 9, -3); //=> [-3, 9]                                                                           // 6883\n     */                                                                                                                // 6884\n    var juxt = _curry1(function juxt(fns) {                                                                            // 6885\n        return function () {                                                                                           // 6886\n            return map(apply(__, arguments), fns);                                                                     // 6887\n        };                                                                                                             // 6888\n    });                                                                                                                // 6889\n                                                                                                                       // 6890\n    /**                                                                                                                // 6891\n     * Returns a lens for the given getter and setter functions. The getter \"gets\"                                     // 6892\n     * the value of the focus; the setter \"sets\" the value of the focus. The setter                                    // 6893\n     * should not mutate the data structure.                                                                           // 6894\n     *                                                                                                                 // 6895\n     * @func                                                                                                           // 6896\n     * @memberOf R                                                                                                     // 6897\n     * @since v0.8.0                                                                                                   // 6898\n     * @category Object                                                                                                // 6899\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s                                                        // 6900\n     * @sig (s -> a) -> ((a, s) -> s) -> Lens s a                                                                      // 6901\n     * @param {Function} getter                                                                                        // 6902\n     * @param {Function} setter                                                                                        // 6903\n     * @return {Lens}                                                                                                  // 6904\n     * @see R.view, R.set, R.over, R.lensIndex, R.lensProp                                                             // 6905\n     * @example                                                                                                        // 6906\n     *                                                                                                                 // 6907\n     *      var xLens = R.lens(R.prop('x'), R.assoc('x'));                                                             // 6908\n     *                                                                                                                 // 6909\n     *      R.view(xLens, {x: 1, y: 2});            //=> 1                                                             // 6910\n     *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}                                                  // 6911\n     *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}                                                 // 6912\n     */                                                                                                                // 6913\n    var lens = _curry2(function lens(getter, setter) {                                                                 // 6914\n        return function (f) {                                                                                          // 6915\n            return function (s) {                                                                                      // 6916\n                return map(function (v) {                                                                              // 6917\n                    return setter(v, s);                                                                               // 6918\n                }, f(getter(s)));                                                                                      // 6919\n            };                                                                                                         // 6920\n        };                                                                                                             // 6921\n    });                                                                                                                // 6922\n                                                                                                                       // 6923\n    /**                                                                                                                // 6924\n     * Returns a lens whose focus is the specified index.                                                              // 6925\n     *                                                                                                                 // 6926\n     * @func                                                                                                           // 6927\n     * @memberOf R                                                                                                     // 6928\n     * @since v0.14.0                                                                                                  // 6929\n     * @category Object                                                                                                // 6930\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s                                                        // 6931\n     * @sig Number -> Lens s a                                                                                         // 6932\n     * @param {Number} n                                                                                               // 6933\n     * @return {Lens}                                                                                                  // 6934\n     * @see R.view, R.set, R.over                                                                                      // 6935\n     * @example                                                                                                        // 6936\n     *                                                                                                                 // 6937\n     *      var headLens = R.lensIndex(0);                                                                             // 6938\n     *                                                                                                                 // 6939\n     *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'                                                     // 6940\n     *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']                                         // 6941\n     *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']                                         // 6942\n     */                                                                                                                // 6943\n    var lensIndex = _curry1(function lensIndex(n) {                                                                    // 6944\n        return lens(nth(n), update(n));                                                                                // 6945\n    });                                                                                                                // 6946\n                                                                                                                       // 6947\n    /**                                                                                                                // 6948\n     * Returns a lens whose focus is the specified path.                                                               // 6949\n     *                                                                                                                 // 6950\n     * @func                                                                                                           // 6951\n     * @memberOf R                                                                                                     // 6952\n     * @since 0.19.0                                                                                                   // 6953\n     * @category Object                                                                                                // 6954\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s                                                        // 6955\n     * @sig [String] -> Lens s a                                                                                       // 6956\n     * @param {Array} path The path to use.                                                                            // 6957\n     * @return {Lens}                                                                                                  // 6958\n     * @see R.view, R.set, R.over                                                                                      // 6959\n     * @example                                                                                                        // 6960\n     *                                                                                                                 // 6961\n     *      var xyLens = R.lensPath(['x', 'y']);                                                                       // 6962\n     *                                                                                                                 // 6963\n     *      R.view(xyLens, {x: {y: 2, z: 3}});            //=> 2                                                       // 6964\n     *      R.set(xyLens, 4, {x: {y: 2, z: 3}});          //=> {x: {y: 4, z: 3}}                                       // 6965\n     *      R.over(xyLens, R.negate, {x: {y: 2, z: 3}});  //=> {x: {y: -2, z: 3}}                                      // 6966\n     */                                                                                                                // 6967\n    var lensPath = _curry1(function lensPath(p) {                                                                      // 6968\n        return lens(path(p), assocPath(p));                                                                            // 6969\n    });                                                                                                                // 6970\n                                                                                                                       // 6971\n    /**                                                                                                                // 6972\n     * Returns a lens whose focus is the specified property.                                                           // 6973\n     *                                                                                                                 // 6974\n     * @func                                                                                                           // 6975\n     * @memberOf R                                                                                                     // 6976\n     * @since v0.14.0                                                                                                  // 6977\n     * @category Object                                                                                                // 6978\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s                                                        // 6979\n     * @sig String -> Lens s a                                                                                         // 6980\n     * @param {String} k                                                                                               // 6981\n     * @return {Lens}                                                                                                  // 6982\n     * @see R.view, R.set, R.over                                                                                      // 6983\n     * @example                                                                                                        // 6984\n     *                                                                                                                 // 6985\n     *      var xLens = R.lensProp('x');                                                                               // 6986\n     *                                                                                                                 // 6987\n     *      R.view(xLens, {x: 1, y: 2});            //=> 1                                                             // 6988\n     *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}                                                  // 6989\n     *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}                                                 // 6990\n     */                                                                                                                // 6991\n    var lensProp = _curry1(function lensProp(k) {                                                                      // 6992\n        return lens(prop(k), assoc(k));                                                                                // 6993\n    });                                                                                                                // 6994\n                                                                                                                       // 6995\n    /**                                                                                                                // 6996\n     * \"lifts\" a function to be the specified arity, so that it may \"map over\" that                                    // 6997\n     * many lists (or other objects that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply)).\n     *                                                                                                                 // 6999\n     * @func                                                                                                           // 7000\n     * @memberOf R                                                                                                     // 7001\n     * @since v0.7.0                                                                                                   // 7002\n     * @category Function                                                                                              // 7003\n     * @sig Number -> (*... -> *) -> ([*]... -> [*])                                                                   // 7004\n     * @param {Function} fn The function to lift into higher context                                                   // 7005\n     * @return {Function} The lifted function.                                                                         // 7006\n     * @see R.lift                                                                                                     // 7007\n     * @example                                                                                                        // 7008\n     *                                                                                                                 // 7009\n     *      var madd3 = R.liftN(3, R.curryN(3, (...args) => R.sum(args)));                                             // 7010\n     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]                                             // 7011\n     */                                                                                                                // 7012\n    var liftN = _curry2(function liftN(arity, fn) {                                                                    // 7013\n        var lifted = curryN(arity, fn);                                                                                // 7014\n        return curryN(arity, function () {                                                                             // 7015\n            return _reduce(ap, map(lifted, arguments[0]), _slice(arguments, 1));                                       // 7016\n        });                                                                                                            // 7017\n    });                                                                                                                // 7018\n                                                                                                                       // 7019\n    /**                                                                                                                // 7020\n     * Returns the mean of the given list of numbers.                                                                  // 7021\n     *                                                                                                                 // 7022\n     * @func                                                                                                           // 7023\n     * @memberOf R                                                                                                     // 7024\n     * @since v0.14.0                                                                                                  // 7025\n     * @category Math                                                                                                  // 7026\n     * @sig [Number] -> Number                                                                                         // 7027\n     * @param {Array} list                                                                                             // 7028\n     * @return {Number}                                                                                                // 7029\n     * @example                                                                                                        // 7030\n     *                                                                                                                 // 7031\n     *      R.mean([2, 7, 9]); //=> 6                                                                                  // 7032\n     *      R.mean([]); //=> NaN                                                                                       // 7033\n     */                                                                                                                // 7034\n    var mean = _curry1(function mean(list) {                                                                           // 7035\n        return sum(list) / list.length;                                                                                // 7036\n    });                                                                                                                // 7037\n                                                                                                                       // 7038\n    /**                                                                                                                // 7039\n     * Returns the median of the given list of numbers.                                                                // 7040\n     *                                                                                                                 // 7041\n     * @func                                                                                                           // 7042\n     * @memberOf R                                                                                                     // 7043\n     * @since v0.14.0                                                                                                  // 7044\n     * @category Math                                                                                                  // 7045\n     * @sig [Number] -> Number                                                                                         // 7046\n     * @param {Array} list                                                                                             // 7047\n     * @return {Number}                                                                                                // 7048\n     * @example                                                                                                        // 7049\n     *                                                                                                                 // 7050\n     *      R.median([2, 9, 7]); //=> 7                                                                                // 7051\n     *      R.median([7, 2, 10, 9]); //=> 8                                                                            // 7052\n     *      R.median([]); //=> NaN                                                                                     // 7053\n     */                                                                                                                // 7054\n    var median = _curry1(function median(list) {                                                                       // 7055\n        var len = list.length;                                                                                         // 7056\n        if (len === 0) {                                                                                               // 7057\n            return NaN;                                                                                                // 7058\n        }                                                                                                              // 7059\n        var width = 2 - len % 2;                                                                                       // 7060\n        var idx = (len - width) / 2;                                                                                   // 7061\n        return mean(_slice(list).sort(function (a, b) {                                                                // 7062\n            return a < b ? -1 : a > b ? 1 : 0;                                                                         // 7063\n        }).slice(idx, idx + width));                                                                                   // 7064\n    });                                                                                                                // 7065\n                                                                                                                       // 7066\n    /**                                                                                                                // 7067\n     * Create a new object with the own properties of the first object merged with                                     // 7068\n     * the own properties of the second object. If a key exists in both objects,                                       // 7069\n     * the value from the second object will be used.                                                                  // 7070\n     *                                                                                                                 // 7071\n     * @func                                                                                                           // 7072\n     * @memberOf R                                                                                                     // 7073\n     * @since v0.1.0                                                                                                   // 7074\n     * @category Object                                                                                                // 7075\n     * @sig {k: v} -> {k: v} -> {k: v}                                                                                 // 7076\n     * @param {Object} l                                                                                               // 7077\n     * @param {Object} r                                                                                               // 7078\n     * @return {Object}                                                                                                // 7079\n     * @see R.mergeWith, R.mergeWithKey                                                                                // 7080\n     * @example                                                                                                        // 7081\n     *                                                                                                                 // 7082\n     *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });                                                     // 7083\n     *      //=> { 'name': 'fred', 'age': 40 }                                                                         // 7084\n     *                                                                                                                 // 7085\n     *      var resetToDefault = R.merge(R.__, {x: 0});                                                                // 7086\n     *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}                                                            // 7087\n     */                                                                                                                // 7088\n    var merge = mergeWith(function (l, r) {                                                                            // 7089\n        return r;                                                                                                      // 7090\n    });                                                                                                                // 7091\n                                                                                                                       // 7092\n    /**                                                                                                                // 7093\n     * Merges a list of objects together into one object.                                                              // 7094\n     *                                                                                                                 // 7095\n     * @func                                                                                                           // 7096\n     * @memberOf R                                                                                                     // 7097\n     * @since v0.10.0                                                                                                  // 7098\n     * @category List                                                                                                  // 7099\n     * @sig [{k: v}] -> {k: v}                                                                                         // 7100\n     * @param {Array} list An array of objects                                                                         // 7101\n     * @return {Object} A merged object.                                                                               // 7102\n     * @see R.reduce                                                                                                   // 7103\n     * @example                                                                                                        // 7104\n     *                                                                                                                 // 7105\n     *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}                                            // 7106\n     *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}                                                  // 7107\n     */                                                                                                                // 7108\n    var mergeAll = _curry1(function mergeAll(list) {                                                                   // 7109\n        return reduce(merge, {}, list);                                                                                // 7110\n    });                                                                                                                // 7111\n                                                                                                                       // 7112\n    /**                                                                                                                // 7113\n     * Performs left-to-right function composition. The leftmost function may have                                     // 7114\n     * any arity; the remaining functions must be unary.                                                               // 7115\n     *                                                                                                                 // 7116\n     * In some libraries this function is named `sequence`.                                                            // 7117\n     *                                                                                                                 // 7118\n     * @func                                                                                                           // 7119\n     * @memberOf R                                                                                                     // 7120\n     * @since v0.1.0                                                                                                   // 7121\n     * @category Function                                                                                              // 7122\n     * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)                        // 7123\n     * @param {...Function} functions                                                                                  // 7124\n     * @return {Function}                                                                                              // 7125\n     * @see R.compose                                                                                                  // 7126\n     * @example                                                                                                        // 7127\n     *                                                                                                                 // 7128\n     *      var f = R.pipe(Math.pow, R.negate, R.inc);                                                                 // 7129\n     *                                                                                                                 // 7130\n     *      f(3, 4); // -(3^4) + 1                                                                                     // 7131\n     */                                                                                                                // 7132\n    var pipe = function pipe() {                                                                                       // 7133\n        if (arguments.length === 0) {                                                                                  // 7134\n            throw new Error('pipe requires at least one argument');                                                    // 7135\n        }                                                                                                              // 7136\n        return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));                              // 7137\n    };                                                                                                                 // 7138\n                                                                                                                       // 7139\n    /**                                                                                                                // 7140\n     * Performs left-to-right composition of one or more Promise-returning                                             // 7141\n     * functions. The leftmost function may have any arity; the remaining functions                                    // 7142\n     * must be unary.                                                                                                  // 7143\n     *                                                                                                                 // 7144\n     * @func                                                                                                           // 7145\n     * @memberOf R                                                                                                     // 7146\n     * @since v0.10.0                                                                                                  // 7147\n     * @category Function                                                                                              // 7148\n     * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)                            // 7149\n     * @param {...Function} functions                                                                                  // 7150\n     * @return {Function}                                                                                              // 7151\n     * @see R.composeP                                                                                                 // 7152\n     * @example                                                                                                        // 7153\n     *                                                                                                                 // 7154\n     *      //  followersForUser :: String -> Promise [User]                                                           // 7155\n     *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);                                           // 7156\n     */                                                                                                                // 7157\n    var pipeP = function pipeP() {                                                                                     // 7158\n        if (arguments.length === 0) {                                                                                  // 7159\n            throw new Error('pipeP requires at least one argument');                                                   // 7160\n        }                                                                                                              // 7161\n        return _arity(arguments[0].length, reduce(_pipeP, arguments[0], tail(arguments)));                             // 7162\n    };                                                                                                                 // 7163\n                                                                                                                       // 7164\n    /**                                                                                                                // 7165\n     * Multiplies together all the elements of a list.                                                                 // 7166\n     *                                                                                                                 // 7167\n     * @func                                                                                                           // 7168\n     * @memberOf R                                                                                                     // 7169\n     * @since v0.1.0                                                                                                   // 7170\n     * @category Math                                                                                                  // 7171\n     * @sig [Number] -> Number                                                                                         // 7172\n     * @param {Array} list An array of numbers                                                                         // 7173\n     * @return {Number} The product of all the numbers in the list.                                                    // 7174\n     * @see R.reduce                                                                                                   // 7175\n     * @example                                                                                                        // 7176\n     *                                                                                                                 // 7177\n     *      R.product([2,4,6,8,100,1]); //=> 38400                                                                     // 7178\n     */                                                                                                                // 7179\n    var product = reduce(multiply, 1);                                                                                 // 7180\n                                                                                                                       // 7181\n    /**                                                                                                                // 7182\n     * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)                             // 7183\n     * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an                               // 7184\n     * Applicative of Traversable.                                                                                     // 7185\n     *                                                                                                                 // 7186\n     * Dispatches to the `sequence` method of the second argument, if present.                                         // 7187\n     *                                                                                                                 // 7188\n     * @func                                                                                                           // 7189\n     * @memberOf R                                                                                                     // 7190\n     * @since 0.19.0                                                                                                   // 7191\n     * @category List                                                                                                  // 7192\n     * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)                                         // 7193\n     * @param {Function} of                                                                                            // 7194\n     * @param {*} traversable                                                                                          // 7195\n     * @return {*}                                                                                                     // 7196\n     * @see R.traverse                                                                                                 // 7197\n     * @example                                                                                                        // 7198\n     *                                                                                                                 // 7199\n     *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])                                  // 7200\n     *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()                                        // 7201\n     *                                                                                                                 // 7202\n     *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]                                        // 7203\n     *      R.sequence(R.of, Nothing());       //=> [Nothing()]                                                        // 7204\n     */                                                                                                                // 7205\n    var sequence = _curry2(function sequence(of, traversable) {                                                        // 7206\n        return typeof traversable.sequence === 'function' ? traversable.sequence(of) : reduceRight(function (acc, x) {\n            return ap(map(prepend, x), acc);                                                                           // 7208\n        }, of([]), traversable);                                                                                       // 7209\n    });                                                                                                                // 7210\n                                                                                                                       // 7211\n    /**                                                                                                                // 7212\n     * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning                        // 7213\n     * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),                         // 7214\n     * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative                         // 7215\n     * into an Applicative of Traversable.                                                                             // 7216\n     *                                                                                                                 // 7217\n     * Dispatches to the `sequence` method of the third argument, if present.                                          // 7218\n     *                                                                                                                 // 7219\n     * @func                                                                                                           // 7220\n     * @memberOf R                                                                                                     // 7221\n     * @since 0.19.0                                                                                                   // 7222\n     * @category List                                                                                                  // 7223\n     * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)                               // 7224\n     * @param {Function} of                                                                                            // 7225\n     * @param {Function} f                                                                                             // 7226\n     * @param {*} traversable                                                                                          // 7227\n     * @return {*}                                                                                                     // 7228\n     * @see R.sequence                                                                                                 // 7229\n     * @example                                                                                                        // 7230\n     *                                                                                                                 // 7231\n     *      R.traverse(Maybe.of, R.negate, [Just(1), Just(2), Just(3)]);   //=> Just([-1, -2, -3])                     // 7232\n     *      R.traverse(Maybe.of, R.negate, [Just(1), Just(2), Nothing()]); //=> Nothing()                              // 7233\n     *                                                                                                                 // 7234\n     *      R.traverse(R.of, R.negate, Just([1, 2, 3])); //=> [Just(-1), Just(-2), Just(-3)]                           // 7235\n     *      R.traverse(R.of, R.negate, Nothing());       //=> [Nothing()]                                              // 7236\n     */                                                                                                                // 7237\n    var traverse = _curry3(function traverse(of, f, traversable) {                                                     // 7238\n        return sequence(of, map(f, traversable));                                                                      // 7239\n    });                                                                                                                // 7240\n                                                                                                                       // 7241\n    /**                                                                                                                // 7242\n     * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from                                    // 7243\n     * any [Chain](https://github.com/fantasyland/fantasy-land#chain).                                                 // 7244\n     *                                                                                                                 // 7245\n     * @func                                                                                                           // 7246\n     * @memberOf R                                                                                                     // 7247\n     * @since v0.3.0                                                                                                   // 7248\n     * @category List                                                                                                  // 7249\n     * @sig Chain c => c (c a) -> c a                                                                                  // 7250\n     * @param {*} list                                                                                                 // 7251\n     * @return {*}                                                                                                     // 7252\n     * @see R.flatten, R.chain                                                                                         // 7253\n     * @example                                                                                                        // 7254\n     *                                                                                                                 // 7255\n     *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]                                                                // 7256\n     *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]                                                // 7257\n     */                                                                                                                // 7258\n    var unnest = chain(_identity);                                                                                     // 7259\n                                                                                                                       // 7260\n    var _contains = function _contains(a, list) {                                                                      // 7261\n        return _indexOf(list, a, 0) >= 0;                                                                              // 7262\n    };                                                                                                                 // 7263\n                                                                                                                       // 7264\n    var _stepCat = function () {                                                                                       // 7265\n        var _stepCatArray = {                                                                                          // 7266\n            '@@transducer/init': Array,                                                                                // 7267\n            '@@transducer/step': function (xs, x) {                                                                    // 7268\n                return _concat(xs, [x]);                                                                               // 7269\n            },                                                                                                         // 7270\n            '@@transducer/result': _identity                                                                           // 7271\n        };                                                                                                             // 7272\n        var _stepCatString = {                                                                                         // 7273\n            '@@transducer/init': String,                                                                               // 7274\n            '@@transducer/step': function (a, b) {                                                                     // 7275\n                return a + b;                                                                                          // 7276\n            },                                                                                                         // 7277\n            '@@transducer/result': _identity                                                                           // 7278\n        };                                                                                                             // 7279\n        var _stepCatObject = {                                                                                         // 7280\n            '@@transducer/init': Object,                                                                               // 7281\n            '@@transducer/step': function (result, input) {                                                            // 7282\n                return merge(result, isArrayLike(input) ? objOf(input[0], input[1]) : input);                          // 7283\n            },                                                                                                         // 7284\n            '@@transducer/result': _identity                                                                           // 7285\n        };                                                                                                             // 7286\n        return function _stepCat(obj) {                                                                                // 7287\n            if (_isTransformer(obj)) {                                                                                 // 7288\n                return obj;                                                                                            // 7289\n            }                                                                                                          // 7290\n            if (isArrayLike(obj)) {                                                                                    // 7291\n                return _stepCatArray;                                                                                  // 7292\n            }                                                                                                          // 7293\n            if (typeof obj === 'string') {                                                                             // 7294\n                return _stepCatString;                                                                                 // 7295\n            }                                                                                                          // 7296\n            if (typeof obj === 'object') {                                                                             // 7297\n                return _stepCatObject;                                                                                 // 7298\n            }                                                                                                          // 7299\n            throw new Error('Cannot create transformer for ' + obj);                                                   // 7300\n        };                                                                                                             // 7301\n    }();                                                                                                               // 7302\n                                                                                                                       // 7303\n    //  mapPairs :: (Object, [String]) -> [String]                                                                     // 7304\n    var _toString = function _toString(x, seen) {                                                                      // 7305\n        var recur = function recur(y) {                                                                                // 7306\n            var xs = seen.concat([x]);                                                                                 // 7307\n            return _contains(y, xs) ? '<Circular>' : _toString(y, xs);                                                 // 7308\n        };                                                                                                             // 7309\n        //  mapPairs :: (Object, [String]) -> [String]                                                                 // 7310\n        var mapPairs = function (obj, keys) {                                                                          // 7311\n            return _map(function (k) {                                                                                 // 7312\n                return _quote(k) + ': ' + recur(obj[k]);                                                               // 7313\n            }, keys.slice().sort());                                                                                   // 7314\n        };                                                                                                             // 7315\n        switch (Object.prototype.toString.call(x)) {                                                                   // 7316\n        case '[object Arguments]':                                                                                     // 7317\n            return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';                            // 7318\n        case '[object Array]':                                                                                         // 7319\n            return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {                                       // 7320\n                return /^\\d+$/.test(k);                                                                                // 7321\n            }, keys(x)))).join(', ') + ']';                                                                            // 7322\n        case '[object Boolean]':                                                                                       // 7323\n            return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();                   // 7324\n        case '[object Date]':                                                                                          // 7325\n            return 'new Date(' + _quote(_toISOString(x)) + ')';                                                        // 7326\n        case '[object Null]':                                                                                          // 7327\n            return 'null';                                                                                             // 7328\n        case '[object Number]':                                                                                        // 7329\n            return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);\n        case '[object String]':                                                                                        // 7331\n            return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);                       // 7332\n        case '[object Undefined]':                                                                                     // 7333\n            return 'undefined';                                                                                        // 7334\n        default:                                                                                                       // 7335\n            if (typeof x.toString === 'function') {                                                                    // 7336\n                var repr = x.toString();                                                                               // 7337\n                if (repr !== '[object Object]') {                                                                      // 7338\n                    return repr;                                                                                       // 7339\n                }                                                                                                      // 7340\n            }                                                                                                          // 7341\n            return '{' + mapPairs(x, keys(x)).join(', ') + '}';                                                        // 7342\n        }                                                                                                              // 7343\n    };                                                                                                                 // 7344\n                                                                                                                       // 7345\n    /**                                                                                                                // 7346\n     * Turns a list of Functors into a Functor of a list.                                                              // 7347\n     *                                                                                                                 // 7348\n     * @func                                                                                                           // 7349\n     * @memberOf R                                                                                                     // 7350\n     * @since v0.8.0                                                                                                   // 7351\n     * @category List                                                                                                  // 7352\n     * @sig Functor f => (x -> f x) -> [f a] -> f [a]                                                                  // 7353\n     * @param {Function} of A function that returns the data type to return                                            // 7354\n     * @param {Array} list An array of functors of the same type                                                       // 7355\n     * @return {*}                                                                                                     // 7356\n     * @see R.sequence                                                                                                 // 7357\n     * @deprecated since v0.19.0                                                                                       // 7358\n     * @example                                                                                                        // 7359\n     *                                                                                                                 // 7360\n     *      R.commute(R.of, [[1], [2, 3]]);   //=> [[1, 2], [1, 3]]                                                    // 7361\n     *      R.commute(R.of, [[1, 2], [3]]);   //=> [[1, 3], [2, 3]]                                                    // 7362\n     *      R.commute(R.of, [[1], [2], [3]]); //=> [[1, 2, 3]]                                                         // 7363\n     *      R.commute(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])                                   // 7364\n     *      R.commute(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()                                         // 7365\n     */                                                                                                                // 7366\n    var commute = commuteMap(identity);                                                                                // 7367\n                                                                                                                       // 7368\n    /**                                                                                                                // 7369\n     * Performs right-to-left function composition. The rightmost function may have                                    // 7370\n     * any arity; the remaining functions must be unary.                                                               // 7371\n     *                                                                                                                 // 7372\n     * @func                                                                                                           // 7373\n     * @memberOf R                                                                                                     // 7374\n     * @since v0.1.0                                                                                                   // 7375\n     * @category Function                                                                                              // 7376\n     * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)                        // 7377\n     * @param {...Function} functions                                                                                  // 7378\n     * @return {Function}                                                                                              // 7379\n     * @see R.pipe                                                                                                     // 7380\n     * @example                                                                                                        // 7381\n     *                                                                                                                 // 7382\n     *      var f = R.compose(R.inc, R.negate, Math.pow);                                                              // 7383\n     *                                                                                                                 // 7384\n     *      f(3, 4); // -(3^4) + 1                                                                                     // 7385\n     */                                                                                                                // 7386\n    var compose = function compose() {                                                                                 // 7387\n        if (arguments.length === 0) {                                                                                  // 7388\n            throw new Error('compose requires at least one argument');                                                 // 7389\n        }                                                                                                              // 7390\n        return pipe.apply(this, reverse(arguments));                                                                   // 7391\n    };                                                                                                                 // 7392\n                                                                                                                       // 7393\n    /**                                                                                                                // 7394\n     * Returns the right-to-left Kleisli composition of the provided functions,                                        // 7395\n     * each of which must return a value of a type supported by [`chain`](#chain).                                     // 7396\n     *                                                                                                                 // 7397\n     * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), R.chain(f))`.                         // 7398\n     *                                                                                                                 // 7399\n     * @func                                                                                                           // 7400\n     * @memberOf R                                                                                                     // 7401\n     * @since v0.16.0                                                                                                  // 7402\n     * @category Function                                                                                              // 7403\n     * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (m a -> m z)                                       // 7404\n     * @param {...Function}                                                                                            // 7405\n     * @return {Function}                                                                                              // 7406\n     * @see R.pipeK                                                                                                    // 7407\n     * @example                                                                                                        // 7408\n     *                                                                                                                 // 7409\n     *      //  parseJson :: String -> Maybe *                                                                         // 7410\n     *      //  get :: String -> Object -> Maybe *                                                                     // 7411\n     *                                                                                                                 // 7412\n     *      //  getStateCode :: Maybe String -> Maybe String                                                           // 7413\n     *      var getStateCode = R.composeK(                                                                             // 7414\n     *        R.compose(Maybe.of, R.toUpper),                                                                          // 7415\n     *        get('state'),                                                                                            // 7416\n     *        get('address'),                                                                                          // 7417\n     *        get('user'),                                                                                             // 7418\n     *        parseJson                                                                                                // 7419\n     *      );                                                                                                         // 7420\n     *                                                                                                                 // 7421\n     *      getStateCode(Maybe.of('{\"user\":{\"address\":{\"state\":\"ny\"}}}'));                                             // 7422\n     *      //=> Just('NY')                                                                                            // 7423\n     *      getStateCode(Maybe.of('[Invalid JSON]'));                                                                  // 7424\n     *      //=> Nothing()                                                                                             // 7425\n     */                                                                                                                // 7426\n    var composeK = function composeK() {                                                                               // 7427\n        return compose.apply(this, prepend(identity, map(chain, arguments)));                                          // 7428\n    };                                                                                                                 // 7429\n                                                                                                                       // 7430\n    /**                                                                                                                // 7431\n     * Performs right-to-left composition of one or more Promise-returning                                             // 7432\n     * functions. The rightmost function may have any arity; the remaining                                             // 7433\n     * functions must be unary.                                                                                        // 7434\n     *                                                                                                                 // 7435\n     * @func                                                                                                           // 7436\n     * @memberOf R                                                                                                     // 7437\n     * @since v0.10.0                                                                                                  // 7438\n     * @category Function                                                                                              // 7439\n     * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)                            // 7440\n     * @param {...Function} functions                                                                                  // 7441\n     * @return {Function}                                                                                              // 7442\n     * @see R.pipeP                                                                                                    // 7443\n     * @example                                                                                                        // 7444\n     *                                                                                                                 // 7445\n     *      //  followersForUser :: String -> Promise [User]                                                           // 7446\n     *      var followersForUser = R.composeP(db.getFollowers, db.getUserById);                                        // 7447\n     */                                                                                                                // 7448\n    var composeP = function composeP() {                                                                               // 7449\n        if (arguments.length === 0) {                                                                                  // 7450\n            throw new Error('composeP requires at least one argument');                                                // 7451\n        }                                                                                                              // 7452\n        return pipeP.apply(this, reverse(arguments));                                                                  // 7453\n    };                                                                                                                 // 7454\n                                                                                                                       // 7455\n    /**                                                                                                                // 7456\n     * Wraps a constructor function inside a curried function that can be called                                       // 7457\n     * with the same arguments and returns the same type.                                                              // 7458\n     *                                                                                                                 // 7459\n     * @func                                                                                                           // 7460\n     * @memberOf R                                                                                                     // 7461\n     * @since v0.1.0                                                                                                   // 7462\n     * @category Function                                                                                              // 7463\n     * @sig (* -> {*}) -> (* -> {*})                                                                                   // 7464\n     * @param {Function} Fn The constructor function to wrap.                                                          // 7465\n     * @return {Function} A wrapped, curried constructor function.                                                     // 7466\n     * @example                                                                                                        // 7467\n     *                                                                                                                 // 7468\n     *      // Constructor function                                                                                    // 7469\n     *      var Widget = config => {                                                                                   // 7470\n     *        // ...                                                                                                   // 7471\n     *      };                                                                                                         // 7472\n     *      Widget.prototype = {                                                                                       // 7473\n     *        // ...                                                                                                   // 7474\n     *      };                                                                                                         // 7475\n     *      var allConfigs = [                                                                                         // 7476\n     *        // ...                                                                                                   // 7477\n     *      ];                                                                                                         // 7478\n     *      R.map(R.construct(Widget), allConfigs); // a list of Widgets                                               // 7479\n     */                                                                                                                // 7480\n    var construct = _curry1(function construct(Fn) {                                                                   // 7481\n        return constructN(Fn.length, Fn);                                                                              // 7482\n    });                                                                                                                // 7483\n                                                                                                                       // 7484\n    /**                                                                                                                // 7485\n     * Returns `true` if the specified value is equal, in `R.equals` terms, to at                                      // 7486\n     * least one element of the given list; `false` otherwise.                                                         // 7487\n     *                                                                                                                 // 7488\n     * @func                                                                                                           // 7489\n     * @memberOf R                                                                                                     // 7490\n     * @since v0.1.0                                                                                                   // 7491\n     * @category List                                                                                                  // 7492\n     * @sig a -> [a] -> Boolean                                                                                        // 7493\n     * @param {Object} a The item to compare against.                                                                  // 7494\n     * @param {Array} list The array to consider.                                                                      // 7495\n     * @return {Boolean} `true` if the item is in the list, `false` otherwise.                                         // 7496\n     * @see R.any                                                                                                      // 7497\n     * @example                                                                                                        // 7498\n     *                                                                                                                 // 7499\n     *      R.contains(3, [1, 2, 3]); //=> true                                                                        // 7500\n     *      R.contains(4, [1, 2, 3]); //=> false                                                                       // 7501\n     *      R.contains([42], [[42]]); //=> true                                                                        // 7502\n     */                                                                                                                // 7503\n    var contains = _curry2(_contains);                                                                                 // 7504\n                                                                                                                       // 7505\n    /**                                                                                                                // 7506\n     * Finds the set (i.e. no duplicates) of all elements in the first list not                                        // 7507\n     * contained in the second list.                                                                                   // 7508\n     *                                                                                                                 // 7509\n     * @func                                                                                                           // 7510\n     * @memberOf R                                                                                                     // 7511\n     * @since v0.1.0                                                                                                   // 7512\n     * @category Relation                                                                                              // 7513\n     * @sig [*] -> [*] -> [*]                                                                                          // 7514\n     * @param {Array} list1 The first list.                                                                            // 7515\n     * @param {Array} list2 The second list.                                                                           // 7516\n     * @return {Array} The elements in `list1` that are not in `list2`.                                                // 7517\n     * @see R.differenceWith                                                                                           // 7518\n     * @example                                                                                                        // 7519\n     *                                                                                                                 // 7520\n     *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]                                                           // 7521\n     *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]                                                         // 7522\n     */                                                                                                                // 7523\n    var difference = _curry2(function difference(first, second) {                                                      // 7524\n        var out = [];                                                                                                  // 7525\n        var idx = 0;                                                                                                   // 7526\n        var firstLen = first.length;                                                                                   // 7527\n        while (idx < firstLen) {                                                                                       // 7528\n            if (!_contains(first[idx], second) && !_contains(first[idx], out)) {                                       // 7529\n                out[out.length] = first[idx];                                                                          // 7530\n            }                                                                                                          // 7531\n            idx += 1;                                                                                                  // 7532\n        }                                                                                                              // 7533\n        return out;                                                                                                    // 7534\n    });                                                                                                                // 7535\n                                                                                                                       // 7536\n    /**                                                                                                                // 7537\n     * Returns a new list without any consecutively repeating elements. `R.equals`                                     // 7538\n     * is used to determine equality.                                                                                  // 7539\n     *                                                                                                                 // 7540\n     * Dispatches to the `dropRepeats` method of the first argument, if present.                                       // 7541\n     *                                                                                                                 // 7542\n     * Acts as a transducer if a transformer is given in list position.                                                // 7543\n     *                                                                                                                 // 7544\n     * @func                                                                                                           // 7545\n     * @memberOf R                                                                                                     // 7546\n     * @since v0.14.0                                                                                                  // 7547\n     * @category List                                                                                                  // 7548\n     * @sig [a] -> [a]                                                                                                 // 7549\n     * @param {Array} list The array to consider.                                                                      // 7550\n     * @return {Array} `list` without repeating elements.                                                              // 7551\n     * @see R.transduce                                                                                                // 7552\n     * @example                                                                                                        // 7553\n     *                                                                                                                 // 7554\n     *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]                                            // 7555\n     */                                                                                                                // 7556\n    var dropRepeats = _curry1(_dispatchable('dropRepeats', _xdropRepeatsWith(equals), dropRepeatsWith(equals)));       // 7557\n                                                                                                                       // 7558\n    /**                                                                                                                // 7559\n     * Transforms the items of the list with the transducer and appends the                                            // 7560\n     * transformed items to the accumulator using an appropriate iterator function                                     // 7561\n     * based on the accumulator type.                                                                                  // 7562\n     *                                                                                                                 // 7563\n     * The accumulator can be an array, string, object or a transformer. Iterated                                      // 7564\n     * items will be appended to arrays and concatenated to strings. Objects will                                      // 7565\n     * be merged directly or 2-item arrays will be merged as key, value pairs.                                         // 7566\n     *                                                                                                                 // 7567\n     * The accumulator can also be a transformer object that provides a 2-arity                                        // 7568\n     * reducing iterator function, step, 0-arity initial value function, init, and                                     // 7569\n     * 1-arity result extraction function result. The step function is used as the                                     // 7570\n     * iterator function in reduce. The result function is used to convert the                                         // 7571\n     * final accumulator into the return type and in most cases is R.identity. The                                     // 7572\n     * init function is used to provide the initial accumulator.                                                       // 7573\n     *                                                                                                                 // 7574\n     * The iteration is performed with R.reduce after initializing the transducer.                                     // 7575\n     *                                                                                                                 // 7576\n     * @func                                                                                                           // 7577\n     * @memberOf R                                                                                                     // 7578\n     * @since v0.12.0                                                                                                  // 7579\n     * @category List                                                                                                  // 7580\n     * @sig a -> (b -> b) -> [c] -> a                                                                                  // 7581\n     * @param {*} acc The initial accumulator value.                                                                   // 7582\n     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.                 // 7583\n     * @param {Array} list The list to iterate over.                                                                   // 7584\n     * @return {*} The final, accumulated value.                                                                       // 7585\n     * @example                                                                                                        // 7586\n     *                                                                                                                 // 7587\n     *      var numbers = [1, 2, 3, 4];                                                                                // 7588\n     *      var transducer = R.compose(R.map(R.add(1)), R.take(2));                                                    // 7589\n     *                                                                                                                 // 7590\n     *      R.into([], transducer, numbers); //=> [2, 3]                                                               // 7591\n     *                                                                                                                 // 7592\n     *      var intoArray = R.into([]);                                                                                // 7593\n     *      intoArray(transducer, numbers); //=> [2, 3]                                                                // 7594\n     */                                                                                                                // 7595\n    var into = _curry3(function into(acc, xf, list) {                                                                  // 7596\n        return _isTransformer(acc) ? _reduce(xf(acc), acc['@@transducer/init'](), list) : _reduce(xf(_stepCat(acc)), acc, list);\n    });                                                                                                                // 7598\n                                                                                                                       // 7599\n    /**                                                                                                                // 7600\n     * \"lifts\" a function of arity > 1 so that it may \"map over\" an Array or other                                     // 7601\n     * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).          // 7602\n     *                                                                                                                 // 7603\n     * @func                                                                                                           // 7604\n     * @memberOf R                                                                                                     // 7605\n     * @since v0.7.0                                                                                                   // 7606\n     * @category Function                                                                                              // 7607\n     * @sig (*... -> *) -> ([*]... -> [*])                                                                             // 7608\n     * @param {Function} fn The function to lift into higher context                                                   // 7609\n     * @return {Function} The lifted function.                                                                         // 7610\n     * @see R.liftN                                                                                                    // 7611\n     * @example                                                                                                        // 7612\n     *                                                                                                                 // 7613\n     *      var madd3 = R.lift(R.curry((a, b, c) => a + b + c));                                                       // 7614\n     *                                                                                                                 // 7615\n     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]                                             // 7616\n     *                                                                                                                 // 7617\n     *      var madd5 = R.lift(R.curry((a, b, c, d, e) => a + b + c + d + e));                                         // 7618\n     *                                                                                                                 // 7619\n     *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]                              // 7620\n     */                                                                                                                // 7621\n    var lift = _curry1(function lift(fn) {                                                                             // 7622\n        return liftN(fn.length, fn);                                                                                   // 7623\n    });                                                                                                                // 7624\n                                                                                                                       // 7625\n    /**                                                                                                                // 7626\n     * Returns a partial copy of an object omitting the keys specified.                                                // 7627\n     *                                                                                                                 // 7628\n     * @func                                                                                                           // 7629\n     * @memberOf R                                                                                                     // 7630\n     * @since v0.1.0                                                                                                   // 7631\n     * @category Object                                                                                                // 7632\n     * @sig [String] -> {String: *} -> {String: *}                                                                     // 7633\n     * @param {Array} names an array of String property names to omit from the new object                              // 7634\n     * @param {Object} obj The object to copy from                                                                     // 7635\n     * @return {Object} A new object with properties from `names` not on it.                                           // 7636\n     * @see R.pick                                                                                                     // 7637\n     * @example                                                                                                        // 7638\n     *                                                                                                                 // 7639\n     *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}                                            // 7640\n     */                                                                                                                // 7641\n    var omit = _curry2(function omit(names, obj) {                                                                     // 7642\n        var result = {};                                                                                               // 7643\n        for (var prop in obj) {                                                                                        // 7644\n            if (!_contains(prop, names)) {                                                                             // 7645\n                result[prop] = obj[prop];                                                                              // 7646\n            }                                                                                                          // 7647\n        }                                                                                                              // 7648\n        return result;                                                                                                 // 7649\n    });                                                                                                                // 7650\n                                                                                                                       // 7651\n    /**                                                                                                                // 7652\n     * Returns the left-to-right Kleisli composition of the provided functions,                                        // 7653\n     * each of which must return a value of a type supported by [`chain`](#chain).                                     // 7654\n     *                                                                                                                 // 7655\n     * `R.pipeK(f, g, h)` is equivalent to `R.pipe(R.chain(f), R.chain(g), R.chain(h))`.                               // 7656\n     *                                                                                                                 // 7657\n     * @func                                                                                                           // 7658\n     * @memberOf R                                                                                                     // 7659\n     * @since v0.16.0                                                                                                  // 7660\n     * @category Function                                                                                              // 7661\n     * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (m a -> m z)                                       // 7662\n     * @param {...Function}                                                                                            // 7663\n     * @return {Function}                                                                                              // 7664\n     * @see R.composeK                                                                                                 // 7665\n     * @example                                                                                                        // 7666\n     *                                                                                                                 // 7667\n     *      //  parseJson :: String -> Maybe *                                                                         // 7668\n     *      //  get :: String -> Object -> Maybe *                                                                     // 7669\n     *                                                                                                                 // 7670\n     *      //  getStateCode :: Maybe String -> Maybe String                                                           // 7671\n     *      var getStateCode = R.pipeK(                                                                                // 7672\n     *        parseJson,                                                                                               // 7673\n     *        get('user'),                                                                                             // 7674\n     *        get('address'),                                                                                          // 7675\n     *        get('state'),                                                                                            // 7676\n     *        R.compose(Maybe.of, R.toUpper)                                                                           // 7677\n     *      );                                                                                                         // 7678\n     *                                                                                                                 // 7679\n     *      getStateCode(Maybe.of('{\"user\":{\"address\":{\"state\":\"ny\"}}}'));                                             // 7680\n     *      //=> Just('NY')                                                                                            // 7681\n     *      getStateCode(Maybe.of('[Invalid JSON]'));                                                                  // 7682\n     *      //=> Nothing()                                                                                             // 7683\n     */                                                                                                                // 7684\n    var pipeK = function pipeK() {                                                                                     // 7685\n        return composeK.apply(this, reverse(arguments));                                                               // 7686\n    };                                                                                                                 // 7687\n                                                                                                                       // 7688\n    /**                                                                                                                // 7689\n     * Returns the string representation of the given value. `eval`'ing the output                                     // 7690\n     * should result in a value equivalent to the input value. Many of the built-in                                    // 7691\n     * `toString` methods do not satisfy this requirement.                                                             // 7692\n     *                                                                                                                 // 7693\n     * If the given value is an `[object Object]` with a `toString` method other                                       // 7694\n     * than `Object.prototype.toString`, this method is invoked with no arguments                                      // 7695\n     * to produce the return value. This means user-defined constructor functions                                      // 7696\n     * can provide a suitable `toString` method. For example:                                                          // 7697\n     *                                                                                                                 // 7698\n     *     function Point(x, y) {                                                                                      // 7699\n     *       this.x = x;                                                                                               // 7700\n     *       this.y = y;                                                                                               // 7701\n     *     }                                                                                                           // 7702\n     *                                                                                                                 // 7703\n     *     Point.prototype.toString = function() {                                                                     // 7704\n     *       return 'new Point(' + this.x + ', ' + this.y + ')';                                                       // 7705\n     *     };                                                                                                          // 7706\n     *                                                                                                                 // 7707\n     *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'                                                         // 7708\n     *                                                                                                                 // 7709\n     * @func                                                                                                           // 7710\n     * @memberOf R                                                                                                     // 7711\n     * @since v0.14.0                                                                                                  // 7712\n     * @category String                                                                                                // 7713\n     * @sig * -> String                                                                                                // 7714\n     * @param {*} val                                                                                                  // 7715\n     * @return {String}                                                                                                // 7716\n     * @example                                                                                                        // 7717\n     *                                                                                                                 // 7718\n     *      R.toString(42); //=> '42'                                                                                  // 7719\n     *      R.toString('abc'); //=> '\"abc\"'                                                                            // 7720\n     *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'                                                                    // 7721\n     *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'                                // 7722\n     *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'                  // 7723\n     */                                                                                                                // 7724\n    var toString = _curry1(function toString(val) {                                                                    // 7725\n        return _toString(val, []);                                                                                     // 7726\n    });                                                                                                                // 7727\n                                                                                                                       // 7728\n    /**                                                                                                                // 7729\n     * Returns a new list containing only one copy of each element in the original                                     // 7730\n     * list, based upon the value returned by applying the supplied function to                                        // 7731\n     * each list element. Prefers the first item if the supplied function produces                                     // 7732\n     * the same value on two items. `R.equals` is used for comparison.                                                 // 7733\n     *                                                                                                                 // 7734\n     * @func                                                                                                           // 7735\n     * @memberOf R                                                                                                     // 7736\n     * @since v0.16.0                                                                                                  // 7737\n     * @category List                                                                                                  // 7738\n     * @sig (a -> b) -> [a] -> [a]                                                                                     // 7739\n     * @param {Function} fn A function used to produce a value to use during comparisons.                              // 7740\n     * @param {Array} list The array to consider.                                                                      // 7741\n     * @return {Array} The list of unique items.                                                                       // 7742\n     * @example                                                                                                        // 7743\n     *                                                                                                                 // 7744\n     *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]                                            // 7745\n     */                                                                                                                // 7746\n    /* globals Set */                                                                                                  // 7747\n    // distinguishing between +0 and -0 is not supported by Set                                                        // 7748\n    /* falls through */                                                                                                // 7749\n    // these types can all utilise Set                                                                                 // 7750\n    // prevent scan for null by tracking as a boolean                                                                  // 7751\n    /* falls through */                                                                                                // 7752\n    // scan through all previously applied items                                                                       // 7753\n    var uniqBy = _curry2(/* globals Set */                                                                             // 7754\n    typeof Set === 'undefined' ? function uniqBy(fn, list) {                                                           // 7755\n        var idx = 0;                                                                                                   // 7756\n        var applied = [];                                                                                              // 7757\n        var result = [];                                                                                               // 7758\n        var appliedItem, item;                                                                                         // 7759\n        while (idx < list.length) {                                                                                    // 7760\n            item = list[idx];                                                                                          // 7761\n            appliedItem = fn(item);                                                                                    // 7762\n            if (!_contains(appliedItem, applied)) {                                                                    // 7763\n                result.push(item);                                                                                     // 7764\n                applied.push(appliedItem);                                                                             // 7765\n            }                                                                                                          // 7766\n            idx += 1;                                                                                                  // 7767\n        }                                                                                                              // 7768\n        return result;                                                                                                 // 7769\n    } : function uniqBySet(fn, list) {                                                                                 // 7770\n        var set = new Set();                                                                                           // 7771\n        var applied = [];                                                                                              // 7772\n        var prevSetSize = 0;                                                                                           // 7773\n        var result = [];                                                                                               // 7774\n        var nullExists = false;                                                                                        // 7775\n        var negZeroExists = false;                                                                                     // 7776\n        var idx = 0;                                                                                                   // 7777\n        var appliedItem, item, newSetSize;                                                                             // 7778\n        while (idx < list.length) {                                                                                    // 7779\n            item = list[idx];                                                                                          // 7780\n            appliedItem = fn(item);                                                                                    // 7781\n            switch (typeof appliedItem) {                                                                              // 7782\n            case 'number':                                                                                             // 7783\n                // distinguishing between +0 and -0 is not supported by Set                                            // 7784\n                if (appliedItem === 0 && !negZeroExists && 1 / appliedItem === -Infinity) {                            // 7785\n                    negZeroExists = true;                                                                              // 7786\n                    result.push(item);                                                                                 // 7787\n                    break;                                                                                             // 7788\n                }                                                                                                      // 7789\n            /* falls through */                                                                                        // 7790\n            case 'string':                                                                                             // 7791\n            case 'boolean':                                                                                            // 7792\n            case 'function':                                                                                           // 7793\n            case 'undefined':                                                                                          // 7794\n                // these types can all utilise Set                                                                     // 7795\n                set.add(appliedItem);                                                                                  // 7796\n                newSetSize = set.size;                                                                                 // 7797\n                if (newSetSize > prevSetSize) {                                                                        // 7798\n                    result.push(item);                                                                                 // 7799\n                    prevSetSize = newSetSize;                                                                          // 7800\n                }                                                                                                      // 7801\n                break;                                                                                                 // 7802\n            case 'object':                                                                                             // 7803\n                if (appliedItem === null) {                                                                            // 7804\n                    if (!nullExists) {                                                                                 // 7805\n                        // prevent scan for null by tracking as a boolean                                              // 7806\n                        nullExists = true;                                                                             // 7807\n                        result.push(null);                                                                             // 7808\n                    }                                                                                                  // 7809\n                    break;                                                                                             // 7810\n                }                                                                                                      // 7811\n            /* falls through */                                                                                        // 7812\n            default:                                                                                                   // 7813\n                // scan through all previously applied items                                                           // 7814\n                if (!_contains(appliedItem, applied)) {                                                                // 7815\n                    applied.push(appliedItem);                                                                         // 7816\n                    result.push(item);                                                                                 // 7817\n                }                                                                                                      // 7818\n            }                                                                                                          // 7819\n            idx += 1;                                                                                                  // 7820\n        }                                                                                                              // 7821\n        return result;                                                                                                 // 7822\n    });                                                                                                                // 7823\n                                                                                                                       // 7824\n    /**                                                                                                                // 7825\n     * Returns a new list without values in the first argument.                                                        // 7826\n     * `R.equals` is used to determine equality.                                                                       // 7827\n     *                                                                                                                 // 7828\n     * Acts as a transducer if a transformer is given in list position.                                                // 7829\n     *                                                                                                                 // 7830\n     * @func                                                                                                           // 7831\n     * @memberOf R                                                                                                     // 7832\n     * @since 0.19.0                                                                                                   // 7833\n     * @category List                                                                                                  // 7834\n     * @sig [a] -> [a] -> [a]                                                                                          // 7835\n     * @param {Array} list1 The values to be removed from `list2`.                                                     // 7836\n     * @param {Array} list2 The array to remove values from.                                                           // 7837\n     * @return {Array} The new array without values in `list1`.                                                        // 7838\n     * @see R.transduce                                                                                                // 7839\n     * @example                                                                                                        // 7840\n     *                                                                                                                 // 7841\n     *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]                                                            // 7842\n     */                                                                                                                // 7843\n    var without = _curry2(function (xs, list) {                                                                        // 7844\n        return reject(flip(_contains)(xs), list);                                                                      // 7845\n    });                                                                                                                // 7846\n                                                                                                                       // 7847\n    /**                                                                                                                // 7848\n     * Takes a function `f` and returns a function `g` such that:                                                      // 7849\n     *                                                                                                                 // 7850\n     *   - applying `g` to zero or more arguments will give __true__ if applying                                       // 7851\n     *     the same arguments to `f` gives a logical __false__ value; and                                              // 7852\n     *                                                                                                                 // 7853\n     *   - applying `g` to zero or more arguments will give __false__ if applying                                      // 7854\n     *     the same arguments to `f` gives a logical __true__ value.                                                   // 7855\n     *                                                                                                                 // 7856\n     * `R.complement` will work on all other functors as well.                                                         // 7857\n     *                                                                                                                 // 7858\n     * @func                                                                                                           // 7859\n     * @memberOf R                                                                                                     // 7860\n     * @since v0.12.0                                                                                                  // 7861\n     * @category Logic                                                                                                 // 7862\n     * @sig (*... -> *) -> (*... -> Boolean)                                                                           // 7863\n     * @param {Function} f                                                                                             // 7864\n     * @return {Function}                                                                                              // 7865\n     * @see R.not                                                                                                      // 7866\n     * @example                                                                                                        // 7867\n     *                                                                                                                 // 7868\n     *      var isEven = n => n % 2 === 0;                                                                             // 7869\n     *      var isOdd = R.complement(isEven);                                                                          // 7870\n     *      isOdd(21); //=> true                                                                                       // 7871\n     *      isOdd(42); //=> false                                                                                      // 7872\n     */                                                                                                                // 7873\n    var complement = lift(not);                                                                                        // 7874\n                                                                                                                       // 7875\n    /**                                                                                                                // 7876\n     * Turns a named method with a specified arity into a function that can be                                         // 7877\n     * called directly supplied with arguments and a target object.                                                    // 7878\n     *                                                                                                                 // 7879\n     * The returned function is curried and accepts `arity + 1` parameters where                                       // 7880\n     * the final parameter is the target object.                                                                       // 7881\n     *                                                                                                                 // 7882\n     * @func                                                                                                           // 7883\n     * @memberOf R                                                                                                     // 7884\n     * @since v0.1.0                                                                                                   // 7885\n     * @category Function                                                                                              // 7886\n     * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)                                                    // 7887\n     * @param {Number} arity Number of arguments the returned function should take                                     // 7888\n     *        before the target object.                                                                                // 7889\n     * @param {String} method Name of the method to call.                                                              // 7890\n     * @return {Function} A new curried function.                                                                      // 7891\n     * @example                                                                                                        // 7892\n     *                                                                                                                 // 7893\n     *      var sliceFrom = R.invoker(1, 'slice');                                                                     // 7894\n     *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'                                                              // 7895\n     *      var sliceFrom6 = R.invoker(2, 'slice')(6);                                                                 // 7896\n     *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'                                                                  // 7897\n     */                                                                                                                // 7898\n    var invoker = _curry2(function invoker(arity, method) {                                                            // 7899\n        return curryN(arity + 1, function () {                                                                         // 7900\n            var target = arguments[arity];                                                                             // 7901\n            if (target != null && is(Function, target[method])) {                                                      // 7902\n                return target[method].apply(target, _slice(arguments, 0, arity));                                      // 7903\n            }                                                                                                          // 7904\n            throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');                  // 7905\n        });                                                                                                            // 7906\n    });                                                                                                                // 7907\n                                                                                                                       // 7908\n    /**                                                                                                                // 7909\n     * Returns a string made by inserting the `separator` between each element and                                     // 7910\n     * concatenating all the elements into a single string.                                                            // 7911\n     *                                                                                                                 // 7912\n     * @func                                                                                                           // 7913\n     * @memberOf R                                                                                                     // 7914\n     * @since v0.1.0                                                                                                   // 7915\n     * @category List                                                                                                  // 7916\n     * @sig String -> [a] -> String                                                                                    // 7917\n     * @param {Number|String} separator The string used to separate the elements.                                      // 7918\n     * @param {Array} xs The elements to join into a string.                                                           // 7919\n     * @return {String} str The string made by concatenating `xs` with `separator`.                                    // 7920\n     * @see R.split                                                                                                    // 7921\n     * @example                                                                                                        // 7922\n     *                                                                                                                 // 7923\n     *      var spacer = R.join(' ');                                                                                  // 7924\n     *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'                                                                    // 7925\n     *      R.join('|', [1, 2, 3]);    //=> '1|2|3'                                                                    // 7926\n     */                                                                                                                // 7927\n    var join = invoker(1, 'join');                                                                                     // 7928\n                                                                                                                       // 7929\n    /**                                                                                                                // 7930\n     * Creates a new function that, when invoked, caches the result of calling `fn`                                    // 7931\n     * for a given argument set and returns the result. Subsequent calls to the                                        // 7932\n     * memoized `fn` with the same argument set will not result in an additional                                       // 7933\n     * call to `fn`; instead, the cached result for that set of arguments will be                                      // 7934\n     * returned.                                                                                                       // 7935\n     *                                                                                                                 // 7936\n     * @func                                                                                                           // 7937\n     * @memberOf R                                                                                                     // 7938\n     * @since v0.1.0                                                                                                   // 7939\n     * @category Function                                                                                              // 7940\n     * @sig (*... -> a) -> (*... -> a)                                                                                 // 7941\n     * @param {Function} fn The function to memoize.                                                                   // 7942\n     * @return {Function} Memoized version of `fn`.                                                                    // 7943\n     * @example                                                                                                        // 7944\n     *                                                                                                                 // 7945\n     *      var count = 0;                                                                                             // 7946\n     *      var factorial = R.memoize(n => {                                                                           // 7947\n     *        count += 1;                                                                                              // 7948\n     *        return R.product(R.range(1, n + 1));                                                                     // 7949\n     *      });                                                                                                        // 7950\n     *      factorial(5); //=> 120                                                                                     // 7951\n     *      factorial(5); //=> 120                                                                                     // 7952\n     *      factorial(5); //=> 120                                                                                     // 7953\n     *      count; //=> 1                                                                                              // 7954\n     */                                                                                                                // 7955\n    var memoize = _curry1(function memoize(fn) {                                                                       // 7956\n        var cache = {};                                                                                                // 7957\n        return _arity(fn.length, function () {                                                                         // 7958\n            var key = toString(arguments);                                                                             // 7959\n            if (!_has(key, cache)) {                                                                                   // 7960\n                cache[key] = fn.apply(this, arguments);                                                                // 7961\n            }                                                                                                          // 7962\n            return cache[key];                                                                                         // 7963\n        });                                                                                                            // 7964\n    });                                                                                                                // 7965\n                                                                                                                       // 7966\n    /**                                                                                                                // 7967\n     * Splits a string into an array of strings based on the given                                                     // 7968\n     * separator.                                                                                                      // 7969\n     *                                                                                                                 // 7970\n     * @func                                                                                                           // 7971\n     * @memberOf R                                                                                                     // 7972\n     * @since v0.1.0                                                                                                   // 7973\n     * @category String                                                                                                // 7974\n     * @sig (String | RegExp) -> String -> [String]                                                                    // 7975\n     * @param {String|RegExp} sep The pattern.                                                                         // 7976\n     * @param {String} str The string to separate into an array.                                                       // 7977\n     * @return {Array} The array of strings from `str` separated by `str`.                                             // 7978\n     * @see R.join                                                                                                     // 7979\n     * @example                                                                                                        // 7980\n     *                                                                                                                 // 7981\n     *      var pathComponents = R.split('/');                                                                         // 7982\n     *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']                        // 7983\n     *                                                                                                                 // 7984\n     *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']                                              // 7985\n     */                                                                                                                // 7986\n    var split = invoker(1, 'split');                                                                                   // 7987\n                                                                                                                       // 7988\n    /**                                                                                                                // 7989\n     * Determines whether a given string matches a given regular expression.                                           // 7990\n     *                                                                                                                 // 7991\n     * @func                                                                                                           // 7992\n     * @memberOf R                                                                                                     // 7993\n     * @since v0.12.0                                                                                                  // 7994\n     * @category String                                                                                                // 7995\n     * @sig RegExp -> String -> Boolean                                                                                // 7996\n     * @param {RegExp} pattern                                                                                         // 7997\n     * @param {String} str                                                                                             // 7998\n     * @return {Boolean}                                                                                               // 7999\n     * @see R.match                                                                                                    // 8000\n     * @example                                                                                                        // 8001\n     *                                                                                                                 // 8002\n     *      R.test(/^x/, 'xyz'); //=> true                                                                             // 8003\n     *      R.test(/^y/, 'xyz'); //=> false                                                                            // 8004\n     */                                                                                                                // 8005\n    var test = _curry2(function test(pattern, str) {                                                                   // 8006\n        if (!_isRegExp(pattern)) {                                                                                     // 8007\n            throw new TypeError('\\u2018test\\u2019 requires a value of type RegExp as its first argument; received ' + toString(pattern));\n        }                                                                                                              // 8009\n        return _cloneRegExp(pattern).test(str);                                                                        // 8010\n    });                                                                                                                // 8011\n                                                                                                                       // 8012\n    /**                                                                                                                // 8013\n     * The lower case version of a string.                                                                             // 8014\n     *                                                                                                                 // 8015\n     * @func                                                                                                           // 8016\n     * @memberOf R                                                                                                     // 8017\n     * @since v0.9.0                                                                                                   // 8018\n     * @category String                                                                                                // 8019\n     * @sig String -> String                                                                                           // 8020\n     * @param {String} str The string to lower case.                                                                   // 8021\n     * @return {String} The lower case version of `str`.                                                               // 8022\n     * @see R.toUpper                                                                                                  // 8023\n     * @example                                                                                                        // 8024\n     *                                                                                                                 // 8025\n     *      R.toLower('XYZ'); //=> 'xyz'                                                                               // 8026\n     */                                                                                                                // 8027\n    var toLower = invoker(0, 'toLowerCase');                                                                           // 8028\n                                                                                                                       // 8029\n    /**                                                                                                                // 8030\n     * The upper case version of a string.                                                                             // 8031\n     *                                                                                                                 // 8032\n     * @func                                                                                                           // 8033\n     * @memberOf R                                                                                                     // 8034\n     * @since v0.9.0                                                                                                   // 8035\n     * @category String                                                                                                // 8036\n     * @sig String -> String                                                                                           // 8037\n     * @param {String} str The string to upper case.                                                                   // 8038\n     * @return {String} The upper case version of `str`.                                                               // 8039\n     * @see R.toLower                                                                                                  // 8040\n     * @example                                                                                                        // 8041\n     *                                                                                                                 // 8042\n     *      R.toUpper('abc'); //=> 'ABC'                                                                               // 8043\n     */                                                                                                                // 8044\n    var toUpper = invoker(0, 'toUpperCase');                                                                           // 8045\n                                                                                                                       // 8046\n    /**                                                                                                                // 8047\n     * Returns a new list containing only one copy of each element in the original                                     // 8048\n     * list. `R.equals` is used to determine equality.                                                                 // 8049\n     *                                                                                                                 // 8050\n     * @func                                                                                                           // 8051\n     * @memberOf R                                                                                                     // 8052\n     * @since v0.1.0                                                                                                   // 8053\n     * @category List                                                                                                  // 8054\n     * @sig [a] -> [a]                                                                                                 // 8055\n     * @param {Array} list The array to consider.                                                                      // 8056\n     * @return {Array} The list of unique items.                                                                       // 8057\n     * @example                                                                                                        // 8058\n     *                                                                                                                 // 8059\n     *      R.uniq([1, 1, 2, 1]); //=> [1, 2]                                                                          // 8060\n     *      R.uniq([1, '1']);     //=> [1, '1']                                                                        // 8061\n     *      R.uniq([[42], [42]]); //=> [[42]]                                                                          // 8062\n     */                                                                                                                // 8063\n    var uniq = uniqBy(identity);                                                                                       // 8064\n                                                                                                                       // 8065\n    /**                                                                                                                // 8066\n     * Returns the result of concatenating the given lists or strings.                                                 // 8067\n     *                                                                                                                 // 8068\n     * Dispatches to the `concat` method of the second argument, if present.                                           // 8069\n     *                                                                                                                 // 8070\n     * @func                                                                                                           // 8071\n     * @memberOf R                                                                                                     // 8072\n     * @since v0.1.0                                                                                                   // 8073\n     * @category List                                                                                                  // 8074\n     * @sig [a] -> [a] -> [a]                                                                                          // 8075\n     * @sig String -> String -> String                                                                                 // 8076\n     * @param {Array|String} a                                                                                         // 8077\n     * @param {Array|String} b                                                                                         // 8078\n     * @return {Array|String}                                                                                          // 8079\n     *                                                                                                                 // 8080\n     * @example                                                                                                        // 8081\n     *                                                                                                                 // 8082\n     *      R.concat([], []); //=> []                                                                                  // 8083\n     *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]                                                    // 8084\n     *      R.concat('ABC', 'DEF'); // 'ABCDEF'                                                                        // 8085\n     */                                                                                                                // 8086\n    var concat = flip(invoker(1, 'concat'));                                                                           // 8087\n                                                                                                                       // 8088\n    /**                                                                                                                // 8089\n     * Combines two lists into a set (i.e. no duplicates) composed of those                                            // 8090\n     * elements common to both lists.                                                                                  // 8091\n     *                                                                                                                 // 8092\n     * @func                                                                                                           // 8093\n     * @memberOf R                                                                                                     // 8094\n     * @since v0.1.0                                                                                                   // 8095\n     * @category Relation                                                                                              // 8096\n     * @sig [*] -> [*] -> [*]                                                                                          // 8097\n     * @param {Array} list1 The first list.                                                                            // 8098\n     * @param {Array} list2 The second list.                                                                           // 8099\n     * @return {Array} The list of elements found in both `list1` and `list2`.                                         // 8100\n     * @see R.intersectionWith                                                                                         // 8101\n     * @example                                                                                                        // 8102\n     *                                                                                                                 // 8103\n     *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]                                                        // 8104\n     */                                                                                                                // 8105\n    var intersection = _curry2(function intersection(list1, list2) {                                                   // 8106\n        return uniq(_filter(flip(_contains)(list1), list2));                                                           // 8107\n    });                                                                                                                // 8108\n                                                                                                                       // 8109\n    /**                                                                                                                // 8110\n     * Finds the set (i.e. no duplicates) of all elements contained in the first or                                    // 8111\n     * second list, but not both.                                                                                      // 8112\n     *                                                                                                                 // 8113\n     * @func                                                                                                           // 8114\n     * @memberOf R                                                                                                     // 8115\n     * @since 0.19.0                                                                                                   // 8116\n     * @category Relation                                                                                              // 8117\n     * @sig [*] -> [*] -> [*]                                                                                          // 8118\n     * @param {Array} list1 The first list.                                                                            // 8119\n     * @param {Array} list2 The second list.                                                                           // 8120\n     * @return {Array} The elements in `list1` or `list2`, but not both.                                               // 8121\n     * @see R.symmetricDifferenceWith                                                                                  // 8122\n     * @example                                                                                                        // 8123\n     *                                                                                                                 // 8124\n     *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]                                            // 8125\n     *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]                                            // 8126\n     */                                                                                                                // 8127\n    var symmetricDifference = _curry2(function symmetricDifference(list1, list2) {                                     // 8128\n        return concat(difference(list1, list2), difference(list2, list1));                                             // 8129\n    });                                                                                                                // 8130\n                                                                                                                       // 8131\n    /**                                                                                                                // 8132\n     * Finds the set (i.e. no duplicates) of all elements contained in the first or                                    // 8133\n     * second list, but not both. Duplication is determined according to the value                                     // 8134\n     * returned by applying the supplied predicate to two list elements.                                               // 8135\n     *                                                                                                                 // 8136\n     * @func                                                                                                           // 8137\n     * @memberOf R                                                                                                     // 8138\n     * @since 0.19.0                                                                                                   // 8139\n     * @category Relation                                                                                              // 8140\n     * @sig (a -> a -> Boolean) -> [a] -> [a] -> [a]                                                                   // 8141\n     * @param {Function} pred A predicate used to test whether two items are equal.                                    // 8142\n     * @param {Array} list1 The first list.                                                                            // 8143\n     * @param {Array} list2 The second list.                                                                           // 8144\n     * @return {Array} The elements in `list1` or `list2`, but not both.                                               // 8145\n     * @see R.symmetricDifference                                                                                      // 8146\n     * @example                                                                                                        // 8147\n     *                                                                                                                 // 8148\n     *      var eqA = R.eqBy(R.prop('a'));                                                                             // 8149\n     *      var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];                                                                 // 8150\n     *      var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];                                                                 // 8151\n     *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]                              // 8152\n     */                                                                                                                // 8153\n    var symmetricDifferenceWith = _curry3(function symmetricDifferenceWith(pred, list1, list2) {                       // 8154\n        return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));                         // 8155\n    });                                                                                                                // 8156\n                                                                                                                       // 8157\n    /**                                                                                                                // 8158\n     * Combines two lists into a set (i.e. no duplicates) composed of the elements                                     // 8159\n     * of each list.                                                                                                   // 8160\n     *                                                                                                                 // 8161\n     * @func                                                                                                           // 8162\n     * @memberOf R                                                                                                     // 8163\n     * @since v0.1.0                                                                                                   // 8164\n     * @category Relation                                                                                              // 8165\n     * @sig [*] -> [*] -> [*]                                                                                          // 8166\n     * @param {Array} as The first list.                                                                               // 8167\n     * @param {Array} bs The second list.                                                                              // 8168\n     * @return {Array} The first and second lists concatenated, with                                                   // 8169\n     *         duplicates removed.                                                                                     // 8170\n     * @example                                                                                                        // 8171\n     *                                                                                                                 // 8172\n     *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]                                                           // 8173\n     */                                                                                                                // 8174\n    var union = _curry2(compose(uniq, _concat));                                                                       // 8175\n                                                                                                                       // 8176\n    var R = {                                                                                                          // 8177\n        F: F,                                                                                                          // 8178\n        T: T,                                                                                                          // 8179\n        __: __,                                                                                                        // 8180\n        add: add,                                                                                                      // 8181\n        addIndex: addIndex,                                                                                            // 8182\n        adjust: adjust,                                                                                                // 8183\n        all: all,                                                                                                      // 8184\n        allPass: allPass,                                                                                              // 8185\n        allUniq: allUniq,                                                                                              // 8186\n        always: always,                                                                                                // 8187\n        and: and,                                                                                                      // 8188\n        any: any,                                                                                                      // 8189\n        anyPass: anyPass,                                                                                              // 8190\n        ap: ap,                                                                                                        // 8191\n        aperture: aperture,                                                                                            // 8192\n        append: append,                                                                                                // 8193\n        apply: apply,                                                                                                  // 8194\n        assoc: assoc,                                                                                                  // 8195\n        assocPath: assocPath,                                                                                          // 8196\n        binary: binary,                                                                                                // 8197\n        bind: bind,                                                                                                    // 8198\n        both: both,                                                                                                    // 8199\n        call: call,                                                                                                    // 8200\n        chain: chain,                                                                                                  // 8201\n        clone: clone,                                                                                                  // 8202\n        commute: commute,                                                                                              // 8203\n        commuteMap: commuteMap,                                                                                        // 8204\n        comparator: comparator,                                                                                        // 8205\n        complement: complement,                                                                                        // 8206\n        compose: compose,                                                                                              // 8207\n        composeK: composeK,                                                                                            // 8208\n        composeP: composeP,                                                                                            // 8209\n        concat: concat,                                                                                                // 8210\n        cond: cond,                                                                                                    // 8211\n        construct: construct,                                                                                          // 8212\n        constructN: constructN,                                                                                        // 8213\n        contains: contains,                                                                                            // 8214\n        converge: converge,                                                                                            // 8215\n        countBy: countBy,                                                                                              // 8216\n        curry: curry,                                                                                                  // 8217\n        curryN: curryN,                                                                                                // 8218\n        dec: dec,                                                                                                      // 8219\n        defaultTo: defaultTo,                                                                                          // 8220\n        difference: difference,                                                                                        // 8221\n        differenceWith: differenceWith,                                                                                // 8222\n        dissoc: dissoc,                                                                                                // 8223\n        dissocPath: dissocPath,                                                                                        // 8224\n        divide: divide,                                                                                                // 8225\n        drop: drop,                                                                                                    // 8226\n        dropLast: dropLast,                                                                                            // 8227\n        dropLastWhile: dropLastWhile,                                                                                  // 8228\n        dropRepeats: dropRepeats,                                                                                      // 8229\n        dropRepeatsWith: dropRepeatsWith,                                                                              // 8230\n        dropWhile: dropWhile,                                                                                          // 8231\n        either: either,                                                                                                // 8232\n        empty: empty,                                                                                                  // 8233\n        eqBy: eqBy,                                                                                                    // 8234\n        eqProps: eqProps,                                                                                              // 8235\n        equals: equals,                                                                                                // 8236\n        evolve: evolve,                                                                                                // 8237\n        filter: filter,                                                                                                // 8238\n        find: find,                                                                                                    // 8239\n        findIndex: findIndex,                                                                                          // 8240\n        findLast: findLast,                                                                                            // 8241\n        findLastIndex: findLastIndex,                                                                                  // 8242\n        flatten: flatten,                                                                                              // 8243\n        flip: flip,                                                                                                    // 8244\n        forEach: forEach,                                                                                              // 8245\n        fromPairs: fromPairs,                                                                                          // 8246\n        groupBy: groupBy,                                                                                              // 8247\n        gt: gt,                                                                                                        // 8248\n        gte: gte,                                                                                                      // 8249\n        has: has,                                                                                                      // 8250\n        hasIn: hasIn,                                                                                                  // 8251\n        head: head,                                                                                                    // 8252\n        identical: identical,                                                                                          // 8253\n        identity: identity,                                                                                            // 8254\n        ifElse: ifElse,                                                                                                // 8255\n        inc: inc,                                                                                                      // 8256\n        indexBy: indexBy,                                                                                              // 8257\n        indexOf: indexOf,                                                                                              // 8258\n        init: init,                                                                                                    // 8259\n        insert: insert,                                                                                                // 8260\n        insertAll: insertAll,                                                                                          // 8261\n        intersection: intersection,                                                                                    // 8262\n        intersectionWith: intersectionWith,                                                                            // 8263\n        intersperse: intersperse,                                                                                      // 8264\n        into: into,                                                                                                    // 8265\n        invert: invert,                                                                                                // 8266\n        invertObj: invertObj,                                                                                          // 8267\n        invoker: invoker,                                                                                              // 8268\n        is: is,                                                                                                        // 8269\n        isArrayLike: isArrayLike,                                                                                      // 8270\n        isEmpty: isEmpty,                                                                                              // 8271\n        isNil: isNil,                                                                                                  // 8272\n        join: join,                                                                                                    // 8273\n        juxt: juxt,                                                                                                    // 8274\n        keys: keys,                                                                                                    // 8275\n        keysIn: keysIn,                                                                                                // 8276\n        last: last,                                                                                                    // 8277\n        lastIndexOf: lastIndexOf,                                                                                      // 8278\n        length: length,                                                                                                // 8279\n        lens: lens,                                                                                                    // 8280\n        lensIndex: lensIndex,                                                                                          // 8281\n        lensPath: lensPath,                                                                                            // 8282\n        lensProp: lensProp,                                                                                            // 8283\n        lift: lift,                                                                                                    // 8284\n        liftN: liftN,                                                                                                  // 8285\n        lt: lt,                                                                                                        // 8286\n        lte: lte,                                                                                                      // 8287\n        map: map,                                                                                                      // 8288\n        mapAccum: mapAccum,                                                                                            // 8289\n        mapAccumRight: mapAccumRight,                                                                                  // 8290\n        mapObjIndexed: mapObjIndexed,                                                                                  // 8291\n        match: match,                                                                                                  // 8292\n        mathMod: mathMod,                                                                                              // 8293\n        max: max,                                                                                                      // 8294\n        maxBy: maxBy,                                                                                                  // 8295\n        mean: mean,                                                                                                    // 8296\n        median: median,                                                                                                // 8297\n        memoize: memoize,                                                                                              // 8298\n        merge: merge,                                                                                                  // 8299\n        mergeAll: mergeAll,                                                                                            // 8300\n        mergeWith: mergeWith,                                                                                          // 8301\n        mergeWithKey: mergeWithKey,                                                                                    // 8302\n        min: min,                                                                                                      // 8303\n        minBy: minBy,                                                                                                  // 8304\n        modulo: modulo,                                                                                                // 8305\n        multiply: multiply,                                                                                            // 8306\n        nAry: nAry,                                                                                                    // 8307\n        negate: negate,                                                                                                // 8308\n        none: none,                                                                                                    // 8309\n        not: not,                                                                                                      // 8310\n        nth: nth,                                                                                                      // 8311\n        nthArg: nthArg,                                                                                                // 8312\n        objOf: objOf,                                                                                                  // 8313\n        of: of,                                                                                                        // 8314\n        omit: omit,                                                                                                    // 8315\n        once: once,                                                                                                    // 8316\n        or: or,                                                                                                        // 8317\n        over: over,                                                                                                    // 8318\n        pair: pair,                                                                                                    // 8319\n        partial: partial,                                                                                              // 8320\n        partialRight: partialRight,                                                                                    // 8321\n        partition: partition,                                                                                          // 8322\n        path: path,                                                                                                    // 8323\n        pathEq: pathEq,                                                                                                // 8324\n        pathOr: pathOr,                                                                                                // 8325\n        pathSatisfies: pathSatisfies,                                                                                  // 8326\n        pick: pick,                                                                                                    // 8327\n        pickAll: pickAll,                                                                                              // 8328\n        pickBy: pickBy,                                                                                                // 8329\n        pipe: pipe,                                                                                                    // 8330\n        pipeK: pipeK,                                                                                                  // 8331\n        pipeP: pipeP,                                                                                                  // 8332\n        pluck: pluck,                                                                                                  // 8333\n        prepend: prepend,                                                                                              // 8334\n        product: product,                                                                                              // 8335\n        project: project,                                                                                              // 8336\n        prop: prop,                                                                                                    // 8337\n        propEq: propEq,                                                                                                // 8338\n        propIs: propIs,                                                                                                // 8339\n        propOr: propOr,                                                                                                // 8340\n        propSatisfies: propSatisfies,                                                                                  // 8341\n        props: props,                                                                                                  // 8342\n        range: range,                                                                                                  // 8343\n        reduce: reduce,                                                                                                // 8344\n        reduceRight: reduceRight,                                                                                      // 8345\n        reduced: reduced,                                                                                              // 8346\n        reject: reject,                                                                                                // 8347\n        remove: remove,                                                                                                // 8348\n        repeat: repeat,                                                                                                // 8349\n        replace: replace,                                                                                              // 8350\n        reverse: reverse,                                                                                              // 8351\n        scan: scan,                                                                                                    // 8352\n        sequence: sequence,                                                                                            // 8353\n        set: set,                                                                                                      // 8354\n        slice: slice,                                                                                                  // 8355\n        sort: sort,                                                                                                    // 8356\n        sortBy: sortBy,                                                                                                // 8357\n        split: split,                                                                                                  // 8358\n        splitAt: splitAt,                                                                                              // 8359\n        splitEvery: splitEvery,                                                                                        // 8360\n        splitWhen: splitWhen,                                                                                          // 8361\n        subtract: subtract,                                                                                            // 8362\n        sum: sum,                                                                                                      // 8363\n        symmetricDifference: symmetricDifference,                                                                      // 8364\n        symmetricDifferenceWith: symmetricDifferenceWith,                                                              // 8365\n        tail: tail,                                                                                                    // 8366\n        take: take,                                                                                                    // 8367\n        takeLast: takeLast,                                                                                            // 8368\n        takeLastWhile: takeLastWhile,                                                                                  // 8369\n        takeWhile: takeWhile,                                                                                          // 8370\n        tap: tap,                                                                                                      // 8371\n        test: test,                                                                                                    // 8372\n        times: times,                                                                                                  // 8373\n        toLower: toLower,                                                                                              // 8374\n        toPairs: toPairs,                                                                                              // 8375\n        toPairsIn: toPairsIn,                                                                                          // 8376\n        toString: toString,                                                                                            // 8377\n        toUpper: toUpper,                                                                                              // 8378\n        transduce: transduce,                                                                                          // 8379\n        transpose: transpose,                                                                                          // 8380\n        traverse: traverse,                                                                                            // 8381\n        trim: trim,                                                                                                    // 8382\n        type: type,                                                                                                    // 8383\n        unapply: unapply,                                                                                              // 8384\n        unary: unary,                                                                                                  // 8385\n        uncurryN: uncurryN,                                                                                            // 8386\n        unfold: unfold,                                                                                                // 8387\n        union: union,                                                                                                  // 8388\n        unionWith: unionWith,                                                                                          // 8389\n        uniq: uniq,                                                                                                    // 8390\n        uniqBy: uniqBy,                                                                                                // 8391\n        uniqWith: uniqWith,                                                                                            // 8392\n        unless: unless,                                                                                                // 8393\n        unnest: unnest,                                                                                                // 8394\n        update: update,                                                                                                // 8395\n        useWith: useWith,                                                                                              // 8396\n        values: values,                                                                                                // 8397\n        valuesIn: valuesIn,                                                                                            // 8398\n        view: view,                                                                                                    // 8399\n        when: when,                                                                                                    // 8400\n        where: where,                                                                                                  // 8401\n        whereEq: whereEq,                                                                                              // 8402\n        without: without,                                                                                              // 8403\n        wrap: wrap,                                                                                                    // 8404\n        xprod: xprod,                                                                                                  // 8405\n        zip: zip,                                                                                                      // 8406\n        zipObj: zipObj,                                                                                                // 8407\n        zipWith: zipWith                                                                                               // 8408\n    };                                                                                                                 // 8409\n  /* eslint-env amd */                                                                                                 // 8410\n                                                                                                                       // 8411\n  /* TEST_ENTRY_POINT */                                                                                               // 8412\n                                                                                                                       // 8413\n  if (typeof exports === 'object') {                                                                                   // 8414\n    module.exports = R;                                                                                                // 8415\n  } else if (typeof define === 'function' && define.amd) {                                                             // 8416\n    define(function() { return R; });                                                                                  // 8417\n  } else {                                                                                                             // 8418\n    this.R = R;                                                                                                        // 8419\n  }                                                                                                                    // 8420\n                                                                                                                       // 8421\n}.call(this));                                                                                                         // 8422\n                                                                                                                       // 8423\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ramda_ramda/meteor-post.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nR = module.exports;                                                                                                    // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['ramda:ramda'] = {}, {\n  R: R\n});\n\n})();\n","servePath":"/packages/ramda_ramda.js","sourceMap":{"version":3,"sources":["/packages/ramda_ramda/meteor-pre.js","/packages/ramda_ramda/upstream/dist/ramda.js","/packages/ramda_ramda/meteor-post.js"],"names":[],"mappingstuQA;AACA,2H","file":"/packages/ramda_ramda.js","sourcesContent":["// Defining this will trick upstream/ramda.js into putting its exports into module.exports\nmodule = {};\n\n// This also needed to complete the trick...\nexports = {};\n","//  Ramda v0.19.0\n//  https://github.com/ramda/ramda\n//  (c) 2013-2015 Scott Sauyet, Michael Hurley, and David Chambers\n//  Ramda may be freely distributed under the MIT license.\n\n;(function() {\n\n  'use strict';\n\n  /**\n     * A special placeholder value used to specify \"gaps\" within curried functions,\n     * allowing partial application of any combination of arguments, regardless of\n     * their positions.\n     *\n     * If `g` is a curried ternary function and `_` is `R.__`, the following are\n     * equivalent:\n     *\n     *   - `g(1, 2, 3)`\n     *   - `g(_, 2, 3)(1)`\n     *   - `g(_, _, 3)(1)(2)`\n     *   - `g(_, _, 3)(1, 2)`\n     *   - `g(_, 2, _)(1, 3)`\n     *   - `g(_, 2)(1)(3)`\n     *   - `g(_, 2)(1, 3)`\n     *   - `g(_, 2)(_, 3)(1)`\n     *\n     * @constant\n     * @memberOf R\n     * @since v0.6.0\n     * @category Function\n     * @example\n     *\n     *      var greet = R.replace('{name}', R.__, 'Hello, {name}!');\n     *      greet('Alice'); //=> 'Hello, Alice!'\n     */\n    var __ = { '@@functional/placeholder': true };\n\n    /* eslint-disable no-unused-vars */\n    var _arity = function _arity(n, fn) {\n        /* eslint-disable no-unused-vars */\n        switch (n) {\n        case 0:\n            return function () {\n                return fn.apply(this, arguments);\n            };\n        case 1:\n            return function (a0) {\n                return fn.apply(this, arguments);\n            };\n        case 2:\n            return function (a0, a1) {\n                return fn.apply(this, arguments);\n            };\n        case 3:\n            return function (a0, a1, a2) {\n                return fn.apply(this, arguments);\n            };\n        case 4:\n            return function (a0, a1, a2, a3) {\n                return fn.apply(this, arguments);\n            };\n        case 5:\n            return function (a0, a1, a2, a3, a4) {\n                return fn.apply(this, arguments);\n            };\n        case 6:\n            return function (a0, a1, a2, a3, a4, a5) {\n                return fn.apply(this, arguments);\n            };\n        case 7:\n            return function (a0, a1, a2, a3, a4, a5, a6) {\n                return fn.apply(this, arguments);\n            };\n        case 8:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n                return fn.apply(this, arguments);\n            };\n        case 9:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n                return fn.apply(this, arguments);\n            };\n        case 10:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n                return fn.apply(this, arguments);\n            };\n        default:\n            throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n        }\n    };\n\n    var _arrayFromIterator = function _arrayFromIterator(iter) {\n        var list = [];\n        var next;\n        while (!(next = iter.next()).done) {\n            list.push(next.value);\n        }\n        return list;\n    };\n\n    var _cloneRegExp = function _cloneRegExp(pattern) {\n        return new RegExp(pattern.source, (pattern.global ? 'g' : '') + (pattern.ignoreCase ? 'i' : '') + (pattern.multiline ? 'm' : '') + (pattern.sticky ? 'y' : '') + (pattern.unicode ? 'u' : ''));\n    };\n\n    var _complement = function _complement(f) {\n        return function () {\n            return !f.apply(this, arguments);\n        };\n    };\n\n    /**\n     * Private `concat` function to merge two array-like objects.\n     *\n     * @private\n     * @param {Array|Arguments} [set1=[]] An array-like object.\n     * @param {Array|Arguments} [set2=[]] An array-like object.\n     * @return {Array} A new, merged array.\n     * @example\n     *\n     *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n     */\n    var _concat = function _concat(set1, set2) {\n        set1 = set1 || [];\n        set2 = set2 || [];\n        var idx;\n        var len1 = set1.length;\n        var len2 = set2.length;\n        var result = [];\n        idx = 0;\n        while (idx < len1) {\n            result[result.length] = set1[idx];\n            idx += 1;\n        }\n        idx = 0;\n        while (idx < len2) {\n            result[result.length] = set2[idx];\n            idx += 1;\n        }\n        return result;\n    };\n\n    var _containsWith = function _containsWith(pred, x, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len) {\n            if (pred(x, list[idx])) {\n                return true;\n            }\n            idx += 1;\n        }\n        return false;\n    };\n\n    var _filter = function _filter(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        var result = [];\n        while (idx < len) {\n            if (fn(list[idx])) {\n                result[result.length] = list[idx];\n            }\n            idx += 1;\n        }\n        return result;\n    };\n\n    var _forceReduced = function _forceReduced(x) {\n        return {\n            '@@transducer/value': x,\n            '@@transducer/reduced': true\n        };\n    };\n\n    var _has = function _has(prop, obj) {\n        return Object.prototype.hasOwnProperty.call(obj, prop);\n    };\n\n    var _identity = function _identity(x) {\n        return x;\n    };\n\n    var _isArguments = function () {\n        var toString = Object.prototype.toString;\n        return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {\n            return toString.call(x) === '[object Arguments]';\n        } : function _isArguments(x) {\n            return _has('callee', x);\n        };\n    }();\n\n    /**\n     * Tests whether or not an object is an array.\n     *\n     * @private\n     * @param {*} val The object to test.\n     * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n     * @example\n     *\n     *      _isArray([]); //=> true\n     *      _isArray(null); //=> false\n     *      _isArray({}); //=> false\n     */\n    var _isArray = Array.isArray || function _isArray(val) {\n        return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';\n    };\n\n    /**\n     * Determine if the passed argument is an integer.\n     *\n     * @private\n     * @param {*} n\n     * @category Type\n     * @return {Boolean}\n     */\n    var _isInteger = Number.isInteger || function _isInteger(n) {\n        return n << 0 === n;\n    };\n\n    var _isNumber = function _isNumber(x) {\n        return Object.prototype.toString.call(x) === '[object Number]';\n    };\n\n    var _isObject = function _isObject(x) {\n        return Object.prototype.toString.call(x) === '[object Object]';\n    };\n\n    var _isPlaceholder = function _isPlaceholder(a) {\n        return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n    };\n\n    var _isRegExp = function _isRegExp(x) {\n        return Object.prototype.toString.call(x) === '[object RegExp]';\n    };\n\n    var _isString = function _isString(x) {\n        return Object.prototype.toString.call(x) === '[object String]';\n    };\n\n    var _isTransformer = function _isTransformer(obj) {\n        return typeof obj['@@transducer/step'] === 'function';\n    };\n\n    var _map = function _map(fn, functor) {\n        var idx = 0;\n        var len = functor.length;\n        var result = Array(len);\n        while (idx < len) {\n            result[idx] = fn(functor[idx]);\n            idx += 1;\n        }\n        return result;\n    };\n\n    var _of = function _of(x) {\n        return [x];\n    };\n\n    var _pipe = function _pipe(f, g) {\n        return function () {\n            return g.call(this, f.apply(this, arguments));\n        };\n    };\n\n    var _pipeP = function _pipeP(f, g) {\n        return function () {\n            var ctx = this;\n            return f.apply(ctx, arguments).then(function (x) {\n                return g.call(ctx, x);\n            });\n        };\n    };\n\n    // \\b matches word boundary; [\\b] matches backspace\n    var _quote = function _quote(s) {\n        var escaped = s.replace(/\\\\/g, '\\\\\\\\').replace(/[\\b]/g, '\\\\b')    // \\b matches word boundary; [\\b] matches backspace\n    .replace(/\\f/g, '\\\\f').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\t/g, '\\\\t').replace(/\\v/g, '\\\\v').replace(/\\0/g, '\\\\0');\n        return '\"' + escaped.replace(/\"/g, '\\\\\"') + '\"';\n    };\n\n    var _reduced = function _reduced(x) {\n        return x && x['@@transducer/reduced'] ? x : {\n            '@@transducer/value': x,\n            '@@transducer/reduced': true\n        };\n    };\n\n    /**\n     * An optimized, private array `slice` implementation.\n     *\n     * @private\n     * @param {Arguments|Array} args The array or arguments object to consider.\n     * @param {Number} [from=0] The array index to slice from, inclusive.\n     * @param {Number} [to=args.length] The array index to slice to, exclusive.\n     * @return {Array} A new, sliced array.\n     * @example\n     *\n     *      _slice([1, 2, 3, 4, 5], 1, 3); //=> [2, 3]\n     *\n     *      var firstThreeArgs = function(a, b, c, d) {\n     *        return _slice(arguments, 0, 3);\n     *      };\n     *      firstThreeArgs(1, 2, 3, 4); //=> [1, 2, 3]\n     */\n    var _slice = function _slice(args, from, to) {\n        switch (arguments.length) {\n        case 1:\n            return _slice(args, 0, args.length);\n        case 2:\n            return _slice(args, from, args.length);\n        default:\n            var list = [];\n            var idx = 0;\n            var len = Math.max(0, Math.min(args.length, to) - from);\n            while (idx < len) {\n                list[idx] = args[from + idx];\n                idx += 1;\n            }\n            return list;\n        }\n    };\n\n    /**\n     * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n     */\n    var _toISOString = function () {\n        var pad = function pad(n) {\n            return (n < 10 ? '0' : '') + n;\n        };\n        return typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {\n            return d.toISOString();\n        } : function _toISOString(d) {\n            return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';\n        };\n    }();\n\n    var _xfBase = {\n        init: function () {\n            return this.xf['@@transducer/init']();\n        },\n        result: function (result) {\n            return this.xf['@@transducer/result'](result);\n        }\n    };\n\n    var _xwrap = function () {\n        function XWrap(fn) {\n            this.f = fn;\n        }\n        XWrap.prototype['@@transducer/init'] = function () {\n            throw new Error('init not implemented on XWrap');\n        };\n        XWrap.prototype['@@transducer/result'] = function (acc) {\n            return acc;\n        };\n        XWrap.prototype['@@transducer/step'] = function (acc, x) {\n            return this.f(acc, x);\n        };\n        return function _xwrap(fn) {\n            return new XWrap(fn);\n        };\n    }();\n\n    var _aperture = function _aperture(n, list) {\n        var idx = 0;\n        var limit = list.length - (n - 1);\n        var acc = new Array(limit >= 0 ? limit : 0);\n        while (idx < limit) {\n            acc[idx] = _slice(list, idx, idx + n);\n            idx += 1;\n        }\n        return acc;\n    };\n\n    /**\n     * Similar to hasMethod, this checks whether a function has a [methodname]\n     * function. If it isn't an array it will execute that function otherwise it\n     * will default to the ramda implementation.\n     *\n     * @private\n     * @param {Function} fn ramda implemtation\n     * @param {String} methodname property to check for a custom implementation\n     * @return {Object} Whatever the return value of the method is.\n     */\n    var _checkForMethod = function _checkForMethod(methodname, fn) {\n        return function () {\n            var length = arguments.length;\n            if (length === 0) {\n                return fn();\n            }\n            var obj = arguments[length - 1];\n            return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, _slice(arguments, 0, length - 1));\n        };\n    };\n\n    /**\n     * Optimized internal one-arity curry function.\n     *\n     * @private\n     * @category Function\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curry1 = function _curry1(fn) {\n        return function f1(a) {\n            if (arguments.length === 0 || _isPlaceholder(a)) {\n                return f1;\n            } else {\n                return fn.apply(this, arguments);\n            }\n        };\n    };\n\n    /**\n     * Optimized internal two-arity curry function.\n     *\n     * @private\n     * @category Function\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curry2 = function _curry2(fn) {\n        return function f2(a, b) {\n            switch (arguments.length) {\n            case 0:\n                return f2;\n            case 1:\n                return _isPlaceholder(a) ? f2 : _curry1(function (_b) {\n                    return fn(a, _b);\n                });\n            default:\n                return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {\n                    return fn(_a, b);\n                }) : _isPlaceholder(b) ? _curry1(function (_b) {\n                    return fn(a, _b);\n                }) : fn(a, b);\n            }\n        };\n    };\n\n    /**\n     * Optimized internal three-arity curry function.\n     *\n     * @private\n     * @category Function\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curry3 = function _curry3(fn) {\n        return function f3(a, b, c) {\n            switch (arguments.length) {\n            case 0:\n                return f3;\n            case 1:\n                return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {\n                    return fn(a, _b, _c);\n                });\n            case 2:\n                return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {\n                    return fn(_a, b, _c);\n                }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {\n                    return fn(a, _b, _c);\n                }) : _curry1(function (_c) {\n                    return fn(a, b, _c);\n                });\n            default:\n                return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {\n                    return fn(_a, _b, c);\n                }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {\n                    return fn(_a, b, _c);\n                }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {\n                    return fn(a, _b, _c);\n                }) : _isPlaceholder(a) ? _curry1(function (_a) {\n                    return fn(_a, b, c);\n                }) : _isPlaceholder(b) ? _curry1(function (_b) {\n                    return fn(a, _b, c);\n                }) : _isPlaceholder(c) ? _curry1(function (_c) {\n                    return fn(a, b, _c);\n                }) : fn(a, b, c);\n            }\n        };\n    };\n\n    /**\n     * Internal curryN function.\n     *\n     * @private\n     * @category Function\n     * @param {Number} length The arity of the curried function.\n     * @param {Array} received An array of arguments received thus far.\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curryN = function _curryN(length, received, fn) {\n        return function () {\n            var combined = [];\n            var argsIdx = 0;\n            var left = length;\n            var combinedIdx = 0;\n            while (combinedIdx < received.length || argsIdx < arguments.length) {\n                var result;\n                if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {\n                    result = received[combinedIdx];\n                } else {\n                    result = arguments[argsIdx];\n                    argsIdx += 1;\n                }\n                combined[combinedIdx] = result;\n                if (!_isPlaceholder(result)) {\n                    left -= 1;\n                }\n                combinedIdx += 1;\n            }\n            return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));\n        };\n    };\n\n    /**\n     * Returns a function that dispatches with different strategies based on the\n     * object in list position (last argument). If it is an array, executes [fn].\n     * Otherwise, if it has a function with [methodname], it will execute that\n     * function (functor case). Otherwise, if it is a transformer, uses transducer\n     * [xf] to return a new transformer (transducer case). Otherwise, it will\n     * default to executing [fn].\n     *\n     * @private\n     * @param {String} methodname property to check for a custom implementation\n     * @param {Function} xf transducer to initialize if object is transformer\n     * @param {Function} fn default ramda implementation\n     * @return {Function} A function that dispatches on object in list position\n     */\n    var _dispatchable = function _dispatchable(methodname, xf, fn) {\n        return function () {\n            var length = arguments.length;\n            if (length === 0) {\n                return fn();\n            }\n            var obj = arguments[length - 1];\n            if (!_isArray(obj)) {\n                var args = _slice(arguments, 0, length - 1);\n                if (typeof obj[methodname] === 'function') {\n                    return obj[methodname].apply(obj, args);\n                }\n                if (_isTransformer(obj)) {\n                    var transducer = xf.apply(null, args);\n                    return transducer(obj);\n                }\n            }\n            return fn.apply(this, arguments);\n        };\n    };\n\n    var _dropLastWhile = function dropLastWhile(pred, list) {\n        var idx = list.length - 1;\n        while (idx >= 0 && pred(list[idx])) {\n            idx -= 1;\n        }\n        return _slice(list, 0, idx + 1);\n    };\n\n    var _xall = function () {\n        function XAll(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.all = true;\n        }\n        XAll.prototype['@@transducer/init'] = _xfBase.init;\n        XAll.prototype['@@transducer/result'] = function (result) {\n            if (this.all) {\n                result = this.xf['@@transducer/step'](result, true);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XAll.prototype['@@transducer/step'] = function (result, input) {\n            if (!this.f(input)) {\n                this.all = false;\n                result = _reduced(this.xf['@@transducer/step'](result, false));\n            }\n            return result;\n        };\n        return _curry2(function _xall(f, xf) {\n            return new XAll(f, xf);\n        });\n    }();\n\n    var _xany = function () {\n        function XAny(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.any = false;\n        }\n        XAny.prototype['@@transducer/init'] = _xfBase.init;\n        XAny.prototype['@@transducer/result'] = function (result) {\n            if (!this.any) {\n                result = this.xf['@@transducer/step'](result, false);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XAny.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f(input)) {\n                this.any = true;\n                result = _reduced(this.xf['@@transducer/step'](result, true));\n            }\n            return result;\n        };\n        return _curry2(function _xany(f, xf) {\n            return new XAny(f, xf);\n        });\n    }();\n\n    var _xaperture = function () {\n        function XAperture(n, xf) {\n            this.xf = xf;\n            this.pos = 0;\n            this.full = false;\n            this.acc = new Array(n);\n        }\n        XAperture.prototype['@@transducer/init'] = _xfBase.init;\n        XAperture.prototype['@@transducer/result'] = function (result) {\n            this.acc = null;\n            return this.xf['@@transducer/result'](result);\n        };\n        XAperture.prototype['@@transducer/step'] = function (result, input) {\n            this.store(input);\n            return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;\n        };\n        XAperture.prototype.store = function (input) {\n            this.acc[this.pos] = input;\n            this.pos += 1;\n            if (this.pos === this.acc.length) {\n                this.pos = 0;\n                this.full = true;\n            }\n        };\n        XAperture.prototype.getCopy = function () {\n            return _concat(_slice(this.acc, this.pos), _slice(this.acc, 0, this.pos));\n        };\n        return _curry2(function _xaperture(n, xf) {\n            return new XAperture(n, xf);\n        });\n    }();\n\n    var _xdrop = function () {\n        function XDrop(n, xf) {\n            this.xf = xf;\n            this.n = n;\n        }\n        XDrop.prototype['@@transducer/init'] = _xfBase.init;\n        XDrop.prototype['@@transducer/result'] = _xfBase.result;\n        XDrop.prototype['@@transducer/step'] = function (result, input) {\n            if (this.n > 0) {\n                this.n -= 1;\n                return result;\n            }\n            return this.xf['@@transducer/step'](result, input);\n        };\n        return _curry2(function _xdrop(n, xf) {\n            return new XDrop(n, xf);\n        });\n    }();\n\n    var _xdropLast = function () {\n        function XDropLast(n, xf) {\n            this.xf = xf;\n            this.pos = 0;\n            this.full = false;\n            this.acc = new Array(n);\n        }\n        XDropLast.prototype['@@transducer/init'] = _xfBase.init;\n        XDropLast.prototype['@@transducer/result'] = function (result) {\n            this.acc = null;\n            return this.xf['@@transducer/result'](result);\n        };\n        XDropLast.prototype['@@transducer/step'] = function (result, input) {\n            if (this.full) {\n                result = this.xf['@@transducer/step'](result, this.acc[this.pos]);\n            }\n            this.store(input);\n            return result;\n        };\n        XDropLast.prototype.store = function (input) {\n            this.acc[this.pos] = input;\n            this.pos += 1;\n            if (this.pos === this.acc.length) {\n                this.pos = 0;\n                this.full = true;\n            }\n        };\n        return _curry2(function _xdropLast(n, xf) {\n            return new XDropLast(n, xf);\n        });\n    }();\n\n    var _xdropRepeatsWith = function () {\n        function XDropRepeatsWith(pred, xf) {\n            this.xf = xf;\n            this.pred = pred;\n            this.lastValue = undefined;\n            this.seenFirstValue = false;\n        }\n        XDropRepeatsWith.prototype['@@transducer/init'] = function () {\n            return this.xf['@@transducer/init']();\n        };\n        XDropRepeatsWith.prototype['@@transducer/result'] = function (result) {\n            return this.xf['@@transducer/result'](result);\n        };\n        XDropRepeatsWith.prototype['@@transducer/step'] = function (result, input) {\n            var sameAsLast = false;\n            if (!this.seenFirstValue) {\n                this.seenFirstValue = true;\n            } else if (this.pred(this.lastValue, input)) {\n                sameAsLast = true;\n            }\n            this.lastValue = input;\n            return sameAsLast ? result : this.xf['@@transducer/step'](result, input);\n        };\n        return _curry2(function _xdropRepeatsWith(pred, xf) {\n            return new XDropRepeatsWith(pred, xf);\n        });\n    }();\n\n    var _xdropWhile = function () {\n        function XDropWhile(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XDropWhile.prototype['@@transducer/init'] = _xfBase.init;\n        XDropWhile.prototype['@@transducer/result'] = _xfBase.result;\n        XDropWhile.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f) {\n                if (this.f(input)) {\n                    return result;\n                }\n                this.f = null;\n            }\n            return this.xf['@@transducer/step'](result, input);\n        };\n        return _curry2(function _xdropWhile(f, xf) {\n            return new XDropWhile(f, xf);\n        });\n    }();\n\n    var _xfilter = function () {\n        function XFilter(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XFilter.prototype['@@transducer/init'] = _xfBase.init;\n        XFilter.prototype['@@transducer/result'] = _xfBase.result;\n        XFilter.prototype['@@transducer/step'] = function (result, input) {\n            return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;\n        };\n        return _curry2(function _xfilter(f, xf) {\n            return new XFilter(f, xf);\n        });\n    }();\n\n    var _xfind = function () {\n        function XFind(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.found = false;\n        }\n        XFind.prototype['@@transducer/init'] = _xfBase.init;\n        XFind.prototype['@@transducer/result'] = function (result) {\n            if (!this.found) {\n                result = this.xf['@@transducer/step'](result, void 0);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XFind.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f(input)) {\n                this.found = true;\n                result = _reduced(this.xf['@@transducer/step'](result, input));\n            }\n            return result;\n        };\n        return _curry2(function _xfind(f, xf) {\n            return new XFind(f, xf);\n        });\n    }();\n\n    var _xfindIndex = function () {\n        function XFindIndex(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.idx = -1;\n            this.found = false;\n        }\n        XFindIndex.prototype['@@transducer/init'] = _xfBase.init;\n        XFindIndex.prototype['@@transducer/result'] = function (result) {\n            if (!this.found) {\n                result = this.xf['@@transducer/step'](result, -1);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XFindIndex.prototype['@@transducer/step'] = function (result, input) {\n            this.idx += 1;\n            if (this.f(input)) {\n                this.found = true;\n                result = _reduced(this.xf['@@transducer/step'](result, this.idx));\n            }\n            return result;\n        };\n        return _curry2(function _xfindIndex(f, xf) {\n            return new XFindIndex(f, xf);\n        });\n    }();\n\n    var _xfindLast = function () {\n        function XFindLast(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XFindLast.prototype['@@transducer/init'] = _xfBase.init;\n        XFindLast.prototype['@@transducer/result'] = function (result) {\n            return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));\n        };\n        XFindLast.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f(input)) {\n                this.last = input;\n            }\n            return result;\n        };\n        return _curry2(function _xfindLast(f, xf) {\n            return new XFindLast(f, xf);\n        });\n    }();\n\n    var _xfindLastIndex = function () {\n        function XFindLastIndex(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.idx = -1;\n            this.lastIdx = -1;\n        }\n        XFindLastIndex.prototype['@@transducer/init'] = _xfBase.init;\n        XFindLastIndex.prototype['@@transducer/result'] = function (result) {\n            return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));\n        };\n        XFindLastIndex.prototype['@@transducer/step'] = function (result, input) {\n            this.idx += 1;\n            if (this.f(input)) {\n                this.lastIdx = this.idx;\n            }\n            return result;\n        };\n        return _curry2(function _xfindLastIndex(f, xf) {\n            return new XFindLastIndex(f, xf);\n        });\n    }();\n\n    var _xmap = function () {\n        function XMap(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XMap.prototype['@@transducer/init'] = _xfBase.init;\n        XMap.prototype['@@transducer/result'] = _xfBase.result;\n        XMap.prototype['@@transducer/step'] = function (result, input) {\n            return this.xf['@@transducer/step'](result, this.f(input));\n        };\n        return _curry2(function _xmap(f, xf) {\n            return new XMap(f, xf);\n        });\n    }();\n\n    var _xtake = function () {\n        function XTake(n, xf) {\n            this.xf = xf;\n            this.n = n;\n        }\n        XTake.prototype['@@transducer/init'] = _xfBase.init;\n        XTake.prototype['@@transducer/result'] = _xfBase.result;\n        XTake.prototype['@@transducer/step'] = function (result, input) {\n            if (this.n === 0) {\n                return _reduced(result);\n            } else {\n                this.n -= 1;\n                return this.xf['@@transducer/step'](result, input);\n            }\n        };\n        return _curry2(function _xtake(n, xf) {\n            return new XTake(n, xf);\n        });\n    }();\n\n    var _xtakeWhile = function () {\n        function XTakeWhile(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XTakeWhile.prototype['@@transducer/init'] = _xfBase.init;\n        XTakeWhile.prototype['@@transducer/result'] = _xfBase.result;\n        XTakeWhile.prototype['@@transducer/step'] = function (result, input) {\n            return this.f(input) ? this.xf['@@transducer/step'](result, input) : _reduced(result);\n        };\n        return _curry2(function _xtakeWhile(f, xf) {\n            return new XTakeWhile(f, xf);\n        });\n    }();\n\n    /**\n     * Adds two numbers. Equivalent to `a + b` but curried.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a\n     * @param {Number} b\n     * @return {Number}\n     * @see R.subtract\n     * @example\n     *\n     *      R.add(2, 3);       //=>  5\n     *      R.add(7)(10);      //=> 17\n     */\n    var add = _curry2(function add(a, b) {\n        return a + b;\n    });\n\n    /**\n     * Applies a function to the value at the given index of an array, returning a\n     * new copy of the array with the element at the given index replaced with the\n     * result of the function application.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig (a -> a) -> Number -> [a] -> [a]\n     * @param {Function} fn The function to apply.\n     * @param {Number} idx The index.\n     * @param {Array|Arguments} list An array-like object whose value\n     *        at the supplied index will be replaced.\n     * @return {Array} A copy of the supplied array-like object with\n     *         the element at index `idx` replaced with the value\n     *         returned by applying `fn` to the existing element.\n     * @see R.update\n     * @example\n     *\n     *      R.adjust(R.add(10), 1, [0, 1, 2]);     //=> [0, 11, 2]\n     *      R.adjust(R.add(10))(1)([0, 1, 2]);     //=> [0, 11, 2]\n     */\n    var adjust = _curry3(function adjust(fn, idx, list) {\n        if (idx >= list.length || idx < -list.length) {\n            return list;\n        }\n        var start = idx < 0 ? list.length : 0;\n        var _idx = start + idx;\n        var _list = _concat(list);\n        _list[_idx] = fn(list[_idx]);\n        return _list;\n    });\n\n    /**\n     * Returns `true` if all elements of the list match the predicate, `false` if\n     * there are any that don't.\n     *\n     * Dispatches to the `all` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Boolean\n     * @param {Function} fn The predicate function.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the predicate is satisfied by every element, `false`\n     *         otherwise.\n     * @see R.any, R.none, R.transduce\n     * @example\n     *\n     *      var lessThan2 = R.flip(R.lt)(2);\n     *      var lessThan3 = R.flip(R.lt)(3);\n     *      R.all(lessThan2)([1, 2]); //=> false\n     *      R.all(lessThan3)([1, 2]); //=> true\n     */\n    var all = _curry2(_dispatchable('all', _xall, function all(fn, list) {\n        var idx = 0;\n        while (idx < list.length) {\n            if (!fn(list[idx])) {\n                return false;\n            }\n            idx += 1;\n        }\n        return true;\n    }));\n\n    /**\n     * Returns a function that always returns the given value. Note that for\n     * non-primitives the value returned is a reference to the original value.\n     *\n     * This function is known as `const`, `constant`, or `K` (for K combinator) in\n     * other languages and libraries.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig a -> (* -> a)\n     * @param {*} val The value to wrap in a function\n     * @return {Function} A Function :: * -> val.\n     * @example\n     *\n     *      var t = R.always('Tee');\n     *      t(); //=> 'Tee'\n     */\n    var always = _curry1(function always(val) {\n        return function () {\n            return val;\n        };\n    });\n\n    /**\n     * Returns `true` if both arguments are `true`; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig * -> * -> *\n     * @param {Boolean} a A boolean value\n     * @param {Boolean} b A boolean value\n     * @return {Boolean} `true` if both arguments are `true`, `false` otherwise\n     * @see R.both\n     * @example\n     *\n     *      R.and(true, true); //=> true\n     *      R.and(true, false); //=> false\n     *      R.and(false, true); //=> false\n     *      R.and(false, false); //=> false\n     */\n    var and = _curry2(function and(a, b) {\n        return a && b;\n    });\n\n    /**\n     * Returns `true` if at least one of elements of the list match the predicate,\n     * `false` otherwise.\n     *\n     * Dispatches to the `any` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Boolean\n     * @param {Function} fn The predicate function.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`\n     *         otherwise.\n     * @see R.all, R.none, R.transduce\n     * @example\n     *\n     *      var lessThan0 = R.flip(R.lt)(0);\n     *      var lessThan2 = R.flip(R.lt)(2);\n     *      R.any(lessThan0)([1, 2]); //=> false\n     *      R.any(lessThan2)([1, 2]); //=> true\n     */\n    var any = _curry2(_dispatchable('any', _xany, function any(fn, list) {\n        var idx = 0;\n        while (idx < list.length) {\n            if (fn(list[idx])) {\n                return true;\n            }\n            idx += 1;\n        }\n        return false;\n    }));\n\n    /**\n     * Returns a new list, composed of n-tuples of consecutive elements If `n` is\n     * greater than the length of the list, an empty list is returned.\n     *\n     * Dispatches to the `aperture` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig Number -> [a] -> [[a]]\n     * @param {Number} n The size of the tuples to create\n     * @param {Array} list The list to split into `n`-tuples\n     * @return {Array} The new list.\n     * @see R.transduce\n     * @example\n     *\n     *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n     *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n     *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n     */\n    var aperture = _curry2(_dispatchable('aperture', _xaperture, _aperture));\n\n    /**\n     * Returns a new list containing the contents of the given list, followed by\n     * the given element.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> [a]\n     * @param {*} el The element to add to the end of the new list.\n     * @param {Array} list The list whose contents will be added to the beginning of the output\n     *        list.\n     * @return {Array} A new list containing the contents of the old list followed by `el`.\n     * @see R.prepend\n     * @example\n     *\n     *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']\n     *      R.append('tests', []); //=> ['tests']\n     *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]\n     */\n    var append = _curry2(function append(el, list) {\n        return _concat(list, [el]);\n    });\n\n    /**\n     * Applies function `fn` to the argument list `args`. This is useful for\n     * creating a fixed-arity function from a variadic function. `fn` should be a\n     * bound function if context is significant.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Function\n     * @sig (*... -> a) -> [*] -> a\n     * @param {Function} fn\n     * @param {Array} args\n     * @return {*}\n     * @see R.call, R.unapply\n     * @example\n     *\n     *      var nums = [1, 2, 3, -99, 42, 6, 7];\n     *      R.apply(Math.max, nums); //=> 42\n     */\n    var apply = _curry2(function apply(fn, args) {\n        return fn.apply(this, args);\n    });\n\n    /**\n     * Makes a shallow clone of an object, setting or overriding the specified\n     * property with the given value. Note that this copies and flattens prototype\n     * properties onto the new object as well. All non-primitive properties are\n     * copied by reference.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @sig String -> a -> {k: v} -> {k: v}\n     * @param {String} prop the property name to set\n     * @param {*} val the new value\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object similar to the original except for the specified property.\n     * @see R.dissoc\n     * @example\n     *\n     *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}\n     */\n    var assoc = _curry3(function assoc(prop, val, obj) {\n        var result = {};\n        for (var p in obj) {\n            result[p] = obj[p];\n        }\n        result[prop] = val;\n        return result;\n    });\n\n    /**\n     * Makes a shallow clone of an object, setting or overriding the nodes required\n     * to create the given path, and placing the specific value at the tail end of\n     * that path. Note that this copies and flattens prototype properties onto the\n     * new object as well. All non-primitive properties are copied by reference.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @sig [String] -> a -> {k: v} -> {k: v}\n     * @param {Array} path the path to set\n     * @param {*} val the new value\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object similar to the original except along the specified path.\n     * @see R.dissocPath\n     * @example\n     *\n     *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}\n     */\n    var assocPath = _curry3(function assocPath(path, val, obj) {\n        switch (path.length) {\n        case 0:\n            return val;\n        case 1:\n            return assoc(path[0], val, obj);\n        default:\n            return assoc(path[0], assocPath(_slice(path, 1), val, Object(obj[path[0]])), obj);\n        }\n    });\n\n    /**\n     * Creates a function that is bound to a context.\n     * Note: `R.bind` does not provide the additional argument-binding capabilities of\n     * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category Function\n     * @category Object\n     * @sig (* -> *) -> {*} -> (* -> *)\n     * @param {Function} fn The function to bind to context\n     * @param {Object} thisObj The context to bind `fn` to\n     * @return {Function} A function that will execute in the context of `thisObj`.\n     * @see R.partial\n     */\n    var bind = _curry2(function bind(fn, thisObj) {\n        return _arity(fn.length, function () {\n            return fn.apply(thisObj, arguments);\n        });\n    });\n\n    /**\n     * A function wrapping calls to the two functions in an `&&` operation,\n     * returning the result of the first function if it is false-y and the result\n     * of the second function otherwise. Note that this is short-circuited,\n     * meaning that the second function will not be invoked if the first returns a\n     * false-y value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category Logic\n     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n     * @param {Function} f a predicate\n     * @param {Function} g another predicate\n     * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\n     * @see R.and\n     * @example\n     *\n     *      var gt10 = x => x > 10;\n     *      var even = x => x % 2 === 0;\n     *      var f = R.both(gt10, even);\n     *      f(100); //=> true\n     *      f(101); //=> false\n     */\n    var both = _curry2(function both(f, g) {\n        return function _both() {\n            return f.apply(this, arguments) && g.apply(this, arguments);\n        };\n    });\n\n    /**\n     * Makes a comparator function out of a function that reports whether the first\n     * element is less than the second.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a, b -> Boolean) -> (a, b -> Number)\n     * @param {Function} pred A predicate function of arity two.\n     * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`.\n     * @example\n     *\n     *      var cmp = R.comparator((a, b) => a.age < b.age);\n     *      var people = [\n     *        // ...\n     *      ];\n     *      R.sort(cmp, people);\n     */\n    var comparator = _curry1(function comparator(pred) {\n        return function (a, b) {\n            return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;\n        };\n    });\n\n    /**\n     * Returns a function, `fn`, which encapsulates if/else-if/else logic.\n     * `R.cond` takes a list of [predicate, transform] pairs. All of the arguments\n     * to `fn` are applied to each of the predicates in turn until one returns a\n     * \"truthy\" value, at which point `fn` returns the result of applying its\n     * arguments to the corresponding transformer. If none of the predicates\n     * matches, `fn` returns undefined.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category Logic\n     * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\n     * @param {Array} pairs\n     * @return {Function}\n     * @example\n     *\n     *      var fn = R.cond([\n     *        [R.equals(0),   R.always('water freezes at 0°C')],\n     *        [R.equals(100), R.always('water boils at 100°C')],\n     *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']\n     *      ]);\n     *      fn(0); //=> 'water freezes at 0°C'\n     *      fn(50); //=> 'nothing special happens at 50°C'\n     *      fn(100); //=> 'water boils at 100°C'\n     */\n    var cond = _curry1(function cond(pairs) {\n        return function () {\n            var idx = 0;\n            while (idx < pairs.length) {\n                if (pairs[idx][0].apply(this, arguments)) {\n                    return pairs[idx][1].apply(this, arguments);\n                }\n                idx += 1;\n            }\n        };\n    });\n\n    /**\n     * Counts the elements of a list according to how many match each value of a\n     * key generated by the supplied function. Returns an object mapping the keys\n     * produced by `fn` to the number of occurrences in the list. Note that all\n     * keys are coerced to strings because of how JavaScript objects work.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a -> String) -> [a] -> {*}\n     * @param {Function} fn The function used to map values to keys.\n     * @param {Array} list The list to count elements from.\n     * @return {Object} An object mapping keys to number of occurrences in the list.\n     * @example\n     *\n     *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\n     *      var letters = R.split('', 'abcABCaaaBBc');\n     *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}\n     *      R.countBy(R.toLower)(letters);   //=> {'a': 5, 'b': 4, 'c': 3}\n     */\n    var countBy = _curry2(function countBy(fn, list) {\n        var counts = {};\n        var len = list.length;\n        var idx = 0;\n        while (idx < len) {\n            var key = fn(list[idx]);\n            counts[key] = (_has(key, counts) ? counts[key] : 0) + 1;\n            idx += 1;\n        }\n        return counts;\n    });\n\n    /**\n     * Returns a curried equivalent of the provided function, with the specified\n     * arity. The curried function has two unusual capabilities. First, its\n     * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n     * following are equivalent:\n     *\n     *   - `g(1)(2)(3)`\n     *   - `g(1)(2, 3)`\n     *   - `g(1, 2)(3)`\n     *   - `g(1, 2, 3)`\n     *\n     * Secondly, the special placeholder value `R.__` may be used to specify\n     * \"gaps\", allowing partial application of any combination of arguments,\n     * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n     * following are equivalent:\n     *\n     *   - `g(1, 2, 3)`\n     *   - `g(_, 2, 3)(1)`\n     *   - `g(_, _, 3)(1)(2)`\n     *   - `g(_, _, 3)(1, 2)`\n     *   - `g(_, 2)(1)(3)`\n     *   - `g(_, 2)(1, 3)`\n     *   - `g(_, 2)(_, 3)(1)`\n     *\n     * @func\n     * @memberOf R\n     * @since v0.5.0\n     * @category Function\n     * @sig Number -> (* -> a) -> (* -> a)\n     * @param {Number} length The arity for the returned function.\n     * @param {Function} fn The function to curry.\n     * @return {Function} A new, curried function.\n     * @see R.curry\n     * @example\n     *\n     *      var sumArgs = (...args) => R.sum(args);\n     *\n     *      var curriedAddFourNumbers = R.curryN(4, sumArgs);\n     *      var f = curriedAddFourNumbers(1, 2);\n     *      var g = f(3);\n     *      g(4); //=> 10\n     */\n    var curryN = _curry2(function curryN(length, fn) {\n        if (length === 1) {\n            return _curry1(fn);\n        }\n        return _arity(length, _curryN(length, [], fn));\n    });\n\n    /**\n     * Decrements its argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Math\n     * @sig Number -> Number\n     * @param {Number} n\n     * @return {Number}\n     * @see R.inc\n     * @example\n     *\n     *      R.dec(42); //=> 41\n     */\n    var dec = add(-1);\n\n    /**\n     * Returns the second argument if it is not `null`, `undefined` or `NaN`\n     * otherwise the first argument is returned.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Logic\n     * @sig a -> b -> a | b\n     * @param {a} val The default value.\n     * @param {b} val The value to return if it is not null or undefined\n     * @return {*} The the second value or the default value\n     * @example\n     *\n     *      var defaultTo42 = R.defaultTo(42);\n     *\n     *      defaultTo42(null);  //=> 42\n     *      defaultTo42(undefined);  //=> 42\n     *      defaultTo42('Ramda');  //=> 'Ramda'\n     *      defaultTo42(parseInt('string')); //=> 42\n     */\n    var defaultTo = _curry2(function defaultTo(d, v) {\n        return v == null || v !== v ? d : v;\n    });\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements in the first list not\n     * contained in the second list. Duplication is determined according to the\n     * value returned by applying the supplied predicate to two list elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The elements in `list1` that are not in `list2`.\n     * @see R.difference\n     * @example\n     *\n     *      function cmp(x, y) => x.a === y.a;\n     *      var l1 = [{a: 1}, {a: 2}, {a: 3}];\n     *      var l2 = [{a: 3}, {a: 4}];\n     *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]\n     */\n    var differenceWith = _curry3(function differenceWith(pred, first, second) {\n        var out = [];\n        var idx = 0;\n        var firstLen = first.length;\n        while (idx < firstLen) {\n            if (!_containsWith(pred, first[idx], second) && !_containsWith(pred, first[idx], out)) {\n                out.push(first[idx]);\n            }\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a new object that does not contain a `prop` property.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Object\n     * @sig String -> {k: v} -> {k: v}\n     * @param {String} prop the name of the property to dissociate\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object similar to the original but without the specified property\n     * @see R.assoc\n     * @example\n     *\n     *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}\n     */\n    var dissoc = _curry2(function dissoc(prop, obj) {\n        var result = {};\n        for (var p in obj) {\n            if (p !== prop) {\n                result[p] = obj[p];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Makes a shallow clone of an object, omitting the property at the given path.\n     * Note that this copies and flattens prototype properties onto the new object\n     * as well. All non-primitive properties are copied by reference.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.11.0\n     * @category Object\n     * @sig [String] -> {k: v} -> {k: v}\n     * @param {Array} path the path to set\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object without the property at path\n     * @see R.assocPath\n     * @example\n     *\n     *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}\n     */\n    var dissocPath = _curry2(function dissocPath(path, obj) {\n        switch (path.length) {\n        case 0:\n            return obj;\n        case 1:\n            return dissoc(path[0], obj);\n        default:\n            var head = path[0];\n            var tail = _slice(path, 1);\n            return obj[head] == null ? obj : assoc(head, dissocPath(tail, obj[head]), obj);\n        }\n    });\n\n    /**\n     * Divides two numbers. Equivalent to `a / b`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The first value.\n     * @param {Number} b The second value.\n     * @return {Number} The result of `a / b`.\n     * @see R.multiply\n     * @example\n     *\n     *      R.divide(71, 100); //=> 0.71\n     *\n     *      var half = R.divide(R.__, 2);\n     *      half(42); //=> 21\n     *\n     *      var reciprocal = R.divide(1);\n     *      reciprocal(4);   //=> 0.25\n     */\n    var divide = _curry2(function divide(a, b) {\n        return a / b;\n    });\n\n    /**\n     * Returns a new list containing the last `n` elements of a given list, passing\n     * each value to the supplied predicate function, skipping elements while the\n     * predicate function returns `true`. The predicate function is passed one\n     * argument: *(value)*.\n     *\n     * Dispatches to the `dropWhile` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.takeWhile, R.transduce, R.addIndex\n     * @example\n     *\n     *      var lteTwo = x => x <= 2;\n     *\n     *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]\n     */\n    var dropWhile = _curry2(_dispatchable('dropWhile', _xdropWhile, function dropWhile(pred, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len && pred(list[idx])) {\n            idx += 1;\n        }\n        return _slice(list, idx);\n    }));\n\n    /**\n     * A function wrapping calls to the two functions in an `||` operation,\n     * returning the result of the first function if it is truth-y and the result\n     * of the second function otherwise. Note that this is short-circuited,\n     * meaning that the second function will not be invoked if the first returns a\n     * truth-y value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category Logic\n     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n     * @param {Function} f a predicate\n     * @param {Function} g another predicate\n     * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\n     * @see R.or\n     * @example\n     *\n     *      var gt10 = x => x > 10;\n     *      var even = x => x % 2 === 0;\n     *      var f = R.either(gt10, even);\n     *      f(101); //=> true\n     *      f(8); //=> true\n     */\n    var either = _curry2(function either(f, g) {\n        return function _either() {\n            return f.apply(this, arguments) || g.apply(this, arguments);\n        };\n    });\n\n    /**\n     * Returns the empty value of its argument's type. Ramda defines the empty\n     * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other\n     * types are supported if they define `<Type>.empty` and/or\n     * `<Type>.prototype.empty`.\n     *\n     * Dispatches to the `empty` method of the first argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Function\n     * @sig a -> a\n     * @param {*} x\n     * @return {*}\n     * @example\n     *\n     *      R.empty(Just(42));      //=> Nothing()\n     *      R.empty([1, 2, 3]);     //=> []\n     *      R.empty('unicorns');    //=> ''\n     *      R.empty({x: 1, y: 2});  //=> {}\n     */\n    // else\n    var empty = _curry1(function empty(x) {\n        return x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? '' : _isObject(x) ? {} : _isArguments(x) ? function () {\n            return arguments;\n        }() : // else\n        void 0;\n    });\n\n    /**\n     * Creates a new object by recursively evolving a shallow copy of `object`,\n     * according to the `transformation` functions. All non-primitive properties\n     * are copied by reference.\n     *\n     * A `transformation` function will not be invoked if its corresponding key\n     * does not exist in the evolved object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig {k: (v -> v)} -> {k: v} -> {k: v}\n     * @param {Object} transformations The object specifying transformation functions to apply\n     *        to the object.\n     * @param {Object} object The object to be transformed.\n     * @return {Object} The transformed object.\n     * @example\n     *\n     *      var tomato  = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};\n     *      var transformations = {\n     *        firstName: R.trim,\n     *        lastName: R.trim, // Will not get invoked.\n     *        data: {elapsed: R.add(1), remaining: R.add(-1)}\n     *      };\n     *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}\n     */\n    var evolve = _curry2(function evolve(transformations, object) {\n        var result = {};\n        var transformation, key, type;\n        for (key in object) {\n            transformation = transformations[key];\n            type = typeof transformation;\n            result[key] = type === 'function' ? transformation(object[key]) : type === 'object' ? evolve(transformations[key], object[key]) : object[key];\n        }\n        return result;\n    });\n\n    /**\n     * Returns the first element of the list which matches the predicate, or\n     * `undefined` if no element matches.\n     *\n     * Dispatches to the `find` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> a | undefined\n     * @param {Function} fn The predicate function used to determine if the element is the\n     *        desired one.\n     * @param {Array} list The array to consider.\n     * @return {Object} The element found, or `undefined`.\n     * @see R.transduce\n     * @example\n     *\n     *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n     *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}\n     *      R.find(R.propEq('a', 4))(xs); //=> undefined\n     */\n    var find = _curry2(_dispatchable('find', _xfind, function find(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len) {\n            if (fn(list[idx])) {\n                return list[idx];\n            }\n            idx += 1;\n        }\n    }));\n\n    /**\n     * Returns the index of the first element of the list which matches the\n     * predicate, or `-1` if no element matches.\n     *\n     * Dispatches to the `findIndex` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Number\n     * @param {Function} fn The predicate function used to determine if the element is the\n     * desired one.\n     * @param {Array} list The array to consider.\n     * @return {Number} The index of the element found, or `-1`.\n     * @see R.transduce\n     * @example\n     *\n     *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n     *      R.findIndex(R.propEq('a', 2))(xs); //=> 1\n     *      R.findIndex(R.propEq('a', 4))(xs); //=> -1\n     */\n    var findIndex = _curry2(_dispatchable('findIndex', _xfindIndex, function findIndex(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len) {\n            if (fn(list[idx])) {\n                return idx;\n            }\n            idx += 1;\n        }\n        return -1;\n    }));\n\n    /**\n     * Returns the last element of the list which matches the predicate, or\n     * `undefined` if no element matches.\n     *\n     * Dispatches to the `findLast` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> a | undefined\n     * @param {Function} fn The predicate function used to determine if the element is the\n     * desired one.\n     * @param {Array} list The array to consider.\n     * @return {Object} The element found, or `undefined`.\n     * @see R.transduce\n     * @example\n     *\n     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n     *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}\n     *      R.findLast(R.propEq('a', 4))(xs); //=> undefined\n     */\n    var findLast = _curry2(_dispatchable('findLast', _xfindLast, function findLast(fn, list) {\n        var idx = list.length - 1;\n        while (idx >= 0) {\n            if (fn(list[idx])) {\n                return list[idx];\n            }\n            idx -= 1;\n        }\n    }));\n\n    /**\n     * Returns the index of the last element of the list which matches the\n     * predicate, or `-1` if no element matches.\n     *\n     * Dispatches to the `findLastIndex` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Number\n     * @param {Function} fn The predicate function used to determine if the element is the\n     * desired one.\n     * @param {Array} list The array to consider.\n     * @return {Number} The index of the element found, or `-1`.\n     * @see R.transduce\n     * @example\n     *\n     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n     *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1\n     *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1\n     */\n    var findLastIndex = _curry2(_dispatchable('findLastIndex', _xfindLastIndex, function findLastIndex(fn, list) {\n        var idx = list.length - 1;\n        while (idx >= 0) {\n            if (fn(list[idx])) {\n                return idx;\n            }\n            idx -= 1;\n        }\n        return -1;\n    }));\n\n    /**\n     * Iterate over an input `list`, calling a provided function `fn` for each\n     * element in the list.\n     *\n     * `fn` receives one argument: *(value)*.\n     *\n     * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n     * arrays), unlike the native `Array.prototype.forEach` method. For more\n     * details on this behavior, see:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n     *\n     * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n     * the original array. In some libraries this function is named `each`.\n     *\n     * Dispatches to the `forEach` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> *) -> [a] -> [a]\n     * @param {Function} fn The function to invoke. Receives one argument, `value`.\n     * @param {Array} list The list to iterate over.\n     * @return {Array} The original list.\n     * @see R.addIndex\n     * @example\n     *\n     *      var printXPlusFive = x => console.log(x + 5);\n     *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n     *      //-> 6\n     *      //-> 7\n     *      //-> 8\n     */\n    var forEach = _curry2(_checkForMethod('forEach', function forEach(fn, list) {\n        var len = list.length;\n        var idx = 0;\n        while (idx < len) {\n            fn(list[idx]);\n            idx += 1;\n        }\n        return list;\n    }));\n\n    /**\n     * Creates a new object out of a list key-value pairs.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig [[k,v]] -> {k: v}\n     * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.\n     * @return {Object} The object made by pairing up `keys` and `values`.\n     * @see R.toPairs, R.pair\n     * @example\n     *\n     *      R.fromPairs([['a', 1], ['b', 2],  ['c', 3]]); //=> {a: 1, b: 2, c: 3}\n     */\n    var fromPairs = _curry1(function fromPairs(pairs) {\n        var idx = 0;\n        var len = pairs.length;\n        var out = {};\n        while (idx < len) {\n            if (_isArray(pairs[idx]) && pairs[idx].length) {\n                out[pairs[idx][0]] = pairs[idx][1];\n            }\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns `true` if the first argument is greater than the second; `false`\n     * otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @see R.lt\n     * @example\n     *\n     *      R.gt(2, 1); //=> true\n     *      R.gt(2, 2); //=> false\n     *      R.gt(2, 3); //=> false\n     *      R.gt('a', 'z'); //=> false\n     *      R.gt('z', 'a'); //=> true\n     */\n    var gt = _curry2(function gt(a, b) {\n        return a > b;\n    });\n\n    /**\n     * Returns `true` if the first argument is greater than or equal to the second;\n     * `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {Number} a\n     * @param {Number} b\n     * @return {Boolean}\n     * @see R.lte\n     * @example\n     *\n     *      R.gte(2, 1); //=> true\n     *      R.gte(2, 2); //=> true\n     *      R.gte(2, 3); //=> false\n     *      R.gte('a', 'z'); //=> false\n     *      R.gte('z', 'a'); //=> true\n     */\n    var gte = _curry2(function gte(a, b) {\n        return a >= b;\n    });\n\n    /**\n     * Returns whether or not an object has an own property with the specified name\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Object\n     * @sig s -> {s: x} -> Boolean\n     * @param {String} prop The name of the property to check for.\n     * @param {Object} obj The object to query.\n     * @return {Boolean} Whether the property exists.\n     * @example\n     *\n     *      var hasName = R.has('name');\n     *      hasName({name: 'alice'});   //=> true\n     *      hasName({name: 'bob'});     //=> true\n     *      hasName({});                //=> false\n     *\n     *      var point = {x: 0, y: 0};\n     *      var pointHas = R.has(R.__, point);\n     *      pointHas('x');  //=> true\n     *      pointHas('y');  //=> true\n     *      pointHas('z');  //=> false\n     */\n    var has = _curry2(_has);\n\n    /**\n     * Returns whether or not an object or its prototype chain has a property with\n     * the specified name\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Object\n     * @sig s -> {s: x} -> Boolean\n     * @param {String} prop The name of the property to check for.\n     * @param {Object} obj The object to query.\n     * @return {Boolean} Whether the property exists.\n     * @example\n     *\n     *      function Rectangle(width, height) {\n     *        this.width = width;\n     *        this.height = height;\n     *      }\n     *      Rectangle.prototype.area = function() {\n     *        return this.width * this.height;\n     *      };\n     *\n     *      var square = new Rectangle(2, 2);\n     *      R.hasIn('width', square);  //=> true\n     *      R.hasIn('area', square);  //=> true\n     */\n    var hasIn = _curry2(function hasIn(prop, obj) {\n        return prop in obj;\n    });\n\n    /**\n     * Returns true if its arguments are identical, false otherwise. Values are\n     * identical if they reference the same memory. `NaN` is identical to `NaN`;\n     * `0` and `-0` are not identical.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category Relation\n     * @sig a -> a -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @example\n     *\n     *      var o = {};\n     *      R.identical(o, o); //=> true\n     *      R.identical(1, 1); //=> true\n     *      R.identical(1, '1'); //=> false\n     *      R.identical([], []); //=> false\n     *      R.identical(0, -0); //=> false\n     *      R.identical(NaN, NaN); //=> true\n     */\n    // SameValue algorithm\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    // Step 6.a: NaN == NaN\n    var identical = _curry2(function identical(a, b) {\n        // SameValue algorithm\n        if (a === b) {\n            // Steps 1-5, 7-10\n            // Steps 6.b-6.e: +0 != -0\n            return a !== 0 || 1 / a === 1 / b;\n        } else {\n            // Step 6.a: NaN == NaN\n            return a !== a && b !== b;\n        }\n    });\n\n    /**\n     * A function that does nothing but return the parameter supplied to it. Good\n     * as a default or placeholder function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig a -> a\n     * @param {*} x The value to return.\n     * @return {*} The input value, `x`.\n     * @example\n     *\n     *      R.identity(1); //=> 1\n     *\n     *      var obj = {};\n     *      R.identity(obj) === obj; //=> true\n     */\n    var identity = _curry1(_identity);\n\n    /**\n     * Creates a function that will process either the `onTrue` or the `onFalse`\n     * function depending upon the result of the `condition` predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Logic\n     * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)\n     * @param {Function} condition A predicate function\n     * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.\n     * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.\n     * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`\n     *                    function depending upon the result of the `condition` predicate.\n     * @see R.unless, R.when\n     * @example\n     *\n     *      var incCount = R.ifElse(\n     *        R.has('count'),\n     *        R.over(R.lensProp('count'), R.inc),\n     *        R.assoc('count', 1)\n     *      );\n     *      incCount({});           //=> { count: 1 }\n     *      incCount({ count: 1 }); //=> { count: 2 }\n     */\n    var ifElse = _curry3(function ifElse(condition, onTrue, onFalse) {\n        return curryN(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {\n            return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);\n        });\n    });\n\n    /**\n     * Increments its argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Math\n     * @sig Number -> Number\n     * @param {Number} n\n     * @return {Number}\n     * @see R.dec\n     * @example\n     *\n     *      R.inc(42); //=> 43\n     */\n    var inc = add(1);\n\n    /**\n     * Inserts the supplied element into the list, at index `index`. _Note that\n     * this is not destructive_: it returns a copy of the list with the changes.\n     * <small>No lists have been harmed in the application of this function.</small>\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.2\n     * @category List\n     * @sig Number -> a -> [a] -> [a]\n     * @param {Number} index The position to insert the element\n     * @param {*} elt The element to insert into the Array\n     * @param {Array} list The list to insert into\n     * @return {Array} A new Array with `elt` inserted at `index`.\n     * @example\n     *\n     *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]\n     */\n    var insert = _curry3(function insert(idx, elt, list) {\n        idx = idx < list.length && idx >= 0 ? idx : list.length;\n        var result = _slice(list);\n        result.splice(idx, 0, elt);\n        return result;\n    });\n\n    /**\n     * Inserts the sub-list into the list, at index `index`. _Note that this is not\n     * destructive_: it returns a copy of the list with the changes.\n     * <small>No lists have been harmed in the application of this function.</small>\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category List\n     * @sig Number -> [a] -> [a] -> [a]\n     * @param {Number} index The position to insert the sub-list\n     * @param {Array} elts The sub-list to insert into the Array\n     * @param {Array} list The list to insert the sub-list into\n     * @return {Array} A new Array with `elts` inserted starting at `index`.\n     * @example\n     *\n     *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]\n     */\n    var insertAll = _curry3(function insertAll(idx, elts, list) {\n        idx = idx < list.length && idx >= 0 ? idx : list.length;\n        return _concat(_concat(_slice(list, 0, idx), elts), _slice(list, idx));\n    });\n\n    /**\n     * Creates a new list with the separator interposed between elements.\n     *\n     * Dispatches to the `intersperse` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig a -> [a] -> [a]\n     * @param {*} separator The element to add to the list.\n     * @param {Array} list The list to be interposed.\n     * @return {Array} The new list.\n     * @example\n     *\n     *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']\n     */\n    var intersperse = _curry2(_checkForMethod('intersperse', function intersperse(separator, list) {\n        var out = [];\n        var idx = 0;\n        var length = list.length;\n        while (idx < length) {\n            if (idx === length - 1) {\n                out.push(list[idx]);\n            } else {\n                out.push(list[idx], separator);\n            }\n            idx += 1;\n        }\n        return out;\n    }));\n\n    /**\n     * See if an object (`val`) is an instance of the supplied constructor. This\n     * function will check up the inheritance chain, if any.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Type\n     * @sig (* -> {*}) -> a -> Boolean\n     * @param {Object} ctor A constructor\n     * @param {*} val The value to test\n     * @return {Boolean}\n     * @example\n     *\n     *      R.is(Object, {}); //=> true\n     *      R.is(Number, 1); //=> true\n     *      R.is(Object, 1); //=> false\n     *      R.is(String, 's'); //=> true\n     *      R.is(String, new String('')); //=> true\n     *      R.is(Object, new String('')); //=> true\n     *      R.is(Object, 's'); //=> false\n     *      R.is(Number, {}); //=> false\n     */\n    var is = _curry2(function is(Ctor, val) {\n        return val != null && val.constructor === Ctor || val instanceof Ctor;\n    });\n\n    /**\n     * Tests whether or not an object is similar to an array.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.5.0\n     * @category Type\n     * @category List\n     * @sig * -> Boolean\n     * @param {*} x The object to test.\n     * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.\n     * @example\n     *\n     *      R.isArrayLike([]); //=> true\n     *      R.isArrayLike(true); //=> false\n     *      R.isArrayLike({}); //=> false\n     *      R.isArrayLike({length: 10}); //=> false\n     *      R.isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true\n     */\n    var isArrayLike = _curry1(function isArrayLike(x) {\n        if (_isArray(x)) {\n            return true;\n        }\n        if (!x) {\n            return false;\n        }\n        if (typeof x !== 'object') {\n            return false;\n        }\n        if (x instanceof String) {\n            return false;\n        }\n        if (x.nodeType === 1) {\n            return !!x.length;\n        }\n        if (x.length === 0) {\n            return true;\n        }\n        if (x.length > 0) {\n            return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);\n        }\n        return false;\n    });\n\n    /**\n     * Checks if the input value is `null` or `undefined`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Type\n     * @sig * -> Boolean\n     * @param {*} x The value to test.\n     * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.\n     * @example\n     *\n     *      R.isNil(null); //=> true\n     *      R.isNil(undefined); //=> true\n     *      R.isNil(0); //=> false\n     *      R.isNil([]); //=> false\n     */\n    var isNil = _curry1(function isNil(x) {\n        return x == null;\n    });\n\n    /**\n     * Returns a list containing the names of all the enumerable own properties of\n     * the supplied object.\n     * Note that the order of the output array is not guaranteed to be consistent\n     * across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {k: v} -> [k]\n     * @param {Object} obj The object to extract properties from\n     * @return {Array} An array of the object's own properties.\n     * @example\n     *\n     *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n     */\n    // cover IE < 9 keys issues\n    var keys = function () {\n        // cover IE < 9 keys issues\n        var hasEnumBug = !{ toString: null }.propertyIsEnumerable('toString');\n        var nonEnumerableProps = [\n            'constructor',\n            'valueOf',\n            'isPrototypeOf',\n            'toString',\n            'propertyIsEnumerable',\n            'hasOwnProperty',\n            'toLocaleString'\n        ];\n        var contains = function contains(list, item) {\n            var idx = 0;\n            while (idx < list.length) {\n                if (list[idx] === item) {\n                    return true;\n                }\n                idx += 1;\n            }\n            return false;\n        };\n        return typeof Object.keys === 'function' ? _curry1(function keys(obj) {\n            return Object(obj) !== obj ? [] : Object.keys(obj);\n        }) : _curry1(function keys(obj) {\n            if (Object(obj) !== obj) {\n                return [];\n            }\n            var prop, nIdx;\n            var ks = [];\n            for (prop in obj) {\n                if (_has(prop, obj)) {\n                    ks[ks.length] = prop;\n                }\n            }\n            if (hasEnumBug) {\n                nIdx = nonEnumerableProps.length - 1;\n                while (nIdx >= 0) {\n                    prop = nonEnumerableProps[nIdx];\n                    if (_has(prop, obj) && !contains(ks, prop)) {\n                        ks[ks.length] = prop;\n                    }\n                    nIdx -= 1;\n                }\n            }\n            return ks;\n        });\n    }();\n\n    /**\n     * Returns a list containing the names of all the properties of the supplied\n     * object, including prototype properties.\n     * Note that the order of the output array is not guaranteed to be consistent\n     * across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Object\n     * @sig {k: v} -> [k]\n     * @param {Object} obj The object to extract properties from\n     * @return {Array} An array of the object's own and prototype properties.\n     * @example\n     *\n     *      var F = function() { this.x = 'X'; };\n     *      F.prototype.y = 'Y';\n     *      var f = new F();\n     *      R.keysIn(f); //=> ['x', 'y']\n     */\n    var keysIn = _curry1(function keysIn(obj) {\n        var prop;\n        var ks = [];\n        for (prop in obj) {\n            ks[ks.length] = prop;\n        }\n        return ks;\n    });\n\n    /**\n     * Returns the number of elements in the array by returning `list.length`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig [a] -> Number\n     * @param {Array} list The array to inspect.\n     * @return {Number} The length of the array.\n     * @example\n     *\n     *      R.length([]); //=> 0\n     *      R.length([1, 2, 3]); //=> 3\n     */\n    var length = _curry1(function length(list) {\n        return list != null && is(Number, list.length) ? list.length : NaN;\n    });\n\n    /**\n     * Returns `true` if the first argument is less than the second; `false`\n     * otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @see R.gt\n     * @example\n     *\n     *      R.lt(2, 1); //=> false\n     *      R.lt(2, 2); //=> false\n     *      R.lt(2, 3); //=> true\n     *      R.lt('a', 'z'); //=> true\n     *      R.lt('z', 'a'); //=> false\n     */\n    var lt = _curry2(function lt(a, b) {\n        return a < b;\n    });\n\n    /**\n     * Returns `true` if the first argument is less than or equal to the second;\n     * `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {Number} a\n     * @param {Number} b\n     * @return {Boolean}\n     * @see R.gte\n     * @example\n     *\n     *      R.lte(2, 1); //=> false\n     *      R.lte(2, 2); //=> true\n     *      R.lte(2, 3); //=> true\n     *      R.lte('a', 'z'); //=> true\n     *      R.lte('z', 'a'); //=> false\n     */\n    var lte = _curry2(function lte(a, b) {\n        return a <= b;\n    });\n\n    /**\n     * The mapAccum function behaves like a combination of map and reduce; it\n     * applies a function to each element of a list, passing an accumulating\n     * parameter from left to right, and returning a final value of this\n     * accumulator together with the new list.\n     *\n     * The iterator function receives two arguments, *acc* and *value*, and should\n     * return a tuple *[acc, value]*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])\n     * @param {Function} fn The function to be called on every element of the input `list`.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.addIndex\n     * @example\n     *\n     *      var digits = ['1', '2', '3', '4'];\n     *      var append = (a, b) => [a + b, a + b];\n     *\n     *      R.mapAccum(append, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]\n     */\n    var mapAccum = _curry3(function mapAccum(fn, acc, list) {\n        var idx = 0;\n        var len = list.length;\n        var result = [];\n        var tuple = [acc];\n        while (idx < len) {\n            tuple = fn(tuple[0], list[idx]);\n            result[idx] = tuple[1];\n            idx += 1;\n        }\n        return [\n            tuple[0],\n            result\n        ];\n    });\n\n    /**\n     * The mapAccumRight function behaves like a combination of map and reduce; it\n     * applies a function to each element of a list, passing an accumulating\n     * parameter from right to left, and returning a final value of this\n     * accumulator together with the new list.\n     *\n     * Similar to `mapAccum`, except moves through the input list from the right to\n     * the left.\n     *\n     * The iterator function receives two arguments, *acc* and *value*, and should\n     * return a tuple *[acc, value]*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])\n     * @param {Function} fn The function to be called on every element of the input `list`.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.addIndex\n     * @example\n     *\n     *      var digits = ['1', '2', '3', '4'];\n     *      var append = (a, b) => [a + b, a + b];\n     *\n     *      R.mapAccumRight(append, 0, digits); //=> ['04321', ['04321', '0432', '043', '04']]\n     */\n    var mapAccumRight = _curry3(function mapAccumRight(fn, acc, list) {\n        var idx = list.length - 1;\n        var result = [];\n        var tuple = [acc];\n        while (idx >= 0) {\n            tuple = fn(tuple[0], list[idx]);\n            result[idx] = tuple[1];\n            idx -= 1;\n        }\n        return [\n            tuple[0],\n            result\n        ];\n    });\n\n    /**\n     * Tests a regular expression against a String. Note that this function will\n     * return an empty array when there are no matches. This differs from\n     * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n     * which returns `null` when there are no matches.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category String\n     * @sig RegExp -> String -> [String | Undefined]\n     * @param {RegExp} rx A regular expression.\n     * @param {String} str The string to match against\n     * @return {Array} The list of matches or empty array.\n     * @see R.test\n     * @example\n     *\n     *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']\n     *      R.match(/a/, 'b'); //=> []\n     *      R.match(/a/, null); //=> TypeError: null does not have a method named \"match\"\n     */\n    var match = _curry2(function match(rx, str) {\n        return str.match(rx) || [];\n    });\n\n    /**\n     * mathMod behaves like the modulo operator should mathematically, unlike the\n     * `%` operator (and by extension, R.modulo). So while \"-17 % 5\" is -2,\n     * mathMod(-17, 5) is 3. mathMod requires Integer arguments, and returns NaN\n     * when the modulus is zero or negative.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} m The dividend.\n     * @param {Number} p the modulus.\n     * @return {Number} The result of `b mod a`.\n     * @example\n     *\n     *      R.mathMod(-17, 5);  //=> 3\n     *      R.mathMod(17, 5);   //=> 2\n     *      R.mathMod(17, -5);  //=> NaN\n     *      R.mathMod(17, 0);   //=> NaN\n     *      R.mathMod(17.2, 5); //=> NaN\n     *      R.mathMod(17, 5.3); //=> NaN\n     *\n     *      var clock = R.mathMod(R.__, 12);\n     *      clock(15); //=> 3\n     *      clock(24); //=> 0\n     *\n     *      var seventeenMod = R.mathMod(17);\n     *      seventeenMod(3);  //=> 2\n     *      seventeenMod(4);  //=> 1\n     *      seventeenMod(10); //=> 7\n     */\n    var mathMod = _curry2(function mathMod(m, p) {\n        if (!_isInteger(m)) {\n            return NaN;\n        }\n        if (!_isInteger(p) || p < 1) {\n            return NaN;\n        }\n        return (m % p + p) % p;\n    });\n\n    /**\n     * Returns the larger of its two arguments.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> a\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.maxBy, R.min\n     * @example\n     *\n     *      R.max(789, 123); //=> 789\n     *      R.max('a', 'b'); //=> 'b'\n     */\n    var max = _curry2(function max(a, b) {\n        return b > a ? b : a;\n    });\n\n    /**\n     * Takes a function and two values, and returns whichever value produces the\n     * larger result when passed to the provided function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Relation\n     * @sig Ord b => (a -> b) -> a -> a -> a\n     * @param {Function} f\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.max, R.minBy\n     * @example\n     *\n     *      //  square :: Number -> Number\n     *      var square = n => n * n;\n     *\n     *      R.maxBy(square, -3, 2); //=> -3\n     *\n     *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5\n     *      R.reduce(R.maxBy(square), 0, []); //=> 0\n     */\n    var maxBy = _curry3(function maxBy(f, a, b) {\n        return f(b) > f(a) ? b : a;\n    });\n\n    /**\n     * Creates a new object with the own properties of the two provided objects. If\n     * a key exists in both objects, the provided function is applied to the key\n     * and the values associated with the key in each object, with the result being\n     * used as the value associated with the key in the returned object. The key\n     * will be excluded from the returned object if the resulting value is\n     * `undefined`.\n     *\n     * @func\n     * @memberOf R\n     * @since 0.19.0\n     * @category Object\n     * @sig (String -> a -> a -> a) -> {a} -> {a} -> {a}\n     * @param {Function} fn\n     * @param {Object} l\n     * @param {Object} r\n     * @return {Object}\n     * @see R.merge, R.mergeWith\n     * @example\n     *\n     *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n     *      R.mergeWithKey(concatValues,\n     *                     { a: true, thing: 'foo', values: [10, 20] },\n     *                     { b: true, thing: 'bar', values: [15, 35] });\n     *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }\n     */\n    var mergeWithKey = _curry3(function mergeWithKey(fn, l, r) {\n        var result = {};\n        var k;\n        for (k in l) {\n            if (_has(k, l)) {\n                result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];\n            }\n        }\n        for (k in r) {\n            if (_has(k, r) && !_has(k, result)) {\n                result[k] = r[k];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Returns the smaller of its two arguments.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> a\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.minBy, R.max\n     * @example\n     *\n     *      R.min(789, 123); //=> 123\n     *      R.min('a', 'b'); //=> 'a'\n     */\n    var min = _curry2(function min(a, b) {\n        return b < a ? b : a;\n    });\n\n    /**\n     * Takes a function and two values, and returns whichever value produces the\n     * smaller result when passed to the provided function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Relation\n     * @sig Ord b => (a -> b) -> a -> a -> a\n     * @param {Function} f\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.min, R.maxBy\n     * @example\n     *\n     *      //  square :: Number -> Number\n     *      var square = n => n * n;\n     *\n     *      R.minBy(square, -3, 2); //=> 2\n     *\n     *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1\n     *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity\n     */\n    var minBy = _curry3(function minBy(f, a, b) {\n        return f(b) < f(a) ? b : a;\n    });\n\n    /**\n     * Divides the second parameter by the first and returns the remainder. Note\n     * that this function preserves the JavaScript-style behavior for modulo. For\n     * mathematical modulo see `mathMod`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The value to the divide.\n     * @param {Number} b The pseudo-modulus\n     * @return {Number} The result of `b % a`.\n     * @see R.mathMod\n     * @example\n     *\n     *      R.modulo(17, 3); //=> 2\n     *      // JS behavior:\n     *      R.modulo(-17, 3); //=> -2\n     *      R.modulo(17, -3); //=> 2\n     *\n     *      var isOdd = R.modulo(R.__, 2);\n     *      isOdd(42); //=> 0\n     *      isOdd(21); //=> 1\n     */\n    var modulo = _curry2(function modulo(a, b) {\n        return a % b;\n    });\n\n    /**\n     * Multiplies two numbers. Equivalent to `a * b` but curried.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The first value.\n     * @param {Number} b The second value.\n     * @return {Number} The result of `a * b`.\n     * @see R.divide\n     * @example\n     *\n     *      var double = R.multiply(2);\n     *      var triple = R.multiply(3);\n     *      double(3);       //=>  6\n     *      triple(4);       //=> 12\n     *      R.multiply(2, 5);  //=> 10\n     */\n    var multiply = _curry2(function multiply(a, b) {\n        return a * b;\n    });\n\n    /**\n     * Wraps a function of any arity (including nullary) in a function that accepts\n     * exactly `n` parameters. Any extraneous parameters will not be passed to the\n     * supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig Number -> (* -> a) -> (* -> a)\n     * @param {Number} n The desired arity of the new function.\n     * @param {Function} fn The function to wrap.\n     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n     *         arity `n`.\n     * @example\n     *\n     *      var takesTwoArgs = (a, b) => [a, b];\n     *\n     *      takesTwoArgs.length; //=> 2\n     *      takesTwoArgs(1, 2); //=> [1, 2]\n     *\n     *      var takesOneArg = R.nAry(1, takesTwoArgs);\n     *      takesOneArg.length; //=> 1\n     *      // Only `n` arguments are passed to the wrapped function\n     *      takesOneArg(1, 2); //=> [1, undefined]\n     */\n    var nAry = _curry2(function nAry(n, fn) {\n        switch (n) {\n        case 0:\n            return function () {\n                return fn.call(this);\n            };\n        case 1:\n            return function (a0) {\n                return fn.call(this, a0);\n            };\n        case 2:\n            return function (a0, a1) {\n                return fn.call(this, a0, a1);\n            };\n        case 3:\n            return function (a0, a1, a2) {\n                return fn.call(this, a0, a1, a2);\n            };\n        case 4:\n            return function (a0, a1, a2, a3) {\n                return fn.call(this, a0, a1, a2, a3);\n            };\n        case 5:\n            return function (a0, a1, a2, a3, a4) {\n                return fn.call(this, a0, a1, a2, a3, a4);\n            };\n        case 6:\n            return function (a0, a1, a2, a3, a4, a5) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5);\n            };\n        case 7:\n            return function (a0, a1, a2, a3, a4, a5, a6) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6);\n            };\n        case 8:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);\n            };\n        case 9:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);\n            };\n        case 10:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);\n            };\n        default:\n            throw new Error('First argument to nAry must be a non-negative integer no greater than ten');\n        }\n    });\n\n    /**\n     * Negates its argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Math\n     * @sig Number -> Number\n     * @param {Number} n\n     * @return {Number}\n     * @example\n     *\n     *      R.negate(42); //=> -42\n     */\n    var negate = _curry1(function negate(n) {\n        return -n;\n    });\n\n    /**\n     * Returns `true` if no elements of the list match the predicate, `false`\n     * otherwise.\n     *\n     * Dispatches to the `any` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Boolean\n     * @param {Function} fn The predicate function.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.\n     * @see R.all, R.any\n     * @example\n     *\n     *      R.none(R.isNaN, [1, 2, 3]); //=> true\n     *      R.none(R.isNaN, [1, 2, 3, NaN]); //=> false\n     */\n    var none = _curry2(_complement(_dispatchable('any', _xany, any)));\n\n    /**\n     * A function that returns the `!` of its argument. It will return `true` when\n     * passed false-y value, and `false` when passed a truth-y one.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig * -> Boolean\n     * @param {*} a any value\n     * @return {Boolean} the logical inverse of passed argument.\n     * @see R.complement\n     * @example\n     *\n     *      R.not(true); //=> false\n     *      R.not(false); //=> true\n     *      R.not(0); => true\n     *      R.not(1); => false\n     */\n    var not = _curry1(function not(a) {\n        return !a;\n    });\n\n    /**\n     * Returns the nth element of the given list or string. If n is negative the\n     * element at index length + n is returned.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> [a] -> a | Undefined\n     * @sig Number -> String -> String\n     * @param {Number} offset\n     * @param {*} list\n     * @return {*}\n     * @example\n     *\n     *      var list = ['foo', 'bar', 'baz', 'quux'];\n     *      R.nth(1, list); //=> 'bar'\n     *      R.nth(-1, list); //=> 'quux'\n     *      R.nth(-99, list); //=> undefined\n     *\n     *      R.nth('abc', 2); //=> 'c'\n     *      R.nth('abc', 3); //=> ''\n     */\n    var nth = _curry2(function nth(offset, list) {\n        var idx = offset < 0 ? list.length + offset : offset;\n        return _isString(list) ? list.charAt(idx) : list[idx];\n    });\n\n    /**\n     * Returns a function which returns its nth argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig Number -> *... -> *\n     * @param {Number} n\n     * @return {Function}\n     * @example\n     *\n     *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'\n     *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'\n     */\n    var nthArg = _curry1(function nthArg(n) {\n        return function () {\n            return nth(n, arguments);\n        };\n    });\n\n    /**\n     * Creates an object containing a single key:value pair.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Object\n     * @sig String -> a -> {String:a}\n     * @param {String} key\n     * @param {*} val\n     * @return {Object}\n     * @see R.pair\n     * @example\n     *\n     *      var matchPhrases = R.compose(\n     *        R.objOf('must'),\n     *        R.map(R.objOf('match_phrase'))\n     *      );\n     *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}\n     */\n    var objOf = _curry2(function objOf(key, val) {\n        var obj = {};\n        obj[key] = val;\n        return obj;\n    });\n\n    /**\n     * Returns a singleton array containing the value provided.\n     *\n     * Note this `of` is different from the ES6 `of`; See\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Function\n     * @sig a -> [a]\n     * @param {*} x any value\n     * @return {Array} An array wrapping `x`.\n     * @example\n     *\n     *      R.of(null); //=> [null]\n     *      R.of([42]); //=> [[42]]\n     */\n    var of = _curry1(_of);\n\n    /**\n     * Accepts a function `fn` and returns a function that guards invocation of\n     * `fn` such that `fn` can only ever be called once, no matter how many times\n     * the returned function is invoked. The first value calculated is returned in\n     * subsequent invocations.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a... -> b) -> (a... -> b)\n     * @param {Function} fn The function to wrap in a call-only-once wrapper.\n     * @return {Function} The wrapped function.\n     * @example\n     *\n     *      var addOneOnce = R.once(x => x + 1);\n     *      addOneOnce(10); //=> 11\n     *      addOneOnce(addOneOnce(50)); //=> 11\n     */\n    var once = _curry1(function once(fn) {\n        var called = false;\n        var result;\n        return _arity(fn.length, function () {\n            if (called) {\n                return result;\n            }\n            called = true;\n            result = fn.apply(this, arguments);\n            return result;\n        });\n    });\n\n    /**\n     * Returns `true` if one or both of its arguments are `true`. Returns `false`\n     * if both arguments are `false`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig * -> * -> *\n     * @param {Boolean} a A boolean value\n     * @param {Boolean} b A boolean value\n     * @return {Boolean} `true` if one or both arguments are `true`, `false` otherwise\n     * @see R.either\n     * @example\n     *\n     *      R.or(true, true); //=> true\n     *      R.or(true, false); //=> true\n     *      R.or(false, true); //=> true\n     *      R.or(false, false); //=> false\n     */\n    var or = _curry2(function or(a, b) {\n        return a || b;\n    });\n\n    /**\n     * Returns the result of \"setting\" the portion of the given data structure\n     * focused by the given lens to the result of applying the given function to\n     * the focused value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Lens s a -> (a -> a) -> s -> s\n     * @param {Lens} lens\n     * @param {*} v\n     * @param {*} x\n     * @return {*}\n     * @see R.prop, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var headLens = R.lensIndex(0);\n     *\n     *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n     */\n    var over = function () {\n        var Identity = function (x) {\n            return {\n                value: x,\n                map: function (f) {\n                    return Identity(f(x));\n                }\n            };\n        };\n        return _curry3(function over(lens, f, x) {\n            return lens(function (y) {\n                return Identity(f(y));\n            })(x).value;\n        });\n    }();\n\n    /**\n     * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category List\n     * @sig a -> b -> (a,b)\n     * @param {*} fst\n     * @param {*} snd\n     * @return {Array}\n     * @see R.createMapEntry, R.of\n     * @example\n     *\n     *      R.pair('foo', 'bar'); //=> ['foo', 'bar']\n     */\n    var pair = _curry2(function pair(fst, snd) {\n        return [\n            fst,\n            snd\n        ];\n    });\n\n    /**\n     * Retrieve the value at a given path.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Object\n     * @sig [String] -> {k: v} -> v | Undefined\n     * @param {Array} path The path to use.\n     * @param {Object} obj The object to retrieve the nested property from.\n     * @return {*} The data at `path`.\n     * @example\n     *\n     *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n     *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n     */\n    var path = _curry2(function path(paths, obj) {\n        var val = obj;\n        var idx = 0;\n        while (idx < paths.length) {\n            if (val == null) {\n                return;\n            }\n            val = val[paths[idx]];\n            idx += 1;\n        }\n        return val;\n    });\n\n    /**\n     * If the given, non-null object has a value at the given path, returns the\n     * value at that path. Otherwise returns the provided default value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Object\n     * @sig a -> [String] -> Object -> a\n     * @param {*} d The default value.\n     * @param {Array} p The path to use.\n     * @param {Object} obj The object to retrieve the nested property from.\n     * @return {*} The data at `path` of the supplied object or the default value.\n     * @example\n     *\n     *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2\n     *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> \"N/A\"\n     */\n    var pathOr = _curry3(function pathOr(d, p, obj) {\n        return defaultTo(d, path(p, obj));\n    });\n\n    /**\n     * Returns `true` if the specified object property at given path satisfies the\n     * given predicate; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since 0.19.0\n     * @category Logic\n     * @sig (a -> Boolean) -> [String] -> Object -> Boolean\n     * @param {Function} pred\n     * @param {Array} propPath\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.propSatisfies, R.path\n     * @example\n     *\n     *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true\n     */\n    var pathSatisfies = _curry3(function pathSatisfies(pred, propPath, obj) {\n        return propPath.length > 0 && pred(path(propPath, obj));\n    });\n\n    /**\n     * Returns a partial copy of an object containing only the keys specified. If\n     * the key does not exist, the property is ignored.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [k] -> {k: v} -> {k: v}\n     * @param {Array} names an array of String property names to copy onto a new object\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with only properties from `names` on it.\n     * @see R.omit, R.props\n     * @example\n     *\n     *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n     *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}\n     */\n    var pick = _curry2(function pick(names, obj) {\n        var result = {};\n        var idx = 0;\n        while (idx < names.length) {\n            if (names[idx] in obj) {\n                result[names[idx]] = obj[names[idx]];\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Similar to `pick` except that this one includes a `key: undefined` pair for\n     * properties that don't exist.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [k] -> {k: v} -> {k: v}\n     * @param {Array} names an array of String property names to copy onto a new object\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with only properties from `names` on it.\n     * @see R.pick\n     * @example\n     *\n     *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n     *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}\n     */\n    var pickAll = _curry2(function pickAll(names, obj) {\n        var result = {};\n        var idx = 0;\n        var len = names.length;\n        while (idx < len) {\n            var name = names[idx];\n            result[name] = obj[name];\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns a partial copy of an object containing only the keys that satisfy\n     * the supplied predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @sig (v, k -> Boolean) -> {k: v} -> {k: v}\n     * @param {Function} pred A predicate to determine whether or not a key\n     *        should be included on the output object.\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with only properties that satisfy `pred`\n     *         on it.\n     * @see R.pick, R.filter\n     * @example\n     *\n     *      var isUpperCase = (val, key) => key.toUpperCase() === key;\n     *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}\n     */\n    var pickBy = _curry2(function pickBy(test, obj) {\n        var result = {};\n        for (var prop in obj) {\n            if (test(obj[prop], prop, obj)) {\n                result[prop] = obj[prop];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Returns a new list with the given element at the front, followed by the\n     * contents of the list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> [a]\n     * @param {*} el The item to add to the head of the output list.\n     * @param {Array} list The array to add to the tail of the output list.\n     * @return {Array} A new array.\n     * @see R.append\n     * @example\n     *\n     *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']\n     */\n    var prepend = _curry2(function prepend(el, list) {\n        return _concat([el], list);\n    });\n\n    /**\n     * Returns a function that when supplied an object returns the indicated\n     * property of that object, if it exists.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig s -> {s: a} -> a | Undefined\n     * @param {String} p The property name\n     * @param {Object} obj The object to query\n     * @return {*} The value at `obj.p`.\n     * @example\n     *\n     *      R.prop('x', {x: 100}); //=> 100\n     *      R.prop('x', {}); //=> undefined\n     */\n    var prop = _curry2(function prop(p, obj) {\n        return obj[p];\n    });\n\n    /**\n     * If the given, non-null object has an own property with the specified name,\n     * returns the value of that property. Otherwise returns the provided default\n     * value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category Object\n     * @sig a -> String -> Object -> a\n     * @param {*} val The default value.\n     * @param {String} p The name of the property to return.\n     * @param {Object} obj The object to query.\n     * @return {*} The value of given property of the supplied object or the default value.\n     * @example\n     *\n     *      var alice = {\n     *        name: 'ALICE',\n     *        age: 101\n     *      };\n     *      var favorite = R.prop('favoriteLibrary');\n     *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');\n     *\n     *      favorite(alice);  //=> undefined\n     *      favoriteWithDefault(alice);  //=> 'Ramda'\n     */\n    var propOr = _curry3(function propOr(val, p, obj) {\n        return obj != null && _has(p, obj) ? obj[p] : val;\n    });\n\n    /**\n     * Returns `true` if the specified object property satisfies the given\n     * predicate; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Logic\n     * @sig (a -> Boolean) -> String -> {String: a} -> Boolean\n     * @param {Function} pred\n     * @param {String} name\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.propEq, R.propIs\n     * @example\n     *\n     *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true\n     */\n    var propSatisfies = _curry3(function propSatisfies(pred, name, obj) {\n        return pred(obj[name]);\n    });\n\n    /**\n     * Acts as multiple `prop`: array of keys in, array of values out. Preserves\n     * order.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [k] -> {k: v} -> [v]\n     * @param {Array} ps The property names to fetch\n     * @param {Object} obj The object to query\n     * @return {Array} The corresponding values or partially applied function.\n     * @example\n     *\n     *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]\n     *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]\n     *\n     *      var fullName = R.compose(R.join(' '), R.props(['first', 'last']));\n     *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'\n     */\n    var props = _curry2(function props(ps, obj) {\n        var len = ps.length;\n        var out = [];\n        var idx = 0;\n        while (idx < len) {\n            out[idx] = obj[ps[idx]];\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> Number -> [Number]\n     * @param {Number} from The first number in the list.\n     * @param {Number} to One more than the last number in the list.\n     * @return {Array} The list of numbers in tthe set `[a, b)`.\n     * @example\n     *\n     *      R.range(1, 5);    //=> [1, 2, 3, 4]\n     *      R.range(50, 53);  //=> [50, 51, 52]\n     */\n    var range = _curry2(function range(from, to) {\n        if (!(_isNumber(from) && _isNumber(to))) {\n            throw new TypeError('Both arguments to range must be numbers');\n        }\n        var result = [];\n        var n = from;\n        while (n < to) {\n            result.push(n);\n            n += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns a single item by iterating through the list, successively calling\n     * the iterator function and passing it an accumulator value and the current\n     * value from the array, and then passing the result to the next call.\n     *\n     * Similar to `reduce`, except moves through the input list from the right to\n     * the left.\n     *\n     * The iterator function receives two values: *(acc, value)*\n     *\n     * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse\n     * arrays), unlike the native `Array.prototype.reduce` method. For more details\n     * on this behavior, see:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a,b -> a) -> a -> [b] -> a\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.addIndex\n     * @example\n     *\n     *      var pairs = [ ['a', 1], ['b', 2], ['c', 3] ];\n     *      var flattenPairs = (acc, pair) => acc.concat(pair);\n     *\n     *      R.reduceRight(flattenPairs, [], pairs); //=> [ 'c', 3, 'b', 2, 'a', 1 ]\n     */\n    var reduceRight = _curry3(function reduceRight(fn, acc, list) {\n        var idx = list.length - 1;\n        while (idx >= 0) {\n            acc = fn(acc, list[idx]);\n            idx -= 1;\n        }\n        return acc;\n    });\n\n    /**\n     * Returns a value wrapped to indicate that it is the final value of the reduce\n     * and transduce functions. The returned value should be considered a black\n     * box: the internal structure is not guaranteed to be stable.\n     *\n     * Note: this optimization is unavailable to functions not explicitly listed\n     * above. For instance, it is not currently supported by reduceRight.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category List\n     * @sig a -> *\n     * @param {*} x The final value of the reduce.\n     * @return {*} The wrapped value.\n     * @see R.reduce, R.transduce\n     * @example\n     *\n     *      R.reduce(\n     *        R.pipe(R.add, R.when(R.gte(R.__, 10), R.reduced)),\n     *        0,\n     *        [1, 2, 3, 4, 5]) // 10\n     */\n    var reduced = _curry1(_reduced);\n\n    /**\n     * Removes the sub-list of `list` starting at index `start` and containing\n     * `count` elements. _Note that this is not destructive_: it returns a copy of\n     * the list with the changes.\n     * <small>No lists have been harmed in the application of this function.</small>\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.2\n     * @category List\n     * @sig Number -> Number -> [a] -> [a]\n     * @param {Number} start The position to start removing elements\n     * @param {Number} count The number of elements to remove\n     * @param {Array} list The list to remove from\n     * @return {Array} A new Array with `count` elements from `start` removed.\n     * @example\n     *\n     *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]\n     */\n    var remove = _curry3(function remove(start, count, list) {\n        return _concat(_slice(list, 0, Math.min(start, list.length)), _slice(list, Math.min(list.length, start + count)));\n    });\n\n    /**\n     * Replace a substring or regex match in a string with a replacement.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category String\n     * @sig RegExp|String -> String -> String -> String\n     * @param {RegExp|String} pattern A regular expression or a substring to match.\n     * @param {String} replacement The string to replace the matches with.\n     * @param {String} str The String to do the search and replacement in.\n     * @return {String} The result.\n     * @example\n     *\n     *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\n     *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\n     *\n     *      // Use the \"g\" (global) flag to replace all occurrences:\n     *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'\n     */\n    var replace = _curry3(function replace(regex, replacement, str) {\n        return str.replace(regex, replacement);\n    });\n\n    /**\n     * Returns a new list or string with the elements or characters in reverse\n     * order.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a]\n     * @sig String -> String\n     * @param {Array|String} list\n     * @return {Array|String}\n     * @example\n     *\n     *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n     *      R.reverse([1, 2]);     //=> [2, 1]\n     *      R.reverse([1]);        //=> [1]\n     *      R.reverse([]);         //=> []\n     *\n     *      R.reverse('abc');      //=> 'cba'\n     *      R.reverse('ab');       //=> 'ba'\n     *      R.reverse('a');        //=> 'a'\n     *      R.reverse('');         //=> ''\n     */\n    var reverse = _curry1(function reverse(list) {\n        return _isString(list) ? list.split('').reverse().join('') : _slice(list).reverse();\n    });\n\n    /**\n     * Scan is similar to reduce, but returns a list of successively reduced values\n     * from the left\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (a,b -> a) -> a -> [b] -> [a]\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {Array} A list of all intermediately reduced values.\n     * @example\n     *\n     *      var numbers = [1, 2, 3, 4];\n     *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]\n     */\n    var scan = _curry3(function scan(fn, acc, list) {\n        var idx = 0;\n        var len = list.length;\n        var result = [acc];\n        while (idx < len) {\n            acc = fn(acc, list[idx]);\n            result[idx + 1] = acc;\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns the result of \"setting\" the portion of the given data structure\n     * focused by the given lens to the given value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Lens s a -> a -> s -> s\n     * @param {Lens} lens\n     * @param {*} v\n     * @param {*} x\n     * @return {*}\n     * @see R.prop, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var xLens = R.lensProp('x');\n     *\n     *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}\n     *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}\n     */\n    var set = _curry3(function set(lens, v, x) {\n        return over(lens, always(v), x);\n    });\n\n    /**\n     * Returns the elements of the given list or string (or object with a `slice`\n     * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n     *\n     * Dispatches to the `slice` method of the third argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.4\n     * @category List\n     * @sig Number -> Number -> [a] -> [a]\n     * @sig Number -> Number -> String -> String\n     * @param {Number} fromIndex The start index (inclusive).\n     * @param {Number} toIndex The end index (exclusive).\n     * @param {*} list\n     * @return {*}\n     * @example\n     *\n     *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n     *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n     *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n     *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n     *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n     */\n    var slice = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n        return Array.prototype.slice.call(list, fromIndex, toIndex);\n    }));\n\n    /**\n     * Returns a copy of the list, sorted according to the comparator function,\n     * which should accept two values at a time and return a negative number if the\n     * first value is smaller, a positive number if it's larger, and zero if they\n     * are equal. Please note that this is a **copy** of the list. It does not\n     * modify the original.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a,a -> Number) -> [a] -> [a]\n     * @param {Function} comparator A sorting function :: a -> b -> Int\n     * @param {Array} list The list to sort\n     * @return {Array} a new array with its elements sorted by the comparator function.\n     * @example\n     *\n     *      var diff = function(a, b) { return a - b; };\n     *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]\n     */\n    var sort = _curry2(function sort(comparator, list) {\n        return _slice(list).sort(comparator);\n    });\n\n    /**\n     * Sorts the list according to the supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord b => (a -> b) -> [a] -> [a]\n     * @param {Function} fn\n     * @param {Array} list The list to sort.\n     * @return {Array} A new list sorted by the keys generated by `fn`.\n     * @example\n     *\n     *      var sortByFirstItem = R.sortBy(R.prop(0));\n     *      var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));\n     *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];\n     *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]\n     *      var alice = {\n     *        name: 'ALICE',\n     *        age: 101\n     *      };\n     *      var bob = {\n     *        name: 'Bob',\n     *        age: -10\n     *      };\n     *      var clara = {\n     *        name: 'clara',\n     *        age: 314.159\n     *      };\n     *      var people = [clara, bob, alice];\n     *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]\n     */\n    var sortBy = _curry2(function sortBy(fn, list) {\n        return _slice(list).sort(function (a, b) {\n            var aa = fn(a);\n            var bb = fn(b);\n            return aa < bb ? -1 : aa > bb ? 1 : 0;\n        });\n    });\n\n    /**\n     * Splits a given list or string at a given index.\n     *\n     * @func\n     * @memberOf R\n     * @since 0.19.0\n     * @category List\n     * @sig Number -> [a] -> [[a], [a]]\n     * @sig Number -> String -> [String, String]\n     * @param {Number} index The index where the array/string is split.\n     * @param {Array|String} array The array/string to be split.\n     * @return {Array}\n     * @example\n     *\n     *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]\n     *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']\n     *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']\n     */\n    var splitAt = _curry2(function splitAt(index, array) {\n        return [\n            slice(0, index, array),\n            slice(index, length(array), array)\n        ];\n    });\n\n    /**\n     * Splits a collection into slices of the specified length.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig Number -> [a] -> [[a]]\n     * @sig Number -> String -> [String]\n     * @param {Number} n\n     * @param {Array} list\n     * @return {Array}\n     * @example\n     *\n     *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]\n     *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']\n     */\n    var splitEvery = _curry2(function splitEvery(n, list) {\n        if (n <= 0) {\n            throw new Error('First argument to splitEvery must be a positive integer');\n        }\n        var result = [];\n        var idx = 0;\n        while (idx < list.length) {\n            result.push(slice(idx, idx += n, list));\n        }\n        return result;\n    });\n\n    /**\n     * Takes a list and a predicate and returns a pair of lists with the following properties:\n     *\n     *  - the result of concatenating the two output lists is equivalent to the input list;\n     *  - none of the elements of the first output list satisfies the predicate; and\n     *  - if the second output list is non-empty, its first element satisfies the predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since 0.19.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [[a], [a]]\n     * @param {Function} pred The predicate that determines where the array is split.\n     * @param {Array} list The array to be split.\n     * @return {Array}\n     * @example\n     *\n     *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]\n     */\n    var splitWhen = _curry2(function splitWhen(pred, list) {\n        var idx = 0;\n        var len = list.length;\n        var prefix = [];\n        while (idx < len && !pred(list[idx])) {\n            prefix.push(list[idx]);\n            idx += 1;\n        }\n        return [\n            prefix,\n            _slice(list, idx)\n        ];\n    });\n\n    /**\n     * Subtracts two numbers. Equivalent to `a - b` but curried.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The first value.\n     * @param {Number} b The second value.\n     * @return {Number} The result of `a - b`.\n     * @see R.add\n     * @example\n     *\n     *      R.subtract(10, 8); //=> 2\n     *\n     *      var minus5 = R.subtract(R.__, 5);\n     *      minus5(17); //=> 12\n     *\n     *      var complementaryAngle = R.subtract(90);\n     *      complementaryAngle(30); //=> 60\n     *      complementaryAngle(72); //=> 18\n     */\n    var subtract = _curry2(function subtract(a, b) {\n        return a - b;\n    });\n\n    /**\n     * Returns all but the first element of the given list or string (or object\n     * with a `tail` method).\n     *\n     * Dispatches to the `slice` method of the first argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a]\n     * @sig String -> String\n     * @param {*} list\n     * @return {*}\n     * @see R.head, R.init, R.last\n     * @example\n     *\n     *      R.tail([1, 2, 3]);  //=> [2, 3]\n     *      R.tail([1, 2]);     //=> [2]\n     *      R.tail([1]);        //=> []\n     *      R.tail([]);         //=> []\n     *\n     *      R.tail('abc');  //=> 'bc'\n     *      R.tail('ab');   //=> 'b'\n     *      R.tail('a');    //=> ''\n     *      R.tail('');     //=> ''\n     */\n    var tail = _checkForMethod('tail', slice(1, Infinity));\n\n    /**\n     * Returns the first `n` elements of the given list, string, or\n     * transducer/transformer (or object with a `take` method).\n     *\n     * Dispatches to the `take` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n\n     * @param {*} list\n     * @return {*}\n     * @see R.drop\n     * @example\n     *\n     *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\n     *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n     *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.take(3, 'ramda');               //=> 'ram'\n     *\n     *      var personnel = [\n     *        'Dave Brubeck',\n     *        'Paul Desmond',\n     *        'Eugene Wright',\n     *        'Joe Morello',\n     *        'Gerry Mulligan',\n     *        'Bob Bates',\n     *        'Joe Dodge',\n     *        'Ron Crotty'\n     *      ];\n     *\n     *      var takeFive = R.take(5);\n     *      takeFive(personnel);\n     *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']\n     */\n    var take = _curry2(_dispatchable('take', _xtake, function take(n, xs) {\n        return slice(0, n < 0 ? Infinity : n, xs);\n    }));\n\n    /**\n     * Returns a new list containing the last `n` elements of a given list, passing\n     * each value to the supplied predicate function, and terminating when the\n     * predicate function returns `false`. Excludes the element that caused the\n     * predicate function to fail. The predicate function is passed one argument:\n     * *(value)*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.dropLastWhile, R.addIndex\n     * @example\n     *\n     *      var isNotOne = x => x !== 1;\n     *\n     *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]\n     */\n    var takeLastWhile = _curry2(function takeLastWhile(fn, list) {\n        var idx = list.length - 1;\n        while (idx >= 0 && fn(list[idx])) {\n            idx -= 1;\n        }\n        return _slice(list, idx + 1, Infinity);\n    });\n\n    /**\n     * Returns a new list containing the first `n` elements of a given list,\n     * passing each value to the supplied predicate function, and terminating when\n     * the predicate function returns `false`. Excludes the element that caused the\n     * predicate function to fail. The predicate function is passed one argument:\n     * *(value)*.\n     *\n     * Dispatches to the `takeWhile` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.dropWhile, R.transduce, R.addIndex\n     * @example\n     *\n     *      var isNotFour = x => x !== 4;\n     *\n     *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]\n     */\n    var takeWhile = _curry2(_dispatchable('takeWhile', _xtakeWhile, function takeWhile(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len && fn(list[idx])) {\n            idx += 1;\n        }\n        return _slice(list, 0, idx);\n    }));\n\n    /**\n     * Runs the given function with the supplied object, then returns the object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a -> *) -> a -> a\n     * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\n     * @param {*} x\n     * @return {*} `x`.\n     * @example\n     *\n     *      var sayX = x => console.log('x is ' + x);\n     *      R.tap(sayX, 100); //=> 100\n     *      //-> 'x is 100'\n     */\n    var tap = _curry2(function tap(fn, x) {\n        fn(x);\n        return x;\n    });\n\n    /**\n     * Calls an input function `n` times, returning an array containing the results\n     * of those function calls.\n     *\n     * `fn` is passed one argument: The current value of `n`, which begins at `0`\n     * and is gradually incremented to `n - 1`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.3\n     * @category List\n     * @sig (Number -> a) -> Number -> [a]\n     * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\n     * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\n     * @return {Array} An array containing the return values of all calls to `fn`.\n     * @example\n     *\n     *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\n     */\n    var times = _curry2(function times(fn, n) {\n        var len = Number(n);\n        var list = new Array(len);\n        var idx = 0;\n        while (idx < len) {\n            list[idx] = fn(idx);\n            idx += 1;\n        }\n        return list;\n    });\n\n    /**\n     * Converts an object into an array of key, value arrays. Only the object's\n     * own properties are used.\n     * Note that the order of the output array is not guaranteed to be consistent\n     * across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.0\n     * @category Object\n     * @sig {String: *} -> [[String,*]]\n     * @param {Object} obj The object to extract from\n     * @return {Array} An array of key, value arrays from the object's own properties.\n     * @see R.fromPairs\n     * @example\n     *\n     *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]\n     */\n    var toPairs = _curry1(function toPairs(obj) {\n        var pairs = [];\n        for (var prop in obj) {\n            if (_has(prop, obj)) {\n                pairs[pairs.length] = [\n                    prop,\n                    obj[prop]\n                ];\n            }\n        }\n        return pairs;\n    });\n\n    /**\n     * Converts an object into an array of key, value arrays. The object's own\n     * properties and prototype properties are used. Note that the order of the\n     * output array is not guaranteed to be consistent across different JS\n     * platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.0\n     * @category Object\n     * @sig {String: *} -> [[String,*]]\n     * @param {Object} obj The object to extract from\n     * @return {Array} An array of key, value arrays from the object's own\n     *         and prototype properties.\n     * @example\n     *\n     *      var F = function() { this.x = 'X'; };\n     *      F.prototype.y = 'Y';\n     *      var f = new F();\n     *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]\n     */\n    var toPairsIn = _curry1(function toPairsIn(obj) {\n        var pairs = [];\n        for (var prop in obj) {\n            pairs[pairs.length] = [\n                prop,\n                obj[prop]\n            ];\n        }\n        return pairs;\n    });\n\n    /**\n     * Transposes the rows and columns of a 2D list.\n     * When passed a list of `n` lists of length `x`,\n     * returns a list of `x` lists of length `n`.\n     *\n     *\n     * @func\n     * @memberOf R\n     * @since 0.19.0\n     * @category List\n     * @sig [[a]] -> [[a]]\n     * @param {Array} list A 2D list\n     * @return {Array} A 2D list\n     * @example\n     *\n     *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]\n     *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n     *\n     * If some of the rows are shorter than the following rows, their elements are skipped:\n     *\n     *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]\n     */\n    var transpose = _curry1(function transpose(outerlist) {\n        var i = 0;\n        var result = [];\n        while (i < outerlist.length) {\n            var innerlist = outerlist[i];\n            var j = 0;\n            while (j < innerlist.length) {\n                if (typeof result[j] === 'undefined') {\n                    result[j] = [];\n                }\n                result[j].push(innerlist[j]);\n                j += 1;\n            }\n            i += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Removes (strips) whitespace from both ends of the string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category String\n     * @sig String -> String\n     * @param {String} str The string to trim.\n     * @return {String} Trimmed version of `str`.\n     * @example\n     *\n     *      R.trim('   xyz  '); //=> 'xyz'\n     *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']\n     */\n    var trim = function () {\n        var ws = '\\t\\n\\x0B\\f\\r \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' + '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' + '\\u2029\\uFEFF';\n        var zeroWidth = '\\u200B';\n        var hasProtoTrim = typeof String.prototype.trim === 'function';\n        if (!hasProtoTrim || (ws.trim() || !zeroWidth.trim())) {\n            return _curry1(function trim(str) {\n                var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');\n                var endRx = new RegExp('[' + ws + '][' + ws + ']*$');\n                return str.replace(beginRx, '').replace(endRx, '');\n            });\n        } else {\n            return _curry1(function trim(str) {\n                return str.trim();\n            });\n        }\n    }();\n\n    /**\n     * Gives a single-word string description of the (native) type of a value,\n     * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n     * attempt to distinguish user Object types any further, reporting them all as\n     * 'Object'.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Type\n     * @sig (* -> {*}) -> String\n     * @param {*} val The value to test\n     * @return {String}\n     * @example\n     *\n     *      R.type({}); //=> \"Object\"\n     *      R.type(1); //=> \"Number\"\n     *      R.type(false); //=> \"Boolean\"\n     *      R.type('s'); //=> \"String\"\n     *      R.type(null); //=> \"Null\"\n     *      R.type([]); //=> \"Array\"\n     *      R.type(/[A-z]/); //=> \"RegExp\"\n     */\n    var type = _curry1(function type(val) {\n        return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);\n    });\n\n    /**\n     * Takes a function `fn`, which takes a single array argument, and returns a\n     * function which:\n     *\n     *   - takes any number of positional arguments;\n     *   - passes these arguments to `fn` as an array; and\n     *   - returns the result.\n     *\n     * In other words, R.unapply derives a variadic function from a function which\n     * takes an array. R.unapply is the inverse of R.apply.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Function\n     * @sig ([*...] -> a) -> (*... -> a)\n     * @param {Function} fn\n     * @return {Function}\n     * @see R.apply\n     * @example\n     *\n     *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'\n     */\n    var unapply = _curry1(function unapply(fn) {\n        return function () {\n            return fn(_slice(arguments));\n        };\n    });\n\n    /**\n     * Wraps a function of any arity (including nullary) in a function that accepts\n     * exactly 1 parameter. Any extraneous parameters will not be passed to the\n     * supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Function\n     * @sig (* -> b) -> (a -> b)\n     * @param {Function} fn The function to wrap.\n     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n     *         arity 1.\n     * @example\n     *\n     *      var takesTwoArgs = function(a, b) {\n     *        return [a, b];\n     *      };\n     *      takesTwoArgs.length; //=> 2\n     *      takesTwoArgs(1, 2); //=> [1, 2]\n     *\n     *      var takesOneArg = R.unary(takesTwoArgs);\n     *      takesOneArg.length; //=> 1\n     *      // Only 1 argument is passed to the wrapped function\n     *      takesOneArg(1, 2); //=> [1, undefined]\n     */\n    var unary = _curry1(function unary(fn) {\n        return nAry(1, fn);\n    });\n\n    /**\n     * Returns a function of arity `n` from a (manually) curried function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Function\n     * @sig Number -> (a -> b) -> (a -> c)\n     * @param {Number} length The arity for the returned function.\n     * @param {Function} fn The function to uncurry.\n     * @return {Function} A new function.\n     * @see R.curry\n     * @example\n     *\n     *      var addFour = a => b => c => d => a + b + c + d;\n     *\n     *      var uncurriedAddFour = R.uncurryN(4, addFour);\n     *      uncurriedAddFour(1, 2, 3, 4); //=> 10\n     */\n    var uncurryN = _curry2(function uncurryN(depth, fn) {\n        return curryN(depth, function () {\n            var currentDepth = 1;\n            var value = fn;\n            var idx = 0;\n            var endIdx;\n            while (currentDepth <= depth && typeof value === 'function') {\n                endIdx = currentDepth === depth ? arguments.length : idx + value.length;\n                value = value.apply(this, _slice(arguments, idx, endIdx));\n                currentDepth += 1;\n                idx = endIdx;\n            }\n            return value;\n        });\n    });\n\n    /**\n     * Builds a list from a seed value. Accepts an iterator function, which returns\n     * either false to stop iteration or an array of length 2 containing the value\n     * to add to the resulting list and the seed to be used in the next call to the\n     * iterator function.\n     *\n     * The iterator function receives one argument: *(seed)*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (a -> [b]) -> * -> [b]\n     * @param {Function} fn The iterator function. receives one argument, `seed`, and returns\n     *        either false to quit iteration or an array of length two to proceed. The element\n     *        at index 0 of this array will be added to the resulting array, and the element\n     *        at index 1 will be passed to the next call to `fn`.\n     * @param {*} seed The seed value.\n     * @return {Array} The final list.\n     * @example\n     *\n     *      var f = n => n > 50 ? false : [-n, n + 10];\n     *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]\n     */\n    var unfold = _curry2(function unfold(fn, seed) {\n        var pair = fn(seed);\n        var result = [];\n        while (pair && pair.length) {\n            result[result.length] = pair[0];\n            pair = fn(pair[1]);\n        }\n        return result;\n    });\n\n    /**\n     * Returns a new list containing only one copy of each element in the original\n     * list, based upon the value returned by applying the supplied predicate to\n     * two list elements. Prefers the first item if two items compare equal based\n     * on the predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category List\n     * @sig (a, a -> Boolean) -> [a] -> [a]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of unique items.\n     * @example\n     *\n     *      var strEq = R.eqBy(String);\n     *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]\n     *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]\n     *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]\n     *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']\n     */\n    var uniqWith = _curry2(function uniqWith(pred, list) {\n        var idx = 0;\n        var len = list.length;\n        var result = [];\n        var item;\n        while (idx < len) {\n            item = list[idx];\n            if (!_containsWith(pred, item, result)) {\n                result[result.length] = item;\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Tests the final argument by passing it to the given predicate function. If\n     * the predicate is not satisfied, the function will return the result of\n     * calling the `whenFalseFn` function with the same argument. If the predicate\n     * is satisfied, the argument is returned as is.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Logic\n     * @sig (a -> Boolean) -> (a -> a) -> a -> a\n     * @param {Function} pred        A predicate function\n     * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates\n     *                               to a falsy value.\n     * @param {*}        x           An object to test with the `pred` function and\n     *                               pass to `whenFalseFn` if necessary.\n     * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.\n     * @see R.ifElse, R.when\n     * @example\n     *\n     *      // coerceArray :: (a|[a]) -> [a]\n     *      var coerceArray = R.unless(R.isArrayLike, R.of);\n     *      coerceArray([1, 2, 3]); //=> [1, 2, 3]\n     *      coerceArray(1);         //=> [1]\n     */\n    var unless = _curry3(function unless(pred, whenFalseFn, x) {\n        return pred(x) ? x : whenFalseFn(x);\n    });\n\n    /**\n     * Returns a new copy of the array with the element at the provided index\n     * replaced with the given value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig Number -> a -> [a] -> [a]\n     * @param {Number} idx The index to update.\n     * @param {*} x The value to exist at the given index of the returned array.\n     * @param {Array|Arguments} list The source array-like object to be updated.\n     * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.\n     * @see R.adjust\n     * @example\n     *\n     *      R.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]\n     *      R.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]\n     */\n    var update = _curry3(function update(idx, x, list) {\n        return adjust(always(x), idx, list);\n    });\n\n    /**\n     * Accepts a function `fn` and a list of transformer functions and returns a\n     * new curried function. When the new function is invoked, it calls the\n     * function `fn` with parameters consisting of the result of calling each\n     * supplied handler on successive arguments to the new function.\n     *\n     * If more arguments are passed to the returned function than transformer\n     * functions, those arguments are passed directly to `fn` as additional\n     * parameters. If you expect additional arguments that don't need to be\n     * transformed, although you can ignore them, it's best to pass an identity\n     * function so that the new function reports the correct arity.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)\n     * @param {Function} fn The function to wrap.\n     * @param {Array} transformers A list of transformer functions\n     * @return {Function} The wrapped function.\n     * @example\n     *\n     *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81\n     *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81\n     *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32\n     *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32\n     */\n    var useWith = _curry2(function useWith(fn, transformers) {\n        return curryN(transformers.length, function () {\n            var args = [];\n            var idx = 0;\n            while (idx < transformers.length) {\n                args.push(transformers[idx].call(this, arguments[idx]));\n                idx += 1;\n            }\n            return fn.apply(this, args.concat(_slice(arguments, transformers.length)));\n        });\n    });\n\n    /**\n     * Returns a list of all the enumerable own properties of the supplied object.\n     * Note that the order of the output array is not guaranteed across different\n     * JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {k: v} -> [v]\n     * @param {Object} obj The object to extract values from\n     * @return {Array} An array of the values of the object's own properties.\n     * @example\n     *\n     *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]\n     */\n    var values = _curry1(function values(obj) {\n        var props = keys(obj);\n        var len = props.length;\n        var vals = [];\n        var idx = 0;\n        while (idx < len) {\n            vals[idx] = obj[props[idx]];\n            idx += 1;\n        }\n        return vals;\n    });\n\n    /**\n     * Returns a list of all the properties, including prototype properties, of the\n     * supplied object.\n     * Note that the order of the output array is not guaranteed to be consistent\n     * across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Object\n     * @sig {k: v} -> [v]\n     * @param {Object} obj The object to extract values from\n     * @return {Array} An array of the values of the object's own and prototype properties.\n     * @example\n     *\n     *      var F = function() { this.x = 'X'; };\n     *      F.prototype.y = 'Y';\n     *      var f = new F();\n     *      R.valuesIn(f); //=> ['X', 'Y']\n     */\n    var valuesIn = _curry1(function valuesIn(obj) {\n        var prop;\n        var vs = [];\n        for (prop in obj) {\n            vs[vs.length] = obj[prop];\n        }\n        return vs;\n    });\n\n    /**\n     * Returns a \"view\" of the given data structure, determined by the given lens.\n     * The lens's focus determines which portion of the data structure is visible.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Lens s a -> s -> a\n     * @param {Lens} lens\n     * @param {*} x\n     * @return {*}\n     * @see R.prop, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var xLens = R.lensProp('x');\n     *\n     *      R.view(xLens, {x: 1, y: 2});  //=> 1\n     *      R.view(xLens, {x: 4, y: 2});  //=> 4\n     */\n    var view = function () {\n        var Const = function (x) {\n            return {\n                value: x,\n                map: function () {\n                    return this;\n                }\n            };\n        };\n        return _curry2(function view(lens, x) {\n            return lens(Const)(x).value;\n        });\n    }();\n\n    /**\n     * Tests the final argument by passing it to the given predicate function. If\n     * the predicate is satisfied, the function will return the result of calling\n     * the `whenTrueFn` function with the same argument. If the predicate is not\n     * satisfied, the argument is returned as is.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Logic\n     * @sig (a -> Boolean) -> (a -> a) -> a -> a\n     * @param {Function} pred       A predicate function\n     * @param {Function} whenTrueFn A function to invoke when the `condition`\n     *                              evaluates to a truthy value.\n     * @param {*}        x          An object to test with the `pred` function and\n     *                              pass to `whenTrueFn` if necessary.\n     * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.\n     * @see R.ifElse, R.unless\n     * @example\n     *\n     *      // truncate :: String -> String\n     *      var truncate = R.when(\n     *        R.propSatisfies(R.gt(R.__, 10), 'length'),\n     *        R.pipe(R.take(10), R.append('…'), R.join(''))\n     *      );\n     *      truncate('12345');         //=> '12345'\n     *      truncate('0123456789ABC'); //=> '0123456789…'\n     */\n    var when = _curry3(function when(pred, whenTrueFn, x) {\n        return pred(x) ? whenTrueFn(x) : x;\n    });\n\n    /**\n     * Takes a spec object and a test object; returns true if the test satisfies\n     * the spec. Each of the spec's own properties must be a predicate function.\n     * Each predicate is applied to the value of the corresponding property of the\n     * test object. `where` returns true if all the predicates return true, false\n     * otherwise.\n     *\n     * `where` is well suited to declaratively expressing constraints for other\n     * functions such as `filter` and `find`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category Object\n     * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean\n     * @param {Object} spec\n     * @param {Object} testObj\n     * @return {Boolean}\n     * @example\n     *\n     *      // pred :: Object -> Boolean\n     *      var pred = R.where({\n     *        a: R.equals('foo'),\n     *        b: R.complement(R.equals('bar')),\n     *        x: R.gt(_, 10),\n     *        y: R.lt(_, 20)\n     *      });\n     *\n     *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true\n     *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false\n     *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false\n     *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false\n     *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false\n     */\n    var where = _curry2(function where(spec, testObj) {\n        for (var prop in spec) {\n            if (_has(prop, spec) && !spec[prop](testObj[prop])) {\n                return false;\n            }\n        }\n        return true;\n    });\n\n    /**\n     * Wrap a function inside another to allow you to make adjustments to the\n     * parameters, or do other processing either before the internal function is\n     * called or with its results.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a... -> b) -> ((a... -> b) -> a... -> c) -> (a... -> c)\n     * @param {Function} fn The function to wrap.\n     * @param {Function} wrapper The wrapper function.\n     * @return {Function} The wrapped function.\n     * @example\n     *\n     *      var greet = name => 'Hello ' + name;\n     *\n     *      var shoutedGreet = R.wrap(greet, (gr, name) => gr(name).toUpperCase());\n     *\n     *      shoutedGreet(\"Kathy\"); //=> \"HELLO KATHY\"\n     *\n     *      var shortenedGreet = R.wrap(greet, function(gr, name) {\n     *        return gr(name.substring(0, 3));\n     *      });\n     *      shortenedGreet(\"Robert\"); //=> \"Hello Rob\"\n     */\n    var wrap = _curry2(function wrap(fn, wrapper) {\n        return curryN(fn.length, function () {\n            return wrapper.apply(this, _concat([fn], arguments));\n        });\n    });\n\n    /**\n     * Creates a new list out of the two supplied by creating each possible pair\n     * from the lists.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [b] -> [[a,b]]\n     * @param {Array} as The first list.\n     * @param {Array} bs The second list.\n     * @return {Array} The list made by combining each possible pair from\n     *         `as` and `bs` into pairs (`[a, b]`).\n     * @example\n     *\n     *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]\n     */\n    // = xprodWith(prepend); (takes about 3 times as long...)\n    var xprod = _curry2(function xprod(a, b) {\n        // = xprodWith(prepend); (takes about 3 times as long...)\n        var idx = 0;\n        var ilen = a.length;\n        var j;\n        var jlen = b.length;\n        var result = [];\n        while (idx < ilen) {\n            j = 0;\n            while (j < jlen) {\n                result[result.length] = [\n                    a[idx],\n                    b[j]\n                ];\n                j += 1;\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Creates a new list out of the two supplied by pairing up equally-positioned\n     * items from both lists. The returned list is truncated to the length of the\n     * shorter of the two input lists.\n     * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [b] -> [[a,b]]\n     * @param {Array} list1 The first array to consider.\n     * @param {Array} list2 The second array to consider.\n     * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.\n     * @example\n     *\n     *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n     */\n    var zip = _curry2(function zip(a, b) {\n        var rv = [];\n        var idx = 0;\n        var len = Math.min(a.length, b.length);\n        while (idx < len) {\n            rv[idx] = [\n                a[idx],\n                b[idx]\n            ];\n            idx += 1;\n        }\n        return rv;\n    });\n\n    /**\n     * Creates a new object out of a list of keys and a list of values.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig [String] -> [*] -> {String: *}\n     * @param {Array} keys The array that will be properties on the output object.\n     * @param {Array} values The list of values on the output object.\n     * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n     * @example\n     *\n     *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n     */\n    var zipObj = _curry2(function zipObj(keys, values) {\n        var idx = 0;\n        var len = keys.length;\n        var out = {};\n        while (idx < len) {\n            out[keys[idx]] = values[idx];\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Creates a new list out of the two supplied by applying the function to each\n     * equally-positioned pair in the lists. The returned list is truncated to the\n     * length of the shorter of the two input lists.\n     *\n     * @function\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a,b -> c) -> [a] -> [b] -> [c]\n     * @param {Function} fn The function used to combine the two elements into one value.\n     * @param {Array} list1 The first array to consider.\n     * @param {Array} list2 The second array to consider.\n     * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`\n     *         using `fn`.\n     * @example\n     *\n     *      var f = (x, y) => {\n     *        // ...\n     *      };\n     *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);\n     *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]\n     */\n    var zipWith = _curry3(function zipWith(fn, a, b) {\n        var rv = [];\n        var idx = 0;\n        var len = Math.min(a.length, b.length);\n        while (idx < len) {\n            rv[idx] = fn(a[idx], b[idx]);\n            idx += 1;\n        }\n        return rv;\n    });\n\n    /**\n     * A function that always returns `false`. Any passed in parameters are ignored.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig * -> Boolean\n     * @param {*}\n     * @return {Boolean}\n     * @see R.always, R.T\n     * @example\n     *\n     *      R.F(); //=> false\n     */\n    var F = always(false);\n\n    /**\n     * A function that always returns `true`. Any passed in parameters are ignored.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig * -> Boolean\n     * @param {*}\n     * @return {Boolean}\n     * @see R.always, R.F\n     * @example\n     *\n     *      R.T(); //=> true\n     */\n    var T = always(true);\n\n    /**\n     * Copies an object.\n     *\n     * @private\n     * @param {*} value The value to be copied\n     * @param {Array} refFrom Array containing the source references\n     * @param {Array} refTo Array containing the copied source references\n     * @return {*} The copied value.\n     */\n    var _clone = function _clone(value, refFrom, refTo) {\n        var copy = function copy(copiedValue) {\n            var len = refFrom.length;\n            var idx = 0;\n            while (idx < len) {\n                if (value === refFrom[idx]) {\n                    return refTo[idx];\n                }\n                idx += 1;\n            }\n            refFrom[idx + 1] = value;\n            refTo[idx + 1] = copiedValue;\n            for (var key in value) {\n                copiedValue[key] = _clone(value[key], refFrom, refTo);\n            }\n            return copiedValue;\n        };\n        switch (type(value)) {\n        case 'Object':\n            return copy({});\n        case 'Array':\n            return copy([]);\n        case 'Date':\n            return new Date(value);\n        case 'RegExp':\n            return _cloneRegExp(value);\n        default:\n            return value;\n        }\n    };\n\n    var _createPartialApplicator = function _createPartialApplicator(concat) {\n        return _curry2(function (fn, args) {\n            return _arity(Math.max(0, fn.length - args.length), function () {\n                return fn.apply(this, concat(args, arguments));\n            });\n        });\n    };\n\n    var _dropLast = function dropLast(n, xs) {\n        return take(n < xs.length ? xs.length - n : 0, xs);\n    };\n\n    // Values of other types are only equal if identical.\n    var _equals = function _equals(a, b, stackA, stackB) {\n        if (identical(a, b)) {\n            return true;\n        }\n        if (type(a) !== type(b)) {\n            return false;\n        }\n        if (a == null || b == null) {\n            return false;\n        }\n        if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n            return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);\n        }\n        switch (type(a)) {\n        case 'Arguments':\n        case 'Array':\n        case 'Object':\n            break;\n        case 'Boolean':\n        case 'Number':\n        case 'String':\n            if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {\n                return false;\n            }\n            break;\n        case 'Date':\n            if (!identical(a.valueOf(), b.valueOf())) {\n                return false;\n            }\n            break;\n        case 'Error':\n            if (!(a.name === b.name && a.message === b.message)) {\n                return false;\n            }\n            break;\n        case 'RegExp':\n            if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {\n                return false;\n            }\n            break;\n        case 'Map':\n        case 'Set':\n            if (!_equals(_arrayFromIterator(a.entries()), _arrayFromIterator(b.entries()), stackA, stackB)) {\n                return false;\n            }\n            break;\n        case 'Int8Array':\n        case 'Uint8Array':\n        case 'Uint8ClampedArray':\n        case 'Int16Array':\n        case 'Uint16Array':\n        case 'Int32Array':\n        case 'Uint32Array':\n        case 'Float32Array':\n        case 'Float64Array':\n            break;\n        case 'ArrayBuffer':\n            break;\n        default:\n            // Values of other types are only equal if identical.\n            return false;\n        }\n        var keysA = keys(a);\n        if (keysA.length !== keys(b).length) {\n            return false;\n        }\n        var idx = stackA.length - 1;\n        while (idx >= 0) {\n            if (stackA[idx] === a) {\n                return stackB[idx] === b;\n            }\n            idx -= 1;\n        }\n        stackA.push(a);\n        stackB.push(b);\n        idx = keysA.length - 1;\n        while (idx >= 0) {\n            var key = keysA[idx];\n            if (!(_has(key, b) && _equals(b[key], a[key], stackA, stackB))) {\n                return false;\n            }\n            idx -= 1;\n        }\n        stackA.pop();\n        stackB.pop();\n        return true;\n    };\n\n    /**\n     * `_makeFlat` is a helper function that returns a one-level or fully recursive\n     * function based on the flag passed in.\n     *\n     * @private\n     */\n    var _makeFlat = function _makeFlat(recursive) {\n        return function flatt(list) {\n            var value, jlen, j;\n            var result = [];\n            var idx = 0;\n            var ilen = list.length;\n            while (idx < ilen) {\n                if (isArrayLike(list[idx])) {\n                    value = recursive ? flatt(list[idx]) : list[idx];\n                    j = 0;\n                    jlen = value.length;\n                    while (j < jlen) {\n                        result[result.length] = value[j];\n                        j += 1;\n                    }\n                } else {\n                    result[result.length] = list[idx];\n                }\n                idx += 1;\n            }\n            return result;\n        };\n    };\n\n    var _reduce = function () {\n        function _arrayReduce(xf, acc, list) {\n            var idx = 0;\n            var len = list.length;\n            while (idx < len) {\n                acc = xf['@@transducer/step'](acc, list[idx]);\n                if (acc && acc['@@transducer/reduced']) {\n                    acc = acc['@@transducer/value'];\n                    break;\n                }\n                idx += 1;\n            }\n            return xf['@@transducer/result'](acc);\n        }\n        function _iterableReduce(xf, acc, iter) {\n            var step = iter.next();\n            while (!step.done) {\n                acc = xf['@@transducer/step'](acc, step.value);\n                if (acc && acc['@@transducer/reduced']) {\n                    acc = acc['@@transducer/value'];\n                    break;\n                }\n                step = iter.next();\n            }\n            return xf['@@transducer/result'](acc);\n        }\n        function _methodReduce(xf, acc, obj) {\n            return xf['@@transducer/result'](obj.reduce(bind(xf['@@transducer/step'], xf), acc));\n        }\n        var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';\n        return function _reduce(fn, acc, list) {\n            if (typeof fn === 'function') {\n                fn = _xwrap(fn);\n            }\n            if (isArrayLike(list)) {\n                return _arrayReduce(fn, acc, list);\n            }\n            if (typeof list.reduce === 'function') {\n                return _methodReduce(fn, acc, list);\n            }\n            if (list[symIterator] != null) {\n                return _iterableReduce(fn, acc, list[symIterator]());\n            }\n            if (typeof list.next === 'function') {\n                return _iterableReduce(fn, acc, list);\n            }\n            throw new TypeError('reduce: list must be array or iterable');\n        };\n    }();\n\n    var _xdropLastWhile = function () {\n        function XDropLastWhile(fn, xf) {\n            this.f = fn;\n            this.retained = [];\n            this.xf = xf;\n        }\n        XDropLastWhile.prototype['@@transducer/init'] = _xfBase.init;\n        XDropLastWhile.prototype['@@transducer/result'] = function (result) {\n            this.retained = null;\n            return this.xf['@@transducer/result'](result);\n        };\n        XDropLastWhile.prototype['@@transducer/step'] = function (result, input) {\n            return this.f(input) ? this.retain(result, input) : this.flush(result, input);\n        };\n        XDropLastWhile.prototype.flush = function (result, input) {\n            result = _reduce(this.xf['@@transducer/step'], result, this.retained);\n            this.retained = [];\n            return this.xf['@@transducer/step'](result, input);\n        };\n        XDropLastWhile.prototype.retain = function (result, input) {\n            this.retained.push(input);\n            return result;\n        };\n        return _curry2(function _xdropLastWhile(fn, xf) {\n            return new XDropLastWhile(fn, xf);\n        });\n    }();\n\n    var _xgroupBy = function () {\n        function XGroupBy(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.inputs = {};\n        }\n        XGroupBy.prototype['@@transducer/init'] = _xfBase.init;\n        XGroupBy.prototype['@@transducer/result'] = function (result) {\n            var key;\n            for (key in this.inputs) {\n                if (_has(key, this.inputs)) {\n                    result = this.xf['@@transducer/step'](result, this.inputs[key]);\n                    if (result['@@transducer/reduced']) {\n                        result = result['@@transducer/value'];\n                        break;\n                    }\n                }\n            }\n            this.inputs = null;\n            return this.xf['@@transducer/result'](result);\n        };\n        XGroupBy.prototype['@@transducer/step'] = function (result, input) {\n            var key = this.f(input);\n            this.inputs[key] = this.inputs[key] || [\n                key,\n                []\n            ];\n            this.inputs[key][1] = append(input, this.inputs[key][1]);\n            return result;\n        };\n        return _curry2(function _xgroupBy(f, xf) {\n            return new XGroupBy(f, xf);\n        });\n    }();\n\n    /**\n     * Creates a new list iteration function from an existing one by adding two new\n     * parameters to its callback function: the current index, and the entire list.\n     *\n     * This would turn, for instance, Ramda's simple `map` function into one that\n     * more closely resembles `Array.prototype.map`. Note that this will only work\n     * for functions in which the iteration callback function is the first\n     * parameter, and where the list is the last parameter. (This latter might be\n     * unimportant if the list parameter is not used.)\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category Function\n     * @category List\n     * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)\n     * @param {Function} fn A list iteration function that does not pass index or list to its callback\n     * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n     * @example\n     *\n     *      var mapIndexed = R.addIndex(R.map);\n     *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n     *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']\n     */\n    var addIndex = _curry1(function addIndex(fn) {\n        return curryN(fn.length, function () {\n            var idx = 0;\n            var origFn = arguments[0];\n            var list = arguments[arguments.length - 1];\n            var args = _slice(arguments);\n            args[0] = function () {\n                var result = origFn.apply(this, _concat(arguments, [\n                    idx,\n                    list\n                ]));\n                idx += 1;\n                return result;\n            };\n            return fn.apply(this, args);\n        });\n    });\n\n    /**\n     * Wraps a function of any arity (including nullary) in a function that accepts\n     * exactly 2 parameters. Any extraneous parameters will not be passed to the\n     * supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Function\n     * @sig (* -> c) -> (a, b -> c)\n     * @param {Function} fn The function to wrap.\n     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n     *         arity 2.\n     * @example\n     *\n     *      var takesThreeArgs = function(a, b, c) {\n     *        return [a, b, c];\n     *      };\n     *      takesThreeArgs.length; //=> 3\n     *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n     *\n     *      var takesTwoArgs = R.binary(takesThreeArgs);\n     *      takesTwoArgs.length; //=> 2\n     *      // Only 2 arguments are passed to the wrapped function\n     *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n     */\n    var binary = _curry1(function binary(fn) {\n        return nAry(2, fn);\n    });\n\n    /**\n     * Creates a deep copy of the value which may contain (nested) `Array`s and\n     * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are not\n     * copied, but assigned by their reference.\n     *\n     * Dispatches to a `clone` method if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {*} -> {*}\n     * @param {*} value The object or array to clone\n     * @return {*} A new object or array.\n     * @example\n     *\n     *      var objects = [{}, {}, {}];\n     *      var objectsClone = R.clone(objects);\n     *      objects[0] === objectsClone[0]; //=> false\n     */\n    var clone = _curry1(function clone(value) {\n        return value != null && typeof value.clone === 'function' ? value.clone() : _clone(value, [], []);\n    });\n\n    /**\n     * Returns a curried equivalent of the provided function. The curried function\n     * has two unusual capabilities. First, its arguments needn't be provided one\n     * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n     * following are equivalent:\n     *\n     *   - `g(1)(2)(3)`\n     *   - `g(1)(2, 3)`\n     *   - `g(1, 2)(3)`\n     *   - `g(1, 2, 3)`\n     *\n     * Secondly, the special placeholder value `R.__` may be used to specify\n     * \"gaps\", allowing partial application of any combination of arguments,\n     * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n     * following are equivalent:\n     *\n     *   - `g(1, 2, 3)`\n     *   - `g(_, 2, 3)(1)`\n     *   - `g(_, _, 3)(1)(2)`\n     *   - `g(_, _, 3)(1, 2)`\n     *   - `g(_, 2)(1)(3)`\n     *   - `g(_, 2)(1, 3)`\n     *   - `g(_, 2)(_, 3)(1)`\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (* -> a) -> (* -> a)\n     * @param {Function} fn The function to curry.\n     * @return {Function} A new, curried function.\n     * @see R.curryN\n     * @example\n     *\n     *      var addFourNumbers = (a, b, c, d) => a + b + c + d;\n     *\n     *      var curriedAddFourNumbers = R.curry(addFourNumbers);\n     *      var f = curriedAddFourNumbers(1, 2);\n     *      var g = f(3);\n     *      g(4); //=> 10\n     */\n    var curry = _curry1(function curry(fn) {\n        return curryN(fn.length, fn);\n    });\n\n    /**\n     * Returns all but the first `n` elements of the given list, string, or\n     * transducer/transformer (or object with a `drop` method).\n     *\n     * Dispatches to the `drop` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n\n     * @param {*} list\n     * @return {*}\n     * @see R.take, R.transduce\n     * @example\n     *\n     *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n     *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n     *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n     *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n     *      R.drop(3, 'ramda');               //=> 'da'\n     */\n    var drop = _curry2(_dispatchable('drop', _xdrop, function drop(n, xs) {\n        return slice(Math.max(0, n), Infinity, xs);\n    }));\n\n    /**\n     * Returns a list containing all but the last `n` elements of the given `list`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n The number of elements of `xs` to skip.\n     * @param {Array} xs The collection to consider.\n     * @return {Array}\n     * @see R.takeLast\n     * @example\n     *\n     *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n     *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\n     *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []\n     *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []\n     *      R.dropLast(3, 'ramda');               //=> 'ra'\n     */\n    var dropLast = _curry2(_dispatchable('dropLast', _xdropLast, _dropLast));\n\n    /**\n     * Returns a new list containing all but last the`n` elements of a given list,\n     * passing each value from the right to the supplied predicate function,\n     * skipping elements while the predicate function returns `true`. The predicate\n     * function is passed one argument: (value)*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.takeLastWhile, R.addIndex\n     * @example\n     *\n     *      var lteThree = x => x <= 3;\n     *\n     *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n     */\n    var dropLastWhile = _curry2(_dispatchable('dropLastWhile', _xdropLastWhile, _dropLastWhile));\n\n    /**\n     * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n     * cyclical data structures.\n     *\n     * Dispatches symmetrically to the `equals` methods of both arguments, if\n     * present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category Relation\n     * @sig a -> b -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @example\n     *\n     *      R.equals(1, 1); //=> true\n     *      R.equals(1, '1'); //=> false\n     *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n     *\n     *      var a = {}; a.v = a;\n     *      var b = {}; b.v = b;\n     *      R.equals(a, b); //=> true\n     */\n    var equals = _curry2(function equals(a, b) {\n        return _equals(a, b, [], []);\n    });\n\n    /**\n     * Takes a predicate and a \"filterable\", and returns a new filterable of the\n     * same type containing the members of the given filterable which satisfy the\n     * given predicate.\n     *\n     * Dispatches to the `filter` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Filterable f => (a -> Boolean) -> f a -> f a\n     * @param {Function} pred\n     * @param {Array} filterable\n     * @return {Array}\n     * @see R.reject, R.transduce, R.addIndex\n     * @example\n     *\n     *      var isEven = n => n % 2 === 0;\n     *\n     *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n     *\n     *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n     */\n    // else\n    var filter = _curry2(_dispatchable('filter', _xfilter, function (pred, filterable) {\n        return _isObject(filterable) ? _reduce(function (acc, key) {\n            if (pred(filterable[key])) {\n                acc[key] = filterable[key];\n            }\n            return acc;\n        }, {}, keys(filterable)) : // else\n        _filter(pred, filterable);\n    }));\n\n    /**\n     * Returns a new list by pulling every item out of it (and all its sub-arrays)\n     * and putting them in a new array, depth-first.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [b]\n     * @param {Array} list The array to consider.\n     * @return {Array} The flattened list.\n     * @see R.unnest\n     * @example\n     *\n     *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n     *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n     */\n    var flatten = _curry1(_makeFlat(true));\n\n    /**\n     * Returns a new function much like the supplied one, except that the first two\n     * arguments' order is reversed.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)\n     * @param {Function} fn The function to invoke with its first two parameters reversed.\n     * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\n     * @example\n     *\n     *      var mergeThree = (a, b, c) => [].concat(a, b, c);\n     *\n     *      mergeThree(1, 2, 3); //=> [1, 2, 3]\n     *\n     *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\n     */\n    var flip = _curry1(function flip(fn) {\n        return curry(function (a, b) {\n            var args = _slice(arguments);\n            args[0] = b;\n            args[1] = a;\n            return fn.apply(this, args);\n        });\n    });\n\n    /**\n     * Splits a list into sub-lists stored in an object, based on the result of\n     * calling a String-returning function on each element, and grouping the\n     * results according to values returned.\n     *\n     * Dispatches to the `groupBy` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> String) -> [a] -> {String: [a]}\n     * @param {Function} fn Function :: a -> String\n     * @param {Array} list The array to group\n     * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements\n     *         that produced that key when passed to `fn`.\n     * @see R.transduce\n     * @example\n     *\n     *      var byGrade = R.groupBy(function(student) {\n     *        var score = student.score;\n     *        return score < 65 ? 'F' :\n     *               score < 70 ? 'D' :\n     *               score < 80 ? 'C' :\n     *               score < 90 ? 'B' : 'A';\n     *      });\n     *      var students = [{name: 'Abby', score: 84},\n     *                      {name: 'Eddy', score: 58},\n     *                      // ...\n     *                      {name: 'Jack', score: 69}];\n     *      byGrade(students);\n     *      // {\n     *      //   'A': [{name: 'Dianne', score: 99}],\n     *      //   'B': [{name: 'Abby', score: 84}]\n     *      //   // ...,\n     *      //   'F': [{name: 'Eddy', score: 58}]\n     *      // }\n     */\n    var groupBy = _curry2(_dispatchable('groupBy', _xgroupBy, function groupBy(fn, list) {\n        return _reduce(function (acc, elt) {\n            var key = fn(elt);\n            acc[key] = append(elt, acc[key] || (acc[key] = []));\n            return acc;\n        }, {}, list);\n    }));\n\n    /**\n     * Returns the first element of the given list or string. In some libraries\n     * this function is named `first`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> a | Undefined\n     * @sig String -> String\n     * @param {Array|String} list\n     * @return {*}\n     * @see R.tail, R.init, R.last\n     * @example\n     *\n     *      R.head(['fi', 'fo', 'fum']); //=> 'fi'\n     *      R.head([]); //=> undefined\n     *\n     *      R.head('abc'); //=> 'a'\n     *      R.head(''); //=> ''\n     */\n    var head = nth(0);\n\n    /**\n     * Given a function that generates a key, turns a list of objects into an\n     * object indexing the objects by the given key. Note that if multiple\n     * objects generate the same value for the indexing key only the last value\n     * will be included in the generated object.\n     *\n     * @func\n     * @memberOf R\n     * @since 0.19.0\n     * @category List\n     * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}\n     * @param {Function} fn Function :: a -> String\n     * @param {Array} array The array of objects to index\n     * @return {Object} An object indexing each array element by the given property.\n     * @example\n     *\n     *      var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];\n     *      R.indexBy(R.prop('id'), list);\n     *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}\n     */\n    var indexBy = _curry2(function indexBy(fn, list) {\n        return _reduce(function (acc, elem) {\n            var key = fn(elem);\n            acc[key] = elem;\n            return acc;\n        }, {}, list);\n    });\n\n    /**\n     * Returns all but the last element of the given list or string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category List\n     * @sig [a] -> [a]\n     * @sig String -> String\n     * @param {*} list\n     * @return {*}\n     * @see R.last, R.head, R.tail\n     * @example\n     *\n     *      R.init([1, 2, 3]);  //=> [1, 2]\n     *      R.init([1, 2]);     //=> [1]\n     *      R.init([1]);        //=> []\n     *      R.init([]);         //=> []\n     *\n     *      R.init('abc');  //=> 'ab'\n     *      R.init('ab');   //=> 'a'\n     *      R.init('a');    //=> ''\n     *      R.init('');     //=> ''\n     */\n    var init = slice(0, -1);\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of those\n     * elements common to both lists. Duplication is determined according to the\n     * value returned by applying the supplied predicate to two list elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n     * @param {Function} pred A predicate function that determines whether\n     *        the two supplied elements are equal.\n     * @param {Array} list1 One list of items to compare\n     * @param {Array} list2 A second list of items to compare\n     * @return {Array} A new list containing those elements common to both lists.\n     * @see R.intersection\n     * @example\n     *\n     *      var buffaloSpringfield = [\n     *        {id: 824, name: 'Richie Furay'},\n     *        {id: 956, name: 'Dewey Martin'},\n     *        {id: 313, name: 'Bruce Palmer'},\n     *        {id: 456, name: 'Stephen Stills'},\n     *        {id: 177, name: 'Neil Young'}\n     *      ];\n     *      var csny = [\n     *        {id: 204, name: 'David Crosby'},\n     *        {id: 456, name: 'Stephen Stills'},\n     *        {id: 539, name: 'Graham Nash'},\n     *        {id: 177, name: 'Neil Young'}\n     *      ];\n     *\n     *      R.intersectionWith(R.eqBy(R.prop('id')), buffaloSpringfield, csny);\n     *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n     */\n    var intersectionWith = _curry3(function intersectionWith(pred, list1, list2) {\n        var results = [];\n        var idx = 0;\n        while (idx < list1.length) {\n            if (_containsWith(pred, list1[idx], list2)) {\n                results[results.length] = list1[idx];\n            }\n            idx += 1;\n        }\n        return uniqWith(pred, results);\n    });\n\n    /**\n     * Same as R.invertObj, however this accounts for objects with duplicate values\n     * by putting the values into an array.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig {s: x} -> {x: [ s, ... ]}\n     * @param {Object} obj The object or array to invert\n     * @return {Object} out A new object with keys\n     * in an array.\n     * @example\n     *\n     *      var raceResultsByFirstName = {\n     *        first: 'alice',\n     *        second: 'jake',\n     *        third: 'alice',\n     *      };\n     *      R.invert(raceResultsByFirstName);\n     *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }\n     */\n    var invert = _curry1(function invert(obj) {\n        var props = keys(obj);\n        var len = props.length;\n        var idx = 0;\n        var out = {};\n        while (idx < len) {\n            var key = props[idx];\n            var val = obj[key];\n            var list = _has(val, out) ? out[val] : out[val] = [];\n            list[list.length] = key;\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a new object with the keys of the given object as values, and the\n     * values of the given object, which are coerced to strings, as keys. Note\n     * that the last key found is preferred when handling the same value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig {s: x} -> {x: s}\n     * @param {Object} obj The object or array to invert\n     * @return {Object} out A new object\n     * @example\n     *\n     *      var raceResults = {\n     *        first: 'alice',\n     *        second: 'jake'\n     *      };\n     *      R.invertObj(raceResults);\n     *      //=> { 'alice': 'first', 'jake':'second' }\n     *\n     *      // Alternatively:\n     *      var raceResults = ['alice', 'jake'];\n     *      R.invertObj(raceResults);\n     *      //=> { 'alice': '0', 'jake':'1' }\n     */\n    var invertObj = _curry1(function invertObj(obj) {\n        var props = keys(obj);\n        var len = props.length;\n        var idx = 0;\n        var out = {};\n        while (idx < len) {\n            var key = props[idx];\n            out[obj[key]] = key;\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns `true` if the given value is its type's empty value; `false`\n     * otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig a -> Boolean\n     * @param {*} x\n     * @return {Boolean}\n     * @see R.empty\n     * @example\n     *\n     *      R.isEmpty([1, 2, 3]);   //=> false\n     *      R.isEmpty([]);          //=> true\n     *      R.isEmpty('');          //=> true\n     *      R.isEmpty(null);        //=> false\n     *      R.isEmpty({});          //=> true\n     *      R.isEmpty({length: 0}); //=> false\n     */\n    var isEmpty = _curry1(function isEmpty(x) {\n        return x != null && equals(x, empty(x));\n    });\n\n    /**\n     * Returns the last element of the given list or string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.4\n     * @category List\n     * @sig [a] -> a | Undefined\n     * @sig String -> String\n     * @param {*} list\n     * @return {*}\n     * @see R.init, R.head, R.tail\n     * @example\n     *\n     *      R.last(['fi', 'fo', 'fum']); //=> 'fum'\n     *      R.last([]); //=> undefined\n     *\n     *      R.last('abc'); //=> 'c'\n     *      R.last(''); //=> ''\n     */\n    var last = nth(-1);\n\n    /**\n     * Returns the position of the last occurrence of an item in an array, or -1 if\n     * the item is not included in the array. `R.equals` is used to determine\n     * equality.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> Number\n     * @param {*} target The item to find.\n     * @param {Array} xs The array to search in.\n     * @return {Number} the index of the target, or -1 if the target is not found.\n     * @see R.indexOf\n     * @example\n     *\n     *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6\n     *      R.lastIndexOf(10, [1,2,3,4]); //=> -1\n     */\n    var lastIndexOf = _curry2(function lastIndexOf(target, xs) {\n        if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {\n            return xs.lastIndexOf(target);\n        } else {\n            var idx = xs.length - 1;\n            while (idx >= 0) {\n                if (equals(xs[idx], target)) {\n                    return idx;\n                }\n                idx -= 1;\n            }\n            return -1;\n        }\n    });\n\n    /**\n     * Takes a function and\n     * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n     * applies the function to each of the functor's values, and returns\n     * a functor of the same shape.\n     *\n     * Ramda provides suitable `map` implementations for `Array` and `Object`,\n     * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n     *\n     * Dispatches to the `map` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * Also treats functions as functors and will compose them together.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Functor f => (a -> b) -> f a -> f b\n     * @param {Function} fn The function to be called on every element of the input `list`.\n     * @param {Array} list The list to be iterated over.\n     * @return {Array} The new list.\n     * @see R.transduce, R.addIndex\n     * @example\n     *\n     *      var double = x => x * 2;\n     *\n     *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n     *\n     *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n     */\n    var map = _curry2(_dispatchable('map', _xmap, function map(fn, functor) {\n        switch (Object.prototype.toString.call(functor)) {\n        case '[object Function]':\n            return curryN(functor.length, function () {\n                return fn.call(this, functor.apply(this, arguments));\n            });\n        case '[object Object]':\n            return _reduce(function (acc, key) {\n                acc[key] = fn(functor[key]);\n                return acc;\n            }, {}, keys(functor));\n        default:\n            return _map(fn, functor);\n        }\n    }));\n\n    /**\n     * An Object-specific version of `map`. The function is applied to three\n     * arguments: *(value, key, obj)*. If only the value is significant, use\n     * `map` instead.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig ((*, String, Object) -> *) -> Object -> Object\n     * @param {Function} fn\n     * @param {Object} obj\n     * @return {Object}\n     * @see R.map\n     * @example\n     *\n     *      var values = { x: 1, y: 2, z: 3 };\n     *      var prependKeyAndDouble = (num, key, obj) => key + (num * 2);\n     *\n     *      R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }\n     */\n    var mapObjIndexed = _curry2(function mapObjIndexed(fn, obj) {\n        return _reduce(function (acc, key) {\n            acc[key] = fn(obj[key], key, obj);\n            return acc;\n        }, {}, keys(obj));\n    });\n\n    /**\n     * Creates a new object with the own properties of the two provided objects. If\n     * a key exists in both objects, the provided function is applied to the values\n     * associated with the key in each object, with the result being used as the\n     * value associated with the key in the returned object. The key will be\n     * excluded from the returned object if the resulting value is `undefined`.\n     *\n     * @func\n     * @memberOf R\n     * @since 0.19.0\n     * @category Object\n     * @sig (a -> a -> a) -> {a} -> {a} -> {a}\n     * @param {Function} fn\n     * @param {Object} l\n     * @param {Object} r\n     * @return {Object}\n     * @see R.merge, R.mergeWithKey\n     * @example\n     *\n     *      R.mergeWith(R.concat,\n     *                  { a: true, values: [10, 20] },\n     *                  { b: true, values: [15, 35] });\n     *      //=> { a: true, b: true, values: [10, 20, 15, 35] }\n     */\n    var mergeWith = _curry3(function mergeWith(fn, l, r) {\n        return mergeWithKey(function (_, _l, _r) {\n            return fn(_l, _r);\n        }, l, r);\n    });\n\n    /**\n     * Takes a function `f` and a list of arguments, and returns a function `g`.\n     * When applied, `g` returns the result of applying `f` to the arguments\n     * provided initially followed by the arguments provided to `g`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)\n     * @param {Function} f\n     * @param {Array} args\n     * @return {Function}\n     * @see R.partialRight\n     * @example\n     *\n     *      var multiply = (a, b) => a * b;\n     *      var double = R.partial(multiply, [2]);\n     *      double(2); //=> 4\n     *\n     *      var greet = (salutation, title, firstName, lastName) =>\n     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n     *\n     *      var sayHello = R.partial(greet, ['Hello']);\n     *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);\n     *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'\n     */\n    var partial = _createPartialApplicator(_concat);\n\n    /**\n     * Takes a function `f` and a list of arguments, and returns a function `g`.\n     * When applied, `g` returns the result of applying `f` to the arguments\n     * provided to `g` followed by the arguments provided initially.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)\n     * @param {Function} f\n     * @param {Array} args\n     * @return {Function}\n     * @see R.partial\n     * @example\n     *\n     *      var greet = (salutation, title, firstName, lastName) =>\n     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n     *\n     *      var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);\n     *\n     *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'\n     */\n    var partialRight = _createPartialApplicator(flip(_concat));\n\n    /**\n     * Takes a predicate and a list and returns the pair of lists of elements which\n     * do and do not satisfy the predicate, respectively.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.4\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [[a],[a]]\n     * @param {Function} pred A predicate to determine which array the element belongs to.\n     * @param {Array} list The array to partition.\n     * @return {Array} A nested array, containing first an array of elements that satisfied the predicate,\n     *         and second an array of elements that did not satisfy.\n     * @see R.filter, R.reject\n     * @example\n     *\n     *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);\n     *      //=> [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]\n     */\n    var partition = _curry2(function partition(pred, list) {\n        return _reduce(function (acc, elt) {\n            var xs = acc[pred(elt) ? 0 : 1];\n            xs[xs.length] = elt;\n            return acc;\n        }, [\n            [],\n            []\n        ], list);\n    });\n\n    /**\n     * Determines whether a nested path on an object has a specific value, in\n     * `R.equals` terms. Most likely used to filter a list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Relation\n     * @sig [String] -> * -> {String: *} -> Boolean\n     * @param {Array} path The path of the nested property to use\n     * @param {*} val The value to compare the nested property with\n     * @param {Object} obj The object to check the nested property in\n     * @return {Boolean} `true` if the value equals the nested object property,\n     *         `false` otherwise.\n     * @example\n     *\n     *      var user1 = { address: { zipCode: 90210 } };\n     *      var user2 = { address: { zipCode: 55555 } };\n     *      var user3 = { name: 'Bob' };\n     *      var users = [ user1, user2, user3 ];\n     *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);\n     *      R.filter(isFamous, users); //=> [ user1 ]\n     */\n    var pathEq = _curry3(function pathEq(_path, val, obj) {\n        return equals(path(_path, obj), val);\n    });\n\n    /**\n     * Returns a new list by plucking the same named property off all objects in\n     * the list supplied.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig k -> [{k: v}] -> [v]\n     * @param {Number|String} key The key name to pluck off of each object.\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of values for the given key.\n     * @see R.props\n     * @example\n     *\n     *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]\n     *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]\n     */\n    var pluck = _curry2(function pluck(p, list) {\n        return map(prop(p), list);\n    });\n\n    /**\n     * Reasonable analog to SQL `select` statement.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @category Relation\n     * @sig [k] -> [{k: v}] -> [{k: v}]\n     * @param {Array} props The property names to project\n     * @param {Array} objs The objects to query\n     * @return {Array} An array of objects with just the `props` properties.\n     * @example\n     *\n     *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};\n     *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};\n     *      var kids = [abby, fred];\n     *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]\n     */\n    // passing `identity` gives correct arity\n    var project = useWith(_map, [\n        pickAll,\n        identity\n    ]);\n\n    /**\n     * Returns `true` if the specified object property is equal, in `R.equals`\n     * terms, to the given value; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig String -> a -> Object -> Boolean\n     * @param {String} name\n     * @param {*} val\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.equals, R.propSatisfies\n     * @example\n     *\n     *      var abby = {name: 'Abby', age: 7, hair: 'blond'};\n     *      var fred = {name: 'Fred', age: 12, hair: 'brown'};\n     *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};\n     *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};\n     *      var kids = [abby, fred, rusty, alois];\n     *      var hasBrownHair = R.propEq('hair', 'brown');\n     *      R.filter(hasBrownHair, kids); //=> [fred, rusty]\n     */\n    var propEq = _curry3(function propEq(name, val, obj) {\n        return propSatisfies(equals(val), name, obj);\n    });\n\n    /**\n     * Returns `true` if the specified object property is of the given type;\n     * `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Type\n     * @sig Type -> String -> Object -> Boolean\n     * @param {Function} type\n     * @param {String} name\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.is, R.propSatisfies\n     * @example\n     *\n     *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true\n     *      R.propIs(Number, 'x', {x: 'foo'});    //=> false\n     *      R.propIs(Number, 'x', {});            //=> false\n     */\n    var propIs = _curry3(function propIs(type, name, obj) {\n        return propSatisfies(is(type), name, obj);\n    });\n\n    /**\n     * Returns a single item by iterating through the list, successively calling\n     * the iterator function and passing it an accumulator value and the current\n     * value from the array, and then passing the result to the next call.\n     *\n     * The iterator function receives two values: *(acc, value)*. It may use\n     * `R.reduced` to shortcut the iteration.\n     *\n     * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n     * arrays), unlike the native `Array.prototype.reduce` method. For more details\n     * on this behavior, see:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n     *\n     * Dispatches to the `reduce` method of the third argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig ((a, b) -> a) -> a -> [b] -> a\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.reduced, R.addIndex\n     * @example\n     *\n     *      var numbers = [1, 2, 3];\n     *      var add = (a, b) => a + b;\n     *\n     *      R.reduce(add, 10, numbers); //=> 16\n     */\n    var reduce = _curry3(_reduce);\n\n    /**\n     * The complement of `filter`.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Filterable f => (a -> Boolean) -> f a -> f a\n     * @param {Function} pred\n     * @param {Array} filterable\n     * @return {Array}\n     * @see R.filter, R.transduce, R.addIndex\n     * @example\n     *\n     *      var isOdd = (n) => n % 2 === 1;\n     *\n     *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n     *\n     *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n     */\n    var reject = _curry2(function reject(pred, filterable) {\n        return filter(_complement(pred), filterable);\n    });\n\n    /**\n     * Returns a fixed list of size `n` containing a specified identical value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig a -> n -> [a]\n     * @param {*} value The value to repeat.\n     * @param {Number} n The desired size of the output list.\n     * @return {Array} A new array containing `n` `value`s.\n     * @example\n     *\n     *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']\n     *\n     *      var obj = {};\n     *      var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]\n     *      repeatedObjs[0] === repeatedObjs[1]; //=> true\n     */\n    var repeat = _curry2(function repeat(value, n) {\n        return times(always(value), n);\n    });\n\n    /**\n     * Adds together all the elements of a list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list An array of numbers\n     * @return {Number} The sum of all the numbers in the list.\n     * @see R.reduce\n     * @example\n     *\n     *      R.sum([2,4,6,8,100,1]); //=> 121\n     */\n    var sum = reduce(add, 0);\n\n    /**\n     * Returns a new list containing the last `n` elements of the given list.\n     * If `n > list.length`, returns a list of `list.length` elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n The number of elements to return.\n     * @param {Array} xs The collection to consider.\n     * @return {Array}\n     * @see R.dropLast\n     * @example\n     *\n     *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']\n     *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n     *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.takeLast(3, 'ramda');               //=> 'mda'\n     */\n    var takeLast = _curry2(function takeLast(n, xs) {\n        return drop(n >= 0 ? xs.length - n : 0, xs);\n    });\n\n    /**\n     * Initializes a transducer using supplied iterator function. Returns a single\n     * item by iterating through the list, successively calling the transformed\n     * iterator function and passing it an accumulator value and the current value\n     * from the array, and then passing the result to the next call.\n     *\n     * The iterator function receives two values: *(acc, value)*. It will be\n     * wrapped as a transformer to initialize the transducer. A transformer can be\n     * passed directly in place of an iterator function. In both cases, iteration\n     * may be stopped early with the `R.reduced` function.\n     *\n     * A transducer is a function that accepts a transformer and returns a\n     * transformer and can be composed directly.\n     *\n     * A transformer is an an object that provides a 2-arity reducing iterator\n     * function, step, 0-arity initial value function, init, and 1-arity result\n     * extraction function, result. The step function is used as the iterator\n     * function in reduce. The result function is used to convert the final\n     * accumulator into the return type and in most cases is R.identity. The init\n     * function can be used to provide an initial accumulator, but is ignored by\n     * transduce.\n     *\n     * The iteration is performed with R.reduce after initializing the transducer.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig (c -> c) -> (a,b -> a) -> a -> [b] -> a\n     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array. Wrapped as transformer, if necessary, and used to\n     *        initialize the transducer\n     * @param {*} acc The initial accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.reduce, R.reduced, R.into\n     * @example\n     *\n     *      var numbers = [1, 2, 3, 4];\n     *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n     *\n     *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]\n     */\n    var transduce = curryN(4, function transduce(xf, fn, acc, list) {\n        return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);\n    });\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of the elements\n     * of each list. Duplication is determined according to the value returned by\n     * applying the supplied predicate to two list elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The first and second lists concatenated, with\n     *         duplicates removed.\n     * @see R.union\n     * @example\n     *\n     *      var l1 = [{a: 1}, {a: 2}];\n     *      var l2 = [{a: 1}, {a: 4}];\n     *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n     */\n    var unionWith = _curry3(function unionWith(pred, list1, list2) {\n        return uniqWith(pred, _concat(list1, list2));\n    });\n\n    /**\n     * Takes a spec object and a test object; returns true if the test satisfies\n     * the spec, false otherwise. An object satisfies the spec if, for each of the\n     * spec's own properties, accessing that property of the object gives the same\n     * value (in `R.equals` terms) as accessing that property of the spec.\n     *\n     * `whereEq` is a specialization of [`where`](#where).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Object\n     * @sig {String: *} -> {String: *} -> Boolean\n     * @param {Object} spec\n     * @param {Object} testObj\n     * @return {Boolean}\n     * @see R.where\n     * @example\n     *\n     *      // pred :: Object -> Boolean\n     *      var pred = R.whereEq({a: 1, b: 2});\n     *\n     *      pred({a: 1});              //=> false\n     *      pred({a: 1, b: 2});        //=> true\n     *      pred({a: 1, b: 2, c: 3});  //=> true\n     *      pred({a: 1, b: 1});        //=> false\n     */\n    var whereEq = _curry2(function whereEq(spec, testObj) {\n        return where(map(equals, spec), testObj);\n    });\n\n    var _flatCat = function () {\n        var preservingReduced = function (xf) {\n            return {\n                '@@transducer/init': _xfBase.init,\n                '@@transducer/result': function (result) {\n                    return xf['@@transducer/result'](result);\n                },\n                '@@transducer/step': function (result, input) {\n                    var ret = xf['@@transducer/step'](result, input);\n                    return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;\n                }\n            };\n        };\n        return function _xcat(xf) {\n            var rxf = preservingReduced(xf);\n            return {\n                '@@transducer/init': _xfBase.init,\n                '@@transducer/result': function (result) {\n                    return rxf['@@transducer/result'](result);\n                },\n                '@@transducer/step': function (result, input) {\n                    return !isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);\n                }\n            };\n        };\n    }();\n\n    // Array.prototype.indexOf doesn't exist below IE9\n    // manually crawl the list to distinguish between +0 and -0\n    // NaN\n    // non-zero numbers can utilise Set\n    // all these types can utilise Set\n    // null can utilise Set\n    // anything else not covered above, defer to R.equals\n    var _indexOf = function _indexOf(list, a, idx) {\n        var inf, item;\n        // Array.prototype.indexOf doesn't exist below IE9\n        if (typeof list.indexOf === 'function') {\n            switch (typeof a) {\n            case 'number':\n                if (a === 0) {\n                    // manually crawl the list to distinguish between +0 and -0\n                    inf = 1 / a;\n                    while (idx < list.length) {\n                        item = list[idx];\n                        if (item === 0 && 1 / item === inf) {\n                            return idx;\n                        }\n                        idx += 1;\n                    }\n                    return -1;\n                } else if (a !== a) {\n                    // NaN\n                    while (idx < list.length) {\n                        item = list[idx];\n                        if (typeof item === 'number' && item !== item) {\n                            return idx;\n                        }\n                        idx += 1;\n                    }\n                    return -1;\n                }\n                // non-zero numbers can utilise Set\n                return list.indexOf(a, idx);\n            // all these types can utilise Set\n            case 'string':\n            case 'boolean':\n            case 'function':\n            case 'undefined':\n                return list.indexOf(a, idx);\n            case 'object':\n                if (a === null) {\n                    // null can utilise Set\n                    return list.indexOf(a, idx);\n                }\n            }\n        }\n        // anything else not covered above, defer to R.equals\n        while (idx < list.length) {\n            if (equals(list[idx], a)) {\n                return idx;\n            }\n            idx += 1;\n        }\n        return -1;\n    };\n\n    var _xchain = _curry2(function _xchain(f, xf) {\n        return map(f, _flatCat(xf));\n    });\n\n    /**\n     * Takes a list of predicates and returns a predicate that returns true for a\n     * given list of arguments if every one of the provided predicates is satisfied\n     * by those arguments.\n     *\n     * The function returned is a curried function whose arity matches that of the\n     * highest-arity predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Logic\n     * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n     * @param {Array} preds\n     * @return {Function}\n     * @see R.anyPass\n     * @example\n     *\n     *      var isQueen = R.propEq('rank', 'Q');\n     *      var isSpade = R.propEq('suit', '♠︎');\n     *      var isQueenOfSpades = R.allPass([isQueen, isSpade]);\n     *\n     *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false\n     *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true\n     */\n    var allPass = _curry1(function allPass(preds) {\n        return curryN(reduce(max, 0, pluck('length', preds)), function () {\n            var idx = 0;\n            var len = preds.length;\n            while (idx < len) {\n                if (!preds[idx].apply(this, arguments)) {\n                    return false;\n                }\n                idx += 1;\n            }\n            return true;\n        });\n    });\n\n    /**\n     * Returns `true` if all elements are unique, in `R.equals` terms, otherwise\n     * `false`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category List\n     * @sig [a] -> Boolean\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if all elements are unique, else `false`.\n     * @example\n     *\n     *      R.allUniq(['1', 1]); //=> true\n     *      R.allUniq([1, 1]);   //=> false\n     *      R.allUniq([[42], [42]]); //=> false\n     */\n    var allUniq = _curry1(function allUniq(list) {\n        var len = list.length;\n        var idx = 0;\n        while (idx < len) {\n            if (_indexOf(list, list[idx], idx + 1) >= 0) {\n                return false;\n            }\n            idx += 1;\n        }\n        return true;\n    });\n\n    /**\n     * Takes a list of predicates and returns a predicate that returns true for a\n     * given list of arguments if at least one of the provided predicates is\n     * satisfied by those arguments.\n     *\n     * The function returned is a curried function whose arity matches that of the\n     * highest-arity predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Logic\n     * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n     * @param {Array} preds\n     * @return {Function}\n     * @see R.allPass\n     * @example\n     *\n     *      var gte = R.anyPass([R.gt, R.equals]);\n     *\n     *      gte(3, 2); //=> true\n     *      gte(2, 2); //=> true\n     *      gte(2, 3); //=> false\n     */\n    var anyPass = _curry1(function anyPass(preds) {\n        return curryN(reduce(max, 0, pluck('length', preds)), function () {\n            var idx = 0;\n            var len = preds.length;\n            while (idx < len) {\n                if (preds[idx].apply(this, arguments)) {\n                    return true;\n                }\n                idx += 1;\n            }\n            return false;\n        });\n    });\n\n    /**\n     * ap applies a list of functions to a list of values.\n     *\n     * Dispatches to the `ap` method of the second argument, if present. Also\n     * treats functions as applicatives.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Function\n     * @sig [f] -> [a] -> [f a]\n     * @param {Array} fns An array of functions\n     * @param {Array} vs An array of values\n     * @return {Array} An array of results of applying each of `fns` to all of `vs` in turn.\n     * @example\n     *\n     *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n     */\n    // else\n    var ap = _curry2(function ap(applicative, fn) {\n        return typeof applicative.ap === 'function' ? applicative.ap(fn) : typeof applicative === 'function' ? curryN(Math.max(applicative.length, fn.length), function () {\n            return applicative.apply(this, arguments)(fn.apply(this, arguments));\n        }) : // else\n        _reduce(function (acc, f) {\n            return _concat(acc, map(f, fn));\n        }, [], applicative);\n    });\n\n    /**\n     * Returns the result of calling its first argument with the remaining\n     * arguments. This is occasionally useful as a converging function for\n     * `R.converge`: the left branch can produce a function while the right branch\n     * produces a value to be passed to that function as an argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig (*... -> a),*... -> a\n     * @param {Function} fn The function to apply to the remaining arguments.\n     * @param {...*} args Any number of positional arguments.\n     * @return {*}\n     * @see R.apply\n     * @example\n     *\n     *      var indentN = R.pipe(R.times(R.always(' ')),\n     *                           R.join(''),\n     *                           R.replace(/^(?!$)/gm));\n     *\n     *      var format = R.converge(R.call, [\n     *                                  R.pipe(R.prop('indent'), indentN),\n     *                                  R.prop('value')\n     *                              ]);\n     *\n     *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\n     */\n    var call = curry(function call(fn) {\n        return fn.apply(this, _slice(arguments, 1));\n    });\n\n    /**\n     * `chain` maps a function over a list and concatenates the results. `chain`\n     * is also known as `flatMap` in some libraries\n     *\n     * Dispatches to the `chain` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig (a -> [b]) -> [a] -> [b]\n     * @param {Function} fn\n     * @param {Array} list\n     * @return {Array}\n     * @example\n     *\n     *      var duplicate = n => [n, n];\n     *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n     */\n    var chain = _curry2(_dispatchable('chain', _xchain, function chain(fn, monad) {\n        if (typeof monad === 'function') {\n            return function () {\n                return monad.call(this, fn.apply(this, arguments)).apply(this, arguments);\n            };\n        }\n        return _makeFlat(false)(map(fn, monad));\n    }));\n\n    /**\n     * Turns a list of Functors into a Functor of a list, applying a mapping\n     * function to the elements of the list along the way.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category List\n     * @sig Functor f => (a -> f b) -> (x -> f x) -> [a] -> f [b]\n     * @param {Function} fn The transformation function\n     * @param {Function} of A function that returns the data type to return\n     * @param {Array} list An array of functors of the same type\n     * @return {*}\n     * @see R.traverse\n     * @deprecated since v0.19.0\n     * @example\n     *\n     *      var add10 = R.map(R.add(10));\n     *      R.commuteMap(add10, R.of, [[1], [2, 3]]);   //=> [[11, 12], [11, 13]]\n     *      R.commuteMap(add10, R.of, [[1, 2], [3]]);   //=> [[11, 13], [12, 13]]\n     *      R.commuteMap(add10, R.of, [[1], [2], [3]]); //=> [[11, 12, 13]]\n     *      R.commuteMap(add10, Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([11, 12, 13])\n     *      R.commuteMap(add10, Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\n     *\n     *      var fetch = url => Future((rej, res) => http.get(url, res).on('error', rej));\n     *      R.commuteMap(fetch, Future.of, [\n     *        'http://ramdajs.com',\n     *        'http://github.com/ramda'\n     *      ]); //=> Future([IncomingMessage, IncomingMessage])\n     */\n    var commuteMap = _curry3(function commuteMap(fn, of, list) {\n        function consF(acc, x) {\n            return ap(map(prepend, fn(x)), acc);\n        }\n        return reduceRight(consF, of([]), list);\n    });\n\n    /**\n     * Wraps a constructor function inside a curried function that can be called\n     * with the same arguments and returns the same type. The arity of the function\n     * returned is specified to allow using variadic constructor functions.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.0\n     * @category Function\n     * @sig Number -> (* -> {*}) -> (* -> {*})\n     * @param {Number} n The arity of the constructor function.\n     * @param {Function} Fn The constructor function to wrap.\n     * @return {Function} A wrapped, curried constructor function.\n     * @example\n     *\n     *      // Variadic constructor function\n     *      var Widget = () => {\n     *        this.children = Array.prototype.slice.call(arguments);\n     *        // ...\n     *      };\n     *      Widget.prototype = {\n     *        // ...\n     *      };\n     *      var allConfigs = [\n     *        // ...\n     *      ];\n     *      R.map(R.constructN(1, Widget), allConfigs); // a list of Widgets\n     */\n    var constructN = _curry2(function constructN(n, Fn) {\n        if (n > 10) {\n            throw new Error('Constructor with greater than ten arguments');\n        }\n        if (n === 0) {\n            return function () {\n                return new Fn();\n            };\n        }\n        return curry(nAry(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {\n            switch (arguments.length) {\n            case 1:\n                return new Fn($0);\n            case 2:\n                return new Fn($0, $1);\n            case 3:\n                return new Fn($0, $1, $2);\n            case 4:\n                return new Fn($0, $1, $2, $3);\n            case 5:\n                return new Fn($0, $1, $2, $3, $4);\n            case 6:\n                return new Fn($0, $1, $2, $3, $4, $5);\n            case 7:\n                return new Fn($0, $1, $2, $3, $4, $5, $6);\n            case 8:\n                return new Fn($0, $1, $2, $3, $4, $5, $6, $7);\n            case 9:\n                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);\n            case 10:\n                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);\n            }\n        }));\n    });\n\n    /**\n     * Accepts a converging function and a list of branching functions and returns\n     * a new function. When invoked, this new function is applied to some\n     * arguments, each branching function is applied to those same arguments. The\n     * results of each branching function are passed as arguments to the converging\n     * function to produce the return value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.2\n     * @category Function\n     * @sig (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)\n     * @param {Function} after A function. `after` will be invoked with the return values of\n     *        `fn1` and `fn2` as its arguments.\n     * @param {Array} functions A list of functions.\n     * @return {Function} A new function.\n     * @example\n     *\n     *      var add = (a, b) => a + b;\n     *      var multiply = (a, b) => a * b;\n     *      var subtract = (a, b) => a - b;\n     *\n     *      //≅ multiply( add(1, 2), subtract(1, 2) );\n     *      R.converge(multiply, [add, subtract])(1, 2); //=> -3\n     *\n     *      var add3 = (a, b, c) => a + b + c;\n     *      R.converge(add3, [multiply, add, subtract])(1, 2); //=> 4\n     */\n    var converge = _curry2(function converge(after, fns) {\n        return curryN(Math.max.apply(Math, pluck('length', fns)), function () {\n            var args = arguments;\n            var context = this;\n            return after.apply(context, _map(function (fn) {\n                return fn.apply(context, args);\n            }, fns));\n        });\n    });\n\n    /**\n     * Returns a new list without any consecutively repeating elements. Equality is\n     * determined by applying the supplied predicate two consecutive elements. The\n     * first element in a series of equal element is the one being preserved.\n     *\n     * Dispatches to the `dropRepeatsWith` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig (a, a -> Boolean) -> [a] -> [a]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list The array to consider.\n     * @return {Array} `list` without repeating elements.\n     * @see R.transduce\n     * @example\n     *\n     *      var lengthEq = (x, y) => Math.abs(x) === Math.abs(y);\n     *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n     *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]\n     */\n    var dropRepeatsWith = _curry2(_dispatchable('dropRepeatsWith', _xdropRepeatsWith, function dropRepeatsWith(pred, list) {\n        var result = [];\n        var idx = 1;\n        var len = list.length;\n        if (len !== 0) {\n            result[0] = list[0];\n            while (idx < len) {\n                if (!pred(last(result), list[idx])) {\n                    result[result.length] = list[idx];\n                }\n                idx += 1;\n            }\n        }\n        return result;\n    }));\n\n    /**\n     * Takes a function and two values in its domain and returns `true` if the\n     * values map to the same value in the codomain; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Relation\n     * @sig (a -> b) -> a -> a -> Boolean\n     * @param {Function} f\n     * @param {*} x\n     * @param {*} y\n     * @return {Boolean}\n     * @example\n     *\n     *      R.eqBy(Math.abs, 5, -5); //=> true\n     */\n    var eqBy = _curry3(function eqBy(f, x, y) {\n        return equals(f(x), f(y));\n    });\n\n    /**\n     * Reports whether two objects have the same value, in `R.equals` terms, for\n     * the specified property. Useful as a curried predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig k -> {k: v} -> {k: v} -> Boolean\n     * @param {String} prop The name of the property to compare\n     * @param {Object} obj1\n     * @param {Object} obj2\n     * @return {Boolean}\n     *\n     * @example\n     *\n     *      var o1 = { a: 1, b: 2, c: 3, d: 4 };\n     *      var o2 = { a: 10, b: 20, c: 3, d: 40 };\n     *      R.eqProps('a', o1, o2); //=> false\n     *      R.eqProps('c', o1, o2); //=> true\n     */\n    var eqProps = _curry3(function eqProps(prop, obj1, obj2) {\n        return equals(obj1[prop], obj2[prop]);\n    });\n\n    /**\n     * Returns the position of the first occurrence of an item in an array, or -1\n     * if the item is not included in the array. `R.equals` is used to determine\n     * equality.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> Number\n     * @param {*} target The item to find.\n     * @param {Array} xs The array to search in.\n     * @return {Number} the index of the target, or -1 if the target is not found.\n     * @see R.lastIndexOf\n     * @example\n     *\n     *      R.indexOf(3, [1,2,3,4]); //=> 2\n     *      R.indexOf(10, [1,2,3,4]); //=> -1\n     */\n    var indexOf = _curry2(function indexOf(target, xs) {\n        return typeof xs.indexOf === 'function' && !_isArray(xs) ? xs.indexOf(target) : _indexOf(xs, target, 0);\n    });\n\n    /**\n     * juxt applies a list of functions to a list of values.\n     *\n     * @func\n     * @memberOf R\n     * @since 0.19.0\n     * @category Function\n     * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])\n     * @param {Array} fns An array of functions\n     * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\n     * @example\n     *\n     *      var range = R.juxt([Math.min, Math.max]);\n     *      range(3, 4, 9, -3); //=> [-3, 9]\n     */\n    var juxt = _curry1(function juxt(fns) {\n        return function () {\n            return map(apply(__, arguments), fns);\n        };\n    });\n\n    /**\n     * Returns a lens for the given getter and setter functions. The getter \"gets\"\n     * the value of the focus; the setter \"sets\" the value of the focus. The setter\n     * should not mutate the data structure.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig (s -> a) -> ((a, s) -> s) -> Lens s a\n     * @param {Function} getter\n     * @param {Function} setter\n     * @return {Lens}\n     * @see R.view, R.set, R.over, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var xLens = R.lens(R.prop('x'), R.assoc('x'));\n     *\n     *      R.view(xLens, {x: 1, y: 2});            //=> 1\n     *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n     *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n     */\n    var lens = _curry2(function lens(getter, setter) {\n        return function (f) {\n            return function (s) {\n                return map(function (v) {\n                    return setter(v, s);\n                }, f(getter(s)));\n            };\n        };\n    });\n\n    /**\n     * Returns a lens whose focus is the specified index.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Number -> Lens s a\n     * @param {Number} n\n     * @return {Lens}\n     * @see R.view, R.set, R.over\n     * @example\n     *\n     *      var headLens = R.lensIndex(0);\n     *\n     *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'\n     *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']\n     *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']\n     */\n    var lensIndex = _curry1(function lensIndex(n) {\n        return lens(nth(n), update(n));\n    });\n\n    /**\n     * Returns a lens whose focus is the specified path.\n     *\n     * @func\n     * @memberOf R\n     * @since 0.19.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig [String] -> Lens s a\n     * @param {Array} path The path to use.\n     * @return {Lens}\n     * @see R.view, R.set, R.over\n     * @example\n     *\n     *      var xyLens = R.lensPath(['x', 'y']);\n     *\n     *      R.view(xyLens, {x: {y: 2, z: 3}});            //=> 2\n     *      R.set(xyLens, 4, {x: {y: 2, z: 3}});          //=> {x: {y: 4, z: 3}}\n     *      R.over(xyLens, R.negate, {x: {y: 2, z: 3}});  //=> {x: {y: -2, z: 3}}\n     */\n    var lensPath = _curry1(function lensPath(p) {\n        return lens(path(p), assocPath(p));\n    });\n\n    /**\n     * Returns a lens whose focus is the specified property.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig String -> Lens s a\n     * @param {String} k\n     * @return {Lens}\n     * @see R.view, R.set, R.over\n     * @example\n     *\n     *      var xLens = R.lensProp('x');\n     *\n     *      R.view(xLens, {x: 1, y: 2});            //=> 1\n     *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n     *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n     */\n    var lensProp = _curry1(function lensProp(k) {\n        return lens(prop(k), assoc(k));\n    });\n\n    /**\n     * \"lifts\" a function to be the specified arity, so that it may \"map over\" that\n     * many lists (or other objects that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply)).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Function\n     * @sig Number -> (*... -> *) -> ([*]... -> [*])\n     * @param {Function} fn The function to lift into higher context\n     * @return {Function} The lifted function.\n     * @see R.lift\n     * @example\n     *\n     *      var madd3 = R.liftN(3, R.curryN(3, (...args) => R.sum(args)));\n     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n     */\n    var liftN = _curry2(function liftN(arity, fn) {\n        var lifted = curryN(arity, fn);\n        return curryN(arity, function () {\n            return _reduce(ap, map(lifted, arguments[0]), _slice(arguments, 1));\n        });\n    });\n\n    /**\n     * Returns the mean of the given list of numbers.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list\n     * @return {Number}\n     * @example\n     *\n     *      R.mean([2, 7, 9]); //=> 6\n     *      R.mean([]); //=> NaN\n     */\n    var mean = _curry1(function mean(list) {\n        return sum(list) / list.length;\n    });\n\n    /**\n     * Returns the median of the given list of numbers.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list\n     * @return {Number}\n     * @example\n     *\n     *      R.median([2, 9, 7]); //=> 7\n     *      R.median([7, 2, 10, 9]); //=> 8\n     *      R.median([]); //=> NaN\n     */\n    var median = _curry1(function median(list) {\n        var len = list.length;\n        if (len === 0) {\n            return NaN;\n        }\n        var width = 2 - len % 2;\n        var idx = (len - width) / 2;\n        return mean(_slice(list).sort(function (a, b) {\n            return a < b ? -1 : a > b ? 1 : 0;\n        }).slice(idx, idx + width));\n    });\n\n    /**\n     * Create a new object with the own properties of the first object merged with\n     * the own properties of the second object. If a key exists in both objects,\n     * the value from the second object will be used.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {k: v} -> {k: v} -> {k: v}\n     * @param {Object} l\n     * @param {Object} r\n     * @return {Object}\n     * @see R.mergeWith, R.mergeWithKey\n     * @example\n     *\n     *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });\n     *      //=> { 'name': 'fred', 'age': 40 }\n     *\n     *      var resetToDefault = R.merge(R.__, {x: 0});\n     *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}\n     */\n    var merge = mergeWith(function (l, r) {\n        return r;\n    });\n\n    /**\n     * Merges a list of objects together into one object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig [{k: v}] -> {k: v}\n     * @param {Array} list An array of objects\n     * @return {Object} A merged object.\n     * @see R.reduce\n     * @example\n     *\n     *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}\n     *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}\n     */\n    var mergeAll = _curry1(function mergeAll(list) {\n        return reduce(merge, {}, list);\n    });\n\n    /**\n     * Performs left-to-right function composition. The leftmost function may have\n     * any arity; the remaining functions must be unary.\n     *\n     * In some libraries this function is named `sequence`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.compose\n     * @example\n     *\n     *      var f = R.pipe(Math.pow, R.negate, R.inc);\n     *\n     *      f(3, 4); // -(3^4) + 1\n     */\n    var pipe = function pipe() {\n        if (arguments.length === 0) {\n            throw new Error('pipe requires at least one argument');\n        }\n        return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));\n    };\n\n    /**\n     * Performs left-to-right composition of one or more Promise-returning\n     * functions. The leftmost function may have any arity; the remaining functions\n     * must be unary.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.composeP\n     * @example\n     *\n     *      //  followersForUser :: String -> Promise [User]\n     *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);\n     */\n    var pipeP = function pipeP() {\n        if (arguments.length === 0) {\n            throw new Error('pipeP requires at least one argument');\n        }\n        return _arity(arguments[0].length, reduce(_pipeP, arguments[0], tail(arguments)));\n    };\n\n    /**\n     * Multiplies together all the elements of a list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list An array of numbers\n     * @return {Number} The product of all the numbers in the list.\n     * @see R.reduce\n     * @example\n     *\n     *      R.product([2,4,6,8,100,1]); //=> 38400\n     */\n    var product = reduce(multiply, 1);\n\n    /**\n     * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)\n     * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an\n     * Applicative of Traversable.\n     *\n     * Dispatches to the `sequence` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since 0.19.0\n     * @category List\n     * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)\n     * @param {Function} of\n     * @param {*} traversable\n     * @return {*}\n     * @see R.traverse\n     * @example\n     *\n     *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])\n     *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\n     *\n     *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]\n     *      R.sequence(R.of, Nothing());       //=> [Nothing()]\n     */\n    var sequence = _curry2(function sequence(of, traversable) {\n        return typeof traversable.sequence === 'function' ? traversable.sequence(of) : reduceRight(function (acc, x) {\n            return ap(map(prepend, x), acc);\n        }, of([]), traversable);\n    });\n\n    /**\n     * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning\n     * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),\n     * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative\n     * into an Applicative of Traversable.\n     *\n     * Dispatches to the `sequence` method of the third argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since 0.19.0\n     * @category List\n     * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)\n     * @param {Function} of\n     * @param {Function} f\n     * @param {*} traversable\n     * @return {*}\n     * @see R.sequence\n     * @example\n     *\n     *      R.traverse(Maybe.of, R.negate, [Just(1), Just(2), Just(3)]);   //=> Just([-1, -2, -3])\n     *      R.traverse(Maybe.of, R.negate, [Just(1), Just(2), Nothing()]); //=> Nothing()\n     *\n     *      R.traverse(R.of, R.negate, Just([1, 2, 3])); //=> [Just(-1), Just(-2), Just(-3)]\n     *      R.traverse(R.of, R.negate, Nothing());       //=> [Nothing()]\n     */\n    var traverse = _curry3(function traverse(of, f, traversable) {\n        return sequence(of, map(f, traversable));\n    });\n\n    /**\n     * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from\n     * any [Chain](https://github.com/fantasyland/fantasy-land#chain).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig Chain c => c (c a) -> c a\n     * @param {*} list\n     * @return {*}\n     * @see R.flatten, R.chain\n     * @example\n     *\n     *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]\n     *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]\n     */\n    var unnest = chain(_identity);\n\n    var _contains = function _contains(a, list) {\n        return _indexOf(list, a, 0) >= 0;\n    };\n\n    var _stepCat = function () {\n        var _stepCatArray = {\n            '@@transducer/init': Array,\n            '@@transducer/step': function (xs, x) {\n                return _concat(xs, [x]);\n            },\n            '@@transducer/result': _identity\n        };\n        var _stepCatString = {\n            '@@transducer/init': String,\n            '@@transducer/step': function (a, b) {\n                return a + b;\n            },\n            '@@transducer/result': _identity\n        };\n        var _stepCatObject = {\n            '@@transducer/init': Object,\n            '@@transducer/step': function (result, input) {\n                return merge(result, isArrayLike(input) ? objOf(input[0], input[1]) : input);\n            },\n            '@@transducer/result': _identity\n        };\n        return function _stepCat(obj) {\n            if (_isTransformer(obj)) {\n                return obj;\n            }\n            if (isArrayLike(obj)) {\n                return _stepCatArray;\n            }\n            if (typeof obj === 'string') {\n                return _stepCatString;\n            }\n            if (typeof obj === 'object') {\n                return _stepCatObject;\n            }\n            throw new Error('Cannot create transformer for ' + obj);\n        };\n    }();\n\n    //  mapPairs :: (Object, [String]) -> [String]\n    var _toString = function _toString(x, seen) {\n        var recur = function recur(y) {\n            var xs = seen.concat([x]);\n            return _contains(y, xs) ? '<Circular>' : _toString(y, xs);\n        };\n        //  mapPairs :: (Object, [String]) -> [String]\n        var mapPairs = function (obj, keys) {\n            return _map(function (k) {\n                return _quote(k) + ': ' + recur(obj[k]);\n            }, keys.slice().sort());\n        };\n        switch (Object.prototype.toString.call(x)) {\n        case '[object Arguments]':\n            return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';\n        case '[object Array]':\n            return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {\n                return /^\\d+$/.test(k);\n            }, keys(x)))).join(', ') + ']';\n        case '[object Boolean]':\n            return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();\n        case '[object Date]':\n            return 'new Date(' + _quote(_toISOString(x)) + ')';\n        case '[object Null]':\n            return 'null';\n        case '[object Number]':\n            return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);\n        case '[object String]':\n            return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);\n        case '[object Undefined]':\n            return 'undefined';\n        default:\n            if (typeof x.toString === 'function') {\n                var repr = x.toString();\n                if (repr !== '[object Object]') {\n                    return repr;\n                }\n            }\n            return '{' + mapPairs(x, keys(x)).join(', ') + '}';\n        }\n    };\n\n    /**\n     * Turns a list of Functors into a Functor of a list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category List\n     * @sig Functor f => (x -> f x) -> [f a] -> f [a]\n     * @param {Function} of A function that returns the data type to return\n     * @param {Array} list An array of functors of the same type\n     * @return {*}\n     * @see R.sequence\n     * @deprecated since v0.19.0\n     * @example\n     *\n     *      R.commute(R.of, [[1], [2, 3]]);   //=> [[1, 2], [1, 3]]\n     *      R.commute(R.of, [[1, 2], [3]]);   //=> [[1, 3], [2, 3]]\n     *      R.commute(R.of, [[1], [2], [3]]); //=> [[1, 2, 3]]\n     *      R.commute(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])\n     *      R.commute(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\n     */\n    var commute = commuteMap(identity);\n\n    /**\n     * Performs right-to-left function composition. The rightmost function may have\n     * any arity; the remaining functions must be unary.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.pipe\n     * @example\n     *\n     *      var f = R.compose(R.inc, R.negate, Math.pow);\n     *\n     *      f(3, 4); // -(3^4) + 1\n     */\n    var compose = function compose() {\n        if (arguments.length === 0) {\n            throw new Error('compose requires at least one argument');\n        }\n        return pipe.apply(this, reverse(arguments));\n    };\n\n    /**\n     * Returns the right-to-left Kleisli composition of the provided functions,\n     * each of which must return a value of a type supported by [`chain`](#chain).\n     *\n     * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), R.chain(f))`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Function\n     * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (m a -> m z)\n     * @param {...Function}\n     * @return {Function}\n     * @see R.pipeK\n     * @example\n     *\n     *      //  parseJson :: String -> Maybe *\n     *      //  get :: String -> Object -> Maybe *\n     *\n     *      //  getStateCode :: Maybe String -> Maybe String\n     *      var getStateCode = R.composeK(\n     *        R.compose(Maybe.of, R.toUpper),\n     *        get('state'),\n     *        get('address'),\n     *        get('user'),\n     *        parseJson\n     *      );\n     *\n     *      getStateCode(Maybe.of('{\"user\":{\"address\":{\"state\":\"ny\"}}}'));\n     *      //=> Just('NY')\n     *      getStateCode(Maybe.of('[Invalid JSON]'));\n     *      //=> Nothing()\n     */\n    var composeK = function composeK() {\n        return compose.apply(this, prepend(identity, map(chain, arguments)));\n    };\n\n    /**\n     * Performs right-to-left composition of one or more Promise-returning\n     * functions. The rightmost function may have any arity; the remaining\n     * functions must be unary.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.pipeP\n     * @example\n     *\n     *      //  followersForUser :: String -> Promise [User]\n     *      var followersForUser = R.composeP(db.getFollowers, db.getUserById);\n     */\n    var composeP = function composeP() {\n        if (arguments.length === 0) {\n            throw new Error('composeP requires at least one argument');\n        }\n        return pipeP.apply(this, reverse(arguments));\n    };\n\n    /**\n     * Wraps a constructor function inside a curried function that can be called\n     * with the same arguments and returns the same type.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (* -> {*}) -> (* -> {*})\n     * @param {Function} Fn The constructor function to wrap.\n     * @return {Function} A wrapped, curried constructor function.\n     * @example\n     *\n     *      // Constructor function\n     *      var Widget = config => {\n     *        // ...\n     *      };\n     *      Widget.prototype = {\n     *        // ...\n     *      };\n     *      var allConfigs = [\n     *        // ...\n     *      ];\n     *      R.map(R.construct(Widget), allConfigs); // a list of Widgets\n     */\n    var construct = _curry1(function construct(Fn) {\n        return constructN(Fn.length, Fn);\n    });\n\n    /**\n     * Returns `true` if the specified value is equal, in `R.equals` terms, to at\n     * least one element of the given list; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> Boolean\n     * @param {Object} a The item to compare against.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the item is in the list, `false` otherwise.\n     * @see R.any\n     * @example\n     *\n     *      R.contains(3, [1, 2, 3]); //=> true\n     *      R.contains(4, [1, 2, 3]); //=> false\n     *      R.contains([42], [[42]]); //=> true\n     */\n    var contains = _curry2(_contains);\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements in the first list not\n     * contained in the second list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig [*] -> [*] -> [*]\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The elements in `list1` that are not in `list2`.\n     * @see R.differenceWith\n     * @example\n     *\n     *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n     *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\n     */\n    var difference = _curry2(function difference(first, second) {\n        var out = [];\n        var idx = 0;\n        var firstLen = first.length;\n        while (idx < firstLen) {\n            if (!_contains(first[idx], second) && !_contains(first[idx], out)) {\n                out[out.length] = first[idx];\n            }\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a new list without any consecutively repeating elements. `R.equals`\n     * is used to determine equality.\n     *\n     * Dispatches to the `dropRepeats` method of the first argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig [a] -> [a]\n     * @param {Array} list The array to consider.\n     * @return {Array} `list` without repeating elements.\n     * @see R.transduce\n     * @example\n     *\n     *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\n     */\n    var dropRepeats = _curry1(_dispatchable('dropRepeats', _xdropRepeatsWith(equals), dropRepeatsWith(equals)));\n\n    /**\n     * Transforms the items of the list with the transducer and appends the\n     * transformed items to the accumulator using an appropriate iterator function\n     * based on the accumulator type.\n     *\n     * The accumulator can be an array, string, object or a transformer. Iterated\n     * items will be appended to arrays and concatenated to strings. Objects will\n     * be merged directly or 2-item arrays will be merged as key, value pairs.\n     *\n     * The accumulator can also be a transformer object that provides a 2-arity\n     * reducing iterator function, step, 0-arity initial value function, init, and\n     * 1-arity result extraction function result. The step function is used as the\n     * iterator function in reduce. The result function is used to convert the\n     * final accumulator into the return type and in most cases is R.identity. The\n     * init function is used to provide the initial accumulator.\n     *\n     * The iteration is performed with R.reduce after initializing the transducer.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig a -> (b -> b) -> [c] -> a\n     * @param {*} acc The initial accumulator value.\n     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @example\n     *\n     *      var numbers = [1, 2, 3, 4];\n     *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n     *\n     *      R.into([], transducer, numbers); //=> [2, 3]\n     *\n     *      var intoArray = R.into([]);\n     *      intoArray(transducer, numbers); //=> [2, 3]\n     */\n    var into = _curry3(function into(acc, xf, list) {\n        return _isTransformer(acc) ? _reduce(xf(acc), acc['@@transducer/init'](), list) : _reduce(xf(_stepCat(acc)), acc, list);\n    });\n\n    /**\n     * \"lifts\" a function of arity > 1 so that it may \"map over\" an Array or other\n     * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Function\n     * @sig (*... -> *) -> ([*]... -> [*])\n     * @param {Function} fn The function to lift into higher context\n     * @return {Function} The lifted function.\n     * @see R.liftN\n     * @example\n     *\n     *      var madd3 = R.lift(R.curry((a, b, c) => a + b + c));\n     *\n     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n     *\n     *      var madd5 = R.lift(R.curry((a, b, c, d, e) => a + b + c + d + e));\n     *\n     *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]\n     */\n    var lift = _curry1(function lift(fn) {\n        return liftN(fn.length, fn);\n    });\n\n    /**\n     * Returns a partial copy of an object omitting the keys specified.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [String] -> {String: *} -> {String: *}\n     * @param {Array} names an array of String property names to omit from the new object\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with properties from `names` not on it.\n     * @see R.pick\n     * @example\n     *\n     *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}\n     */\n    var omit = _curry2(function omit(names, obj) {\n        var result = {};\n        for (var prop in obj) {\n            if (!_contains(prop, names)) {\n                result[prop] = obj[prop];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Returns the left-to-right Kleisli composition of the provided functions,\n     * each of which must return a value of a type supported by [`chain`](#chain).\n     *\n     * `R.pipeK(f, g, h)` is equivalent to `R.pipe(R.chain(f), R.chain(g), R.chain(h))`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Function\n     * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (m a -> m z)\n     * @param {...Function}\n     * @return {Function}\n     * @see R.composeK\n     * @example\n     *\n     *      //  parseJson :: String -> Maybe *\n     *      //  get :: String -> Object -> Maybe *\n     *\n     *      //  getStateCode :: Maybe String -> Maybe String\n     *      var getStateCode = R.pipeK(\n     *        parseJson,\n     *        get('user'),\n     *        get('address'),\n     *        get('state'),\n     *        R.compose(Maybe.of, R.toUpper)\n     *      );\n     *\n     *      getStateCode(Maybe.of('{\"user\":{\"address\":{\"state\":\"ny\"}}}'));\n     *      //=> Just('NY')\n     *      getStateCode(Maybe.of('[Invalid JSON]'));\n     *      //=> Nothing()\n     */\n    var pipeK = function pipeK() {\n        return composeK.apply(this, reverse(arguments));\n    };\n\n    /**\n     * Returns the string representation of the given value. `eval`'ing the output\n     * should result in a value equivalent to the input value. Many of the built-in\n     * `toString` methods do not satisfy this requirement.\n     *\n     * If the given value is an `[object Object]` with a `toString` method other\n     * than `Object.prototype.toString`, this method is invoked with no arguments\n     * to produce the return value. This means user-defined constructor functions\n     * can provide a suitable `toString` method. For example:\n     *\n     *     function Point(x, y) {\n     *       this.x = x;\n     *       this.y = y;\n     *     }\n     *\n     *     Point.prototype.toString = function() {\n     *       return 'new Point(' + this.x + ', ' + this.y + ')';\n     *     };\n     *\n     *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category String\n     * @sig * -> String\n     * @param {*} val\n     * @return {String}\n     * @example\n     *\n     *      R.toString(42); //=> '42'\n     *      R.toString('abc'); //=> '\"abc\"'\n     *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n     *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n     *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n     */\n    var toString = _curry1(function toString(val) {\n        return _toString(val, []);\n    });\n\n    /**\n     * Returns a new list containing only one copy of each element in the original\n     * list, based upon the value returned by applying the supplied function to\n     * each list element. Prefers the first item if the supplied function produces\n     * the same value on two items. `R.equals` is used for comparison.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig (a -> b) -> [a] -> [a]\n     * @param {Function} fn A function used to produce a value to use during comparisons.\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of unique items.\n     * @example\n     *\n     *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]\n     */\n    /* globals Set */\n    // distinguishing between +0 and -0 is not supported by Set\n    /* falls through */\n    // these types can all utilise Set\n    // prevent scan for null by tracking as a boolean\n    /* falls through */\n    // scan through all previously applied items\n    var uniqBy = _curry2(/* globals Set */\n    typeof Set === 'undefined' ? function uniqBy(fn, list) {\n        var idx = 0;\n        var applied = [];\n        var result = [];\n        var appliedItem, item;\n        while (idx < list.length) {\n            item = list[idx];\n            appliedItem = fn(item);\n            if (!_contains(appliedItem, applied)) {\n                result.push(item);\n                applied.push(appliedItem);\n            }\n            idx += 1;\n        }\n        return result;\n    } : function uniqBySet(fn, list) {\n        var set = new Set();\n        var applied = [];\n        var prevSetSize = 0;\n        var result = [];\n        var nullExists = false;\n        var negZeroExists = false;\n        var idx = 0;\n        var appliedItem, item, newSetSize;\n        while (idx < list.length) {\n            item = list[idx];\n            appliedItem = fn(item);\n            switch (typeof appliedItem) {\n            case 'number':\n                // distinguishing between +0 and -0 is not supported by Set\n                if (appliedItem === 0 && !negZeroExists && 1 / appliedItem === -Infinity) {\n                    negZeroExists = true;\n                    result.push(item);\n                    break;\n                }\n            /* falls through */\n            case 'string':\n            case 'boolean':\n            case 'function':\n            case 'undefined':\n                // these types can all utilise Set\n                set.add(appliedItem);\n                newSetSize = set.size;\n                if (newSetSize > prevSetSize) {\n                    result.push(item);\n                    prevSetSize = newSetSize;\n                }\n                break;\n            case 'object':\n                if (appliedItem === null) {\n                    if (!nullExists) {\n                        // prevent scan for null by tracking as a boolean\n                        nullExists = true;\n                        result.push(null);\n                    }\n                    break;\n                }\n            /* falls through */\n            default:\n                // scan through all previously applied items\n                if (!_contains(appliedItem, applied)) {\n                    applied.push(appliedItem);\n                    result.push(item);\n                }\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns a new list without values in the first argument.\n     * `R.equals` is used to determine equality.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since 0.19.0\n     * @category List\n     * @sig [a] -> [a] -> [a]\n     * @param {Array} list1 The values to be removed from `list2`.\n     * @param {Array} list2 The array to remove values from.\n     * @return {Array} The new array without values in `list1`.\n     * @see R.transduce\n     * @example\n     *\n     *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]\n     */\n    var without = _curry2(function (xs, list) {\n        return reject(flip(_contains)(xs), list);\n    });\n\n    /**\n     * Takes a function `f` and returns a function `g` such that:\n     *\n     *   - applying `g` to zero or more arguments will give __true__ if applying\n     *     the same arguments to `f` gives a logical __false__ value; and\n     *\n     *   - applying `g` to zero or more arguments will give __false__ if applying\n     *     the same arguments to `f` gives a logical __true__ value.\n     *\n     * `R.complement` will work on all other functors as well.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category Logic\n     * @sig (*... -> *) -> (*... -> Boolean)\n     * @param {Function} f\n     * @return {Function}\n     * @see R.not\n     * @example\n     *\n     *      var isEven = n => n % 2 === 0;\n     *      var isOdd = R.complement(isEven);\n     *      isOdd(21); //=> true\n     *      isOdd(42); //=> false\n     */\n    var complement = lift(not);\n\n    /**\n     * Turns a named method with a specified arity into a function that can be\n     * called directly supplied with arguments and a target object.\n     *\n     * The returned function is curried and accepts `arity + 1` parameters where\n     * the final parameter is the target object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n     * @param {Number} arity Number of arguments the returned function should take\n     *        before the target object.\n     * @param {String} method Name of the method to call.\n     * @return {Function} A new curried function.\n     * @example\n     *\n     *      var sliceFrom = R.invoker(1, 'slice');\n     *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n     *      var sliceFrom6 = R.invoker(2, 'slice')(6);\n     *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n     */\n    var invoker = _curry2(function invoker(arity, method) {\n        return curryN(arity + 1, function () {\n            var target = arguments[arity];\n            if (target != null && is(Function, target[method])) {\n                return target[method].apply(target, _slice(arguments, 0, arity));\n            }\n            throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\n        });\n    });\n\n    /**\n     * Returns a string made by inserting the `separator` between each element and\n     * concatenating all the elements into a single string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig String -> [a] -> String\n     * @param {Number|String} separator The string used to separate the elements.\n     * @param {Array} xs The elements to join into a string.\n     * @return {String} str The string made by concatenating `xs` with `separator`.\n     * @see R.split\n     * @example\n     *\n     *      var spacer = R.join(' ');\n     *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'\n     *      R.join('|', [1, 2, 3]);    //=> '1|2|3'\n     */\n    var join = invoker(1, 'join');\n\n    /**\n     * Creates a new function that, when invoked, caches the result of calling `fn`\n     * for a given argument set and returns the result. Subsequent calls to the\n     * memoized `fn` with the same argument set will not result in an additional\n     * call to `fn`; instead, the cached result for that set of arguments will be\n     * returned.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (*... -> a) -> (*... -> a)\n     * @param {Function} fn The function to memoize.\n     * @return {Function} Memoized version of `fn`.\n     * @example\n     *\n     *      var count = 0;\n     *      var factorial = R.memoize(n => {\n     *        count += 1;\n     *        return R.product(R.range(1, n + 1));\n     *      });\n     *      factorial(5); //=> 120\n     *      factorial(5); //=> 120\n     *      factorial(5); //=> 120\n     *      count; //=> 1\n     */\n    var memoize = _curry1(function memoize(fn) {\n        var cache = {};\n        return _arity(fn.length, function () {\n            var key = toString(arguments);\n            if (!_has(key, cache)) {\n                cache[key] = fn.apply(this, arguments);\n            }\n            return cache[key];\n        });\n    });\n\n    /**\n     * Splits a string into an array of strings based on the given\n     * separator.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category String\n     * @sig (String | RegExp) -> String -> [String]\n     * @param {String|RegExp} sep The pattern.\n     * @param {String} str The string to separate into an array.\n     * @return {Array} The array of strings from `str` separated by `str`.\n     * @see R.join\n     * @example\n     *\n     *      var pathComponents = R.split('/');\n     *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n     *\n     *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n     */\n    var split = invoker(1, 'split');\n\n    /**\n     * Determines whether a given string matches a given regular expression.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category String\n     * @sig RegExp -> String -> Boolean\n     * @param {RegExp} pattern\n     * @param {String} str\n     * @return {Boolean}\n     * @see R.match\n     * @example\n     *\n     *      R.test(/^x/, 'xyz'); //=> true\n     *      R.test(/^y/, 'xyz'); //=> false\n     */\n    var test = _curry2(function test(pattern, str) {\n        if (!_isRegExp(pattern)) {\n            throw new TypeError('\\u2018test\\u2019 requires a value of type RegExp as its first argument; received ' + toString(pattern));\n        }\n        return _cloneRegExp(pattern).test(str);\n    });\n\n    /**\n     * The lower case version of a string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category String\n     * @sig String -> String\n     * @param {String} str The string to lower case.\n     * @return {String} The lower case version of `str`.\n     * @see R.toUpper\n     * @example\n     *\n     *      R.toLower('XYZ'); //=> 'xyz'\n     */\n    var toLower = invoker(0, 'toLowerCase');\n\n    /**\n     * The upper case version of a string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category String\n     * @sig String -> String\n     * @param {String} str The string to upper case.\n     * @return {String} The upper case version of `str`.\n     * @see R.toLower\n     * @example\n     *\n     *      R.toUpper('abc'); //=> 'ABC'\n     */\n    var toUpper = invoker(0, 'toUpperCase');\n\n    /**\n     * Returns a new list containing only one copy of each element in the original\n     * list. `R.equals` is used to determine equality.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a]\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of unique items.\n     * @example\n     *\n     *      R.uniq([1, 1, 2, 1]); //=> [1, 2]\n     *      R.uniq([1, '1']);     //=> [1, '1']\n     *      R.uniq([[42], [42]]); //=> [[42]]\n     */\n    var uniq = uniqBy(identity);\n\n    /**\n     * Returns the result of concatenating the given lists or strings.\n     *\n     * Dispatches to the `concat` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a] -> [a]\n     * @sig String -> String -> String\n     * @param {Array|String} a\n     * @param {Array|String} b\n     * @return {Array|String}\n     *\n     * @example\n     *\n     *      R.concat([], []); //=> []\n     *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n     *      R.concat('ABC', 'DEF'); // 'ABCDEF'\n     */\n    var concat = flip(invoker(1, 'concat'));\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of those\n     * elements common to both lists.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig [*] -> [*] -> [*]\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The list of elements found in both `list1` and `list2`.\n     * @see R.intersectionWith\n     * @example\n     *\n     *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]\n     */\n    var intersection = _curry2(function intersection(list1, list2) {\n        return uniq(_filter(flip(_contains)(list1), list2));\n    });\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements contained in the first or\n     * second list, but not both.\n     *\n     * @func\n     * @memberOf R\n     * @since 0.19.0\n     * @category Relation\n     * @sig [*] -> [*] -> [*]\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The elements in `list1` or `list2`, but not both.\n     * @see R.symmetricDifferenceWith\n     * @example\n     *\n     *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]\n     *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]\n     */\n    var symmetricDifference = _curry2(function symmetricDifference(list1, list2) {\n        return concat(difference(list1, list2), difference(list2, list1));\n    });\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements contained in the first or\n     * second list, but not both. Duplication is determined according to the value\n     * returned by applying the supplied predicate to two list elements.\n     *\n     * @func\n     * @memberOf R\n     * @since 0.19.0\n     * @category Relation\n     * @sig (a -> a -> Boolean) -> [a] -> [a] -> [a]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The elements in `list1` or `list2`, but not both.\n     * @see R.symmetricDifference\n     * @example\n     *\n     *      var eqA = R.eqBy(R.prop('a'));\n     *      var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];\n     *      var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];\n     *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]\n     */\n    var symmetricDifferenceWith = _curry3(function symmetricDifferenceWith(pred, list1, list2) {\n        return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));\n    });\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of the elements\n     * of each list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig [*] -> [*] -> [*]\n     * @param {Array} as The first list.\n     * @param {Array} bs The second list.\n     * @return {Array} The first and second lists concatenated, with\n     *         duplicates removed.\n     * @example\n     *\n     *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]\n     */\n    var union = _curry2(compose(uniq, _concat));\n\n    var R = {\n        F: F,\n        T: T,\n        __: __,\n        add: add,\n        addIndex: addIndex,\n        adjust: adjust,\n        all: all,\n        allPass: allPass,\n        allUniq: allUniq,\n        always: always,\n        and: and,\n        any: any,\n        anyPass: anyPass,\n        ap: ap,\n        aperture: aperture,\n        append: append,\n        apply: apply,\n        assoc: assoc,\n        assocPath: assocPath,\n        binary: binary,\n        bind: bind,\n        both: both,\n        call: call,\n        chain: chain,\n        clone: clone,\n        commute: commute,\n        commuteMap: commuteMap,\n        comparator: comparator,\n        complement: complement,\n        compose: compose,\n        composeK: composeK,\n        composeP: composeP,\n        concat: concat,\n        cond: cond,\n        construct: construct,\n        constructN: constructN,\n        contains: contains,\n        converge: converge,\n        countBy: countBy,\n        curry: curry,\n        curryN: curryN,\n        dec: dec,\n        defaultTo: defaultTo,\n        difference: difference,\n        differenceWith: differenceWith,\n        dissoc: dissoc,\n        dissocPath: dissocPath,\n        divide: divide,\n        drop: drop,\n        dropLast: dropLast,\n        dropLastWhile: dropLastWhile,\n        dropRepeats: dropRepeats,\n        dropRepeatsWith: dropRepeatsWith,\n        dropWhile: dropWhile,\n        either: either,\n        empty: empty,\n        eqBy: eqBy,\n        eqProps: eqProps,\n        equals: equals,\n        evolve: evolve,\n        filter: filter,\n        find: find,\n        findIndex: findIndex,\n        findLast: findLast,\n        findLastIndex: findLastIndex,\n        flatten: flatten,\n        flip: flip,\n        forEach: forEach,\n        fromPairs: fromPairs,\n        groupBy: groupBy,\n        gt: gt,\n        gte: gte,\n        has: has,\n        hasIn: hasIn,\n        head: head,\n        identical: identical,\n        identity: identity,\n        ifElse: ifElse,\n        inc: inc,\n        indexBy: indexBy,\n        indexOf: indexOf,\n        init: init,\n        insert: insert,\n        insertAll: insertAll,\n        intersection: intersection,\n        intersectionWith: intersectionWith,\n        intersperse: intersperse,\n        into: into,\n        invert: invert,\n        invertObj: invertObj,\n        invoker: invoker,\n        is: is,\n        isArrayLike: isArrayLike,\n        isEmpty: isEmpty,\n        isNil: isNil,\n        join: join,\n        juxt: juxt,\n        keys: keys,\n        keysIn: keysIn,\n        last: last,\n        lastIndexOf: lastIndexOf,\n        length: length,\n        lens: lens,\n        lensIndex: lensIndex,\n        lensPath: lensPath,\n        lensProp: lensProp,\n        lift: lift,\n        liftN: liftN,\n        lt: lt,\n        lte: lte,\n        map: map,\n        mapAccum: mapAccum,\n        mapAccumRight: mapAccumRight,\n        mapObjIndexed: mapObjIndexed,\n        match: match,\n        mathMod: mathMod,\n        max: max,\n        maxBy: maxBy,\n        mean: mean,\n        median: median,\n        memoize: memoize,\n        merge: merge,\n        mergeAll: mergeAll,\n        mergeWith: mergeWith,\n        mergeWithKey: mergeWithKey,\n        min: min,\n        minBy: minBy,\n        modulo: modulo,\n        multiply: multiply,\n        nAry: nAry,\n        negate: negate,\n        none: none,\n        not: not,\n        nth: nth,\n        nthArg: nthArg,\n        objOf: objOf,\n        of: of,\n        omit: omit,\n        once: once,\n        or: or,\n        over: over,\n        pair: pair,\n        partial: partial,\n        partialRight: partialRight,\n        partition: partition,\n        path: path,\n        pathEq: pathEq,\n        pathOr: pathOr,\n        pathSatisfies: pathSatisfies,\n        pick: pick,\n        pickAll: pickAll,\n        pickBy: pickBy,\n        pipe: pipe,\n        pipeK: pipeK,\n        pipeP: pipeP,\n        pluck: pluck,\n        prepend: prepend,\n        product: product,\n        project: project,\n        prop: prop,\n        propEq: propEq,\n        propIs: propIs,\n        propOr: propOr,\n        propSatisfies: propSatisfies,\n        props: props,\n        range: range,\n        reduce: reduce,\n        reduceRight: reduceRight,\n        reduced: reduced,\n        reject: reject,\n        remove: remove,\n        repeat: repeat,\n        replace: replace,\n        reverse: reverse,\n        scan: scan,\n        sequence: sequence,\n        set: set,\n        slice: slice,\n        sort: sort,\n        sortBy: sortBy,\n        split: split,\n        splitAt: splitAt,\n        splitEvery: splitEvery,\n        splitWhen: splitWhen,\n        subtract: subtract,\n        sum: sum,\n        symmetricDifference: symmetricDifference,\n        symmetricDifferenceWith: symmetricDifferenceWith,\n        tail: tail,\n        take: take,\n        takeLast: takeLast,\n        takeLastWhile: takeLastWhile,\n        takeWhile: takeWhile,\n        tap: tap,\n        test: test,\n        times: times,\n        toLower: toLower,\n        toPairs: toPairs,\n        toPairsIn: toPairsIn,\n        toString: toString,\n        toUpper: toUpper,\n        transduce: transduce,\n        transpose: transpose,\n        traverse: traverse,\n        trim: trim,\n        type: type,\n        unapply: unapply,\n        unary: unary,\n        uncurryN: uncurryN,\n        unfold: unfold,\n        union: union,\n        unionWith: unionWith,\n        uniq: uniq,\n        uniqBy: uniqBy,\n        uniqWith: uniqWith,\n        unless: unless,\n        unnest: unnest,\n        update: update,\n        useWith: useWith,\n        values: values,\n        valuesIn: valuesIn,\n        view: view,\n        when: when,\n        where: where,\n        whereEq: whereEq,\n        without: without,\n        wrap: wrap,\n        xprod: xprod,\n        zip: zip,\n        zipObj: zipObj,\n        zipWith: zipWith\n    };\n  /* eslint-env amd */\n\n  /* TEST_ENTRY_POINT */\n\n  if (typeof exports === 'object') {\n    module.exports = R;\n  } else if (typeof define === 'function' && define.amd) {\n    define(function() { return R; });\n  } else {\n    this.R = R;\n  }\n\n}.call(this));\n","R = module.exports;\n"]}}]