[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar _ = Package.underscore._;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar Random = Package.random.Random;\nvar EJSON = Package.ejson.EJSON;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar MongoID = Package['mongo-id'].MongoID;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar rulesByCollection, addFuncForAll, ensureCreated, ensureDefaultAllow, getRulesForCollectionAndType, getCollectionName, Security;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"ongoworks:security\":{\"lib\":{\"server\":{\"utility.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ongoworks_security/lib/server/utility.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global _, rulesByCollection:true, addFuncForAll:true, ensureCreated:true, ensureDefaultAllow:true */                //\n                                                                                                                       //\nrulesByCollection = {};                                                                                                // 3\n                                                                                                                       //\nvar created = {                                                                                                        // 5\n  allow: {                                                                                                             // 6\n    insert: {},                                                                                                        // 7\n    update: {},                                                                                                        // 8\n    remove: {},                                                                                                        // 9\n    download: {} // for use with CollectionFS packages                                                                 // 10\n  },                                                                                                                   // 6\n  deny: {                                                                                                              // 12\n    insert: {},                                                                                                        // 13\n    update: {},                                                                                                        // 14\n    remove: {},                                                                                                        // 15\n    download: {} // for use with CollectionFS packages                                                                 // 16\n  }                                                                                                                    // 12\n};                                                                                                                     //\n                                                                                                                       //\n/**                                                                                                                    //\n * Adds the given function as an allow or deny function for all specified collections and types.                       //\n * @param {Array(Mongo.Collection)} collections Array of Mongo.Collection instances                                    //\n * @param {String}                  allowOrDeny \"allow\" or \"deny\"                                                      //\n * @param {Array(String)}           types       Array of types (\"insert\", \"update\", \"remove\")                          //\n * @param {Array(String)|null}      fetch       `fetch` property to use                                                //\n * @param {Function}                func        The function                                                           //\n */                                                                                                                    //\naddFuncForAll = function () {                                                                                          // 28\n  function addFuncForAll(collections, allowOrDeny, types, fetch, func) {                                               // 28\n    // We always disable transformation, but we transform for specific                                                 //\n    // rules upon running our deny function if requested.                                                              //\n    var rules = { transform: null };                                                                                   // 31\n    if (_.isArray(fetch)) {                                                                                            // 32\n      rules.fetch = fetch;                                                                                             // 33\n    }                                                                                                                  //\n    _.each(types, function (t) {                                                                                       // 35\n      rules[t] = func;                                                                                                 // 36\n    });                                                                                                                //\n    _.each(collections, function (c) {                                                                                 // 38\n      c[allowOrDeny](rules);                                                                                           // 39\n    });                                                                                                                //\n  }                                                                                                                    //\n                                                                                                                       //\n  return addFuncForAll;                                                                                                //\n}();                                                                                                                   //\n                                                                                                                       //\n/**                                                                                                                    //\n * Creates the allow or deny function for the given collections if not already created. This ensures that this package only ever creates up to one allow and one deny per collection.\n * @param   {String}                  allowOrDeny \"allow\" or \"deny\"                                                    //\n * @param   {Array(Mongo.Collection)} collections An array of collections                                              //\n * @param   {Array(String)}           types       An array of types (\"insert\", \"update\", \"remove\")                     //\n * @param   {Array(String)|null}      fetch       `fetch` property to use                                              //\n * @param   {Function}                func        The function                                                         //\n */                                                                                                                    //\nensureCreated = function () {                                                                                          // 51\n  function ensureCreated(allowOrDeny, collections, types, fetch, func) {                                               // 51\n    _.each(types, function (t) {                                                                                       // 52\n      // Ignore \"read\"                                                                                                 //\n      if (!_.contains(['insert', 'update', 'remove', 'download'], t)) return;                                          // 54\n                                                                                                                       //\n      collections = _.reject(collections, function (c) {                                                               // 56\n        return _.has(created[allowOrDeny][t], getCollectionName(c));                                                   // 57\n      });                                                                                                              //\n      addFuncForAll(collections, allowOrDeny, [t], null, func);                                                        // 59\n      // mark that we've defined function for collection-type combo                                                    //\n      _.each(collections, function (c) {                                                                               // 52\n        created[allowOrDeny][t][getCollectionName(c)] = true;                                                          // 62\n      });                                                                                                              //\n    });                                                                                                                //\n  }                                                                                                                    //\n                                                                                                                       //\n  return ensureCreated;                                                                                                //\n}();                                                                                                                   //\n                                                                                                                       //\n/**                                                                                                                    //\n * Sets up default allow functions for the collections and types.                                                      //\n * @param   {Array(Mongo.Collection)} collections Array of Mongo.Collection instances                                  //\n * @param   {Array(String)}           types       Array of types (\"insert\", \"update\", \"remove\")                        //\n */                                                                                                                    //\nensureDefaultAllow = function () {                                                                                     // 72\n  function ensureDefaultAllow(collections, types) {                                                                    // 72\n    ensureCreated(\"allow\", collections, types, [], function () {                                                       // 73\n      return true;                                                                                                     // 74\n    });                                                                                                                //\n  }                                                                                                                    //\n                                                                                                                       //\n  return ensureDefaultAllow;                                                                                           //\n}();                                                                                                                   //\n                                                                                                                       //\n/**                                                                                                                    //\n * Return only those rules that apply to the given collection and operation type                                       //\n */                                                                                                                    //\ngetRulesForCollectionAndType = function () {                                                                           // 81\n  function getRulesForCollectionAndType(collectionName, type) {                                                        // 81\n    var rules = rulesByCollection[collectionName] || [];                                                               // 82\n    return _.select(rules, function (rule) {                                                                           // 83\n      return _.contains(rule._types, type);                                                                            // 84\n    });                                                                                                                //\n  }                                                                                                                    //\n                                                                                                                       //\n  return getRulesForCollectionAndType;                                                                                 //\n}();                                                                                                                   //\n                                                                                                                       //\ngetCollectionName = function () {                                                                                      // 88\n  function getCollectionName(collection) {                                                                             // 88\n    // CollectionFS has underlying collection on `files` property                                                      //\n    return collection._name || collection.files && collection.files._name;                                             // 90\n  }                                                                                                                    //\n                                                                                                                       //\n  return getCollectionName;                                                                                            //\n}();                                                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Security.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ongoworks_security/lib/server/Security.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// The `Security` object is exported and provides the package API                                                      //\nSecurity = {                                                                                                           // 2\n  // Putting these on the exported object allows package users to override if necessary                                //\n  errorMessages: {                                                                                                     // 4\n    multipleCan: 'You may not combine more than one insert, update, or remove on a Security.can chain',                // 5\n    notAllowed: 'Action not allowed',                                                                                  // 6\n    requiresDefinition: 'Security.defineMethod requires a \"definition\" argument',                                      // 7\n    requiresAllow: 'Security.defineMethod requires an \"allow\" function',                                               // 8\n    collectionsArg: 'The collections argument must be a Mongo.Collection instance or an array of them',                // 9\n    noCollectionOrType: 'At a minimum, you must call permit and collections methods for a security rule.'              // 10\n  },                                                                                                                   //\n  // the starting point of the chain                                                                                   //\n  permit: function () {                                                                                                // 13\n    function permit(types) {                                                                                           // 13\n      return new Security.Rule(types);                                                                                 // 14\n    }                                                                                                                  //\n                                                                                                                       //\n    return permit;                                                                                                     //\n  }(),                                                                                                                 //\n  can: function () {                                                                                                   // 16\n    function can(userId) {                                                                                             // 16\n      return new Security.Check(userId);                                                                               // 17\n    }                                                                                                                  //\n                                                                                                                       //\n    return can;                                                                                                        //\n  }(),                                                                                                                 //\n  defineMethod: function () {                                                                                          // 19\n    function securityDefineMethod(name, definition) {                                                                  // 19\n      // Check whether a rule with the given name already exists; can't overwrite                                      //\n      if (Security.Rule.prototype[name]) {                                                                             // 21\n        throw new Error('A security method with the name \"' + name + '\" has already been defined');                    // 22\n      }                                                                                                                //\n      if (!definition) throw new Error(Security.errorMessages.requiresDefinition);                                     // 24\n      // If \"deny\" is used, convert to \"allow\" for backwards compatibility                                             //\n      if (definition.deny) {                                                                                           // 19\n        definition.allow = function () {                                                                               // 27\n          return !definition.deny.apply(definition, arguments);                                                        // 28\n        };                                                                                                             //\n      }                                                                                                                //\n      // Make sure the definition argument is an object that has an `allow` property                                   //\n      if (!definition.allow) throw new Error(Security.errorMessages.requiresAllow);                                    // 19\n      // Wrap transform, if provided                                                                                   //\n      if (definition.transform) {                                                                                      // 19\n        definition.transform = LocalCollection.wrapTransform(definition.transform);                                    // 35\n      }                                                                                                                //\n      Security.Rule.prototype[name] = function (arg) {                                                                 // 37\n        this._restrictions.push({                                                                                      // 38\n          definition: definition,                                                                                      // 39\n          arg: arg                                                                                                     // 40\n        });                                                                                                            //\n        return this;                                                                                                   // 42\n      };                                                                                                               //\n    }                                                                                                                  //\n                                                                                                                       //\n    return securityDefineMethod;                                                                                       //\n  }()                                                                                                                  //\n};                                                                                                                     //\n                                                                                                                       //\nMongo.Collection.prototype.permit = function (types) {                                                                 // 47\n  return Security.permit(types).collections(this);                                                                     // 48\n};                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Security.Rule.js\":[\"babel-runtime/helpers/toConsumableArray\",\"babel-runtime/helpers/classCallCheck\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ongoworks_security/lib/server/Security.Rule.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');                                          //\n                                                                                                                       //\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);                                                 //\n                                                                                                                       //\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                      //\n                                                                                                                       //\nSecurity.Rule = function () {                                                                                          // 1\n  function _class(types) {                                                                                             // 2\n    (0, _classCallCheck3['default'])(this, _class);                                                                    //\n                                                                                                                       //\n    if (!_.isArray(types)) types = [types];                                                                            // 3\n    this._types = types;                                                                                               // 4\n    this._restrictions = [];                                                                                           // 5\n  }                                                                                                                    //\n                                                                                                                       //\n  _class.prototype.collections = function () {                                                                         //\n    function collections(_collections) {                                                                               //\n      var _this = this;                                                                                                //\n                                                                                                                       //\n      // Make sure the `collections` argument is either a `Mongo.Collection` instance or                               //\n      // an array of them. If it's a single collection, convert it to a one-item array.                                //\n      if (!_.isArray(_collections)) _collections = [_collections];                                                     // 11\n                                                                                                                       //\n      // Keep list keyed by collection name                                                                            //\n      _.each(_collections, function (collection) {                                                                     // 8\n        if (!(collection instanceof Mongo.Collection) &&                                                               // 15\n        // CollectionFS has underlying collection on `files` property                                                  //\n        !(collection.files instanceof Mongo.Collection)) {                                                             // 17\n          throw new Error(Security.errorMessages.collectionsArg);                                                      // 18\n        }                                                                                                              //\n        // CollectionFS has underlying collection on `files` property                                                  //\n        var collectionName = getCollectionName(collection);                                                            // 14\n        rulesByCollection[collectionName] = rulesByCollection[collectionName] || [];                                   // 22\n        rulesByCollection[collectionName].push(_this);                                                                 // 23\n      });                                                                                                              //\n                                                                                                                       //\n      this._collections = _collections;                                                                                // 26\n                                                                                                                       //\n      return this;                                                                                                     // 28\n    }                                                                                                                  //\n                                                                                                                       //\n    return collections;                                                                                                //\n  }();                                                                                                                 //\n                                                                                                                       //\n  _class.prototype.combinedFetch = function () {                                                                       //\n    function combinedFetch() {                                                                                         //\n      // We need a combined `fetch` array. The `fetch` is optional and can be either an array                          //\n      // or a function that takes the argument passed to the restriction method and returns an array.                  //\n      var fetch = [];                                                                                                  // 34\n      _.every(this._restrictions, function (restriction) {                                                             // 35\n        if (_.isArray(restriction.definition.fetch)) {                                                                 // 36\n          fetch = _.union(fetch, restriction.definition.fetch);                                                        // 37\n        } else if (typeof restriction.definition.fetch === \"function\") {                                               //\n          fetch = _.union(fetch, restriction.definition.fetch(restriction.arg));                                       // 39\n        } else if (!restriction.definition.hasOwnProperty('fetch')) {                                                  //\n          // If `fetch` property isn't present, we should fetch the full doc.                                          //\n          fetch = null;                                                                                                // 42\n          return false; // Exit loop                                                                                   // 43\n        }                                                                                                              // 40\n        return true;                                                                                                   // 45\n      });                                                                                                              //\n      return fetch;                                                                                                    // 47\n    }                                                                                                                  //\n                                                                                                                       //\n    return combinedFetch;                                                                                              //\n  }();                                                                                                                 //\n                                                                                                                       //\n  _class.prototype.allowInClientCode = function () {                                                                   //\n    function allowInClientCode() {                                                                                     //\n      if (!this._collections || !this._types) throw new Error(Security.errorMessages.noCollectionOrType);              // 51\n      ensureSecureDeny(this._collections, this._types);                                                                // 52\n    }                                                                                                                  //\n                                                                                                                       //\n    return allowInClientCode;                                                                                          //\n  }();                                                                                                                 //\n                                                                                                                       //\n  _class.prototype.allow = function () {                                                                               //\n    function allow(type, collection, userId, doc, modifier) {                                                          //\n      for (var _len = arguments.length, args = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {        //\n        args[_key - 5] = arguments[_key];                                                                              //\n      }                                                                                                                //\n                                                                                                                       //\n      var fields = void 0;                                                                                             // 56\n      if (type === 'update') fields = computeChangedFieldsFromModifier(modifier);                                      // 57\n                                                                                                                       //\n      // Loop through all defined restrictions. Restrictions are additive for this chained                             //\n      // rule, so if any allow function returns false, this function should return false.                              //\n      return _.every(this._restrictions, function (restriction) {                                                      // 55\n        var _restriction$definiti;                                                                                     //\n                                                                                                                       //\n        // Clone the doc in case we need to transform it. Transformations                                              //\n        // should apply to only the one restriction.                                                                   //\n        var loopDoc = _.clone(doc);                                                                                    // 64\n                                                                                                                       //\n        // If transform is a function, apply that                                                                      //\n        var transform = restriction.definition.transform;                                                              // 61\n        if (transform !== null) {                                                                                      // 68\n          transform = transform || collection._transform;                                                              // 69\n          if (typeof transform === 'function') {                                                                       // 70\n            var addedRandomId = false;                                                                                 // 71\n            if (type === 'insert' && !loopDoc._id) {                                                                   // 72\n              // The wrapped transform requires an _id, but we                                                         //\n              // don't have access to the generatedId from Meteor API,                                                 //\n              // so we'll fudge one and then remove it.                                                                //\n              loopDoc._id = Random.id();                                                                               // 76\n              addedRandomId = true;                                                                                    // 77\n            }                                                                                                          //\n            loopDoc = transform(loopDoc);                                                                              // 79\n            if (addedRandomId) delete loopDoc._id;                                                                     // 80\n          }                                                                                                            //\n        }                                                                                                              //\n                                                                                                                       //\n        return (_restriction$definiti = restriction.definition).allow.apply(_restriction$definiti, [type, restriction.arg, userId, loopDoc, fields, modifier].concat(args));\n      });                                                                                                              //\n    }                                                                                                                  //\n                                                                                                                       //\n    return allow;                                                                                                      //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return _class;                                                                                                       //\n}();                                                                                                                   //\n                                                                                                                       //\nfunction ensureSecureDeny(collections, types) {                                                                        // 89\n  // If we haven't yet done so, set up a default, permissive `allow` function for all of                               //\n  // the given collections and types. We control all security through `deny` functions only, but                       //\n  // there must first be at least one `allow` function for each collection or all writes                               //\n  // will be denied.                                                                                                   //\n  ensureDefaultAllow(collections, types);                                                                              // 94\n                                                                                                                       //\n  _.each(types, function (t) {                                                                                         // 96\n    _.each(collections, function (collection) {                                                                        // 97\n      ensureCreated('deny', [collection], [t], null, function () {                                                     // 98\n        var _Security$can;                                                                                             //\n                                                                                                                       //\n        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {                   //\n          args[_key2] = arguments[_key2];                                                                              //\n        }                                                                                                              //\n                                                                                                                       //\n        var userId = args.shift();                                                                                     // 99\n                                                                                                                       //\n        // If type is update, remove the `fields` argument. We will create our own                                     //\n        // for consistency.                                                                                            //\n        if (t === 'update') args = [args[0], args[2]];                                                                 // 98\n                                                                                                                       //\n        return !(_Security$can = Security.can(userId))[t].apply(_Security$can, (0, _toConsumableArray3['default'])(args))['for'](collection).check();\n      });                                                                                                              //\n    });                                                                                                                //\n  });                                                                                                                  //\n}                                                                                                                      //\n                                                                                                                       //\nfunction computeChangedFieldsFromModifier(modifier) {                                                                  // 111\n  var fields = [];                                                                                                     // 112\n  // This is the same logic Meteor's mongo package uses in                                                             //\n  // https://github.com/meteor/meteor/blob/devel/packages/mongo/collection.js                                          //\n  _.each(modifier, function (params) {                                                                                 // 111\n    _.each(_.keys(params), function (field) {                                                                          // 116\n      // treat dotted fields as if they are replacing their                                                            //\n      // top-level part                                                                                                //\n      if (field.indexOf('.') !== -1) field = field.substring(0, field.indexOf('.'));                                   // 119\n                                                                                                                       //\n      // record the field we are trying to change                                                                      //\n      if (!_.contains(fields, field)) fields.push(field);                                                              // 116\n    });                                                                                                                //\n  });                                                                                                                  //\n  return fields;                                                                                                       // 127\n}                                                                                                                      //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"Security.Check.js\":[\"babel-runtime/helpers/toConsumableArray\",\"babel-runtime/helpers/classCallCheck\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ongoworks_security/lib/server/Security.Check.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');                                          //\n                                                                                                                       //\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);                                                 //\n                                                                                                                       //\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                      //\n                                                                                                                       //\nSecurity.Check = function () {                                                                                         // 1\n  function _class(userId) {                                                                                            // 2\n    (0, _classCallCheck3['default'])(this, _class);                                                                    //\n                                                                                                                       //\n    this.userId = userId || null;                                                                                      // 3\n  }                                                                                                                    //\n                                                                                                                       //\n  _class.prototype['for'] = function () {                                                                              //\n    function _for(collection) {                                                                                        //\n      this.collection = collection;                                                                                    // 7\n      this.collectionName = getCollectionName(collection);                                                             // 8\n      return this;                                                                                                     // 9\n    }                                                                                                                  //\n                                                                                                                       //\n    return _for;                                                                                                       //\n  }();                                                                                                                 //\n                                                                                                                       //\n  _class.prototype.insert = function () {                                                                              //\n    function insert(doc) {                                                                                             //\n      if (this.type) throw new Error(Security.errorMessages.multipleCan);                                              // 13\n      this.type = 'insert';                                                                                            // 14\n      this.doc = doc;                                                                                                  // 15\n                                                                                                                       //\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {        //\n        args[_key - 1] = arguments[_key];                                                                              //\n      }                                                                                                                //\n                                                                                                                       //\n      this.args = args;                                                                                                // 16\n      return this;                                                                                                     // 17\n    }                                                                                                                  //\n                                                                                                                       //\n    return insert;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  _class.prototype.update = function () {                                                                              //\n    function update(doc, modifier) {                                                                                   //\n      if (this.type) throw new Error(Security.errorMessages.multipleCan);                                              // 21\n      this.type = 'update';                                                                                            // 22\n      this.doc = doc;                                                                                                  // 23\n      this.modifier = modifier;                                                                                        // 24\n                                                                                                                       //\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];                                                                            //\n      }                                                                                                                //\n                                                                                                                       //\n      this.args = args;                                                                                                // 25\n      return this;                                                                                                     // 26\n    }                                                                                                                  //\n                                                                                                                       //\n    return update;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  _class.prototype.remove = function () {                                                                              //\n    function remove(doc) {                                                                                             //\n      if (this.type) throw new Error(Security.errorMessages.multipleCan);                                              // 30\n      this.type = 'remove';                                                                                            // 31\n      this.doc = doc;                                                                                                  // 32\n                                                                                                                       //\n      for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        args[_key3 - 1] = arguments[_key3];                                                                            //\n      }                                                                                                                //\n                                                                                                                       //\n      this.args = args;                                                                                                // 33\n      return this;                                                                                                     // 34\n    }                                                                                                                  //\n                                                                                                                       //\n    return remove;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  _class.prototype.read = function () {                                                                                //\n    function read(doc) {                                                                                               //\n      if (this.type) throw new Error(Security.errorMessages.multipleCan);                                              // 38\n      this.type = 'read';                                                                                              // 39\n      this.doc = doc;                                                                                                  // 40\n                                                                                                                       //\n      for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        args[_key4 - 1] = arguments[_key4];                                                                            //\n      }                                                                                                                //\n                                                                                                                       //\n      this.args = args;                                                                                                // 41\n      return this;                                                                                                     // 42\n    }                                                                                                                  //\n                                                                                                                       //\n    return read;                                                                                                       //\n  }();                                                                                                                 //\n                                                                                                                       //\n  // EXAMPLES:                                                                                                         //\n  // Security.can(userId).insert(doc).for(MyCollection).check()                                                        //\n  // Security.can(userId).update(id, modifier).for(MyCollection).check()                                               //\n  // Security.can(userId).remove(id).for(MyCollection).check()                                                         //\n                                                                                                                       //\n                                                                                                                       //\n  _class.prototype.check = function () {                                                                               //\n    function check() {                                                                                                 //\n      var _this = this;                                                                                                //\n                                                                                                                       //\n      // Select only those rules that apply to this operation type                                                     //\n      var rules = getRulesForCollectionAndType(this.collectionName, this.type);                                        // 51\n                                                                                                                       //\n      // If this.doc is an ID, we will look up the doc, fetching only the fields needed.                               //\n      // To find out which fields are needed, we will combine all the `fetch` arrays from                              //\n      // all the restrictions in all the rules.                                                                        //\n      if (typeof this.doc === 'string' || this.doc instanceof MongoID.ObjectID) {                                      // 49\n        (function () {                                                                                                 //\n          var fields = {};                                                                                             // 57\n          _.every(rules, function (rule) {                                                                             // 58\n            var fetch = rule.combinedFetch();                                                                          // 59\n            if (fetch === null) {                                                                                      // 60\n              fields = null;                                                                                           // 61\n              return false; // Exit loop                                                                               // 62\n            }                                                                                                          // 60\n            rule.combinedFetch().forEach(function (field) {                                                            // 64\n              fields[field] = 1;                                                                                       // 65\n            });                                                                                                        //\n            return true;                                                                                               // 67\n          });                                                                                                          //\n                                                                                                                       //\n          var options = {};                                                                                            // 70\n          if (fields) {                                                                                                // 71\n            if (_.isEmpty(fields)) {                                                                                   // 72\n              options = { _id: 1 };                                                                                    // 73\n            } else {                                                                                                   //\n              options = { fields: fields };                                                                            // 75\n            }                                                                                                          //\n          }                                                                                                            //\n          _this.doc = _this.collection.findOne(_this.doc, options);                                                    // 78\n        })();                                                                                                          //\n      }                                                                                                                //\n                                                                                                                       //\n      // Loop through all defined rules for this collection. There is an OR relationship among                         //\n      // all rules for the collection, so if any \"allow\" function DO return true, we allow.                            //\n      return _.any(rules, function (rule) {                                                                            // 49\n        return rule.allow.apply(rule, [_this.type, _this.collection, _this.userId, _this.doc, _this.modifier].concat((0, _toConsumableArray3['default'])(_this.args)));\n      });                                                                                                              //\n    }                                                                                                                  //\n                                                                                                                       //\n    return check;                                                                                                      //\n  }();                                                                                                                 //\n                                                                                                                       //\n  // EXAMPLES:                                                                                                         //\n  // Security.can(userId).insert(doc).for(MyCollection).throw()                                                        //\n  // Security.can(userId).update(id, modifier).for(MyCollection).throw()                                               //\n  // Security.can(userId).remove(id).for(MyCollection).throw()                                                         //\n                                                                                                                       //\n                                                                                                                       //\n  _class.prototype['throw'] = function () {                                                                            //\n    function _throw() {                                                                                                //\n      if (!this.check()) throw new Meteor.Error('access-denied', Security.errorMessages.notAllowed);                   // 91\n    }                                                                                                                  //\n                                                                                                                       //\n    return _throw;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return _class;                                                                                                       //\n}();                                                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"builtInRules.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ongoworks_security/lib/builtInRules.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     //\n * This file defines built-in restriction methods                                                                      //\n */                                                                                                                    //\n                                                                                                                       //\n/*                                                                                                                     //\n * No one                                                                                                              //\n */                                                                                                                    //\n                                                                                                                       //\nSecurity.defineMethod(\"never\", {                                                                                       // 9\n  fetch: [],                                                                                                           // 10\n  transform: null,                                                                                                     // 11\n  allow: function () {                                                                                                 // 12\n    function allow() {                                                                                                 //\n      return false;                                                                                                    // 13\n    }                                                                                                                  //\n                                                                                                                       //\n    return allow;                                                                                                      //\n  }()                                                                                                                  //\n});                                                                                                                    //\n                                                                                                                       //\n/*                                                                                                                     //\n * Logged In                                                                                                           //\n */                                                                                                                    //\n                                                                                                                       //\nSecurity.defineMethod(\"ifLoggedIn\", {                                                                                  // 21\n  fetch: [],                                                                                                           // 22\n  transform: null,                                                                                                     // 23\n  allow: function () {                                                                                                 // 24\n    function allow(type, arg, userId) {                                                                                //\n      return !!userId;                                                                                                 // 25\n    }                                                                                                                  //\n                                                                                                                       //\n    return allow;                                                                                                      //\n  }()                                                                                                                  //\n});                                                                                                                    //\n                                                                                                                       //\n/*                                                                                                                     //\n * Specific User ID                                                                                                    //\n */                                                                                                                    //\n                                                                                                                       //\nSecurity.defineMethod(\"ifHasUserId\", {                                                                                 // 33\n  fetch: [],                                                                                                           // 34\n  transform: null,                                                                                                     // 35\n  allow: function () {                                                                                                 // 36\n    function allow(type, arg, userId) {                                                                                //\n      return userId === arg;                                                                                           // 37\n    }                                                                                                                  //\n                                                                                                                       //\n    return allow;                                                                                                      //\n  }()                                                                                                                  //\n});                                                                                                                    //\n                                                                                                                       //\n/*                                                                                                                     //\n * Specific Roles                                                                                                      //\n */                                                                                                                    //\n                                                                                                                       //\n/*                                                                                                                     //\n * alanning:roles support                                                                                              //\n */                                                                                                                    //\nif (Package && Package[\"alanning:roles\"]) {                                                                            // 48\n                                                                                                                       //\n  var Roles = Package[\"alanning:roles\"].Roles;                                                                         // 50\n                                                                                                                       //\n  Security.defineMethod(\"ifHasRole\", {                                                                                 // 52\n    fetch: [],                                                                                                         // 53\n    transform: null,                                                                                                   // 54\n    allow: function () {                                                                                               // 55\n      function allow(type, arg, userId) {                                                                              //\n        if (!arg) throw new Error('ifHasRole security rule method requires an argument');                              // 56\n        if (arg.role) {                                                                                                // 57\n          return Roles.userIsInRole(userId, arg.role, arg.group);                                                      // 58\n        } else {                                                                                                       //\n          return Roles.userIsInRole(userId, arg);                                                                      // 60\n        }                                                                                                              //\n      }                                                                                                                //\n                                                                                                                       //\n      return allow;                                                                                                    //\n    }()                                                                                                                //\n  });                                                                                                                  //\n}                                                                                                                      //\n                                                                                                                       //\n/*                                                                                                                     //\n * nicolaslopezj:roles support                                                                                         //\n * Note: doesn't support groups                                                                                        //\n */                                                                                                                    //\nif (Package && Package[\"nicolaslopezj:roles\"]) {                                                                       // 71\n                                                                                                                       //\n  var Roles = Package[\"nicolaslopezj:roles\"].Roles;                                                                    // 73\n                                                                                                                       //\n  Security.defineMethod(\"ifHasRole\", {                                                                                 // 75\n    fetch: [],                                                                                                         // 76\n    transform: null,                                                                                                   // 77\n    allow: function () {                                                                                               // 78\n      function allow(type, arg, userId) {                                                                              //\n        if (!arg) throw new Error('ifHasRole security rule method requires an argument');                              // 79\n        return Roles.userHasRole(userId, arg);                                                                         // 80\n      }                                                                                                                //\n                                                                                                                       //\n      return allow;                                                                                                    //\n    }()                                                                                                                //\n  });                                                                                                                  //\n}                                                                                                                      //\n                                                                                                                       //\n/*                                                                                                                     //\n * Specific Properties                                                                                                 //\n */                                                                                                                    //\n                                                                                                                       //\nSecurity.defineMethod(\"onlyProps\", {                                                                                   // 90\n  fetch: [],                                                                                                           // 91\n  transform: null,                                                                                                     // 92\n  allow: function () {                                                                                                 // 93\n    function allow(type, arg, userId, doc, fieldNames) {                                                               //\n      if (!_.isArray(arg)) arg = [arg];                                                                                // 94\n                                                                                                                       //\n      fieldNames = fieldNames || _.keys(doc);                                                                          // 96\n                                                                                                                       //\n      return _.every(fieldNames, function (fieldName) {                                                                // 98\n        return _.contains(arg, fieldName);                                                                             // 99\n      });                                                                                                              //\n    }                                                                                                                  //\n                                                                                                                       //\n    return allow;                                                                                                      //\n  }()                                                                                                                  //\n});                                                                                                                    //\n                                                                                                                       //\nSecurity.defineMethod(\"exceptProps\", {                                                                                 // 104\n  fetch: [],                                                                                                           // 105\n  transform: null,                                                                                                     // 106\n  allow: function () {                                                                                                 // 107\n    function allow(type, arg, userId, doc, fieldNames) {                                                               //\n      if (!_.isArray(arg)) arg = [arg];                                                                                // 108\n                                                                                                                       //\n      fieldNames = fieldNames || _.keys(doc);                                                                          // 110\n                                                                                                                       //\n      return !_.any(fieldNames, function (fieldName) {                                                                 // 112\n        return _.contains(arg, fieldName);                                                                             // 113\n      });                                                                                                              //\n    }                                                                                                                  //\n                                                                                                                       //\n    return allow;                                                                                                      //\n  }()                                                                                                                  //\n});                                                                                                                    //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/ongoworks:security/lib/server/utility.js\");\nrequire(\"./node_modules/meteor/ongoworks:security/lib/server/Security.js\");\nrequire(\"./node_modules/meteor/ongoworks:security/lib/server/Security.Rule.js\");\nrequire(\"./node_modules/meteor/ongoworks:security/lib/server/Security.Check.js\");\nrequire(\"./node_modules/meteor/ongoworks:security/lib/builtInRules.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['ongoworks:security'] = {}, {\n  Security: Security\n});\n\n})();\n","servePath":"/packages/ongoworks_security.js","sourceMap":{"version":3,"sources":["/packages/ongoworks:security/lib/server/utility.js","/packages/ongoworks:security/lib/server/Security.js","/packages/ongoworks:security/lib/server/Security.Rule.js","/packages/ongoworks:security/lib/server/Security.Check.js","/packages/ongoworks:security/lib/builtInRules.js"],"names":[],"mappings":"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","file":"/packages/ongoworks_security.js","sourcesContent":["/* global _, rulesByCollection:true, addFuncForAll:true, ensureCreated:true, ensureDefaultAllow:true */\n\nrulesByCollection = {};\n\nvar created = {\n  allow: {\n    insert: {},\n    update: {},\n    remove: {},\n    download: {} // for use with CollectionFS packages\n  },\n  deny: {\n    insert: {},\n    update: {},\n    remove: {},\n    download: {} // for use with CollectionFS packages\n  }\n};\n\n/**\n * Adds the given function as an allow or deny function for all specified collections and types.\n * @param {Array(Mongo.Collection)} collections Array of Mongo.Collection instances\n * @param {String}                  allowOrDeny \"allow\" or \"deny\"\n * @param {Array(String)}           types       Array of types (\"insert\", \"update\", \"remove\")\n * @param {Array(String)|null}      fetch       `fetch` property to use\n * @param {Function}                func        The function\n */\naddFuncForAll = function addFuncForAll(collections, allowOrDeny, types, fetch, func) {\n  // We always disable transformation, but we transform for specific\n  // rules upon running our deny function if requested.\n  var rules = {transform: null};\n  if (_.isArray(fetch)) {\n    rules.fetch = fetch;\n  }\n  _.each(types, function (t) {\n    rules[t] = func;\n  });\n  _.each(collections, function (c) {\n    c[allowOrDeny](rules);\n  });\n};\n\n/**\n * Creates the allow or deny function for the given collections if not already created. This ensures that this package only ever creates up to one allow and one deny per collection.\n * @param   {String}                  allowOrDeny \"allow\" or \"deny\"\n * @param   {Array(Mongo.Collection)} collections An array of collections\n * @param   {Array(String)}           types       An array of types (\"insert\", \"update\", \"remove\")\n * @param   {Array(String)|null}      fetch       `fetch` property to use\n * @param   {Function}                func        The function\n */\nensureCreated = function ensureCreated(allowOrDeny, collections, types, fetch, func) {\n  _.each(types, t => {\n    // Ignore \"read\"\n    if (!_.contains(['insert', 'update', 'remove', 'download'], t)) return;\n\n    collections = _.reject(collections, c => {\n      return _.has(created[allowOrDeny][t], getCollectionName(c));\n    });\n    addFuncForAll(collections, allowOrDeny, [t], null, func);\n    // mark that we've defined function for collection-type combo\n    _.each(collections, c => {\n      created[allowOrDeny][t][getCollectionName(c)] = true;\n    });\n  });\n};\n\n/**\n * Sets up default allow functions for the collections and types.\n * @param   {Array(Mongo.Collection)} collections Array of Mongo.Collection instances\n * @param   {Array(String)}           types       Array of types (\"insert\", \"update\", \"remove\")\n */\nensureDefaultAllow = function ensureDefaultAllow(collections, types) {\n  ensureCreated(\"allow\", collections, types, [], function () {\n    return true;\n  });\n};\n\n/**\n * Return only those rules that apply to the given collection and operation type\n */\ngetRulesForCollectionAndType = function getRulesForCollectionAndType(collectionName, type) {\n  var rules = rulesByCollection[collectionName] || [];\n  return _.select(rules, function (rule) {\n    return _.contains(rule._types, type);\n  });\n};\n\ngetCollectionName = function getCollectionName(collection) {\n  // CollectionFS has underlying collection on `files` property\n  return collection._name || (collection.files && collection.files._name);\n};\n","// The `Security` object is exported and provides the package API\nSecurity = {\n  // Putting these on the exported object allows package users to override if necessary\n  errorMessages: {\n    multipleCan: 'You may not combine more than one insert, update, or remove on a Security.can chain',\n    notAllowed: 'Action not allowed',\n    requiresDefinition: 'Security.defineMethod requires a \"definition\" argument',\n    requiresAllow: 'Security.defineMethod requires an \"allow\" function',\n    collectionsArg: 'The collections argument must be a Mongo.Collection instance or an array of them',\n    noCollectionOrType: 'At a minimum, you must call permit and collections methods for a security rule.',\n  },\n  // the starting point of the chain\n  permit: function permit(types) {\n    return new Security.Rule(types);\n  },\n  can: function can(userId) {\n    return new Security.Check(userId);\n  },\n  defineMethod: function securityDefineMethod(name, definition) {\n    // Check whether a rule with the given name already exists; can't overwrite\n    if (Security.Rule.prototype[name]) {\n      throw new Error('A security method with the name \"' + name + '\" has already been defined');\n    }\n    if (!definition) throw new Error(Security.errorMessages.requiresDefinition);\n    // If \"deny\" is used, convert to \"allow\" for backwards compatibility\n    if (definition.deny) {\n      definition.allow = (...args) => {\n        return !definition.deny(...args);\n      };\n    }\n    // Make sure the definition argument is an object that has an `allow` property\n    if (!definition.allow) throw new Error(Security.errorMessages.requiresAllow);\n    // Wrap transform, if provided\n    if (definition.transform) {\n      definition.transform = LocalCollection.wrapTransform(definition.transform);\n    }\n    Security.Rule.prototype[name] = function (arg) {\n      this._restrictions.push({\n        definition,\n        arg,\n      });\n      return this;\n    };\n  }\n};\n\nMongo.Collection.prototype.permit = function (types) {\n  return Security.permit(types).collections(this);\n};\n","Security.Rule = class {\n  constructor(types) {\n    if (!_.isArray(types)) types = [types];\n    this._types = types;\n    this._restrictions = [];\n  }\n\n  collections(collections) {\n    // Make sure the `collections` argument is either a `Mongo.Collection` instance or\n    // an array of them. If it's a single collection, convert it to a one-item array.\n    if (!_.isArray(collections)) collections = [collections];\n\n    // Keep list keyed by collection name\n    _.each(collections, collection => {\n      if (!(collection instanceof Mongo.Collection) &&\n          // CollectionFS has underlying collection on `files` property\n        !(collection.files instanceof Mongo.Collection)) {\n        throw new Error(Security.errorMessages.collectionsArg);\n      }\n      // CollectionFS has underlying collection on `files` property\n      const collectionName = getCollectionName(collection);\n      rulesByCollection[collectionName] = rulesByCollection[collectionName] || [];\n      rulesByCollection[collectionName].push(this);\n    });\n\n    this._collections = collections;\n\n    return this;\n  }\n\n  combinedFetch() {\n    // We need a combined `fetch` array. The `fetch` is optional and can be either an array\n    // or a function that takes the argument passed to the restriction method and returns an array.\n    let fetch = [];\n    _.every(this._restrictions, restriction => {\n      if (_.isArray(restriction.definition.fetch)) {\n        fetch = _.union(fetch, restriction.definition.fetch);\n      } else if (typeof restriction.definition.fetch === \"function\") {\n        fetch = _.union(fetch, restriction.definition.fetch(restriction.arg));\n      } else if (!restriction.definition.hasOwnProperty('fetch')) {\n        // If `fetch` property isn't present, we should fetch the full doc.\n        fetch = null;\n        return false; // Exit loop\n      }\n      return true;\n    });\n    return fetch;\n  }\n\n  allowInClientCode() {\n    if (!this._collections || !this._types) throw new Error(Security.errorMessages.noCollectionOrType);\n    ensureSecureDeny(this._collections, this._types);\n  }\n\n  allow(type, collection, userId, doc, modifier, ...args) {\n    let fields;\n    if (type === 'update') fields = computeChangedFieldsFromModifier(modifier);\n\n    // Loop through all defined restrictions. Restrictions are additive for this chained\n    // rule, so if any allow function returns false, this function should return false.\n    return _.every(this._restrictions, restriction => {\n      // Clone the doc in case we need to transform it. Transformations\n      // should apply to only the one restriction.\n      let loopDoc = _.clone(doc);\n\n      // If transform is a function, apply that\n      let transform = restriction.definition.transform;\n      if (transform !== null) {\n        transform = transform || collection._transform;\n        if (typeof transform === 'function') {\n          let addedRandomId = false;\n          if (type === 'insert' && !loopDoc._id) {\n            // The wrapped transform requires an _id, but we\n            // don't have access to the generatedId from Meteor API,\n            // so we'll fudge one and then remove it.\n            loopDoc._id = Random.id();\n            addedRandomId = true;\n          }\n          loopDoc = transform(loopDoc);\n          if (addedRandomId) delete loopDoc._id;\n        }\n      }\n\n      return restriction.definition.allow(type, restriction.arg, userId, loopDoc, fields, modifier, ...args);\n    });\n  }\n}\n\nfunction ensureSecureDeny(collections, types) {\n  // If we haven't yet done so, set up a default, permissive `allow` function for all of\n  // the given collections and types. We control all security through `deny` functions only, but\n  // there must first be at least one `allow` function for each collection or all writes\n  // will be denied.\n  ensureDefaultAllow(collections, types);\n\n  _.each(types, t => {\n    _.each(collections, collection => {\n      ensureCreated('deny', [collection], [t], null, function (...args) {\n        const userId = args.shift();\n\n        // If type is update, remove the `fields` argument. We will create our own\n        // for consistency.\n        if (t === 'update') args = [args[0], args[2]];\n\n        return !Security.can(userId)[t](...args).for(collection).check();\n      });\n    });\n  });\n}\n\nfunction computeChangedFieldsFromModifier(modifier) {\n  var fields = [];\n  // This is the same logic Meteor's mongo package uses in\n  // https://github.com/meteor/meteor/blob/devel/packages/mongo/collection.js\n  _.each(modifier, function (params) {\n    _.each(_.keys(params), function (field) {\n      // treat dotted fields as if they are replacing their\n      // top-level part\n      if (field.indexOf('.') !== -1)\n        field = field.substring(0, field.indexOf('.'));\n\n      // record the field we are trying to change\n      if (!_.contains(fields, field))\n        fields.push(field);\n    });\n  });\n  return fields;\n}\n","Security.Check = class {\n  constructor(userId) {\n    this.userId = userId || null;\n  }\n\n  for(collection) {\n    this.collection = collection;\n    this.collectionName = getCollectionName(collection);\n    return this;\n  }\n\n  insert(doc, ...args) {\n    if (this.type) throw new Error(Security.errorMessages.multipleCan);\n    this.type = 'insert';\n    this.doc = doc;\n    this.args = args;\n    return this;\n  }\n\n  update(doc, modifier, ...args) {\n    if (this.type) throw new Error(Security.errorMessages.multipleCan);\n    this.type = 'update';\n    this.doc = doc;\n    this.modifier = modifier;\n    this.args = args;\n    return this;\n  }\n\n  remove(doc, ...args) {\n    if (this.type) throw new Error(Security.errorMessages.multipleCan);\n    this.type = 'remove';\n    this.doc = doc;\n    this.args = args;\n    return this;\n  }\n\n  read(doc, ...args) {\n    if (this.type) throw new Error(Security.errorMessages.multipleCan);\n    this.type = 'read';\n    this.doc = doc;\n    this.args = args;\n    return this;\n  }\n\n  // EXAMPLES:\n  // Security.can(userId).insert(doc).for(MyCollection).check()\n  // Security.can(userId).update(id, modifier).for(MyCollection).check()\n  // Security.can(userId).remove(id).for(MyCollection).check()\n  check() {\n    // Select only those rules that apply to this operation type\n    const rules = getRulesForCollectionAndType(this.collectionName, this.type);\n\n    // If this.doc is an ID, we will look up the doc, fetching only the fields needed.\n    // To find out which fields are needed, we will combine all the `fetch` arrays from\n    // all the restrictions in all the rules.\n    if (typeof this.doc === 'string' || this.doc instanceof MongoID.ObjectID) {\n      let fields = {};\n      _.every(rules, rule => {\n        const fetch = rule.combinedFetch();\n        if (fetch === null) {\n          fields = null;\n          return false; // Exit loop\n        }\n        rule.combinedFetch().forEach(field => {\n          fields[field] = 1;\n        });\n        return true;\n      });\n\n      let options = {};\n      if (fields) {\n        if (_.isEmpty(fields)) {\n          options = {_id: 1};\n        } else {\n          options = {fields};\n        }\n      }\n      this.doc = this.collection.findOne(this.doc, options);\n    }\n\n    // Loop through all defined rules for this collection. There is an OR relationship among\n    // all rules for the collection, so if any \"allow\" function DO return true, we allow.\n    return _.any(rules, rule => rule.allow(this.type, this.collection, this.userId, this.doc, this.modifier, ...this.args));\n  }\n\n  // EXAMPLES:\n  // Security.can(userId).insert(doc).for(MyCollection).throw()\n  // Security.can(userId).update(id, modifier).for(MyCollection).throw()\n  // Security.can(userId).remove(id).for(MyCollection).throw()\n  throw() {\n    if (!this.check()) throw new Meteor.Error('access-denied', Security.errorMessages.notAllowed);\n  }\n}\n","/*\n * This file defines built-in restriction methods\n */\n\n/*\n * No one\n */\n\nSecurity.defineMethod(\"never\", {\n  fetch: [],\n  transform: null,\n  allow() {\n    return false;\n  },\n});\n\n/*\n * Logged In\n */\n\nSecurity.defineMethod(\"ifLoggedIn\", {\n  fetch: [],\n  transform: null,\n  allow(type, arg, userId) {\n    return !!userId;\n  },\n});\n\n/*\n * Specific User ID\n */\n\nSecurity.defineMethod(\"ifHasUserId\", {\n  fetch: [],\n  transform: null,\n  allow(type, arg, userId) {\n    return userId === arg;\n  },\n});\n\n/*\n * Specific Roles\n */\n\n/*\n * alanning:roles support\n */\nif (Package && Package[\"alanning:roles\"]) {\n\n  var Roles = Package[\"alanning:roles\"].Roles;\n\n  Security.defineMethod(\"ifHasRole\", {\n    fetch: [],\n    transform: null,\n    allow(type, arg, userId) {\n      if (!arg) throw new Error('ifHasRole security rule method requires an argument');\n      if (arg.role) {\n        return Roles.userIsInRole(userId, arg.role, arg.group);\n      } else {\n        return Roles.userIsInRole(userId, arg);\n      }\n    },\n  });\n\n}\n\n/*\n * nicolaslopezj:roles support\n * Note: doesn't support groups\n */\nif (Package && Package[\"nicolaslopezj:roles\"]) {\n\n  var Roles = Package[\"nicolaslopezj:roles\"].Roles;\n\n  Security.defineMethod(\"ifHasRole\", {\n    fetch: [],\n    transform: null,\n    allow(type, arg, userId) {\n      if (!arg) throw new Error('ifHasRole security rule method requires an argument');\n      return Roles.userHasRole(userId, arg);\n    }\n  });\n\n}\n\n/*\n * Specific Properties\n */\n\nSecurity.defineMethod(\"onlyProps\", {\n  fetch: [],\n  transform: null,\n  allow(type, arg, userId, doc, fieldNames) {\n    if (!_.isArray(arg)) arg = [arg];\n\n    fieldNames = fieldNames || _.keys(doc);\n\n    return _.every(fieldNames, function (fieldName) {\n      return _.contains(arg, fieldName);\n    });\n  },\n});\n\nSecurity.defineMethod(\"exceptProps\", {\n  fetch: [],\n  transform: null,\n  allow(type, arg, userId, doc, fieldNames) {\n    if (!_.isArray(arg)) arg = [arg];\n\n    fieldNames = fieldNames || _.keys(doc);\n\n    return !_.any(fieldNames, function (fieldName) {\n      return _.contains(arg, fieldName);\n    });\n  },\n});\n"]}}]