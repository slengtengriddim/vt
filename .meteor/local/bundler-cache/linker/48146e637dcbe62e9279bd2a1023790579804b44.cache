[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar Mongo = Package.mongo.Mongo;\n\n/* Package-scope variables */\nvar ReactiveAggregate;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// packages/jcbernack_reactive-aggregate/aggregate.js                                       //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\nReactiveAggregate = function (sub, collection, pipeline, options) {                         // 1\n  var defaultOptions = {                                                                    // 2\n    observeSelector: {},                                                                    // 3\n    clientCollection: collection._name                                                      // 4\n  };                                                                                        // 5\n  options = _.extend(defaultOptions, options);                                              // 6\n                                                                                            // 7\n  var initializing = true;                                                                  // 8\n  sub._ids = {};                                                                            // 9\n  sub._iteration = 1;                                                                       // 10\n                                                                                            // 11\n  function update() {                                                                       // 12\n    if (initializing) return;                                                               // 13\n    // add and update documents on the client                                               // 14\n    collection.aggregate(pipeline).forEach(function (doc) {                                 // 15\n      if (!sub._ids[doc._id]) {                                                             // 16\n        sub.added(options.clientCollection, doc._id, doc);                                  // 17\n      } else {                                                                              // 18\n        sub.changed(options.clientCollection, doc._id, doc);                                // 19\n      }                                                                                     // 20\n      sub._ids[doc._id] = sub._iteration;                                                   // 21\n    });                                                                                     // 22\n    // remove documents not in the result anymore                                           // 23\n    _.forEach(sub._ids, function (v, k) {                                                   // 24\n      if (v != sub._iteration) {                                                            // 25\n        delete sub._ids[k];                                                                 // 26\n        sub.removed(options.clientCollection, k);                                           // 27\n      }                                                                                     // 28\n    });                                                                                     // 29\n    sub._iteration++;                                                                       // 30\n  }                                                                                         // 31\n                                                                                            // 32\n  // track any changes on the collection used for the aggregation                           // 33\n  var query = collection.find(options.observeSelector);                                     // 34\n  var handle = query.observeChanges({                                                       // 35\n    added: update,                                                                          // 36\n    changed: update,                                                                        // 37\n    removed: update,                                                                        // 38\n    error: function (err) {                                                                 // 39\n      throw err;                                                                            // 40\n    }                                                                                       // 41\n  });                                                                                       // 42\n  // observeChanges() will immediately fire an \"added\" event for each document in the query\n  // these are skipped using the initializing flag                                          // 44\n  initializing = false;                                                                     // 45\n  // send an initial result set to the client                                               // 46\n  update();                                                                                 // 47\n  // mark the subscription as ready                                                         // 48\n  sub.ready();                                                                              // 49\n                                                                                            // 50\n  // stop observing the cursor when the client unsubscribes                                 // 51\n  sub.onStop(function () {                                                                  // 52\n    handle.stop();                                                                          // 53\n  });                                                                                       // 54\n};                                                                                          // 55\n                                                                                            // 56\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['jcbernack:reactive-aggregate'] = {}, {\n  ReactiveAggregate: ReactiveAggregate\n});\n\n})();\n","servePath":"/packages/jcbernack_reactive-aggregate.js"}]