[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\n\n/* Package-scope variables */\nvar ReactiveAggregate;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// packages/jcbernack_reactive-aggregate/aggregate.js                                       //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\nReactiveAggregate = function (sub, collection, pipeline, options) {\n  var defaultOptions = {\n    observeSelector: {},\n    clientCollection: collection._name\n  };\n  options = _.extend(defaultOptions, options);\n\n  var initializing = true;\n  sub._ids = {};\n  sub._iteration = 1;\n\n  function update() {\n    if (initializing) return;\n    // add and update documents on the client\n    collection.aggregate(pipeline).forEach(function (doc) {\n      if (!sub._ids[doc._id]) {\n        sub.added(options.clientCollection, doc._id, doc);\n      } else {\n        sub.changed(options.clientCollection, doc._id, doc);\n      }\n      sub._ids[doc._id] = sub._iteration;\n    });\n    // remove documents not in the result anymore\n    _.forEach(sub._ids, function (v, k) {\n      if (v != sub._iteration) {\n        delete sub._ids[k];\n        sub.removed(options.clientCollection, k);\n      }\n    });\n    sub._iteration++;\n  }\n\n  // track any changes on the collection used for the aggregation\n  var query = collection.find(options.observeSelector);\n  var handle = query.observeChanges({\n    added: update,\n    changed: update,\n    removed: update,\n    error: function (err) {\n      throw err;\n    }\n  });\n  // observeChanges() will immediately fire an \"added\" event for each document in the query\n  // these are skipped using the initializing flag\n  initializing = false;\n  // send an initial result set to the client\n  update();\n  // mark the subscription as ready\n  sub.ready();\n\n  // stop observing the cursor when the client unsubscribes\n  sub.onStop(function () {\n    handle.stop();\n  });\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['jcbernack:reactive-aggregate'] = {}, {\n  ReactiveAggregate: ReactiveAggregate\n});\n\n})();\n","servePath":"/packages/jcbernack_reactive-aggregate.js"}]