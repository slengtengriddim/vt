//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;

/* Package-scope variables */
var module, exports, R;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/ramda_ramda/meteor-pre.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Defining this will trick upstream/ramda.js into putting its exports into module.exports                             // 1
module = {};                                                                                                           // 2
                                                                                                                       // 3
// This also needed to complete the trick...                                                                           // 4
exports = {};                                                                                                          // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/ramda_ramda/upstream/dist/ramda.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
//  Ramda v0.19.0                                                                                                      // 1
//  https://github.com/ramda/ramda                                                                                     // 2
//  (c) 2013-2015 Scott Sauyet, Michael Hurley, and David Chambers                                                     // 3
//  Ramda may be freely distributed under the MIT license.                                                             // 4
                                                                                                                       // 5
;(function() {                                                                                                         // 6
                                                                                                                       // 7
  'use strict';                                                                                                        // 8
                                                                                                                       // 9
  /**                                                                                                                  // 10
     * A special placeholder value used to specify "gaps" within curried functions,                                    // 11
     * allowing partial application of any combination of arguments, regardless of                                     // 12
     * their positions.                                                                                                // 13
     *                                                                                                                 // 14
     * If `g` is a curried ternary function and `_` is `R.__`, the following are                                       // 15
     * equivalent:                                                                                                     // 16
     *                                                                                                                 // 17
     *   - `g(1, 2, 3)`                                                                                                // 18
     *   - `g(_, 2, 3)(1)`                                                                                             // 19
     *   - `g(_, _, 3)(1)(2)`                                                                                          // 20
     *   - `g(_, _, 3)(1, 2)`                                                                                          // 21
     *   - `g(_, 2, _)(1, 3)`                                                                                          // 22
     *   - `g(_, 2)(1)(3)`                                                                                             // 23
     *   - `g(_, 2)(1, 3)`                                                                                             // 24
     *   - `g(_, 2)(_, 3)(1)`                                                                                          // 25
     *                                                                                                                 // 26
     * @constant                                                                                                       // 27
     * @memberOf R                                                                                                     // 28
     * @since v0.6.0                                                                                                   // 29
     * @category Function                                                                                              // 30
     * @example                                                                                                        // 31
     *                                                                                                                 // 32
     *      var greet = R.replace('{name}', R.__, 'Hello, {name}!');                                                   // 33
     *      greet('Alice'); //=> 'Hello, Alice!'                                                                       // 34
     */                                                                                                                // 35
    var __ = { '@@functional/placeholder': true };                                                                     // 36
                                                                                                                       // 37
    /* eslint-disable no-unused-vars */                                                                                // 38
    var _arity = function _arity(n, fn) {                                                                              // 39
        /* eslint-disable no-unused-vars */                                                                            // 40
        switch (n) {                                                                                                   // 41
        case 0:                                                                                                        // 42
            return function () {                                                                                       // 43
                return fn.apply(this, arguments);                                                                      // 44
            };                                                                                                         // 45
        case 1:                                                                                                        // 46
            return function (a0) {                                                                                     // 47
                return fn.apply(this, arguments);                                                                      // 48
            };                                                                                                         // 49
        case 2:                                                                                                        // 50
            return function (a0, a1) {                                                                                 // 51
                return fn.apply(this, arguments);                                                                      // 52
            };                                                                                                         // 53
        case 3:                                                                                                        // 54
            return function (a0, a1, a2) {                                                                             // 55
                return fn.apply(this, arguments);                                                                      // 56
            };                                                                                                         // 57
        case 4:                                                                                                        // 58
            return function (a0, a1, a2, a3) {                                                                         // 59
                return fn.apply(this, arguments);                                                                      // 60
            };                                                                                                         // 61
        case 5:                                                                                                        // 62
            return function (a0, a1, a2, a3, a4) {                                                                     // 63
                return fn.apply(this, arguments);                                                                      // 64
            };                                                                                                         // 65
        case 6:                                                                                                        // 66
            return function (a0, a1, a2, a3, a4, a5) {                                                                 // 67
                return fn.apply(this, arguments);                                                                      // 68
            };                                                                                                         // 69
        case 7:                                                                                                        // 70
            return function (a0, a1, a2, a3, a4, a5, a6) {                                                             // 71
                return fn.apply(this, arguments);                                                                      // 72
            };                                                                                                         // 73
        case 8:                                                                                                        // 74
            return function (a0, a1, a2, a3, a4, a5, a6, a7) {                                                         // 75
                return fn.apply(this, arguments);                                                                      // 76
            };                                                                                                         // 77
        case 9:                                                                                                        // 78
            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {                                                     // 79
                return fn.apply(this, arguments);                                                                      // 80
            };                                                                                                         // 81
        case 10:                                                                                                       // 82
            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {                                                 // 83
                return fn.apply(this, arguments);                                                                      // 84
            };                                                                                                         // 85
        default:                                                                                                       // 86
            throw new Error('First argument to _arity must be a non-negative integer no greater than ten');            // 87
        }                                                                                                              // 88
    };                                                                                                                 // 89
                                                                                                                       // 90
    var _arrayFromIterator = function _arrayFromIterator(iter) {                                                       // 91
        var list = [];                                                                                                 // 92
        var next;                                                                                                      // 93
        while (!(next = iter.next()).done) {                                                                           // 94
            list.push(next.value);                                                                                     // 95
        }                                                                                                              // 96
        return list;                                                                                                   // 97
    };                                                                                                                 // 98
                                                                                                                       // 99
    var _cloneRegExp = function _cloneRegExp(pattern) {                                                                // 100
        return new RegExp(pattern.source, (pattern.global ? 'g' : '') + (pattern.ignoreCase ? 'i' : '') + (pattern.multiline ? 'm' : '') + (pattern.sticky ? 'y' : '') + (pattern.unicode ? 'u' : ''));
    };                                                                                                                 // 102
                                                                                                                       // 103
    var _complement = function _complement(f) {                                                                        // 104
        return function () {                                                                                           // 105
            return !f.apply(this, arguments);                                                                          // 106
        };                                                                                                             // 107
    };                                                                                                                 // 108
                                                                                                                       // 109
    /**                                                                                                                // 110
     * Private `concat` function to merge two array-like objects.                                                      // 111
     *                                                                                                                 // 112
     * @private                                                                                                        // 113
     * @param {Array|Arguments} [set1=[]] An array-like object.                                                        // 114
     * @param {Array|Arguments} [set2=[]] An array-like object.                                                        // 115
     * @return {Array} A new, merged array.                                                                            // 116
     * @example                                                                                                        // 117
     *                                                                                                                 // 118
     *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]                                                     // 119
     */                                                                                                                // 120
    var _concat = function _concat(set1, set2) {                                                                       // 121
        set1 = set1 || [];                                                                                             // 122
        set2 = set2 || [];                                                                                             // 123
        var idx;                                                                                                       // 124
        var len1 = set1.length;                                                                                        // 125
        var len2 = set2.length;                                                                                        // 126
        var result = [];                                                                                               // 127
        idx = 0;                                                                                                       // 128
        while (idx < len1) {                                                                                           // 129
            result[result.length] = set1[idx];                                                                         // 130
            idx += 1;                                                                                                  // 131
        }                                                                                                              // 132
        idx = 0;                                                                                                       // 133
        while (idx < len2) {                                                                                           // 134
            result[result.length] = set2[idx];                                                                         // 135
            idx += 1;                                                                                                  // 136
        }                                                                                                              // 137
        return result;                                                                                                 // 138
    };                                                                                                                 // 139
                                                                                                                       // 140
    var _containsWith = function _containsWith(pred, x, list) {                                                        // 141
        var idx = 0;                                                                                                   // 142
        var len = list.length;                                                                                         // 143
        while (idx < len) {                                                                                            // 144
            if (pred(x, list[idx])) {                                                                                  // 145
                return true;                                                                                           // 146
            }                                                                                                          // 147
            idx += 1;                                                                                                  // 148
        }                                                                                                              // 149
        return false;                                                                                                  // 150
    };                                                                                                                 // 151
                                                                                                                       // 152
    var _filter = function _filter(fn, list) {                                                                         // 153
        var idx = 0;                                                                                                   // 154
        var len = list.length;                                                                                         // 155
        var result = [];                                                                                               // 156
        while (idx < len) {                                                                                            // 157
            if (fn(list[idx])) {                                                                                       // 158
                result[result.length] = list[idx];                                                                     // 159
            }                                                                                                          // 160
            idx += 1;                                                                                                  // 161
        }                                                                                                              // 162
        return result;                                                                                                 // 163
    };                                                                                                                 // 164
                                                                                                                       // 165
    var _forceReduced = function _forceReduced(x) {                                                                    // 166
        return {                                                                                                       // 167
            '@@transducer/value': x,                                                                                   // 168
            '@@transducer/reduced': true                                                                               // 169
        };                                                                                                             // 170
    };                                                                                                                 // 171
                                                                                                                       // 172
    var _has = function _has(prop, obj) {                                                                              // 173
        return Object.prototype.hasOwnProperty.call(obj, prop);                                                        // 174
    };                                                                                                                 // 175
                                                                                                                       // 176
    var _identity = function _identity(x) {                                                                            // 177
        return x;                                                                                                      // 178
    };                                                                                                                 // 179
                                                                                                                       // 180
    var _isArguments = function () {                                                                                   // 181
        var toString = Object.prototype.toString;                                                                      // 182
        return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {                          // 183
            return toString.call(x) === '[object Arguments]';                                                          // 184
        } : function _isArguments(x) {                                                                                 // 185
            return _has('callee', x);                                                                                  // 186
        };                                                                                                             // 187
    }();                                                                                                               // 188
                                                                                                                       // 189
    /**                                                                                                                // 190
     * Tests whether or not an object is an array.                                                                     // 191
     *                                                                                                                 // 192
     * @private                                                                                                        // 193
     * @param {*} val The object to test.                                                                              // 194
     * @return {Boolean} `true` if `val` is an array, `false` otherwise.                                               // 195
     * @example                                                                                                        // 196
     *                                                                                                                 // 197
     *      _isArray([]); //=> true                                                                                    // 198
     *      _isArray(null); //=> false                                                                                 // 199
     *      _isArray({}); //=> false                                                                                   // 200
     */                                                                                                                // 201
    var _isArray = Array.isArray || function _isArray(val) {                                                           // 202
        return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';             // 203
    };                                                                                                                 // 204
                                                                                                                       // 205
    /**                                                                                                                // 206
     * Determine if the passed argument is an integer.                                                                 // 207
     *                                                                                                                 // 208
     * @private                                                                                                        // 209
     * @param {*} n                                                                                                    // 210
     * @category Type                                                                                                  // 211
     * @return {Boolean}                                                                                               // 212
     */                                                                                                                // 213
    var _isInteger = Number.isInteger || function _isInteger(n) {                                                      // 214
        return n << 0 === n;                                                                                           // 215
    };                                                                                                                 // 216
                                                                                                                       // 217
    var _isNumber = function _isNumber(x) {                                                                            // 218
        return Object.prototype.toString.call(x) === '[object Number]';                                                // 219
    };                                                                                                                 // 220
                                                                                                                       // 221
    var _isObject = function _isObject(x) {                                                                            // 222
        return Object.prototype.toString.call(x) === '[object Object]';                                                // 223
    };                                                                                                                 // 224
                                                                                                                       // 225
    var _isPlaceholder = function _isPlaceholder(a) {                                                                  // 226
        return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;                           // 227
    };                                                                                                                 // 228
                                                                                                                       // 229
    var _isRegExp = function _isRegExp(x) {                                                                            // 230
        return Object.prototype.toString.call(x) === '[object RegExp]';                                                // 231
    };                                                                                                                 // 232
                                                                                                                       // 233
    var _isString = function _isString(x) {                                                                            // 234
        return Object.prototype.toString.call(x) === '[object String]';                                                // 235
    };                                                                                                                 // 236
                                                                                                                       // 237
    var _isTransformer = function _isTransformer(obj) {                                                                // 238
        return typeof obj['@@transducer/step'] === 'function';                                                         // 239
    };                                                                                                                 // 240
                                                                                                                       // 241
    var _map = function _map(fn, functor) {                                                                            // 242
        var idx = 0;                                                                                                   // 243
        var len = functor.length;                                                                                      // 244
        var result = Array(len);                                                                                       // 245
        while (idx < len) {                                                                                            // 246
            result[idx] = fn(functor[idx]);                                                                            // 247
            idx += 1;                                                                                                  // 248
        }                                                                                                              // 249
        return result;                                                                                                 // 250
    };                                                                                                                 // 251
                                                                                                                       // 252
    var _of = function _of(x) {                                                                                        // 253
        return [x];                                                                                                    // 254
    };                                                                                                                 // 255
                                                                                                                       // 256
    var _pipe = function _pipe(f, g) {                                                                                 // 257
        return function () {                                                                                           // 258
            return g.call(this, f.apply(this, arguments));                                                             // 259
        };                                                                                                             // 260
    };                                                                                                                 // 261
                                                                                                                       // 262
    var _pipeP = function _pipeP(f, g) {                                                                               // 263
        return function () {                                                                                           // 264
            var ctx = this;                                                                                            // 265
            return f.apply(ctx, arguments).then(function (x) {                                                         // 266
                return g.call(ctx, x);                                                                                 // 267
            });                                                                                                        // 268
        };                                                                                                             // 269
    };                                                                                                                 // 270
                                                                                                                       // 271
    // \b matches word boundary; [\b] matches backspace                                                                // 272
    var _quote = function _quote(s) {                                                                                  // 273
        var escaped = s.replace(/\\/g, '\\\\').replace(/[\b]/g, '\\b')    // \b matches word boundary; [\b] matches backspace
    .replace(/\f/g, '\\f').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\t/g, '\\t').replace(/\v/g, '\\v').replace(/\0/g, '\\0');
        return '"' + escaped.replace(/"/g, '\\"') + '"';                                                               // 276
    };                                                                                                                 // 277
                                                                                                                       // 278
    var _reduced = function _reduced(x) {                                                                              // 279
        return x && x['@@transducer/reduced'] ? x : {                                                                  // 280
            '@@transducer/value': x,                                                                                   // 281
            '@@transducer/reduced': true                                                                               // 282
        };                                                                                                             // 283
    };                                                                                                                 // 284
                                                                                                                       // 285
    /**                                                                                                                // 286
     * An optimized, private array `slice` implementation.                                                             // 287
     *                                                                                                                 // 288
     * @private                                                                                                        // 289
     * @param {Arguments|Array} args The array or arguments object to consider.                                        // 290
     * @param {Number} [from=0] The array index to slice from, inclusive.                                              // 291
     * @param {Number} [to=args.length] The array index to slice to, exclusive.                                        // 292
     * @return {Array} A new, sliced array.                                                                            // 293
     * @example                                                                                                        // 294
     *                                                                                                                 // 295
     *      _slice([1, 2, 3, 4, 5], 1, 3); //=> [2, 3]                                                                 // 296
     *                                                                                                                 // 297
     *      var firstThreeArgs = function(a, b, c, d) {                                                                // 298
     *        return _slice(arguments, 0, 3);                                                                          // 299
     *      };                                                                                                         // 300
     *      firstThreeArgs(1, 2, 3, 4); //=> [1, 2, 3]                                                                 // 301
     */                                                                                                                // 302
    var _slice = function _slice(args, from, to) {                                                                     // 303
        switch (arguments.length) {                                                                                    // 304
        case 1:                                                                                                        // 305
            return _slice(args, 0, args.length);                                                                       // 306
        case 2:                                                                                                        // 307
            return _slice(args, from, args.length);                                                                    // 308
        default:                                                                                                       // 309
            var list = [];                                                                                             // 310
            var idx = 0;                                                                                               // 311
            var len = Math.max(0, Math.min(args.length, to) - from);                                                   // 312
            while (idx < len) {                                                                                        // 313
                list[idx] = args[from + idx];                                                                          // 314
                idx += 1;                                                                                              // 315
            }                                                                                                          // 316
            return list;                                                                                               // 317
        }                                                                                                              // 318
    };                                                                                                                 // 319
                                                                                                                       // 320
    /**                                                                                                                // 321
     * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.
     */                                                                                                                // 323
    var _toISOString = function () {                                                                                   // 324
        var pad = function pad(n) {                                                                                    // 325
            return (n < 10 ? '0' : '') + n;                                                                            // 326
        };                                                                                                             // 327
        return typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {                           // 328
            return d.toISOString();                                                                                    // 329
        } : function _toISOString(d) {                                                                                 // 330
            return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';
        };                                                                                                             // 332
    }();                                                                                                               // 333
                                                                                                                       // 334
    var _xfBase = {                                                                                                    // 335
        init: function () {                                                                                            // 336
            return this.xf['@@transducer/init']();                                                                     // 337
        },                                                                                                             // 338
        result: function (result) {                                                                                    // 339
            return this.xf['@@transducer/result'](result);                                                             // 340
        }                                                                                                              // 341
    };                                                                                                                 // 342
                                                                                                                       // 343
    var _xwrap = function () {                                                                                         // 344
        function XWrap(fn) {                                                                                           // 345
            this.f = fn;                                                                                               // 346
        }                                                                                                              // 347
        XWrap.prototype['@@transducer/init'] = function () {                                                           // 348
            throw new Error('init not implemented on XWrap');                                                          // 349
        };                                                                                                             // 350
        XWrap.prototype['@@transducer/result'] = function (acc) {                                                      // 351
            return acc;                                                                                                // 352
        };                                                                                                             // 353
        XWrap.prototype['@@transducer/step'] = function (acc, x) {                                                     // 354
            return this.f(acc, x);                                                                                     // 355
        };                                                                                                             // 356
        return function _xwrap(fn) {                                                                                   // 357
            return new XWrap(fn);                                                                                      // 358
        };                                                                                                             // 359
    }();                                                                                                               // 360
                                                                                                                       // 361
    var _aperture = function _aperture(n, list) {                                                                      // 362
        var idx = 0;                                                                                                   // 363
        var limit = list.length - (n - 1);                                                                             // 364
        var acc = new Array(limit >= 0 ? limit : 0);                                                                   // 365
        while (idx < limit) {                                                                                          // 366
            acc[idx] = _slice(list, idx, idx + n);                                                                     // 367
            idx += 1;                                                                                                  // 368
        }                                                                                                              // 369
        return acc;                                                                                                    // 370
    };                                                                                                                 // 371
                                                                                                                       // 372
    /**                                                                                                                // 373
     * Similar to hasMethod, this checks whether a function has a [methodname]                                         // 374
     * function. If it isn't an array it will execute that function otherwise it                                       // 375
     * will default to the ramda implementation.                                                                       // 376
     *                                                                                                                 // 377
     * @private                                                                                                        // 378
     * @param {Function} fn ramda implemtation                                                                         // 379
     * @param {String} methodname property to check for a custom implementation                                        // 380
     * @return {Object} Whatever the return value of the method is.                                                    // 381
     */                                                                                                                // 382
    var _checkForMethod = function _checkForMethod(methodname, fn) {                                                   // 383
        return function () {                                                                                           // 384
            var length = arguments.length;                                                                             // 385
            if (length === 0) {                                                                                        // 386
                return fn();                                                                                           // 387
            }                                                                                                          // 388
            var obj = arguments[length - 1];                                                                           // 389
            return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, _slice(arguments, 0, length - 1));
        };                                                                                                             // 391
    };                                                                                                                 // 392
                                                                                                                       // 393
    /**                                                                                                                // 394
     * Optimized internal one-arity curry function.                                                                    // 395
     *                                                                                                                 // 396
     * @private                                                                                                        // 397
     * @category Function                                                                                              // 398
     * @param {Function} fn The function to curry.                                                                     // 399
     * @return {Function} The curried function.                                                                        // 400
     */                                                                                                                // 401
    var _curry1 = function _curry1(fn) {                                                                               // 402
        return function f1(a) {                                                                                        // 403
            if (arguments.length === 0 || _isPlaceholder(a)) {                                                         // 404
                return f1;                                                                                             // 405
            } else {                                                                                                   // 406
                return fn.apply(this, arguments);                                                                      // 407
            }                                                                                                          // 408
        };                                                                                                             // 409
    };                                                                                                                 // 410
                                                                                                                       // 411
    /**                                                                                                                // 412
     * Optimized internal two-arity curry function.                                                                    // 413
     *                                                                                                                 // 414
     * @private                                                                                                        // 415
     * @category Function                                                                                              // 416
     * @param {Function} fn The function to curry.                                                                     // 417
     * @return {Function} The curried function.                                                                        // 418
     */                                                                                                                // 419
    var _curry2 = function _curry2(fn) {                                                                               // 420
        return function f2(a, b) {                                                                                     // 421
            switch (arguments.length) {                                                                                // 422
            case 0:                                                                                                    // 423
                return f2;                                                                                             // 424
            case 1:                                                                                                    // 425
                return _isPlaceholder(a) ? f2 : _curry1(function (_b) {                                                // 426
                    return fn(a, _b);                                                                                  // 427
                });                                                                                                    // 428
            default:                                                                                                   // 429
                return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {       // 430
                    return fn(_a, b);                                                                                  // 431
                }) : _isPlaceholder(b) ? _curry1(function (_b) {                                                       // 432
                    return fn(a, _b);                                                                                  // 433
                }) : fn(a, b);                                                                                         // 434
            }                                                                                                          // 435
        };                                                                                                             // 436
    };                                                                                                                 // 437
                                                                                                                       // 438
    /**                                                                                                                // 439
     * Optimized internal three-arity curry function.                                                                  // 440
     *                                                                                                                 // 441
     * @private                                                                                                        // 442
     * @category Function                                                                                              // 443
     * @param {Function} fn The function to curry.                                                                     // 444
     * @return {Function} The curried function.                                                                        // 445
     */                                                                                                                // 446
    var _curry3 = function _curry3(fn) {                                                                               // 447
        return function f3(a, b, c) {                                                                                  // 448
            switch (arguments.length) {                                                                                // 449
            case 0:                                                                                                    // 450
                return f3;                                                                                             // 451
            case 1:                                                                                                    // 452
                return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {                                            // 453
                    return fn(a, _b, _c);                                                                              // 454
                });                                                                                                    // 455
            case 2:                                                                                                    // 456
                return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {   // 457
                    return fn(_a, b, _c);                                                                              // 458
                }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {                                                   // 459
                    return fn(a, _b, _c);                                                                              // 460
                }) : _curry1(function (_c) {                                                                           // 461
                    return fn(a, b, _c);                                                                               // 462
                });                                                                                                    // 463
            default:                                                                                                   // 464
                return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {
                    return fn(_a, _b, c);                                                                              // 466
                }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {                              // 467
                    return fn(_a, b, _c);                                                                              // 468
                }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {                              // 469
                    return fn(a, _b, _c);                                                                              // 470
                }) : _isPlaceholder(a) ? _curry1(function (_a) {                                                       // 471
                    return fn(_a, b, c);                                                                               // 472
                }) : _isPlaceholder(b) ? _curry1(function (_b) {                                                       // 473
                    return fn(a, _b, c);                                                                               // 474
                }) : _isPlaceholder(c) ? _curry1(function (_c) {                                                       // 475
                    return fn(a, b, _c);                                                                               // 476
                }) : fn(a, b, c);                                                                                      // 477
            }                                                                                                          // 478
        };                                                                                                             // 479
    };                                                                                                                 // 480
                                                                                                                       // 481
    /**                                                                                                                // 482
     * Internal curryN function.                                                                                       // 483
     *                                                                                                                 // 484
     * @private                                                                                                        // 485
     * @category Function                                                                                              // 486
     * @param {Number} length The arity of the curried function.                                                       // 487
     * @param {Array} received An array of arguments received thus far.                                                // 488
     * @param {Function} fn The function to curry.                                                                     // 489
     * @return {Function} The curried function.                                                                        // 490
     */                                                                                                                // 491
    var _curryN = function _curryN(length, received, fn) {                                                             // 492
        return function () {                                                                                           // 493
            var combined = [];                                                                                         // 494
            var argsIdx = 0;                                                                                           // 495
            var left = length;                                                                                         // 496
            var combinedIdx = 0;                                                                                       // 497
            while (combinedIdx < received.length || argsIdx < arguments.length) {                                      // 498
                var result;                                                                                            // 499
                if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {
                    result = received[combinedIdx];                                                                    // 501
                } else {                                                                                               // 502
                    result = arguments[argsIdx];                                                                       // 503
                    argsIdx += 1;                                                                                      // 504
                }                                                                                                      // 505
                combined[combinedIdx] = result;                                                                        // 506
                if (!_isPlaceholder(result)) {                                                                         // 507
                    left -= 1;                                                                                         // 508
                }                                                                                                      // 509
                combinedIdx += 1;                                                                                      // 510
            }                                                                                                          // 511
            return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));                 // 512
        };                                                                                                             // 513
    };                                                                                                                 // 514
                                                                                                                       // 515
    /**                                                                                                                // 516
     * Returns a function that dispatches with different strategies based on the                                       // 517
     * object in list position (last argument). If it is an array, executes [fn].                                      // 518
     * Otherwise, if it has a function with [methodname], it will execute that                                         // 519
     * function (functor case). Otherwise, if it is a transformer, uses transducer                                     // 520
     * [xf] to return a new transformer (transducer case). Otherwise, it will                                          // 521
     * default to executing [fn].                                                                                      // 522
     *                                                                                                                 // 523
     * @private                                                                                                        // 524
     * @param {String} methodname property to check for a custom implementation                                        // 525
     * @param {Function} xf transducer to initialize if object is transformer                                          // 526
     * @param {Function} fn default ramda implementation                                                               // 527
     * @return {Function} A function that dispatches on object in list position                                        // 528
     */                                                                                                                // 529
    var _dispatchable = function _dispatchable(methodname, xf, fn) {                                                   // 530
        return function () {                                                                                           // 531
            var length = arguments.length;                                                                             // 532
            if (length === 0) {                                                                                        // 533
                return fn();                                                                                           // 534
            }                                                                                                          // 535
            var obj = arguments[length - 1];                                                                           // 536
            if (!_isArray(obj)) {                                                                                      // 537
                var args = _slice(arguments, 0, length - 1);                                                           // 538
                if (typeof obj[methodname] === 'function') {                                                           // 539
                    return obj[methodname].apply(obj, args);                                                           // 540
                }                                                                                                      // 541
                if (_isTransformer(obj)) {                                                                             // 542
                    var transducer = xf.apply(null, args);                                                             // 543
                    return transducer(obj);                                                                            // 544
                }                                                                                                      // 545
            }                                                                                                          // 546
            return fn.apply(this, arguments);                                                                          // 547
        };                                                                                                             // 548
    };                                                                                                                 // 549
                                                                                                                       // 550
    var _dropLastWhile = function dropLastWhile(pred, list) {                                                          // 551
        var idx = list.length - 1;                                                                                     // 552
        while (idx >= 0 && pred(list[idx])) {                                                                          // 553
            idx -= 1;                                                                                                  // 554
        }                                                                                                              // 555
        return _slice(list, 0, idx + 1);                                                                               // 556
    };                                                                                                                 // 557
                                                                                                                       // 558
    var _xall = function () {                                                                                          // 559
        function XAll(f, xf) {                                                                                         // 560
            this.xf = xf;                                                                                              // 561
            this.f = f;                                                                                                // 562
            this.all = true;                                                                                           // 563
        }                                                                                                              // 564
        XAll.prototype['@@transducer/init'] = _xfBase.init;                                                            // 565
        XAll.prototype['@@transducer/result'] = function (result) {                                                    // 566
            if (this.all) {                                                                                            // 567
                result = this.xf['@@transducer/step'](result, true);                                                   // 568
            }                                                                                                          // 569
            return this.xf['@@transducer/result'](result);                                                             // 570
        };                                                                                                             // 571
        XAll.prototype['@@transducer/step'] = function (result, input) {                                               // 572
            if (!this.f(input)) {                                                                                      // 573
                this.all = false;                                                                                      // 574
                result = _reduced(this.xf['@@transducer/step'](result, false));                                        // 575
            }                                                                                                          // 576
            return result;                                                                                             // 577
        };                                                                                                             // 578
        return _curry2(function _xall(f, xf) {                                                                         // 579
            return new XAll(f, xf);                                                                                    // 580
        });                                                                                                            // 581
    }();                                                                                                               // 582
                                                                                                                       // 583
    var _xany = function () {                                                                                          // 584
        function XAny(f, xf) {                                                                                         // 585
            this.xf = xf;                                                                                              // 586
            this.f = f;                                                                                                // 587
            this.any = false;                                                                                          // 588
        }                                                                                                              // 589
        XAny.prototype['@@transducer/init'] = _xfBase.init;                                                            // 590
        XAny.prototype['@@transducer/result'] = function (result) {                                                    // 591
            if (!this.any) {                                                                                           // 592
                result = this.xf['@@transducer/step'](result, false);                                                  // 593
            }                                                                                                          // 594
            return this.xf['@@transducer/result'](result);                                                             // 595
        };                                                                                                             // 596
        XAny.prototype['@@transducer/step'] = function (result, input) {                                               // 597
            if (this.f(input)) {                                                                                       // 598
                this.any = true;                                                                                       // 599
                result = _reduced(this.xf['@@transducer/step'](result, true));                                         // 600
            }                                                                                                          // 601
            return result;                                                                                             // 602
        };                                                                                                             // 603
        return _curry2(function _xany(f, xf) {                                                                         // 604
            return new XAny(f, xf);                                                                                    // 605
        });                                                                                                            // 606
    }();                                                                                                               // 607
                                                                                                                       // 608
    var _xaperture = function () {                                                                                     // 609
        function XAperture(n, xf) {                                                                                    // 610
            this.xf = xf;                                                                                              // 611
            this.pos = 0;                                                                                              // 612
            this.full = false;                                                                                         // 613
            this.acc = new Array(n);                                                                                   // 614
        }                                                                                                              // 615
        XAperture.prototype['@@transducer/init'] = _xfBase.init;                                                       // 616
        XAperture.prototype['@@transducer/result'] = function (result) {                                               // 617
            this.acc = null;                                                                                           // 618
            return this.xf['@@transducer/result'](result);                                                             // 619
        };                                                                                                             // 620
        XAperture.prototype['@@transducer/step'] = function (result, input) {                                          // 621
            this.store(input);                                                                                         // 622
            return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;                          // 623
        };                                                                                                             // 624
        XAperture.prototype.store = function (input) {                                                                 // 625
            this.acc[this.pos] = input;                                                                                // 626
            this.pos += 1;                                                                                             // 627
            if (this.pos === this.acc.length) {                                                                        // 628
                this.pos = 0;                                                                                          // 629
                this.full = true;                                                                                      // 630
            }                                                                                                          // 631
        };                                                                                                             // 632
        XAperture.prototype.getCopy = function () {                                                                    // 633
            return _concat(_slice(this.acc, this.pos), _slice(this.acc, 0, this.pos));                                 // 634
        };                                                                                                             // 635
        return _curry2(function _xaperture(n, xf) {                                                                    // 636
            return new XAperture(n, xf);                                                                               // 637
        });                                                                                                            // 638
    }();                                                                                                               // 639
                                                                                                                       // 640
    var _xdrop = function () {                                                                                         // 641
        function XDrop(n, xf) {                                                                                        // 642
            this.xf = xf;                                                                                              // 643
            this.n = n;                                                                                                // 644
        }                                                                                                              // 645
        XDrop.prototype['@@transducer/init'] = _xfBase.init;                                                           // 646
        XDrop.prototype['@@transducer/result'] = _xfBase.result;                                                       // 647
        XDrop.prototype['@@transducer/step'] = function (result, input) {                                              // 648
            if (this.n > 0) {                                                                                          // 649
                this.n -= 1;                                                                                           // 650
                return result;                                                                                         // 651
            }                                                                                                          // 652
            return this.xf['@@transducer/step'](result, input);                                                        // 653
        };                                                                                                             // 654
        return _curry2(function _xdrop(n, xf) {                                                                        // 655
            return new XDrop(n, xf);                                                                                   // 656
        });                                                                                                            // 657
    }();                                                                                                               // 658
                                                                                                                       // 659
    var _xdropLast = function () {                                                                                     // 660
        function XDropLast(n, xf) {                                                                                    // 661
            this.xf = xf;                                                                                              // 662
            this.pos = 0;                                                                                              // 663
            this.full = false;                                                                                         // 664
            this.acc = new Array(n);                                                                                   // 665
        }                                                                                                              // 666
        XDropLast.prototype['@@transducer/init'] = _xfBase.init;                                                       // 667
        XDropLast.prototype['@@transducer/result'] = function (result) {                                               // 668
            this.acc = null;                                                                                           // 669
            return this.xf['@@transducer/result'](result);                                                             // 670
        };                                                                                                             // 671
        XDropLast.prototype['@@transducer/step'] = function (result, input) {                                          // 672
            if (this.full) {                                                                                           // 673
                result = this.xf['@@transducer/step'](result, this.acc[this.pos]);                                     // 674
            }                                                                                                          // 675
            this.store(input);                                                                                         // 676
            return result;                                                                                             // 677
        };                                                                                                             // 678
        XDropLast.prototype.store = function (input) {                                                                 // 679
            this.acc[this.pos] = input;                                                                                // 680
            this.pos += 1;                                                                                             // 681
            if (this.pos === this.acc.length) {                                                                        // 682
                this.pos = 0;                                                                                          // 683
                this.full = true;                                                                                      // 684
            }                                                                                                          // 685
        };                                                                                                             // 686
        return _curry2(function _xdropLast(n, xf) {                                                                    // 687
            return new XDropLast(n, xf);                                                                               // 688
        });                                                                                                            // 689
    }();                                                                                                               // 690
                                                                                                                       // 691
    var _xdropRepeatsWith = function () {                                                                              // 692
        function XDropRepeatsWith(pred, xf) {                                                                          // 693
            this.xf = xf;                                                                                              // 694
            this.pred = pred;                                                                                          // 695
            this.lastValue = undefined;                                                                                // 696
            this.seenFirstValue = false;                                                                               // 697
        }                                                                                                              // 698
        XDropRepeatsWith.prototype['@@transducer/init'] = function () {                                                // 699
            return this.xf['@@transducer/init']();                                                                     // 700
        };                                                                                                             // 701
        XDropRepeatsWith.prototype['@@transducer/result'] = function (result) {                                        // 702
            return this.xf['@@transducer/result'](result);                                                             // 703
        };                                                                                                             // 704
        XDropRepeatsWith.prototype['@@transducer/step'] = function (result, input) {                                   // 705
            var sameAsLast = false;                                                                                    // 706
            if (!this.seenFirstValue) {                                                                                // 707
                this.seenFirstValue = true;                                                                            // 708
            } else if (this.pred(this.lastValue, input)) {                                                             // 709
                sameAsLast = true;                                                                                     // 710
            }                                                                                                          // 711
            this.lastValue = input;                                                                                    // 712
            return sameAsLast ? result : this.xf['@@transducer/step'](result, input);                                  // 713
        };                                                                                                             // 714
        return _curry2(function _xdropRepeatsWith(pred, xf) {                                                          // 715
            return new XDropRepeatsWith(pred, xf);                                                                     // 716
        });                                                                                                            // 717
    }();                                                                                                               // 718
                                                                                                                       // 719
    var _xdropWhile = function () {                                                                                    // 720
        function XDropWhile(f, xf) {                                                                                   // 721
            this.xf = xf;                                                                                              // 722
            this.f = f;                                                                                                // 723
        }                                                                                                              // 724
        XDropWhile.prototype['@@transducer/init'] = _xfBase.init;                                                      // 725
        XDropWhile.prototype['@@transducer/result'] = _xfBase.result;                                                  // 726
        XDropWhile.prototype['@@transducer/step'] = function (result, input) {                                         // 727
            if (this.f) {                                                                                              // 728
                if (this.f(input)) {                                                                                   // 729
                    return result;                                                                                     // 730
                }                                                                                                      // 731
                this.f = null;                                                                                         // 732
            }                                                                                                          // 733
            return this.xf['@@transducer/step'](result, input);                                                        // 734
        };                                                                                                             // 735
        return _curry2(function _xdropWhile(f, xf) {                                                                   // 736
            return new XDropWhile(f, xf);                                                                              // 737
        });                                                                                                            // 738
    }();                                                                                                               // 739
                                                                                                                       // 740
    var _xfilter = function () {                                                                                       // 741
        function XFilter(f, xf) {                                                                                      // 742
            this.xf = xf;                                                                                              // 743
            this.f = f;                                                                                                // 744
        }                                                                                                              // 745
        XFilter.prototype['@@transducer/init'] = _xfBase.init;                                                         // 746
        XFilter.prototype['@@transducer/result'] = _xfBase.result;                                                     // 747
        XFilter.prototype['@@transducer/step'] = function (result, input) {                                            // 748
            return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;                               // 749
        };                                                                                                             // 750
        return _curry2(function _xfilter(f, xf) {                                                                      // 751
            return new XFilter(f, xf);                                                                                 // 752
        });                                                                                                            // 753
    }();                                                                                                               // 754
                                                                                                                       // 755
    var _xfind = function () {                                                                                         // 756
        function XFind(f, xf) {                                                                                        // 757
            this.xf = xf;                                                                                              // 758
            this.f = f;                                                                                                // 759
            this.found = false;                                                                                        // 760
        }                                                                                                              // 761
        XFind.prototype['@@transducer/init'] = _xfBase.init;                                                           // 762
        XFind.prototype['@@transducer/result'] = function (result) {                                                   // 763
            if (!this.found) {                                                                                         // 764
                result = this.xf['@@transducer/step'](result, void 0);                                                 // 765
            }                                                                                                          // 766
            return this.xf['@@transducer/result'](result);                                                             // 767
        };                                                                                                             // 768
        XFind.prototype['@@transducer/step'] = function (result, input) {                                              // 769
            if (this.f(input)) {                                                                                       // 770
                this.found = true;                                                                                     // 771
                result = _reduced(this.xf['@@transducer/step'](result, input));                                        // 772
            }                                                                                                          // 773
            return result;                                                                                             // 774
        };                                                                                                             // 775
        return _curry2(function _xfind(f, xf) {                                                                        // 776
            return new XFind(f, xf);                                                                                   // 777
        });                                                                                                            // 778
    }();                                                                                                               // 779
                                                                                                                       // 780
    var _xfindIndex = function () {                                                                                    // 781
        function XFindIndex(f, xf) {                                                                                   // 782
            this.xf = xf;                                                                                              // 783
            this.f = f;                                                                                                // 784
            this.idx = -1;                                                                                             // 785
            this.found = false;                                                                                        // 786
        }                                                                                                              // 787
        XFindIndex.prototype['@@transducer/init'] = _xfBase.init;                                                      // 788
        XFindIndex.prototype['@@transducer/result'] = function (result) {                                              // 789
            if (!this.found) {                                                                                         // 790
                result = this.xf['@@transducer/step'](result, -1);                                                     // 791
            }                                                                                                          // 792
            return this.xf['@@transducer/result'](result);                                                             // 793
        };                                                                                                             // 794
        XFindIndex.prototype['@@transducer/step'] = function (result, input) {                                         // 795
            this.idx += 1;                                                                                             // 796
            if (this.f(input)) {                                                                                       // 797
                this.found = true;                                                                                     // 798
                result = _reduced(this.xf['@@transducer/step'](result, this.idx));                                     // 799
            }                                                                                                          // 800
            return result;                                                                                             // 801
        };                                                                                                             // 802
        return _curry2(function _xfindIndex(f, xf) {                                                                   // 803
            return new XFindIndex(f, xf);                                                                              // 804
        });                                                                                                            // 805
    }();                                                                                                               // 806
                                                                                                                       // 807
    var _xfindLast = function () {                                                                                     // 808
        function XFindLast(f, xf) {                                                                                    // 809
            this.xf = xf;                                                                                              // 810
            this.f = f;                                                                                                // 811
        }                                                                                                              // 812
        XFindLast.prototype['@@transducer/init'] = _xfBase.init;                                                       // 813
        XFindLast.prototype['@@transducer/result'] = function (result) {                                               // 814
            return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));                    // 815
        };                                                                                                             // 816
        XFindLast.prototype['@@transducer/step'] = function (result, input) {                                          // 817
            if (this.f(input)) {                                                                                       // 818
                this.last = input;                                                                                     // 819
            }                                                                                                          // 820
            return result;                                                                                             // 821
        };                                                                                                             // 822
        return _curry2(function _xfindLast(f, xf) {                                                                    // 823
            return new XFindLast(f, xf);                                                                               // 824
        });                                                                                                            // 825
    }();                                                                                                               // 826
                                                                                                                       // 827
    var _xfindLastIndex = function () {                                                                                // 828
        function XFindLastIndex(f, xf) {                                                                               // 829
            this.xf = xf;                                                                                              // 830
            this.f = f;                                                                                                // 831
            this.idx = -1;                                                                                             // 832
            this.lastIdx = -1;                                                                                         // 833
        }                                                                                                              // 834
        XFindLastIndex.prototype['@@transducer/init'] = _xfBase.init;                                                  // 835
        XFindLastIndex.prototype['@@transducer/result'] = function (result) {                                          // 836
            return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));                 // 837
        };                                                                                                             // 838
        XFindLastIndex.prototype['@@transducer/step'] = function (result, input) {                                     // 839
            this.idx += 1;                                                                                             // 840
            if (this.f(input)) {                                                                                       // 841
                this.lastIdx = this.idx;                                                                               // 842
            }                                                                                                          // 843
            return result;                                                                                             // 844
        };                                                                                                             // 845
        return _curry2(function _xfindLastIndex(f, xf) {                                                               // 846
            return new XFindLastIndex(f, xf);                                                                          // 847
        });                                                                                                            // 848
    }();                                                                                                               // 849
                                                                                                                       // 850
    var _xmap = function () {                                                                                          // 851
        function XMap(f, xf) {                                                                                         // 852
            this.xf = xf;                                                                                              // 853
            this.f = f;                                                                                                // 854
        }                                                                                                              // 855
        XMap.prototype['@@transducer/init'] = _xfBase.init;                                                            // 856
        XMap.prototype['@@transducer/result'] = _xfBase.result;                                                        // 857
        XMap.prototype['@@transducer/step'] = function (result, input) {                                               // 858
            return this.xf['@@transducer/step'](result, this.f(input));                                                // 859
        };                                                                                                             // 860
        return _curry2(function _xmap(f, xf) {                                                                         // 861
            return new XMap(f, xf);                                                                                    // 862
        });                                                                                                            // 863
    }();                                                                                                               // 864
                                                                                                                       // 865
    var _xtake = function () {                                                                                         // 866
        function XTake(n, xf) {                                                                                        // 867
            this.xf = xf;                                                                                              // 868
            this.n = n;                                                                                                // 869
        }                                                                                                              // 870
        XTake.prototype['@@transducer/init'] = _xfBase.init;                                                           // 871
        XTake.prototype['@@transducer/result'] = _xfBase.result;                                                       // 872
        XTake.prototype['@@transducer/step'] = function (result, input) {                                              // 873
            if (this.n === 0) {                                                                                        // 874
                return _reduced(result);                                                                               // 875
            } else {                                                                                                   // 876
                this.n -= 1;                                                                                           // 877
                return this.xf['@@transducer/step'](result, input);                                                    // 878
            }                                                                                                          // 879
        };                                                                                                             // 880
        return _curry2(function _xtake(n, xf) {                                                                        // 881
            return new XTake(n, xf);                                                                                   // 882
        });                                                                                                            // 883
    }();                                                                                                               // 884
                                                                                                                       // 885
    var _xtakeWhile = function () {                                                                                    // 886
        function XTakeWhile(f, xf) {                                                                                   // 887
            this.xf = xf;                                                                                              // 888
            this.f = f;                                                                                                // 889
        }                                                                                                              // 890
        XTakeWhile.prototype['@@transducer/init'] = _xfBase.init;                                                      // 891
        XTakeWhile.prototype['@@transducer/result'] = _xfBase.result;                                                  // 892
        XTakeWhile.prototype['@@transducer/step'] = function (result, input) {                                         // 893
            return this.f(input) ? this.xf['@@transducer/step'](result, input) : _reduced(result);                     // 894
        };                                                                                                             // 895
        return _curry2(function _xtakeWhile(f, xf) {                                                                   // 896
            return new XTakeWhile(f, xf);                                                                              // 897
        });                                                                                                            // 898
    }();                                                                                                               // 899
                                                                                                                       // 900
    /**                                                                                                                // 901
     * Adds two numbers. Equivalent to `a + b` but curried.                                                            // 902
     *                                                                                                                 // 903
     * @func                                                                                                           // 904
     * @memberOf R                                                                                                     // 905
     * @since v0.1.0                                                                                                   // 906
     * @category Math                                                                                                  // 907
     * @sig Number -> Number -> Number                                                                                 // 908
     * @param {Number} a                                                                                               // 909
     * @param {Number} b                                                                                               // 910
     * @return {Number}                                                                                                // 911
     * @see R.subtract                                                                                                 // 912
     * @example                                                                                                        // 913
     *                                                                                                                 // 914
     *      R.add(2, 3);       //=>  5                                                                                 // 915
     *      R.add(7)(10);      //=> 17                                                                                 // 916
     */                                                                                                                // 917
    var add = _curry2(function add(a, b) {                                                                             // 918
        return a + b;                                                                                                  // 919
    });                                                                                                                // 920
                                                                                                                       // 921
    /**                                                                                                                // 922
     * Applies a function to the value at the given index of an array, returning a                                     // 923
     * new copy of the array with the element at the given index replaced with the                                     // 924
     * result of the function application.                                                                             // 925
     *                                                                                                                 // 926
     * @func                                                                                                           // 927
     * @memberOf R                                                                                                     // 928
     * @since v0.14.0                                                                                                  // 929
     * @category List                                                                                                  // 930
     * @sig (a -> a) -> Number -> [a] -> [a]                                                                           // 931
     * @param {Function} fn The function to apply.                                                                     // 932
     * @param {Number} idx The index.                                                                                  // 933
     * @param {Array|Arguments} list An array-like object whose value                                                  // 934
     *        at the supplied index will be replaced.                                                                  // 935
     * @return {Array} A copy of the supplied array-like object with                                                   // 936
     *         the element at index `idx` replaced with the value                                                      // 937
     *         returned by applying `fn` to the existing element.                                                      // 938
     * @see R.update                                                                                                   // 939
     * @example                                                                                                        // 940
     *                                                                                                                 // 941
     *      R.adjust(R.add(10), 1, [0, 1, 2]);     //=> [0, 11, 2]                                                     // 942
     *      R.adjust(R.add(10))(1)([0, 1, 2]);     //=> [0, 11, 2]                                                     // 943
     */                                                                                                                // 944
    var adjust = _curry3(function adjust(fn, idx, list) {                                                              // 945
        if (idx >= list.length || idx < -list.length) {                                                                // 946
            return list;                                                                                               // 947
        }                                                                                                              // 948
        var start = idx < 0 ? list.length : 0;                                                                         // 949
        var _idx = start + idx;                                                                                        // 950
        var _list = _concat(list);                                                                                     // 951
        _list[_idx] = fn(list[_idx]);                                                                                  // 952
        return _list;                                                                                                  // 953
    });                                                                                                                // 954
                                                                                                                       // 955
    /**                                                                                                                // 956
     * Returns `true` if all elements of the list match the predicate, `false` if                                      // 957
     * there are any that don't.                                                                                       // 958
     *                                                                                                                 // 959
     * Dispatches to the `all` method of the second argument, if present.                                              // 960
     *                                                                                                                 // 961
     * Acts as a transducer if a transformer is given in list position.                                                // 962
     *                                                                                                                 // 963
     * @func                                                                                                           // 964
     * @memberOf R                                                                                                     // 965
     * @since v0.1.0                                                                                                   // 966
     * @category List                                                                                                  // 967
     * @sig (a -> Boolean) -> [a] -> Boolean                                                                           // 968
     * @param {Function} fn The predicate function.                                                                    // 969
     * @param {Array} list The array to consider.                                                                      // 970
     * @return {Boolean} `true` if the predicate is satisfied by every element, `false`                                // 971
     *         otherwise.                                                                                              // 972
     * @see R.any, R.none, R.transduce                                                                                 // 973
     * @example                                                                                                        // 974
     *                                                                                                                 // 975
     *      var lessThan2 = R.flip(R.lt)(2);                                                                           // 976
     *      var lessThan3 = R.flip(R.lt)(3);                                                                           // 977
     *      R.all(lessThan2)([1, 2]); //=> false                                                                       // 978
     *      R.all(lessThan3)([1, 2]); //=> true                                                                        // 979
     */                                                                                                                // 980
    var all = _curry2(_dispatchable('all', _xall, function all(fn, list) {                                             // 981
        var idx = 0;                                                                                                   // 982
        while (idx < list.length) {                                                                                    // 983
            if (!fn(list[idx])) {                                                                                      // 984
                return false;                                                                                          // 985
            }                                                                                                          // 986
            idx += 1;                                                                                                  // 987
        }                                                                                                              // 988
        return true;                                                                                                   // 989
    }));                                                                                                               // 990
                                                                                                                       // 991
    /**                                                                                                                // 992
     * Returns a function that always returns the given value. Note that for                                           // 993
     * non-primitives the value returned is a reference to the original value.                                         // 994
     *                                                                                                                 // 995
     * This function is known as `const`, `constant`, or `K` (for K combinator) in                                     // 996
     * other languages and libraries.                                                                                  // 997
     *                                                                                                                 // 998
     * @func                                                                                                           // 999
     * @memberOf R                                                                                                     // 1000
     * @since v0.1.0                                                                                                   // 1001
     * @category Function                                                                                              // 1002
     * @sig a -> (* -> a)                                                                                              // 1003
     * @param {*} val The value to wrap in a function                                                                  // 1004
     * @return {Function} A Function :: * -> val.                                                                      // 1005
     * @example                                                                                                        // 1006
     *                                                                                                                 // 1007
     *      var t = R.always('Tee');                                                                                   // 1008
     *      t(); //=> 'Tee'                                                                                            // 1009
     */                                                                                                                // 1010
    var always = _curry1(function always(val) {                                                                        // 1011
        return function () {                                                                                           // 1012
            return val;                                                                                                // 1013
        };                                                                                                             // 1014
    });                                                                                                                // 1015
                                                                                                                       // 1016
    /**                                                                                                                // 1017
     * Returns `true` if both arguments are `true`; `false` otherwise.                                                 // 1018
     *                                                                                                                 // 1019
     * @func                                                                                                           // 1020
     * @memberOf R                                                                                                     // 1021
     * @since v0.1.0                                                                                                   // 1022
     * @category Logic                                                                                                 // 1023
     * @sig * -> * -> *                                                                                                // 1024
     * @param {Boolean} a A boolean value                                                                              // 1025
     * @param {Boolean} b A boolean value                                                                              // 1026
     * @return {Boolean} `true` if both arguments are `true`, `false` otherwise                                        // 1027
     * @see R.both                                                                                                     // 1028
     * @example                                                                                                        // 1029
     *                                                                                                                 // 1030
     *      R.and(true, true); //=> true                                                                               // 1031
     *      R.and(true, false); //=> false                                                                             // 1032
     *      R.and(false, true); //=> false                                                                             // 1033
     *      R.and(false, false); //=> false                                                                            // 1034
     */                                                                                                                // 1035
    var and = _curry2(function and(a, b) {                                                                             // 1036
        return a && b;                                                                                                 // 1037
    });                                                                                                                // 1038
                                                                                                                       // 1039
    /**                                                                                                                // 1040
     * Returns `true` if at least one of elements of the list match the predicate,                                     // 1041
     * `false` otherwise.                                                                                              // 1042
     *                                                                                                                 // 1043
     * Dispatches to the `any` method of the second argument, if present.                                              // 1044
     *                                                                                                                 // 1045
     * Acts as a transducer if a transformer is given in list position.                                                // 1046
     *                                                                                                                 // 1047
     * @func                                                                                                           // 1048
     * @memberOf R                                                                                                     // 1049
     * @since v0.1.0                                                                                                   // 1050
     * @category List                                                                                                  // 1051
     * @sig (a -> Boolean) -> [a] -> Boolean                                                                           // 1052
     * @param {Function} fn The predicate function.                                                                    // 1053
     * @param {Array} list The array to consider.                                                                      // 1054
     * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`                         // 1055
     *         otherwise.                                                                                              // 1056
     * @see R.all, R.none, R.transduce                                                                                 // 1057
     * @example                                                                                                        // 1058
     *                                                                                                                 // 1059
     *      var lessThan0 = R.flip(R.lt)(0);                                                                           // 1060
     *      var lessThan2 = R.flip(R.lt)(2);                                                                           // 1061
     *      R.any(lessThan0)([1, 2]); //=> false                                                                       // 1062
     *      R.any(lessThan2)([1, 2]); //=> true                                                                        // 1063
     */                                                                                                                // 1064
    var any = _curry2(_dispatchable('any', _xany, function any(fn, list) {                                             // 1065
        var idx = 0;                                                                                                   // 1066
        while (idx < list.length) {                                                                                    // 1067
            if (fn(list[idx])) {                                                                                       // 1068
                return true;                                                                                           // 1069
            }                                                                                                          // 1070
            idx += 1;                                                                                                  // 1071
        }                                                                                                              // 1072
        return false;                                                                                                  // 1073
    }));                                                                                                               // 1074
                                                                                                                       // 1075
    /**                                                                                                                // 1076
     * Returns a new list, composed of n-tuples of consecutive elements If `n` is                                      // 1077
     * greater than the length of the list, an empty list is returned.                                                 // 1078
     *                                                                                                                 // 1079
     * Dispatches to the `aperture` method of the second argument, if present.                                         // 1080
     *                                                                                                                 // 1081
     * Acts as a transducer if a transformer is given in list position.                                                // 1082
     *                                                                                                                 // 1083
     * @func                                                                                                           // 1084
     * @memberOf R                                                                                                     // 1085
     * @since v0.12.0                                                                                                  // 1086
     * @category List                                                                                                  // 1087
     * @sig Number -> [a] -> [[a]]                                                                                     // 1088
     * @param {Number} n The size of the tuples to create                                                              // 1089
     * @param {Array} list The list to split into `n`-tuples                                                           // 1090
     * @return {Array} The new list.                                                                                   // 1091
     * @see R.transduce                                                                                                // 1092
     * @example                                                                                                        // 1093
     *                                                                                                                 // 1094
     *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]                                      // 1095
     *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]                                     // 1096
     *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []                                                                    // 1097
     */                                                                                                                // 1098
    var aperture = _curry2(_dispatchable('aperture', _xaperture, _aperture));                                          // 1099
                                                                                                                       // 1100
    /**                                                                                                                // 1101
     * Returns a new list containing the contents of the given list, followed by                                       // 1102
     * the given element.                                                                                              // 1103
     *                                                                                                                 // 1104
     * @func                                                                                                           // 1105
     * @memberOf R                                                                                                     // 1106
     * @since v0.1.0                                                                                                   // 1107
     * @category List                                                                                                  // 1108
     * @sig a -> [a] -> [a]                                                                                            // 1109
     * @param {*} el The element to add to the end of the new list.                                                    // 1110
     * @param {Array} list The list whose contents will be added to the beginning of the output                        // 1111
     *        list.                                                                                                    // 1112
     * @return {Array} A new list containing the contents of the old list followed by `el`.                            // 1113
     * @see R.prepend                                                                                                  // 1114
     * @example                                                                                                        // 1115
     *                                                                                                                 // 1116
     *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']                                      // 1117
     *      R.append('tests', []); //=> ['tests']                                                                      // 1118
     *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]                                  // 1119
     */                                                                                                                // 1120
    var append = _curry2(function append(el, list) {                                                                   // 1121
        return _concat(list, [el]);                                                                                    // 1122
    });                                                                                                                // 1123
                                                                                                                       // 1124
    /**                                                                                                                // 1125
     * Applies function `fn` to the argument list `args`. This is useful for                                           // 1126
     * creating a fixed-arity function from a variadic function. `fn` should be a                                      // 1127
     * bound function if context is significant.                                                                       // 1128
     *                                                                                                                 // 1129
     * @func                                                                                                           // 1130
     * @memberOf R                                                                                                     // 1131
     * @since v0.7.0                                                                                                   // 1132
     * @category Function                                                                                              // 1133
     * @sig (*... -> a) -> [*] -> a                                                                                    // 1134
     * @param {Function} fn                                                                                            // 1135
     * @param {Array} args                                                                                             // 1136
     * @return {*}                                                                                                     // 1137
     * @see R.call, R.unapply                                                                                          // 1138
     * @example                                                                                                        // 1139
     *                                                                                                                 // 1140
     *      var nums = [1, 2, 3, -99, 42, 6, 7];                                                                       // 1141
     *      R.apply(Math.max, nums); //=> 42                                                                           // 1142
     */                                                                                                                // 1143
    var apply = _curry2(function apply(fn, args) {                                                                     // 1144
        return fn.apply(this, args);                                                                                   // 1145
    });                                                                                                                // 1146
                                                                                                                       // 1147
    /**                                                                                                                // 1148
     * Makes a shallow clone of an object, setting or overriding the specified                                         // 1149
     * property with the given value. Note that this copies and flattens prototype                                     // 1150
     * properties onto the new object as well. All non-primitive properties are                                        // 1151
     * copied by reference.                                                                                            // 1152
     *                                                                                                                 // 1153
     * @func                                                                                                           // 1154
     * @memberOf R                                                                                                     // 1155
     * @since v0.8.0                                                                                                   // 1156
     * @category Object                                                                                                // 1157
     * @sig String -> a -> {k: v} -> {k: v}                                                                            // 1158
     * @param {String} prop the property name to set                                                                   // 1159
     * @param {*} val the new value                                                                                    // 1160
     * @param {Object} obj the object to clone                                                                         // 1161
     * @return {Object} a new object similar to the original except for the specified property.                        // 1162
     * @see R.dissoc                                                                                                   // 1163
     * @example                                                                                                        // 1164
     *                                                                                                                 // 1165
     *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}                                                     // 1166
     */                                                                                                                // 1167
    var assoc = _curry3(function assoc(prop, val, obj) {                                                               // 1168
        var result = {};                                                                                               // 1169
        for (var p in obj) {                                                                                           // 1170
            result[p] = obj[p];                                                                                        // 1171
        }                                                                                                              // 1172
        result[prop] = val;                                                                                            // 1173
        return result;                                                                                                 // 1174
    });                                                                                                                // 1175
                                                                                                                       // 1176
    /**                                                                                                                // 1177
     * Makes a shallow clone of an object, setting or overriding the nodes required                                    // 1178
     * to create the given path, and placing the specific value at the tail end of                                     // 1179
     * that path. Note that this copies and flattens prototype properties onto the                                     // 1180
     * new object as well. All non-primitive properties are copied by reference.                                       // 1181
     *                                                                                                                 // 1182
     * @func                                                                                                           // 1183
     * @memberOf R                                                                                                     // 1184
     * @since v0.8.0                                                                                                   // 1185
     * @category Object                                                                                                // 1186
     * @sig [String] -> a -> {k: v} -> {k: v}                                                                          // 1187
     * @param {Array} path the path to set                                                                             // 1188
     * @param {*} val the new value                                                                                    // 1189
     * @param {Object} obj the object to clone                                                                         // 1190
     * @return {Object} a new object similar to the original except along the specified path.                          // 1191
     * @see R.dissocPath                                                                                               // 1192
     * @example                                                                                                        // 1193
     *                                                                                                                 // 1194
     *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}                                 // 1195
     */                                                                                                                // 1196
    var assocPath = _curry3(function assocPath(path, val, obj) {                                                       // 1197
        switch (path.length) {                                                                                         // 1198
        case 0:                                                                                                        // 1199
            return val;                                                                                                // 1200
        case 1:                                                                                                        // 1201
            return assoc(path[0], val, obj);                                                                           // 1202
        default:                                                                                                       // 1203
            return assoc(path[0], assocPath(_slice(path, 1), val, Object(obj[path[0]])), obj);                         // 1204
        }                                                                                                              // 1205
    });                                                                                                                // 1206
                                                                                                                       // 1207
    /**                                                                                                                // 1208
     * Creates a function that is bound to a context.                                                                  // 1209
     * Note: `R.bind` does not provide the additional argument-binding capabilities of                                 // 1210
     * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
     *                                                                                                                 // 1212
     * @func                                                                                                           // 1213
     * @memberOf R                                                                                                     // 1214
     * @since v0.6.0                                                                                                   // 1215
     * @category Function                                                                                              // 1216
     * @category Object                                                                                                // 1217
     * @sig (* -> *) -> {*} -> (* -> *)                                                                                // 1218
     * @param {Function} fn The function to bind to context                                                            // 1219
     * @param {Object} thisObj The context to bind `fn` to                                                             // 1220
     * @return {Function} A function that will execute in the context of `thisObj`.                                    // 1221
     * @see R.partial                                                                                                  // 1222
     */                                                                                                                // 1223
    var bind = _curry2(function bind(fn, thisObj) {                                                                    // 1224
        return _arity(fn.length, function () {                                                                         // 1225
            return fn.apply(thisObj, arguments);                                                                       // 1226
        });                                                                                                            // 1227
    });                                                                                                                // 1228
                                                                                                                       // 1229
    /**                                                                                                                // 1230
     * A function wrapping calls to the two functions in an `&&` operation,                                            // 1231
     * returning the result of the first function if it is false-y and the result                                      // 1232
     * of the second function otherwise. Note that this is short-circuited,                                            // 1233
     * meaning that the second function will not be invoked if the first returns a                                     // 1234
     * false-y value.                                                                                                  // 1235
     *                                                                                                                 // 1236
     * @func                                                                                                           // 1237
     * @memberOf R                                                                                                     // 1238
     * @since v0.12.0                                                                                                  // 1239
     * @category Logic                                                                                                 // 1240
     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)                                                // 1241
     * @param {Function} f a predicate                                                                                 // 1242
     * @param {Function} g another predicate                                                                           // 1243
     * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.       // 1244
     * @see R.and                                                                                                      // 1245
     * @example                                                                                                        // 1246
     *                                                                                                                 // 1247
     *      var gt10 = x => x > 10;                                                                                    // 1248
     *      var even = x => x % 2 === 0;                                                                               // 1249
     *      var f = R.both(gt10, even);                                                                                // 1250
     *      f(100); //=> true                                                                                          // 1251
     *      f(101); //=> false                                                                                         // 1252
     */                                                                                                                // 1253
    var both = _curry2(function both(f, g) {                                                                           // 1254
        return function _both() {                                                                                      // 1255
            return f.apply(this, arguments) && g.apply(this, arguments);                                               // 1256
        };                                                                                                             // 1257
    });                                                                                                                // 1258
                                                                                                                       // 1259
    /**                                                                                                                // 1260
     * Makes a comparator function out of a function that reports whether the first                                    // 1261
     * element is less than the second.                                                                                // 1262
     *                                                                                                                 // 1263
     * @func                                                                                                           // 1264
     * @memberOf R                                                                                                     // 1265
     * @since v0.1.0                                                                                                   // 1266
     * @category Function                                                                                              // 1267
     * @sig (a, b -> Boolean) -> (a, b -> Number)                                                                      // 1268
     * @param {Function} pred A predicate function of arity two.                                                       // 1269
     * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`.         // 1270
     * @example                                                                                                        // 1271
     *                                                                                                                 // 1272
     *      var cmp = R.comparator((a, b) => a.age < b.age);                                                           // 1273
     *      var people = [                                                                                             // 1274
     *        // ...                                                                                                   // 1275
     *      ];                                                                                                         // 1276
     *      R.sort(cmp, people);                                                                                       // 1277
     */                                                                                                                // 1278
    var comparator = _curry1(function comparator(pred) {                                                               // 1279
        return function (a, b) {                                                                                       // 1280
            return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;                                                               // 1281
        };                                                                                                             // 1282
    });                                                                                                                // 1283
                                                                                                                       // 1284
    /**                                                                                                                // 1285
     * Returns a function, `fn`, which encapsulates if/else-if/else logic.                                             // 1286
     * `R.cond` takes a list of [predicate, transform] pairs. All of the arguments                                     // 1287
     * to `fn` are applied to each of the predicates in turn until one returns a                                       // 1288
     * "truthy" value, at which point `fn` returns the result of applying its                                          // 1289
     * arguments to the corresponding transformer. If none of the predicates                                           // 1290
     * matches, `fn` returns undefined.                                                                                // 1291
     *                                                                                                                 // 1292
     * @func                                                                                                           // 1293
     * @memberOf R                                                                                                     // 1294
     * @since v0.6.0                                                                                                   // 1295
     * @category Logic                                                                                                 // 1296
     * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)                                                           // 1297
     * @param {Array} pairs                                                                                            // 1298
     * @return {Function}                                                                                              // 1299
     * @example                                                                                                        // 1300
     *                                                                                                                 // 1301
     *      var fn = R.cond([                                                                                          // 1302
     *        [R.equals(0),   R.always('water freezes at 0°C')],                                                       // 1303
     *        [R.equals(100), R.always('water boils at 100°C')],                                                       // 1304
     *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']                                     // 1305
     *      ]);                                                                                                        // 1306
     *      fn(0); //=> 'water freezes at 0°C'                                                                         // 1307
     *      fn(50); //=> 'nothing special happens at 50°C'                                                             // 1308
     *      fn(100); //=> 'water boils at 100°C'                                                                       // 1309
     */                                                                                                                // 1310
    var cond = _curry1(function cond(pairs) {                                                                          // 1311
        return function () {                                                                                           // 1312
            var idx = 0;                                                                                               // 1313
            while (idx < pairs.length) {                                                                               // 1314
                if (pairs[idx][0].apply(this, arguments)) {                                                            // 1315
                    return pairs[idx][1].apply(this, arguments);                                                       // 1316
                }                                                                                                      // 1317
                idx += 1;                                                                                              // 1318
            }                                                                                                          // 1319
        };                                                                                                             // 1320
    });                                                                                                                // 1321
                                                                                                                       // 1322
    /**                                                                                                                // 1323
     * Counts the elements of a list according to how many match each value of a                                       // 1324
     * key generated by the supplied function. Returns an object mapping the keys                                      // 1325
     * produced by `fn` to the number of occurrences in the list. Note that all                                        // 1326
     * keys are coerced to strings because of how JavaScript objects work.                                             // 1327
     *                                                                                                                 // 1328
     * @func                                                                                                           // 1329
     * @memberOf R                                                                                                     // 1330
     * @since v0.1.0                                                                                                   // 1331
     * @category Relation                                                                                              // 1332
     * @sig (a -> String) -> [a] -> {*}                                                                                // 1333
     * @param {Function} fn The function used to map values to keys.                                                   // 1334
     * @param {Array} list The list to count elements from.                                                            // 1335
     * @return {Object} An object mapping keys to number of occurrences in the list.                                   // 1336
     * @example                                                                                                        // 1337
     *                                                                                                                 // 1338
     *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];                                                              // 1339
     *      var letters = R.split('', 'abcABCaaaBBc');                                                                 // 1340
     *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}                                           // 1341
     *      R.countBy(R.toLower)(letters);   //=> {'a': 5, 'b': 4, 'c': 3}                                             // 1342
     */                                                                                                                // 1343
    var countBy = _curry2(function countBy(fn, list) {                                                                 // 1344
        var counts = {};                                                                                               // 1345
        var len = list.length;                                                                                         // 1346
        var idx = 0;                                                                                                   // 1347
        while (idx < len) {                                                                                            // 1348
            var key = fn(list[idx]);                                                                                   // 1349
            counts[key] = (_has(key, counts) ? counts[key] : 0) + 1;                                                   // 1350
            idx += 1;                                                                                                  // 1351
        }                                                                                                              // 1352
        return counts;                                                                                                 // 1353
    });                                                                                                                // 1354
                                                                                                                       // 1355
    /**                                                                                                                // 1356
     * Returns a curried equivalent of the provided function, with the specified                                       // 1357
     * arity. The curried function has two unusual capabilities. First, its                                            // 1358
     * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the                                    // 1359
     * following are equivalent:                                                                                       // 1360
     *                                                                                                                 // 1361
     *   - `g(1)(2)(3)`                                                                                                // 1362
     *   - `g(1)(2, 3)`                                                                                                // 1363
     *   - `g(1, 2)(3)`                                                                                                // 1364
     *   - `g(1, 2, 3)`                                                                                                // 1365
     *                                                                                                                 // 1366
     * Secondly, the special placeholder value `R.__` may be used to specify                                           // 1367
     * "gaps", allowing partial application of any combination of arguments,                                           // 1368
     * regardless of their positions. If `g` is as above and `_` is `R.__`, the                                        // 1369
     * following are equivalent:                                                                                       // 1370
     *                                                                                                                 // 1371
     *   - `g(1, 2, 3)`                                                                                                // 1372
     *   - `g(_, 2, 3)(1)`                                                                                             // 1373
     *   - `g(_, _, 3)(1)(2)`                                                                                          // 1374
     *   - `g(_, _, 3)(1, 2)`                                                                                          // 1375
     *   - `g(_, 2)(1)(3)`                                                                                             // 1376
     *   - `g(_, 2)(1, 3)`                                                                                             // 1377
     *   - `g(_, 2)(_, 3)(1)`                                                                                          // 1378
     *                                                                                                                 // 1379
     * @func                                                                                                           // 1380
     * @memberOf R                                                                                                     // 1381
     * @since v0.5.0                                                                                                   // 1382
     * @category Function                                                                                              // 1383
     * @sig Number -> (* -> a) -> (* -> a)                                                                             // 1384
     * @param {Number} length The arity for the returned function.                                                     // 1385
     * @param {Function} fn The function to curry.                                                                     // 1386
     * @return {Function} A new, curried function.                                                                     // 1387
     * @see R.curry                                                                                                    // 1388
     * @example                                                                                                        // 1389
     *                                                                                                                 // 1390
     *      var sumArgs = (...args) => R.sum(args);                                                                    // 1391
     *                                                                                                                 // 1392
     *      var curriedAddFourNumbers = R.curryN(4, sumArgs);                                                          // 1393
     *      var f = curriedAddFourNumbers(1, 2);                                                                       // 1394
     *      var g = f(3);                                                                                              // 1395
     *      g(4); //=> 10                                                                                              // 1396
     */                                                                                                                // 1397
    var curryN = _curry2(function curryN(length, fn) {                                                                 // 1398
        if (length === 1) {                                                                                            // 1399
            return _curry1(fn);                                                                                        // 1400
        }                                                                                                              // 1401
        return _arity(length, _curryN(length, [], fn));                                                                // 1402
    });                                                                                                                // 1403
                                                                                                                       // 1404
    /**                                                                                                                // 1405
     * Decrements its argument.                                                                                        // 1406
     *                                                                                                                 // 1407
     * @func                                                                                                           // 1408
     * @memberOf R                                                                                                     // 1409
     * @since v0.9.0                                                                                                   // 1410
     * @category Math                                                                                                  // 1411
     * @sig Number -> Number                                                                                           // 1412
     * @param {Number} n                                                                                               // 1413
     * @return {Number}                                                                                                // 1414
     * @see R.inc                                                                                                      // 1415
     * @example                                                                                                        // 1416
     *                                                                                                                 // 1417
     *      R.dec(42); //=> 41                                                                                         // 1418
     */                                                                                                                // 1419
    var dec = add(-1);                                                                                                 // 1420
                                                                                                                       // 1421
    /**                                                                                                                // 1422
     * Returns the second argument if it is not `null`, `undefined` or `NaN`                                           // 1423
     * otherwise the first argument is returned.                                                                       // 1424
     *                                                                                                                 // 1425
     * @func                                                                                                           // 1426
     * @memberOf R                                                                                                     // 1427
     * @since v0.10.0                                                                                                  // 1428
     * @category Logic                                                                                                 // 1429
     * @sig a -> b -> a | b                                                                                            // 1430
     * @param {a} val The default value.                                                                               // 1431
     * @param {b} val The value to return if it is not null or undefined                                               // 1432
     * @return {*} The the second value or the default value                                                           // 1433
     * @example                                                                                                        // 1434
     *                                                                                                                 // 1435
     *      var defaultTo42 = R.defaultTo(42);                                                                         // 1436
     *                                                                                                                 // 1437
     *      defaultTo42(null);  //=> 42                                                                                // 1438
     *      defaultTo42(undefined);  //=> 42                                                                           // 1439
     *      defaultTo42('Ramda');  //=> 'Ramda'                                                                        // 1440
     *      defaultTo42(parseInt('string')); //=> 42                                                                   // 1441
     */                                                                                                                // 1442
    var defaultTo = _curry2(function defaultTo(d, v) {                                                                 // 1443
        return v == null || v !== v ? d : v;                                                                           // 1444
    });                                                                                                                // 1445
                                                                                                                       // 1446
    /**                                                                                                                // 1447
     * Finds the set (i.e. no duplicates) of all elements in the first list not                                        // 1448
     * contained in the second list. Duplication is determined according to the                                        // 1449
     * value returned by applying the supplied predicate to two list elements.                                         // 1450
     *                                                                                                                 // 1451
     * @func                                                                                                           // 1452
     * @memberOf R                                                                                                     // 1453
     * @since v0.1.0                                                                                                   // 1454
     * @category Relation                                                                                              // 1455
     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]                                                                   // 1456
     * @param {Function} pred A predicate used to test whether two items are equal.                                    // 1457
     * @param {Array} list1 The first list.                                                                            // 1458
     * @param {Array} list2 The second list.                                                                           // 1459
     * @return {Array} The elements in `list1` that are not in `list2`.                                                // 1460
     * @see R.difference                                                                                               // 1461
     * @example                                                                                                        // 1462
     *                                                                                                                 // 1463
     *      function cmp(x, y) => x.a === y.a;                                                                         // 1464
     *      var l1 = [{a: 1}, {a: 2}, {a: 3}];                                                                         // 1465
     *      var l2 = [{a: 3}, {a: 4}];                                                                                 // 1466
     *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]                                                       // 1467
     */                                                                                                                // 1468
    var differenceWith = _curry3(function differenceWith(pred, first, second) {                                        // 1469
        var out = [];                                                                                                  // 1470
        var idx = 0;                                                                                                   // 1471
        var firstLen = first.length;                                                                                   // 1472
        while (idx < firstLen) {                                                                                       // 1473
            if (!_containsWith(pred, first[idx], second) && !_containsWith(pred, first[idx], out)) {                   // 1474
                out.push(first[idx]);                                                                                  // 1475
            }                                                                                                          // 1476
            idx += 1;                                                                                                  // 1477
        }                                                                                                              // 1478
        return out;                                                                                                    // 1479
    });                                                                                                                // 1480
                                                                                                                       // 1481
    /**                                                                                                                // 1482
     * Returns a new object that does not contain a `prop` property.                                                   // 1483
     *                                                                                                                 // 1484
     * @func                                                                                                           // 1485
     * @memberOf R                                                                                                     // 1486
     * @since v0.10.0                                                                                                  // 1487
     * @category Object                                                                                                // 1488
     * @sig String -> {k: v} -> {k: v}                                                                                 // 1489
     * @param {String} prop the name of the property to dissociate                                                     // 1490
     * @param {Object} obj the object to clone                                                                         // 1491
     * @return {Object} a new object similar to the original but without the specified property                        // 1492
     * @see R.assoc                                                                                                    // 1493
     * @example                                                                                                        // 1494
     *                                                                                                                 // 1495
     *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}                                                       // 1496
     */                                                                                                                // 1497
    var dissoc = _curry2(function dissoc(prop, obj) {                                                                  // 1498
        var result = {};                                                                                               // 1499
        for (var p in obj) {                                                                                           // 1500
            if (p !== prop) {                                                                                          // 1501
                result[p] = obj[p];                                                                                    // 1502
            }                                                                                                          // 1503
        }                                                                                                              // 1504
        return result;                                                                                                 // 1505
    });                                                                                                                // 1506
                                                                                                                       // 1507
    /**                                                                                                                // 1508
     * Makes a shallow clone of an object, omitting the property at the given path.                                    // 1509
     * Note that this copies and flattens prototype properties onto the new object                                     // 1510
     * as well. All non-primitive properties are copied by reference.                                                  // 1511
     *                                                                                                                 // 1512
     * @func                                                                                                           // 1513
     * @memberOf R                                                                                                     // 1514
     * @since v0.11.0                                                                                                  // 1515
     * @category Object                                                                                                // 1516
     * @sig [String] -> {k: v} -> {k: v}                                                                               // 1517
     * @param {Array} path the path to set                                                                             // 1518
     * @param {Object} obj the object to clone                                                                         // 1519
     * @return {Object} a new object without the property at path                                                      // 1520
     * @see R.assocPath                                                                                                // 1521
     * @example                                                                                                        // 1522
     *                                                                                                                 // 1523
     *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}                                        // 1524
     */                                                                                                                // 1525
    var dissocPath = _curry2(function dissocPath(path, obj) {                                                          // 1526
        switch (path.length) {                                                                                         // 1527
        case 0:                                                                                                        // 1528
            return obj;                                                                                                // 1529
        case 1:                                                                                                        // 1530
            return dissoc(path[0], obj);                                                                               // 1531
        default:                                                                                                       // 1532
            var head = path[0];                                                                                        // 1533
            var tail = _slice(path, 1);                                                                                // 1534
            return obj[head] == null ? obj : assoc(head, dissocPath(tail, obj[head]), obj);                            // 1535
        }                                                                                                              // 1536
    });                                                                                                                // 1537
                                                                                                                       // 1538
    /**                                                                                                                // 1539
     * Divides two numbers. Equivalent to `a / b`.                                                                     // 1540
     *                                                                                                                 // 1541
     * @func                                                                                                           // 1542
     * @memberOf R                                                                                                     // 1543
     * @since v0.1.0                                                                                                   // 1544
     * @category Math                                                                                                  // 1545
     * @sig Number -> Number -> Number                                                                                 // 1546
     * @param {Number} a The first value.                                                                              // 1547
     * @param {Number} b The second value.                                                                             // 1548
     * @return {Number} The result of `a / b`.                                                                         // 1549
     * @see R.multiply                                                                                                 // 1550
     * @example                                                                                                        // 1551
     *                                                                                                                 // 1552
     *      R.divide(71, 100); //=> 0.71                                                                               // 1553
     *                                                                                                                 // 1554
     *      var half = R.divide(R.__, 2);                                                                              // 1555
     *      half(42); //=> 21                                                                                          // 1556
     *                                                                                                                 // 1557
     *      var reciprocal = R.divide(1);                                                                              // 1558
     *      reciprocal(4);   //=> 0.25                                                                                 // 1559
     */                                                                                                                // 1560
    var divide = _curry2(function divide(a, b) {                                                                       // 1561
        return a / b;                                                                                                  // 1562
    });                                                                                                                // 1563
                                                                                                                       // 1564
    /**                                                                                                                // 1565
     * Returns a new list containing the last `n` elements of a given list, passing                                    // 1566
     * each value to the supplied predicate function, skipping elements while the                                      // 1567
     * predicate function returns `true`. The predicate function is passed one                                         // 1568
     * argument: *(value)*.                                                                                            // 1569
     *                                                                                                                 // 1570
     * Dispatches to the `dropWhile` method of the second argument, if present.                                        // 1571
     *                                                                                                                 // 1572
     * Acts as a transducer if a transformer is given in list position.                                                // 1573
     *                                                                                                                 // 1574
     * @func                                                                                                           // 1575
     * @memberOf R                                                                                                     // 1576
     * @since v0.9.0                                                                                                   // 1577
     * @category List                                                                                                  // 1578
     * @sig (a -> Boolean) -> [a] -> [a]                                                                               // 1579
     * @param {Function} fn The function called per iteration.                                                         // 1580
     * @param {Array} list The collection to iterate over.                                                             // 1581
     * @return {Array} A new array.                                                                                    // 1582
     * @see R.takeWhile, R.transduce, R.addIndex                                                                       // 1583
     * @example                                                                                                        // 1584
     *                                                                                                                 // 1585
     *      var lteTwo = x => x <= 2;                                                                                  // 1586
     *                                                                                                                 // 1587
     *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]                                           // 1588
     */                                                                                                                // 1589
    var dropWhile = _curry2(_dispatchable('dropWhile', _xdropWhile, function dropWhile(pred, list) {                   // 1590
        var idx = 0;                                                                                                   // 1591
        var len = list.length;                                                                                         // 1592
        while (idx < len && pred(list[idx])) {                                                                         // 1593
            idx += 1;                                                                                                  // 1594
        }                                                                                                              // 1595
        return _slice(list, idx);                                                                                      // 1596
    }));                                                                                                               // 1597
                                                                                                                       // 1598
    /**                                                                                                                // 1599
     * A function wrapping calls to the two functions in an `||` operation,                                            // 1600
     * returning the result of the first function if it is truth-y and the result                                      // 1601
     * of the second function otherwise. Note that this is short-circuited,                                            // 1602
     * meaning that the second function will not be invoked if the first returns a                                     // 1603
     * truth-y value.                                                                                                  // 1604
     *                                                                                                                 // 1605
     * @func                                                                                                           // 1606
     * @memberOf R                                                                                                     // 1607
     * @since v0.12.0                                                                                                  // 1608
     * @category Logic                                                                                                 // 1609
     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)                                                // 1610
     * @param {Function} f a predicate                                                                                 // 1611
     * @param {Function} g another predicate                                                                           // 1612
     * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.       // 1613
     * @see R.or                                                                                                       // 1614
     * @example                                                                                                        // 1615
     *                                                                                                                 // 1616
     *      var gt10 = x => x > 10;                                                                                    // 1617
     *      var even = x => x % 2 === 0;                                                                               // 1618
     *      var f = R.either(gt10, even);                                                                              // 1619
     *      f(101); //=> true                                                                                          // 1620
     *      f(8); //=> true                                                                                            // 1621
     */                                                                                                                // 1622
    var either = _curry2(function either(f, g) {                                                                       // 1623
        return function _either() {                                                                                    // 1624
            return f.apply(this, arguments) || g.apply(this, arguments);                                               // 1625
        };                                                                                                             // 1626
    });                                                                                                                // 1627
                                                                                                                       // 1628
    /**                                                                                                                // 1629
     * Returns the empty value of its argument's type. Ramda defines the empty                                         // 1630
     * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other                                       // 1631
     * types are supported if they define `<Type>.empty` and/or                                                        // 1632
     * `<Type>.prototype.empty`.                                                                                       // 1633
     *                                                                                                                 // 1634
     * Dispatches to the `empty` method of the first argument, if present.                                             // 1635
     *                                                                                                                 // 1636
     * @func                                                                                                           // 1637
     * @memberOf R                                                                                                     // 1638
     * @since v0.3.0                                                                                                   // 1639
     * @category Function                                                                                              // 1640
     * @sig a -> a                                                                                                     // 1641
     * @param {*} x                                                                                                    // 1642
     * @return {*}                                                                                                     // 1643
     * @example                                                                                                        // 1644
     *                                                                                                                 // 1645
     *      R.empty(Just(42));      //=> Nothing()                                                                     // 1646
     *      R.empty([1, 2, 3]);     //=> []                                                                            // 1647
     *      R.empty('unicorns');    //=> ''                                                                            // 1648
     *      R.empty({x: 1, y: 2});  //=> {}                                                                            // 1649
     */                                                                                                                // 1650
    // else                                                                                                            // 1651
    var empty = _curry1(function empty(x) {                                                                            // 1652
        return x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? '' : _isObject(x) ? {} : _isArguments(x) ? function () {
            return arguments;                                                                                          // 1654
        }() : // else                                                                                                  // 1655
        void 0;                                                                                                        // 1656
    });                                                                                                                // 1657
                                                                                                                       // 1658
    /**                                                                                                                // 1659
     * Creates a new object by recursively evolving a shallow copy of `object`,                                        // 1660
     * according to the `transformation` functions. All non-primitive properties                                       // 1661
     * are copied by reference.                                                                                        // 1662
     *                                                                                                                 // 1663
     * A `transformation` function will not be invoked if its corresponding key                                        // 1664
     * does not exist in the evolved object.                                                                           // 1665
     *                                                                                                                 // 1666
     * @func                                                                                                           // 1667
     * @memberOf R                                                                                                     // 1668
     * @since v0.9.0                                                                                                   // 1669
     * @category Object                                                                                                // 1670
     * @sig {k: (v -> v)} -> {k: v} -> {k: v}                                                                          // 1671
     * @param {Object} transformations The object specifying transformation functions to apply                         // 1672
     *        to the object.                                                                                           // 1673
     * @param {Object} object The object to be transformed.                                                            // 1674
     * @return {Object} The transformed object.                                                                        // 1675
     * @example                                                                                                        // 1676
     *                                                                                                                 // 1677
     *      var tomato  = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};                     // 1678
     *      var transformations = {                                                                                    // 1679
     *        firstName: R.trim,                                                                                       // 1680
     *        lastName: R.trim, // Will not get invoked.                                                               // 1681
     *        data: {elapsed: R.add(1), remaining: R.add(-1)}                                                          // 1682
     *      };                                                                                                         // 1683
     *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}
     */                                                                                                                // 1685
    var evolve = _curry2(function evolve(transformations, object) {                                                    // 1686
        var result = {};                                                                                               // 1687
        var transformation, key, type;                                                                                 // 1688
        for (key in object) {                                                                                          // 1689
            transformation = transformations[key];                                                                     // 1690
            type = typeof transformation;                                                                              // 1691
            result[key] = type === 'function' ? transformation(object[key]) : type === 'object' ? evolve(transformations[key], object[key]) : object[key];
        }                                                                                                              // 1693
        return result;                                                                                                 // 1694
    });                                                                                                                // 1695
                                                                                                                       // 1696
    /**                                                                                                                // 1697
     * Returns the first element of the list which matches the predicate, or                                           // 1698
     * `undefined` if no element matches.                                                                              // 1699
     *                                                                                                                 // 1700
     * Dispatches to the `find` method of the second argument, if present.                                             // 1701
     *                                                                                                                 // 1702
     * Acts as a transducer if a transformer is given in list position.                                                // 1703
     *                                                                                                                 // 1704
     * @func                                                                                                           // 1705
     * @memberOf R                                                                                                     // 1706
     * @since v0.1.0                                                                                                   // 1707
     * @category List                                                                                                  // 1708
     * @sig (a -> Boolean) -> [a] -> a | undefined                                                                     // 1709
     * @param {Function} fn The predicate function used to determine if the element is the                             // 1710
     *        desired one.                                                                                             // 1711
     * @param {Array} list The array to consider.                                                                      // 1712
     * @return {Object} The element found, or `undefined`.                                                             // 1713
     * @see R.transduce                                                                                                // 1714
     * @example                                                                                                        // 1715
     *                                                                                                                 // 1716
     *      var xs = [{a: 1}, {a: 2}, {a: 3}];                                                                         // 1717
     *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}                                                                  // 1718
     *      R.find(R.propEq('a', 4))(xs); //=> undefined                                                               // 1719
     */                                                                                                                // 1720
    var find = _curry2(_dispatchable('find', _xfind, function find(fn, list) {                                         // 1721
        var idx = 0;                                                                                                   // 1722
        var len = list.length;                                                                                         // 1723
        while (idx < len) {                                                                                            // 1724
            if (fn(list[idx])) {                                                                                       // 1725
                return list[idx];                                                                                      // 1726
            }                                                                                                          // 1727
            idx += 1;                                                                                                  // 1728
        }                                                                                                              // 1729
    }));                                                                                                               // 1730
                                                                                                                       // 1731
    /**                                                                                                                // 1732
     * Returns the index of the first element of the list which matches the                                            // 1733
     * predicate, or `-1` if no element matches.                                                                       // 1734
     *                                                                                                                 // 1735
     * Dispatches to the `findIndex` method of the second argument, if present.                                        // 1736
     *                                                                                                                 // 1737
     * Acts as a transducer if a transformer is given in list position.                                                // 1738
     *                                                                                                                 // 1739
     * @func                                                                                                           // 1740
     * @memberOf R                                                                                                     // 1741
     * @since v0.1.1                                                                                                   // 1742
     * @category List                                                                                                  // 1743
     * @sig (a -> Boolean) -> [a] -> Number                                                                            // 1744
     * @param {Function} fn The predicate function used to determine if the element is the                             // 1745
     * desired one.                                                                                                    // 1746
     * @param {Array} list The array to consider.                                                                      // 1747
     * @return {Number} The index of the element found, or `-1`.                                                       // 1748
     * @see R.transduce                                                                                                // 1749
     * @example                                                                                                        // 1750
     *                                                                                                                 // 1751
     *      var xs = [{a: 1}, {a: 2}, {a: 3}];                                                                         // 1752
     *      R.findIndex(R.propEq('a', 2))(xs); //=> 1                                                                  // 1753
     *      R.findIndex(R.propEq('a', 4))(xs); //=> -1                                                                 // 1754
     */                                                                                                                // 1755
    var findIndex = _curry2(_dispatchable('findIndex', _xfindIndex, function findIndex(fn, list) {                     // 1756
        var idx = 0;                                                                                                   // 1757
        var len = list.length;                                                                                         // 1758
        while (idx < len) {                                                                                            // 1759
            if (fn(list[idx])) {                                                                                       // 1760
                return idx;                                                                                            // 1761
            }                                                                                                          // 1762
            idx += 1;                                                                                                  // 1763
        }                                                                                                              // 1764
        return -1;                                                                                                     // 1765
    }));                                                                                                               // 1766
                                                                                                                       // 1767
    /**                                                                                                                // 1768
     * Returns the last element of the list which matches the predicate, or                                            // 1769
     * `undefined` if no element matches.                                                                              // 1770
     *                                                                                                                 // 1771
     * Dispatches to the `findLast` method of the second argument, if present.                                         // 1772
     *                                                                                                                 // 1773
     * Acts as a transducer if a transformer is given in list position.                                                // 1774
     *                                                                                                                 // 1775
     * @func                                                                                                           // 1776
     * @memberOf R                                                                                                     // 1777
     * @since v0.1.1                                                                                                   // 1778
     * @category List                                                                                                  // 1779
     * @sig (a -> Boolean) -> [a] -> a | undefined                                                                     // 1780
     * @param {Function} fn The predicate function used to determine if the element is the                             // 1781
     * desired one.                                                                                                    // 1782
     * @param {Array} list The array to consider.                                                                      // 1783
     * @return {Object} The element found, or `undefined`.                                                             // 1784
     * @see R.transduce                                                                                                // 1785
     * @example                                                                                                        // 1786
     *                                                                                                                 // 1787
     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];                                                                      // 1788
     *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}                                                        // 1789
     *      R.findLast(R.propEq('a', 4))(xs); //=> undefined                                                           // 1790
     */                                                                                                                // 1791
    var findLast = _curry2(_dispatchable('findLast', _xfindLast, function findLast(fn, list) {                         // 1792
        var idx = list.length - 1;                                                                                     // 1793
        while (idx >= 0) {                                                                                             // 1794
            if (fn(list[idx])) {                                                                                       // 1795
                return list[idx];                                                                                      // 1796
            }                                                                                                          // 1797
            idx -= 1;                                                                                                  // 1798
        }                                                                                                              // 1799
    }));                                                                                                               // 1800
                                                                                                                       // 1801
    /**                                                                                                                // 1802
     * Returns the index of the last element of the list which matches the                                             // 1803
     * predicate, or `-1` if no element matches.                                                                       // 1804
     *                                                                                                                 // 1805
     * Dispatches to the `findLastIndex` method of the second argument, if present.                                    // 1806
     *                                                                                                                 // 1807
     * Acts as a transducer if a transformer is given in list position.                                                // 1808
     *                                                                                                                 // 1809
     * @func                                                                                                           // 1810
     * @memberOf R                                                                                                     // 1811
     * @since v0.1.1                                                                                                   // 1812
     * @category List                                                                                                  // 1813
     * @sig (a -> Boolean) -> [a] -> Number                                                                            // 1814
     * @param {Function} fn The predicate function used to determine if the element is the                             // 1815
     * desired one.                                                                                                    // 1816
     * @param {Array} list The array to consider.                                                                      // 1817
     * @return {Number} The index of the element found, or `-1`.                                                       // 1818
     * @see R.transduce                                                                                                // 1819
     * @example                                                                                                        // 1820
     *                                                                                                                 // 1821
     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];                                                                      // 1822
     *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1                                                              // 1823
     *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1                                                             // 1824
     */                                                                                                                // 1825
    var findLastIndex = _curry2(_dispatchable('findLastIndex', _xfindLastIndex, function findLastIndex(fn, list) {     // 1826
        var idx = list.length - 1;                                                                                     // 1827
        while (idx >= 0) {                                                                                             // 1828
            if (fn(list[idx])) {                                                                                       // 1829
                return idx;                                                                                            // 1830
            }                                                                                                          // 1831
            idx -= 1;                                                                                                  // 1832
        }                                                                                                              // 1833
        return -1;                                                                                                     // 1834
    }));                                                                                                               // 1835
                                                                                                                       // 1836
    /**                                                                                                                // 1837
     * Iterate over an input `list`, calling a provided function `fn` for each                                         // 1838
     * element in the list.                                                                                            // 1839
     *                                                                                                                 // 1840
     * `fn` receives one argument: *(value)*.                                                                          // 1841
     *                                                                                                                 // 1842
     * Note: `R.forEach` does not skip deleted or unassigned indices (sparse                                           // 1843
     * arrays), unlike the native `Array.prototype.forEach` method. For more                                           // 1844
     * details on this behavior, see:                                                                                  // 1845
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description      // 1846
     *                                                                                                                 // 1847
     * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns                                     // 1848
     * the original array. In some libraries this function is named `each`.                                            // 1849
     *                                                                                                                 // 1850
     * Dispatches to the `forEach` method of the second argument, if present.                                          // 1851
     *                                                                                                                 // 1852
     * @func                                                                                                           // 1853
     * @memberOf R                                                                                                     // 1854
     * @since v0.1.1                                                                                                   // 1855
     * @category List                                                                                                  // 1856
     * @sig (a -> *) -> [a] -> [a]                                                                                     // 1857
     * @param {Function} fn The function to invoke. Receives one argument, `value`.                                    // 1858
     * @param {Array} list The list to iterate over.                                                                   // 1859
     * @return {Array} The original list.                                                                              // 1860
     * @see R.addIndex                                                                                                 // 1861
     * @example                                                                                                        // 1862
     *                                                                                                                 // 1863
     *      var printXPlusFive = x => console.log(x + 5);                                                              // 1864
     *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]                                                       // 1865
     *      //-> 6                                                                                                     // 1866
     *      //-> 7                                                                                                     // 1867
     *      //-> 8                                                                                                     // 1868
     */                                                                                                                // 1869
    var forEach = _curry2(_checkForMethod('forEach', function forEach(fn, list) {                                      // 1870
        var len = list.length;                                                                                         // 1871
        var idx = 0;                                                                                                   // 1872
        while (idx < len) {                                                                                            // 1873
            fn(list[idx]);                                                                                             // 1874
            idx += 1;                                                                                                  // 1875
        }                                                                                                              // 1876
        return list;                                                                                                   // 1877
    }));                                                                                                               // 1878
                                                                                                                       // 1879
    /**                                                                                                                // 1880
     * Creates a new object out of a list key-value pairs.                                                             // 1881
     *                                                                                                                 // 1882
     * @func                                                                                                           // 1883
     * @memberOf R                                                                                                     // 1884
     * @since v0.3.0                                                                                                   // 1885
     * @category List                                                                                                  // 1886
     * @sig [[k,v]] -> {k: v}                                                                                          // 1887
     * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.      // 1888
     * @return {Object} The object made by pairing up `keys` and `values`.                                             // 1889
     * @see R.toPairs, R.pair                                                                                          // 1890
     * @example                                                                                                        // 1891
     *                                                                                                                 // 1892
     *      R.fromPairs([['a', 1], ['b', 2],  ['c', 3]]); //=> {a: 1, b: 2, c: 3}                                      // 1893
     */                                                                                                                // 1894
    var fromPairs = _curry1(function fromPairs(pairs) {                                                                // 1895
        var idx = 0;                                                                                                   // 1896
        var len = pairs.length;                                                                                        // 1897
        var out = {};                                                                                                  // 1898
        while (idx < len) {                                                                                            // 1899
            if (_isArray(pairs[idx]) && pairs[idx].length) {                                                           // 1900
                out[pairs[idx][0]] = pairs[idx][1];                                                                    // 1901
            }                                                                                                          // 1902
            idx += 1;                                                                                                  // 1903
        }                                                                                                              // 1904
        return out;                                                                                                    // 1905
    });                                                                                                                // 1906
                                                                                                                       // 1907
    /**                                                                                                                // 1908
     * Returns `true` if the first argument is greater than the second; `false`                                        // 1909
     * otherwise.                                                                                                      // 1910
     *                                                                                                                 // 1911
     * @func                                                                                                           // 1912
     * @memberOf R                                                                                                     // 1913
     * @since v0.1.0                                                                                                   // 1914
     * @category Relation                                                                                              // 1915
     * @sig Ord a => a -> a -> Boolean                                                                                 // 1916
     * @param {*} a                                                                                                    // 1917
     * @param {*} b                                                                                                    // 1918
     * @return {Boolean}                                                                                               // 1919
     * @see R.lt                                                                                                       // 1920
     * @example                                                                                                        // 1921
     *                                                                                                                 // 1922
     *      R.gt(2, 1); //=> true                                                                                      // 1923
     *      R.gt(2, 2); //=> false                                                                                     // 1924
     *      R.gt(2, 3); //=> false                                                                                     // 1925
     *      R.gt('a', 'z'); //=> false                                                                                 // 1926
     *      R.gt('z', 'a'); //=> true                                                                                  // 1927
     */                                                                                                                // 1928
    var gt = _curry2(function gt(a, b) {                                                                               // 1929
        return a > b;                                                                                                  // 1930
    });                                                                                                                // 1931
                                                                                                                       // 1932
    /**                                                                                                                // 1933
     * Returns `true` if the first argument is greater than or equal to the second;                                    // 1934
     * `false` otherwise.                                                                                              // 1935
     *                                                                                                                 // 1936
     * @func                                                                                                           // 1937
     * @memberOf R                                                                                                     // 1938
     * @since v0.1.0                                                                                                   // 1939
     * @category Relation                                                                                              // 1940
     * @sig Ord a => a -> a -> Boolean                                                                                 // 1941
     * @param {Number} a                                                                                               // 1942
     * @param {Number} b                                                                                               // 1943
     * @return {Boolean}                                                                                               // 1944
     * @see R.lte                                                                                                      // 1945
     * @example                                                                                                        // 1946
     *                                                                                                                 // 1947
     *      R.gte(2, 1); //=> true                                                                                     // 1948
     *      R.gte(2, 2); //=> true                                                                                     // 1949
     *      R.gte(2, 3); //=> false                                                                                    // 1950
     *      R.gte('a', 'z'); //=> false                                                                                // 1951
     *      R.gte('z', 'a'); //=> true                                                                                 // 1952
     */                                                                                                                // 1953
    var gte = _curry2(function gte(a, b) {                                                                             // 1954
        return a >= b;                                                                                                 // 1955
    });                                                                                                                // 1956
                                                                                                                       // 1957
    /**                                                                                                                // 1958
     * Returns whether or not an object has an own property with the specified name                                    // 1959
     *                                                                                                                 // 1960
     * @func                                                                                                           // 1961
     * @memberOf R                                                                                                     // 1962
     * @since v0.7.0                                                                                                   // 1963
     * @category Object                                                                                                // 1964
     * @sig s -> {s: x} -> Boolean                                                                                     // 1965
     * @param {String} prop The name of the property to check for.                                                     // 1966
     * @param {Object} obj The object to query.                                                                        // 1967
     * @return {Boolean} Whether the property exists.                                                                  // 1968
     * @example                                                                                                        // 1969
     *                                                                                                                 // 1970
     *      var hasName = R.has('name');                                                                               // 1971
     *      hasName({name: 'alice'});   //=> true                                                                      // 1972
     *      hasName({name: 'bob'});     //=> true                                                                      // 1973
     *      hasName({});                //=> false                                                                     // 1974
     *                                                                                                                 // 1975
     *      var point = {x: 0, y: 0};                                                                                  // 1976
     *      var pointHas = R.has(R.__, point);                                                                         // 1977
     *      pointHas('x');  //=> true                                                                                  // 1978
     *      pointHas('y');  //=> true                                                                                  // 1979
     *      pointHas('z');  //=> false                                                                                 // 1980
     */                                                                                                                // 1981
    var has = _curry2(_has);                                                                                           // 1982
                                                                                                                       // 1983
    /**                                                                                                                // 1984
     * Returns whether or not an object or its prototype chain has a property with                                     // 1985
     * the specified name                                                                                              // 1986
     *                                                                                                                 // 1987
     * @func                                                                                                           // 1988
     * @memberOf R                                                                                                     // 1989
     * @since v0.7.0                                                                                                   // 1990
     * @category Object                                                                                                // 1991
     * @sig s -> {s: x} -> Boolean                                                                                     // 1992
     * @param {String} prop The name of the property to check for.                                                     // 1993
     * @param {Object} obj The object to query.                                                                        // 1994
     * @return {Boolean} Whether the property exists.                                                                  // 1995
     * @example                                                                                                        // 1996
     *                                                                                                                 // 1997
     *      function Rectangle(width, height) {                                                                        // 1998
     *        this.width = width;                                                                                      // 1999
     *        this.height = height;                                                                                    // 2000
     *      }                                                                                                          // 2001
     *      Rectangle.prototype.area = function() {                                                                    // 2002
     *        return this.width * this.height;                                                                         // 2003
     *      };                                                                                                         // 2004
     *                                                                                                                 // 2005
     *      var square = new Rectangle(2, 2);                                                                          // 2006
     *      R.hasIn('width', square);  //=> true                                                                       // 2007
     *      R.hasIn('area', square);  //=> true                                                                        // 2008
     */                                                                                                                // 2009
    var hasIn = _curry2(function hasIn(prop, obj) {                                                                    // 2010
        return prop in obj;                                                                                            // 2011
    });                                                                                                                // 2012
                                                                                                                       // 2013
    /**                                                                                                                // 2014
     * Returns true if its arguments are identical, false otherwise. Values are                                        // 2015
     * identical if they reference the same memory. `NaN` is identical to `NaN`;                                       // 2016
     * `0` and `-0` are not identical.                                                                                 // 2017
     *                                                                                                                 // 2018
     * @func                                                                                                           // 2019
     * @memberOf R                                                                                                     // 2020
     * @since v0.15.0                                                                                                  // 2021
     * @category Relation                                                                                              // 2022
     * @sig a -> a -> Boolean                                                                                          // 2023
     * @param {*} a                                                                                                    // 2024
     * @param {*} b                                                                                                    // 2025
     * @return {Boolean}                                                                                               // 2026
     * @example                                                                                                        // 2027
     *                                                                                                                 // 2028
     *      var o = {};                                                                                                // 2029
     *      R.identical(o, o); //=> true                                                                               // 2030
     *      R.identical(1, 1); //=> true                                                                               // 2031
     *      R.identical(1, '1'); //=> false                                                                            // 2032
     *      R.identical([], []); //=> false                                                                            // 2033
     *      R.identical(0, -0); //=> false                                                                             // 2034
     *      R.identical(NaN, NaN); //=> true                                                                           // 2035
     */                                                                                                                // 2036
    // SameValue algorithm                                                                                             // 2037
    // Steps 1-5, 7-10                                                                                                 // 2038
    // Steps 6.b-6.e: +0 != -0                                                                                         // 2039
    // Step 6.a: NaN == NaN                                                                                            // 2040
    var identical = _curry2(function identical(a, b) {                                                                 // 2041
        // SameValue algorithm                                                                                         // 2042
        if (a === b) {                                                                                                 // 2043
            // Steps 1-5, 7-10                                                                                         // 2044
            // Steps 6.b-6.e: +0 != -0                                                                                 // 2045
            return a !== 0 || 1 / a === 1 / b;                                                                         // 2046
        } else {                                                                                                       // 2047
            // Step 6.a: NaN == NaN                                                                                    // 2048
            return a !== a && b !== b;                                                                                 // 2049
        }                                                                                                              // 2050
    });                                                                                                                // 2051
                                                                                                                       // 2052
    /**                                                                                                                // 2053
     * A function that does nothing but return the parameter supplied to it. Good                                      // 2054
     * as a default or placeholder function.                                                                           // 2055
     *                                                                                                                 // 2056
     * @func                                                                                                           // 2057
     * @memberOf R                                                                                                     // 2058
     * @since v0.1.0                                                                                                   // 2059
     * @category Function                                                                                              // 2060
     * @sig a -> a                                                                                                     // 2061
     * @param {*} x The value to return.                                                                               // 2062
     * @return {*} The input value, `x`.                                                                               // 2063
     * @example                                                                                                        // 2064
     *                                                                                                                 // 2065
     *      R.identity(1); //=> 1                                                                                      // 2066
     *                                                                                                                 // 2067
     *      var obj = {};                                                                                              // 2068
     *      R.identity(obj) === obj; //=> true                                                                         // 2069
     */                                                                                                                // 2070
    var identity = _curry1(_identity);                                                                                 // 2071
                                                                                                                       // 2072
    /**                                                                                                                // 2073
     * Creates a function that will process either the `onTrue` or the `onFalse`                                       // 2074
     * function depending upon the result of the `condition` predicate.                                                // 2075
     *                                                                                                                 // 2076
     * @func                                                                                                           // 2077
     * @memberOf R                                                                                                     // 2078
     * @since v0.8.0                                                                                                   // 2079
     * @category Logic                                                                                                 // 2080
     * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)                                             // 2081
     * @param {Function} condition A predicate function                                                                // 2082
     * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.                 // 2083
     * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.                 // 2084
     * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`                  // 2085
     *                    function depending upon the result of the `condition` predicate.                             // 2086
     * @see R.unless, R.when                                                                                           // 2087
     * @example                                                                                                        // 2088
     *                                                                                                                 // 2089
     *      var incCount = R.ifElse(                                                                                   // 2090
     *        R.has('count'),                                                                                          // 2091
     *        R.over(R.lensProp('count'), R.inc),                                                                      // 2092
     *        R.assoc('count', 1)                                                                                      // 2093
     *      );                                                                                                         // 2094
     *      incCount({});           //=> { count: 1 }                                                                  // 2095
     *      incCount({ count: 1 }); //=> { count: 2 }                                                                  // 2096
     */                                                                                                                // 2097
    var ifElse = _curry3(function ifElse(condition, onTrue, onFalse) {                                                 // 2098
        return curryN(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {                  // 2099
            return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);  // 2100
        });                                                                                                            // 2101
    });                                                                                                                // 2102
                                                                                                                       // 2103
    /**                                                                                                                // 2104
     * Increments its argument.                                                                                        // 2105
     *                                                                                                                 // 2106
     * @func                                                                                                           // 2107
     * @memberOf R                                                                                                     // 2108
     * @since v0.9.0                                                                                                   // 2109
     * @category Math                                                                                                  // 2110
     * @sig Number -> Number                                                                                           // 2111
     * @param {Number} n                                                                                               // 2112
     * @return {Number}                                                                                                // 2113
     * @see R.dec                                                                                                      // 2114
     * @example                                                                                                        // 2115
     *                                                                                                                 // 2116
     *      R.inc(42); //=> 43                                                                                         // 2117
     */                                                                                                                // 2118
    var inc = add(1);                                                                                                  // 2119
                                                                                                                       // 2120
    /**                                                                                                                // 2121
     * Inserts the supplied element into the list, at index `index`. _Note that                                        // 2122
     * this is not destructive_: it returns a copy of the list with the changes.                                       // 2123
     * <small>No lists have been harmed in the application of this function.</small>                                   // 2124
     *                                                                                                                 // 2125
     * @func                                                                                                           // 2126
     * @memberOf R                                                                                                     // 2127
     * @since v0.2.2                                                                                                   // 2128
     * @category List                                                                                                  // 2129
     * @sig Number -> a -> [a] -> [a]                                                                                  // 2130
     * @param {Number} index The position to insert the element                                                        // 2131
     * @param {*} elt The element to insert into the Array                                                             // 2132
     * @param {Array} list The list to insert into                                                                     // 2133
     * @return {Array} A new Array with `elt` inserted at `index`.                                                     // 2134
     * @example                                                                                                        // 2135
     *                                                                                                                 // 2136
     *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]                                                            // 2137
     */                                                                                                                // 2138
    var insert = _curry3(function insert(idx, elt, list) {                                                             // 2139
        idx = idx < list.length && idx >= 0 ? idx : list.length;                                                       // 2140
        var result = _slice(list);                                                                                     // 2141
        result.splice(idx, 0, elt);                                                                                    // 2142
        return result;                                                                                                 // 2143
    });                                                                                                                // 2144
                                                                                                                       // 2145
    /**                                                                                                                // 2146
     * Inserts the sub-list into the list, at index `index`. _Note that this is not                                    // 2147
     * destructive_: it returns a copy of the list with the changes.                                                   // 2148
     * <small>No lists have been harmed in the application of this function.</small>                                   // 2149
     *                                                                                                                 // 2150
     * @func                                                                                                           // 2151
     * @memberOf R                                                                                                     // 2152
     * @since v0.9.0                                                                                                   // 2153
     * @category List                                                                                                  // 2154
     * @sig Number -> [a] -> [a] -> [a]                                                                                // 2155
     * @param {Number} index The position to insert the sub-list                                                       // 2156
     * @param {Array} elts The sub-list to insert into the Array                                                       // 2157
     * @param {Array} list The list to insert the sub-list into                                                        // 2158
     * @return {Array} A new Array with `elts` inserted starting at `index`.                                           // 2159
     * @example                                                                                                        // 2160
     *                                                                                                                 // 2161
     *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]                                       // 2162
     */                                                                                                                // 2163
    var insertAll = _curry3(function insertAll(idx, elts, list) {                                                      // 2164
        idx = idx < list.length && idx >= 0 ? idx : list.length;                                                       // 2165
        return _concat(_concat(_slice(list, 0, idx), elts), _slice(list, idx));                                        // 2166
    });                                                                                                                // 2167
                                                                                                                       // 2168
    /**                                                                                                                // 2169
     * Creates a new list with the separator interposed between elements.                                              // 2170
     *                                                                                                                 // 2171
     * Dispatches to the `intersperse` method of the second argument, if present.                                      // 2172
     *                                                                                                                 // 2173
     * @func                                                                                                           // 2174
     * @memberOf R                                                                                                     // 2175
     * @since v0.14.0                                                                                                  // 2176
     * @category List                                                                                                  // 2177
     * @sig a -> [a] -> [a]                                                                                            // 2178
     * @param {*} separator The element to add to the list.                                                            // 2179
     * @param {Array} list The list to be interposed.                                                                  // 2180
     * @return {Array} The new list.                                                                                   // 2181
     * @example                                                                                                        // 2182
     *                                                                                                                 // 2183
     *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']                                      // 2184
     */                                                                                                                // 2185
    var intersperse = _curry2(_checkForMethod('intersperse', function intersperse(separator, list) {                   // 2186
        var out = [];                                                                                                  // 2187
        var idx = 0;                                                                                                   // 2188
        var length = list.length;                                                                                      // 2189
        while (idx < length) {                                                                                         // 2190
            if (idx === length - 1) {                                                                                  // 2191
                out.push(list[idx]);                                                                                   // 2192
            } else {                                                                                                   // 2193
                out.push(list[idx], separator);                                                                        // 2194
            }                                                                                                          // 2195
            idx += 1;                                                                                                  // 2196
        }                                                                                                              // 2197
        return out;                                                                                                    // 2198
    }));                                                                                                               // 2199
                                                                                                                       // 2200
    /**                                                                                                                // 2201
     * See if an object (`val`) is an instance of the supplied constructor. This                                       // 2202
     * function will check up the inheritance chain, if any.                                                           // 2203
     *                                                                                                                 // 2204
     * @func                                                                                                           // 2205
     * @memberOf R                                                                                                     // 2206
     * @since v0.3.0                                                                                                   // 2207
     * @category Type                                                                                                  // 2208
     * @sig (* -> {*}) -> a -> Boolean                                                                                 // 2209
     * @param {Object} ctor A constructor                                                                              // 2210
     * @param {*} val The value to test                                                                                // 2211
     * @return {Boolean}                                                                                               // 2212
     * @example                                                                                                        // 2213
     *                                                                                                                 // 2214
     *      R.is(Object, {}); //=> true                                                                                // 2215
     *      R.is(Number, 1); //=> true                                                                                 // 2216
     *      R.is(Object, 1); //=> false                                                                                // 2217
     *      R.is(String, 's'); //=> true                                                                               // 2218
     *      R.is(String, new String('')); //=> true                                                                    // 2219
     *      R.is(Object, new String('')); //=> true                                                                    // 2220
     *      R.is(Object, 's'); //=> false                                                                              // 2221
     *      R.is(Number, {}); //=> false                                                                               // 2222
     */                                                                                                                // 2223
    var is = _curry2(function is(Ctor, val) {                                                                          // 2224
        return val != null && val.constructor === Ctor || val instanceof Ctor;                                         // 2225
    });                                                                                                                // 2226
                                                                                                                       // 2227
    /**                                                                                                                // 2228
     * Tests whether or not an object is similar to an array.                                                          // 2229
     *                                                                                                                 // 2230
     * @func                                                                                                           // 2231
     * @memberOf R                                                                                                     // 2232
     * @since v0.5.0                                                                                                   // 2233
     * @category Type                                                                                                  // 2234
     * @category List                                                                                                  // 2235
     * @sig * -> Boolean                                                                                               // 2236
     * @param {*} x The object to test.                                                                                // 2237
     * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.   // 2238
     * @example                                                                                                        // 2239
     *                                                                                                                 // 2240
     *      R.isArrayLike([]); //=> true                                                                               // 2241
     *      R.isArrayLike(true); //=> false                                                                            // 2242
     *      R.isArrayLike({}); //=> false                                                                              // 2243
     *      R.isArrayLike({length: 10}); //=> false                                                                    // 2244
     *      R.isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true                                               // 2245
     */                                                                                                                // 2246
    var isArrayLike = _curry1(function isArrayLike(x) {                                                                // 2247
        if (_isArray(x)) {                                                                                             // 2248
            return true;                                                                                               // 2249
        }                                                                                                              // 2250
        if (!x) {                                                                                                      // 2251
            return false;                                                                                              // 2252
        }                                                                                                              // 2253
        if (typeof x !== 'object') {                                                                                   // 2254
            return false;                                                                                              // 2255
        }                                                                                                              // 2256
        if (x instanceof String) {                                                                                     // 2257
            return false;                                                                                              // 2258
        }                                                                                                              // 2259
        if (x.nodeType === 1) {                                                                                        // 2260
            return !!x.length;                                                                                         // 2261
        }                                                                                                              // 2262
        if (x.length === 0) {                                                                                          // 2263
            return true;                                                                                               // 2264
        }                                                                                                              // 2265
        if (x.length > 0) {                                                                                            // 2266
            return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);                                              // 2267
        }                                                                                                              // 2268
        return false;                                                                                                  // 2269
    });                                                                                                                // 2270
                                                                                                                       // 2271
    /**                                                                                                                // 2272
     * Checks if the input value is `null` or `undefined`.                                                             // 2273
     *                                                                                                                 // 2274
     * @func                                                                                                           // 2275
     * @memberOf R                                                                                                     // 2276
     * @since v0.9.0                                                                                                   // 2277
     * @category Type                                                                                                  // 2278
     * @sig * -> Boolean                                                                                               // 2279
     * @param {*} x The value to test.                                                                                 // 2280
     * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.                                    // 2281
     * @example                                                                                                        // 2282
     *                                                                                                                 // 2283
     *      R.isNil(null); //=> true                                                                                   // 2284
     *      R.isNil(undefined); //=> true                                                                              // 2285
     *      R.isNil(0); //=> false                                                                                     // 2286
     *      R.isNil([]); //=> false                                                                                    // 2287
     */                                                                                                                // 2288
    var isNil = _curry1(function isNil(x) {                                                                            // 2289
        return x == null;                                                                                              // 2290
    });                                                                                                                // 2291
                                                                                                                       // 2292
    /**                                                                                                                // 2293
     * Returns a list containing the names of all the enumerable own properties of                                     // 2294
     * the supplied object.                                                                                            // 2295
     * Note that the order of the output array is not guaranteed to be consistent                                      // 2296
     * across different JS platforms.                                                                                  // 2297
     *                                                                                                                 // 2298
     * @func                                                                                                           // 2299
     * @memberOf R                                                                                                     // 2300
     * @since v0.1.0                                                                                                   // 2301
     * @category Object                                                                                                // 2302
     * @sig {k: v} -> [k]                                                                                              // 2303
     * @param {Object} obj The object to extract properties from                                                       // 2304
     * @return {Array} An array of the object's own properties.                                                        // 2305
     * @example                                                                                                        // 2306
     *                                                                                                                 // 2307
     *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']                                                           // 2308
     */                                                                                                                // 2309
    // cover IE < 9 keys issues                                                                                        // 2310
    var keys = function () {                                                                                           // 2311
        // cover IE < 9 keys issues                                                                                    // 2312
        var hasEnumBug = !{ toString: null }.propertyIsEnumerable('toString');                                         // 2313
        var nonEnumerableProps = [                                                                                     // 2314
            'constructor',                                                                                             // 2315
            'valueOf',                                                                                                 // 2316
            'isPrototypeOf',                                                                                           // 2317
            'toString',                                                                                                // 2318
            'propertyIsEnumerable',                                                                                    // 2319
            'hasOwnProperty',                                                                                          // 2320
            'toLocaleString'                                                                                           // 2321
        ];                                                                                                             // 2322
        var contains = function contains(list, item) {                                                                 // 2323
            var idx = 0;                                                                                               // 2324
            while (idx < list.length) {                                                                                // 2325
                if (list[idx] === item) {                                                                              // 2326
                    return true;                                                                                       // 2327
                }                                                                                                      // 2328
                idx += 1;                                                                                              // 2329
            }                                                                                                          // 2330
            return false;                                                                                              // 2331
        };                                                                                                             // 2332
        return typeof Object.keys === 'function' ? _curry1(function keys(obj) {                                        // 2333
            return Object(obj) !== obj ? [] : Object.keys(obj);                                                        // 2334
        }) : _curry1(function keys(obj) {                                                                              // 2335
            if (Object(obj) !== obj) {                                                                                 // 2336
                return [];                                                                                             // 2337
            }                                                                                                          // 2338
            var prop, nIdx;                                                                                            // 2339
            var ks = [];                                                                                               // 2340
            for (prop in obj) {                                                                                        // 2341
                if (_has(prop, obj)) {                                                                                 // 2342
                    ks[ks.length] = prop;                                                                              // 2343
                }                                                                                                      // 2344
            }                                                                                                          // 2345
            if (hasEnumBug) {                                                                                          // 2346
                nIdx = nonEnumerableProps.length - 1;                                                                  // 2347
                while (nIdx >= 0) {                                                                                    // 2348
                    prop = nonEnumerableProps[nIdx];                                                                   // 2349
                    if (_has(prop, obj) && !contains(ks, prop)) {                                                      // 2350
                        ks[ks.length] = prop;                                                                          // 2351
                    }                                                                                                  // 2352
                    nIdx -= 1;                                                                                         // 2353
                }                                                                                                      // 2354
            }                                                                                                          // 2355
            return ks;                                                                                                 // 2356
        });                                                                                                            // 2357
    }();                                                                                                               // 2358
                                                                                                                       // 2359
    /**                                                                                                                // 2360
     * Returns a list containing the names of all the properties of the supplied                                       // 2361
     * object, including prototype properties.                                                                         // 2362
     * Note that the order of the output array is not guaranteed to be consistent                                      // 2363
     * across different JS platforms.                                                                                  // 2364
     *                                                                                                                 // 2365
     * @func                                                                                                           // 2366
     * @memberOf R                                                                                                     // 2367
     * @since v0.2.0                                                                                                   // 2368
     * @category Object                                                                                                // 2369
     * @sig {k: v} -> [k]                                                                                              // 2370
     * @param {Object} obj The object to extract properties from                                                       // 2371
     * @return {Array} An array of the object's own and prototype properties.                                          // 2372
     * @example                                                                                                        // 2373
     *                                                                                                                 // 2374
     *      var F = function() { this.x = 'X'; };                                                                      // 2375
     *      F.prototype.y = 'Y';                                                                                       // 2376
     *      var f = new F();                                                                                           // 2377
     *      R.keysIn(f); //=> ['x', 'y']                                                                               // 2378
     */                                                                                                                // 2379
    var keysIn = _curry1(function keysIn(obj) {                                                                        // 2380
        var prop;                                                                                                      // 2381
        var ks = [];                                                                                                   // 2382
        for (prop in obj) {                                                                                            // 2383
            ks[ks.length] = prop;                                                                                      // 2384
        }                                                                                                              // 2385
        return ks;                                                                                                     // 2386
    });                                                                                                                // 2387
                                                                                                                       // 2388
    /**                                                                                                                // 2389
     * Returns the number of elements in the array by returning `list.length`.                                         // 2390
     *                                                                                                                 // 2391
     * @func                                                                                                           // 2392
     * @memberOf R                                                                                                     // 2393
     * @since v0.3.0                                                                                                   // 2394
     * @category List                                                                                                  // 2395
     * @sig [a] -> Number                                                                                              // 2396
     * @param {Array} list The array to inspect.                                                                       // 2397
     * @return {Number} The length of the array.                                                                       // 2398
     * @example                                                                                                        // 2399
     *                                                                                                                 // 2400
     *      R.length([]); //=> 0                                                                                       // 2401
     *      R.length([1, 2, 3]); //=> 3                                                                                // 2402
     */                                                                                                                // 2403
    var length = _curry1(function length(list) {                                                                       // 2404
        return list != null && is(Number, list.length) ? list.length : NaN;                                            // 2405
    });                                                                                                                // 2406
                                                                                                                       // 2407
    /**                                                                                                                // 2408
     * Returns `true` if the first argument is less than the second; `false`                                           // 2409
     * otherwise.                                                                                                      // 2410
     *                                                                                                                 // 2411
     * @func                                                                                                           // 2412
     * @memberOf R                                                                                                     // 2413
     * @since v0.1.0                                                                                                   // 2414
     * @category Relation                                                                                              // 2415
     * @sig Ord a => a -> a -> Boolean                                                                                 // 2416
     * @param {*} a                                                                                                    // 2417
     * @param {*} b                                                                                                    // 2418
     * @return {Boolean}                                                                                               // 2419
     * @see R.gt                                                                                                       // 2420
     * @example                                                                                                        // 2421
     *                                                                                                                 // 2422
     *      R.lt(2, 1); //=> false                                                                                     // 2423
     *      R.lt(2, 2); //=> false                                                                                     // 2424
     *      R.lt(2, 3); //=> true                                                                                      // 2425
     *      R.lt('a', 'z'); //=> true                                                                                  // 2426
     *      R.lt('z', 'a'); //=> false                                                                                 // 2427
     */                                                                                                                // 2428
    var lt = _curry2(function lt(a, b) {                                                                               // 2429
        return a < b;                                                                                                  // 2430
    });                                                                                                                // 2431
                                                                                                                       // 2432
    /**                                                                                                                // 2433
     * Returns `true` if the first argument is less than or equal to the second;                                       // 2434
     * `false` otherwise.                                                                                              // 2435
     *                                                                                                                 // 2436
     * @func                                                                                                           // 2437
     * @memberOf R                                                                                                     // 2438
     * @since v0.1.0                                                                                                   // 2439
     * @category Relation                                                                                              // 2440
     * @sig Ord a => a -> a -> Boolean                                                                                 // 2441
     * @param {Number} a                                                                                               // 2442
     * @param {Number} b                                                                                               // 2443
     * @return {Boolean}                                                                                               // 2444
     * @see R.gte                                                                                                      // 2445
     * @example                                                                                                        // 2446
     *                                                                                                                 // 2447
     *      R.lte(2, 1); //=> false                                                                                    // 2448
     *      R.lte(2, 2); //=> true                                                                                     // 2449
     *      R.lte(2, 3); //=> true                                                                                     // 2450
     *      R.lte('a', 'z'); //=> true                                                                                 // 2451
     *      R.lte('z', 'a'); //=> false                                                                                // 2452
     */                                                                                                                // 2453
    var lte = _curry2(function lte(a, b) {                                                                             // 2454
        return a <= b;                                                                                                 // 2455
    });                                                                                                                // 2456
                                                                                                                       // 2457
    /**                                                                                                                // 2458
     * The mapAccum function behaves like a combination of map and reduce; it                                          // 2459
     * applies a function to each element of a list, passing an accumulating                                           // 2460
     * parameter from left to right, and returning a final value of this                                               // 2461
     * accumulator together with the new list.                                                                         // 2462
     *                                                                                                                 // 2463
     * The iterator function receives two arguments, *acc* and *value*, and should                                     // 2464
     * return a tuple *[acc, value]*.                                                                                  // 2465
     *                                                                                                                 // 2466
     * @func                                                                                                           // 2467
     * @memberOf R                                                                                                     // 2468
     * @since v0.10.0                                                                                                  // 2469
     * @category List                                                                                                  // 2470
     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])                                                         // 2471
     * @param {Function} fn The function to be called on every element of the input `list`.                            // 2472
     * @param {*} acc The accumulator value.                                                                           // 2473
     * @param {Array} list The list to iterate over.                                                                   // 2474
     * @return {*} The final, accumulated value.                                                                       // 2475
     * @see R.addIndex                                                                                                 // 2476
     * @example                                                                                                        // 2477
     *                                                                                                                 // 2478
     *      var digits = ['1', '2', '3', '4'];                                                                         // 2479
     *      var append = (a, b) => [a + b, a + b];                                                                     // 2480
     *                                                                                                                 // 2481
     *      R.mapAccum(append, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]                              // 2482
     */                                                                                                                // 2483
    var mapAccum = _curry3(function mapAccum(fn, acc, list) {                                                          // 2484
        var idx = 0;                                                                                                   // 2485
        var len = list.length;                                                                                         // 2486
        var result = [];                                                                                               // 2487
        var tuple = [acc];                                                                                             // 2488
        while (idx < len) {                                                                                            // 2489
            tuple = fn(tuple[0], list[idx]);                                                                           // 2490
            result[idx] = tuple[1];                                                                                    // 2491
            idx += 1;                                                                                                  // 2492
        }                                                                                                              // 2493
        return [                                                                                                       // 2494
            tuple[0],                                                                                                  // 2495
            result                                                                                                     // 2496
        ];                                                                                                             // 2497
    });                                                                                                                // 2498
                                                                                                                       // 2499
    /**                                                                                                                // 2500
     * The mapAccumRight function behaves like a combination of map and reduce; it                                     // 2501
     * applies a function to each element of a list, passing an accumulating                                           // 2502
     * parameter from right to left, and returning a final value of this                                               // 2503
     * accumulator together with the new list.                                                                         // 2504
     *                                                                                                                 // 2505
     * Similar to `mapAccum`, except moves through the input list from the right to                                    // 2506
     * the left.                                                                                                       // 2507
     *                                                                                                                 // 2508
     * The iterator function receives two arguments, *acc* and *value*, and should                                     // 2509
     * return a tuple *[acc, value]*.                                                                                  // 2510
     *                                                                                                                 // 2511
     * @func                                                                                                           // 2512
     * @memberOf R                                                                                                     // 2513
     * @since v0.10.0                                                                                                  // 2514
     * @category List                                                                                                  // 2515
     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])                                                         // 2516
     * @param {Function} fn The function to be called on every element of the input `list`.                            // 2517
     * @param {*} acc The accumulator value.                                                                           // 2518
     * @param {Array} list The list to iterate over.                                                                   // 2519
     * @return {*} The final, accumulated value.                                                                       // 2520
     * @see R.addIndex                                                                                                 // 2521
     * @example                                                                                                        // 2522
     *                                                                                                                 // 2523
     *      var digits = ['1', '2', '3', '4'];                                                                         // 2524
     *      var append = (a, b) => [a + b, a + b];                                                                     // 2525
     *                                                                                                                 // 2526
     *      R.mapAccumRight(append, 0, digits); //=> ['04321', ['04321', '0432', '043', '04']]                         // 2527
     */                                                                                                                // 2528
    var mapAccumRight = _curry3(function mapAccumRight(fn, acc, list) {                                                // 2529
        var idx = list.length - 1;                                                                                     // 2530
        var result = [];                                                                                               // 2531
        var tuple = [acc];                                                                                             // 2532
        while (idx >= 0) {                                                                                             // 2533
            tuple = fn(tuple[0], list[idx]);                                                                           // 2534
            result[idx] = tuple[1];                                                                                    // 2535
            idx -= 1;                                                                                                  // 2536
        }                                                                                                              // 2537
        return [                                                                                                       // 2538
            tuple[0],                                                                                                  // 2539
            result                                                                                                     // 2540
        ];                                                                                                             // 2541
    });                                                                                                                // 2542
                                                                                                                       // 2543
    /**                                                                                                                // 2544
     * Tests a regular expression against a String. Note that this function will                                       // 2545
     * return an empty array when there are no matches. This differs from                                              // 2546
     * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)
     * which returns `null` when there are no matches.                                                                 // 2548
     *                                                                                                                 // 2549
     * @func                                                                                                           // 2550
     * @memberOf R                                                                                                     // 2551
     * @since v0.1.0                                                                                                   // 2552
     * @category String                                                                                                // 2553
     * @sig RegExp -> String -> [String | Undefined]                                                                   // 2554
     * @param {RegExp} rx A regular expression.                                                                        // 2555
     * @param {String} str The string to match against                                                                 // 2556
     * @return {Array} The list of matches or empty array.                                                             // 2557
     * @see R.test                                                                                                     // 2558
     * @example                                                                                                        // 2559
     *                                                                                                                 // 2560
     *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']                                                   // 2561
     *      R.match(/a/, 'b'); //=> []                                                                                 // 2562
     *      R.match(/a/, null); //=> TypeError: null does not have a method named "match"                              // 2563
     */                                                                                                                // 2564
    var match = _curry2(function match(rx, str) {                                                                      // 2565
        return str.match(rx) || [];                                                                                    // 2566
    });                                                                                                                // 2567
                                                                                                                       // 2568
    /**                                                                                                                // 2569
     * mathMod behaves like the modulo operator should mathematically, unlike the                                      // 2570
     * `%` operator (and by extension, R.modulo). So while "-17 % 5" is -2,                                            // 2571
     * mathMod(-17, 5) is 3. mathMod requires Integer arguments, and returns NaN                                       // 2572
     * when the modulus is zero or negative.                                                                           // 2573
     *                                                                                                                 // 2574
     * @func                                                                                                           // 2575
     * @memberOf R                                                                                                     // 2576
     * @since v0.3.0                                                                                                   // 2577
     * @category Math                                                                                                  // 2578
     * @sig Number -> Number -> Number                                                                                 // 2579
     * @param {Number} m The dividend.                                                                                 // 2580
     * @param {Number} p the modulus.                                                                                  // 2581
     * @return {Number} The result of `b mod a`.                                                                       // 2582
     * @example                                                                                                        // 2583
     *                                                                                                                 // 2584
     *      R.mathMod(-17, 5);  //=> 3                                                                                 // 2585
     *      R.mathMod(17, 5);   //=> 2                                                                                 // 2586
     *      R.mathMod(17, -5);  //=> NaN                                                                               // 2587
     *      R.mathMod(17, 0);   //=> NaN                                                                               // 2588
     *      R.mathMod(17.2, 5); //=> NaN                                                                               // 2589
     *      R.mathMod(17, 5.3); //=> NaN                                                                               // 2590
     *                                                                                                                 // 2591
     *      var clock = R.mathMod(R.__, 12);                                                                           // 2592
     *      clock(15); //=> 3                                                                                          // 2593
     *      clock(24); //=> 0                                                                                          // 2594
     *                                                                                                                 // 2595
     *      var seventeenMod = R.mathMod(17);                                                                          // 2596
     *      seventeenMod(3);  //=> 2                                                                                   // 2597
     *      seventeenMod(4);  //=> 1                                                                                   // 2598
     *      seventeenMod(10); //=> 7                                                                                   // 2599
     */                                                                                                                // 2600
    var mathMod = _curry2(function mathMod(m, p) {                                                                     // 2601
        if (!_isInteger(m)) {                                                                                          // 2602
            return NaN;                                                                                                // 2603
        }                                                                                                              // 2604
        if (!_isInteger(p) || p < 1) {                                                                                 // 2605
            return NaN;                                                                                                // 2606
        }                                                                                                              // 2607
        return (m % p + p) % p;                                                                                        // 2608
    });                                                                                                                // 2609
                                                                                                                       // 2610
    /**                                                                                                                // 2611
     * Returns the larger of its two arguments.                                                                        // 2612
     *                                                                                                                 // 2613
     * @func                                                                                                           // 2614
     * @memberOf R                                                                                                     // 2615
     * @since v0.1.0                                                                                                   // 2616
     * @category Relation                                                                                              // 2617
     * @sig Ord a => a -> a -> a                                                                                       // 2618
     * @param {*} a                                                                                                    // 2619
     * @param {*} b                                                                                                    // 2620
     * @return {*}                                                                                                     // 2621
     * @see R.maxBy, R.min                                                                                             // 2622
     * @example                                                                                                        // 2623
     *                                                                                                                 // 2624
     *      R.max(789, 123); //=> 789                                                                                  // 2625
     *      R.max('a', 'b'); //=> 'b'                                                                                  // 2626
     */                                                                                                                // 2627
    var max = _curry2(function max(a, b) {                                                                             // 2628
        return b > a ? b : a;                                                                                          // 2629
    });                                                                                                                // 2630
                                                                                                                       // 2631
    /**                                                                                                                // 2632
     * Takes a function and two values, and returns whichever value produces the                                       // 2633
     * larger result when passed to the provided function.                                                             // 2634
     *                                                                                                                 // 2635
     * @func                                                                                                           // 2636
     * @memberOf R                                                                                                     // 2637
     * @since v0.8.0                                                                                                   // 2638
     * @category Relation                                                                                              // 2639
     * @sig Ord b => (a -> b) -> a -> a -> a                                                                           // 2640
     * @param {Function} f                                                                                             // 2641
     * @param {*} a                                                                                                    // 2642
     * @param {*} b                                                                                                    // 2643
     * @return {*}                                                                                                     // 2644
     * @see R.max, R.minBy                                                                                             // 2645
     * @example                                                                                                        // 2646
     *                                                                                                                 // 2647
     *      //  square :: Number -> Number                                                                             // 2648
     *      var square = n => n * n;                                                                                   // 2649
     *                                                                                                                 // 2650
     *      R.maxBy(square, -3, 2); //=> -3                                                                            // 2651
     *                                                                                                                 // 2652
     *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5                                                   // 2653
     *      R.reduce(R.maxBy(square), 0, []); //=> 0                                                                   // 2654
     */                                                                                                                // 2655
    var maxBy = _curry3(function maxBy(f, a, b) {                                                                      // 2656
        return f(b) > f(a) ? b : a;                                                                                    // 2657
    });                                                                                                                // 2658
                                                                                                                       // 2659
    /**                                                                                                                // 2660
     * Creates a new object with the own properties of the two provided objects. If                                    // 2661
     * a key exists in both objects, the provided function is applied to the key                                       // 2662
     * and the values associated with the key in each object, with the result being                                    // 2663
     * used as the value associated with the key in the returned object. The key                                       // 2664
     * will be excluded from the returned object if the resulting value is                                             // 2665
     * `undefined`.                                                                                                    // 2666
     *                                                                                                                 // 2667
     * @func                                                                                                           // 2668
     * @memberOf R                                                                                                     // 2669
     * @since 0.19.0                                                                                                   // 2670
     * @category Object                                                                                                // 2671
     * @sig (String -> a -> a -> a) -> {a} -> {a} -> {a}                                                               // 2672
     * @param {Function} fn                                                                                            // 2673
     * @param {Object} l                                                                                               // 2674
     * @param {Object} r                                                                                               // 2675
     * @return {Object}                                                                                                // 2676
     * @see R.merge, R.mergeWith                                                                                       // 2677
     * @example                                                                                                        // 2678
     *                                                                                                                 // 2679
     *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r                                         // 2680
     *      R.mergeWithKey(concatValues,                                                                               // 2681
     *                     { a: true, thing: 'foo', values: [10, 20] },                                                // 2682
     *                     { b: true, thing: 'bar', values: [15, 35] });                                               // 2683
     *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }                                          // 2684
     */                                                                                                                // 2685
    var mergeWithKey = _curry3(function mergeWithKey(fn, l, r) {                                                       // 2686
        var result = {};                                                                                               // 2687
        var k;                                                                                                         // 2688
        for (k in l) {                                                                                                 // 2689
            if (_has(k, l)) {                                                                                          // 2690
                result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];                                                     // 2691
            }                                                                                                          // 2692
        }                                                                                                              // 2693
        for (k in r) {                                                                                                 // 2694
            if (_has(k, r) && !_has(k, result)) {                                                                      // 2695
                result[k] = r[k];                                                                                      // 2696
            }                                                                                                          // 2697
        }                                                                                                              // 2698
        return result;                                                                                                 // 2699
    });                                                                                                                // 2700
                                                                                                                       // 2701
    /**                                                                                                                // 2702
     * Returns the smaller of its two arguments.                                                                       // 2703
     *                                                                                                                 // 2704
     * @func                                                                                                           // 2705
     * @memberOf R                                                                                                     // 2706
     * @since v0.1.0                                                                                                   // 2707
     * @category Relation                                                                                              // 2708
     * @sig Ord a => a -> a -> a                                                                                       // 2709
     * @param {*} a                                                                                                    // 2710
     * @param {*} b                                                                                                    // 2711
     * @return {*}                                                                                                     // 2712
     * @see R.minBy, R.max                                                                                             // 2713
     * @example                                                                                                        // 2714
     *                                                                                                                 // 2715
     *      R.min(789, 123); //=> 123                                                                                  // 2716
     *      R.min('a', 'b'); //=> 'a'                                                                                  // 2717
     */                                                                                                                // 2718
    var min = _curry2(function min(a, b) {                                                                             // 2719
        return b < a ? b : a;                                                                                          // 2720
    });                                                                                                                // 2721
                                                                                                                       // 2722
    /**                                                                                                                // 2723
     * Takes a function and two values, and returns whichever value produces the                                       // 2724
     * smaller result when passed to the provided function.                                                            // 2725
     *                                                                                                                 // 2726
     * @func                                                                                                           // 2727
     * @memberOf R                                                                                                     // 2728
     * @since v0.8.0                                                                                                   // 2729
     * @category Relation                                                                                              // 2730
     * @sig Ord b => (a -> b) -> a -> a -> a                                                                           // 2731
     * @param {Function} f                                                                                             // 2732
     * @param {*} a                                                                                                    // 2733
     * @param {*} b                                                                                                    // 2734
     * @return {*}                                                                                                     // 2735
     * @see R.min, R.maxBy                                                                                             // 2736
     * @example                                                                                                        // 2737
     *                                                                                                                 // 2738
     *      //  square :: Number -> Number                                                                             // 2739
     *      var square = n => n * n;                                                                                   // 2740
     *                                                                                                                 // 2741
     *      R.minBy(square, -3, 2); //=> 2                                                                             // 2742
     *                                                                                                                 // 2743
     *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1                                             // 2744
     *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity                                                     // 2745
     */                                                                                                                // 2746
    var minBy = _curry3(function minBy(f, a, b) {                                                                      // 2747
        return f(b) < f(a) ? b : a;                                                                                    // 2748
    });                                                                                                                // 2749
                                                                                                                       // 2750
    /**                                                                                                                // 2751
     * Divides the second parameter by the first and returns the remainder. Note                                       // 2752
     * that this function preserves the JavaScript-style behavior for modulo. For                                      // 2753
     * mathematical modulo see `mathMod`.                                                                              // 2754
     *                                                                                                                 // 2755
     * @func                                                                                                           // 2756
     * @memberOf R                                                                                                     // 2757
     * @since v0.1.1                                                                                                   // 2758
     * @category Math                                                                                                  // 2759
     * @sig Number -> Number -> Number                                                                                 // 2760
     * @param {Number} a The value to the divide.                                                                      // 2761
     * @param {Number} b The pseudo-modulus                                                                            // 2762
     * @return {Number} The result of `b % a`.                                                                         // 2763
     * @see R.mathMod                                                                                                  // 2764
     * @example                                                                                                        // 2765
     *                                                                                                                 // 2766
     *      R.modulo(17, 3); //=> 2                                                                                    // 2767
     *      // JS behavior:                                                                                            // 2768
     *      R.modulo(-17, 3); //=> -2                                                                                  // 2769
     *      R.modulo(17, -3); //=> 2                                                                                   // 2770
     *                                                                                                                 // 2771
     *      var isOdd = R.modulo(R.__, 2);                                                                             // 2772
     *      isOdd(42); //=> 0                                                                                          // 2773
     *      isOdd(21); //=> 1                                                                                          // 2774
     */                                                                                                                // 2775
    var modulo = _curry2(function modulo(a, b) {                                                                       // 2776
        return a % b;                                                                                                  // 2777
    });                                                                                                                // 2778
                                                                                                                       // 2779
    /**                                                                                                                // 2780
     * Multiplies two numbers. Equivalent to `a * b` but curried.                                                      // 2781
     *                                                                                                                 // 2782
     * @func                                                                                                           // 2783
     * @memberOf R                                                                                                     // 2784
     * @since v0.1.0                                                                                                   // 2785
     * @category Math                                                                                                  // 2786
     * @sig Number -> Number -> Number                                                                                 // 2787
     * @param {Number} a The first value.                                                                              // 2788
     * @param {Number} b The second value.                                                                             // 2789
     * @return {Number} The result of `a * b`.                                                                         // 2790
     * @see R.divide                                                                                                   // 2791
     * @example                                                                                                        // 2792
     *                                                                                                                 // 2793
     *      var double = R.multiply(2);                                                                                // 2794
     *      var triple = R.multiply(3);                                                                                // 2795
     *      double(3);       //=>  6                                                                                   // 2796
     *      triple(4);       //=> 12                                                                                   // 2797
     *      R.multiply(2, 5);  //=> 10                                                                                 // 2798
     */                                                                                                                // 2799
    var multiply = _curry2(function multiply(a, b) {                                                                   // 2800
        return a * b;                                                                                                  // 2801
    });                                                                                                                // 2802
                                                                                                                       // 2803
    /**                                                                                                                // 2804
     * Wraps a function of any arity (including nullary) in a function that accepts                                    // 2805
     * exactly `n` parameters. Any extraneous parameters will not be passed to the                                     // 2806
     * supplied function.                                                                                              // 2807
     *                                                                                                                 // 2808
     * @func                                                                                                           // 2809
     * @memberOf R                                                                                                     // 2810
     * @since v0.1.0                                                                                                   // 2811
     * @category Function                                                                                              // 2812
     * @sig Number -> (* -> a) -> (* -> a)                                                                             // 2813
     * @param {Number} n The desired arity of the new function.                                                        // 2814
     * @param {Function} fn The function to wrap.                                                                      // 2815
     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of                        // 2816
     *         arity `n`.                                                                                              // 2817
     * @example                                                                                                        // 2818
     *                                                                                                                 // 2819
     *      var takesTwoArgs = (a, b) => [a, b];                                                                       // 2820
     *                                                                                                                 // 2821
     *      takesTwoArgs.length; //=> 2                                                                                // 2822
     *      takesTwoArgs(1, 2); //=> [1, 2]                                                                            // 2823
     *                                                                                                                 // 2824
     *      var takesOneArg = R.nAry(1, takesTwoArgs);                                                                 // 2825
     *      takesOneArg.length; //=> 1                                                                                 // 2826
     *      // Only `n` arguments are passed to the wrapped function                                                   // 2827
     *      takesOneArg(1, 2); //=> [1, undefined]                                                                     // 2828
     */                                                                                                                // 2829
    var nAry = _curry2(function nAry(n, fn) {                                                                          // 2830
        switch (n) {                                                                                                   // 2831
        case 0:                                                                                                        // 2832
            return function () {                                                                                       // 2833
                return fn.call(this);                                                                                  // 2834
            };                                                                                                         // 2835
        case 1:                                                                                                        // 2836
            return function (a0) {                                                                                     // 2837
                return fn.call(this, a0);                                                                              // 2838
            };                                                                                                         // 2839
        case 2:                                                                                                        // 2840
            return function (a0, a1) {                                                                                 // 2841
                return fn.call(this, a0, a1);                                                                          // 2842
            };                                                                                                         // 2843
        case 3:                                                                                                        // 2844
            return function (a0, a1, a2) {                                                                             // 2845
                return fn.call(this, a0, a1, a2);                                                                      // 2846
            };                                                                                                         // 2847
        case 4:                                                                                                        // 2848
            return function (a0, a1, a2, a3) {                                                                         // 2849
                return fn.call(this, a0, a1, a2, a3);                                                                  // 2850
            };                                                                                                         // 2851
        case 5:                                                                                                        // 2852
            return function (a0, a1, a2, a3, a4) {                                                                     // 2853
                return fn.call(this, a0, a1, a2, a3, a4);                                                              // 2854
            };                                                                                                         // 2855
        case 6:                                                                                                        // 2856
            return function (a0, a1, a2, a3, a4, a5) {                                                                 // 2857
                return fn.call(this, a0, a1, a2, a3, a4, a5);                                                          // 2858
            };                                                                                                         // 2859
        case 7:                                                                                                        // 2860
            return function (a0, a1, a2, a3, a4, a5, a6) {                                                             // 2861
                return fn.call(this, a0, a1, a2, a3, a4, a5, a6);                                                      // 2862
            };                                                                                                         // 2863
        case 8:                                                                                                        // 2864
            return function (a0, a1, a2, a3, a4, a5, a6, a7) {                                                         // 2865
                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);                                                  // 2866
            };                                                                                                         // 2867
        case 9:                                                                                                        // 2868
            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {                                                     // 2869
                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);                                              // 2870
            };                                                                                                         // 2871
        case 10:                                                                                                       // 2872
            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {                                                 // 2873
                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);                                          // 2874
            };                                                                                                         // 2875
        default:                                                                                                       // 2876
            throw new Error('First argument to nAry must be a non-negative integer no greater than ten');              // 2877
        }                                                                                                              // 2878
    });                                                                                                                // 2879
                                                                                                                       // 2880
    /**                                                                                                                // 2881
     * Negates its argument.                                                                                           // 2882
     *                                                                                                                 // 2883
     * @func                                                                                                           // 2884
     * @memberOf R                                                                                                     // 2885
     * @since v0.9.0                                                                                                   // 2886
     * @category Math                                                                                                  // 2887
     * @sig Number -> Number                                                                                           // 2888
     * @param {Number} n                                                                                               // 2889
     * @return {Number}                                                                                                // 2890
     * @example                                                                                                        // 2891
     *                                                                                                                 // 2892
     *      R.negate(42); //=> -42                                                                                     // 2893
     */                                                                                                                // 2894
    var negate = _curry1(function negate(n) {                                                                          // 2895
        return -n;                                                                                                     // 2896
    });                                                                                                                // 2897
                                                                                                                       // 2898
    /**                                                                                                                // 2899
     * Returns `true` if no elements of the list match the predicate, `false`                                          // 2900
     * otherwise.                                                                                                      // 2901
     *                                                                                                                 // 2902
     * Dispatches to the `any` method of the second argument, if present.                                              // 2903
     *                                                                                                                 // 2904
     * @func                                                                                                           // 2905
     * @memberOf R                                                                                                     // 2906
     * @since v0.12.0                                                                                                  // 2907
     * @category List                                                                                                  // 2908
     * @sig (a -> Boolean) -> [a] -> Boolean                                                                           // 2909
     * @param {Function} fn The predicate function.                                                                    // 2910
     * @param {Array} list The array to consider.                                                                      // 2911
     * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.                 // 2912
     * @see R.all, R.any                                                                                               // 2913
     * @example                                                                                                        // 2914
     *                                                                                                                 // 2915
     *      R.none(R.isNaN, [1, 2, 3]); //=> true                                                                      // 2916
     *      R.none(R.isNaN, [1, 2, 3, NaN]); //=> false                                                                // 2917
     */                                                                                                                // 2918
    var none = _curry2(_complement(_dispatchable('any', _xany, any)));                                                 // 2919
                                                                                                                       // 2920
    /**                                                                                                                // 2921
     * A function that returns the `!` of its argument. It will return `true` when                                     // 2922
     * passed false-y value, and `false` when passed a truth-y one.                                                    // 2923
     *                                                                                                                 // 2924
     * @func                                                                                                           // 2925
     * @memberOf R                                                                                                     // 2926
     * @since v0.1.0                                                                                                   // 2927
     * @category Logic                                                                                                 // 2928
     * @sig * -> Boolean                                                                                               // 2929
     * @param {*} a any value                                                                                          // 2930
     * @return {Boolean} the logical inverse of passed argument.                                                       // 2931
     * @see R.complement                                                                                               // 2932
     * @example                                                                                                        // 2933
     *                                                                                                                 // 2934
     *      R.not(true); //=> false                                                                                    // 2935
     *      R.not(false); //=> true                                                                                    // 2936
     *      R.not(0); => true                                                                                          // 2937
     *      R.not(1); => false                                                                                         // 2938
     */                                                                                                                // 2939
    var not = _curry1(function not(a) {                                                                                // 2940
        return !a;                                                                                                     // 2941
    });                                                                                                                // 2942
                                                                                                                       // 2943
    /**                                                                                                                // 2944
     * Returns the nth element of the given list or string. If n is negative the                                       // 2945
     * element at index length + n is returned.                                                                        // 2946
     *                                                                                                                 // 2947
     * @func                                                                                                           // 2948
     * @memberOf R                                                                                                     // 2949
     * @since v0.1.0                                                                                                   // 2950
     * @category List                                                                                                  // 2951
     * @sig Number -> [a] -> a | Undefined                                                                             // 2952
     * @sig Number -> String -> String                                                                                 // 2953
     * @param {Number} offset                                                                                          // 2954
     * @param {*} list                                                                                                 // 2955
     * @return {*}                                                                                                     // 2956
     * @example                                                                                                        // 2957
     *                                                                                                                 // 2958
     *      var list = ['foo', 'bar', 'baz', 'quux'];                                                                  // 2959
     *      R.nth(1, list); //=> 'bar'                                                                                 // 2960
     *      R.nth(-1, list); //=> 'quux'                                                                               // 2961
     *      R.nth(-99, list); //=> undefined                                                                           // 2962
     *                                                                                                                 // 2963
     *      R.nth('abc', 2); //=> 'c'                                                                                  // 2964
     *      R.nth('abc', 3); //=> ''                                                                                   // 2965
     */                                                                                                                // 2966
    var nth = _curry2(function nth(offset, list) {                                                                     // 2967
        var idx = offset < 0 ? list.length + offset : offset;                                                          // 2968
        return _isString(list) ? list.charAt(idx) : list[idx];                                                         // 2969
    });                                                                                                                // 2970
                                                                                                                       // 2971
    /**                                                                                                                // 2972
     * Returns a function which returns its nth argument.                                                              // 2973
     *                                                                                                                 // 2974
     * @func                                                                                                           // 2975
     * @memberOf R                                                                                                     // 2976
     * @since v0.9.0                                                                                                   // 2977
     * @category Function                                                                                              // 2978
     * @sig Number -> *... -> *                                                                                        // 2979
     * @param {Number} n                                                                                               // 2980
     * @return {Function}                                                                                              // 2981
     * @example                                                                                                        // 2982
     *                                                                                                                 // 2983
     *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'                                                                       // 2984
     *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'                                                                      // 2985
     */                                                                                                                // 2986
    var nthArg = _curry1(function nthArg(n) {                                                                          // 2987
        return function () {                                                                                           // 2988
            return nth(n, arguments);                                                                                  // 2989
        };                                                                                                             // 2990
    });                                                                                                                // 2991
                                                                                                                       // 2992
    /**                                                                                                                // 2993
     * Creates an object containing a single key:value pair.                                                           // 2994
     *                                                                                                                 // 2995
     * @func                                                                                                           // 2996
     * @memberOf R                                                                                                     // 2997
     * @since v0.18.0                                                                                                  // 2998
     * @category Object                                                                                                // 2999
     * @sig String -> a -> {String:a}                                                                                  // 3000
     * @param {String} key                                                                                             // 3001
     * @param {*} val                                                                                                  // 3002
     * @return {Object}                                                                                                // 3003
     * @see R.pair                                                                                                     // 3004
     * @example                                                                                                        // 3005
     *                                                                                                                 // 3006
     *      var matchPhrases = R.compose(                                                                              // 3007
     *        R.objOf('must'),                                                                                         // 3008
     *        R.map(R.objOf('match_phrase'))                                                                           // 3009
     *      );                                                                                                         // 3010
     *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}
     */                                                                                                                // 3012
    var objOf = _curry2(function objOf(key, val) {                                                                     // 3013
        var obj = {};                                                                                                  // 3014
        obj[key] = val;                                                                                                // 3015
        return obj;                                                                                                    // 3016
    });                                                                                                                // 3017
                                                                                                                       // 3018
    /**                                                                                                                // 3019
     * Returns a singleton array containing the value provided.                                                        // 3020
     *                                                                                                                 // 3021
     * Note this `of` is different from the ES6 `of`; See                                                              // 3022
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of                       // 3023
     *                                                                                                                 // 3024
     * @func                                                                                                           // 3025
     * @memberOf R                                                                                                     // 3026
     * @since v0.3.0                                                                                                   // 3027
     * @category Function                                                                                              // 3028
     * @sig a -> [a]                                                                                                   // 3029
     * @param {*} x any value                                                                                          // 3030
     * @return {Array} An array wrapping `x`.                                                                          // 3031
     * @example                                                                                                        // 3032
     *                                                                                                                 // 3033
     *      R.of(null); //=> [null]                                                                                    // 3034
     *      R.of([42]); //=> [[42]]                                                                                    // 3035
     */                                                                                                                // 3036
    var of = _curry1(_of);                                                                                             // 3037
                                                                                                                       // 3038
    /**                                                                                                                // 3039
     * Accepts a function `fn` and returns a function that guards invocation of                                        // 3040
     * `fn` such that `fn` can only ever be called once, no matter how many times                                      // 3041
     * the returned function is invoked. The first value calculated is returned in                                     // 3042
     * subsequent invocations.                                                                                         // 3043
     *                                                                                                                 // 3044
     * @func                                                                                                           // 3045
     * @memberOf R                                                                                                     // 3046
     * @since v0.1.0                                                                                                   // 3047
     * @category Function                                                                                              // 3048
     * @sig (a... -> b) -> (a... -> b)                                                                                 // 3049
     * @param {Function} fn The function to wrap in a call-only-once wrapper.                                          // 3050
     * @return {Function} The wrapped function.                                                                        // 3051
     * @example                                                                                                        // 3052
     *                                                                                                                 // 3053
     *      var addOneOnce = R.once(x => x + 1);                                                                       // 3054
     *      addOneOnce(10); //=> 11                                                                                    // 3055
     *      addOneOnce(addOneOnce(50)); //=> 11                                                                        // 3056
     */                                                                                                                // 3057
    var once = _curry1(function once(fn) {                                                                             // 3058
        var called = false;                                                                                            // 3059
        var result;                                                                                                    // 3060
        return _arity(fn.length, function () {                                                                         // 3061
            if (called) {                                                                                              // 3062
                return result;                                                                                         // 3063
            }                                                                                                          // 3064
            called = true;                                                                                             // 3065
            result = fn.apply(this, arguments);                                                                        // 3066
            return result;                                                                                             // 3067
        });                                                                                                            // 3068
    });                                                                                                                // 3069
                                                                                                                       // 3070
    /**                                                                                                                // 3071
     * Returns `true` if one or both of its arguments are `true`. Returns `false`                                      // 3072
     * if both arguments are `false`.                                                                                  // 3073
     *                                                                                                                 // 3074
     * @func                                                                                                           // 3075
     * @memberOf R                                                                                                     // 3076
     * @since v0.1.0                                                                                                   // 3077
     * @category Logic                                                                                                 // 3078
     * @sig * -> * -> *                                                                                                // 3079
     * @param {Boolean} a A boolean value                                                                              // 3080
     * @param {Boolean} b A boolean value                                                                              // 3081
     * @return {Boolean} `true` if one or both arguments are `true`, `false` otherwise                                 // 3082
     * @see R.either                                                                                                   // 3083
     * @example                                                                                                        // 3084
     *                                                                                                                 // 3085
     *      R.or(true, true); //=> true                                                                                // 3086
     *      R.or(true, false); //=> true                                                                               // 3087
     *      R.or(false, true); //=> true                                                                               // 3088
     *      R.or(false, false); //=> false                                                                             // 3089
     */                                                                                                                // 3090
    var or = _curry2(function or(a, b) {                                                                               // 3091
        return a || b;                                                                                                 // 3092
    });                                                                                                                // 3093
                                                                                                                       // 3094
    /**                                                                                                                // 3095
     * Returns the result of "setting" the portion of the given data structure                                         // 3096
     * focused by the given lens to the result of applying the given function to                                       // 3097
     * the focused value.                                                                                              // 3098
     *                                                                                                                 // 3099
     * @func                                                                                                           // 3100
     * @memberOf R                                                                                                     // 3101
     * @since v0.16.0                                                                                                  // 3102
     * @category Object                                                                                                // 3103
     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s                                                        // 3104
     * @sig Lens s a -> (a -> a) -> s -> s                                                                             // 3105
     * @param {Lens} lens                                                                                              // 3106
     * @param {*} v                                                                                                    // 3107
     * @param {*} x                                                                                                    // 3108
     * @return {*}                                                                                                     // 3109
     * @see R.prop, R.lensIndex, R.lensProp                                                                            // 3110
     * @example                                                                                                        // 3111
     *                                                                                                                 // 3112
     *      var headLens = R.lensIndex(0);                                                                             // 3113
     *                                                                                                                 // 3114
     *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']                             // 3115
     */                                                                                                                // 3116
    var over = function () {                                                                                           // 3117
        var Identity = function (x) {                                                                                  // 3118
            return {                                                                                                   // 3119
                value: x,                                                                                              // 3120
                map: function (f) {                                                                                    // 3121
                    return Identity(f(x));                                                                             // 3122
                }                                                                                                      // 3123
            };                                                                                                         // 3124
        };                                                                                                             // 3125
        return _curry3(function over(lens, f, x) {                                                                     // 3126
            return lens(function (y) {                                                                                 // 3127
                return Identity(f(y));                                                                                 // 3128
            })(x).value;                                                                                               // 3129
        });                                                                                                            // 3130
    }();                                                                                                               // 3131
                                                                                                                       // 3132
    /**                                                                                                                // 3133
     * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.                                                 // 3134
     *                                                                                                                 // 3135
     * @func                                                                                                           // 3136
     * @memberOf R                                                                                                     // 3137
     * @since v0.18.0                                                                                                  // 3138
     * @category List                                                                                                  // 3139
     * @sig a -> b -> (a,b)                                                                                            // 3140
     * @param {*} fst                                                                                                  // 3141
     * @param {*} snd                                                                                                  // 3142
     * @return {Array}                                                                                                 // 3143
     * @see R.createMapEntry, R.of                                                                                     // 3144
     * @example                                                                                                        // 3145
     *                                                                                                                 // 3146
     *      R.pair('foo', 'bar'); //=> ['foo', 'bar']                                                                  // 3147
     */                                                                                                                // 3148
    var pair = _curry2(function pair(fst, snd) {                                                                       // 3149
        return [                                                                                                       // 3150
            fst,                                                                                                       // 3151
            snd                                                                                                        // 3152
        ];                                                                                                             // 3153
    });                                                                                                                // 3154
                                                                                                                       // 3155
    /**                                                                                                                // 3156
     * Retrieve the value at a given path.                                                                             // 3157
     *                                                                                                                 // 3158
     * @func                                                                                                           // 3159
     * @memberOf R                                                                                                     // 3160
     * @since v0.2.0                                                                                                   // 3161
     * @category Object                                                                                                // 3162
     * @sig [String] -> {k: v} -> v | Undefined                                                                        // 3163
     * @param {Array} path The path to use.                                                                            // 3164
     * @param {Object} obj The object to retrieve the nested property from.                                            // 3165
     * @return {*} The data at `path`.                                                                                 // 3166
     * @example                                                                                                        // 3167
     *                                                                                                                 // 3168
     *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2                                                                    // 3169
     *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined                                                            // 3170
     */                                                                                                                // 3171
    var path = _curry2(function path(paths, obj) {                                                                     // 3172
        var val = obj;                                                                                                 // 3173
        var idx = 0;                                                                                                   // 3174
        while (idx < paths.length) {                                                                                   // 3175
            if (val == null) {                                                                                         // 3176
                return;                                                                                                // 3177
            }                                                                                                          // 3178
            val = val[paths[idx]];                                                                                     // 3179
            idx += 1;                                                                                                  // 3180
        }                                                                                                              // 3181
        return val;                                                                                                    // 3182
    });                                                                                                                // 3183
                                                                                                                       // 3184
    /**                                                                                                                // 3185
     * If the given, non-null object has a value at the given path, returns the                                        // 3186
     * value at that path. Otherwise returns the provided default value.                                               // 3187
     *                                                                                                                 // 3188
     * @func                                                                                                           // 3189
     * @memberOf R                                                                                                     // 3190
     * @since v0.18.0                                                                                                  // 3191
     * @category Object                                                                                                // 3192
     * @sig a -> [String] -> Object -> a                                                                               // 3193
     * @param {*} d The default value.                                                                                 // 3194
     * @param {Array} p The path to use.                                                                               // 3195
     * @param {Object} obj The object to retrieve the nested property from.                                            // 3196
     * @return {*} The data at `path` of the supplied object or the default value.                                     // 3197
     * @example                                                                                                        // 3198
     *                                                                                                                 // 3199
     *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2                                                           // 3200
     *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> "N/A"                                                       // 3201
     */                                                                                                                // 3202
    var pathOr = _curry3(function pathOr(d, p, obj) {                                                                  // 3203
        return defaultTo(d, path(p, obj));                                                                             // 3204
    });                                                                                                                // 3205
                                                                                                                       // 3206
    /**                                                                                                                // 3207
     * Returns `true` if the specified object property at given path satisfies the                                     // 3208
     * given predicate; `false` otherwise.                                                                             // 3209
     *                                                                                                                 // 3210
     * @func                                                                                                           // 3211
     * @memberOf R                                                                                                     // 3212
     * @since 0.19.0                                                                                                   // 3213
     * @category Logic                                                                                                 // 3214
     * @sig (a -> Boolean) -> [String] -> Object -> Boolean                                                            // 3215
     * @param {Function} pred                                                                                          // 3216
     * @param {Array} propPath                                                                                         // 3217
     * @param {*} obj                                                                                                  // 3218
     * @return {Boolean}                                                                                               // 3219
     * @see R.propSatisfies, R.path                                                                                    // 3220
     * @example                                                                                                        // 3221
     *                                                                                                                 // 3222
     *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true                                            // 3223
     */                                                                                                                // 3224
    var pathSatisfies = _curry3(function pathSatisfies(pred, propPath, obj) {                                          // 3225
        return propPath.length > 0 && pred(path(propPath, obj));                                                       // 3226
    });                                                                                                                // 3227
                                                                                                                       // 3228
    /**                                                                                                                // 3229
     * Returns a partial copy of an object containing only the keys specified. If                                      // 3230
     * the key does not exist, the property is ignored.                                                                // 3231
     *                                                                                                                 // 3232
     * @func                                                                                                           // 3233
     * @memberOf R                                                                                                     // 3234
     * @since v0.1.0                                                                                                   // 3235
     * @category Object                                                                                                // 3236
     * @sig [k] -> {k: v} -> {k: v}                                                                                    // 3237
     * @param {Array} names an array of String property names to copy onto a new object                                // 3238
     * @param {Object} obj The object to copy from                                                                     // 3239
     * @return {Object} A new object with only properties from `names` on it.                                          // 3240
     * @see R.omit, R.props                                                                                            // 3241
     * @example                                                                                                        // 3242
     *                                                                                                                 // 3243
     *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}                                            // 3244
     *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}                                             // 3245
     */                                                                                                                // 3246
    var pick = _curry2(function pick(names, obj) {                                                                     // 3247
        var result = {};                                                                                               // 3248
        var idx = 0;                                                                                                   // 3249
        while (idx < names.length) {                                                                                   // 3250
            if (names[idx] in obj) {                                                                                   // 3251
                result[names[idx]] = obj[names[idx]];                                                                  // 3252
            }                                                                                                          // 3253
            idx += 1;                                                                                                  // 3254
        }                                                                                                              // 3255
        return result;                                                                                                 // 3256
    });                                                                                                                // 3257
                                                                                                                       // 3258
    /**                                                                                                                // 3259
     * Similar to `pick` except that this one includes a `key: undefined` pair for                                     // 3260
     * properties that don't exist.                                                                                    // 3261
     *                                                                                                                 // 3262
     * @func                                                                                                           // 3263
     * @memberOf R                                                                                                     // 3264
     * @since v0.1.0                                                                                                   // 3265
     * @category Object                                                                                                // 3266
     * @sig [k] -> {k: v} -> {k: v}                                                                                    // 3267
     * @param {Array} names an array of String property names to copy onto a new object                                // 3268
     * @param {Object} obj The object to copy from                                                                     // 3269
     * @return {Object} A new object with only properties from `names` on it.                                          // 3270
     * @see R.pick                                                                                                     // 3271
     * @example                                                                                                        // 3272
     *                                                                                                                 // 3273
     *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}                                         // 3274
     *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}              // 3275
     */                                                                                                                // 3276
    var pickAll = _curry2(function pickAll(names, obj) {                                                               // 3277
        var result = {};                                                                                               // 3278
        var idx = 0;                                                                                                   // 3279
        var len = names.length;                                                                                        // 3280
        while (idx < len) {                                                                                            // 3281
            var name = names[idx];                                                                                     // 3282
            result[name] = obj[name];                                                                                  // 3283
            idx += 1;                                                                                                  // 3284
        }                                                                                                              // 3285
        return result;                                                                                                 // 3286
    });                                                                                                                // 3287
                                                                                                                       // 3288
    /**                                                                                                                // 3289
     * Returns a partial copy of an object containing only the keys that satisfy                                       // 3290
     * the supplied predicate.                                                                                         // 3291
     *                                                                                                                 // 3292
     * @func                                                                                                           // 3293
     * @memberOf R                                                                                                     // 3294
     * @since v0.8.0                                                                                                   // 3295
     * @category Object                                                                                                // 3296
     * @sig (v, k -> Boolean) -> {k: v} -> {k: v}                                                                      // 3297
     * @param {Function} pred A predicate to determine whether or not a key                                            // 3298
     *        should be included on the output object.                                                                 // 3299
     * @param {Object} obj The object to copy from                                                                     // 3300
     * @return {Object} A new object with only properties that satisfy `pred`                                          // 3301
     *         on it.                                                                                                  // 3302
     * @see R.pick, R.filter                                                                                           // 3303
     * @example                                                                                                        // 3304
     *                                                                                                                 // 3305
     *      var isUpperCase = (val, key) => key.toUpperCase() === key;                                                 // 3306
     *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}                                         // 3307
     */                                                                                                                // 3308
    var pickBy = _curry2(function pickBy(test, obj) {                                                                  // 3309
        var result = {};                                                                                               // 3310
        for (var prop in obj) {                                                                                        // 3311
            if (test(obj[prop], prop, obj)) {                                                                          // 3312
                result[prop] = obj[prop];                                                                              // 3313
            }                                                                                                          // 3314
        }                                                                                                              // 3315
        return result;                                                                                                 // 3316
    });                                                                                                                // 3317
                                                                                                                       // 3318
    /**                                                                                                                // 3319
     * Returns a new list with the given element at the front, followed by the                                         // 3320
     * contents of the list.                                                                                           // 3321
     *                                                                                                                 // 3322
     * @func                                                                                                           // 3323
     * @memberOf R                                                                                                     // 3324
     * @since v0.1.0                                                                                                   // 3325
     * @category List                                                                                                  // 3326
     * @sig a -> [a] -> [a]                                                                                            // 3327
     * @param {*} el The item to add to the head of the output list.                                                   // 3328
     * @param {Array} list The array to add to the tail of the output list.                                            // 3329
     * @return {Array} A new array.                                                                                    // 3330
     * @see R.append                                                                                                   // 3331
     * @example                                                                                                        // 3332
     *                                                                                                                 // 3333
     *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']                                     // 3334
     */                                                                                                                // 3335
    var prepend = _curry2(function prepend(el, list) {                                                                 // 3336
        return _concat([el], list);                                                                                    // 3337
    });                                                                                                                // 3338
                                                                                                                       // 3339
    /**                                                                                                                // 3340
     * Returns a function that when supplied an object returns the indicated                                           // 3341
     * property of that object, if it exists.                                                                          // 3342
     *                                                                                                                 // 3343
     * @func                                                                                                           // 3344
     * @memberOf R                                                                                                     // 3345
     * @since v0.1.0                                                                                                   // 3346
     * @category Object                                                                                                // 3347
     * @sig s -> {s: a} -> a | Undefined                                                                               // 3348
     * @param {String} p The property name                                                                             // 3349
     * @param {Object} obj The object to query                                                                         // 3350
     * @return {*} The value at `obj.p`.                                                                               // 3351
     * @example                                                                                                        // 3352
     *                                                                                                                 // 3353
     *      R.prop('x', {x: 100}); //=> 100                                                                            // 3354
     *      R.prop('x', {}); //=> undefined                                                                            // 3355
     */                                                                                                                // 3356
    var prop = _curry2(function prop(p, obj) {                                                                         // 3357
        return obj[p];                                                                                                 // 3358
    });                                                                                                                // 3359
                                                                                                                       // 3360
    /**                                                                                                                // 3361
     * If the given, non-null object has an own property with the specified name,                                      // 3362
     * returns the value of that property. Otherwise returns the provided default                                      // 3363
     * value.                                                                                                          // 3364
     *                                                                                                                 // 3365
     * @func                                                                                                           // 3366
     * @memberOf R                                                                                                     // 3367
     * @since v0.6.0                                                                                                   // 3368
     * @category Object                                                                                                // 3369
     * @sig a -> String -> Object -> a                                                                                 // 3370
     * @param {*} val The default value.                                                                               // 3371
     * @param {String} p The name of the property to return.                                                           // 3372
     * @param {Object} obj The object to query.                                                                        // 3373
     * @return {*} The value of given property of the supplied object or the default value.                            // 3374
     * @example                                                                                                        // 3375
     *                                                                                                                 // 3376
     *      var alice = {                                                                                              // 3377
     *        name: 'ALICE',                                                                                           // 3378
     *        age: 101                                                                                                 // 3379
     *      };                                                                                                         // 3380
     *      var favorite = R.prop('favoriteLibrary');                                                                  // 3381
     *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');                                            // 3382
     *                                                                                                                 // 3383
     *      favorite(alice);  //=> undefined                                                                           // 3384
     *      favoriteWithDefault(alice);  //=> 'Ramda'                                                                  // 3385
     */                                                                                                                // 3386
    var propOr = _curry3(function propOr(val, p, obj) {                                                                // 3387
        return obj != null && _has(p, obj) ? obj[p] : val;                                                             // 3388
    });                                                                                                                // 3389
                                                                                                                       // 3390
    /**                                                                                                                // 3391
     * Returns `true` if the specified object property satisfies the given                                             // 3392
     * predicate; `false` otherwise.                                                                                   // 3393
     *                                                                                                                 // 3394
     * @func                                                                                                           // 3395
     * @memberOf R                                                                                                     // 3396
     * @since v0.16.0                                                                                                  // 3397
     * @category Logic                                                                                                 // 3398
     * @sig (a -> Boolean) -> String -> {String: a} -> Boolean                                                         // 3399
     * @param {Function} pred                                                                                          // 3400
     * @param {String} name                                                                                            // 3401
     * @param {*} obj                                                                                                  // 3402
     * @return {Boolean}                                                                                               // 3403
     * @see R.propEq, R.propIs                                                                                         // 3404
     * @example                                                                                                        // 3405
     *                                                                                                                 // 3406
     *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true                                                  // 3407
     */                                                                                                                // 3408
    var propSatisfies = _curry3(function propSatisfies(pred, name, obj) {                                              // 3409
        return pred(obj[name]);                                                                                        // 3410
    });                                                                                                                // 3411
                                                                                                                       // 3412
    /**                                                                                                                // 3413
     * Acts as multiple `prop`: array of keys in, array of values out. Preserves                                       // 3414
     * order.                                                                                                          // 3415
     *                                                                                                                 // 3416
     * @func                                                                                                           // 3417
     * @memberOf R                                                                                                     // 3418
     * @since v0.1.0                                                                                                   // 3419
     * @category Object                                                                                                // 3420
     * @sig [k] -> {k: v} -> [v]                                                                                       // 3421
     * @param {Array} ps The property names to fetch                                                                   // 3422
     * @param {Object} obj The object to query                                                                         // 3423
     * @return {Array} The corresponding values or partially applied function.                                         // 3424
     * @example                                                                                                        // 3425
     *                                                                                                                 // 3426
     *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]                                                             // 3427
     *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]                                             // 3428
     *                                                                                                                 // 3429
     *      var fullName = R.compose(R.join(' '), R.props(['first', 'last']));                                         // 3430
     *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'                         // 3431
     */                                                                                                                // 3432
    var props = _curry2(function props(ps, obj) {                                                                      // 3433
        var len = ps.length;                                                                                           // 3434
        var out = [];                                                                                                  // 3435
        var idx = 0;                                                                                                   // 3436
        while (idx < len) {                                                                                            // 3437
            out[idx] = obj[ps[idx]];                                                                                   // 3438
            idx += 1;                                                                                                  // 3439
        }                                                                                                              // 3440
        return out;                                                                                                    // 3441
    });                                                                                                                // 3442
                                                                                                                       // 3443
    /**                                                                                                                // 3444
     * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).                                          // 3445
     *                                                                                                                 // 3446
     * @func                                                                                                           // 3447
     * @memberOf R                                                                                                     // 3448
     * @since v0.1.0                                                                                                   // 3449
     * @category List                                                                                                  // 3450
     * @sig Number -> Number -> [Number]                                                                               // 3451
     * @param {Number} from The first number in the list.                                                              // 3452
     * @param {Number} to One more than the last number in the list.                                                   // 3453
     * @return {Array} The list of numbers in tthe set `[a, b)`.                                                       // 3454
     * @example                                                                                                        // 3455
     *                                                                                                                 // 3456
     *      R.range(1, 5);    //=> [1, 2, 3, 4]                                                                        // 3457
     *      R.range(50, 53);  //=> [50, 51, 52]                                                                        // 3458
     */                                                                                                                // 3459
    var range = _curry2(function range(from, to) {                                                                     // 3460
        if (!(_isNumber(from) && _isNumber(to))) {                                                                     // 3461
            throw new TypeError('Both arguments to range must be numbers');                                            // 3462
        }                                                                                                              // 3463
        var result = [];                                                                                               // 3464
        var n = from;                                                                                                  // 3465
        while (n < to) {                                                                                               // 3466
            result.push(n);                                                                                            // 3467
            n += 1;                                                                                                    // 3468
        }                                                                                                              // 3469
        return result;                                                                                                 // 3470
    });                                                                                                                // 3471
                                                                                                                       // 3472
    /**                                                                                                                // 3473
     * Returns a single item by iterating through the list, successively calling                                       // 3474
     * the iterator function and passing it an accumulator value and the current                                       // 3475
     * value from the array, and then passing the result to the next call.                                             // 3476
     *                                                                                                                 // 3477
     * Similar to `reduce`, except moves through the input list from the right to                                      // 3478
     * the left.                                                                                                       // 3479
     *                                                                                                                 // 3480
     * The iterator function receives two values: *(acc, value)*                                                       // 3481
     *                                                                                                                 // 3482
     * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse                                       // 3483
     * arrays), unlike the native `Array.prototype.reduce` method. For more details                                    // 3484
     * on this behavior, see:                                                                                          // 3485
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description  // 3486
     *                                                                                                                 // 3487
     * @func                                                                                                           // 3488
     * @memberOf R                                                                                                     // 3489
     * @since v0.1.0                                                                                                   // 3490
     * @category List                                                                                                  // 3491
     * @sig (a,b -> a) -> a -> [b] -> a                                                                                // 3492
     * @param {Function} fn The iterator function. Receives two values, the accumulator and the                        // 3493
     *        current element from the array.                                                                          // 3494
     * @param {*} acc The accumulator value.                                                                           // 3495
     * @param {Array} list The list to iterate over.                                                                   // 3496
     * @return {*} The final, accumulated value.                                                                       // 3497
     * @see R.addIndex                                                                                                 // 3498
     * @example                                                                                                        // 3499
     *                                                                                                                 // 3500
     *      var pairs = [ ['a', 1], ['b', 2], ['c', 3] ];                                                              // 3501
     *      var flattenPairs = (acc, pair) => acc.concat(pair);                                                        // 3502
     *                                                                                                                 // 3503
     *      R.reduceRight(flattenPairs, [], pairs); //=> [ 'c', 3, 'b', 2, 'a', 1 ]                                    // 3504
     */                                                                                                                // 3505
    var reduceRight = _curry3(function reduceRight(fn, acc, list) {                                                    // 3506
        var idx = list.length - 1;                                                                                     // 3507
        while (idx >= 0) {                                                                                             // 3508
            acc = fn(acc, list[idx]);                                                                                  // 3509
            idx -= 1;                                                                                                  // 3510
        }                                                                                                              // 3511
        return acc;                                                                                                    // 3512
    });                                                                                                                // 3513
                                                                                                                       // 3514
    /**                                                                                                                // 3515
     * Returns a value wrapped to indicate that it is the final value of the reduce                                    // 3516
     * and transduce functions. The returned value should be considered a black                                        // 3517
     * box: the internal structure is not guaranteed to be stable.                                                     // 3518
     *                                                                                                                 // 3519
     * Note: this optimization is unavailable to functions not explicitly listed                                       // 3520
     * above. For instance, it is not currently supported by reduceRight.                                              // 3521
     *                                                                                                                 // 3522
     * @func                                                                                                           // 3523
     * @memberOf R                                                                                                     // 3524
     * @since v0.15.0                                                                                                  // 3525
     * @category List                                                                                                  // 3526
     * @sig a -> *                                                                                                     // 3527
     * @param {*} x The final value of the reduce.                                                                     // 3528
     * @return {*} The wrapped value.                                                                                  // 3529
     * @see R.reduce, R.transduce                                                                                      // 3530
     * @example                                                                                                        // 3531
     *                                                                                                                 // 3532
     *      R.reduce(                                                                                                  // 3533
     *        R.pipe(R.add, R.when(R.gte(R.__, 10), R.reduced)),                                                       // 3534
     *        0,                                                                                                       // 3535
     *        [1, 2, 3, 4, 5]) // 10                                                                                   // 3536
     */                                                                                                                // 3537
    var reduced = _curry1(_reduced);                                                                                   // 3538
                                                                                                                       // 3539
    /**                                                                                                                // 3540
     * Removes the sub-list of `list` starting at index `start` and containing                                         // 3541
     * `count` elements. _Note that this is not destructive_: it returns a copy of                                     // 3542
     * the list with the changes.                                                                                      // 3543
     * <small>No lists have been harmed in the application of this function.</small>                                   // 3544
     *                                                                                                                 // 3545
     * @func                                                                                                           // 3546
     * @memberOf R                                                                                                     // 3547
     * @since v0.2.2                                                                                                   // 3548
     * @category List                                                                                                  // 3549
     * @sig Number -> Number -> [a] -> [a]                                                                             // 3550
     * @param {Number} start The position to start removing elements                                                   // 3551
     * @param {Number} count The number of elements to remove                                                          // 3552
     * @param {Array} list The list to remove from                                                                     // 3553
     * @return {Array} A new Array with `count` elements from `start` removed.                                         // 3554
     * @example                                                                                                        // 3555
     *                                                                                                                 // 3556
     *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]                                                        // 3557
     */                                                                                                                // 3558
    var remove = _curry3(function remove(start, count, list) {                                                         // 3559
        return _concat(_slice(list, 0, Math.min(start, list.length)), _slice(list, Math.min(list.length, start + count)));
    });                                                                                                                // 3561
                                                                                                                       // 3562
    /**                                                                                                                // 3563
     * Replace a substring or regex match in a string with a replacement.                                              // 3564
     *                                                                                                                 // 3565
     * @func                                                                                                           // 3566
     * @memberOf R                                                                                                     // 3567
     * @since v0.7.0                                                                                                   // 3568
     * @category String                                                                                                // 3569
     * @sig RegExp|String -> String -> String -> String                                                                // 3570
     * @param {RegExp|String} pattern A regular expression or a substring to match.                                    // 3571
     * @param {String} replacement The string to replace the matches with.                                             // 3572
     * @param {String} str The String to do the search and replacement in.                                             // 3573
     * @return {String} The result.                                                                                    // 3574
     * @example                                                                                                        // 3575
     *                                                                                                                 // 3576
     *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'                                                 // 3577
     *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'                                                 // 3578
     *                                                                                                                 // 3579
     *      // Use the "g" (global) flag to replace all occurrences:                                                   // 3580
     *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'                                                // 3581
     */                                                                                                                // 3582
    var replace = _curry3(function replace(regex, replacement, str) {                                                  // 3583
        return str.replace(regex, replacement);                                                                        // 3584
    });                                                                                                                // 3585
                                                                                                                       // 3586
    /**                                                                                                                // 3587
     * Returns a new list or string with the elements or characters in reverse                                         // 3588
     * order.                                                                                                          // 3589
     *                                                                                                                 // 3590
     * @func                                                                                                           // 3591
     * @memberOf R                                                                                                     // 3592
     * @since v0.1.0                                                                                                   // 3593
     * @category List                                                                                                  // 3594
     * @sig [a] -> [a]                                                                                                 // 3595
     * @sig String -> String                                                                                           // 3596
     * @param {Array|String} list                                                                                      // 3597
     * @return {Array|String}                                                                                          // 3598
     * @example                                                                                                        // 3599
     *                                                                                                                 // 3600
     *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]                                                                      // 3601
     *      R.reverse([1, 2]);     //=> [2, 1]                                                                         // 3602
     *      R.reverse([1]);        //=> [1]                                                                            // 3603
     *      R.reverse([]);         //=> []                                                                             // 3604
     *                                                                                                                 // 3605
     *      R.reverse('abc');      //=> 'cba'                                                                          // 3606
     *      R.reverse('ab');       //=> 'ba'                                                                           // 3607
     *      R.reverse('a');        //=> 'a'                                                                            // 3608
     *      R.reverse('');         //=> ''                                                                             // 3609
     */                                                                                                                // 3610
    var reverse = _curry1(function reverse(list) {                                                                     // 3611
        return _isString(list) ? list.split('').reverse().join('') : _slice(list).reverse();                           // 3612
    });                                                                                                                // 3613
                                                                                                                       // 3614
    /**                                                                                                                // 3615
     * Scan is similar to reduce, but returns a list of successively reduced values                                    // 3616
     * from the left                                                                                                   // 3617
     *                                                                                                                 // 3618
     * @func                                                                                                           // 3619
     * @memberOf R                                                                                                     // 3620
     * @since v0.10.0                                                                                                  // 3621
     * @category List                                                                                                  // 3622
     * @sig (a,b -> a) -> a -> [b] -> [a]                                                                              // 3623
     * @param {Function} fn The iterator function. Receives two values, the accumulator and the                        // 3624
     *        current element from the array                                                                           // 3625
     * @param {*} acc The accumulator value.                                                                           // 3626
     * @param {Array} list The list to iterate over.                                                                   // 3627
     * @return {Array} A list of all intermediately reduced values.                                                    // 3628
     * @example                                                                                                        // 3629
     *                                                                                                                 // 3630
     *      var numbers = [1, 2, 3, 4];                                                                                // 3631
     *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]                                     // 3632
     */                                                                                                                // 3633
    var scan = _curry3(function scan(fn, acc, list) {                                                                  // 3634
        var idx = 0;                                                                                                   // 3635
        var len = list.length;                                                                                         // 3636
        var result = [acc];                                                                                            // 3637
        while (idx < len) {                                                                                            // 3638
            acc = fn(acc, list[idx]);                                                                                  // 3639
            result[idx + 1] = acc;                                                                                     // 3640
            idx += 1;                                                                                                  // 3641
        }                                                                                                              // 3642
        return result;                                                                                                 // 3643
    });                                                                                                                // 3644
                                                                                                                       // 3645
    /**                                                                                                                // 3646
     * Returns the result of "setting" the portion of the given data structure                                         // 3647
     * focused by the given lens to the given value.                                                                   // 3648
     *                                                                                                                 // 3649
     * @func                                                                                                           // 3650
     * @memberOf R                                                                                                     // 3651
     * @since v0.16.0                                                                                                  // 3652
     * @category Object                                                                                                // 3653
     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s                                                        // 3654
     * @sig Lens s a -> a -> s -> s                                                                                    // 3655
     * @param {Lens} lens                                                                                              // 3656
     * @param {*} v                                                                                                    // 3657
     * @param {*} x                                                                                                    // 3658
     * @return {*}                                                                                                     // 3659
     * @see R.prop, R.lensIndex, R.lensProp                                                                            // 3660
     * @example                                                                                                        // 3661
     *                                                                                                                 // 3662
     *      var xLens = R.lensProp('x');                                                                               // 3663
     *                                                                                                                 // 3664
     *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}                                                          // 3665
     *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}                                                          // 3666
     */                                                                                                                // 3667
    var set = _curry3(function set(lens, v, x) {                                                                       // 3668
        return over(lens, always(v), x);                                                                               // 3669
    });                                                                                                                // 3670
                                                                                                                       // 3671
    /**                                                                                                                // 3672
     * Returns the elements of the given list or string (or object with a `slice`                                      // 3673
     * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).                                                  // 3674
     *                                                                                                                 // 3675
     * Dispatches to the `slice` method of the third argument, if present.                                             // 3676
     *                                                                                                                 // 3677
     * @func                                                                                                           // 3678
     * @memberOf R                                                                                                     // 3679
     * @since v0.1.4                                                                                                   // 3680
     * @category List                                                                                                  // 3681
     * @sig Number -> Number -> [a] -> [a]                                                                             // 3682
     * @sig Number -> Number -> String -> String                                                                       // 3683
     * @param {Number} fromIndex The start index (inclusive).                                                          // 3684
     * @param {Number} toIndex The end index (exclusive).                                                              // 3685
     * @param {*} list                                                                                                 // 3686
     * @return {*}                                                                                                     // 3687
     * @example                                                                                                        // 3688
     *                                                                                                                 // 3689
     *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']                                                // 3690
     *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']                                           // 3691
     *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']                                           // 3692
     *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']                                                // 3693
     *      R.slice(0, 3, 'ramda');                     //=> 'ram'                                                     // 3694
     */                                                                                                                // 3695
    var slice = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {                            // 3696
        return Array.prototype.slice.call(list, fromIndex, toIndex);                                                   // 3697
    }));                                                                                                               // 3698
                                                                                                                       // 3699
    /**                                                                                                                // 3700
     * Returns a copy of the list, sorted according to the comparator function,                                        // 3701
     * which should accept two values at a time and return a negative number if the                                    // 3702
     * first value is smaller, a positive number if it's larger, and zero if they                                      // 3703
     * are equal. Please note that this is a **copy** of the list. It does not                                         // 3704
     * modify the original.                                                                                            // 3705
     *                                                                                                                 // 3706
     * @func                                                                                                           // 3707
     * @memberOf R                                                                                                     // 3708
     * @since v0.1.0                                                                                                   // 3709
     * @category List                                                                                                  // 3710
     * @sig (a,a -> Number) -> [a] -> [a]                                                                              // 3711
     * @param {Function} comparator A sorting function :: a -> b -> Int                                                // 3712
     * @param {Array} list The list to sort                                                                            // 3713
     * @return {Array} a new array with its elements sorted by the comparator function.                                // 3714
     * @example                                                                                                        // 3715
     *                                                                                                                 // 3716
     *      var diff = function(a, b) { return a - b; };                                                               // 3717
     *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]                                                                 // 3718
     */                                                                                                                // 3719
    var sort = _curry2(function sort(comparator, list) {                                                               // 3720
        return _slice(list).sort(comparator);                                                                          // 3721
    });                                                                                                                // 3722
                                                                                                                       // 3723
    /**                                                                                                                // 3724
     * Sorts the list according to the supplied function.                                                              // 3725
     *                                                                                                                 // 3726
     * @func                                                                                                           // 3727
     * @memberOf R                                                                                                     // 3728
     * @since v0.1.0                                                                                                   // 3729
     * @category Relation                                                                                              // 3730
     * @sig Ord b => (a -> b) -> [a] -> [a]                                                                            // 3731
     * @param {Function} fn                                                                                            // 3732
     * @param {Array} list The list to sort.                                                                           // 3733
     * @return {Array} A new list sorted by the keys generated by `fn`.                                                // 3734
     * @example                                                                                                        // 3735
     *                                                                                                                 // 3736
     *      var sortByFirstItem = R.sortBy(R.prop(0));                                                                 // 3737
     *      var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));                            // 3738
     *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];                                                                   // 3739
     *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]                                                   // 3740
     *      var alice = {                                                                                              // 3741
     *        name: 'ALICE',                                                                                           // 3742
     *        age: 101                                                                                                 // 3743
     *      };                                                                                                         // 3744
     *      var bob = {                                                                                                // 3745
     *        name: 'Bob',                                                                                             // 3746
     *        age: -10                                                                                                 // 3747
     *      };                                                                                                         // 3748
     *      var clara = {                                                                                              // 3749
     *        name: 'clara',                                                                                           // 3750
     *        age: 314.159                                                                                             // 3751
     *      };                                                                                                         // 3752
     *      var people = [clara, bob, alice];                                                                          // 3753
     *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]                                                // 3754
     */                                                                                                                // 3755
    var sortBy = _curry2(function sortBy(fn, list) {                                                                   // 3756
        return _slice(list).sort(function (a, b) {                                                                     // 3757
            var aa = fn(a);                                                                                            // 3758
            var bb = fn(b);                                                                                            // 3759
            return aa < bb ? -1 : aa > bb ? 1 : 0;                                                                     // 3760
        });                                                                                                            // 3761
    });                                                                                                                // 3762
                                                                                                                       // 3763
    /**                                                                                                                // 3764
     * Splits a given list or string at a given index.                                                                 // 3765
     *                                                                                                                 // 3766
     * @func                                                                                                           // 3767
     * @memberOf R                                                                                                     // 3768
     * @since 0.19.0                                                                                                   // 3769
     * @category List                                                                                                  // 3770
     * @sig Number -> [a] -> [[a], [a]]                                                                                // 3771
     * @sig Number -> String -> [String, String]                                                                       // 3772
     * @param {Number} index The index where the array/string is split.                                                // 3773
     * @param {Array|String} array The array/string to be split.                                                       // 3774
     * @return {Array}                                                                                                 // 3775
     * @example                                                                                                        // 3776
     *                                                                                                                 // 3777
     *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]                                                       // 3778
     *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']                                                 // 3779
     *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']                                                      // 3780
     */                                                                                                                // 3781
    var splitAt = _curry2(function splitAt(index, array) {                                                             // 3782
        return [                                                                                                       // 3783
            slice(0, index, array),                                                                                    // 3784
            slice(index, length(array), array)                                                                         // 3785
        ];                                                                                                             // 3786
    });                                                                                                                // 3787
                                                                                                                       // 3788
    /**                                                                                                                // 3789
     * Splits a collection into slices of the specified length.                                                        // 3790
     *                                                                                                                 // 3791
     * @func                                                                                                           // 3792
     * @memberOf R                                                                                                     // 3793
     * @since v0.16.0                                                                                                  // 3794
     * @category List                                                                                                  // 3795
     * @sig Number -> [a] -> [[a]]                                                                                     // 3796
     * @sig Number -> String -> [String]                                                                               // 3797
     * @param {Number} n                                                                                               // 3798
     * @param {Array} list                                                                                             // 3799
     * @return {Array}                                                                                                 // 3800
     * @example                                                                                                        // 3801
     *                                                                                                                 // 3802
     *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]                                   // 3803
     *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']                                                   // 3804
     */                                                                                                                // 3805
    var splitEvery = _curry2(function splitEvery(n, list) {                                                            // 3806
        if (n <= 0) {                                                                                                  // 3807
            throw new Error('First argument to splitEvery must be a positive integer');                                // 3808
        }                                                                                                              // 3809
        var result = [];                                                                                               // 3810
        var idx = 0;                                                                                                   // 3811
        while (idx < list.length) {                                                                                    // 3812
            result.push(slice(idx, idx += n, list));                                                                   // 3813
        }                                                                                                              // 3814
        return result;                                                                                                 // 3815
    });                                                                                                                // 3816
                                                                                                                       // 3817
    /**                                                                                                                // 3818
     * Takes a list and a predicate and returns a pair of lists with the following properties:                         // 3819
     *                                                                                                                 // 3820
     *  - the result of concatenating the two output lists is equivalent to the input list;                            // 3821
     *  - none of the elements of the first output list satisfies the predicate; and                                   // 3822
     *  - if the second output list is non-empty, its first element satisfies the predicate.                           // 3823
     *                                                                                                                 // 3824
     * @func                                                                                                           // 3825
     * @memberOf R                                                                                                     // 3826
     * @since 0.19.0                                                                                                   // 3827
     * @category List                                                                                                  // 3828
     * @sig (a -> Boolean) -> [a] -> [[a], [a]]                                                                        // 3829
     * @param {Function} pred The predicate that determines where the array is split.                                  // 3830
     * @param {Array} list The array to be split.                                                                      // 3831
     * @return {Array}                                                                                                 // 3832
     * @example                                                                                                        // 3833
     *                                                                                                                 // 3834
     *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]                                // 3835
     */                                                                                                                // 3836
    var splitWhen = _curry2(function splitWhen(pred, list) {                                                           // 3837
        var idx = 0;                                                                                                   // 3838
        var len = list.length;                                                                                         // 3839
        var prefix = [];                                                                                               // 3840
        while (idx < len && !pred(list[idx])) {                                                                        // 3841
            prefix.push(list[idx]);                                                                                    // 3842
            idx += 1;                                                                                                  // 3843
        }                                                                                                              // 3844
        return [                                                                                                       // 3845
            prefix,                                                                                                    // 3846
            _slice(list, idx)                                                                                          // 3847
        ];                                                                                                             // 3848
    });                                                                                                                // 3849
                                                                                                                       // 3850
    /**                                                                                                                // 3851
     * Subtracts two numbers. Equivalent to `a - b` but curried.                                                       // 3852
     *                                                                                                                 // 3853
     * @func                                                                                                           // 3854
     * @memberOf R                                                                                                     // 3855
     * @since v0.1.0                                                                                                   // 3856
     * @category Math                                                                                                  // 3857
     * @sig Number -> Number -> Number                                                                                 // 3858
     * @param {Number} a The first value.                                                                              // 3859
     * @param {Number} b The second value.                                                                             // 3860
     * @return {Number} The result of `a - b`.                                                                         // 3861
     * @see R.add                                                                                                      // 3862
     * @example                                                                                                        // 3863
     *                                                                                                                 // 3864
     *      R.subtract(10, 8); //=> 2                                                                                  // 3865
     *                                                                                                                 // 3866
     *      var minus5 = R.subtract(R.__, 5);                                                                          // 3867
     *      minus5(17); //=> 12                                                                                        // 3868
     *                                                                                                                 // 3869
     *      var complementaryAngle = R.subtract(90);                                                                   // 3870
     *      complementaryAngle(30); //=> 60                                                                            // 3871
     *      complementaryAngle(72); //=> 18                                                                            // 3872
     */                                                                                                                // 3873
    var subtract = _curry2(function subtract(a, b) {                                                                   // 3874
        return a - b;                                                                                                  // 3875
    });                                                                                                                // 3876
                                                                                                                       // 3877
    /**                                                                                                                // 3878
     * Returns all but the first element of the given list or string (or object                                        // 3879
     * with a `tail` method).                                                                                          // 3880
     *                                                                                                                 // 3881
     * Dispatches to the `slice` method of the first argument, if present.                                             // 3882
     *                                                                                                                 // 3883
     * @func                                                                                                           // 3884
     * @memberOf R                                                                                                     // 3885
     * @since v0.1.0                                                                                                   // 3886
     * @category List                                                                                                  // 3887
     * @sig [a] -> [a]                                                                                                 // 3888
     * @sig String -> String                                                                                           // 3889
     * @param {*} list                                                                                                 // 3890
     * @return {*}                                                                                                     // 3891
     * @see R.head, R.init, R.last                                                                                     // 3892
     * @example                                                                                                        // 3893
     *                                                                                                                 // 3894
     *      R.tail([1, 2, 3]);  //=> [2, 3]                                                                            // 3895
     *      R.tail([1, 2]);     //=> [2]                                                                               // 3896
     *      R.tail([1]);        //=> []                                                                                // 3897
     *      R.tail([]);         //=> []                                                                                // 3898
     *                                                                                                                 // 3899
     *      R.tail('abc');  //=> 'bc'                                                                                  // 3900
     *      R.tail('ab');   //=> 'b'                                                                                   // 3901
     *      R.tail('a');    //=> ''                                                                                    // 3902
     *      R.tail('');     //=> ''                                                                                    // 3903
     */                                                                                                                // 3904
    var tail = _checkForMethod('tail', slice(1, Infinity));                                                            // 3905
                                                                                                                       // 3906
    /**                                                                                                                // 3907
     * Returns the first `n` elements of the given list, string, or                                                    // 3908
     * transducer/transformer (or object with a `take` method).                                                        // 3909
     *                                                                                                                 // 3910
     * Dispatches to the `take` method of the second argument, if present.                                             // 3911
     *                                                                                                                 // 3912
     * @func                                                                                                           // 3913
     * @memberOf R                                                                                                     // 3914
     * @since v0.1.0                                                                                                   // 3915
     * @category List                                                                                                  // 3916
     * @sig Number -> [a] -> [a]                                                                                       // 3917
     * @sig Number -> String -> String                                                                                 // 3918
     * @param {Number} n                                                                                               // 3919
     * @param {*} list                                                                                                 // 3920
     * @return {*}                                                                                                     // 3921
     * @see R.drop                                                                                                     // 3922
     * @example                                                                                                        // 3923
     *                                                                                                                 // 3924
     *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']                                                             // 3925
     *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']                                                      // 3926
     *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']                                               // 3927
     *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']                                               // 3928
     *      R.take(3, 'ramda');               //=> 'ram'                                                               // 3929
     *                                                                                                                 // 3930
     *      var personnel = [                                                                                          // 3931
     *        'Dave Brubeck',                                                                                          // 3932
     *        'Paul Desmond',                                                                                          // 3933
     *        'Eugene Wright',                                                                                         // 3934
     *        'Joe Morello',                                                                                           // 3935
     *        'Gerry Mulligan',                                                                                        // 3936
     *        'Bob Bates',                                                                                             // 3937
     *        'Joe Dodge',                                                                                             // 3938
     *        'Ron Crotty'                                                                                             // 3939
     *      ];                                                                                                         // 3940
     *                                                                                                                 // 3941
     *      var takeFive = R.take(5);                                                                                  // 3942
     *      takeFive(personnel);                                                                                       // 3943
     *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']                    // 3944
     */                                                                                                                // 3945
    var take = _curry2(_dispatchable('take', _xtake, function take(n, xs) {                                            // 3946
        return slice(0, n < 0 ? Infinity : n, xs);                                                                     // 3947
    }));                                                                                                               // 3948
                                                                                                                       // 3949
    /**                                                                                                                // 3950
     * Returns a new list containing the last `n` elements of a given list, passing                                    // 3951
     * each value to the supplied predicate function, and terminating when the                                         // 3952
     * predicate function returns `false`. Excludes the element that caused the                                        // 3953
     * predicate function to fail. The predicate function is passed one argument:                                      // 3954
     * *(value)*.                                                                                                      // 3955
     *                                                                                                                 // 3956
     * @func                                                                                                           // 3957
     * @memberOf R                                                                                                     // 3958
     * @since v0.16.0                                                                                                  // 3959
     * @category List                                                                                                  // 3960
     * @sig (a -> Boolean) -> [a] -> [a]                                                                               // 3961
     * @param {Function} fn The function called per iteration.                                                         // 3962
     * @param {Array} list The collection to iterate over.                                                             // 3963
     * @return {Array} A new array.                                                                                    // 3964
     * @see R.dropLastWhile, R.addIndex                                                                                // 3965
     * @example                                                                                                        // 3966
     *                                                                                                                 // 3967
     *      var isNotOne = x => x !== 1;                                                                               // 3968
     *                                                                                                                 // 3969
     *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]                                                    // 3970
     */                                                                                                                // 3971
    var takeLastWhile = _curry2(function takeLastWhile(fn, list) {                                                     // 3972
        var idx = list.length - 1;                                                                                     // 3973
        while (idx >= 0 && fn(list[idx])) {                                                                            // 3974
            idx -= 1;                                                                                                  // 3975
        }                                                                                                              // 3976
        return _slice(list, idx + 1, Infinity);                                                                        // 3977
    });                                                                                                                // 3978
                                                                                                                       // 3979
    /**                                                                                                                // 3980
     * Returns a new list containing the first `n` elements of a given list,                                           // 3981
     * passing each value to the supplied predicate function, and terminating when                                     // 3982
     * the predicate function returns `false`. Excludes the element that caused the                                    // 3983
     * predicate function to fail. The predicate function is passed one argument:                                      // 3984
     * *(value)*.                                                                                                      // 3985
     *                                                                                                                 // 3986
     * Dispatches to the `takeWhile` method of the second argument, if present.                                        // 3987
     *                                                                                                                 // 3988
     * Acts as a transducer if a transformer is given in list position.                                                // 3989
     *                                                                                                                 // 3990
     * @func                                                                                                           // 3991
     * @memberOf R                                                                                                     // 3992
     * @since v0.1.0                                                                                                   // 3993
     * @category List                                                                                                  // 3994
     * @sig (a -> Boolean) -> [a] -> [a]                                                                               // 3995
     * @param {Function} fn The function called per iteration.                                                         // 3996
     * @param {Array} list The collection to iterate over.                                                             // 3997
     * @return {Array} A new array.                                                                                    // 3998
     * @see R.dropWhile, R.transduce, R.addIndex                                                                       // 3999
     * @example                                                                                                        // 4000
     *                                                                                                                 // 4001
     *      var isNotFour = x => x !== 4;                                                                              // 4002
     *                                                                                                                 // 4003
     *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]                                              // 4004
     */                                                                                                                // 4005
    var takeWhile = _curry2(_dispatchable('takeWhile', _xtakeWhile, function takeWhile(fn, list) {                     // 4006
        var idx = 0;                                                                                                   // 4007
        var len = list.length;                                                                                         // 4008
        while (idx < len && fn(list[idx])) {                                                                           // 4009
            idx += 1;                                                                                                  // 4010
        }                                                                                                              // 4011
        return _slice(list, 0, idx);                                                                                   // 4012
    }));                                                                                                               // 4013
                                                                                                                       // 4014
    /**                                                                                                                // 4015
     * Runs the given function with the supplied object, then returns the object.                                      // 4016
     *                                                                                                                 // 4017
     * @func                                                                                                           // 4018
     * @memberOf R                                                                                                     // 4019
     * @since v0.1.0                                                                                                   // 4020
     * @category Function                                                                                              // 4021
     * @sig (a -> *) -> a -> a                                                                                         // 4022
     * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.               // 4023
     * @param {*} x                                                                                                    // 4024
     * @return {*} `x`.                                                                                                // 4025
     * @example                                                                                                        // 4026
     *                                                                                                                 // 4027
     *      var sayX = x => console.log('x is ' + x);                                                                  // 4028
     *      R.tap(sayX, 100); //=> 100                                                                                 // 4029
     *      //-> 'x is 100'                                                                                            // 4030
     */                                                                                                                // 4031
    var tap = _curry2(function tap(fn, x) {                                                                            // 4032
        fn(x);                                                                                                         // 4033
        return x;                                                                                                      // 4034
    });                                                                                                                // 4035
                                                                                                                       // 4036
    /**                                                                                                                // 4037
     * Calls an input function `n` times, returning an array containing the results                                    // 4038
     * of those function calls.                                                                                        // 4039
     *                                                                                                                 // 4040
     * `fn` is passed one argument: The current value of `n`, which begins at `0`                                      // 4041
     * and is gradually incremented to `n - 1`.                                                                        // 4042
     *                                                                                                                 // 4043
     * @func                                                                                                           // 4044
     * @memberOf R                                                                                                     // 4045
     * @since v0.2.3                                                                                                   // 4046
     * @category List                                                                                                  // 4047
     * @sig (Number -> a) -> Number -> [a]                                                                             // 4048
     * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.                     // 4049
     * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.                         // 4050
     * @return {Array} An array containing the return values of all calls to `fn`.                                     // 4051
     * @example                                                                                                        // 4052
     *                                                                                                                 // 4053
     *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]                                                               // 4054
     */                                                                                                                // 4055
    var times = _curry2(function times(fn, n) {                                                                        // 4056
        var len = Number(n);                                                                                           // 4057
        var list = new Array(len);                                                                                     // 4058
        var idx = 0;                                                                                                   // 4059
        while (idx < len) {                                                                                            // 4060
            list[idx] = fn(idx);                                                                                       // 4061
            idx += 1;                                                                                                  // 4062
        }                                                                                                              // 4063
        return list;                                                                                                   // 4064
    });                                                                                                                // 4065
                                                                                                                       // 4066
    /**                                                                                                                // 4067
     * Converts an object into an array of key, value arrays. Only the object's                                        // 4068
     * own properties are used.                                                                                        // 4069
     * Note that the order of the output array is not guaranteed to be consistent                                      // 4070
     * across different JS platforms.                                                                                  // 4071
     *                                                                                                                 // 4072
     * @func                                                                                                           // 4073
     * @memberOf R                                                                                                     // 4074
     * @since v0.4.0                                                                                                   // 4075
     * @category Object                                                                                                // 4076
     * @sig {String: *} -> [[String,*]]                                                                                // 4077
     * @param {Object} obj The object to extract from                                                                  // 4078
     * @return {Array} An array of key, value arrays from the object's own properties.                                 // 4079
     * @see R.fromPairs                                                                                                // 4080
     * @example                                                                                                        // 4081
     *                                                                                                                 // 4082
     *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]                                         // 4083
     */                                                                                                                // 4084
    var toPairs = _curry1(function toPairs(obj) {                                                                      // 4085
        var pairs = [];                                                                                                // 4086
        for (var prop in obj) {                                                                                        // 4087
            if (_has(prop, obj)) {                                                                                     // 4088
                pairs[pairs.length] = [                                                                                // 4089
                    prop,                                                                                              // 4090
                    obj[prop]                                                                                          // 4091
                ];                                                                                                     // 4092
            }                                                                                                          // 4093
        }                                                                                                              // 4094
        return pairs;                                                                                                  // 4095
    });                                                                                                                // 4096
                                                                                                                       // 4097
    /**                                                                                                                // 4098
     * Converts an object into an array of key, value arrays. The object's own                                         // 4099
     * properties and prototype properties are used. Note that the order of the                                        // 4100
     * output array is not guaranteed to be consistent across different JS                                             // 4101
     * platforms.                                                                                                      // 4102
     *                                                                                                                 // 4103
     * @func                                                                                                           // 4104
     * @memberOf R                                                                                                     // 4105
     * @since v0.4.0                                                                                                   // 4106
     * @category Object                                                                                                // 4107
     * @sig {String: *} -> [[String,*]]                                                                                // 4108
     * @param {Object} obj The object to extract from                                                                  // 4109
     * @return {Array} An array of key, value arrays from the object's own                                             // 4110
     *         and prototype properties.                                                                               // 4111
     * @example                                                                                                        // 4112
     *                                                                                                                 // 4113
     *      var F = function() { this.x = 'X'; };                                                                      // 4114
     *      F.prototype.y = 'Y';                                                                                       // 4115
     *      var f = new F();                                                                                           // 4116
     *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]                                                                // 4117
     */                                                                                                                // 4118
    var toPairsIn = _curry1(function toPairsIn(obj) {                                                                  // 4119
        var pairs = [];                                                                                                // 4120
        for (var prop in obj) {                                                                                        // 4121
            pairs[pairs.length] = [                                                                                    // 4122
                prop,                                                                                                  // 4123
                obj[prop]                                                                                              // 4124
            ];                                                                                                         // 4125
        }                                                                                                              // 4126
        return pairs;                                                                                                  // 4127
    });                                                                                                                // 4128
                                                                                                                       // 4129
    /**                                                                                                                // 4130
     * Transposes the rows and columns of a 2D list.                                                                   // 4131
     * When passed a list of `n` lists of length `x`,                                                                  // 4132
     * returns a list of `x` lists of length `n`.                                                                      // 4133
     *                                                                                                                 // 4134
     *                                                                                                                 // 4135
     * @func                                                                                                           // 4136
     * @memberOf R                                                                                                     // 4137
     * @since 0.19.0                                                                                                   // 4138
     * @category List                                                                                                  // 4139
     * @sig [[a]] -> [[a]]                                                                                             // 4140
     * @param {Array} list A 2D list                                                                                   // 4141
     * @return {Array} A 2D list                                                                                       // 4142
     * @example                                                                                                        // 4143
     *                                                                                                                 // 4144
     *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]                              // 4145
     *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]                              // 4146
     *                                                                                                                 // 4147
     * If some of the rows are shorter than the following rows, their elements are skipped:                            // 4148
     *                                                                                                                 // 4149
     *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]                        // 4150
     */                                                                                                                // 4151
    var transpose = _curry1(function transpose(outerlist) {                                                            // 4152
        var i = 0;                                                                                                     // 4153
        var result = [];                                                                                               // 4154
        while (i < outerlist.length) {                                                                                 // 4155
            var innerlist = outerlist[i];                                                                              // 4156
            var j = 0;                                                                                                 // 4157
            while (j < innerlist.length) {                                                                             // 4158
                if (typeof result[j] === 'undefined') {                                                                // 4159
                    result[j] = [];                                                                                    // 4160
                }                                                                                                      // 4161
                result[j].push(innerlist[j]);                                                                          // 4162
                j += 1;                                                                                                // 4163
            }                                                                                                          // 4164
            i += 1;                                                                                                    // 4165
        }                                                                                                              // 4166
        return result;                                                                                                 // 4167
    });                                                                                                                // 4168
                                                                                                                       // 4169
    /**                                                                                                                // 4170
     * Removes (strips) whitespace from both ends of the string.                                                       // 4171
     *                                                                                                                 // 4172
     * @func                                                                                                           // 4173
     * @memberOf R                                                                                                     // 4174
     * @since v0.6.0                                                                                                   // 4175
     * @category String                                                                                                // 4176
     * @sig String -> String                                                                                           // 4177
     * @param {String} str The string to trim.                                                                         // 4178
     * @return {String} Trimmed version of `str`.                                                                      // 4179
     * @example                                                                                                        // 4180
     *                                                                                                                 // 4181
     *      R.trim('   xyz  '); //=> 'xyz'                                                                             // 4182
     *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']                                               // 4183
     */                                                                                                                // 4184
    var trim = function () {                                                                                           // 4185
        var ws = '\t\n\x0B\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028' + '\u2029\uFEFF';
        var zeroWidth = '\u200B';                                                                                      // 4187
        var hasProtoTrim = typeof String.prototype.trim === 'function';                                                // 4188
        if (!hasProtoTrim || (ws.trim() || !zeroWidth.trim())) {                                                       // 4189
            return _curry1(function trim(str) {                                                                        // 4190
                var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');                                                // 4191
                var endRx = new RegExp('[' + ws + '][' + ws + ']*$');                                                  // 4192
                return str.replace(beginRx, '').replace(endRx, '');                                                    // 4193
            });                                                                                                        // 4194
        } else {                                                                                                       // 4195
            return _curry1(function trim(str) {                                                                        // 4196
                return str.trim();                                                                                     // 4197
            });                                                                                                        // 4198
        }                                                                                                              // 4199
    }();                                                                                                               // 4200
                                                                                                                       // 4201
    /**                                                                                                                // 4202
     * Gives a single-word string description of the (native) type of a value,                                         // 4203
     * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not                                      // 4204
     * attempt to distinguish user Object types any further, reporting them all as                                     // 4205
     * 'Object'.                                                                                                       // 4206
     *                                                                                                                 // 4207
     * @func                                                                                                           // 4208
     * @memberOf R                                                                                                     // 4209
     * @since v0.8.0                                                                                                   // 4210
     * @category Type                                                                                                  // 4211
     * @sig (* -> {*}) -> String                                                                                       // 4212
     * @param {*} val The value to test                                                                                // 4213
     * @return {String}                                                                                                // 4214
     * @example                                                                                                        // 4215
     *                                                                                                                 // 4216
     *      R.type({}); //=> "Object"                                                                                  // 4217
     *      R.type(1); //=> "Number"                                                                                   // 4218
     *      R.type(false); //=> "Boolean"                                                                              // 4219
     *      R.type('s'); //=> "String"                                                                                 // 4220
     *      R.type(null); //=> "Null"                                                                                  // 4221
     *      R.type([]); //=> "Array"                                                                                   // 4222
     *      R.type(/[A-z]/); //=> "RegExp"                                                                             // 4223
     */                                                                                                                // 4224
    var type = _curry1(function type(val) {                                                                            // 4225
        return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);
    });                                                                                                                // 4227
                                                                                                                       // 4228
    /**                                                                                                                // 4229
     * Takes a function `fn`, which takes a single array argument, and returns a                                       // 4230
     * function which:                                                                                                 // 4231
     *                                                                                                                 // 4232
     *   - takes any number of positional arguments;                                                                   // 4233
     *   - passes these arguments to `fn` as an array; and                                                             // 4234
     *   - returns the result.                                                                                         // 4235
     *                                                                                                                 // 4236
     * In other words, R.unapply derives a variadic function from a function which                                     // 4237
     * takes an array. R.unapply is the inverse of R.apply.                                                            // 4238
     *                                                                                                                 // 4239
     * @func                                                                                                           // 4240
     * @memberOf R                                                                                                     // 4241
     * @since v0.8.0                                                                                                   // 4242
     * @category Function                                                                                              // 4243
     * @sig ([*...] -> a) -> (*... -> a)                                                                               // 4244
     * @param {Function} fn                                                                                            // 4245
     * @return {Function}                                                                                              // 4246
     * @see R.apply                                                                                                    // 4247
     * @example                                                                                                        // 4248
     *                                                                                                                 // 4249
     *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'                                                         // 4250
     */                                                                                                                // 4251
    var unapply = _curry1(function unapply(fn) {                                                                       // 4252
        return function () {                                                                                           // 4253
            return fn(_slice(arguments));                                                                              // 4254
        };                                                                                                             // 4255
    });                                                                                                                // 4256
                                                                                                                       // 4257
    /**                                                                                                                // 4258
     * Wraps a function of any arity (including nullary) in a function that accepts                                    // 4259
     * exactly 1 parameter. Any extraneous parameters will not be passed to the                                        // 4260
     * supplied function.                                                                                              // 4261
     *                                                                                                                 // 4262
     * @func                                                                                                           // 4263
     * @memberOf R                                                                                                     // 4264
     * @since v0.2.0                                                                                                   // 4265
     * @category Function                                                                                              // 4266
     * @sig (* -> b) -> (a -> b)                                                                                       // 4267
     * @param {Function} fn The function to wrap.                                                                      // 4268
     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of                        // 4269
     *         arity 1.                                                                                                // 4270
     * @example                                                                                                        // 4271
     *                                                                                                                 // 4272
     *      var takesTwoArgs = function(a, b) {                                                                        // 4273
     *        return [a, b];                                                                                           // 4274
     *      };                                                                                                         // 4275
     *      takesTwoArgs.length; //=> 2                                                                                // 4276
     *      takesTwoArgs(1, 2); //=> [1, 2]                                                                            // 4277
     *                                                                                                                 // 4278
     *      var takesOneArg = R.unary(takesTwoArgs);                                                                   // 4279
     *      takesOneArg.length; //=> 1                                                                                 // 4280
     *      // Only 1 argument is passed to the wrapped function                                                       // 4281
     *      takesOneArg(1, 2); //=> [1, undefined]                                                                     // 4282
     */                                                                                                                // 4283
    var unary = _curry1(function unary(fn) {                                                                           // 4284
        return nAry(1, fn);                                                                                            // 4285
    });                                                                                                                // 4286
                                                                                                                       // 4287
    /**                                                                                                                // 4288
     * Returns a function of arity `n` from a (manually) curried function.                                             // 4289
     *                                                                                                                 // 4290
     * @func                                                                                                           // 4291
     * @memberOf R                                                                                                     // 4292
     * @since v0.14.0                                                                                                  // 4293
     * @category Function                                                                                              // 4294
     * @sig Number -> (a -> b) -> (a -> c)                                                                             // 4295
     * @param {Number} length The arity for the returned function.                                                     // 4296
     * @param {Function} fn The function to uncurry.                                                                   // 4297
     * @return {Function} A new function.                                                                              // 4298
     * @see R.curry                                                                                                    // 4299
     * @example                                                                                                        // 4300
     *                                                                                                                 // 4301
     *      var addFour = a => b => c => d => a + b + c + d;                                                           // 4302
     *                                                                                                                 // 4303
     *      var uncurriedAddFour = R.uncurryN(4, addFour);                                                             // 4304
     *      uncurriedAddFour(1, 2, 3, 4); //=> 10                                                                      // 4305
     */                                                                                                                // 4306
    var uncurryN = _curry2(function uncurryN(depth, fn) {                                                              // 4307
        return curryN(depth, function () {                                                                             // 4308
            var currentDepth = 1;                                                                                      // 4309
            var value = fn;                                                                                            // 4310
            var idx = 0;                                                                                               // 4311
            var endIdx;                                                                                                // 4312
            while (currentDepth <= depth && typeof value === 'function') {                                             // 4313
                endIdx = currentDepth === depth ? arguments.length : idx + value.length;                               // 4314
                value = value.apply(this, _slice(arguments, idx, endIdx));                                             // 4315
                currentDepth += 1;                                                                                     // 4316
                idx = endIdx;                                                                                          // 4317
            }                                                                                                          // 4318
            return value;                                                                                              // 4319
        });                                                                                                            // 4320
    });                                                                                                                // 4321
                                                                                                                       // 4322
    /**                                                                                                                // 4323
     * Builds a list from a seed value. Accepts an iterator function, which returns                                    // 4324
     * either false to stop iteration or an array of length 2 containing the value                                     // 4325
     * to add to the resulting list and the seed to be used in the next call to the                                    // 4326
     * iterator function.                                                                                              // 4327
     *                                                                                                                 // 4328
     * The iterator function receives one argument: *(seed)*.                                                          // 4329
     *                                                                                                                 // 4330
     * @func                                                                                                           // 4331
     * @memberOf R                                                                                                     // 4332
     * @since v0.10.0                                                                                                  // 4333
     * @category List                                                                                                  // 4334
     * @sig (a -> [b]) -> * -> [b]                                                                                     // 4335
     * @param {Function} fn The iterator function. receives one argument, `seed`, and returns                          // 4336
     *        either false to quit iteration or an array of length two to proceed. The element                         // 4337
     *        at index 0 of this array will be added to the resulting array, and the element                           // 4338
     *        at index 1 will be passed to the next call to `fn`.                                                      // 4339
     * @param {*} seed The seed value.                                                                                 // 4340
     * @return {Array} The final list.                                                                                 // 4341
     * @example                                                                                                        // 4342
     *                                                                                                                 // 4343
     *      var f = n => n > 50 ? false : [-n, n + 10];                                                                // 4344
     *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]                                                            // 4345
     */                                                                                                                // 4346
    var unfold = _curry2(function unfold(fn, seed) {                                                                   // 4347
        var pair = fn(seed);                                                                                           // 4348
        var result = [];                                                                                               // 4349
        while (pair && pair.length) {                                                                                  // 4350
            result[result.length] = pair[0];                                                                           // 4351
            pair = fn(pair[1]);                                                                                        // 4352
        }                                                                                                              // 4353
        return result;                                                                                                 // 4354
    });                                                                                                                // 4355
                                                                                                                       // 4356
    /**                                                                                                                // 4357
     * Returns a new list containing only one copy of each element in the original                                     // 4358
     * list, based upon the value returned by applying the supplied predicate to                                       // 4359
     * two list elements. Prefers the first item if two items compare equal based                                      // 4360
     * on the predicate.                                                                                               // 4361
     *                                                                                                                 // 4362
     * @func                                                                                                           // 4363
     * @memberOf R                                                                                                     // 4364
     * @since v0.2.0                                                                                                   // 4365
     * @category List                                                                                                  // 4366
     * @sig (a, a -> Boolean) -> [a] -> [a]                                                                            // 4367
     * @param {Function} pred A predicate used to test whether two items are equal.                                    // 4368
     * @param {Array} list The array to consider.                                                                      // 4369
     * @return {Array} The list of unique items.                                                                       // 4370
     * @example                                                                                                        // 4371
     *                                                                                                                 // 4372
     *      var strEq = R.eqBy(String);                                                                                // 4373
     *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]                                                             // 4374
     *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]                                                               // 4375
     *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]                                                                // 4376
     *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']                                                              // 4377
     */                                                                                                                // 4378
    var uniqWith = _curry2(function uniqWith(pred, list) {                                                             // 4379
        var idx = 0;                                                                                                   // 4380
        var len = list.length;                                                                                         // 4381
        var result = [];                                                                                               // 4382
        var item;                                                                                                      // 4383
        while (idx < len) {                                                                                            // 4384
            item = list[idx];                                                                                          // 4385
            if (!_containsWith(pred, item, result)) {                                                                  // 4386
                result[result.length] = item;                                                                          // 4387
            }                                                                                                          // 4388
            idx += 1;                                                                                                  // 4389
        }                                                                                                              // 4390
        return result;                                                                                                 // 4391
    });                                                                                                                // 4392
                                                                                                                       // 4393
    /**                                                                                                                // 4394
     * Tests the final argument by passing it to the given predicate function. If                                      // 4395
     * the predicate is not satisfied, the function will return the result of                                          // 4396
     * calling the `whenFalseFn` function with the same argument. If the predicate                                     // 4397
     * is satisfied, the argument is returned as is.                                                                   // 4398
     *                                                                                                                 // 4399
     * @func                                                                                                           // 4400
     * @memberOf R                                                                                                     // 4401
     * @since v0.18.0                                                                                                  // 4402
     * @category Logic                                                                                                 // 4403
     * @sig (a -> Boolean) -> (a -> a) -> a -> a                                                                       // 4404
     * @param {Function} pred        A predicate function                                                              // 4405
     * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates                                    // 4406
     *                               to a falsy value.                                                                 // 4407
     * @param {*}        x           An object to test with the `pred` function and                                    // 4408
     *                               pass to `whenFalseFn` if necessary.                                               // 4409
     * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.                                          // 4410
     * @see R.ifElse, R.when                                                                                           // 4411
     * @example                                                                                                        // 4412
     *                                                                                                                 // 4413
     *      // coerceArray :: (a|[a]) -> [a]                                                                           // 4414
     *      var coerceArray = R.unless(R.isArrayLike, R.of);                                                           // 4415
     *      coerceArray([1, 2, 3]); //=> [1, 2, 3]                                                                     // 4416
     *      coerceArray(1);         //=> [1]                                                                           // 4417
     */                                                                                                                // 4418
    var unless = _curry3(function unless(pred, whenFalseFn, x) {                                                       // 4419
        return pred(x) ? x : whenFalseFn(x);                                                                           // 4420
    });                                                                                                                // 4421
                                                                                                                       // 4422
    /**                                                                                                                // 4423
     * Returns a new copy of the array with the element at the provided index                                          // 4424
     * replaced with the given value.                                                                                  // 4425
     *                                                                                                                 // 4426
     * @func                                                                                                           // 4427
     * @memberOf R                                                                                                     // 4428
     * @since v0.14.0                                                                                                  // 4429
     * @category List                                                                                                  // 4430
     * @sig Number -> a -> [a] -> [a]                                                                                  // 4431
     * @param {Number} idx The index to update.                                                                        // 4432
     * @param {*} x The value to exist at the given index of the returned array.                                       // 4433
     * @param {Array|Arguments} list The source array-like object to be updated.                                       // 4434
     * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.                               // 4435
     * @see R.adjust                                                                                                   // 4436
     * @example                                                                                                        // 4437
     *                                                                                                                 // 4438
     *      R.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]                                                            // 4439
     *      R.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]                                                            // 4440
     */                                                                                                                // 4441
    var update = _curry3(function update(idx, x, list) {                                                               // 4442
        return adjust(always(x), idx, list);                                                                           // 4443
    });                                                                                                                // 4444
                                                                                                                       // 4445
    /**                                                                                                                // 4446
     * Accepts a function `fn` and a list of transformer functions and returns a                                       // 4447
     * new curried function. When the new function is invoked, it calls the                                            // 4448
     * function `fn` with parameters consisting of the result of calling each                                          // 4449
     * supplied handler on successive arguments to the new function.                                                   // 4450
     *                                                                                                                 // 4451
     * If more arguments are passed to the returned function than transformer                                          // 4452
     * functions, those arguments are passed directly to `fn` as additional                                            // 4453
     * parameters. If you expect additional arguments that don't need to be                                            // 4454
     * transformed, although you can ignore them, it's best to pass an identity                                        // 4455
     * function so that the new function reports the correct arity.                                                    // 4456
     *                                                                                                                 // 4457
     * @func                                                                                                           // 4458
     * @memberOf R                                                                                                     // 4459
     * @since v0.1.0                                                                                                   // 4460
     * @category Function                                                                                              // 4461
     * @sig (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)                              // 4462
     * @param {Function} fn The function to wrap.                                                                      // 4463
     * @param {Array} transformers A list of transformer functions                                                     // 4464
     * @return {Function} The wrapped function.                                                                        // 4465
     * @example                                                                                                        // 4466
     *                                                                                                                 // 4467
     *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81                                               // 4468
     *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81                                               // 4469
     *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32                                                         // 4470
     *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32                                                         // 4471
     */                                                                                                                // 4472
    var useWith = _curry2(function useWith(fn, transformers) {                                                         // 4473
        return curryN(transformers.length, function () {                                                               // 4474
            var args = [];                                                                                             // 4475
            var idx = 0;                                                                                               // 4476
            while (idx < transformers.length) {                                                                        // 4477
                args.push(transformers[idx].call(this, arguments[idx]));                                               // 4478
                idx += 1;                                                                                              // 4479
            }                                                                                                          // 4480
            return fn.apply(this, args.concat(_slice(arguments, transformers.length)));                                // 4481
        });                                                                                                            // 4482
    });                                                                                                                // 4483
                                                                                                                       // 4484
    /**                                                                                                                // 4485
     * Returns a list of all the enumerable own properties of the supplied object.                                     // 4486
     * Note that the order of the output array is not guaranteed across different                                      // 4487
     * JS platforms.                                                                                                   // 4488
     *                                                                                                                 // 4489
     * @func                                                                                                           // 4490
     * @memberOf R                                                                                                     // 4491
     * @since v0.1.0                                                                                                   // 4492
     * @category Object                                                                                                // 4493
     * @sig {k: v} -> [v]                                                                                              // 4494
     * @param {Object} obj The object to extract values from                                                           // 4495
     * @return {Array} An array of the values of the object's own properties.                                          // 4496
     * @example                                                                                                        // 4497
     *                                                                                                                 // 4498
     *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]                                                               // 4499
     */                                                                                                                // 4500
    var values = _curry1(function values(obj) {                                                                        // 4501
        var props = keys(obj);                                                                                         // 4502
        var len = props.length;                                                                                        // 4503
        var vals = [];                                                                                                 // 4504
        var idx = 0;                                                                                                   // 4505
        while (idx < len) {                                                                                            // 4506
            vals[idx] = obj[props[idx]];                                                                               // 4507
            idx += 1;                                                                                                  // 4508
        }                                                                                                              // 4509
        return vals;                                                                                                   // 4510
    });                                                                                                                // 4511
                                                                                                                       // 4512
    /**                                                                                                                // 4513
     * Returns a list of all the properties, including prototype properties, of the                                    // 4514
     * supplied object.                                                                                                // 4515
     * Note that the order of the output array is not guaranteed to be consistent                                      // 4516
     * across different JS platforms.                                                                                  // 4517
     *                                                                                                                 // 4518
     * @func                                                                                                           // 4519
     * @memberOf R                                                                                                     // 4520
     * @since v0.2.0                                                                                                   // 4521
     * @category Object                                                                                                // 4522
     * @sig {k: v} -> [v]                                                                                              // 4523
     * @param {Object} obj The object to extract values from                                                           // 4524
     * @return {Array} An array of the values of the object's own and prototype properties.                            // 4525
     * @example                                                                                                        // 4526
     *                                                                                                                 // 4527
     *      var F = function() { this.x = 'X'; };                                                                      // 4528
     *      F.prototype.y = 'Y';                                                                                       // 4529
     *      var f = new F();                                                                                           // 4530
     *      R.valuesIn(f); //=> ['X', 'Y']                                                                             // 4531
     */                                                                                                                // 4532
    var valuesIn = _curry1(function valuesIn(obj) {                                                                    // 4533
        var prop;                                                                                                      // 4534
        var vs = [];                                                                                                   // 4535
        for (prop in obj) {                                                                                            // 4536
            vs[vs.length] = obj[prop];                                                                                 // 4537
        }                                                                                                              // 4538
        return vs;                                                                                                     // 4539
    });                                                                                                                // 4540
                                                                                                                       // 4541
    /**                                                                                                                // 4542
     * Returns a "view" of the given data structure, determined by the given lens.                                     // 4543
     * The lens's focus determines which portion of the data structure is visible.                                     // 4544
     *                                                                                                                 // 4545
     * @func                                                                                                           // 4546
     * @memberOf R                                                                                                     // 4547
     * @since v0.16.0                                                                                                  // 4548
     * @category Object                                                                                                // 4549
     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s                                                        // 4550
     * @sig Lens s a -> s -> a                                                                                         // 4551
     * @param {Lens} lens                                                                                              // 4552
     * @param {*} x                                                                                                    // 4553
     * @return {*}                                                                                                     // 4554
     * @see R.prop, R.lensIndex, R.lensProp                                                                            // 4555
     * @example                                                                                                        // 4556
     *                                                                                                                 // 4557
     *      var xLens = R.lensProp('x');                                                                               // 4558
     *                                                                                                                 // 4559
     *      R.view(xLens, {x: 1, y: 2});  //=> 1                                                                       // 4560
     *      R.view(xLens, {x: 4, y: 2});  //=> 4                                                                       // 4561
     */                                                                                                                // 4562
    var view = function () {                                                                                           // 4563
        var Const = function (x) {                                                                                     // 4564
            return {                                                                                                   // 4565
                value: x,                                                                                              // 4566
                map: function () {                                                                                     // 4567
                    return this;                                                                                       // 4568
                }                                                                                                      // 4569
            };                                                                                                         // 4570
        };                                                                                                             // 4571
        return _curry2(function view(lens, x) {                                                                        // 4572
            return lens(Const)(x).value;                                                                               // 4573
        });                                                                                                            // 4574
    }();                                                                                                               // 4575
                                                                                                                       // 4576
    /**                                                                                                                // 4577
     * Tests the final argument by passing it to the given predicate function. If                                      // 4578
     * the predicate is satisfied, the function will return the result of calling                                      // 4579
     * the `whenTrueFn` function with the same argument. If the predicate is not                                       // 4580
     * satisfied, the argument is returned as is.                                                                      // 4581
     *                                                                                                                 // 4582
     * @func                                                                                                           // 4583
     * @memberOf R                                                                                                     // 4584
     * @since v0.18.0                                                                                                  // 4585
     * @category Logic                                                                                                 // 4586
     * @sig (a -> Boolean) -> (a -> a) -> a -> a                                                                       // 4587
     * @param {Function} pred       A predicate function                                                               // 4588
     * @param {Function} whenTrueFn A function to invoke when the `condition`                                          // 4589
     *                              evaluates to a truthy value.                                                       // 4590
     * @param {*}        x          An object to test with the `pred` function and                                     // 4591
     *                              pass to `whenTrueFn` if necessary.                                                 // 4592
     * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.                                           // 4593
     * @see R.ifElse, R.unless                                                                                         // 4594
     * @example                                                                                                        // 4595
     *                                                                                                                 // 4596
     *      // truncate :: String -> String                                                                            // 4597
     *      var truncate = R.when(                                                                                     // 4598
     *        R.propSatisfies(R.gt(R.__, 10), 'length'),                                                               // 4599
     *        R.pipe(R.take(10), R.append('…'), R.join(''))                                                            // 4600
     *      );                                                                                                         // 4601
     *      truncate('12345');         //=> '12345'                                                                    // 4602
     *      truncate('0123456789ABC'); //=> '0123456789…'                                                              // 4603
     */                                                                                                                // 4604
    var when = _curry3(function when(pred, whenTrueFn, x) {                                                            // 4605
        return pred(x) ? whenTrueFn(x) : x;                                                                            // 4606
    });                                                                                                                // 4607
                                                                                                                       // 4608
    /**                                                                                                                // 4609
     * Takes a spec object and a test object; returns true if the test satisfies                                       // 4610
     * the spec. Each of the spec's own properties must be a predicate function.                                       // 4611
     * Each predicate is applied to the value of the corresponding property of the                                     // 4612
     * test object. `where` returns true if all the predicates return true, false                                      // 4613
     * otherwise.                                                                                                      // 4614
     *                                                                                                                 // 4615
     * `where` is well suited to declaratively expressing constraints for other                                        // 4616
     * functions such as `filter` and `find`.                                                                          // 4617
     *                                                                                                                 // 4618
     * @func                                                                                                           // 4619
     * @memberOf R                                                                                                     // 4620
     * @since v0.1.1                                                                                                   // 4621
     * @category Object                                                                                                // 4622
     * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean                                                         // 4623
     * @param {Object} spec                                                                                            // 4624
     * @param {Object} testObj                                                                                         // 4625
     * @return {Boolean}                                                                                               // 4626
     * @example                                                                                                        // 4627
     *                                                                                                                 // 4628
     *      // pred :: Object -> Boolean                                                                               // 4629
     *      var pred = R.where({                                                                                       // 4630
     *        a: R.equals('foo'),                                                                                      // 4631
     *        b: R.complement(R.equals('bar')),                                                                        // 4632
     *        x: R.gt(_, 10),                                                                                          // 4633
     *        y: R.lt(_, 20)                                                                                           // 4634
     *      });                                                                                                        // 4635
     *                                                                                                                 // 4636
     *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true                                                        // 4637
     *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false                                                       // 4638
     *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false                                                       // 4639
     *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false                                                       // 4640
     *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false                                                       // 4641
     */                                                                                                                // 4642
    var where = _curry2(function where(spec, testObj) {                                                                // 4643
        for (var prop in spec) {                                                                                       // 4644
            if (_has(prop, spec) && !spec[prop](testObj[prop])) {                                                      // 4645
                return false;                                                                                          // 4646
            }                                                                                                          // 4647
        }                                                                                                              // 4648
        return true;                                                                                                   // 4649
    });                                                                                                                // 4650
                                                                                                                       // 4651
    /**                                                                                                                // 4652
     * Wrap a function inside another to allow you to make adjustments to the                                          // 4653
     * parameters, or do other processing either before the internal function is                                       // 4654
     * called or with its results.                                                                                     // 4655
     *                                                                                                                 // 4656
     * @func                                                                                                           // 4657
     * @memberOf R                                                                                                     // 4658
     * @since v0.1.0                                                                                                   // 4659
     * @category Function                                                                                              // 4660
     * @sig (a... -> b) -> ((a... -> b) -> a... -> c) -> (a... -> c)                                                   // 4661
     * @param {Function} fn The function to wrap.                                                                      // 4662
     * @param {Function} wrapper The wrapper function.                                                                 // 4663
     * @return {Function} The wrapped function.                                                                        // 4664
     * @example                                                                                                        // 4665
     *                                                                                                                 // 4666
     *      var greet = name => 'Hello ' + name;                                                                       // 4667
     *                                                                                                                 // 4668
     *      var shoutedGreet = R.wrap(greet, (gr, name) => gr(name).toUpperCase());                                    // 4669
     *                                                                                                                 // 4670
     *      shoutedGreet("Kathy"); //=> "HELLO KATHY"                                                                  // 4671
     *                                                                                                                 // 4672
     *      var shortenedGreet = R.wrap(greet, function(gr, name) {                                                    // 4673
     *        return gr(name.substring(0, 3));                                                                         // 4674
     *      });                                                                                                        // 4675
     *      shortenedGreet("Robert"); //=> "Hello Rob"                                                                 // 4676
     */                                                                                                                // 4677
    var wrap = _curry2(function wrap(fn, wrapper) {                                                                    // 4678
        return curryN(fn.length, function () {                                                                         // 4679
            return wrapper.apply(this, _concat([fn], arguments));                                                      // 4680
        });                                                                                                            // 4681
    });                                                                                                                // 4682
                                                                                                                       // 4683
    /**                                                                                                                // 4684
     * Creates a new list out of the two supplied by creating each possible pair                                       // 4685
     * from the lists.                                                                                                 // 4686
     *                                                                                                                 // 4687
     * @func                                                                                                           // 4688
     * @memberOf R                                                                                                     // 4689
     * @since v0.1.0                                                                                                   // 4690
     * @category List                                                                                                  // 4691
     * @sig [a] -> [b] -> [[a,b]]                                                                                      // 4692
     * @param {Array} as The first list.                                                                               // 4693
     * @param {Array} bs The second list.                                                                              // 4694
     * @return {Array} The list made by combining each possible pair from                                              // 4695
     *         `as` and `bs` into pairs (`[a, b]`).                                                                    // 4696
     * @example                                                                                                        // 4697
     *                                                                                                                 // 4698
     *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]                                 // 4699
     */                                                                                                                // 4700
    // = xprodWith(prepend); (takes about 3 times as long...)                                                          // 4701
    var xprod = _curry2(function xprod(a, b) {                                                                         // 4702
        // = xprodWith(prepend); (takes about 3 times as long...)                                                      // 4703
        var idx = 0;                                                                                                   // 4704
        var ilen = a.length;                                                                                           // 4705
        var j;                                                                                                         // 4706
        var jlen = b.length;                                                                                           // 4707
        var result = [];                                                                                               // 4708
        while (idx < ilen) {                                                                                           // 4709
            j = 0;                                                                                                     // 4710
            while (j < jlen) {                                                                                         // 4711
                result[result.length] = [                                                                              // 4712
                    a[idx],                                                                                            // 4713
                    b[j]                                                                                               // 4714
                ];                                                                                                     // 4715
                j += 1;                                                                                                // 4716
            }                                                                                                          // 4717
            idx += 1;                                                                                                  // 4718
        }                                                                                                              // 4719
        return result;                                                                                                 // 4720
    });                                                                                                                // 4721
                                                                                                                       // 4722
    /**                                                                                                                // 4723
     * Creates a new list out of the two supplied by pairing up equally-positioned                                     // 4724
     * items from both lists. The returned list is truncated to the length of the                                      // 4725
     * shorter of the two input lists.                                                                                 // 4726
     * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.                                       // 4727
     *                                                                                                                 // 4728
     * @func                                                                                                           // 4729
     * @memberOf R                                                                                                     // 4730
     * @since v0.1.0                                                                                                   // 4731
     * @category List                                                                                                  // 4732
     * @sig [a] -> [b] -> [[a,b]]                                                                                      // 4733
     * @param {Array} list1 The first array to consider.                                                               // 4734
     * @param {Array} list2 The second array to consider.                                                              // 4735
     * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.                       // 4736
     * @example                                                                                                        // 4737
     *                                                                                                                 // 4738
     *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]                                     // 4739
     */                                                                                                                // 4740
    var zip = _curry2(function zip(a, b) {                                                                             // 4741
        var rv = [];                                                                                                   // 4742
        var idx = 0;                                                                                                   // 4743
        var len = Math.min(a.length, b.length);                                                                        // 4744
        while (idx < len) {                                                                                            // 4745
            rv[idx] = [                                                                                                // 4746
                a[idx],                                                                                                // 4747
                b[idx]                                                                                                 // 4748
            ];                                                                                                         // 4749
            idx += 1;                                                                                                  // 4750
        }                                                                                                              // 4751
        return rv;                                                                                                     // 4752
    });                                                                                                                // 4753
                                                                                                                       // 4754
    /**                                                                                                                // 4755
     * Creates a new object out of a list of keys and a list of values.                                                // 4756
     *                                                                                                                 // 4757
     * @func                                                                                                           // 4758
     * @memberOf R                                                                                                     // 4759
     * @since v0.3.0                                                                                                   // 4760
     * @category List                                                                                                  // 4761
     * @sig [String] -> [*] -> {String: *}                                                                             // 4762
     * @param {Array} keys The array that will be properties on the output object.                                     // 4763
     * @param {Array} values The list of values on the output object.                                                  // 4764
     * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.                    // 4765
     * @example                                                                                                        // 4766
     *                                                                                                                 // 4767
     *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}                                              // 4768
     */                                                                                                                // 4769
    var zipObj = _curry2(function zipObj(keys, values) {                                                               // 4770
        var idx = 0;                                                                                                   // 4771
        var len = keys.length;                                                                                         // 4772
        var out = {};                                                                                                  // 4773
        while (idx < len) {                                                                                            // 4774
            out[keys[idx]] = values[idx];                                                                              // 4775
            idx += 1;                                                                                                  // 4776
        }                                                                                                              // 4777
        return out;                                                                                                    // 4778
    });                                                                                                                // 4779
                                                                                                                       // 4780
    /**                                                                                                                // 4781
     * Creates a new list out of the two supplied by applying the function to each                                     // 4782
     * equally-positioned pair in the lists. The returned list is truncated to the                                     // 4783
     * length of the shorter of the two input lists.                                                                   // 4784
     *                                                                                                                 // 4785
     * @function                                                                                                       // 4786
     * @memberOf R                                                                                                     // 4787
     * @since v0.1.0                                                                                                   // 4788
     * @category List                                                                                                  // 4789
     * @sig (a,b -> c) -> [a] -> [b] -> [c]                                                                            // 4790
     * @param {Function} fn The function used to combine the two elements into one value.                              // 4791
     * @param {Array} list1 The first array to consider.                                                               // 4792
     * @param {Array} list2 The second array to consider.                                                              // 4793
     * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`                         // 4794
     *         using `fn`.                                                                                             // 4795
     * @example                                                                                                        // 4796
     *                                                                                                                 // 4797
     *      var f = (x, y) => {                                                                                        // 4798
     *        // ...                                                                                                   // 4799
     *      };                                                                                                         // 4800
     *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);                                                                  // 4801
     *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]                                                                     // 4802
     */                                                                                                                // 4803
    var zipWith = _curry3(function zipWith(fn, a, b) {                                                                 // 4804
        var rv = [];                                                                                                   // 4805
        var idx = 0;                                                                                                   // 4806
        var len = Math.min(a.length, b.length);                                                                        // 4807
        while (idx < len) {                                                                                            // 4808
            rv[idx] = fn(a[idx], b[idx]);                                                                              // 4809
            idx += 1;                                                                                                  // 4810
        }                                                                                                              // 4811
        return rv;                                                                                                     // 4812
    });                                                                                                                // 4813
                                                                                                                       // 4814
    /**                                                                                                                // 4815
     * A function that always returns `false`. Any passed in parameters are ignored.                                   // 4816
     *                                                                                                                 // 4817
     * @func                                                                                                           // 4818
     * @memberOf R                                                                                                     // 4819
     * @since v0.9.0                                                                                                   // 4820
     * @category Function                                                                                              // 4821
     * @sig * -> Boolean                                                                                               // 4822
     * @param {*}                                                                                                      // 4823
     * @return {Boolean}                                                                                               // 4824
     * @see R.always, R.T                                                                                              // 4825
     * @example                                                                                                        // 4826
     *                                                                                                                 // 4827
     *      R.F(); //=> false                                                                                          // 4828
     */                                                                                                                // 4829
    var F = always(false);                                                                                             // 4830
                                                                                                                       // 4831
    /**                                                                                                                // 4832
     * A function that always returns `true`. Any passed in parameters are ignored.                                    // 4833
     *                                                                                                                 // 4834
     * @func                                                                                                           // 4835
     * @memberOf R                                                                                                     // 4836
     * @since v0.9.0                                                                                                   // 4837
     * @category Function                                                                                              // 4838
     * @sig * -> Boolean                                                                                               // 4839
     * @param {*}                                                                                                      // 4840
     * @return {Boolean}                                                                                               // 4841
     * @see R.always, R.F                                                                                              // 4842
     * @example                                                                                                        // 4843
     *                                                                                                                 // 4844
     *      R.T(); //=> true                                                                                           // 4845
     */                                                                                                                // 4846
    var T = always(true);                                                                                              // 4847
                                                                                                                       // 4848
    /**                                                                                                                // 4849
     * Copies an object.                                                                                               // 4850
     *                                                                                                                 // 4851
     * @private                                                                                                        // 4852
     * @param {*} value The value to be copied                                                                         // 4853
     * @param {Array} refFrom Array containing the source references                                                   // 4854
     * @param {Array} refTo Array containing the copied source references                                              // 4855
     * @return {*} The copied value.                                                                                   // 4856
     */                                                                                                                // 4857
    var _clone = function _clone(value, refFrom, refTo) {                                                              // 4858
        var copy = function copy(copiedValue) {                                                                        // 4859
            var len = refFrom.length;                                                                                  // 4860
            var idx = 0;                                                                                               // 4861
            while (idx < len) {                                                                                        // 4862
                if (value === refFrom[idx]) {                                                                          // 4863
                    return refTo[idx];                                                                                 // 4864
                }                                                                                                      // 4865
                idx += 1;                                                                                              // 4866
            }                                                                                                          // 4867
            refFrom[idx + 1] = value;                                                                                  // 4868
            refTo[idx + 1] = copiedValue;                                                                              // 4869
            for (var key in value) {                                                                                   // 4870
                copiedValue[key] = _clone(value[key], refFrom, refTo);                                                 // 4871
            }                                                                                                          // 4872
            return copiedValue;                                                                                        // 4873
        };                                                                                                             // 4874
        switch (type(value)) {                                                                                         // 4875
        case 'Object':                                                                                                 // 4876
            return copy({});                                                                                           // 4877
        case 'Array':                                                                                                  // 4878
            return copy([]);                                                                                           // 4879
        case 'Date':                                                                                                   // 4880
            return new Date(value);                                                                                    // 4881
        case 'RegExp':                                                                                                 // 4882
            return _cloneRegExp(value);                                                                                // 4883
        default:                                                                                                       // 4884
            return value;                                                                                              // 4885
        }                                                                                                              // 4886
    };                                                                                                                 // 4887
                                                                                                                       // 4888
    var _createPartialApplicator = function _createPartialApplicator(concat) {                                         // 4889
        return _curry2(function (fn, args) {                                                                           // 4890
            return _arity(Math.max(0, fn.length - args.length), function () {                                          // 4891
                return fn.apply(this, concat(args, arguments));                                                        // 4892
            });                                                                                                        // 4893
        });                                                                                                            // 4894
    };                                                                                                                 // 4895
                                                                                                                       // 4896
    var _dropLast = function dropLast(n, xs) {                                                                         // 4897
        return take(n < xs.length ? xs.length - n : 0, xs);                                                            // 4898
    };                                                                                                                 // 4899
                                                                                                                       // 4900
    // Values of other types are only equal if identical.                                                              // 4901
    var _equals = function _equals(a, b, stackA, stackB) {                                                             // 4902
        if (identical(a, b)) {                                                                                         // 4903
            return true;                                                                                               // 4904
        }                                                                                                              // 4905
        if (type(a) !== type(b)) {                                                                                     // 4906
            return false;                                                                                              // 4907
        }                                                                                                              // 4908
        if (a == null || b == null) {                                                                                  // 4909
            return false;                                                                                              // 4910
        }                                                                                                              // 4911
        if (typeof a.equals === 'function' || typeof b.equals === 'function') {                                        // 4912
            return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);     // 4913
        }                                                                                                              // 4914
        switch (type(a)) {                                                                                             // 4915
        case 'Arguments':                                                                                              // 4916
        case 'Array':                                                                                                  // 4917
        case 'Object':                                                                                                 // 4918
            break;                                                                                                     // 4919
        case 'Boolean':                                                                                                // 4920
        case 'Number':                                                                                                 // 4921
        case 'String':                                                                                                 // 4922
            if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {                                     // 4923
                return false;                                                                                          // 4924
            }                                                                                                          // 4925
            break;                                                                                                     // 4926
        case 'Date':                                                                                                   // 4927
            if (!identical(a.valueOf(), b.valueOf())) {                                                                // 4928
                return false;                                                                                          // 4929
            }                                                                                                          // 4930
            break;                                                                                                     // 4931
        case 'Error':                                                                                                  // 4932
            if (!(a.name === b.name && a.message === b.message)) {                                                     // 4933
                return false;                                                                                          // 4934
            }                                                                                                          // 4935
            break;                                                                                                     // 4936
        case 'RegExp':                                                                                                 // 4937
            if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {
                return false;                                                                                          // 4939
            }                                                                                                          // 4940
            break;                                                                                                     // 4941
        case 'Map':                                                                                                    // 4942
        case 'Set':                                                                                                    // 4943
            if (!_equals(_arrayFromIterator(a.entries()), _arrayFromIterator(b.entries()), stackA, stackB)) {          // 4944
                return false;                                                                                          // 4945
            }                                                                                                          // 4946
            break;                                                                                                     // 4947
        case 'Int8Array':                                                                                              // 4948
        case 'Uint8Array':                                                                                             // 4949
        case 'Uint8ClampedArray':                                                                                      // 4950
        case 'Int16Array':                                                                                             // 4951
        case 'Uint16Array':                                                                                            // 4952
        case 'Int32Array':                                                                                             // 4953
        case 'Uint32Array':                                                                                            // 4954
        case 'Float32Array':                                                                                           // 4955
        case 'Float64Array':                                                                                           // 4956
            break;                                                                                                     // 4957
        case 'ArrayBuffer':                                                                                            // 4958
            break;                                                                                                     // 4959
        default:                                                                                                       // 4960
            // Values of other types are only equal if identical.                                                      // 4961
            return false;                                                                                              // 4962
        }                                                                                                              // 4963
        var keysA = keys(a);                                                                                           // 4964
        if (keysA.length !== keys(b).length) {                                                                         // 4965
            return false;                                                                                              // 4966
        }                                                                                                              // 4967
        var idx = stackA.length - 1;                                                                                   // 4968
        while (idx >= 0) {                                                                                             // 4969
            if (stackA[idx] === a) {                                                                                   // 4970
                return stackB[idx] === b;                                                                              // 4971
            }                                                                                                          // 4972
            idx -= 1;                                                                                                  // 4973
        }                                                                                                              // 4974
        stackA.push(a);                                                                                                // 4975
        stackB.push(b);                                                                                                // 4976
        idx = keysA.length - 1;                                                                                        // 4977
        while (idx >= 0) {                                                                                             // 4978
            var key = keysA[idx];                                                                                      // 4979
            if (!(_has(key, b) && _equals(b[key], a[key], stackA, stackB))) {                                          // 4980
                return false;                                                                                          // 4981
            }                                                                                                          // 4982
            idx -= 1;                                                                                                  // 4983
        }                                                                                                              // 4984
        stackA.pop();                                                                                                  // 4985
        stackB.pop();                                                                                                  // 4986
        return true;                                                                                                   // 4987
    };                                                                                                                 // 4988
                                                                                                                       // 4989
    /**                                                                                                                // 4990
     * `_makeFlat` is a helper function that returns a one-level or fully recursive                                    // 4991
     * function based on the flag passed in.                                                                           // 4992
     *                                                                                                                 // 4993
     * @private                                                                                                        // 4994
     */                                                                                                                // 4995
    var _makeFlat = function _makeFlat(recursive) {                                                                    // 4996
        return function flatt(list) {                                                                                  // 4997
            var value, jlen, j;                                                                                        // 4998
            var result = [];                                                                                           // 4999
            var idx = 0;                                                                                               // 5000
            var ilen = list.length;                                                                                    // 5001
            while (idx < ilen) {                                                                                       // 5002
                if (isArrayLike(list[idx])) {                                                                          // 5003
                    value = recursive ? flatt(list[idx]) : list[idx];                                                  // 5004
                    j = 0;                                                                                             // 5005
                    jlen = value.length;                                                                               // 5006
                    while (j < jlen) {                                                                                 // 5007
                        result[result.length] = value[j];                                                              // 5008
                        j += 1;                                                                                        // 5009
                    }                                                                                                  // 5010
                } else {                                                                                               // 5011
                    result[result.length] = list[idx];                                                                 // 5012
                }                                                                                                      // 5013
                idx += 1;                                                                                              // 5014
            }                                                                                                          // 5015
            return result;                                                                                             // 5016
        };                                                                                                             // 5017
    };                                                                                                                 // 5018
                                                                                                                       // 5019
    var _reduce = function () {                                                                                        // 5020
        function _arrayReduce(xf, acc, list) {                                                                         // 5021
            var idx = 0;                                                                                               // 5022
            var len = list.length;                                                                                     // 5023
            while (idx < len) {                                                                                        // 5024
                acc = xf['@@transducer/step'](acc, list[idx]);                                                         // 5025
                if (acc && acc['@@transducer/reduced']) {                                                              // 5026
                    acc = acc['@@transducer/value'];                                                                   // 5027
                    break;                                                                                             // 5028
                }                                                                                                      // 5029
                idx += 1;                                                                                              // 5030
            }                                                                                                          // 5031
            return xf['@@transducer/result'](acc);                                                                     // 5032
        }                                                                                                              // 5033
        function _iterableReduce(xf, acc, iter) {                                                                      // 5034
            var step = iter.next();                                                                                    // 5035
            while (!step.done) {                                                                                       // 5036
                acc = xf['@@transducer/step'](acc, step.value);                                                        // 5037
                if (acc && acc['@@transducer/reduced']) {                                                              // 5038
                    acc = acc['@@transducer/value'];                                                                   // 5039
                    break;                                                                                             // 5040
                }                                                                                                      // 5041
                step = iter.next();                                                                                    // 5042
            }                                                                                                          // 5043
            return xf['@@transducer/result'](acc);                                                                     // 5044
        }                                                                                                              // 5045
        function _methodReduce(xf, acc, obj) {                                                                         // 5046
            return xf['@@transducer/result'](obj.reduce(bind(xf['@@transducer/step'], xf), acc));                      // 5047
        }                                                                                                              // 5048
        var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';                              // 5049
        return function _reduce(fn, acc, list) {                                                                       // 5050
            if (typeof fn === 'function') {                                                                            // 5051
                fn = _xwrap(fn);                                                                                       // 5052
            }                                                                                                          // 5053
            if (isArrayLike(list)) {                                                                                   // 5054
                return _arrayReduce(fn, acc, list);                                                                    // 5055
            }                                                                                                          // 5056
            if (typeof list.reduce === 'function') {                                                                   // 5057
                return _methodReduce(fn, acc, list);                                                                   // 5058
            }                                                                                                          // 5059
            if (list[symIterator] != null) {                                                                           // 5060
                return _iterableReduce(fn, acc, list[symIterator]());                                                  // 5061
            }                                                                                                          // 5062
            if (typeof list.next === 'function') {                                                                     // 5063
                return _iterableReduce(fn, acc, list);                                                                 // 5064
            }                                                                                                          // 5065
            throw new TypeError('reduce: list must be array or iterable');                                             // 5066
        };                                                                                                             // 5067
    }();                                                                                                               // 5068
                                                                                                                       // 5069
    var _xdropLastWhile = function () {                                                                                // 5070
        function XDropLastWhile(fn, xf) {                                                                              // 5071
            this.f = fn;                                                                                               // 5072
            this.retained = [];                                                                                        // 5073
            this.xf = xf;                                                                                              // 5074
        }                                                                                                              // 5075
        XDropLastWhile.prototype['@@transducer/init'] = _xfBase.init;                                                  // 5076
        XDropLastWhile.prototype['@@transducer/result'] = function (result) {                                          // 5077
            this.retained = null;                                                                                      // 5078
            return this.xf['@@transducer/result'](result);                                                             // 5079
        };                                                                                                             // 5080
        XDropLastWhile.prototype['@@transducer/step'] = function (result, input) {                                     // 5081
            return this.f(input) ? this.retain(result, input) : this.flush(result, input);                             // 5082
        };                                                                                                             // 5083
        XDropLastWhile.prototype.flush = function (result, input) {                                                    // 5084
            result = _reduce(this.xf['@@transducer/step'], result, this.retained);                                     // 5085
            this.retained = [];                                                                                        // 5086
            return this.xf['@@transducer/step'](result, input);                                                        // 5087
        };                                                                                                             // 5088
        XDropLastWhile.prototype.retain = function (result, input) {                                                   // 5089
            this.retained.push(input);                                                                                 // 5090
            return result;                                                                                             // 5091
        };                                                                                                             // 5092
        return _curry2(function _xdropLastWhile(fn, xf) {                                                              // 5093
            return new XDropLastWhile(fn, xf);                                                                         // 5094
        });                                                                                                            // 5095
    }();                                                                                                               // 5096
                                                                                                                       // 5097
    var _xgroupBy = function () {                                                                                      // 5098
        function XGroupBy(f, xf) {                                                                                     // 5099
            this.xf = xf;                                                                                              // 5100
            this.f = f;                                                                                                // 5101
            this.inputs = {};                                                                                          // 5102
        }                                                                                                              // 5103
        XGroupBy.prototype['@@transducer/init'] = _xfBase.init;                                                        // 5104
        XGroupBy.prototype['@@transducer/result'] = function (result) {                                                // 5105
            var key;                                                                                                   // 5106
            for (key in this.inputs) {                                                                                 // 5107
                if (_has(key, this.inputs)) {                                                                          // 5108
                    result = this.xf['@@transducer/step'](result, this.inputs[key]);                                   // 5109
                    if (result['@@transducer/reduced']) {                                                              // 5110
                        result = result['@@transducer/value'];                                                         // 5111
                        break;                                                                                         // 5112
                    }                                                                                                  // 5113
                }                                                                                                      // 5114
            }                                                                                                          // 5115
            this.inputs = null;                                                                                        // 5116
            return this.xf['@@transducer/result'](result);                                                             // 5117
        };                                                                                                             // 5118
        XGroupBy.prototype['@@transducer/step'] = function (result, input) {                                           // 5119
            var key = this.f(input);                                                                                   // 5120
            this.inputs[key] = this.inputs[key] || [                                                                   // 5121
                key,                                                                                                   // 5122
                []                                                                                                     // 5123
            ];                                                                                                         // 5124
            this.inputs[key][1] = append(input, this.inputs[key][1]);                                                  // 5125
            return result;                                                                                             // 5126
        };                                                                                                             // 5127
        return _curry2(function _xgroupBy(f, xf) {                                                                     // 5128
            return new XGroupBy(f, xf);                                                                                // 5129
        });                                                                                                            // 5130
    }();                                                                                                               // 5131
                                                                                                                       // 5132
    /**                                                                                                                // 5133
     * Creates a new list iteration function from an existing one by adding two new                                    // 5134
     * parameters to its callback function: the current index, and the entire list.                                    // 5135
     *                                                                                                                 // 5136
     * This would turn, for instance, Ramda's simple `map` function into one that                                      // 5137
     * more closely resembles `Array.prototype.map`. Note that this will only work                                     // 5138
     * for functions in which the iteration callback function is the first                                             // 5139
     * parameter, and where the list is the last parameter. (This latter might be                                      // 5140
     * unimportant if the list parameter is not used.)                                                                 // 5141
     *                                                                                                                 // 5142
     * @func                                                                                                           // 5143
     * @memberOf R                                                                                                     // 5144
     * @since v0.15.0                                                                                                  // 5145
     * @category Function                                                                                              // 5146
     * @category List                                                                                                  // 5147
     * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)                                  // 5148
     * @param {Function} fn A list iteration function that does not pass index or list to its callback                 // 5149
     * @return {Function} An altered list iteration function that passes (item, index, list) to its callback           // 5150
     * @example                                                                                                        // 5151
     *                                                                                                                 // 5152
     *      var mapIndexed = R.addIndex(R.map);                                                                        // 5153
     *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);                                 // 5154
     *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']                                                            // 5155
     */                                                                                                                // 5156
    var addIndex = _curry1(function addIndex(fn) {                                                                     // 5157
        return curryN(fn.length, function () {                                                                         // 5158
            var idx = 0;                                                                                               // 5159
            var origFn = arguments[0];                                                                                 // 5160
            var list = arguments[arguments.length - 1];                                                                // 5161
            var args = _slice(arguments);                                                                              // 5162
            args[0] = function () {                                                                                    // 5163
                var result = origFn.apply(this, _concat(arguments, [                                                   // 5164
                    idx,                                                                                               // 5165
                    list                                                                                               // 5166
                ]));                                                                                                   // 5167
                idx += 1;                                                                                              // 5168
                return result;                                                                                         // 5169
            };                                                                                                         // 5170
            return fn.apply(this, args);                                                                               // 5171
        });                                                                                                            // 5172
    });                                                                                                                // 5173
                                                                                                                       // 5174
    /**                                                                                                                // 5175
     * Wraps a function of any arity (including nullary) in a function that accepts                                    // 5176
     * exactly 2 parameters. Any extraneous parameters will not be passed to the                                       // 5177
     * supplied function.                                                                                              // 5178
     *                                                                                                                 // 5179
     * @func                                                                                                           // 5180
     * @memberOf R                                                                                                     // 5181
     * @since v0.2.0                                                                                                   // 5182
     * @category Function                                                                                              // 5183
     * @sig (* -> c) -> (a, b -> c)                                                                                    // 5184
     * @param {Function} fn The function to wrap.                                                                      // 5185
     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of                        // 5186
     *         arity 2.                                                                                                // 5187
     * @example                                                                                                        // 5188
     *                                                                                                                 // 5189
     *      var takesThreeArgs = function(a, b, c) {                                                                   // 5190
     *        return [a, b, c];                                                                                        // 5191
     *      };                                                                                                         // 5192
     *      takesThreeArgs.length; //=> 3                                                                              // 5193
     *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]                                                                    // 5194
     *                                                                                                                 // 5195
     *      var takesTwoArgs = R.binary(takesThreeArgs);                                                               // 5196
     *      takesTwoArgs.length; //=> 2                                                                                // 5197
     *      // Only 2 arguments are passed to the wrapped function                                                     // 5198
     *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]                                                              // 5199
     */                                                                                                                // 5200
    var binary = _curry1(function binary(fn) {                                                                         // 5201
        return nAry(2, fn);                                                                                            // 5202
    });                                                                                                                // 5203
                                                                                                                       // 5204
    /**                                                                                                                // 5205
     * Creates a deep copy of the value which may contain (nested) `Array`s and                                        // 5206
     * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are not                                    // 5207
     * copied, but assigned by their reference.                                                                        // 5208
     *                                                                                                                 // 5209
     * Dispatches to a `clone` method if present.                                                                      // 5210
     *                                                                                                                 // 5211
     * @func                                                                                                           // 5212
     * @memberOf R                                                                                                     // 5213
     * @since v0.1.0                                                                                                   // 5214
     * @category Object                                                                                                // 5215
     * @sig {*} -> {*}                                                                                                 // 5216
     * @param {*} value The object or array to clone                                                                   // 5217
     * @return {*} A new object or array.                                                                              // 5218
     * @example                                                                                                        // 5219
     *                                                                                                                 // 5220
     *      var objects = [{}, {}, {}];                                                                                // 5221
     *      var objectsClone = R.clone(objects);                                                                       // 5222
     *      objects[0] === objectsClone[0]; //=> false                                                                 // 5223
     */                                                                                                                // 5224
    var clone = _curry1(function clone(value) {                                                                        // 5225
        return value != null && typeof value.clone === 'function' ? value.clone() : _clone(value, [], []);             // 5226
    });                                                                                                                // 5227
                                                                                                                       // 5228
    /**                                                                                                                // 5229
     * Returns a curried equivalent of the provided function. The curried function                                     // 5230
     * has two unusual capabilities. First, its arguments needn't be provided one                                      // 5231
     * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the                                            // 5232
     * following are equivalent:                                                                                       // 5233
     *                                                                                                                 // 5234
     *   - `g(1)(2)(3)`                                                                                                // 5235
     *   - `g(1)(2, 3)`                                                                                                // 5236
     *   - `g(1, 2)(3)`                                                                                                // 5237
     *   - `g(1, 2, 3)`                                                                                                // 5238
     *                                                                                                                 // 5239
     * Secondly, the special placeholder value `R.__` may be used to specify                                           // 5240
     * "gaps", allowing partial application of any combination of arguments,                                           // 5241
     * regardless of their positions. If `g` is as above and `_` is `R.__`, the                                        // 5242
     * following are equivalent:                                                                                       // 5243
     *                                                                                                                 // 5244
     *   - `g(1, 2, 3)`                                                                                                // 5245
     *   - `g(_, 2, 3)(1)`                                                                                             // 5246
     *   - `g(_, _, 3)(1)(2)`                                                                                          // 5247
     *   - `g(_, _, 3)(1, 2)`                                                                                          // 5248
     *   - `g(_, 2)(1)(3)`                                                                                             // 5249
     *   - `g(_, 2)(1, 3)`                                                                                             // 5250
     *   - `g(_, 2)(_, 3)(1)`                                                                                          // 5251
     *                                                                                                                 // 5252
     * @func                                                                                                           // 5253
     * @memberOf R                                                                                                     // 5254
     * @since v0.1.0                                                                                                   // 5255
     * @category Function                                                                                              // 5256
     * @sig (* -> a) -> (* -> a)                                                                                       // 5257
     * @param {Function} fn The function to curry.                                                                     // 5258
     * @return {Function} A new, curried function.                                                                     // 5259
     * @see R.curryN                                                                                                   // 5260
     * @example                                                                                                        // 5261
     *                                                                                                                 // 5262
     *      var addFourNumbers = (a, b, c, d) => a + b + c + d;                                                        // 5263
     *                                                                                                                 // 5264
     *      var curriedAddFourNumbers = R.curry(addFourNumbers);                                                       // 5265
     *      var f = curriedAddFourNumbers(1, 2);                                                                       // 5266
     *      var g = f(3);                                                                                              // 5267
     *      g(4); //=> 10                                                                                              // 5268
     */                                                                                                                // 5269
    var curry = _curry1(function curry(fn) {                                                                           // 5270
        return curryN(fn.length, fn);                                                                                  // 5271
    });                                                                                                                // 5272
                                                                                                                       // 5273
    /**                                                                                                                // 5274
     * Returns all but the first `n` elements of the given list, string, or                                            // 5275
     * transducer/transformer (or object with a `drop` method).                                                        // 5276
     *                                                                                                                 // 5277
     * Dispatches to the `drop` method of the second argument, if present.                                             // 5278
     *                                                                                                                 // 5279
     * @func                                                                                                           // 5280
     * @memberOf R                                                                                                     // 5281
     * @since v0.1.0                                                                                                   // 5282
     * @category List                                                                                                  // 5283
     * @sig Number -> [a] -> [a]                                                                                       // 5284
     * @sig Number -> String -> String                                                                                 // 5285
     * @param {Number} n                                                                                               // 5286
     * @param {*} list                                                                                                 // 5287
     * @return {*}                                                                                                     // 5288
     * @see R.take, R.transduce                                                                                        // 5289
     * @example                                                                                                        // 5290
     *                                                                                                                 // 5291
     *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']                                                      // 5292
     *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']                                                             // 5293
     *      R.drop(3, ['foo', 'bar', 'baz']); //=> []                                                                  // 5294
     *      R.drop(4, ['foo', 'bar', 'baz']); //=> []                                                                  // 5295
     *      R.drop(3, 'ramda');               //=> 'da'                                                                // 5296
     */                                                                                                                // 5297
    var drop = _curry2(_dispatchable('drop', _xdrop, function drop(n, xs) {                                            // 5298
        return slice(Math.max(0, n), Infinity, xs);                                                                    // 5299
    }));                                                                                                               // 5300
                                                                                                                       // 5301
    /**                                                                                                                // 5302
     * Returns a list containing all but the last `n` elements of the given `list`.                                    // 5303
     *                                                                                                                 // 5304
     * @func                                                                                                           // 5305
     * @memberOf R                                                                                                     // 5306
     * @since v0.16.0                                                                                                  // 5307
     * @category List                                                                                                  // 5308
     * @sig Number -> [a] -> [a]                                                                                       // 5309
     * @sig Number -> String -> String                                                                                 // 5310
     * @param {Number} n The number of elements of `xs` to skip.                                                       // 5311
     * @param {Array} xs The collection to consider.                                                                   // 5312
     * @return {Array}                                                                                                 // 5313
     * @see R.takeLast                                                                                                 // 5314
     * @example                                                                                                        // 5315
     *                                                                                                                 // 5316
     *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']                                                  // 5317
     *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']                                                         // 5318
     *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []                                                              // 5319
     *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []                                                              // 5320
     *      R.dropLast(3, 'ramda');               //=> 'ra'                                                            // 5321
     */                                                                                                                // 5322
    var dropLast = _curry2(_dispatchable('dropLast', _xdropLast, _dropLast));                                          // 5323
                                                                                                                       // 5324
    /**                                                                                                                // 5325
     * Returns a new list containing all but last the`n` elements of a given list,                                     // 5326
     * passing each value from the right to the supplied predicate function,                                           // 5327
     * skipping elements while the predicate function returns `true`. The predicate                                    // 5328
     * function is passed one argument: (value)*.                                                                      // 5329
     *                                                                                                                 // 5330
     * @func                                                                                                           // 5331
     * @memberOf R                                                                                                     // 5332
     * @since v0.16.0                                                                                                  // 5333
     * @category List                                                                                                  // 5334
     * @sig (a -> Boolean) -> [a] -> [a]                                                                               // 5335
     * @param {Function} fn The function called per iteration.                                                         // 5336
     * @param {Array} list The collection to iterate over.                                                             // 5337
     * @return {Array} A new array.                                                                                    // 5338
     * @see R.takeLastWhile, R.addIndex                                                                                // 5339
     * @example                                                                                                        // 5340
     *                                                                                                                 // 5341
     *      var lteThree = x => x <= 3;                                                                                // 5342
     *                                                                                                                 // 5343
     *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]                                        // 5344
     */                                                                                                                // 5345
    var dropLastWhile = _curry2(_dispatchable('dropLastWhile', _xdropLastWhile, _dropLastWhile));                      // 5346
                                                                                                                       // 5347
    /**                                                                                                                // 5348
     * Returns `true` if its arguments are equivalent, `false` otherwise. Handles                                      // 5349
     * cyclical data structures.                                                                                       // 5350
     *                                                                                                                 // 5351
     * Dispatches symmetrically to the `equals` methods of both arguments, if                                          // 5352
     * present.                                                                                                        // 5353
     *                                                                                                                 // 5354
     * @func                                                                                                           // 5355
     * @memberOf R                                                                                                     // 5356
     * @since v0.15.0                                                                                                  // 5357
     * @category Relation                                                                                              // 5358
     * @sig a -> b -> Boolean                                                                                          // 5359
     * @param {*} a                                                                                                    // 5360
     * @param {*} b                                                                                                    // 5361
     * @return {Boolean}                                                                                               // 5362
     * @example                                                                                                        // 5363
     *                                                                                                                 // 5364
     *      R.equals(1, 1); //=> true                                                                                  // 5365
     *      R.equals(1, '1'); //=> false                                                                               // 5366
     *      R.equals([1, 2, 3], [1, 2, 3]); //=> true                                                                  // 5367
     *                                                                                                                 // 5368
     *      var a = {}; a.v = a;                                                                                       // 5369
     *      var b = {}; b.v = b;                                                                                       // 5370
     *      R.equals(a, b); //=> true                                                                                  // 5371
     */                                                                                                                // 5372
    var equals = _curry2(function equals(a, b) {                                                                       // 5373
        return _equals(a, b, [], []);                                                                                  // 5374
    });                                                                                                                // 5375
                                                                                                                       // 5376
    /**                                                                                                                // 5377
     * Takes a predicate and a "filterable", and returns a new filterable of the                                       // 5378
     * same type containing the members of the given filterable which satisfy the                                      // 5379
     * given predicate.                                                                                                // 5380
     *                                                                                                                 // 5381
     * Dispatches to the `filter` method of the second argument, if present.                                           // 5382
     *                                                                                                                 // 5383
     * Acts as a transducer if a transformer is given in list position.                                                // 5384
     *                                                                                                                 // 5385
     * @func                                                                                                           // 5386
     * @memberOf R                                                                                                     // 5387
     * @since v0.1.0                                                                                                   // 5388
     * @category List                                                                                                  // 5389
     * @sig Filterable f => (a -> Boolean) -> f a -> f a                                                               // 5390
     * @param {Function} pred                                                                                          // 5391
     * @param {Array} filterable                                                                                       // 5392
     * @return {Array}                                                                                                 // 5393
     * @see R.reject, R.transduce, R.addIndex                                                                          // 5394
     * @example                                                                                                        // 5395
     *                                                                                                                 // 5396
     *      var isEven = n => n % 2 === 0;                                                                             // 5397
     *                                                                                                                 // 5398
     *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]                                                                // 5399
     *                                                                                                                 // 5400
     *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}                                              // 5401
     */                                                                                                                // 5402
    // else                                                                                                            // 5403
    var filter = _curry2(_dispatchable('filter', _xfilter, function (pred, filterable) {                               // 5404
        return _isObject(filterable) ? _reduce(function (acc, key) {                                                   // 5405
            if (pred(filterable[key])) {                                                                               // 5406
                acc[key] = filterable[key];                                                                            // 5407
            }                                                                                                          // 5408
            return acc;                                                                                                // 5409
        }, {}, keys(filterable)) : // else                                                                             // 5410
        _filter(pred, filterable);                                                                                     // 5411
    }));                                                                                                               // 5412
                                                                                                                       // 5413
    /**                                                                                                                // 5414
     * Returns a new list by pulling every item out of it (and all its sub-arrays)                                     // 5415
     * and putting them in a new array, depth-first.                                                                   // 5416
     *                                                                                                                 // 5417
     * @func                                                                                                           // 5418
     * @memberOf R                                                                                                     // 5419
     * @since v0.1.0                                                                                                   // 5420
     * @category List                                                                                                  // 5421
     * @sig [a] -> [b]                                                                                                 // 5422
     * @param {Array} list The array to consider.                                                                      // 5423
     * @return {Array} The flattened list.                                                                             // 5424
     * @see R.unnest                                                                                                   // 5425
     * @example                                                                                                        // 5426
     *                                                                                                                 // 5427
     *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);                                              // 5428
     *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]                                                               // 5429
     */                                                                                                                // 5430
    var flatten = _curry1(_makeFlat(true));                                                                            // 5431
                                                                                                                       // 5432
    /**                                                                                                                // 5433
     * Returns a new function much like the supplied one, except that the first two                                    // 5434
     * arguments' order is reversed.                                                                                   // 5435
     *                                                                                                                 // 5436
     * @func                                                                                                           // 5437
     * @memberOf R                                                                                                     // 5438
     * @since v0.1.0                                                                                                   // 5439
     * @category Function                                                                                              // 5440
     * @sig (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)                                                     // 5441
     * @param {Function} fn The function to invoke with its first two parameters reversed.                             // 5442
     * @return {*} The result of invoking `fn` with its first two parameters' order reversed.                          // 5443
     * @example                                                                                                        // 5444
     *                                                                                                                 // 5445
     *      var mergeThree = (a, b, c) => [].concat(a, b, c);                                                          // 5446
     *                                                                                                                 // 5447
     *      mergeThree(1, 2, 3); //=> [1, 2, 3]                                                                        // 5448
     *                                                                                                                 // 5449
     *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]                                                                // 5450
     */                                                                                                                // 5451
    var flip = _curry1(function flip(fn) {                                                                             // 5452
        return curry(function (a, b) {                                                                                 // 5453
            var args = _slice(arguments);                                                                              // 5454
            args[0] = b;                                                                                               // 5455
            args[1] = a;                                                                                               // 5456
            return fn.apply(this, args);                                                                               // 5457
        });                                                                                                            // 5458
    });                                                                                                                // 5459
                                                                                                                       // 5460
    /**                                                                                                                // 5461
     * Splits a list into sub-lists stored in an object, based on the result of                                        // 5462
     * calling a String-returning function on each element, and grouping the                                           // 5463
     * results according to values returned.                                                                           // 5464
     *                                                                                                                 // 5465
     * Dispatches to the `groupBy` method of the second argument, if present.                                          // 5466
     *                                                                                                                 // 5467
     * Acts as a transducer if a transformer is given in list position.                                                // 5468
     *                                                                                                                 // 5469
     * @func                                                                                                           // 5470
     * @memberOf R                                                                                                     // 5471
     * @since v0.1.0                                                                                                   // 5472
     * @category List                                                                                                  // 5473
     * @sig (a -> String) -> [a] -> {String: [a]}                                                                      // 5474
     * @param {Function} fn Function :: a -> String                                                                    // 5475
     * @param {Array} list The array to group                                                                          // 5476
     * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements                       // 5477
     *         that produced that key when passed to `fn`.                                                             // 5478
     * @see R.transduce                                                                                                // 5479
     * @example                                                                                                        // 5480
     *                                                                                                                 // 5481
     *      var byGrade = R.groupBy(function(student) {                                                                // 5482
     *        var score = student.score;                                                                               // 5483
     *        return score < 65 ? 'F' :                                                                                // 5484
     *               score < 70 ? 'D' :                                                                                // 5485
     *               score < 80 ? 'C' :                                                                                // 5486
     *               score < 90 ? 'B' : 'A';                                                                           // 5487
     *      });                                                                                                        // 5488
     *      var students = [{name: 'Abby', score: 84},                                                                 // 5489
     *                      {name: 'Eddy', score: 58},                                                                 // 5490
     *                      // ...                                                                                     // 5491
     *                      {name: 'Jack', score: 69}];                                                                // 5492
     *      byGrade(students);                                                                                         // 5493
     *      // {                                                                                                       // 5494
     *      //   'A': [{name: 'Dianne', score: 99}],                                                                   // 5495
     *      //   'B': [{name: 'Abby', score: 84}]                                                                      // 5496
     *      //   // ...,                                                                                               // 5497
     *      //   'F': [{name: 'Eddy', score: 58}]                                                                      // 5498
     *      // }                                                                                                       // 5499
     */                                                                                                                // 5500
    var groupBy = _curry2(_dispatchable('groupBy', _xgroupBy, function groupBy(fn, list) {                             // 5501
        return _reduce(function (acc, elt) {                                                                           // 5502
            var key = fn(elt);                                                                                         // 5503
            acc[key] = append(elt, acc[key] || (acc[key] = []));                                                       // 5504
            return acc;                                                                                                // 5505
        }, {}, list);                                                                                                  // 5506
    }));                                                                                                               // 5507
                                                                                                                       // 5508
    /**                                                                                                                // 5509
     * Returns the first element of the given list or string. In some libraries                                        // 5510
     * this function is named `first`.                                                                                 // 5511
     *                                                                                                                 // 5512
     * @func                                                                                                           // 5513
     * @memberOf R                                                                                                     // 5514
     * @since v0.1.0                                                                                                   // 5515
     * @category List                                                                                                  // 5516
     * @sig [a] -> a | Undefined                                                                                       // 5517
     * @sig String -> String                                                                                           // 5518
     * @param {Array|String} list                                                                                      // 5519
     * @return {*}                                                                                                     // 5520
     * @see R.tail, R.init, R.last                                                                                     // 5521
     * @example                                                                                                        // 5522
     *                                                                                                                 // 5523
     *      R.head(['fi', 'fo', 'fum']); //=> 'fi'                                                                     // 5524
     *      R.head([]); //=> undefined                                                                                 // 5525
     *                                                                                                                 // 5526
     *      R.head('abc'); //=> 'a'                                                                                    // 5527
     *      R.head(''); //=> ''                                                                                        // 5528
     */                                                                                                                // 5529
    var head = nth(0);                                                                                                 // 5530
                                                                                                                       // 5531
    /**                                                                                                                // 5532
     * Given a function that generates a key, turns a list of objects into an                                          // 5533
     * object indexing the objects by the given key. Note that if multiple                                             // 5534
     * objects generate the same value for the indexing key only the last value                                        // 5535
     * will be included in the generated object.                                                                       // 5536
     *                                                                                                                 // 5537
     * @func                                                                                                           // 5538
     * @memberOf R                                                                                                     // 5539
     * @since 0.19.0                                                                                                   // 5540
     * @category List                                                                                                  // 5541
     * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}                                                                   // 5542
     * @param {Function} fn Function :: a -> String                                                                    // 5543
     * @param {Array} array The array of objects to index                                                              // 5544
     * @return {Object} An object indexing each array element by the given property.                                   // 5545
     * @example                                                                                                        // 5546
     *                                                                                                                 // 5547
     *      var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];                                             // 5548
     *      R.indexBy(R.prop('id'), list);                                                                             // 5549
     *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}                                          // 5550
     */                                                                                                                // 5551
    var indexBy = _curry2(function indexBy(fn, list) {                                                                 // 5552
        return _reduce(function (acc, elem) {                                                                          // 5553
            var key = fn(elem);                                                                                        // 5554
            acc[key] = elem;                                                                                           // 5555
            return acc;                                                                                                // 5556
        }, {}, list);                                                                                                  // 5557
    });                                                                                                                // 5558
                                                                                                                       // 5559
    /**                                                                                                                // 5560
     * Returns all but the last element of the given list or string.                                                   // 5561
     *                                                                                                                 // 5562
     * @func                                                                                                           // 5563
     * @memberOf R                                                                                                     // 5564
     * @since v0.9.0                                                                                                   // 5565
     * @category List                                                                                                  // 5566
     * @sig [a] -> [a]                                                                                                 // 5567
     * @sig String -> String                                                                                           // 5568
     * @param {*} list                                                                                                 // 5569
     * @return {*}                                                                                                     // 5570
     * @see R.last, R.head, R.tail                                                                                     // 5571
     * @example                                                                                                        // 5572
     *                                                                                                                 // 5573
     *      R.init([1, 2, 3]);  //=> [1, 2]                                                                            // 5574
     *      R.init([1, 2]);     //=> [1]                                                                               // 5575
     *      R.init([1]);        //=> []                                                                                // 5576
     *      R.init([]);         //=> []                                                                                // 5577
     *                                                                                                                 // 5578
     *      R.init('abc');  //=> 'ab'                                                                                  // 5579
     *      R.init('ab');   //=> 'a'                                                                                   // 5580
     *      R.init('a');    //=> ''                                                                                    // 5581
     *      R.init('');     //=> ''                                                                                    // 5582
     */                                                                                                                // 5583
    var init = slice(0, -1);                                                                                           // 5584
                                                                                                                       // 5585
    /**                                                                                                                // 5586
     * Combines two lists into a set (i.e. no duplicates) composed of those                                            // 5587
     * elements common to both lists. Duplication is determined according to the                                       // 5588
     * value returned by applying the supplied predicate to two list elements.                                         // 5589
     *                                                                                                                 // 5590
     * @func                                                                                                           // 5591
     * @memberOf R                                                                                                     // 5592
     * @since v0.1.0                                                                                                   // 5593
     * @category Relation                                                                                              // 5594
     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]                                                                   // 5595
     * @param {Function} pred A predicate function that determines whether                                             // 5596
     *        the two supplied elements are equal.                                                                     // 5597
     * @param {Array} list1 One list of items to compare                                                               // 5598
     * @param {Array} list2 A second list of items to compare                                                          // 5599
     * @return {Array} A new list containing those elements common to both lists.                                      // 5600
     * @see R.intersection                                                                                             // 5601
     * @example                                                                                                        // 5602
     *                                                                                                                 // 5603
     *      var buffaloSpringfield = [                                                                                 // 5604
     *        {id: 824, name: 'Richie Furay'},                                                                         // 5605
     *        {id: 956, name: 'Dewey Martin'},                                                                         // 5606
     *        {id: 313, name: 'Bruce Palmer'},                                                                         // 5607
     *        {id: 456, name: 'Stephen Stills'},                                                                       // 5608
     *        {id: 177, name: 'Neil Young'}                                                                            // 5609
     *      ];                                                                                                         // 5610
     *      var csny = [                                                                                               // 5611
     *        {id: 204, name: 'David Crosby'},                                                                         // 5612
     *        {id: 456, name: 'Stephen Stills'},                                                                       // 5613
     *        {id: 539, name: 'Graham Nash'},                                                                          // 5614
     *        {id: 177, name: 'Neil Young'}                                                                            // 5615
     *      ];                                                                                                         // 5616
     *                                                                                                                 // 5617
     *      R.intersectionWith(R.eqBy(R.prop('id')), buffaloSpringfield, csny);                                        // 5618
     *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]                                    // 5619
     */                                                                                                                // 5620
    var intersectionWith = _curry3(function intersectionWith(pred, list1, list2) {                                     // 5621
        var results = [];                                                                                              // 5622
        var idx = 0;                                                                                                   // 5623
        while (idx < list1.length) {                                                                                   // 5624
            if (_containsWith(pred, list1[idx], list2)) {                                                              // 5625
                results[results.length] = list1[idx];                                                                  // 5626
            }                                                                                                          // 5627
            idx += 1;                                                                                                  // 5628
        }                                                                                                              // 5629
        return uniqWith(pred, results);                                                                                // 5630
    });                                                                                                                // 5631
                                                                                                                       // 5632
    /**                                                                                                                // 5633
     * Same as R.invertObj, however this accounts for objects with duplicate values                                    // 5634
     * by putting the values into an array.                                                                            // 5635
     *                                                                                                                 // 5636
     * @func                                                                                                           // 5637
     * @memberOf R                                                                                                     // 5638
     * @since v0.9.0                                                                                                   // 5639
     * @category Object                                                                                                // 5640
     * @sig {s: x} -> {x: [ s, ... ]}                                                                                  // 5641
     * @param {Object} obj The object or array to invert                                                               // 5642
     * @return {Object} out A new object with keys                                                                     // 5643
     * in an array.                                                                                                    // 5644
     * @example                                                                                                        // 5645
     *                                                                                                                 // 5646
     *      var raceResultsByFirstName = {                                                                             // 5647
     *        first: 'alice',                                                                                          // 5648
     *        second: 'jake',                                                                                          // 5649
     *        third: 'alice',                                                                                          // 5650
     *      };                                                                                                         // 5651
     *      R.invert(raceResultsByFirstName);                                                                          // 5652
     *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }                                                    // 5653
     */                                                                                                                // 5654
    var invert = _curry1(function invert(obj) {                                                                        // 5655
        var props = keys(obj);                                                                                         // 5656
        var len = props.length;                                                                                        // 5657
        var idx = 0;                                                                                                   // 5658
        var out = {};                                                                                                  // 5659
        while (idx < len) {                                                                                            // 5660
            var key = props[idx];                                                                                      // 5661
            var val = obj[key];                                                                                        // 5662
            var list = _has(val, out) ? out[val] : out[val] = [];                                                      // 5663
            list[list.length] = key;                                                                                   // 5664
            idx += 1;                                                                                                  // 5665
        }                                                                                                              // 5666
        return out;                                                                                                    // 5667
    });                                                                                                                // 5668
                                                                                                                       // 5669
    /**                                                                                                                // 5670
     * Returns a new object with the keys of the given object as values, and the                                       // 5671
     * values of the given object, which are coerced to strings, as keys. Note                                         // 5672
     * that the last key found is preferred when handling the same value.                                              // 5673
     *                                                                                                                 // 5674
     * @func                                                                                                           // 5675
     * @memberOf R                                                                                                     // 5676
     * @since v0.9.0                                                                                                   // 5677
     * @category Object                                                                                                // 5678
     * @sig {s: x} -> {x: s}                                                                                           // 5679
     * @param {Object} obj The object or array to invert                                                               // 5680
     * @return {Object} out A new object                                                                               // 5681
     * @example                                                                                                        // 5682
     *                                                                                                                 // 5683
     *      var raceResults = {                                                                                        // 5684
     *        first: 'alice',                                                                                          // 5685
     *        second: 'jake'                                                                                           // 5686
     *      };                                                                                                         // 5687
     *      R.invertObj(raceResults);                                                                                  // 5688
     *      //=> { 'alice': 'first', 'jake':'second' }                                                                 // 5689
     *                                                                                                                 // 5690
     *      // Alternatively:                                                                                          // 5691
     *      var raceResults = ['alice', 'jake'];                                                                       // 5692
     *      R.invertObj(raceResults);                                                                                  // 5693
     *      //=> { 'alice': '0', 'jake':'1' }                                                                          // 5694
     */                                                                                                                // 5695
    var invertObj = _curry1(function invertObj(obj) {                                                                  // 5696
        var props = keys(obj);                                                                                         // 5697
        var len = props.length;                                                                                        // 5698
        var idx = 0;                                                                                                   // 5699
        var out = {};                                                                                                  // 5700
        while (idx < len) {                                                                                            // 5701
            var key = props[idx];                                                                                      // 5702
            out[obj[key]] = key;                                                                                       // 5703
            idx += 1;                                                                                                  // 5704
        }                                                                                                              // 5705
        return out;                                                                                                    // 5706
    });                                                                                                                // 5707
                                                                                                                       // 5708
    /**                                                                                                                // 5709
     * Returns `true` if the given value is its type's empty value; `false`                                            // 5710
     * otherwise.                                                                                                      // 5711
     *                                                                                                                 // 5712
     * @func                                                                                                           // 5713
     * @memberOf R                                                                                                     // 5714
     * @since v0.1.0                                                                                                   // 5715
     * @category Logic                                                                                                 // 5716
     * @sig a -> Boolean                                                                                               // 5717
     * @param {*} x                                                                                                    // 5718
     * @return {Boolean}                                                                                               // 5719
     * @see R.empty                                                                                                    // 5720
     * @example                                                                                                        // 5721
     *                                                                                                                 // 5722
     *      R.isEmpty([1, 2, 3]);   //=> false                                                                         // 5723
     *      R.isEmpty([]);          //=> true                                                                          // 5724
     *      R.isEmpty('');          //=> true                                                                          // 5725
     *      R.isEmpty(null);        //=> false                                                                         // 5726
     *      R.isEmpty({});          //=> true                                                                          // 5727
     *      R.isEmpty({length: 0}); //=> false                                                                         // 5728
     */                                                                                                                // 5729
    var isEmpty = _curry1(function isEmpty(x) {                                                                        // 5730
        return x != null && equals(x, empty(x));                                                                       // 5731
    });                                                                                                                // 5732
                                                                                                                       // 5733
    /**                                                                                                                // 5734
     * Returns the last element of the given list or string.                                                           // 5735
     *                                                                                                                 // 5736
     * @func                                                                                                           // 5737
     * @memberOf R                                                                                                     // 5738
     * @since v0.1.4                                                                                                   // 5739
     * @category List                                                                                                  // 5740
     * @sig [a] -> a | Undefined                                                                                       // 5741
     * @sig String -> String                                                                                           // 5742
     * @param {*} list                                                                                                 // 5743
     * @return {*}                                                                                                     // 5744
     * @see R.init, R.head, R.tail                                                                                     // 5745
     * @example                                                                                                        // 5746
     *                                                                                                                 // 5747
     *      R.last(['fi', 'fo', 'fum']); //=> 'fum'                                                                    // 5748
     *      R.last([]); //=> undefined                                                                                 // 5749
     *                                                                                                                 // 5750
     *      R.last('abc'); //=> 'c'                                                                                    // 5751
     *      R.last(''); //=> ''                                                                                        // 5752
     */                                                                                                                // 5753
    var last = nth(-1);                                                                                                // 5754
                                                                                                                       // 5755
    /**                                                                                                                // 5756
     * Returns the position of the last occurrence of an item in an array, or -1 if                                    // 5757
     * the item is not included in the array. `R.equals` is used to determine                                          // 5758
     * equality.                                                                                                       // 5759
     *                                                                                                                 // 5760
     * @func                                                                                                           // 5761
     * @memberOf R                                                                                                     // 5762
     * @since v0.1.0                                                                                                   // 5763
     * @category List                                                                                                  // 5764
     * @sig a -> [a] -> Number                                                                                         // 5765
     * @param {*} target The item to find.                                                                             // 5766
     * @param {Array} xs The array to search in.                                                                       // 5767
     * @return {Number} the index of the target, or -1 if the target is not found.                                     // 5768
     * @see R.indexOf                                                                                                  // 5769
     * @example                                                                                                        // 5770
     *                                                                                                                 // 5771
     *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6                                                               // 5772
     *      R.lastIndexOf(10, [1,2,3,4]); //=> -1                                                                      // 5773
     */                                                                                                                // 5774
    var lastIndexOf = _curry2(function lastIndexOf(target, xs) {                                                       // 5775
        if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {                                                   // 5776
            return xs.lastIndexOf(target);                                                                             // 5777
        } else {                                                                                                       // 5778
            var idx = xs.length - 1;                                                                                   // 5779
            while (idx >= 0) {                                                                                         // 5780
                if (equals(xs[idx], target)) {                                                                         // 5781
                    return idx;                                                                                        // 5782
                }                                                                                                      // 5783
                idx -= 1;                                                                                              // 5784
            }                                                                                                          // 5785
            return -1;                                                                                                 // 5786
        }                                                                                                              // 5787
    });                                                                                                                // 5788
                                                                                                                       // 5789
    /**                                                                                                                // 5790
     * Takes a function and                                                                                            // 5791
     * a [functor](https://github.com/fantasyland/fantasy-land#functor),                                               // 5792
     * applies the function to each of the functor's values, and returns                                               // 5793
     * a functor of the same shape.                                                                                    // 5794
     *                                                                                                                 // 5795
     * Ramda provides suitable `map` implementations for `Array` and `Object`,                                         // 5796
     * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.                                         // 5797
     *                                                                                                                 // 5798
     * Dispatches to the `map` method of the second argument, if present.                                              // 5799
     *                                                                                                                 // 5800
     * Acts as a transducer if a transformer is given in list position.                                                // 5801
     *                                                                                                                 // 5802
     * Also treats functions as functors and will compose them together.                                               // 5803
     *                                                                                                                 // 5804
     * @func                                                                                                           // 5805
     * @memberOf R                                                                                                     // 5806
     * @since v0.1.0                                                                                                   // 5807
     * @category List                                                                                                  // 5808
     * @sig Functor f => (a -> b) -> f a -> f b                                                                        // 5809
     * @param {Function} fn The function to be called on every element of the input `list`.                            // 5810
     * @param {Array} list The list to be iterated over.                                                               // 5811
     * @return {Array} The new list.                                                                                   // 5812
     * @see R.transduce, R.addIndex                                                                                    // 5813
     * @example                                                                                                        // 5814
     *                                                                                                                 // 5815
     *      var double = x => x * 2;                                                                                   // 5816
     *                                                                                                                 // 5817
     *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]                                                                   // 5818
     *                                                                                                                 // 5819
     *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}                                                 // 5820
     */                                                                                                                // 5821
    var map = _curry2(_dispatchable('map', _xmap, function map(fn, functor) {                                          // 5822
        switch (Object.prototype.toString.call(functor)) {                                                             // 5823
        case '[object Function]':                                                                                      // 5824
            return curryN(functor.length, function () {                                                                // 5825
                return fn.call(this, functor.apply(this, arguments));                                                  // 5826
            });                                                                                                        // 5827
        case '[object Object]':                                                                                        // 5828
            return _reduce(function (acc, key) {                                                                       // 5829
                acc[key] = fn(functor[key]);                                                                           // 5830
                return acc;                                                                                            // 5831
            }, {}, keys(functor));                                                                                     // 5832
        default:                                                                                                       // 5833
            return _map(fn, functor);                                                                                  // 5834
        }                                                                                                              // 5835
    }));                                                                                                               // 5836
                                                                                                                       // 5837
    /**                                                                                                                // 5838
     * An Object-specific version of `map`. The function is applied to three                                           // 5839
     * arguments: *(value, key, obj)*. If only the value is significant, use                                           // 5840
     * `map` instead.                                                                                                  // 5841
     *                                                                                                                 // 5842
     * @func                                                                                                           // 5843
     * @memberOf R                                                                                                     // 5844
     * @since v0.9.0                                                                                                   // 5845
     * @category Object                                                                                                // 5846
     * @sig ((*, String, Object) -> *) -> Object -> Object                                                             // 5847
     * @param {Function} fn                                                                                            // 5848
     * @param {Object} obj                                                                                             // 5849
     * @return {Object}                                                                                                // 5850
     * @see R.map                                                                                                      // 5851
     * @example                                                                                                        // 5852
     *                                                                                                                 // 5853
     *      var values = { x: 1, y: 2, z: 3 };                                                                         // 5854
     *      var prependKeyAndDouble = (num, key, obj) => key + (num * 2);                                              // 5855
     *                                                                                                                 // 5856
     *      R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }                           // 5857
     */                                                                                                                // 5858
    var mapObjIndexed = _curry2(function mapObjIndexed(fn, obj) {                                                      // 5859
        return _reduce(function (acc, key) {                                                                           // 5860
            acc[key] = fn(obj[key], key, obj);                                                                         // 5861
            return acc;                                                                                                // 5862
        }, {}, keys(obj));                                                                                             // 5863
    });                                                                                                                // 5864
                                                                                                                       // 5865
    /**                                                                                                                // 5866
     * Creates a new object with the own properties of the two provided objects. If                                    // 5867
     * a key exists in both objects, the provided function is applied to the values                                    // 5868
     * associated with the key in each object, with the result being used as the                                       // 5869
     * value associated with the key in the returned object. The key will be                                           // 5870
     * excluded from the returned object if the resulting value is `undefined`.                                        // 5871
     *                                                                                                                 // 5872
     * @func                                                                                                           // 5873
     * @memberOf R                                                                                                     // 5874
     * @since 0.19.0                                                                                                   // 5875
     * @category Object                                                                                                // 5876
     * @sig (a -> a -> a) -> {a} -> {a} -> {a}                                                                         // 5877
     * @param {Function} fn                                                                                            // 5878
     * @param {Object} l                                                                                               // 5879
     * @param {Object} r                                                                                               // 5880
     * @return {Object}                                                                                                // 5881
     * @see R.merge, R.mergeWithKey                                                                                    // 5882
     * @example                                                                                                        // 5883
     *                                                                                                                 // 5884
     *      R.mergeWith(R.concat,                                                                                      // 5885
     *                  { a: true, values: [10, 20] },                                                                 // 5886
     *                  { b: true, values: [15, 35] });                                                                // 5887
     *      //=> { a: true, b: true, values: [10, 20, 15, 35] }                                                        // 5888
     */                                                                                                                // 5889
    var mergeWith = _curry3(function mergeWith(fn, l, r) {                                                             // 5890
        return mergeWithKey(function (_, _l, _r) {                                                                     // 5891
            return fn(_l, _r);                                                                                         // 5892
        }, l, r);                                                                                                      // 5893
    });                                                                                                                // 5894
                                                                                                                       // 5895
    /**                                                                                                                // 5896
     * Takes a function `f` and a list of arguments, and returns a function `g`.                                       // 5897
     * When applied, `g` returns the result of applying `f` to the arguments                                           // 5898
     * provided initially followed by the arguments provided to `g`.                                                   // 5899
     *                                                                                                                 // 5900
     * @func                                                                                                           // 5901
     * @memberOf R                                                                                                     // 5902
     * @since v0.10.0                                                                                                  // 5903
     * @category Function                                                                                              // 5904
     * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)                                     // 5905
     * @param {Function} f                                                                                             // 5906
     * @param {Array} args                                                                                             // 5907
     * @return {Function}                                                                                              // 5908
     * @see R.partialRight                                                                                             // 5909
     * @example                                                                                                        // 5910
     *                                                                                                                 // 5911
     *      var multiply = (a, b) => a * b;                                                                            // 5912
     *      var double = R.partial(multiply, [2]);                                                                     // 5913
     *      double(2); //=> 4                                                                                          // 5914
     *                                                                                                                 // 5915
     *      var greet = (salutation, title, firstName, lastName) =>                                                    // 5916
     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';                                      // 5917
     *                                                                                                                 // 5918
     *      var sayHello = R.partial(greet, ['Hello']);                                                                // 5919
     *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);                                                           // 5920
     *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'                                               // 5921
     */                                                                                                                // 5922
    var partial = _createPartialApplicator(_concat);                                                                   // 5923
                                                                                                                       // 5924
    /**                                                                                                                // 5925
     * Takes a function `f` and a list of arguments, and returns a function `g`.                                       // 5926
     * When applied, `g` returns the result of applying `f` to the arguments                                           // 5927
     * provided to `g` followed by the arguments provided initially.                                                   // 5928
     *                                                                                                                 // 5929
     * @func                                                                                                           // 5930
     * @memberOf R                                                                                                     // 5931
     * @since v0.10.0                                                                                                  // 5932
     * @category Function                                                                                              // 5933
     * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)                                     // 5934
     * @param {Function} f                                                                                             // 5935
     * @param {Array} args                                                                                             // 5936
     * @return {Function}                                                                                              // 5937
     * @see R.partial                                                                                                  // 5938
     * @example                                                                                                        // 5939
     *                                                                                                                 // 5940
     *      var greet = (salutation, title, firstName, lastName) =>                                                    // 5941
     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';                                      // 5942
     *                                                                                                                 // 5943
     *      var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);                                    // 5944
     *                                                                                                                 // 5945
     *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'                                                   // 5946
     */                                                                                                                // 5947
    var partialRight = _createPartialApplicator(flip(_concat));                                                        // 5948
                                                                                                                       // 5949
    /**                                                                                                                // 5950
     * Takes a predicate and a list and returns the pair of lists of elements which                                    // 5951
     * do and do not satisfy the predicate, respectively.                                                              // 5952
     *                                                                                                                 // 5953
     * @func                                                                                                           // 5954
     * @memberOf R                                                                                                     // 5955
     * @since v0.1.4                                                                                                   // 5956
     * @category List                                                                                                  // 5957
     * @sig (a -> Boolean) -> [a] -> [[a],[a]]                                                                         // 5958
     * @param {Function} pred A predicate to determine which array the element belongs to.                             // 5959
     * @param {Array} list The array to partition.                                                                     // 5960
     * @return {Array} A nested array, containing first an array of elements that satisfied the predicate,             // 5961
     *         and second an array of elements that did not satisfy.                                                   // 5962
     * @see R.filter, R.reject                                                                                         // 5963
     * @example                                                                                                        // 5964
     *                                                                                                                 // 5965
     *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);                                               // 5966
     *      //=> [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]                                                              // 5967
     */                                                                                                                // 5968
    var partition = _curry2(function partition(pred, list) {                                                           // 5969
        return _reduce(function (acc, elt) {                                                                           // 5970
            var xs = acc[pred(elt) ? 0 : 1];                                                                           // 5971
            xs[xs.length] = elt;                                                                                       // 5972
            return acc;                                                                                                // 5973
        }, [                                                                                                           // 5974
            [],                                                                                                        // 5975
            []                                                                                                         // 5976
        ], list);                                                                                                      // 5977
    });                                                                                                                // 5978
                                                                                                                       // 5979
    /**                                                                                                                // 5980
     * Determines whether a nested path on an object has a specific value, in                                          // 5981
     * `R.equals` terms. Most likely used to filter a list.                                                            // 5982
     *                                                                                                                 // 5983
     * @func                                                                                                           // 5984
     * @memberOf R                                                                                                     // 5985
     * @since v0.7.0                                                                                                   // 5986
     * @category Relation                                                                                              // 5987
     * @sig [String] -> * -> {String: *} -> Boolean                                                                    // 5988
     * @param {Array} path The path of the nested property to use                                                      // 5989
     * @param {*} val The value to compare the nested property with                                                    // 5990
     * @param {Object} obj The object to check the nested property in                                                  // 5991
     * @return {Boolean} `true` if the value equals the nested object property,                                        // 5992
     *         `false` otherwise.                                                                                      // 5993
     * @example                                                                                                        // 5994
     *                                                                                                                 // 5995
     *      var user1 = { address: { zipCode: 90210 } };                                                               // 5996
     *      var user2 = { address: { zipCode: 55555 } };                                                               // 5997
     *      var user3 = { name: 'Bob' };                                                                               // 5998
     *      var users = [ user1, user2, user3 ];                                                                       // 5999
     *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);                                                    // 6000
     *      R.filter(isFamous, users); //=> [ user1 ]                                                                  // 6001
     */                                                                                                                // 6002
    var pathEq = _curry3(function pathEq(_path, val, obj) {                                                            // 6003
        return equals(path(_path, obj), val);                                                                          // 6004
    });                                                                                                                // 6005
                                                                                                                       // 6006
    /**                                                                                                                // 6007
     * Returns a new list by plucking the same named property off all objects in                                       // 6008
     * the list supplied.                                                                                              // 6009
     *                                                                                                                 // 6010
     * @func                                                                                                           // 6011
     * @memberOf R                                                                                                     // 6012
     * @since v0.1.0                                                                                                   // 6013
     * @category List                                                                                                  // 6014
     * @sig k -> [{k: v}] -> [v]                                                                                       // 6015
     * @param {Number|String} key The key name to pluck off of each object.                                            // 6016
     * @param {Array} list The array to consider.                                                                      // 6017
     * @return {Array} The list of values for the given key.                                                           // 6018
     * @see R.props                                                                                                    // 6019
     * @example                                                                                                        // 6020
     *                                                                                                                 // 6021
     *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]                                                                // 6022
     *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]                                                                // 6023
     */                                                                                                                // 6024
    var pluck = _curry2(function pluck(p, list) {                                                                      // 6025
        return map(prop(p), list);                                                                                     // 6026
    });                                                                                                                // 6027
                                                                                                                       // 6028
    /**                                                                                                                // 6029
     * Reasonable analog to SQL `select` statement.                                                                    // 6030
     *                                                                                                                 // 6031
     * @func                                                                                                           // 6032
     * @memberOf R                                                                                                     // 6033
     * @since v0.1.0                                                                                                   // 6034
     * @category Object                                                                                                // 6035
     * @category Relation                                                                                              // 6036
     * @sig [k] -> [{k: v}] -> [{k: v}]                                                                                // 6037
     * @param {Array} props The property names to project                                                              // 6038
     * @param {Array} objs The objects to query                                                                        // 6039
     * @return {Array} An array of objects with just the `props` properties.                                           // 6040
     * @example                                                                                                        // 6041
     *                                                                                                                 // 6042
     *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};                                                // 6043
     *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};                                               // 6044
     *      var kids = [abby, fred];                                                                                   // 6045
     *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]              // 6046
     */                                                                                                                // 6047
    // passing `identity` gives correct arity                                                                          // 6048
    var project = useWith(_map, [                                                                                      // 6049
        pickAll,                                                                                                       // 6050
        identity                                                                                                       // 6051
    ]);                                                                                                                // 6052
                                                                                                                       // 6053
    /**                                                                                                                // 6054
     * Returns `true` if the specified object property is equal, in `R.equals`                                         // 6055
     * terms, to the given value; `false` otherwise.                                                                   // 6056
     *                                                                                                                 // 6057
     * @func                                                                                                           // 6058
     * @memberOf R                                                                                                     // 6059
     * @since v0.1.0                                                                                                   // 6060
     * @category Relation                                                                                              // 6061
     * @sig String -> a -> Object -> Boolean                                                                           // 6062
     * @param {String} name                                                                                            // 6063
     * @param {*} val                                                                                                  // 6064
     * @param {*} obj                                                                                                  // 6065
     * @return {Boolean}                                                                                               // 6066
     * @see R.equals, R.propSatisfies                                                                                  // 6067
     * @example                                                                                                        // 6068
     *                                                                                                                 // 6069
     *      var abby = {name: 'Abby', age: 7, hair: 'blond'};                                                          // 6070
     *      var fred = {name: 'Fred', age: 12, hair: 'brown'};                                                         // 6071
     *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};                                                       // 6072
     *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};                                                // 6073
     *      var kids = [abby, fred, rusty, alois];                                                                     // 6074
     *      var hasBrownHair = R.propEq('hair', 'brown');                                                              // 6075
     *      R.filter(hasBrownHair, kids); //=> [fred, rusty]                                                           // 6076
     */                                                                                                                // 6077
    var propEq = _curry3(function propEq(name, val, obj) {                                                             // 6078
        return propSatisfies(equals(val), name, obj);                                                                  // 6079
    });                                                                                                                // 6080
                                                                                                                       // 6081
    /**                                                                                                                // 6082
     * Returns `true` if the specified object property is of the given type;                                           // 6083
     * `false` otherwise.                                                                                              // 6084
     *                                                                                                                 // 6085
     * @func                                                                                                           // 6086
     * @memberOf R                                                                                                     // 6087
     * @since v0.16.0                                                                                                  // 6088
     * @category Type                                                                                                  // 6089
     * @sig Type -> String -> Object -> Boolean                                                                        // 6090
     * @param {Function} type                                                                                          // 6091
     * @param {String} name                                                                                            // 6092
     * @param {*} obj                                                                                                  // 6093
     * @return {Boolean}                                                                                               // 6094
     * @see R.is, R.propSatisfies                                                                                      // 6095
     * @example                                                                                                        // 6096
     *                                                                                                                 // 6097
     *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true                                                            // 6098
     *      R.propIs(Number, 'x', {x: 'foo'});    //=> false                                                           // 6099
     *      R.propIs(Number, 'x', {});            //=> false                                                           // 6100
     */                                                                                                                // 6101
    var propIs = _curry3(function propIs(type, name, obj) {                                                            // 6102
        return propSatisfies(is(type), name, obj);                                                                     // 6103
    });                                                                                                                // 6104
                                                                                                                       // 6105
    /**                                                                                                                // 6106
     * Returns a single item by iterating through the list, successively calling                                       // 6107
     * the iterator function and passing it an accumulator value and the current                                       // 6108
     * value from the array, and then passing the result to the next call.                                             // 6109
     *                                                                                                                 // 6110
     * The iterator function receives two values: *(acc, value)*. It may use                                           // 6111
     * `R.reduced` to shortcut the iteration.                                                                          // 6112
     *                                                                                                                 // 6113
     * Note: `R.reduce` does not skip deleted or unassigned indices (sparse                                            // 6114
     * arrays), unlike the native `Array.prototype.reduce` method. For more details                                    // 6115
     * on this behavior, see:                                                                                          // 6116
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description       // 6117
     *                                                                                                                 // 6118
     * Dispatches to the `reduce` method of the third argument, if present.                                            // 6119
     *                                                                                                                 // 6120
     * @func                                                                                                           // 6121
     * @memberOf R                                                                                                     // 6122
     * @since v0.1.0                                                                                                   // 6123
     * @category List                                                                                                  // 6124
     * @sig ((a, b) -> a) -> a -> [b] -> a                                                                             // 6125
     * @param {Function} fn The iterator function. Receives two values, the accumulator and the                        // 6126
     *        current element from the array.                                                                          // 6127
     * @param {*} acc The accumulator value.                                                                           // 6128
     * @param {Array} list The list to iterate over.                                                                   // 6129
     * @return {*} The final, accumulated value.                                                                       // 6130
     * @see R.reduced, R.addIndex                                                                                      // 6131
     * @example                                                                                                        // 6132
     *                                                                                                                 // 6133
     *      var numbers = [1, 2, 3];                                                                                   // 6134
     *      var add = (a, b) => a + b;                                                                                 // 6135
     *                                                                                                                 // 6136
     *      R.reduce(add, 10, numbers); //=> 16                                                                        // 6137
     */                                                                                                                // 6138
    var reduce = _curry3(_reduce);                                                                                     // 6139
                                                                                                                       // 6140
    /**                                                                                                                // 6141
     * The complement of `filter`.                                                                                     // 6142
     *                                                                                                                 // 6143
     * Acts as a transducer if a transformer is given in list position.                                                // 6144
     *                                                                                                                 // 6145
     * @func                                                                                                           // 6146
     * @memberOf R                                                                                                     // 6147
     * @since v0.1.0                                                                                                   // 6148
     * @category List                                                                                                  // 6149
     * @sig Filterable f => (a -> Boolean) -> f a -> f a                                                               // 6150
     * @param {Function} pred                                                                                          // 6151
     * @param {Array} filterable                                                                                       // 6152
     * @return {Array}                                                                                                 // 6153
     * @see R.filter, R.transduce, R.addIndex                                                                          // 6154
     * @example                                                                                                        // 6155
     *                                                                                                                 // 6156
     *      var isOdd = (n) => n % 2 === 1;                                                                            // 6157
     *                                                                                                                 // 6158
     *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]                                                                 // 6159
     *                                                                                                                 // 6160
     *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}                                               // 6161
     */                                                                                                                // 6162
    var reject = _curry2(function reject(pred, filterable) {                                                           // 6163
        return filter(_complement(pred), filterable);                                                                  // 6164
    });                                                                                                                // 6165
                                                                                                                       // 6166
    /**                                                                                                                // 6167
     * Returns a fixed list of size `n` containing a specified identical value.                                        // 6168
     *                                                                                                                 // 6169
     * @func                                                                                                           // 6170
     * @memberOf R                                                                                                     // 6171
     * @since v0.1.1                                                                                                   // 6172
     * @category List                                                                                                  // 6173
     * @sig a -> n -> [a]                                                                                              // 6174
     * @param {*} value The value to repeat.                                                                           // 6175
     * @param {Number} n The desired size of the output list.                                                          // 6176
     * @return {Array} A new array containing `n` `value`s.                                                            // 6177
     * @example                                                                                                        // 6178
     *                                                                                                                 // 6179
     *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']                                                     // 6180
     *                                                                                                                 // 6181
     *      var obj = {};                                                                                              // 6182
     *      var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]                                             // 6183
     *      repeatedObjs[0] === repeatedObjs[1]; //=> true                                                             // 6184
     */                                                                                                                // 6185
    var repeat = _curry2(function repeat(value, n) {                                                                   // 6186
        return times(always(value), n);                                                                                // 6187
    });                                                                                                                // 6188
                                                                                                                       // 6189
    /**                                                                                                                // 6190
     * Adds together all the elements of a list.                                                                       // 6191
     *                                                                                                                 // 6192
     * @func                                                                                                           // 6193
     * @memberOf R                                                                                                     // 6194
     * @since v0.1.0                                                                                                   // 6195
     * @category Math                                                                                                  // 6196
     * @sig [Number] -> Number                                                                                         // 6197
     * @param {Array} list An array of numbers                                                                         // 6198
     * @return {Number} The sum of all the numbers in the list.                                                        // 6199
     * @see R.reduce                                                                                                   // 6200
     * @example                                                                                                        // 6201
     *                                                                                                                 // 6202
     *      R.sum([2,4,6,8,100,1]); //=> 121                                                                           // 6203
     */                                                                                                                // 6204
    var sum = reduce(add, 0);                                                                                          // 6205
                                                                                                                       // 6206
    /**                                                                                                                // 6207
     * Returns a new list containing the last `n` elements of the given list.                                          // 6208
     * If `n > list.length`, returns a list of `list.length` elements.                                                 // 6209
     *                                                                                                                 // 6210
     * @func                                                                                                           // 6211
     * @memberOf R                                                                                                     // 6212
     * @since v0.16.0                                                                                                  // 6213
     * @category List                                                                                                  // 6214
     * @sig Number -> [a] -> [a]                                                                                       // 6215
     * @sig Number -> String -> String                                                                                 // 6216
     * @param {Number} n The number of elements to return.                                                             // 6217
     * @param {Array} xs The collection to consider.                                                                   // 6218
     * @return {Array}                                                                                                 // 6219
     * @see R.dropLast                                                                                                 // 6220
     * @example                                                                                                        // 6221
     *                                                                                                                 // 6222
     *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']                                                         // 6223
     *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']                                                  // 6224
     *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']                                           // 6225
     *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']                                           // 6226
     *      R.takeLast(3, 'ramda');               //=> 'mda'                                                           // 6227
     */                                                                                                                // 6228
    var takeLast = _curry2(function takeLast(n, xs) {                                                                  // 6229
        return drop(n >= 0 ? xs.length - n : 0, xs);                                                                   // 6230
    });                                                                                                                // 6231
                                                                                                                       // 6232
    /**                                                                                                                // 6233
     * Initializes a transducer using supplied iterator function. Returns a single                                     // 6234
     * item by iterating through the list, successively calling the transformed                                        // 6235
     * iterator function and passing it an accumulator value and the current value                                     // 6236
     * from the array, and then passing the result to the next call.                                                   // 6237
     *                                                                                                                 // 6238
     * The iterator function receives two values: *(acc, value)*. It will be                                           // 6239
     * wrapped as a transformer to initialize the transducer. A transformer can be                                     // 6240
     * passed directly in place of an iterator function. In both cases, iteration                                      // 6241
     * may be stopped early with the `R.reduced` function.                                                             // 6242
     *                                                                                                                 // 6243
     * A transducer is a function that accepts a transformer and returns a                                             // 6244
     * transformer and can be composed directly.                                                                       // 6245
     *                                                                                                                 // 6246
     * A transformer is an an object that provides a 2-arity reducing iterator                                         // 6247
     * function, step, 0-arity initial value function, init, and 1-arity result                                        // 6248
     * extraction function, result. The step function is used as the iterator                                          // 6249
     * function in reduce. The result function is used to convert the final                                            // 6250
     * accumulator into the return type and in most cases is R.identity. The init                                      // 6251
     * function can be used to provide an initial accumulator, but is ignored by                                       // 6252
     * transduce.                                                                                                      // 6253
     *                                                                                                                 // 6254
     * The iteration is performed with R.reduce after initializing the transducer.                                     // 6255
     *                                                                                                                 // 6256
     * @func                                                                                                           // 6257
     * @memberOf R                                                                                                     // 6258
     * @since v0.12.0                                                                                                  // 6259
     * @category List                                                                                                  // 6260
     * @sig (c -> c) -> (a,b -> a) -> a -> [b] -> a                                                                    // 6261
     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.                 // 6262
     * @param {Function} fn The iterator function. Receives two values, the accumulator and the                        // 6263
     *        current element from the array. Wrapped as transformer, if necessary, and used to                        // 6264
     *        initialize the transducer                                                                                // 6265
     * @param {*} acc The initial accumulator value.                                                                   // 6266
     * @param {Array} list The list to iterate over.                                                                   // 6267
     * @return {*} The final, accumulated value.                                                                       // 6268
     * @see R.reduce, R.reduced, R.into                                                                                // 6269
     * @example                                                                                                        // 6270
     *                                                                                                                 // 6271
     *      var numbers = [1, 2, 3, 4];                                                                                // 6272
     *      var transducer = R.compose(R.map(R.add(1)), R.take(2));                                                    // 6273
     *                                                                                                                 // 6274
     *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]                                        // 6275
     */                                                                                                                // 6276
    var transduce = curryN(4, function transduce(xf, fn, acc, list) {                                                  // 6277
        return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);                                     // 6278
    });                                                                                                                // 6279
                                                                                                                       // 6280
    /**                                                                                                                // 6281
     * Combines two lists into a set (i.e. no duplicates) composed of the elements                                     // 6282
     * of each list. Duplication is determined according to the value returned by                                      // 6283
     * applying the supplied predicate to two list elements.                                                           // 6284
     *                                                                                                                 // 6285
     * @func                                                                                                           // 6286
     * @memberOf R                                                                                                     // 6287
     * @since v0.1.0                                                                                                   // 6288
     * @category Relation                                                                                              // 6289
     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]                                                                   // 6290
     * @param {Function} pred A predicate used to test whether two items are equal.                                    // 6291
     * @param {Array} list1 The first list.                                                                            // 6292
     * @param {Array} list2 The second list.                                                                           // 6293
     * @return {Array} The first and second lists concatenated, with                                                   // 6294
     *         duplicates removed.                                                                                     // 6295
     * @see R.union                                                                                                    // 6296
     * @example                                                                                                        // 6297
     *                                                                                                                 // 6298
     *      var l1 = [{a: 1}, {a: 2}];                                                                                 // 6299
     *      var l2 = [{a: 1}, {a: 4}];                                                                                 // 6300
     *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]                                    // 6301
     */                                                                                                                // 6302
    var unionWith = _curry3(function unionWith(pred, list1, list2) {                                                   // 6303
        return uniqWith(pred, _concat(list1, list2));                                                                  // 6304
    });                                                                                                                // 6305
                                                                                                                       // 6306
    /**                                                                                                                // 6307
     * Takes a spec object and a test object; returns true if the test satisfies                                       // 6308
     * the spec, false otherwise. An object satisfies the spec if, for each of the                                     // 6309
     * spec's own properties, accessing that property of the object gives the same                                     // 6310
     * value (in `R.equals` terms) as accessing that property of the spec.                                             // 6311
     *                                                                                                                 // 6312
     * `whereEq` is a specialization of [`where`](#where).                                                             // 6313
     *                                                                                                                 // 6314
     * @func                                                                                                           // 6315
     * @memberOf R                                                                                                     // 6316
     * @since v0.14.0                                                                                                  // 6317
     * @category Object                                                                                                // 6318
     * @sig {String: *} -> {String: *} -> Boolean                                                                      // 6319
     * @param {Object} spec                                                                                            // 6320
     * @param {Object} testObj                                                                                         // 6321
     * @return {Boolean}                                                                                               // 6322
     * @see R.where                                                                                                    // 6323
     * @example                                                                                                        // 6324
     *                                                                                                                 // 6325
     *      // pred :: Object -> Boolean                                                                               // 6326
     *      var pred = R.whereEq({a: 1, b: 2});                                                                        // 6327
     *                                                                                                                 // 6328
     *      pred({a: 1});              //=> false                                                                      // 6329
     *      pred({a: 1, b: 2});        //=> true                                                                       // 6330
     *      pred({a: 1, b: 2, c: 3});  //=> true                                                                       // 6331
     *      pred({a: 1, b: 1});        //=> false                                                                      // 6332
     */                                                                                                                // 6333
    var whereEq = _curry2(function whereEq(spec, testObj) {                                                            // 6334
        return where(map(equals, spec), testObj);                                                                      // 6335
    });                                                                                                                // 6336
                                                                                                                       // 6337
    var _flatCat = function () {                                                                                       // 6338
        var preservingReduced = function (xf) {                                                                        // 6339
            return {                                                                                                   // 6340
                '@@transducer/init': _xfBase.init,                                                                     // 6341
                '@@transducer/result': function (result) {                                                             // 6342
                    return xf['@@transducer/result'](result);                                                          // 6343
                },                                                                                                     // 6344
                '@@transducer/step': function (result, input) {                                                        // 6345
                    var ret = xf['@@transducer/step'](result, input);                                                  // 6346
                    return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;                                     // 6347
                }                                                                                                      // 6348
            };                                                                                                         // 6349
        };                                                                                                             // 6350
        return function _xcat(xf) {                                                                                    // 6351
            var rxf = preservingReduced(xf);                                                                           // 6352
            return {                                                                                                   // 6353
                '@@transducer/init': _xfBase.init,                                                                     // 6354
                '@@transducer/result': function (result) {                                                             // 6355
                    return rxf['@@transducer/result'](result);                                                         // 6356
                },                                                                                                     // 6357
                '@@transducer/step': function (result, input) {                                                        // 6358
                    return !isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);          // 6359
                }                                                                                                      // 6360
            };                                                                                                         // 6361
        };                                                                                                             // 6362
    }();                                                                                                               // 6363
                                                                                                                       // 6364
    // Array.prototype.indexOf doesn't exist below IE9                                                                 // 6365
    // manually crawl the list to distinguish between +0 and -0                                                        // 6366
    // NaN                                                                                                             // 6367
    // non-zero numbers can utilise Set                                                                                // 6368
    // all these types can utilise Set                                                                                 // 6369
    // null can utilise Set                                                                                            // 6370
    // anything else not covered above, defer to R.equals                                                              // 6371
    var _indexOf = function _indexOf(list, a, idx) {                                                                   // 6372
        var inf, item;                                                                                                 // 6373
        // Array.prototype.indexOf doesn't exist below IE9                                                             // 6374
        if (typeof list.indexOf === 'function') {                                                                      // 6375
            switch (typeof a) {                                                                                        // 6376
            case 'number':                                                                                             // 6377
                if (a === 0) {                                                                                         // 6378
                    // manually crawl the list to distinguish between +0 and -0                                        // 6379
                    inf = 1 / a;                                                                                       // 6380
                    while (idx < list.length) {                                                                        // 6381
                        item = list[idx];                                                                              // 6382
                        if (item === 0 && 1 / item === inf) {                                                          // 6383
                            return idx;                                                                                // 6384
                        }                                                                                              // 6385
                        idx += 1;                                                                                      // 6386
                    }                                                                                                  // 6387
                    return -1;                                                                                         // 6388
                } else if (a !== a) {                                                                                  // 6389
                    // NaN                                                                                             // 6390
                    while (idx < list.length) {                                                                        // 6391
                        item = list[idx];                                                                              // 6392
                        if (typeof item === 'number' && item !== item) {                                               // 6393
                            return idx;                                                                                // 6394
                        }                                                                                              // 6395
                        idx += 1;                                                                                      // 6396
                    }                                                                                                  // 6397
                    return -1;                                                                                         // 6398
                }                                                                                                      // 6399
                // non-zero numbers can utilise Set                                                                    // 6400
                return list.indexOf(a, idx);                                                                           // 6401
            // all these types can utilise Set                                                                         // 6402
            case 'string':                                                                                             // 6403
            case 'boolean':                                                                                            // 6404
            case 'function':                                                                                           // 6405
            case 'undefined':                                                                                          // 6406
                return list.indexOf(a, idx);                                                                           // 6407
            case 'object':                                                                                             // 6408
                if (a === null) {                                                                                      // 6409
                    // null can utilise Set                                                                            // 6410
                    return list.indexOf(a, idx);                                                                       // 6411
                }                                                                                                      // 6412
            }                                                                                                          // 6413
        }                                                                                                              // 6414
        // anything else not covered above, defer to R.equals                                                          // 6415
        while (idx < list.length) {                                                                                    // 6416
            if (equals(list[idx], a)) {                                                                                // 6417
                return idx;                                                                                            // 6418
            }                                                                                                          // 6419
            idx += 1;                                                                                                  // 6420
        }                                                                                                              // 6421
        return -1;                                                                                                     // 6422
    };                                                                                                                 // 6423
                                                                                                                       // 6424
    var _xchain = _curry2(function _xchain(f, xf) {                                                                    // 6425
        return map(f, _flatCat(xf));                                                                                   // 6426
    });                                                                                                                // 6427
                                                                                                                       // 6428
    /**                                                                                                                // 6429
     * Takes a list of predicates and returns a predicate that returns true for a                                      // 6430
     * given list of arguments if every one of the provided predicates is satisfied                                    // 6431
     * by those arguments.                                                                                             // 6432
     *                                                                                                                 // 6433
     * The function returned is a curried function whose arity matches that of the                                     // 6434
     * highest-arity predicate.                                                                                        // 6435
     *                                                                                                                 // 6436
     * @func                                                                                                           // 6437
     * @memberOf R                                                                                                     // 6438
     * @since v0.9.0                                                                                                   // 6439
     * @category Logic                                                                                                 // 6440
     * @sig [(*... -> Boolean)] -> (*... -> Boolean)                                                                   // 6441
     * @param {Array} preds                                                                                            // 6442
     * @return {Function}                                                                                              // 6443
     * @see R.anyPass                                                                                                  // 6444
     * @example                                                                                                        // 6445
     *                                                                                                                 // 6446
     *      var isQueen = R.propEq('rank', 'Q');                                                                       // 6447
     *      var isSpade = R.propEq('suit', '♠︎');                                                                      // 6448
     *      var isQueenOfSpades = R.allPass([isQueen, isSpade]);                                                       // 6449
     *                                                                                                                 // 6450
     *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false                                                       // 6451
     *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true                                                        // 6452
     */                                                                                                                // 6453
    var allPass = _curry1(function allPass(preds) {                                                                    // 6454
        return curryN(reduce(max, 0, pluck('length', preds)), function () {                                            // 6455
            var idx = 0;                                                                                               // 6456
            var len = preds.length;                                                                                    // 6457
            while (idx < len) {                                                                                        // 6458
                if (!preds[idx].apply(this, arguments)) {                                                              // 6459
                    return false;                                                                                      // 6460
                }                                                                                                      // 6461
                idx += 1;                                                                                              // 6462
            }                                                                                                          // 6463
            return true;                                                                                               // 6464
        });                                                                                                            // 6465
    });                                                                                                                // 6466
                                                                                                                       // 6467
    /**                                                                                                                // 6468
     * Returns `true` if all elements are unique, in `R.equals` terms, otherwise                                       // 6469
     * `false`.                                                                                                        // 6470
     *                                                                                                                 // 6471
     * @func                                                                                                           // 6472
     * @memberOf R                                                                                                     // 6473
     * @since v0.18.0                                                                                                  // 6474
     * @category List                                                                                                  // 6475
     * @sig [a] -> Boolean                                                                                             // 6476
     * @param {Array} list The array to consider.                                                                      // 6477
     * @return {Boolean} `true` if all elements are unique, else `false`.                                              // 6478
     * @example                                                                                                        // 6479
     *                                                                                                                 // 6480
     *      R.allUniq(['1', 1]); //=> true                                                                             // 6481
     *      R.allUniq([1, 1]);   //=> false                                                                            // 6482
     *      R.allUniq([[42], [42]]); //=> false                                                                        // 6483
     */                                                                                                                // 6484
    var allUniq = _curry1(function allUniq(list) {                                                                     // 6485
        var len = list.length;                                                                                         // 6486
        var idx = 0;                                                                                                   // 6487
        while (idx < len) {                                                                                            // 6488
            if (_indexOf(list, list[idx], idx + 1) >= 0) {                                                             // 6489
                return false;                                                                                          // 6490
            }                                                                                                          // 6491
            idx += 1;                                                                                                  // 6492
        }                                                                                                              // 6493
        return true;                                                                                                   // 6494
    });                                                                                                                // 6495
                                                                                                                       // 6496
    /**                                                                                                                // 6497
     * Takes a list of predicates and returns a predicate that returns true for a                                      // 6498
     * given list of arguments if at least one of the provided predicates is                                           // 6499
     * satisfied by those arguments.                                                                                   // 6500
     *                                                                                                                 // 6501
     * The function returned is a curried function whose arity matches that of the                                     // 6502
     * highest-arity predicate.                                                                                        // 6503
     *                                                                                                                 // 6504
     * @func                                                                                                           // 6505
     * @memberOf R                                                                                                     // 6506
     * @since v0.9.0                                                                                                   // 6507
     * @category Logic                                                                                                 // 6508
     * @sig [(*... -> Boolean)] -> (*... -> Boolean)                                                                   // 6509
     * @param {Array} preds                                                                                            // 6510
     * @return {Function}                                                                                              // 6511
     * @see R.allPass                                                                                                  // 6512
     * @example                                                                                                        // 6513
     *                                                                                                                 // 6514
     *      var gte = R.anyPass([R.gt, R.equals]);                                                                     // 6515
     *                                                                                                                 // 6516
     *      gte(3, 2); //=> true                                                                                       // 6517
     *      gte(2, 2); //=> true                                                                                       // 6518
     *      gte(2, 3); //=> false                                                                                      // 6519
     */                                                                                                                // 6520
    var anyPass = _curry1(function anyPass(preds) {                                                                    // 6521
        return curryN(reduce(max, 0, pluck('length', preds)), function () {                                            // 6522
            var idx = 0;                                                                                               // 6523
            var len = preds.length;                                                                                    // 6524
            while (idx < len) {                                                                                        // 6525
                if (preds[idx].apply(this, arguments)) {                                                               // 6526
                    return true;                                                                                       // 6527
                }                                                                                                      // 6528
                idx += 1;                                                                                              // 6529
            }                                                                                                          // 6530
            return false;                                                                                              // 6531
        });                                                                                                            // 6532
    });                                                                                                                // 6533
                                                                                                                       // 6534
    /**                                                                                                                // 6535
     * ap applies a list of functions to a list of values.                                                             // 6536
     *                                                                                                                 // 6537
     * Dispatches to the `ap` method of the second argument, if present. Also                                          // 6538
     * treats functions as applicatives.                                                                               // 6539
     *                                                                                                                 // 6540
     * @func                                                                                                           // 6541
     * @memberOf R                                                                                                     // 6542
     * @since v0.3.0                                                                                                   // 6543
     * @category Function                                                                                              // 6544
     * @sig [f] -> [a] -> [f a]                                                                                        // 6545
     * @param {Array} fns An array of functions                                                                        // 6546
     * @param {Array} vs An array of values                                                                            // 6547
     * @return {Array} An array of results of applying each of `fns` to all of `vs` in turn.                           // 6548
     * @example                                                                                                        // 6549
     *                                                                                                                 // 6550
     *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]                                          // 6551
     */                                                                                                                // 6552
    // else                                                                                                            // 6553
    var ap = _curry2(function ap(applicative, fn) {                                                                    // 6554
        return typeof applicative.ap === 'function' ? applicative.ap(fn) : typeof applicative === 'function' ? curryN(Math.max(applicative.length, fn.length), function () {
            return applicative.apply(this, arguments)(fn.apply(this, arguments));                                      // 6556
        }) : // else                                                                                                   // 6557
        _reduce(function (acc, f) {                                                                                    // 6558
            return _concat(acc, map(f, fn));                                                                           // 6559
        }, [], applicative);                                                                                           // 6560
    });                                                                                                                // 6561
                                                                                                                       // 6562
    /**                                                                                                                // 6563
     * Returns the result of calling its first argument with the remaining                                             // 6564
     * arguments. This is occasionally useful as a converging function for                                             // 6565
     * `R.converge`: the left branch can produce a function while the right branch                                     // 6566
     * produces a value to be passed to that function as an argument.                                                  // 6567
     *                                                                                                                 // 6568
     * @func                                                                                                           // 6569
     * @memberOf R                                                                                                     // 6570
     * @since v0.9.0                                                                                                   // 6571
     * @category Function                                                                                              // 6572
     * @sig (*... -> a),*... -> a                                                                                      // 6573
     * @param {Function} fn The function to apply to the remaining arguments.                                          // 6574
     * @param {...*} args Any number of positional arguments.                                                          // 6575
     * @return {*}                                                                                                     // 6576
     * @see R.apply                                                                                                    // 6577
     * @example                                                                                                        // 6578
     *                                                                                                                 // 6579
     *      var indentN = R.pipe(R.times(R.always(' ')),                                                               // 6580
     *                           R.join(''),                                                                           // 6581
     *                           R.replace(/^(?!$)/gm));                                                               // 6582
     *                                                                                                                 // 6583
     *      var format = R.converge(R.call, [                                                                          // 6584
     *                                  R.pipe(R.prop('indent'), indentN),                                             // 6585
     *                                  R.prop('value')                                                                // 6586
     *                              ]);                                                                                // 6587
     *                                                                                                                 // 6588
     *      format({indent: 2, value: 'foo\nbar\nbaz\n'}); //=> '  foo\n  bar\n  baz\n'                                // 6589
     */                                                                                                                // 6590
    var call = curry(function call(fn) {                                                                               // 6591
        return fn.apply(this, _slice(arguments, 1));                                                                   // 6592
    });                                                                                                                // 6593
                                                                                                                       // 6594
    /**                                                                                                                // 6595
     * `chain` maps a function over a list and concatenates the results. `chain`                                       // 6596
     * is also known as `flatMap` in some libraries                                                                    // 6597
     *                                                                                                                 // 6598
     * Dispatches to the `chain` method of the second argument, if present.                                            // 6599
     *                                                                                                                 // 6600
     * @func                                                                                                           // 6601
     * @memberOf R                                                                                                     // 6602
     * @since v0.3.0                                                                                                   // 6603
     * @category List                                                                                                  // 6604
     * @sig (a -> [b]) -> [a] -> [b]                                                                                   // 6605
     * @param {Function} fn                                                                                            // 6606
     * @param {Array} list                                                                                             // 6607
     * @return {Array}                                                                                                 // 6608
     * @example                                                                                                        // 6609
     *                                                                                                                 // 6610
     *      var duplicate = n => [n, n];                                                                               // 6611
     *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]                                                     // 6612
     */                                                                                                                // 6613
    var chain = _curry2(_dispatchable('chain', _xchain, function chain(fn, monad) {                                    // 6614
        if (typeof monad === 'function') {                                                                             // 6615
            return function () {                                                                                       // 6616
                return monad.call(this, fn.apply(this, arguments)).apply(this, arguments);                             // 6617
            };                                                                                                         // 6618
        }                                                                                                              // 6619
        return _makeFlat(false)(map(fn, monad));                                                                       // 6620
    }));                                                                                                               // 6621
                                                                                                                       // 6622
    /**                                                                                                                // 6623
     * Turns a list of Functors into a Functor of a list, applying a mapping                                           // 6624
     * function to the elements of the list along the way.                                                             // 6625
     *                                                                                                                 // 6626
     * @func                                                                                                           // 6627
     * @memberOf R                                                                                                     // 6628
     * @since v0.8.0                                                                                                   // 6629
     * @category List                                                                                                  // 6630
     * @sig Functor f => (a -> f b) -> (x -> f x) -> [a] -> f [b]                                                      // 6631
     * @param {Function} fn The transformation function                                                                // 6632
     * @param {Function} of A function that returns the data type to return                                            // 6633
     * @param {Array} list An array of functors of the same type                                                       // 6634
     * @return {*}                                                                                                     // 6635
     * @see R.traverse                                                                                                 // 6636
     * @deprecated since v0.19.0                                                                                       // 6637
     * @example                                                                                                        // 6638
     *                                                                                                                 // 6639
     *      var add10 = R.map(R.add(10));                                                                              // 6640
     *      R.commuteMap(add10, R.of, [[1], [2, 3]]);   //=> [[11, 12], [11, 13]]                                      // 6641
     *      R.commuteMap(add10, R.of, [[1, 2], [3]]);   //=> [[11, 13], [12, 13]]                                      // 6642
     *      R.commuteMap(add10, R.of, [[1], [2], [3]]); //=> [[11, 12, 13]]                                            // 6643
     *      R.commuteMap(add10, Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([11, 12, 13])                      // 6644
     *      R.commuteMap(add10, Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()                               // 6645
     *                                                                                                                 // 6646
     *      var fetch = url => Future((rej, res) => http.get(url, res).on('error', rej));                              // 6647
     *      R.commuteMap(fetch, Future.of, [                                                                           // 6648
     *        'http://ramdajs.com',                                                                                    // 6649
     *        'http://github.com/ramda'                                                                                // 6650
     *      ]); //=> Future([IncomingMessage, IncomingMessage])                                                        // 6651
     */                                                                                                                // 6652
    var commuteMap = _curry3(function commuteMap(fn, of, list) {                                                       // 6653
        function consF(acc, x) {                                                                                       // 6654
            return ap(map(prepend, fn(x)), acc);                                                                       // 6655
        }                                                                                                              // 6656
        return reduceRight(consF, of([]), list);                                                                       // 6657
    });                                                                                                                // 6658
                                                                                                                       // 6659
    /**                                                                                                                // 6660
     * Wraps a constructor function inside a curried function that can be called                                       // 6661
     * with the same arguments and returns the same type. The arity of the function                                    // 6662
     * returned is specified to allow using variadic constructor functions.                                            // 6663
     *                                                                                                                 // 6664
     * @func                                                                                                           // 6665
     * @memberOf R                                                                                                     // 6666
     * @since v0.4.0                                                                                                   // 6667
     * @category Function                                                                                              // 6668
     * @sig Number -> (* -> {*}) -> (* -> {*})                                                                         // 6669
     * @param {Number} n The arity of the constructor function.                                                        // 6670
     * @param {Function} Fn The constructor function to wrap.                                                          // 6671
     * @return {Function} A wrapped, curried constructor function.                                                     // 6672
     * @example                                                                                                        // 6673
     *                                                                                                                 // 6674
     *      // Variadic constructor function                                                                           // 6675
     *      var Widget = () => {                                                                                       // 6676
     *        this.children = Array.prototype.slice.call(arguments);                                                   // 6677
     *        // ...                                                                                                   // 6678
     *      };                                                                                                         // 6679
     *      Widget.prototype = {                                                                                       // 6680
     *        // ...                                                                                                   // 6681
     *      };                                                                                                         // 6682
     *      var allConfigs = [                                                                                         // 6683
     *        // ...                                                                                                   // 6684
     *      ];                                                                                                         // 6685
     *      R.map(R.constructN(1, Widget), allConfigs); // a list of Widgets                                           // 6686
     */                                                                                                                // 6687
    var constructN = _curry2(function constructN(n, Fn) {                                                              // 6688
        if (n > 10) {                                                                                                  // 6689
            throw new Error('Constructor with greater than ten arguments');                                            // 6690
        }                                                                                                              // 6691
        if (n === 0) {                                                                                                 // 6692
            return function () {                                                                                       // 6693
                return new Fn();                                                                                       // 6694
            };                                                                                                         // 6695
        }                                                                                                              // 6696
        return curry(nAry(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {                                       // 6697
            switch (arguments.length) {                                                                                // 6698
            case 1:                                                                                                    // 6699
                return new Fn($0);                                                                                     // 6700
            case 2:                                                                                                    // 6701
                return new Fn($0, $1);                                                                                 // 6702
            case 3:                                                                                                    // 6703
                return new Fn($0, $1, $2);                                                                             // 6704
            case 4:                                                                                                    // 6705
                return new Fn($0, $1, $2, $3);                                                                         // 6706
            case 5:                                                                                                    // 6707
                return new Fn($0, $1, $2, $3, $4);                                                                     // 6708
            case 6:                                                                                                    // 6709
                return new Fn($0, $1, $2, $3, $4, $5);                                                                 // 6710
            case 7:                                                                                                    // 6711
                return new Fn($0, $1, $2, $3, $4, $5, $6);                                                             // 6712
            case 8:                                                                                                    // 6713
                return new Fn($0, $1, $2, $3, $4, $5, $6, $7);                                                         // 6714
            case 9:                                                                                                    // 6715
                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);                                                     // 6716
            case 10:                                                                                                   // 6717
                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);                                                 // 6718
            }                                                                                                          // 6719
        }));                                                                                                           // 6720
    });                                                                                                                // 6721
                                                                                                                       // 6722
    /**                                                                                                                // 6723
     * Accepts a converging function and a list of branching functions and returns                                     // 6724
     * a new function. When invoked, this new function is applied to some                                              // 6725
     * arguments, each branching function is applied to those same arguments. The                                      // 6726
     * results of each branching function are passed as arguments to the converging                                    // 6727
     * function to produce the return value.                                                                           // 6728
     *                                                                                                                 // 6729
     * @func                                                                                                           // 6730
     * @memberOf R                                                                                                     // 6731
     * @since v0.4.2                                                                                                   // 6732
     * @category Function                                                                                              // 6733
     * @sig (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)      // 6734
     * @param {Function} after A function. `after` will be invoked with the return values of                           // 6735
     *        `fn1` and `fn2` as its arguments.                                                                        // 6736
     * @param {Array} functions A list of functions.                                                                   // 6737
     * @return {Function} A new function.                                                                              // 6738
     * @example                                                                                                        // 6739
     *                                                                                                                 // 6740
     *      var add = (a, b) => a + b;                                                                                 // 6741
     *      var multiply = (a, b) => a * b;                                                                            // 6742
     *      var subtract = (a, b) => a - b;                                                                            // 6743
     *                                                                                                                 // 6744
     *      //≅ multiply( add(1, 2), subtract(1, 2) );                                                                 // 6745
     *      R.converge(multiply, [add, subtract])(1, 2); //=> -3                                                       // 6746
     *                                                                                                                 // 6747
     *      var add3 = (a, b, c) => a + b + c;                                                                         // 6748
     *      R.converge(add3, [multiply, add, subtract])(1, 2); //=> 4                                                  // 6749
     */                                                                                                                // 6750
    var converge = _curry2(function converge(after, fns) {                                                             // 6751
        return curryN(Math.max.apply(Math, pluck('length', fns)), function () {                                        // 6752
            var args = arguments;                                                                                      // 6753
            var context = this;                                                                                        // 6754
            return after.apply(context, _map(function (fn) {                                                           // 6755
                return fn.apply(context, args);                                                                        // 6756
            }, fns));                                                                                                  // 6757
        });                                                                                                            // 6758
    });                                                                                                                // 6759
                                                                                                                       // 6760
    /**                                                                                                                // 6761
     * Returns a new list without any consecutively repeating elements. Equality is                                    // 6762
     * determined by applying the supplied predicate two consecutive elements. The                                     // 6763
     * first element in a series of equal element is the one being preserved.                                          // 6764
     *                                                                                                                 // 6765
     * Dispatches to the `dropRepeatsWith` method of the second argument, if present.                                  // 6766
     *                                                                                                                 // 6767
     * Acts as a transducer if a transformer is given in list position.                                                // 6768
     *                                                                                                                 // 6769
     * @func                                                                                                           // 6770
     * @memberOf R                                                                                                     // 6771
     * @since v0.14.0                                                                                                  // 6772
     * @category List                                                                                                  // 6773
     * @sig (a, a -> Boolean) -> [a] -> [a]                                                                            // 6774
     * @param {Function} pred A predicate used to test whether two items are equal.                                    // 6775
     * @param {Array} list The array to consider.                                                                      // 6776
     * @return {Array} `list` without repeating elements.                                                              // 6777
     * @see R.transduce                                                                                                // 6778
     * @example                                                                                                        // 6779
     *                                                                                                                 // 6780
     *      var lengthEq = (x, y) => Math.abs(x) === Math.abs(y);                                                      // 6781
     *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];                                                             // 6782
     *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]                                              // 6783
     */                                                                                                                // 6784
    var dropRepeatsWith = _curry2(_dispatchable('dropRepeatsWith', _xdropRepeatsWith, function dropRepeatsWith(pred, list) {
        var result = [];                                                                                               // 6786
        var idx = 1;                                                                                                   // 6787
        var len = list.length;                                                                                         // 6788
        if (len !== 0) {                                                                                               // 6789
            result[0] = list[0];                                                                                       // 6790
            while (idx < len) {                                                                                        // 6791
                if (!pred(last(result), list[idx])) {                                                                  // 6792
                    result[result.length] = list[idx];                                                                 // 6793
                }                                                                                                      // 6794
                idx += 1;                                                                                              // 6795
            }                                                                                                          // 6796
        }                                                                                                              // 6797
        return result;                                                                                                 // 6798
    }));                                                                                                               // 6799
                                                                                                                       // 6800
    /**                                                                                                                // 6801
     * Takes a function and two values in its domain and returns `true` if the                                         // 6802
     * values map to the same value in the codomain; `false` otherwise.                                                // 6803
     *                                                                                                                 // 6804
     * @func                                                                                                           // 6805
     * @memberOf R                                                                                                     // 6806
     * @since v0.18.0                                                                                                  // 6807
     * @category Relation                                                                                              // 6808
     * @sig (a -> b) -> a -> a -> Boolean                                                                              // 6809
     * @param {Function} f                                                                                             // 6810
     * @param {*} x                                                                                                    // 6811
     * @param {*} y                                                                                                    // 6812
     * @return {Boolean}                                                                                               // 6813
     * @example                                                                                                        // 6814
     *                                                                                                                 // 6815
     *      R.eqBy(Math.abs, 5, -5); //=> true                                                                         // 6816
     */                                                                                                                // 6817
    var eqBy = _curry3(function eqBy(f, x, y) {                                                                        // 6818
        return equals(f(x), f(y));                                                                                     // 6819
    });                                                                                                                // 6820
                                                                                                                       // 6821
    /**                                                                                                                // 6822
     * Reports whether two objects have the same value, in `R.equals` terms, for                                       // 6823
     * the specified property. Useful as a curried predicate.                                                          // 6824
     *                                                                                                                 // 6825
     * @func                                                                                                           // 6826
     * @memberOf R                                                                                                     // 6827
     * @since v0.1.0                                                                                                   // 6828
     * @category Object                                                                                                // 6829
     * @sig k -> {k: v} -> {k: v} -> Boolean                                                                           // 6830
     * @param {String} prop The name of the property to compare                                                        // 6831
     * @param {Object} obj1                                                                                            // 6832
     * @param {Object} obj2                                                                                            // 6833
     * @return {Boolean}                                                                                               // 6834
     *                                                                                                                 // 6835
     * @example                                                                                                        // 6836
     *                                                                                                                 // 6837
     *      var o1 = { a: 1, b: 2, c: 3, d: 4 };                                                                       // 6838
     *      var o2 = { a: 10, b: 20, c: 3, d: 40 };                                                                    // 6839
     *      R.eqProps('a', o1, o2); //=> false                                                                         // 6840
     *      R.eqProps('c', o1, o2); //=> true                                                                          // 6841
     */                                                                                                                // 6842
    var eqProps = _curry3(function eqProps(prop, obj1, obj2) {                                                         // 6843
        return equals(obj1[prop], obj2[prop]);                                                                         // 6844
    });                                                                                                                // 6845
                                                                                                                       // 6846
    /**                                                                                                                // 6847
     * Returns the position of the first occurrence of an item in an array, or -1                                      // 6848
     * if the item is not included in the array. `R.equals` is used to determine                                       // 6849
     * equality.                                                                                                       // 6850
     *                                                                                                                 // 6851
     * @func                                                                                                           // 6852
     * @memberOf R                                                                                                     // 6853
     * @since v0.1.0                                                                                                   // 6854
     * @category List                                                                                                  // 6855
     * @sig a -> [a] -> Number                                                                                         // 6856
     * @param {*} target The item to find.                                                                             // 6857
     * @param {Array} xs The array to search in.                                                                       // 6858
     * @return {Number} the index of the target, or -1 if the target is not found.                                     // 6859
     * @see R.lastIndexOf                                                                                              // 6860
     * @example                                                                                                        // 6861
     *                                                                                                                 // 6862
     *      R.indexOf(3, [1,2,3,4]); //=> 2                                                                            // 6863
     *      R.indexOf(10, [1,2,3,4]); //=> -1                                                                          // 6864
     */                                                                                                                // 6865
    var indexOf = _curry2(function indexOf(target, xs) {                                                               // 6866
        return typeof xs.indexOf === 'function' && !_isArray(xs) ? xs.indexOf(target) : _indexOf(xs, target, 0);       // 6867
    });                                                                                                                // 6868
                                                                                                                       // 6869
    /**                                                                                                                // 6870
     * juxt applies a list of functions to a list of values.                                                           // 6871
     *                                                                                                                 // 6872
     * @func                                                                                                           // 6873
     * @memberOf R                                                                                                     // 6874
     * @since 0.19.0                                                                                                   // 6875
     * @category Function                                                                                              // 6876
     * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])                                                           // 6877
     * @param {Array} fns An array of functions                                                                        // 6878
     * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.
     * @example                                                                                                        // 6880
     *                                                                                                                 // 6881
     *      var range = R.juxt([Math.min, Math.max]);                                                                  // 6882
     *      range(3, 4, 9, -3); //=> [-3, 9]                                                                           // 6883
     */                                                                                                                // 6884
    var juxt = _curry1(function juxt(fns) {                                                                            // 6885
        return function () {                                                                                           // 6886
            return map(apply(__, arguments), fns);                                                                     // 6887
        };                                                                                                             // 6888
    });                                                                                                                // 6889
                                                                                                                       // 6890
    /**                                                                                                                // 6891
     * Returns a lens for the given getter and setter functions. The getter "gets"                                     // 6892
     * the value of the focus; the setter "sets" the value of the focus. The setter                                    // 6893
     * should not mutate the data structure.                                                                           // 6894
     *                                                                                                                 // 6895
     * @func                                                                                                           // 6896
     * @memberOf R                                                                                                     // 6897
     * @since v0.8.0                                                                                                   // 6898
     * @category Object                                                                                                // 6899
     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s                                                        // 6900
     * @sig (s -> a) -> ((a, s) -> s) -> Lens s a                                                                      // 6901
     * @param {Function} getter                                                                                        // 6902
     * @param {Function} setter                                                                                        // 6903
     * @return {Lens}                                                                                                  // 6904
     * @see R.view, R.set, R.over, R.lensIndex, R.lensProp                                                             // 6905
     * @example                                                                                                        // 6906
     *                                                                                                                 // 6907
     *      var xLens = R.lens(R.prop('x'), R.assoc('x'));                                                             // 6908
     *                                                                                                                 // 6909
     *      R.view(xLens, {x: 1, y: 2});            //=> 1                                                             // 6910
     *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}                                                  // 6911
     *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}                                                 // 6912
     */                                                                                                                // 6913
    var lens = _curry2(function lens(getter, setter) {                                                                 // 6914
        return function (f) {                                                                                          // 6915
            return function (s) {                                                                                      // 6916
                return map(function (v) {                                                                              // 6917
                    return setter(v, s);                                                                               // 6918
                }, f(getter(s)));                                                                                      // 6919
            };                                                                                                         // 6920
        };                                                                                                             // 6921
    });                                                                                                                // 6922
                                                                                                                       // 6923
    /**                                                                                                                // 6924
     * Returns a lens whose focus is the specified index.                                                              // 6925
     *                                                                                                                 // 6926
     * @func                                                                                                           // 6927
     * @memberOf R                                                                                                     // 6928
     * @since v0.14.0                                                                                                  // 6929
     * @category Object                                                                                                // 6930
     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s                                                        // 6931
     * @sig Number -> Lens s a                                                                                         // 6932
     * @param {Number} n                                                                                               // 6933
     * @return {Lens}                                                                                                  // 6934
     * @see R.view, R.set, R.over                                                                                      // 6935
     * @example                                                                                                        // 6936
     *                                                                                                                 // 6937
     *      var headLens = R.lensIndex(0);                                                                             // 6938
     *                                                                                                                 // 6939
     *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'                                                     // 6940
     *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']                                         // 6941
     *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']                                         // 6942
     */                                                                                                                // 6943
    var lensIndex = _curry1(function lensIndex(n) {                                                                    // 6944
        return lens(nth(n), update(n));                                                                                // 6945
    });                                                                                                                // 6946
                                                                                                                       // 6947
    /**                                                                                                                // 6948
     * Returns a lens whose focus is the specified path.                                                               // 6949
     *                                                                                                                 // 6950
     * @func                                                                                                           // 6951
     * @memberOf R                                                                                                     // 6952
     * @since 0.19.0                                                                                                   // 6953
     * @category Object                                                                                                // 6954
     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s                                                        // 6955
     * @sig [String] -> Lens s a                                                                                       // 6956
     * @param {Array} path The path to use.                                                                            // 6957
     * @return {Lens}                                                                                                  // 6958
     * @see R.view, R.set, R.over                                                                                      // 6959
     * @example                                                                                                        // 6960
     *                                                                                                                 // 6961
     *      var xyLens = R.lensPath(['x', 'y']);                                                                       // 6962
     *                                                                                                                 // 6963
     *      R.view(xyLens, {x: {y: 2, z: 3}});            //=> 2                                                       // 6964
     *      R.set(xyLens, 4, {x: {y: 2, z: 3}});          //=> {x: {y: 4, z: 3}}                                       // 6965
     *      R.over(xyLens, R.negate, {x: {y: 2, z: 3}});  //=> {x: {y: -2, z: 3}}                                      // 6966
     */                                                                                                                // 6967
    var lensPath = _curry1(function lensPath(p) {                                                                      // 6968
        return lens(path(p), assocPath(p));                                                                            // 6969
    });                                                                                                                // 6970
                                                                                                                       // 6971
    /**                                                                                                                // 6972
     * Returns a lens whose focus is the specified property.                                                           // 6973
     *                                                                                                                 // 6974
     * @func                                                                                                           // 6975
     * @memberOf R                                                                                                     // 6976
     * @since v0.14.0                                                                                                  // 6977
     * @category Object                                                                                                // 6978
     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s                                                        // 6979
     * @sig String -> Lens s a                                                                                         // 6980
     * @param {String} k                                                                                               // 6981
     * @return {Lens}                                                                                                  // 6982
     * @see R.view, R.set, R.over                                                                                      // 6983
     * @example                                                                                                        // 6984
     *                                                                                                                 // 6985
     *      var xLens = R.lensProp('x');                                                                               // 6986
     *                                                                                                                 // 6987
     *      R.view(xLens, {x: 1, y: 2});            //=> 1                                                             // 6988
     *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}                                                  // 6989
     *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}                                                 // 6990
     */                                                                                                                // 6991
    var lensProp = _curry1(function lensProp(k) {                                                                      // 6992
        return lens(prop(k), assoc(k));                                                                                // 6993
    });                                                                                                                // 6994
                                                                                                                       // 6995
    /**                                                                                                                // 6996
     * "lifts" a function to be the specified arity, so that it may "map over" that                                    // 6997
     * many lists (or other objects that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply)).
     *                                                                                                                 // 6999
     * @func                                                                                                           // 7000
     * @memberOf R                                                                                                     // 7001
     * @since v0.7.0                                                                                                   // 7002
     * @category Function                                                                                              // 7003
     * @sig Number -> (*... -> *) -> ([*]... -> [*])                                                                   // 7004
     * @param {Function} fn The function to lift into higher context                                                   // 7005
     * @return {Function} The lifted function.                                                                         // 7006
     * @see R.lift                                                                                                     // 7007
     * @example                                                                                                        // 7008
     *                                                                                                                 // 7009
     *      var madd3 = R.liftN(3, R.curryN(3, (...args) => R.sum(args)));                                             // 7010
     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]                                             // 7011
     */                                                                                                                // 7012
    var liftN = _curry2(function liftN(arity, fn) {                                                                    // 7013
        var lifted = curryN(arity, fn);                                                                                // 7014
        return curryN(arity, function () {                                                                             // 7015
            return _reduce(ap, map(lifted, arguments[0]), _slice(arguments, 1));                                       // 7016
        });                                                                                                            // 7017
    });                                                                                                                // 7018
                                                                                                                       // 7019
    /**                                                                                                                // 7020
     * Returns the mean of the given list of numbers.                                                                  // 7021
     *                                                                                                                 // 7022
     * @func                                                                                                           // 7023
     * @memberOf R                                                                                                     // 7024
     * @since v0.14.0                                                                                                  // 7025
     * @category Math                                                                                                  // 7026
     * @sig [Number] -> Number                                                                                         // 7027
     * @param {Array} list                                                                                             // 7028
     * @return {Number}                                                                                                // 7029
     * @example                                                                                                        // 7030
     *                                                                                                                 // 7031
     *      R.mean([2, 7, 9]); //=> 6                                                                                  // 7032
     *      R.mean([]); //=> NaN                                                                                       // 7033
     */                                                                                                                // 7034
    var mean = _curry1(function mean(list) {                                                                           // 7035
        return sum(list) / list.length;                                                                                // 7036
    });                                                                                                                // 7037
                                                                                                                       // 7038
    /**                                                                                                                // 7039
     * Returns the median of the given list of numbers.                                                                // 7040
     *                                                                                                                 // 7041
     * @func                                                                                                           // 7042
     * @memberOf R                                                                                                     // 7043
     * @since v0.14.0                                                                                                  // 7044
     * @category Math                                                                                                  // 7045
     * @sig [Number] -> Number                                                                                         // 7046
     * @param {Array} list                                                                                             // 7047
     * @return {Number}                                                                                                // 7048
     * @example                                                                                                        // 7049
     *                                                                                                                 // 7050
     *      R.median([2, 9, 7]); //=> 7                                                                                // 7051
     *      R.median([7, 2, 10, 9]); //=> 8                                                                            // 7052
     *      R.median([]); //=> NaN                                                                                     // 7053
     */                                                                                                                // 7054
    var median = _curry1(function median(list) {                                                                       // 7055
        var len = list.length;                                                                                         // 7056
        if (len === 0) {                                                                                               // 7057
            return NaN;                                                                                                // 7058
        }                                                                                                              // 7059
        var width = 2 - len % 2;                                                                                       // 7060
        var idx = (len - width) / 2;                                                                                   // 7061
        return mean(_slice(list).sort(function (a, b) {                                                                // 7062
            return a < b ? -1 : a > b ? 1 : 0;                                                                         // 7063
        }).slice(idx, idx + width));                                                                                   // 7064
    });                                                                                                                // 7065
                                                                                                                       // 7066
    /**                                                                                                                // 7067
     * Create a new object with the own properties of the first object merged with                                     // 7068
     * the own properties of the second object. If a key exists in both objects,                                       // 7069
     * the value from the second object will be used.                                                                  // 7070
     *                                                                                                                 // 7071
     * @func                                                                                                           // 7072
     * @memberOf R                                                                                                     // 7073
     * @since v0.1.0                                                                                                   // 7074
     * @category Object                                                                                                // 7075
     * @sig {k: v} -> {k: v} -> {k: v}                                                                                 // 7076
     * @param {Object} l                                                                                               // 7077
     * @param {Object} r                                                                                               // 7078
     * @return {Object}                                                                                                // 7079
     * @see R.mergeWith, R.mergeWithKey                                                                                // 7080
     * @example                                                                                                        // 7081
     *                                                                                                                 // 7082
     *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });                                                     // 7083
     *      //=> { 'name': 'fred', 'age': 40 }                                                                         // 7084
     *                                                                                                                 // 7085
     *      var resetToDefault = R.merge(R.__, {x: 0});                                                                // 7086
     *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}                                                            // 7087
     */                                                                                                                // 7088
    var merge = mergeWith(function (l, r) {                                                                            // 7089
        return r;                                                                                                      // 7090
    });                                                                                                                // 7091
                                                                                                                       // 7092
    /**                                                                                                                // 7093
     * Merges a list of objects together into one object.                                                              // 7094
     *                                                                                                                 // 7095
     * @func                                                                                                           // 7096
     * @memberOf R                                                                                                     // 7097
     * @since v0.10.0                                                                                                  // 7098
     * @category List                                                                                                  // 7099
     * @sig [{k: v}] -> {k: v}                                                                                         // 7100
     * @param {Array} list An array of objects                                                                         // 7101
     * @return {Object} A merged object.                                                                               // 7102
     * @see R.reduce                                                                                                   // 7103
     * @example                                                                                                        // 7104
     *                                                                                                                 // 7105
     *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}                                            // 7106
     *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}                                                  // 7107
     */                                                                                                                // 7108
    var mergeAll = _curry1(function mergeAll(list) {                                                                   // 7109
        return reduce(merge, {}, list);                                                                                // 7110
    });                                                                                                                // 7111
                                                                                                                       // 7112
    /**                                                                                                                // 7113
     * Performs left-to-right function composition. The leftmost function may have                                     // 7114
     * any arity; the remaining functions must be unary.                                                               // 7115
     *                                                                                                                 // 7116
     * In some libraries this function is named `sequence`.                                                            // 7117
     *                                                                                                                 // 7118
     * @func                                                                                                           // 7119
     * @memberOf R                                                                                                     // 7120
     * @since v0.1.0                                                                                                   // 7121
     * @category Function                                                                                              // 7122
     * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)                        // 7123
     * @param {...Function} functions                                                                                  // 7124
     * @return {Function}                                                                                              // 7125
     * @see R.compose                                                                                                  // 7126
     * @example                                                                                                        // 7127
     *                                                                                                                 // 7128
     *      var f = R.pipe(Math.pow, R.negate, R.inc);                                                                 // 7129
     *                                                                                                                 // 7130
     *      f(3, 4); // -(3^4) + 1                                                                                     // 7131
     */                                                                                                                // 7132
    var pipe = function pipe() {                                                                                       // 7133
        if (arguments.length === 0) {                                                                                  // 7134
            throw new Error('pipe requires at least one argument');                                                    // 7135
        }                                                                                                              // 7136
        return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));                              // 7137
    };                                                                                                                 // 7138
                                                                                                                       // 7139
    /**                                                                                                                // 7140
     * Performs left-to-right composition of one or more Promise-returning                                             // 7141
     * functions. The leftmost function may have any arity; the remaining functions                                    // 7142
     * must be unary.                                                                                                  // 7143
     *                                                                                                                 // 7144
     * @func                                                                                                           // 7145
     * @memberOf R                                                                                                     // 7146
     * @since v0.10.0                                                                                                  // 7147
     * @category Function                                                                                              // 7148
     * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)                            // 7149
     * @param {...Function} functions                                                                                  // 7150
     * @return {Function}                                                                                              // 7151
     * @see R.composeP                                                                                                 // 7152
     * @example                                                                                                        // 7153
     *                                                                                                                 // 7154
     *      //  followersForUser :: String -> Promise [User]                                                           // 7155
     *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);                                           // 7156
     */                                                                                                                // 7157
    var pipeP = function pipeP() {                                                                                     // 7158
        if (arguments.length === 0) {                                                                                  // 7159
            throw new Error('pipeP requires at least one argument');                                                   // 7160
        }                                                                                                              // 7161
        return _arity(arguments[0].length, reduce(_pipeP, arguments[0], tail(arguments)));                             // 7162
    };                                                                                                                 // 7163
                                                                                                                       // 7164
    /**                                                                                                                // 7165
     * Multiplies together all the elements of a list.                                                                 // 7166
     *                                                                                                                 // 7167
     * @func                                                                                                           // 7168
     * @memberOf R                                                                                                     // 7169
     * @since v0.1.0                                                                                                   // 7170
     * @category Math                                                                                                  // 7171
     * @sig [Number] -> Number                                                                                         // 7172
     * @param {Array} list An array of numbers                                                                         // 7173
     * @return {Number} The product of all the numbers in the list.                                                    // 7174
     * @see R.reduce                                                                                                   // 7175
     * @example                                                                                                        // 7176
     *                                                                                                                 // 7177
     *      R.product([2,4,6,8,100,1]); //=> 38400                                                                     // 7178
     */                                                                                                                // 7179
    var product = reduce(multiply, 1);                                                                                 // 7180
                                                                                                                       // 7181
    /**                                                                                                                // 7182
     * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)                             // 7183
     * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an                               // 7184
     * Applicative of Traversable.                                                                                     // 7185
     *                                                                                                                 // 7186
     * Dispatches to the `sequence` method of the second argument, if present.                                         // 7187
     *                                                                                                                 // 7188
     * @func                                                                                                           // 7189
     * @memberOf R                                                                                                     // 7190
     * @since 0.19.0                                                                                                   // 7191
     * @category List                                                                                                  // 7192
     * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)                                         // 7193
     * @param {Function} of                                                                                            // 7194
     * @param {*} traversable                                                                                          // 7195
     * @return {*}                                                                                                     // 7196
     * @see R.traverse                                                                                                 // 7197
     * @example                                                                                                        // 7198
     *                                                                                                                 // 7199
     *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])                                  // 7200
     *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()                                        // 7201
     *                                                                                                                 // 7202
     *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]                                        // 7203
     *      R.sequence(R.of, Nothing());       //=> [Nothing()]                                                        // 7204
     */                                                                                                                // 7205
    var sequence = _curry2(function sequence(of, traversable) {                                                        // 7206
        return typeof traversable.sequence === 'function' ? traversable.sequence(of) : reduceRight(function (acc, x) {
            return ap(map(prepend, x), acc);                                                                           // 7208
        }, of([]), traversable);                                                                                       // 7209
    });                                                                                                                // 7210
                                                                                                                       // 7211
    /**                                                                                                                // 7212
     * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning                        // 7213
     * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),                         // 7214
     * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative                         // 7215
     * into an Applicative of Traversable.                                                                             // 7216
     *                                                                                                                 // 7217
     * Dispatches to the `sequence` method of the third argument, if present.                                          // 7218
     *                                                                                                                 // 7219
     * @func                                                                                                           // 7220
     * @memberOf R                                                                                                     // 7221
     * @since 0.19.0                                                                                                   // 7222
     * @category List                                                                                                  // 7223
     * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)                               // 7224
     * @param {Function} of                                                                                            // 7225
     * @param {Function} f                                                                                             // 7226
     * @param {*} traversable                                                                                          // 7227
     * @return {*}                                                                                                     // 7228
     * @see R.sequence                                                                                                 // 7229
     * @example                                                                                                        // 7230
     *                                                                                                                 // 7231
     *      R.traverse(Maybe.of, R.negate, [Just(1), Just(2), Just(3)]);   //=> Just([-1, -2, -3])                     // 7232
     *      R.traverse(Maybe.of, R.negate, [Just(1), Just(2), Nothing()]); //=> Nothing()                              // 7233
     *                                                                                                                 // 7234
     *      R.traverse(R.of, R.negate, Just([1, 2, 3])); //=> [Just(-1), Just(-2), Just(-3)]                           // 7235
     *      R.traverse(R.of, R.negate, Nothing());       //=> [Nothing()]                                              // 7236
     */                                                                                                                // 7237
    var traverse = _curry3(function traverse(of, f, traversable) {                                                     // 7238
        return sequence(of, map(f, traversable));                                                                      // 7239
    });                                                                                                                // 7240
                                                                                                                       // 7241
    /**                                                                                                                // 7242
     * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from                                    // 7243
     * any [Chain](https://github.com/fantasyland/fantasy-land#chain).                                                 // 7244
     *                                                                                                                 // 7245
     * @func                                                                                                           // 7246
     * @memberOf R                                                                                                     // 7247
     * @since v0.3.0                                                                                                   // 7248
     * @category List                                                                                                  // 7249
     * @sig Chain c => c (c a) -> c a                                                                                  // 7250
     * @param {*} list                                                                                                 // 7251
     * @return {*}                                                                                                     // 7252
     * @see R.flatten, R.chain                                                                                         // 7253
     * @example                                                                                                        // 7254
     *                                                                                                                 // 7255
     *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]                                                                // 7256
     *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]                                                // 7257
     */                                                                                                                // 7258
    var unnest = chain(_identity);                                                                                     // 7259
                                                                                                                       // 7260
    var _contains = function _contains(a, list) {                                                                      // 7261
        return _indexOf(list, a, 0) >= 0;                                                                              // 7262
    };                                                                                                                 // 7263
                                                                                                                       // 7264
    var _stepCat = function () {                                                                                       // 7265
        var _stepCatArray = {                                                                                          // 7266
            '@@transducer/init': Array,                                                                                // 7267
            '@@transducer/step': function (xs, x) {                                                                    // 7268
                return _concat(xs, [x]);                                                                               // 7269
            },                                                                                                         // 7270
            '@@transducer/result': _identity                                                                           // 7271
        };                                                                                                             // 7272
        var _stepCatString = {                                                                                         // 7273
            '@@transducer/init': String,                                                                               // 7274
            '@@transducer/step': function (a, b) {                                                                     // 7275
                return a + b;                                                                                          // 7276
            },                                                                                                         // 7277
            '@@transducer/result': _identity                                                                           // 7278
        };                                                                                                             // 7279
        var _stepCatObject = {                                                                                         // 7280
            '@@transducer/init': Object,                                                                               // 7281
            '@@transducer/step': function (result, input) {                                                            // 7282
                return merge(result, isArrayLike(input) ? objOf(input[0], input[1]) : input);                          // 7283
            },                                                                                                         // 7284
            '@@transducer/result': _identity                                                                           // 7285
        };                                                                                                             // 7286
        return function _stepCat(obj) {                                                                                // 7287
            if (_isTransformer(obj)) {                                                                                 // 7288
                return obj;                                                                                            // 7289
            }                                                                                                          // 7290
            if (isArrayLike(obj)) {                                                                                    // 7291
                return _stepCatArray;                                                                                  // 7292
            }                                                                                                          // 7293
            if (typeof obj === 'string') {                                                                             // 7294
                return _stepCatString;                                                                                 // 7295
            }                                                                                                          // 7296
            if (typeof obj === 'object') {                                                                             // 7297
                return _stepCatObject;                                                                                 // 7298
            }                                                                                                          // 7299
            throw new Error('Cannot create transformer for ' + obj);                                                   // 7300
        };                                                                                                             // 7301
    }();                                                                                                               // 7302
                                                                                                                       // 7303
    //  mapPairs :: (Object, [String]) -> [String]                                                                     // 7304
    var _toString = function _toString(x, seen) {                                                                      // 7305
        var recur = function recur(y) {                                                                                // 7306
            var xs = seen.concat([x]);                                                                                 // 7307
            return _contains(y, xs) ? '<Circular>' : _toString(y, xs);                                                 // 7308
        };                                                                                                             // 7309
        //  mapPairs :: (Object, [String]) -> [String]                                                                 // 7310
        var mapPairs = function (obj, keys) {                                                                          // 7311
            return _map(function (k) {                                                                                 // 7312
                return _quote(k) + ': ' + recur(obj[k]);                                                               // 7313
            }, keys.slice().sort());                                                                                   // 7314
        };                                                                                                             // 7315
        switch (Object.prototype.toString.call(x)) {                                                                   // 7316
        case '[object Arguments]':                                                                                     // 7317
            return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';                            // 7318
        case '[object Array]':                                                                                         // 7319
            return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {                                       // 7320
                return /^\d+$/.test(k);                                                                                // 7321
            }, keys(x)))).join(', ') + ']';                                                                            // 7322
        case '[object Boolean]':                                                                                       // 7323
            return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();                   // 7324
        case '[object Date]':                                                                                          // 7325
            return 'new Date(' + _quote(_toISOString(x)) + ')';                                                        // 7326
        case '[object Null]':                                                                                          // 7327
            return 'null';                                                                                             // 7328
        case '[object Number]':                                                                                        // 7329
            return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);
        case '[object String]':                                                                                        // 7331
            return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);                       // 7332
        case '[object Undefined]':                                                                                     // 7333
            return 'undefined';                                                                                        // 7334
        default:                                                                                                       // 7335
            if (typeof x.toString === 'function') {                                                                    // 7336
                var repr = x.toString();                                                                               // 7337
                if (repr !== '[object Object]') {                                                                      // 7338
                    return repr;                                                                                       // 7339
                }                                                                                                      // 7340
            }                                                                                                          // 7341
            return '{' + mapPairs(x, keys(x)).join(', ') + '}';                                                        // 7342
        }                                                                                                              // 7343
    };                                                                                                                 // 7344
                                                                                                                       // 7345
    /**                                                                                                                // 7346
     * Turns a list of Functors into a Functor of a list.                                                              // 7347
     *                                                                                                                 // 7348
     * @func                                                                                                           // 7349
     * @memberOf R                                                                                                     // 7350
     * @since v0.8.0                                                                                                   // 7351
     * @category List                                                                                                  // 7352
     * @sig Functor f => (x -> f x) -> [f a] -> f [a]                                                                  // 7353
     * @param {Function} of A function that returns the data type to return                                            // 7354
     * @param {Array} list An array of functors of the same type                                                       // 7355
     * @return {*}                                                                                                     // 7356
     * @see R.sequence                                                                                                 // 7357
     * @deprecated since v0.19.0                                                                                       // 7358
     * @example                                                                                                        // 7359
     *                                                                                                                 // 7360
     *      R.commute(R.of, [[1], [2, 3]]);   //=> [[1, 2], [1, 3]]                                                    // 7361
     *      R.commute(R.of, [[1, 2], [3]]);   //=> [[1, 3], [2, 3]]                                                    // 7362
     *      R.commute(R.of, [[1], [2], [3]]); //=> [[1, 2, 3]]                                                         // 7363
     *      R.commute(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])                                   // 7364
     *      R.commute(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()                                         // 7365
     */                                                                                                                // 7366
    var commute = commuteMap(identity);                                                                                // 7367
                                                                                                                       // 7368
    /**                                                                                                                // 7369
     * Performs right-to-left function composition. The rightmost function may have                                    // 7370
     * any arity; the remaining functions must be unary.                                                               // 7371
     *                                                                                                                 // 7372
     * @func                                                                                                           // 7373
     * @memberOf R                                                                                                     // 7374
     * @since v0.1.0                                                                                                   // 7375
     * @category Function                                                                                              // 7376
     * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)                        // 7377
     * @param {...Function} functions                                                                                  // 7378
     * @return {Function}                                                                                              // 7379
     * @see R.pipe                                                                                                     // 7380
     * @example                                                                                                        // 7381
     *                                                                                                                 // 7382
     *      var f = R.compose(R.inc, R.negate, Math.pow);                                                              // 7383
     *                                                                                                                 // 7384
     *      f(3, 4); // -(3^4) + 1                                                                                     // 7385
     */                                                                                                                // 7386
    var compose = function compose() {                                                                                 // 7387
        if (arguments.length === 0) {                                                                                  // 7388
            throw new Error('compose requires at least one argument');                                                 // 7389
        }                                                                                                              // 7390
        return pipe.apply(this, reverse(arguments));                                                                   // 7391
    };                                                                                                                 // 7392
                                                                                                                       // 7393
    /**                                                                                                                // 7394
     * Returns the right-to-left Kleisli composition of the provided functions,                                        // 7395
     * each of which must return a value of a type supported by [`chain`](#chain).                                     // 7396
     *                                                                                                                 // 7397
     * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), R.chain(f))`.                         // 7398
     *                                                                                                                 // 7399
     * @func                                                                                                           // 7400
     * @memberOf R                                                                                                     // 7401
     * @since v0.16.0                                                                                                  // 7402
     * @category Function                                                                                              // 7403
     * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (m a -> m z)                                       // 7404
     * @param {...Function}                                                                                            // 7405
     * @return {Function}                                                                                              // 7406
     * @see R.pipeK                                                                                                    // 7407
     * @example                                                                                                        // 7408
     *                                                                                                                 // 7409
     *      //  parseJson :: String -> Maybe *                                                                         // 7410
     *      //  get :: String -> Object -> Maybe *                                                                     // 7411
     *                                                                                                                 // 7412
     *      //  getStateCode :: Maybe String -> Maybe String                                                           // 7413
     *      var getStateCode = R.composeK(                                                                             // 7414
     *        R.compose(Maybe.of, R.toUpper),                                                                          // 7415
     *        get('state'),                                                                                            // 7416
     *        get('address'),                                                                                          // 7417
     *        get('user'),                                                                                             // 7418
     *        parseJson                                                                                                // 7419
     *      );                                                                                                         // 7420
     *                                                                                                                 // 7421
     *      getStateCode(Maybe.of('{"user":{"address":{"state":"ny"}}}'));                                             // 7422
     *      //=> Just('NY')                                                                                            // 7423
     *      getStateCode(Maybe.of('[Invalid JSON]'));                                                                  // 7424
     *      //=> Nothing()                                                                                             // 7425
     */                                                                                                                // 7426
    var composeK = function composeK() {                                                                               // 7427
        return compose.apply(this, prepend(identity, map(chain, arguments)));                                          // 7428
    };                                                                                                                 // 7429
                                                                                                                       // 7430
    /**                                                                                                                // 7431
     * Performs right-to-left composition of one or more Promise-returning                                             // 7432
     * functions. The rightmost function may have any arity; the remaining                                             // 7433
     * functions must be unary.                                                                                        // 7434
     *                                                                                                                 // 7435
     * @func                                                                                                           // 7436
     * @memberOf R                                                                                                     // 7437
     * @since v0.10.0                                                                                                  // 7438
     * @category Function                                                                                              // 7439
     * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)                            // 7440
     * @param {...Function} functions                                                                                  // 7441
     * @return {Function}                                                                                              // 7442
     * @see R.pipeP                                                                                                    // 7443
     * @example                                                                                                        // 7444
     *                                                                                                                 // 7445
     *      //  followersForUser :: String -> Promise [User]                                                           // 7446
     *      var followersForUser = R.composeP(db.getFollowers, db.getUserById);                                        // 7447
     */                                                                                                                // 7448
    var composeP = function composeP() {                                                                               // 7449
        if (arguments.length === 0) {                                                                                  // 7450
            throw new Error('composeP requires at least one argument');                                                // 7451
        }                                                                                                              // 7452
        return pipeP.apply(this, reverse(arguments));                                                                  // 7453
    };                                                                                                                 // 7454
                                                                                                                       // 7455
    /**                                                                                                                // 7456
     * Wraps a constructor function inside a curried function that can be called                                       // 7457
     * with the same arguments and returns the same type.                                                              // 7458
     *                                                                                                                 // 7459
     * @func                                                                                                           // 7460
     * @memberOf R                                                                                                     // 7461
     * @since v0.1.0                                                                                                   // 7462
     * @category Function                                                                                              // 7463
     * @sig (* -> {*}) -> (* -> {*})                                                                                   // 7464
     * @param {Function} Fn The constructor function to wrap.                                                          // 7465
     * @return {Function} A wrapped, curried constructor function.                                                     // 7466
     * @example                                                                                                        // 7467
     *                                                                                                                 // 7468
     *      // Constructor function                                                                                    // 7469
     *      var Widget = config => {                                                                                   // 7470
     *        // ...                                                                                                   // 7471
     *      };                                                                                                         // 7472
     *      Widget.prototype = {                                                                                       // 7473
     *        // ...                                                                                                   // 7474
     *      };                                                                                                         // 7475
     *      var allConfigs = [                                                                                         // 7476
     *        // ...                                                                                                   // 7477
     *      ];                                                                                                         // 7478
     *      R.map(R.construct(Widget), allConfigs); // a list of Widgets                                               // 7479
     */                                                                                                                // 7480
    var construct = _curry1(function construct(Fn) {                                                                   // 7481
        return constructN(Fn.length, Fn);                                                                              // 7482
    });                                                                                                                // 7483
                                                                                                                       // 7484
    /**                                                                                                                // 7485
     * Returns `true` if the specified value is equal, in `R.equals` terms, to at                                      // 7486
     * least one element of the given list; `false` otherwise.                                                         // 7487
     *                                                                                                                 // 7488
     * @func                                                                                                           // 7489
     * @memberOf R                                                                                                     // 7490
     * @since v0.1.0                                                                                                   // 7491
     * @category List                                                                                                  // 7492
     * @sig a -> [a] -> Boolean                                                                                        // 7493
     * @param {Object} a The item to compare against.                                                                  // 7494
     * @param {Array} list The array to consider.                                                                      // 7495
     * @return {Boolean} `true` if the item is in the list, `false` otherwise.                                         // 7496
     * @see R.any                                                                                                      // 7497
     * @example                                                                                                        // 7498
     *                                                                                                                 // 7499
     *      R.contains(3, [1, 2, 3]); //=> true                                                                        // 7500
     *      R.contains(4, [1, 2, 3]); //=> false                                                                       // 7501
     *      R.contains([42], [[42]]); //=> true                                                                        // 7502
     */                                                                                                                // 7503
    var contains = _curry2(_contains);                                                                                 // 7504
                                                                                                                       // 7505
    /**                                                                                                                // 7506
     * Finds the set (i.e. no duplicates) of all elements in the first list not                                        // 7507
     * contained in the second list.                                                                                   // 7508
     *                                                                                                                 // 7509
     * @func                                                                                                           // 7510
     * @memberOf R                                                                                                     // 7511
     * @since v0.1.0                                                                                                   // 7512
     * @category Relation                                                                                              // 7513
     * @sig [*] -> [*] -> [*]                                                                                          // 7514
     * @param {Array} list1 The first list.                                                                            // 7515
     * @param {Array} list2 The second list.                                                                           // 7516
     * @return {Array} The elements in `list1` that are not in `list2`.                                                // 7517
     * @see R.differenceWith                                                                                           // 7518
     * @example                                                                                                        // 7519
     *                                                                                                                 // 7520
     *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]                                                           // 7521
     *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]                                                         // 7522
     */                                                                                                                // 7523
    var difference = _curry2(function difference(first, second) {                                                      // 7524
        var out = [];                                                                                                  // 7525
        var idx = 0;                                                                                                   // 7526
        var firstLen = first.length;                                                                                   // 7527
        while (idx < firstLen) {                                                                                       // 7528
            if (!_contains(first[idx], second) && !_contains(first[idx], out)) {                                       // 7529
                out[out.length] = first[idx];                                                                          // 7530
            }                                                                                                          // 7531
            idx += 1;                                                                                                  // 7532
        }                                                                                                              // 7533
        return out;                                                                                                    // 7534
    });                                                                                                                // 7535
                                                                                                                       // 7536
    /**                                                                                                                // 7537
     * Returns a new list without any consecutively repeating elements. `R.equals`                                     // 7538
     * is used to determine equality.                                                                                  // 7539
     *                                                                                                                 // 7540
     * Dispatches to the `dropRepeats` method of the first argument, if present.                                       // 7541
     *                                                                                                                 // 7542
     * Acts as a transducer if a transformer is given in list position.                                                // 7543
     *                                                                                                                 // 7544
     * @func                                                                                                           // 7545
     * @memberOf R                                                                                                     // 7546
     * @since v0.14.0                                                                                                  // 7547
     * @category List                                                                                                  // 7548
     * @sig [a] -> [a]                                                                                                 // 7549
     * @param {Array} list The array to consider.                                                                      // 7550
     * @return {Array} `list` without repeating elements.                                                              // 7551
     * @see R.transduce                                                                                                // 7552
     * @example                                                                                                        // 7553
     *                                                                                                                 // 7554
     *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]                                            // 7555
     */                                                                                                                // 7556
    var dropRepeats = _curry1(_dispatchable('dropRepeats', _xdropRepeatsWith(equals), dropRepeatsWith(equals)));       // 7557
                                                                                                                       // 7558
    /**                                                                                                                // 7559
     * Transforms the items of the list with the transducer and appends the                                            // 7560
     * transformed items to the accumulator using an appropriate iterator function                                     // 7561
     * based on the accumulator type.                                                                                  // 7562
     *                                                                                                                 // 7563
     * The accumulator can be an array, string, object or a transformer. Iterated                                      // 7564
     * items will be appended to arrays and concatenated to strings. Objects will                                      // 7565
     * be merged directly or 2-item arrays will be merged as key, value pairs.                                         // 7566
     *                                                                                                                 // 7567
     * The accumulator can also be a transformer object that provides a 2-arity                                        // 7568
     * reducing iterator function, step, 0-arity initial value function, init, and                                     // 7569
     * 1-arity result extraction function result. The step function is used as the                                     // 7570
     * iterator function in reduce. The result function is used to convert the                                         // 7571
     * final accumulator into the return type and in most cases is R.identity. The                                     // 7572
     * init function is used to provide the initial accumulator.                                                       // 7573
     *                                                                                                                 // 7574
     * The iteration is performed with R.reduce after initializing the transducer.                                     // 7575
     *                                                                                                                 // 7576
     * @func                                                                                                           // 7577
     * @memberOf R                                                                                                     // 7578
     * @since v0.12.0                                                                                                  // 7579
     * @category List                                                                                                  // 7580
     * @sig a -> (b -> b) -> [c] -> a                                                                                  // 7581
     * @param {*} acc The initial accumulator value.                                                                   // 7582
     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.                 // 7583
     * @param {Array} list The list to iterate over.                                                                   // 7584
     * @return {*} The final, accumulated value.                                                                       // 7585
     * @example                                                                                                        // 7586
     *                                                                                                                 // 7587
     *      var numbers = [1, 2, 3, 4];                                                                                // 7588
     *      var transducer = R.compose(R.map(R.add(1)), R.take(2));                                                    // 7589
     *                                                                                                                 // 7590
     *      R.into([], transducer, numbers); //=> [2, 3]                                                               // 7591
     *                                                                                                                 // 7592
     *      var intoArray = R.into([]);                                                                                // 7593
     *      intoArray(transducer, numbers); //=> [2, 3]                                                                // 7594
     */                                                                                                                // 7595
    var into = _curry3(function into(acc, xf, list) {                                                                  // 7596
        return _isTransformer(acc) ? _reduce(xf(acc), acc['@@transducer/init'](), list) : _reduce(xf(_stepCat(acc)), acc, list);
    });                                                                                                                // 7598
                                                                                                                       // 7599
    /**                                                                                                                // 7600
     * "lifts" a function of arity > 1 so that it may "map over" an Array or other                                     // 7601
     * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).          // 7602
     *                                                                                                                 // 7603
     * @func                                                                                                           // 7604
     * @memberOf R                                                                                                     // 7605
     * @since v0.7.0                                                                                                   // 7606
     * @category Function                                                                                              // 7607
     * @sig (*... -> *) -> ([*]... -> [*])                                                                             // 7608
     * @param {Function} fn The function to lift into higher context                                                   // 7609
     * @return {Function} The lifted function.                                                                         // 7610
     * @see R.liftN                                                                                                    // 7611
     * @example                                                                                                        // 7612
     *                                                                                                                 // 7613
     *      var madd3 = R.lift(R.curry((a, b, c) => a + b + c));                                                       // 7614
     *                                                                                                                 // 7615
     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]                                             // 7616
     *                                                                                                                 // 7617
     *      var madd5 = R.lift(R.curry((a, b, c, d, e) => a + b + c + d + e));                                         // 7618
     *                                                                                                                 // 7619
     *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]                              // 7620
     */                                                                                                                // 7621
    var lift = _curry1(function lift(fn) {                                                                             // 7622
        return liftN(fn.length, fn);                                                                                   // 7623
    });                                                                                                                // 7624
                                                                                                                       // 7625
    /**                                                                                                                // 7626
     * Returns a partial copy of an object omitting the keys specified.                                                // 7627
     *                                                                                                                 // 7628
     * @func                                                                                                           // 7629
     * @memberOf R                                                                                                     // 7630
     * @since v0.1.0                                                                                                   // 7631
     * @category Object                                                                                                // 7632
     * @sig [String] -> {String: *} -> {String: *}                                                                     // 7633
     * @param {Array} names an array of String property names to omit from the new object                              // 7634
     * @param {Object} obj The object to copy from                                                                     // 7635
     * @return {Object} A new object with properties from `names` not on it.                                           // 7636
     * @see R.pick                                                                                                     // 7637
     * @example                                                                                                        // 7638
     *                                                                                                                 // 7639
     *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}                                            // 7640
     */                                                                                                                // 7641
    var omit = _curry2(function omit(names, obj) {                                                                     // 7642
        var result = {};                                                                                               // 7643
        for (var prop in obj) {                                                                                        // 7644
            if (!_contains(prop, names)) {                                                                             // 7645
                result[prop] = obj[prop];                                                                              // 7646
            }                                                                                                          // 7647
        }                                                                                                              // 7648
        return result;                                                                                                 // 7649
    });                                                                                                                // 7650
                                                                                                                       // 7651
    /**                                                                                                                // 7652
     * Returns the left-to-right Kleisli composition of the provided functions,                                        // 7653
     * each of which must return a value of a type supported by [`chain`](#chain).                                     // 7654
     *                                                                                                                 // 7655
     * `R.pipeK(f, g, h)` is equivalent to `R.pipe(R.chain(f), R.chain(g), R.chain(h))`.                               // 7656
     *                                                                                                                 // 7657
     * @func                                                                                                           // 7658
     * @memberOf R                                                                                                     // 7659
     * @since v0.16.0                                                                                                  // 7660
     * @category Function                                                                                              // 7661
     * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (m a -> m z)                                       // 7662
     * @param {...Function}                                                                                            // 7663
     * @return {Function}                                                                                              // 7664
     * @see R.composeK                                                                                                 // 7665
     * @example                                                                                                        // 7666
     *                                                                                                                 // 7667
     *      //  parseJson :: String -> Maybe *                                                                         // 7668
     *      //  get :: String -> Object -> Maybe *                                                                     // 7669
     *                                                                                                                 // 7670
     *      //  getStateCode :: Maybe String -> Maybe String                                                           // 7671
     *      var getStateCode = R.pipeK(                                                                                // 7672
     *        parseJson,                                                                                               // 7673
     *        get('user'),                                                                                             // 7674
     *        get('address'),                                                                                          // 7675
     *        get('state'),                                                                                            // 7676
     *        R.compose(Maybe.of, R.toUpper)                                                                           // 7677
     *      );                                                                                                         // 7678
     *                                                                                                                 // 7679
     *      getStateCode(Maybe.of('{"user":{"address":{"state":"ny"}}}'));                                             // 7680
     *      //=> Just('NY')                                                                                            // 7681
     *      getStateCode(Maybe.of('[Invalid JSON]'));                                                                  // 7682
     *      //=> Nothing()                                                                                             // 7683
     */                                                                                                                // 7684
    var pipeK = function pipeK() {                                                                                     // 7685
        return composeK.apply(this, reverse(arguments));                                                               // 7686
    };                                                                                                                 // 7687
                                                                                                                       // 7688
    /**                                                                                                                // 7689
     * Returns the string representation of the given value. `eval`'ing the output                                     // 7690
     * should result in a value equivalent to the input value. Many of the built-in                                    // 7691
     * `toString` methods do not satisfy this requirement.                                                             // 7692
     *                                                                                                                 // 7693
     * If the given value is an `[object Object]` with a `toString` method other                                       // 7694
     * than `Object.prototype.toString`, this method is invoked with no arguments                                      // 7695
     * to produce the return value. This means user-defined constructor functions                                      // 7696
     * can provide a suitable `toString` method. For example:                                                          // 7697
     *                                                                                                                 // 7698
     *     function Point(x, y) {                                                                                      // 7699
     *       this.x = x;                                                                                               // 7700
     *       this.y = y;                                                                                               // 7701
     *     }                                                                                                           // 7702
     *                                                                                                                 // 7703
     *     Point.prototype.toString = function() {                                                                     // 7704
     *       return 'new Point(' + this.x + ', ' + this.y + ')';                                                       // 7705
     *     };                                                                                                          // 7706
     *                                                                                                                 // 7707
     *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'                                                         // 7708
     *                                                                                                                 // 7709
     * @func                                                                                                           // 7710
     * @memberOf R                                                                                                     // 7711
     * @since v0.14.0                                                                                                  // 7712
     * @category String                                                                                                // 7713
     * @sig * -> String                                                                                                // 7714
     * @param {*} val                                                                                                  // 7715
     * @return {String}                                                                                                // 7716
     * @example                                                                                                        // 7717
     *                                                                                                                 // 7718
     *      R.toString(42); //=> '42'                                                                                  // 7719
     *      R.toString('abc'); //=> '"abc"'                                                                            // 7720
     *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'                                                                    // 7721
     *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{"bar": 2, "baz": 3, "foo": 1}'                                // 7722
     *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date("2001-02-03T04:05:06.000Z")'                  // 7723
     */                                                                                                                // 7724
    var toString = _curry1(function toString(val) {                                                                    // 7725
        return _toString(val, []);                                                                                     // 7726
    });                                                                                                                // 7727
                                                                                                                       // 7728
    /**                                                                                                                // 7729
     * Returns a new list containing only one copy of each element in the original                                     // 7730
     * list, based upon the value returned by applying the supplied function to                                        // 7731
     * each list element. Prefers the first item if the supplied function produces                                     // 7732
     * the same value on two items. `R.equals` is used for comparison.                                                 // 7733
     *                                                                                                                 // 7734
     * @func                                                                                                           // 7735
     * @memberOf R                                                                                                     // 7736
     * @since v0.16.0                                                                                                  // 7737
     * @category List                                                                                                  // 7738
     * @sig (a -> b) -> [a] -> [a]                                                                                     // 7739
     * @param {Function} fn A function used to produce a value to use during comparisons.                              // 7740
     * @param {Array} list The array to consider.                                                                      // 7741
     * @return {Array} The list of unique items.                                                                       // 7742
     * @example                                                                                                        // 7743
     *                                                                                                                 // 7744
     *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]                                            // 7745
     */                                                                                                                // 7746
    /* globals Set */                                                                                                  // 7747
    // distinguishing between +0 and -0 is not supported by Set                                                        // 7748
    /* falls through */                                                                                                // 7749
    // these types can all utilise Set                                                                                 // 7750
    // prevent scan for null by tracking as a boolean                                                                  // 7751
    /* falls through */                                                                                                // 7752
    // scan through all previously applied items                                                                       // 7753
    var uniqBy = _curry2(/* globals Set */                                                                             // 7754
    typeof Set === 'undefined' ? function uniqBy(fn, list) {                                                           // 7755
        var idx = 0;                                                                                                   // 7756
        var applied = [];                                                                                              // 7757
        var result = [];                                                                                               // 7758
        var appliedItem, item;                                                                                         // 7759
        while (idx < list.length) {                                                                                    // 7760
            item = list[idx];                                                                                          // 7761
            appliedItem = fn(item);                                                                                    // 7762
            if (!_contains(appliedItem, applied)) {                                                                    // 7763
                result.push(item);                                                                                     // 7764
                applied.push(appliedItem);                                                                             // 7765
            }                                                                                                          // 7766
            idx += 1;                                                                                                  // 7767
        }                                                                                                              // 7768
        return result;                                                                                                 // 7769
    } : function uniqBySet(fn, list) {                                                                                 // 7770
        var set = new Set();                                                                                           // 7771
        var applied = [];                                                                                              // 7772
        var prevSetSize = 0;                                                                                           // 7773
        var result = [];                                                                                               // 7774
        var nullExists = false;                                                                                        // 7775
        var negZeroExists = false;                                                                                     // 7776
        var idx = 0;                                                                                                   // 7777
        var appliedItem, item, newSetSize;                                                                             // 7778
        while (idx < list.length) {                                                                                    // 7779
            item = list[idx];                                                                                          // 7780
            appliedItem = fn(item);                                                                                    // 7781
            switch (typeof appliedItem) {                                                                              // 7782
            case 'number':                                                                                             // 7783
                // distinguishing between +0 and -0 is not supported by Set                                            // 7784
                if (appliedItem === 0 && !negZeroExists && 1 / appliedItem === -Infinity) {                            // 7785
                    negZeroExists = true;                                                                              // 7786
                    result.push(item);                                                                                 // 7787
                    break;                                                                                             // 7788
                }                                                                                                      // 7789
            /* falls through */                                                                                        // 7790
            case 'string':                                                                                             // 7791
            case 'boolean':                                                                                            // 7792
            case 'function':                                                                                           // 7793
            case 'undefined':                                                                                          // 7794
                // these types can all utilise Set                                                                     // 7795
                set.add(appliedItem);                                                                                  // 7796
                newSetSize = set.size;                                                                                 // 7797
                if (newSetSize > prevSetSize) {                                                                        // 7798
                    result.push(item);                                                                                 // 7799
                    prevSetSize = newSetSize;                                                                          // 7800
                }                                                                                                      // 7801
                break;                                                                                                 // 7802
            case 'object':                                                                                             // 7803
                if (appliedItem === null) {                                                                            // 7804
                    if (!nullExists) {                                                                                 // 7805
                        // prevent scan for null by tracking as a boolean                                              // 7806
                        nullExists = true;                                                                             // 7807
                        result.push(null);                                                                             // 7808
                    }                                                                                                  // 7809
                    break;                                                                                             // 7810
                }                                                                                                      // 7811
            /* falls through */                                                                                        // 7812
            default:                                                                                                   // 7813
                // scan through all previously applied items                                                           // 7814
                if (!_contains(appliedItem, applied)) {                                                                // 7815
                    applied.push(appliedItem);                                                                         // 7816
                    result.push(item);                                                                                 // 7817
                }                                                                                                      // 7818
            }                                                                                                          // 7819
            idx += 1;                                                                                                  // 7820
        }                                                                                                              // 7821
        return result;                                                                                                 // 7822
    });                                                                                                                // 7823
                                                                                                                       // 7824
    /**                                                                                                                // 7825
     * Returns a new list without values in the first argument.                                                        // 7826
     * `R.equals` is used to determine equality.                                                                       // 7827
     *                                                                                                                 // 7828
     * Acts as a transducer if a transformer is given in list position.                                                // 7829
     *                                                                                                                 // 7830
     * @func                                                                                                           // 7831
     * @memberOf R                                                                                                     // 7832
     * @since 0.19.0                                                                                                   // 7833
     * @category List                                                                                                  // 7834
     * @sig [a] -> [a] -> [a]                                                                                          // 7835
     * @param {Array} list1 The values to be removed from `list2`.                                                     // 7836
     * @param {Array} list2 The array to remove values from.                                                           // 7837
     * @return {Array} The new array without values in `list1`.                                                        // 7838
     * @see R.transduce                                                                                                // 7839
     * @example                                                                                                        // 7840
     *                                                                                                                 // 7841
     *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]                                                            // 7842
     */                                                                                                                // 7843
    var without = _curry2(function (xs, list) {                                                                        // 7844
        return reject(flip(_contains)(xs), list);                                                                      // 7845
    });                                                                                                                // 7846
                                                                                                                       // 7847
    /**                                                                                                                // 7848
     * Takes a function `f` and returns a function `g` such that:                                                      // 7849
     *                                                                                                                 // 7850
     *   - applying `g` to zero or more arguments will give __true__ if applying                                       // 7851
     *     the same arguments to `f` gives a logical __false__ value; and                                              // 7852
     *                                                                                                                 // 7853
     *   - applying `g` to zero or more arguments will give __false__ if applying                                      // 7854
     *     the same arguments to `f` gives a logical __true__ value.                                                   // 7855
     *                                                                                                                 // 7856
     * `R.complement` will work on all other functors as well.                                                         // 7857
     *                                                                                                                 // 7858
     * @func                                                                                                           // 7859
     * @memberOf R                                                                                                     // 7860
     * @since v0.12.0                                                                                                  // 7861
     * @category Logic                                                                                                 // 7862
     * @sig (*... -> *) -> (*... -> Boolean)                                                                           // 7863
     * @param {Function} f                                                                                             // 7864
     * @return {Function}                                                                                              // 7865
     * @see R.not                                                                                                      // 7866
     * @example                                                                                                        // 7867
     *                                                                                                                 // 7868
     *      var isEven = n => n % 2 === 0;                                                                             // 7869
     *      var isOdd = R.complement(isEven);                                                                          // 7870
     *      isOdd(21); //=> true                                                                                       // 7871
     *      isOdd(42); //=> false                                                                                      // 7872
     */                                                                                                                // 7873
    var complement = lift(not);                                                                                        // 7874
                                                                                                                       // 7875
    /**                                                                                                                // 7876
     * Turns a named method with a specified arity into a function that can be                                         // 7877
     * called directly supplied with arguments and a target object.                                                    // 7878
     *                                                                                                                 // 7879
     * The returned function is curried and accepts `arity + 1` parameters where                                       // 7880
     * the final parameter is the target object.                                                                       // 7881
     *                                                                                                                 // 7882
     * @func                                                                                                           // 7883
     * @memberOf R                                                                                                     // 7884
     * @since v0.1.0                                                                                                   // 7885
     * @category Function                                                                                              // 7886
     * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)                                                    // 7887
     * @param {Number} arity Number of arguments the returned function should take                                     // 7888
     *        before the target object.                                                                                // 7889
     * @param {String} method Name of the method to call.                                                              // 7890
     * @return {Function} A new curried function.                                                                      // 7891
     * @example                                                                                                        // 7892
     *                                                                                                                 // 7893
     *      var sliceFrom = R.invoker(1, 'slice');                                                                     // 7894
     *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'                                                              // 7895
     *      var sliceFrom6 = R.invoker(2, 'slice')(6);                                                                 // 7896
     *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'                                                                  // 7897
     */                                                                                                                // 7898
    var invoker = _curry2(function invoker(arity, method) {                                                            // 7899
        return curryN(arity + 1, function () {                                                                         // 7900
            var target = arguments[arity];                                                                             // 7901
            if (target != null && is(Function, target[method])) {                                                      // 7902
                return target[method].apply(target, _slice(arguments, 0, arity));                                      // 7903
            }                                                                                                          // 7904
            throw new TypeError(toString(target) + ' does not have a method named "' + method + '"');                  // 7905
        });                                                                                                            // 7906
    });                                                                                                                // 7907
                                                                                                                       // 7908
    /**                                                                                                                // 7909
     * Returns a string made by inserting the `separator` between each element and                                     // 7910
     * concatenating all the elements into a single string.                                                            // 7911
     *                                                                                                                 // 7912
     * @func                                                                                                           // 7913
     * @memberOf R                                                                                                     // 7914
     * @since v0.1.0                                                                                                   // 7915
     * @category List                                                                                                  // 7916
     * @sig String -> [a] -> String                                                                                    // 7917
     * @param {Number|String} separator The string used to separate the elements.                                      // 7918
     * @param {Array} xs The elements to join into a string.                                                           // 7919
     * @return {String} str The string made by concatenating `xs` with `separator`.                                    // 7920
     * @see R.split                                                                                                    // 7921
     * @example                                                                                                        // 7922
     *                                                                                                                 // 7923
     *      var spacer = R.join(' ');                                                                                  // 7924
     *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'                                                                    // 7925
     *      R.join('|', [1, 2, 3]);    //=> '1|2|3'                                                                    // 7926
     */                                                                                                                // 7927
    var join = invoker(1, 'join');                                                                                     // 7928
                                                                                                                       // 7929
    /**                                                                                                                // 7930
     * Creates a new function that, when invoked, caches the result of calling `fn`                                    // 7931
     * for a given argument set and returns the result. Subsequent calls to the                                        // 7932
     * memoized `fn` with the same argument set will not result in an additional                                       // 7933
     * call to `fn`; instead, the cached result for that set of arguments will be                                      // 7934
     * returned.                                                                                                       // 7935
     *                                                                                                                 // 7936
     * @func                                                                                                           // 7937
     * @memberOf R                                                                                                     // 7938
     * @since v0.1.0                                                                                                   // 7939
     * @category Function                                                                                              // 7940
     * @sig (*... -> a) -> (*... -> a)                                                                                 // 7941
     * @param {Function} fn The function to memoize.                                                                   // 7942
     * @return {Function} Memoized version of `fn`.                                                                    // 7943
     * @example                                                                                                        // 7944
     *                                                                                                                 // 7945
     *      var count = 0;                                                                                             // 7946
     *      var factorial = R.memoize(n => {                                                                           // 7947
     *        count += 1;                                                                                              // 7948
     *        return R.product(R.range(1, n + 1));                                                                     // 7949
     *      });                                                                                                        // 7950
     *      factorial(5); //=> 120                                                                                     // 7951
     *      factorial(5); //=> 120                                                                                     // 7952
     *      factorial(5); //=> 120                                                                                     // 7953
     *      count; //=> 1                                                                                              // 7954
     */                                                                                                                // 7955
    var memoize = _curry1(function memoize(fn) {                                                                       // 7956
        var cache = {};                                                                                                // 7957
        return _arity(fn.length, function () {                                                                         // 7958
            var key = toString(arguments);                                                                             // 7959
            if (!_has(key, cache)) {                                                                                   // 7960
                cache[key] = fn.apply(this, arguments);                                                                // 7961
            }                                                                                                          // 7962
            return cache[key];                                                                                         // 7963
        });                                                                                                            // 7964
    });                                                                                                                // 7965
                                                                                                                       // 7966
    /**                                                                                                                // 7967
     * Splits a string into an array of strings based on the given                                                     // 7968
     * separator.                                                                                                      // 7969
     *                                                                                                                 // 7970
     * @func                                                                                                           // 7971
     * @memberOf R                                                                                                     // 7972
     * @since v0.1.0                                                                                                   // 7973
     * @category String                                                                                                // 7974
     * @sig (String | RegExp) -> String -> [String]                                                                    // 7975
     * @param {String|RegExp} sep The pattern.                                                                         // 7976
     * @param {String} str The string to separate into an array.                                                       // 7977
     * @return {Array} The array of strings from `str` separated by `str`.                                             // 7978
     * @see R.join                                                                                                     // 7979
     * @example                                                                                                        // 7980
     *                                                                                                                 // 7981
     *      var pathComponents = R.split('/');                                                                         // 7982
     *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']                        // 7983
     *                                                                                                                 // 7984
     *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']                                              // 7985
     */                                                                                                                // 7986
    var split = invoker(1, 'split');                                                                                   // 7987
                                                                                                                       // 7988
    /**                                                                                                                // 7989
     * Determines whether a given string matches a given regular expression.                                           // 7990
     *                                                                                                                 // 7991
     * @func                                                                                                           // 7992
     * @memberOf R                                                                                                     // 7993
     * @since v0.12.0                                                                                                  // 7994
     * @category String                                                                                                // 7995
     * @sig RegExp -> String -> Boolean                                                                                // 7996
     * @param {RegExp} pattern                                                                                         // 7997
     * @param {String} str                                                                                             // 7998
     * @return {Boolean}                                                                                               // 7999
     * @see R.match                                                                                                    // 8000
     * @example                                                                                                        // 8001
     *                                                                                                                 // 8002
     *      R.test(/^x/, 'xyz'); //=> true                                                                             // 8003
     *      R.test(/^y/, 'xyz'); //=> false                                                                            // 8004
     */                                                                                                                // 8005
    var test = _curry2(function test(pattern, str) {                                                                   // 8006
        if (!_isRegExp(pattern)) {                                                                                     // 8007
            throw new TypeError('\u2018test\u2019 requires a value of type RegExp as its first argument; received ' + toString(pattern));
        }                                                                                                              // 8009
        return _cloneRegExp(pattern).test(str);                                                                        // 8010
    });                                                                                                                // 8011
                                                                                                                       // 8012
    /**                                                                                                                // 8013
     * The lower case version of a string.                                                                             // 8014
     *                                                                                                                 // 8015
     * @func                                                                                                           // 8016
     * @memberOf R                                                                                                     // 8017
     * @since v0.9.0                                                                                                   // 8018
     * @category String                                                                                                // 8019
     * @sig String -> String                                                                                           // 8020
     * @param {String} str The string to lower case.                                                                   // 8021
     * @return {String} The lower case version of `str`.                                                               // 8022
     * @see R.toUpper                                                                                                  // 8023
     * @example                                                                                                        // 8024
     *                                                                                                                 // 8025
     *      R.toLower('XYZ'); //=> 'xyz'                                                                               // 8026
     */                                                                                                                // 8027
    var toLower = invoker(0, 'toLowerCase');                                                                           // 8028
                                                                                                                       // 8029
    /**                                                                                                                // 8030
     * The upper case version of a string.                                                                             // 8031
     *                                                                                                                 // 8032
     * @func                                                                                                           // 8033
     * @memberOf R                                                                                                     // 8034
     * @since v0.9.0                                                                                                   // 8035
     * @category String                                                                                                // 8036
     * @sig String -> String                                                                                           // 8037
     * @param {String} str The string to upper case.                                                                   // 8038
     * @return {String} The upper case version of `str`.                                                               // 8039
     * @see R.toLower                                                                                                  // 8040
     * @example                                                                                                        // 8041
     *                                                                                                                 // 8042
     *      R.toUpper('abc'); //=> 'ABC'                                                                               // 8043
     */                                                                                                                // 8044
    var toUpper = invoker(0, 'toUpperCase');                                                                           // 8045
                                                                                                                       // 8046
    /**                                                                                                                // 8047
     * Returns a new list containing only one copy of each element in the original                                     // 8048
     * list. `R.equals` is used to determine equality.                                                                 // 8049
     *                                                                                                                 // 8050
     * @func                                                                                                           // 8051
     * @memberOf R                                                                                                     // 8052
     * @since v0.1.0                                                                                                   // 8053
     * @category List                                                                                                  // 8054
     * @sig [a] -> [a]                                                                                                 // 8055
     * @param {Array} list The array to consider.                                                                      // 8056
     * @return {Array} The list of unique items.                                                                       // 8057
     * @example                                                                                                        // 8058
     *                                                                                                                 // 8059
     *      R.uniq([1, 1, 2, 1]); //=> [1, 2]                                                                          // 8060
     *      R.uniq([1, '1']);     //=> [1, '1']                                                                        // 8061
     *      R.uniq([[42], [42]]); //=> [[42]]                                                                          // 8062
     */                                                                                                                // 8063
    var uniq = uniqBy(identity);                                                                                       // 8064
                                                                                                                       // 8065
    /**                                                                                                                // 8066
     * Returns the result of concatenating the given lists or strings.                                                 // 8067
     *                                                                                                                 // 8068
     * Dispatches to the `concat` method of the second argument, if present.                                           // 8069
     *                                                                                                                 // 8070
     * @func                                                                                                           // 8071
     * @memberOf R                                                                                                     // 8072
     * @since v0.1.0                                                                                                   // 8073
     * @category List                                                                                                  // 8074
     * @sig [a] -> [a] -> [a]                                                                                          // 8075
     * @sig String -> String -> String                                                                                 // 8076
     * @param {Array|String} a                                                                                         // 8077
     * @param {Array|String} b                                                                                         // 8078
     * @return {Array|String}                                                                                          // 8079
     *                                                                                                                 // 8080
     * @example                                                                                                        // 8081
     *                                                                                                                 // 8082
     *      R.concat([], []); //=> []                                                                                  // 8083
     *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]                                                    // 8084
     *      R.concat('ABC', 'DEF'); // 'ABCDEF'                                                                        // 8085
     */                                                                                                                // 8086
    var concat = flip(invoker(1, 'concat'));                                                                           // 8087
                                                                                                                       // 8088
    /**                                                                                                                // 8089
     * Combines two lists into a set (i.e. no duplicates) composed of those                                            // 8090
     * elements common to both lists.                                                                                  // 8091
     *                                                                                                                 // 8092
     * @func                                                                                                           // 8093
     * @memberOf R                                                                                                     // 8094
     * @since v0.1.0                                                                                                   // 8095
     * @category Relation                                                                                              // 8096
     * @sig [*] -> [*] -> [*]                                                                                          // 8097
     * @param {Array} list1 The first list.                                                                            // 8098
     * @param {Array} list2 The second list.                                                                           // 8099
     * @return {Array} The list of elements found in both `list1` and `list2`.                                         // 8100
     * @see R.intersectionWith                                                                                         // 8101
     * @example                                                                                                        // 8102
     *                                                                                                                 // 8103
     *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]                                                        // 8104
     */                                                                                                                // 8105
    var intersection = _curry2(function intersection(list1, list2) {                                                   // 8106
        return uniq(_filter(flip(_contains)(list1), list2));                                                           // 8107
    });                                                                                                                // 8108
                                                                                                                       // 8109
    /**                                                                                                                // 8110
     * Finds the set (i.e. no duplicates) of all elements contained in the first or                                    // 8111
     * second list, but not both.                                                                                      // 8112
     *                                                                                                                 // 8113
     * @func                                                                                                           // 8114
     * @memberOf R                                                                                                     // 8115
     * @since 0.19.0                                                                                                   // 8116
     * @category Relation                                                                                              // 8117
     * @sig [*] -> [*] -> [*]                                                                                          // 8118
     * @param {Array} list1 The first list.                                                                            // 8119
     * @param {Array} list2 The second list.                                                                           // 8120
     * @return {Array} The elements in `list1` or `list2`, but not both.                                               // 8121
     * @see R.symmetricDifferenceWith                                                                                  // 8122
     * @example                                                                                                        // 8123
     *                                                                                                                 // 8124
     *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]                                            // 8125
     *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]                                            // 8126
     */                                                                                                                // 8127
    var symmetricDifference = _curry2(function symmetricDifference(list1, list2) {                                     // 8128
        return concat(difference(list1, list2), difference(list2, list1));                                             // 8129
    });                                                                                                                // 8130
                                                                                                                       // 8131
    /**                                                                                                                // 8132
     * Finds the set (i.e. no duplicates) of all elements contained in the first or                                    // 8133
     * second list, but not both. Duplication is determined according to the value                                     // 8134
     * returned by applying the supplied predicate to two list elements.                                               // 8135
     *                                                                                                                 // 8136
     * @func                                                                                                           // 8137
     * @memberOf R                                                                                                     // 8138
     * @since 0.19.0                                                                                                   // 8139
     * @category Relation                                                                                              // 8140
     * @sig (a -> a -> Boolean) -> [a] -> [a] -> [a]                                                                   // 8141
     * @param {Function} pred A predicate used to test whether two items are equal.                                    // 8142
     * @param {Array} list1 The first list.                                                                            // 8143
     * @param {Array} list2 The second list.                                                                           // 8144
     * @return {Array} The elements in `list1` or `list2`, but not both.                                               // 8145
     * @see R.symmetricDifference                                                                                      // 8146
     * @example                                                                                                        // 8147
     *                                                                                                                 // 8148
     *      var eqA = R.eqBy(R.prop('a'));                                                                             // 8149
     *      var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];                                                                 // 8150
     *      var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];                                                                 // 8151
     *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]                              // 8152
     */                                                                                                                // 8153
    var symmetricDifferenceWith = _curry3(function symmetricDifferenceWith(pred, list1, list2) {                       // 8154
        return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));                         // 8155
    });                                                                                                                // 8156
                                                                                                                       // 8157
    /**                                                                                                                // 8158
     * Combines two lists into a set (i.e. no duplicates) composed of the elements                                     // 8159
     * of each list.                                                                                                   // 8160
     *                                                                                                                 // 8161
     * @func                                                                                                           // 8162
     * @memberOf R                                                                                                     // 8163
     * @since v0.1.0                                                                                                   // 8164
     * @category Relation                                                                                              // 8165
     * @sig [*] -> [*] -> [*]                                                                                          // 8166
     * @param {Array} as The first list.                                                                               // 8167
     * @param {Array} bs The second list.                                                                              // 8168
     * @return {Array} The first and second lists concatenated, with                                                   // 8169
     *         duplicates removed.                                                                                     // 8170
     * @example                                                                                                        // 8171
     *                                                                                                                 // 8172
     *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]                                                           // 8173
     */                                                                                                                // 8174
    var union = _curry2(compose(uniq, _concat));                                                                       // 8175
                                                                                                                       // 8176
    var R = {                                                                                                          // 8177
        F: F,                                                                                                          // 8178
        T: T,                                                                                                          // 8179
        __: __,                                                                                                        // 8180
        add: add,                                                                                                      // 8181
        addIndex: addIndex,                                                                                            // 8182
        adjust: adjust,                                                                                                // 8183
        all: all,                                                                                                      // 8184
        allPass: allPass,                                                                                              // 8185
        allUniq: allUniq,                                                                                              // 8186
        always: always,                                                                                                // 8187
        and: and,                                                                                                      // 8188
        any: any,                                                                                                      // 8189
        anyPass: anyPass,                                                                                              // 8190
        ap: ap,                                                                                                        // 8191
        aperture: aperture,                                                                                            // 8192
        append: append,                                                                                                // 8193
        apply: apply,                                                                                                  // 8194
        assoc: assoc,                                                                                                  // 8195
        assocPath: assocPath,                                                                                          // 8196
        binary: binary,                                                                                                // 8197
        bind: bind,                                                                                                    // 8198
        both: both,                                                                                                    // 8199
        call: call,                                                                                                    // 8200
        chain: chain,                                                                                                  // 8201
        clone: clone,                                                                                                  // 8202
        commute: commute,                                                                                              // 8203
        commuteMap: commuteMap,                                                                                        // 8204
        comparator: comparator,                                                                                        // 8205
        complement: complement,                                                                                        // 8206
        compose: compose,                                                                                              // 8207
        composeK: composeK,                                                                                            // 8208
        composeP: composeP,                                                                                            // 8209
        concat: concat,                                                                                                // 8210
        cond: cond,                                                                                                    // 8211
        construct: construct,                                                                                          // 8212
        constructN: constructN,                                                                                        // 8213
        contains: contains,                                                                                            // 8214
        converge: converge,                                                                                            // 8215
        countBy: countBy,                                                                                              // 8216
        curry: curry,                                                                                                  // 8217
        curryN: curryN,                                                                                                // 8218
        dec: dec,                                                                                                      // 8219
        defaultTo: defaultTo,                                                                                          // 8220
        difference: difference,                                                                                        // 8221
        differenceWith: differenceWith,                                                                                // 8222
        dissoc: dissoc,                                                                                                // 8223
        dissocPath: dissocPath,                                                                                        // 8224
        divide: divide,                                                                                                // 8225
        drop: drop,                                                                                                    // 8226
        dropLast: dropLast,                                                                                            // 8227
        dropLastWhile: dropLastWhile,                                                                                  // 8228
        dropRepeats: dropRepeats,                                                                                      // 8229
        dropRepeatsWith: dropRepeatsWith,                                                                              // 8230
        dropWhile: dropWhile,                                                                                          // 8231
        either: either,                                                                                                // 8232
        empty: empty,                                                                                                  // 8233
        eqBy: eqBy,                                                                                                    // 8234
        eqProps: eqProps,                                                                                              // 8235
        equals: equals,                                                                                                // 8236
        evolve: evolve,                                                                                                // 8237
        filter: filter,                                                                                                // 8238
        find: find,                                                                                                    // 8239
        findIndex: findIndex,                                                                                          // 8240
        findLast: findLast,                                                                                            // 8241
        findLastIndex: findLastIndex,                                                                                  // 8242
        flatten: flatten,                                                                                              // 8243
        flip: flip,                                                                                                    // 8244
        forEach: forEach,                                                                                              // 8245
        fromPairs: fromPairs,                                                                                          // 8246
        groupBy: groupBy,                                                                                              // 8247
        gt: gt,                                                                                                        // 8248
        gte: gte,                                                                                                      // 8249
        has: has,                                                                                                      // 8250
        hasIn: hasIn,                                                                                                  // 8251
        head: head,                                                                                                    // 8252
        identical: identical,                                                                                          // 8253
        identity: identity,                                                                                            // 8254
        ifElse: ifElse,                                                                                                // 8255
        inc: inc,                                                                                                      // 8256
        indexBy: indexBy,                                                                                              // 8257
        indexOf: indexOf,                                                                                              // 8258
        init: init,                                                                                                    // 8259
        insert: insert,                                                                                                // 8260
        insertAll: insertAll,                                                                                          // 8261
        intersection: intersection,                                                                                    // 8262
        intersectionWith: intersectionWith,                                                                            // 8263
        intersperse: intersperse,                                                                                      // 8264
        into: into,                                                                                                    // 8265
        invert: invert,                                                                                                // 8266
        invertObj: invertObj,                                                                                          // 8267
        invoker: invoker,                                                                                              // 8268
        is: is,                                                                                                        // 8269
        isArrayLike: isArrayLike,                                                                                      // 8270
        isEmpty: isEmpty,                                                                                              // 8271
        isNil: isNil,                                                                                                  // 8272
        join: join,                                                                                                    // 8273
        juxt: juxt,                                                                                                    // 8274
        keys: keys,                                                                                                    // 8275
        keysIn: keysIn,                                                                                                // 8276
        last: last,                                                                                                    // 8277
        lastIndexOf: lastIndexOf,                                                                                      // 8278
        length: length,                                                                                                // 8279
        lens: lens,                                                                                                    // 8280
        lensIndex: lensIndex,                                                                                          // 8281
        lensPath: lensPath,                                                                                            // 8282
        lensProp: lensProp,                                                                                            // 8283
        lift: lift,                                                                                                    // 8284
        liftN: liftN,                                                                                                  // 8285
        lt: lt,                                                                                                        // 8286
        lte: lte,                                                                                                      // 8287
        map: map,                                                                                                      // 8288
        mapAccum: mapAccum,                                                                                            // 8289
        mapAccumRight: mapAccumRight,                                                                                  // 8290
        mapObjIndexed: mapObjIndexed,                                                                                  // 8291
        match: match,                                                                                                  // 8292
        mathMod: mathMod,                                                                                              // 8293
        max: max,                                                                                                      // 8294
        maxBy: maxBy,                                                                                                  // 8295
        mean: mean,                                                                                                    // 8296
        median: median,                                                                                                // 8297
        memoize: memoize,                                                                                              // 8298
        merge: merge,                                                                                                  // 8299
        mergeAll: mergeAll,                                                                                            // 8300
        mergeWith: mergeWith,                                                                                          // 8301
        mergeWithKey: mergeWithKey,                                                                                    // 8302
        min: min,                                                                                                      // 8303
        minBy: minBy,                                                                                                  // 8304
        modulo: modulo,                                                                                                // 8305
        multiply: multiply,                                                                                            // 8306
        nAry: nAry,                                                                                                    // 8307
        negate: negate,                                                                                                // 8308
        none: none,                                                                                                    // 8309
        not: not,                                                                                                      // 8310
        nth: nth,                                                                                                      // 8311
        nthArg: nthArg,                                                                                                // 8312
        objOf: objOf,                                                                                                  // 8313
        of: of,                                                                                                        // 8314
        omit: omit,                                                                                                    // 8315
        once: once,                                                                                                    // 8316
        or: or,                                                                                                        // 8317
        over: over,                                                                                                    // 8318
        pair: pair,                                                                                                    // 8319
        partial: partial,                                                                                              // 8320
        partialRight: partialRight,                                                                                    // 8321
        partition: partition,                                                                                          // 8322
        path: path,                                                                                                    // 8323
        pathEq: pathEq,                                                                                                // 8324
        pathOr: pathOr,                                                                                                // 8325
        pathSatisfies: pathSatisfies,                                                                                  // 8326
        pick: pick,                                                                                                    // 8327
        pickAll: pickAll,                                                                                              // 8328
        pickBy: pickBy,                                                                                                // 8329
        pipe: pipe,                                                                                                    // 8330
        pipeK: pipeK,                                                                                                  // 8331
        pipeP: pipeP,                                                                                                  // 8332
        pluck: pluck,                                                                                                  // 8333
        prepend: prepend,                                                                                              // 8334
        product: product,                                                                                              // 8335
        project: project,                                                                                              // 8336
        prop: prop,                                                                                                    // 8337
        propEq: propEq,                                                                                                // 8338
        propIs: propIs,                                                                                                // 8339
        propOr: propOr,                                                                                                // 8340
        propSatisfies: propSatisfies,                                                                                  // 8341
        props: props,                                                                                                  // 8342
        range: range,                                                                                                  // 8343
        reduce: reduce,                                                                                                // 8344
        reduceRight: reduceRight,                                                                                      // 8345
        reduced: reduced,                                                                                              // 8346
        reject: reject,                                                                                                // 8347
        remove: remove,                                                                                                // 8348
        repeat: repeat,                                                                                                // 8349
        replace: replace,                                                                                              // 8350
        reverse: reverse,                                                                                              // 8351
        scan: scan,                                                                                                    // 8352
        sequence: sequence,                                                                                            // 8353
        set: set,                                                                                                      // 8354
        slice: slice,                                                                                                  // 8355
        sort: sort,                                                                                                    // 8356
        sortBy: sortBy,                                                                                                // 8357
        split: split,                                                                                                  // 8358
        splitAt: splitAt,                                                                                              // 8359
        splitEvery: splitEvery,                                                                                        // 8360
        splitWhen: splitWhen,                                                                                          // 8361
        subtract: subtract,                                                                                            // 8362
        sum: sum,                                                                                                      // 8363
        symmetricDifference: symmetricDifference,                                                                      // 8364
        symmetricDifferenceWith: symmetricDifferenceWith,                                                              // 8365
        tail: tail,                                                                                                    // 8366
        take: take,                                                                                                    // 8367
        takeLast: takeLast,                                                                                            // 8368
        takeLastWhile: takeLastWhile,                                                                                  // 8369
        takeWhile: takeWhile,                                                                                          // 8370
        tap: tap,                                                                                                      // 8371
        test: test,                                                                                                    // 8372
        times: times,                                                                                                  // 8373
        toLower: toLower,                                                                                              // 8374
        toPairs: toPairs,                                                                                              // 8375
        toPairsIn: toPairsIn,                                                                                          // 8376
        toString: toString,                                                                                            // 8377
        toUpper: toUpper,                                                                                              // 8378
        transduce: transduce,                                                                                          // 8379
        transpose: transpose,                                                                                          // 8380
        traverse: traverse,                                                                                            // 8381
        trim: trim,                                                                                                    // 8382
        type: type,                                                                                                    // 8383
        unapply: unapply,                                                                                              // 8384
        unary: unary,                                                                                                  // 8385
        uncurryN: uncurryN,                                                                                            // 8386
        unfold: unfold,                                                                                                // 8387
        union: union,                                                                                                  // 8388
        unionWith: unionWith,                                                                                          // 8389
        uniq: uniq,                                                                                                    // 8390
        uniqBy: uniqBy,                                                                                                // 8391
        uniqWith: uniqWith,                                                                                            // 8392
        unless: unless,                                                                                                // 8393
        unnest: unnest,                                                                                                // 8394
        update: update,                                                                                                // 8395
        useWith: useWith,                                                                                              // 8396
        values: values,                                                                                                // 8397
        valuesIn: valuesIn,                                                                                            // 8398
        view: view,                                                                                                    // 8399
        when: when,                                                                                                    // 8400
        where: where,                                                                                                  // 8401
        whereEq: whereEq,                                                                                              // 8402
        without: without,                                                                                              // 8403
        wrap: wrap,                                                                                                    // 8404
        xprod: xprod,                                                                                                  // 8405
        zip: zip,                                                                                                      // 8406
        zipObj: zipObj,                                                                                                // 8407
        zipWith: zipWith                                                                                               // 8408
    };                                                                                                                 // 8409
  /* eslint-env amd */                                                                                                 // 8410
                                                                                                                       // 8411
  /* TEST_ENTRY_POINT */                                                                                               // 8412
                                                                                                                       // 8413
  if (typeof exports === 'object') {                                                                                   // 8414
    module.exports = R;                                                                                                // 8415
  } else if (typeof define === 'function' && define.amd) {                                                             // 8416
    define(function() { return R; });                                                                                  // 8417
  } else {                                                                                                             // 8418
    this.R = R;                                                                                                        // 8419
  }                                                                                                                    // 8420
                                                                                                                       // 8421
}.call(this));                                                                                                         // 8422
                                                                                                                       // 8423
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/ramda_ramda/meteor-post.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
R = module.exports;                                                                                                    // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['ramda:ramda'] = {}, {
  R: R
});

})();
