{"version":3,"sources":["meteor://ðŸ’»app/packages/arsnebula_classx/packages/arsnebula_classx.js"],"names":[],"mappingsfile":"/packages/arsnebula_classx.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/arsnebula:classx/lib/js/classx.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nClassX = {};                                                                                                           // 1\n                                                                                                                       // 2\nClassX.extend = function(base, ext) {                                                                                  // 3\n                                                                                                                       // 4\n  var baseP = base.prototype;                                                                                          // 5\n  var childP = Object.create(baseP);                                                                                   // 6\n  ext.call(childP, baseP);                                                                                             // 7\n                                                                                                                       // 8\n  var constructor;                                                                                                     // 9\n  if ( !childP.hasOwnProperty(\"constructor\") ) {                                                                       // 10\n    constructor = function() {                                                                                         // 11\n      if ( typeof base !== 'undefined' && base.hasOwnProperty(\"constructor\") ) { base.constructor.call(this); }        // 12\n    };                                                                                                                 // 13\n  }                                                                                                                    // 14\n  else {                                                                                                               // 15\n    constructor = childP.constructor;                                                                                  // 16\n  }                                                                                                                    // 17\n                                                                                                                       // 18\n  constructor.prototype = childP;                                                                                      // 19\n  return constructor;                                                                                                  // 20\n                                                                                                                       // 21\n};                                                                                                                     // 22\n                                                                                                                       // 23\nClassX.Exception = ClassX.extend(Error, function(base) {                                                               // 24\n                                                                                                                       // 25\n  this.constructor = function Exception(message) {                                                                     // 26\n                                                                                                                       // 27\n    this.name = this.constructor.name;                                                                                 // 28\n    this.type = this.constructor.name;                                                                                 // 29\n    this.message = message;                                                                                            // 30\n                                                                                                                       // 31\n    if (Error.captureStackTrace) {                                                                                     // 32\n      Error.captureStackTrace(this, this.constructor);                                                                 // 33\n    } else {                                                                                                           // 34\n      var stack = new Error().stack;                                                                                   // 35\n      if (typeof stack === \"string\") {                                                                                 // 36\n        stack = stack.split(\"\\n\");                                                                                     // 37\n        stack.shift();                                                                                                 // 38\n        this.stack = stack.join(\"\\n\");                                                                                 // 39\n      }                                                                                                                // 40\n    }                                                                                                                  // 41\n  }                                                                                                                    // 42\n                                                                                                                       // 43\n});                                                                                                                    // 44\n                                                                                                                       // 45\nClassX.Class = ClassX.extend(Object, function() {                                                                      // 46\n                                                                                                                       // 47\n  this.__globalEvents = {};                                                                                            // 48\n                                                                                                                       // 49\n  this.raiseEvent = function (event, data, global) {                                                                   // 50\n    function raiseEvents(target) {                                                                                     // 51\n      if ( typeof target[event]  !== 'undefined' ) {                                                                   // 52\n        for (var i = target[event].length - 1; i >= 0; i -= 1) {                                                       // 53\n          var callback = target[event][i];                                                                             // 54\n          if ( typeof callback !== 'undefined' && callback instanceof Function ) {                                     // 55\n            callback(data);                                                                                            // 56\n          }                                                                                                            // 57\n        }                                                                                                              // 58\n      }                                                                                                                // 59\n    }                                                                                                                  // 60\n    global = ( typeof global === 'undefined' ) ? false : true;                                                         // 61\n    if ( typeof this.__globalEvents[event]  !== 'undefined' && global === true ) { raiseEvents(this.__globalEvents); } // 62\n    if ( typeof this.__localEvents[event]  !== 'undefined' ) { raiseEvents(this.__localEvents); }                      // 63\n  };                                                                                                                   // 64\n                                                                                                                       // 65\n  this.addEventListener = function (event, callback, global) {                                                         // 66\n    function addEventListener(target) {                                                                                // 67\n      if ( typeof target[event] === 'undefined' ) { target[event] = []; }                                              // 68\n      target[event].push(callback);                                                                                    // 69\n    }                                                                                                                  // 70\n    global = ( typeof global === 'undefined' ) ? false : true;                                                         // 71\n    if ( global === true ) { addEventListener(this.__globalEvents); }                                                  // 72\n    else { addEventListener(this.__localEvents); }                                                                     // 73\n  };                                                                                                                   // 74\n                                                                                                                       // 75\n  this.removeEventListener = function (event, callback, global) {                                                      // 76\n    function removeEventListener(target) {                                                                             // 77\n      if ( typeof target[event]  === 'undefined' ) { return; }                                                         // 78\n      for (var i = target[event].length - 1; i >= 0; i -= 1) {                                                         // 79\n        if ( target[event][i] === callback ) {                                                                         // 80\n          target[event].splice(i, 1);                                                                                  // 81\n          break;                                                                                                       // 82\n        }                                                                                                              // 83\n      }                                                                                                                // 84\n    }                                                                                                                  // 85\n    global = ( typeof global === 'undefined' ) ? false : true;                                                         // 86\n    if ( global === true ) { removeEventListener(this.__globalEvents); }                                               // 87\n    else { removeEventListener(this.__localEvents); }                                                                  // 88\n  }                                                                                                                    // 89\n                                                                                                                       // 90\n  this.constructor = function Class() {                                                                                // 91\n    this.__localEvents = {};                                                                                           // 92\n  };                                                                                                                   // 93\n});                                                                                                                    // 94\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/arsnebula:classx/lib/js/classx.argument.exceptions.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n* The exception that is thrown when one of the arguments provided to a method is not valid.                            // 2\n*/                                                                                                                     // 3\nClassX.ArgumentException = ClassX.extend(ClassX.Exception, function(base) {                                            // 4\n  this.constructor = function ArgumentException(argName, message) {                                                    // 5\n    if ( ! message ) {                                                                                                 // 6\n      message = \"The argument is invalid\";                                                                             // 7\n      if ( argName && typeof argName === \"string\" ) { message = message + \": \" + argName; }                            // 8\n    }                                                                                                                  // 9\n    base.constructor.call(this, message);                                                                              // 10\n    this.argName = argName;                                                                                            // 11\n  }                                                                                                                    // 12\n});                                                                                                                    // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n* The exception that is thrown when a required argument provided to a method is null.                                  // 16\n*/                                                                                                                     // 17\nClassX.ArgumentNullException = ClassX.extend(ClassX.ArgumentException, function(base) {                                // 18\n  this.constructor = function ArgumentNullException(argName, message) {                                                // 19\n    if ( ! message ) {                                                                                                 // 20\n      message = \"The argument is null or undefined\";                                                                   // 21\n      if ( argName && typeof argName === \"string\" ) { message = message + \": \" + argName; }                            // 22\n    }                                                                                                                  // 23\n    base.constructor.call(this, argName, message);                                                                     // 24\n  }                                                                                                                    // 25\n});                                                                                                                    // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n* The exception thrown when an argument is outside the range of acceptable values.                                     // 29\n*/                                                                                                                     // 30\nClassX.ArgumentOutOfRangeException = ClassX.extend(ClassX.ArgumentException, function(base) {                          // 31\n  this.constructor = function ArgumentOutOfRangeException(argName, message) {                                          // 32\n    if ( ! message ) {                                                                                                 // 33\n      message = \"The argument is outside the range of acceptable values\";                                              // 34\n      if ( argName && typeof argName === \"string\" ) { message = message + \": \" + argName; }                            // 35\n    }                                                                                                                  // 36\n    base.constructor.call(this, argName, message);                                                                     // 37\n  }                                                                                                                    // 38\n});                                                                                                                    // 39\n                                                                                                                       // 40\n/**                                                                                                                    // 41\n* The exception that is thrown when the format of an argument is invalid.                                              // 42\n*/                                                                                                                     // 43\nClassX.ArgumentFormatException = ClassX.extend(ClassX.ArgumentException, function(base) {                              // 44\n  this.constructor = function ArgumentFormatException(argName, message) {                                              // 45\n    if ( ! message ) {                                                                                                 // 46\n      message = \"The format of the argument is invalid\";                                                               // 47\n      if ( argName && typeof argName === \"string\" ) { message = message + \": \" + argName; }                            // 48\n    }                                                                                                                  // 49\n    base.constructor.call(this, argName, message);                                                                     // 50\n  }                                                                                                                    // 51\n});                                                                                                                    // 52\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}