(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var check = Package.check.check;
var Match = Package.check.Match;
var _ = Package.underscore._;
var Mongo = Package.mongo.Mongo;
var Blaze = Package.blaze.Blaze;
var UI = Package.blaze.UI;
var Handlebars = Package.blaze.Handlebars;
var Template = Package.templating.Template;
var ReactiveVar = Package['reactive-var'].ReactiveVar;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;
var HTML = Package.htmljs.HTML;
var Spacebars = Package.spacebars.Spacebars;

/* Package-scope variables */
var Tabular, Util, tableInit, getPubSelector;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed_tabular/common.js                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global Tabular:true, Mongo, _, Meteor, Template */                                                                  // 1
                                                                                                                       // 2
Tabular = {}; //exported                                                                                               // 3
                                                                                                                       // 4
Tabular.tablesByName = {};                                                                                             // 5
                                                                                                                       // 6
if (Meteor.isClient) {                                                                                                 // 7
  Template.registerHelper('TabularTables', Tabular.tablesByName);                                                      // 8
}                                                                                                                      // 9
                                                                                                                       // 10
Tabular.Table = function (options) {                                                                                   // 11
  var self = this;                                                                                                     // 12
                                                                                                                       // 13
  if (!options) {                                                                                                      // 14
    throw new Error('Tabular.Table options argument is required');                                                     // 15
  }                                                                                                                    // 16
                                                                                                                       // 17
  if (!options.name) {                                                                                                 // 18
    throw new Error('Tabular.Table options must specify name');                                                        // 19
  }                                                                                                                    // 20
  self.name = options.name;                                                                                            // 21
                                                                                                                       // 22
  if (!(options.collection instanceof Mongo.Collection)) {                                                             // 23
    throw new Error('Tabular.Table options must specify collection');                                                  // 24
  }                                                                                                                    // 25
  self.collection = options.collection;                                                                                // 26
                                                                                                                       // 27
  self.pub = options.pub || 'tabular_genericPub';                                                                      // 28
                                                                                                                       // 29
  // By default we use core `Meteor.subscribe`, but you can pass                                                       // 30
  // a subscription manager like `sub: new SubsManager({cacheLimit: 20, expireIn: 3})`                                 // 31
  self.sub = options.sub || Meteor;                                                                                    // 32
                                                                                                                       // 33
  self.onUnload = options.onUnload;                                                                                    // 34
  self.allow = options.allow;                                                                                          // 35
  self.allowFields = options.allowFields;                                                                              // 36
  self.changeSelector = options.changeSelector;                                                                        // 37
                                                                                                                       // 38
  if (_.isArray(options.extraFields)) {                                                                                // 39
    var fields = {};                                                                                                   // 40
    _.each(options.extraFields, function (fieldName) {                                                                 // 41
      fields[fieldName] = 1;                                                                                           // 42
    });                                                                                                                // 43
    self.extraFields = fields;                                                                                         // 44
  }                                                                                                                    // 45
                                                                                                                       // 46
  self.selector = options.selector;                                                                                    // 47
                                                                                                                       // 48
  if (!options.columns) {                                                                                              // 49
    throw new Error('Tabular.Table options must specify columns');                                                     // 50
  }                                                                                                                    // 51
                                                                                                                       // 52
  self.options = _.omit(options, 'collection', 'pub', 'sub', 'onUnload', 'allow', 'allowFields', 'extraFields', 'name', 'selector');
                                                                                                                       // 54
  Tabular.tablesByName[self.name] = self;                                                                              // 55
};                                                                                                                     // 56
                                                                                                                       // 57
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed_tabular/.npm/package/node_modules/datatables/media/js/jquery.dataTables.js                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*! DataTables 1.10.7                                                                                                  // 1
 * Â©2008-2014 SpryMedia Ltd - datatables.net/license                                                                   // 2
 */                                                                                                                    // 3
                                                                                                                       // 4
/**                                                                                                                    // 5
 * @summary     DataTables                                                                                             // 6
 * @description Paginate, search and order HTML tables                                                                 // 7
 * @version     1.10.7                                                                                                 // 8
 * @file        jquery.dataTables.js                                                                                   // 9
 * @author      SpryMedia Ltd (www.sprymedia.co.uk)                                                                    // 10
 * @contact     www.sprymedia.co.uk/contact                                                                            // 11
 * @copyright   Copyright 2008-2014 SpryMedia Ltd.                                                                     // 12
 *                                                                                                                     // 13
 * This source file is free software, available under the following license:                                           // 14
 *   MIT license - http://datatables.net/license                                                                       // 15
 *                                                                                                                     // 16
 * This source file is distributed in the hope that it will be useful, but                                             // 17
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY                                          // 18
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.                                             // 19
 *                                                                                                                     // 20
 * For details please refer to: http://www.datatables.net                                                              // 21
 */                                                                                                                    // 22
                                                                                                                       // 23
/*jslint evil: true, undef: true, browser: true */                                                                     // 24
/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnScrollingWidthAdjust,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnScrollBarWidth,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/
                                                                                                                       // 26
(/** @lends <global> */function( window, document, undefined ) {                                                       // 27
                                                                                                                       // 28
(function( factory ) {                                                                                                 // 29
	"use strict";                                                                                                         // 30
                                                                                                                       // 31
	if ( typeof define === 'function' && define.amd ) {                                                                   // 32
		// Define as an AMD module if possible                                                                               // 33
		define( 'datatables', ['jquery'], factory );                                                                         // 34
	}                                                                                                                     // 35
    else if ( typeof exports === 'object' ) {                                                                          // 36
        // Node/CommonJS                                                                                               // 37
        module.exports = factory( require( 'jquery' ) );                                                               // 38
    }                                                                                                                  // 39
	else if ( jQuery && !jQuery.fn.dataTable ) {                                                                          // 40
		// Define using browser globals otherwise                                                                            // 41
		// Prevent multiple instantiations if the script is loaded twice                                                     // 42
		factory( jQuery );                                                                                                   // 43
	}                                                                                                                     // 44
}                                                                                                                      // 45
(/** @lends <global> */function( $ ) {                                                                                 // 46
	"use strict";                                                                                                         // 47
                                                                                                                       // 48
	/**                                                                                                                   // 49
	 * DataTables is a plug-in for the jQuery Javascript library. It is a highly                                          // 50
	 * flexible tool, based upon the foundations of progressive enhancement,                                              // 51
	 * which will add advanced interaction controls to any HTML table. For a                                              // 52
	 * full list of features please refer to                                                                              // 53
	 * [DataTables.net](href="http://datatables.net).                                                                     // 54
	 *                                                                                                                    // 55
	 * Note that the `DataTable` object is not a global variable but is aliased                                           // 56
	 * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may                                            // 57
	 * be  accessed.                                                                                                      // 58
	 *                                                                                                                    // 59
	 *  @class                                                                                                            // 60
	 *  @param {object} [init={}] Configuration object for DataTables. Options                                            // 61
	 *    are defined by {@link DataTable.defaults}                                                                       // 62
	 *  @requires jQuery 1.7+                                                                                             // 63
	 *                                                                                                                    // 64
	 *  @example                                                                                                          // 65
	 *    // Basic initialisation                                                                                         // 66
	 *    $(document).ready( function {                                                                                   // 67
	 *      $('#example').dataTable();                                                                                    // 68
	 *    } );                                                                                                            // 69
	 *                                                                                                                    // 70
	 *  @example                                                                                                          // 71
	 *    // Initialisation with configuration options - in this case, disable                                            // 72
	 *    // pagination and sorting.                                                                                      // 73
	 *    $(document).ready( function {                                                                                   // 74
	 *      $('#example').dataTable( {                                                                                    // 75
	 *        "paginate": false,                                                                                          // 76
	 *        "sort": false                                                                                               // 77
	 *      } );                                                                                                          // 78
	 *    } );                                                                                                            // 79
	 */                                                                                                                   // 80
	var DataTable;                                                                                                        // 81
                                                                                                                       // 82
	                                                                                                                      // 83
	/*                                                                                                                    // 84
	 * It is useful to have variables which are scoped locally so only the                                                // 85
	 * DataTables functions can access them and they don't leak into global space.                                        // 86
	 * At the same time these functions are often useful over multiple files in the                                       // 87
	 * core and API, so we list, or at least document, all variables which are used                                       // 88
	 * by DataTables as private variables here. This also ensures that there is no                                        // 89
	 * clashing of variable names and that they can easily referenced for reuse.                                          // 90
	 */                                                                                                                   // 91
	                                                                                                                      // 92
	                                                                                                                      // 93
	// Defined else where                                                                                                 // 94
	//  _selector_run                                                                                                     // 95
	//  _selector_opts                                                                                                    // 96
	//  _selector_first                                                                                                   // 97
	//  _selector_row_indexes                                                                                             // 98
	                                                                                                                      // 99
	var _ext; // DataTable.ext                                                                                            // 100
	var _Api; // DataTable.Api                                                                                            // 101
	var _api_register; // DataTable.Api.register                                                                          // 102
	var _api_registerPlural; // DataTable.Api.registerPlural                                                              // 103
	                                                                                                                      // 104
	var _re_dic = {};                                                                                                     // 105
	var _re_new_lines = /[\r\n]/g;                                                                                        // 106
	var _re_html = /<.*?>/g;                                                                                              // 107
	var _re_date_start = /^[\w\+\-]/;                                                                                     // 108
	var _re_date_end = /[\w\+\-]$/;                                                                                       // 109
	                                                                                                                      // 110
	// Escape regular expression special characters                                                                       // 111
	var _re_escape_regex = new RegExp( '(\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^', '-' ].join('|\\') + ')', 'g' );
	                                                                                                                      // 113
	// http://en.wikipedia.org/wiki/Foreign_exchange_market                                                               // 114
	// - \u20BD - Russian ruble.                                                                                          // 115
	// - \u20a9 - South Korean Won                                                                                        // 116
	// - \u20BA - Turkish Lira                                                                                            // 117
	// - \u20B9 - Indian Rupee                                                                                            // 118
	// - R - Brazil (R$) and South Africa                                                                                 // 119
	// - fr - Swiss Franc                                                                                                 // 120
	// - kr - Swedish krona, Norwegian krone and Danish krone                                                             // 121
	// - \u2009 is thin space and \u202F is narrow no-break space, both used in many                                      // 122
	//   standards as thousands separators.                                                                               // 123
	var _re_formatted_numeric = /[',$Â£â¬Â¥%\u2009\u202F\u20BD\u20a9\u20BArfk]/gi;                                           // 124
	                                                                                                                      // 125
	                                                                                                                      // 126
	var _empty = function ( d ) {                                                                                         // 127
		return !d || d === true || d === '-' ? true : false;                                                                 // 128
	};                                                                                                                    // 129
	                                                                                                                      // 130
	                                                                                                                      // 131
	var _intVal = function ( s ) {                                                                                        // 132
		var integer = parseInt( s, 10 );                                                                                     // 133
		return !isNaN(integer) && isFinite(s) ? integer : null;                                                              // 134
	};                                                                                                                    // 135
	                                                                                                                      // 136
	// Convert from a formatted number with characters other than `.` as the                                              // 137
	// decimal place, to a Javascript number                                                                              // 138
	var _numToDecimal = function ( num, decimalPoint ) {                                                                  // 139
		// Cache created regular expressions for speed as this function is called often                                      // 140
		if ( ! _re_dic[ decimalPoint ] ) {                                                                                   // 141
			_re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );                                        // 142
		}                                                                                                                    // 143
		return typeof num === 'string' && decimalPoint !== '.' ?                                                             // 144
			num.replace( /\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :                                                  // 145
			num;                                                                                                                // 146
	};                                                                                                                    // 147
	                                                                                                                      // 148
	                                                                                                                      // 149
	var _isNumber = function ( d, decimalPoint, formatted ) {                                                             // 150
		var strType = typeof d === 'string';                                                                                 // 151
	                                                                                                                      // 152
		// If empty return immediately so there must be a number if it is a                                                  // 153
		// formatted string (this stops the string "k", or "kr", etc being detected                                          // 154
		// as a formatted number for currency                                                                                // 155
		if ( _empty( d ) ) {                                                                                                 // 156
			return true;                                                                                                        // 157
		}                                                                                                                    // 158
	                                                                                                                      // 159
		if ( decimalPoint && strType ) {                                                                                     // 160
			d = _numToDecimal( d, decimalPoint );                                                                               // 161
		}                                                                                                                    // 162
	                                                                                                                      // 163
		if ( formatted && strType ) {                                                                                        // 164
			d = d.replace( _re_formatted_numeric, '' );                                                                         // 165
		}                                                                                                                    // 166
	                                                                                                                      // 167
		return !isNaN( parseFloat(d) ) && isFinite( d );                                                                     // 168
	};                                                                                                                    // 169
	                                                                                                                      // 170
	                                                                                                                      // 171
	// A string without HTML in it can be considered to be HTML still                                                     // 172
	var _isHtml = function ( d ) {                                                                                        // 173
		return _empty( d ) || typeof d === 'string';                                                                         // 174
	};                                                                                                                    // 175
	                                                                                                                      // 176
	                                                                                                                      // 177
	var _htmlNumeric = function ( d, decimalPoint, formatted ) {                                                          // 178
		if ( _empty( d ) ) {                                                                                                 // 179
			return true;                                                                                                        // 180
		}                                                                                                                    // 181
	                                                                                                                      // 182
		var html = _isHtml( d );                                                                                             // 183
		return ! html ?                                                                                                      // 184
			null :                                                                                                              // 185
			_isNumber( _stripHtml( d ), decimalPoint, formatted ) ?                                                             // 186
				true :                                                                                                             // 187
				null;                                                                                                              // 188
	};                                                                                                                    // 189
	                                                                                                                      // 190
	                                                                                                                      // 191
	var _pluck = function ( a, prop, prop2 ) {                                                                            // 192
		var out = [];                                                                                                        // 193
		var i=0, ien=a.length;                                                                                               // 194
	                                                                                                                      // 195
		// Could have the test in the loop for slightly smaller code, but speed                                              // 196
		// is essential here                                                                                                 // 197
		if ( prop2 !== undefined ) {                                                                                         // 198
			for ( ; i<ien ; i++ ) {                                                                                             // 199
				if ( a[i] && a[i][ prop ] ) {                                                                                      // 200
					out.push( a[i][ prop ][ prop2 ] );                                                                                // 201
				}                                                                                                                  // 202
			}                                                                                                                   // 203
		}                                                                                                                    // 204
		else {                                                                                                               // 205
			for ( ; i<ien ; i++ ) {                                                                                             // 206
				if ( a[i] ) {                                                                                                      // 207
					out.push( a[i][ prop ] );                                                                                         // 208
				}                                                                                                                  // 209
			}                                                                                                                   // 210
		}                                                                                                                    // 211
	                                                                                                                      // 212
		return out;                                                                                                          // 213
	};                                                                                                                    // 214
	                                                                                                                      // 215
	                                                                                                                      // 216
	// Basically the same as _pluck, but rather than looping over `a` we use `order`                                      // 217
	// as the indexes to pick from `a`                                                                                    // 218
	var _pluck_order = function ( a, order, prop, prop2 )                                                                 // 219
	{                                                                                                                     // 220
		var out = [];                                                                                                        // 221
		var i=0, ien=order.length;                                                                                           // 222
	                                                                                                                      // 223
		// Could have the test in the loop for slightly smaller code, but speed                                              // 224
		// is essential here                                                                                                 // 225
		if ( prop2 !== undefined ) {                                                                                         // 226
			for ( ; i<ien ; i++ ) {                                                                                             // 227
				if ( a[ order[i] ][ prop ] ) {                                                                                     // 228
					out.push( a[ order[i] ][ prop ][ prop2 ] );                                                                       // 229
				}                                                                                                                  // 230
			}                                                                                                                   // 231
		}                                                                                                                    // 232
		else {                                                                                                               // 233
			for ( ; i<ien ; i++ ) {                                                                                             // 234
				out.push( a[ order[i] ][ prop ] );                                                                                 // 235
			}                                                                                                                   // 236
		}                                                                                                                    // 237
	                                                                                                                      // 238
		return out;                                                                                                          // 239
	};                                                                                                                    // 240
	                                                                                                                      // 241
	                                                                                                                      // 242
	var _range = function ( len, start )                                                                                  // 243
	{                                                                                                                     // 244
		var out = [];                                                                                                        // 245
		var end;                                                                                                             // 246
	                                                                                                                      // 247
		if ( start === undefined ) {                                                                                         // 248
			start = 0;                                                                                                          // 249
			end = len;                                                                                                          // 250
		}                                                                                                                    // 251
		else {                                                                                                               // 252
			end = start;                                                                                                        // 253
			start = len;                                                                                                        // 254
		}                                                                                                                    // 255
	                                                                                                                      // 256
		for ( var i=start ; i<end ; i++ ) {                                                                                  // 257
			out.push( i );                                                                                                      // 258
		}                                                                                                                    // 259
	                                                                                                                      // 260
		return out;                                                                                                          // 261
	};                                                                                                                    // 262
	                                                                                                                      // 263
	                                                                                                                      // 264
	var _removeEmpty = function ( a )                                                                                     // 265
	{                                                                                                                     // 266
		var out = [];                                                                                                        // 267
	                                                                                                                      // 268
		for ( var i=0, ien=a.length ; i<ien ; i++ ) {                                                                        // 269
			if ( a[i] ) { // careful - will remove all falsy values!                                                            // 270
				out.push( a[i] );                                                                                                  // 271
			}                                                                                                                   // 272
		}                                                                                                                    // 273
	                                                                                                                      // 274
		return out;                                                                                                          // 275
	};                                                                                                                    // 276
	                                                                                                                      // 277
	                                                                                                                      // 278
	var _stripHtml = function ( d ) {                                                                                     // 279
		return d.replace( _re_html, '' );                                                                                    // 280
	};                                                                                                                    // 281
	                                                                                                                      // 282
	                                                                                                                      // 283
	/**                                                                                                                   // 284
	 * Find the unique elements in a source array.                                                                        // 285
	 *                                                                                                                    // 286
	 * @param  {array} src Source array                                                                                   // 287
	 * @return {array} Array of unique items                                                                              // 288
	 * @ignore                                                                                                            // 289
	 */                                                                                                                   // 290
	var _unique = function ( src )                                                                                        // 291
	{                                                                                                                     // 292
		// A faster unique method is to use object keys to identify used values,                                             // 293
		// but this doesn't work with arrays or objects, which we must also                                                  // 294
		// consider. See jsperf.com/compare-array-unique-versions/4 for more                                                 // 295
		// information.                                                                                                      // 296
		var                                                                                                                  // 297
			out = [],                                                                                                           // 298
			val,                                                                                                                // 299
			i, ien=src.length,                                                                                                  // 300
			j, k=0;                                                                                                             // 301
	                                                                                                                      // 302
		again: for ( i=0 ; i<ien ; i++ ) {                                                                                   // 303
			val = src[i];                                                                                                       // 304
	                                                                                                                      // 305
			for ( j=0 ; j<k ; j++ ) {                                                                                           // 306
				if ( out[j] === val ) {                                                                                            // 307
					continue again;                                                                                                   // 308
				}                                                                                                                  // 309
			}                                                                                                                   // 310
	                                                                                                                      // 311
			out.push( val );                                                                                                    // 312
			k++;                                                                                                                // 313
		}                                                                                                                    // 314
	                                                                                                                      // 315
		return out;                                                                                                          // 316
	};                                                                                                                    // 317
	                                                                                                                      // 318
	                                                                                                                      // 319
	                                                                                                                      // 320
	/**                                                                                                                   // 321
	 * Create a mapping object that allows camel case parameters to be looked up                                          // 322
	 * for their Hungarian counterparts. The mapping is stored in a private                                               // 323
	 * parameter called `_hungarianMap` which can be accessed on the source object.                                       // 324
	 *  @param {object} o                                                                                                 // 325
	 *  @memberof DataTable#oApi                                                                                          // 326
	 */                                                                                                                   // 327
	function _fnHungarianMap ( o )                                                                                        // 328
	{                                                                                                                     // 329
		var                                                                                                                  // 330
			hungarian = 'a aa ai ao as b fn i m o s ',                                                                          // 331
			match,                                                                                                              // 332
			newKey,                                                                                                             // 333
			map = {};                                                                                                           // 334
	                                                                                                                      // 335
		$.each( o, function (key, val) {                                                                                     // 336
			match = key.match(/^([^A-Z]+?)([A-Z])/);                                                                            // 337
	                                                                                                                      // 338
			if ( match && hungarian.indexOf(match[1]+' ') !== -1 )                                                              // 339
			{                                                                                                                   // 340
				newKey = key.replace( match[0], match[2].toLowerCase() );                                                          // 341
				map[ newKey ] = key;                                                                                               // 342
	                                                                                                                      // 343
				if ( match[1] === 'o' )                                                                                            // 344
				{                                                                                                                  // 345
					_fnHungarianMap( o[key] );                                                                                        // 346
				}                                                                                                                  // 347
			}                                                                                                                   // 348
		} );                                                                                                                 // 349
	                                                                                                                      // 350
		o._hungarianMap = map;                                                                                               // 351
	}                                                                                                                     // 352
	                                                                                                                      // 353
	                                                                                                                      // 354
	/**                                                                                                                   // 355
	 * Convert from camel case parameters to Hungarian, based on a Hungarian map                                          // 356
	 * created by _fnHungarianMap.                                                                                        // 357
	 *  @param {object} src The model object which holds all parameters that can be                                       // 358
	 *    mapped.                                                                                                         // 359
	 *  @param {object} user The object to convert from camel case to Hungarian.                                          // 360
	 *  @param {boolean} force When set to `true`, properties which already have a                                        // 361
	 *    Hungarian value in the `user` object will be overwritten. Otherwise they                                        // 362
	 *    won't be.                                                                                                       // 363
	 *  @memberof DataTable#oApi                                                                                          // 364
	 */                                                                                                                   // 365
	function _fnCamelToHungarian ( src, user, force )                                                                     // 366
	{                                                                                                                     // 367
		if ( ! src._hungarianMap ) {                                                                                         // 368
			_fnHungarianMap( src );                                                                                             // 369
		}                                                                                                                    // 370
	                                                                                                                      // 371
		var hungarianKey;                                                                                                    // 372
	                                                                                                                      // 373
		$.each( user, function (key, val) {                                                                                  // 374
			hungarianKey = src._hungarianMap[ key ];                                                                            // 375
	                                                                                                                      // 376
			if ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )                                    // 377
			{                                                                                                                   // 378
				// For objects, we need to buzz down into the object to copy parameters                                            // 379
				if ( hungarianKey.charAt(0) === 'o' )                                                                              // 380
				{                                                                                                                  // 381
					// Copy the camelCase options over to the hungarian                                                               // 382
					if ( ! user[ hungarianKey ] ) {                                                                                   // 383
						user[ hungarianKey ] = {};                                                                                       // 384
					}                                                                                                                 // 385
					$.extend( true, user[hungarianKey], user[key] );                                                                  // 386
	                                                                                                                      // 387
					_fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );                                              // 388
				}                                                                                                                  // 389
				else {                                                                                                             // 390
					user[hungarianKey] = user[ key ];                                                                                 // 391
				}                                                                                                                  // 392
			}                                                                                                                   // 393
		} );                                                                                                                 // 394
	}                                                                                                                     // 395
	                                                                                                                      // 396
	                                                                                                                      // 397
	/**                                                                                                                   // 398
	 * Language compatibility - when certain options are given, and others aren't, we                                     // 399
	 * need to duplicate the values over, in order to provide backwards compatibility                                     // 400
	 * with older language files.                                                                                         // 401
	 *  @param {object} oSettings dataTables settings object                                                              // 402
	 *  @memberof DataTable#oApi                                                                                          // 403
	 */                                                                                                                   // 404
	function _fnLanguageCompat( lang )                                                                                    // 405
	{                                                                                                                     // 406
		var defaults = DataTable.defaults.oLanguage;                                                                         // 407
		var zeroRecords = lang.sZeroRecords;                                                                                 // 408
	                                                                                                                      // 409
		/* Backwards compatibility - if there is no sEmptyTable given, then use the same as                                  // 410
		 * sZeroRecords - assuming that is given.                                                                            // 411
		 */                                                                                                                  // 412
		if ( ! lang.sEmptyTable && zeroRecords &&                                                                            // 413
			defaults.sEmptyTable === "No data available in table" )                                                             // 414
		{                                                                                                                    // 415
			_fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );                                                                // 416
		}                                                                                                                    // 417
	                                                                                                                      // 418
		/* Likewise with loading records */                                                                                  // 419
		if ( ! lang.sLoadingRecords && zeroRecords &&                                                                        // 420
			defaults.sLoadingRecords === "Loading..." )                                                                         // 421
		{                                                                                                                    // 422
			_fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );                                                            // 423
		}                                                                                                                    // 424
	                                                                                                                      // 425
		// Old parameter name of the thousands separator mapped onto the new                                                 // 426
		if ( lang.sInfoThousands ) {                                                                                         // 427
			lang.sThousands = lang.sInfoThousands;                                                                              // 428
		}                                                                                                                    // 429
	                                                                                                                      // 430
		var decimal = lang.sDecimal;                                                                                         // 431
		if ( decimal ) {                                                                                                     // 432
			_addNumericSort( decimal );                                                                                         // 433
		}                                                                                                                    // 434
	}                                                                                                                     // 435
	                                                                                                                      // 436
	                                                                                                                      // 437
	/**                                                                                                                   // 438
	 * Map one parameter onto another                                                                                     // 439
	 *  @param {object} o Object to map                                                                                   // 440
	 *  @param {*} knew The new parameter name                                                                            // 441
	 *  @param {*} old The old parameter name                                                                             // 442
	 */                                                                                                                   // 443
	var _fnCompatMap = function ( o, knew, old ) {                                                                        // 444
		if ( o[ knew ] !== undefined ) {                                                                                     // 445
			o[ old ] = o[ knew ];                                                                                               // 446
		}                                                                                                                    // 447
	};                                                                                                                    // 448
	                                                                                                                      // 449
	                                                                                                                      // 450
	/**                                                                                                                   // 451
	 * Provide backwards compatibility for the main DT options. Note that the new                                         // 452
	 * options are mapped onto the old parameters, so this is an external interface                                       // 453
	 * change only.                                                                                                       // 454
	 *  @param {object} init Object to map                                                                                // 455
	 */                                                                                                                   // 456
	function _fnCompatOpts ( init )                                                                                       // 457
	{                                                                                                                     // 458
		_fnCompatMap( init, 'ordering',      'bSort' );                                                                      // 459
		_fnCompatMap( init, 'orderMulti',    'bSortMulti' );                                                                 // 460
		_fnCompatMap( init, 'orderClasses',  'bSortClasses' );                                                               // 461
		_fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );                                                              // 462
		_fnCompatMap( init, 'order',         'aaSorting' );                                                                  // 463
		_fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );                                                             // 464
		_fnCompatMap( init, 'paging',        'bPaginate' );                                                                  // 465
		_fnCompatMap( init, 'pagingType',    'sPaginationType' );                                                            // 466
		_fnCompatMap( init, 'pageLength',    'iDisplayLength' );                                                             // 467
		_fnCompatMap( init, 'searching',     'bFilter' );                                                                    // 468
	                                                                                                                      // 469
		// Column search objects are in an array, so it needs to be converted                                                // 470
		// element by element                                                                                                // 471
		var searchCols = init.aoSearchCols;                                                                                  // 472
	                                                                                                                      // 473
		if ( searchCols ) {                                                                                                  // 474
			for ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {                                                              // 475
				if ( searchCols[i] ) {                                                                                             // 476
					_fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );                                                   // 477
				}                                                                                                                  // 478
			}                                                                                                                   // 479
		}                                                                                                                    // 480
	}                                                                                                                     // 481
	                                                                                                                      // 482
	                                                                                                                      // 483
	/**                                                                                                                   // 484
	 * Provide backwards compatibility for column options. Note that the new options                                      // 485
	 * are mapped onto the old parameters, so this is an external interface change                                        // 486
	 * only.                                                                                                              // 487
	 *  @param {object} init Object to map                                                                                // 488
	 */                                                                                                                   // 489
	function _fnCompatCols ( init )                                                                                       // 490
	{                                                                                                                     // 491
		_fnCompatMap( init, 'orderable',     'bSortable' );                                                                  // 492
		_fnCompatMap( init, 'orderData',     'aDataSort' );                                                                  // 493
		_fnCompatMap( init, 'orderSequence', 'asSorting' );                                                                  // 494
		_fnCompatMap( init, 'orderDataType', 'sortDataType' );                                                               // 495
	                                                                                                                      // 496
		// orderData can be given as an integer                                                                              // 497
		var dataSort = init.aDataSort;                                                                                       // 498
		if ( dataSort && ! $.isArray( dataSort ) ) {                                                                         // 499
			init.aDataSort = [ dataSort ];                                                                                      // 500
		}                                                                                                                    // 501
	}                                                                                                                     // 502
	                                                                                                                      // 503
	                                                                                                                      // 504
	/**                                                                                                                   // 505
	 * Browser feature detection for capabilities, quirks                                                                 // 506
	 *  @param {object} settings dataTables settings object                                                               // 507
	 *  @memberof DataTable#oApi                                                                                          // 508
	 */                                                                                                                   // 509
	function _fnBrowserDetect( settings )                                                                                 // 510
	{                                                                                                                     // 511
		var browser = settings.oBrowser;                                                                                     // 512
	                                                                                                                      // 513
		// Scrolling feature / quirks detection                                                                              // 514
		var n = $('<div/>')                                                                                                  // 515
			.css( {                                                                                                             // 516
				position: 'absolute',                                                                                              // 517
				top: 0,                                                                                                            // 518
				left: 0,                                                                                                           // 519
				height: 1,                                                                                                         // 520
				width: 1,                                                                                                          // 521
				overflow: 'hidden'                                                                                                 // 522
			} )                                                                                                                 // 523
			.append(                                                                                                            // 524
				$('<div/>')                                                                                                        // 525
					.css( {                                                                                                           // 526
						position: 'absolute',                                                                                            // 527
						top: 1,                                                                                                          // 528
						left: 1,                                                                                                         // 529
						width: 100,                                                                                                      // 530
						overflow: 'scroll'                                                                                               // 531
					} )                                                                                                               // 532
					.append(                                                                                                          // 533
						$('<div class="test"/>')                                                                                         // 534
							.css( {                                                                                                         // 535
								width: '100%',                                                                                                 // 536
								height: 10                                                                                                     // 537
							} )                                                                                                             // 538
					)                                                                                                                 // 539
			)                                                                                                                   // 540
			.appendTo( 'body' );                                                                                                // 541
	                                                                                                                      // 542
		var test = n.find('.test');                                                                                          // 543
	                                                                                                                      // 544
		// IE6/7 will oversize a width 100% element inside a scrolling element, to                                           // 545
		// include the width of the scrollbar, while other browsers ensure the inner                                         // 546
		// element is contained without forcing scrolling                                                                    // 547
		browser.bScrollOversize = test[0].offsetWidth === 100;                                                               // 548
	                                                                                                                      // 549
		// In rtl text layout, some browsers (most, but not all) will place the                                              // 550
		// scrollbar on the left, rather than the right.                                                                     // 551
		browser.bScrollbarLeft = Math.round( test.offset().left ) !== 1;                                                     // 552
	                                                                                                                      // 553
		n.remove();                                                                                                          // 554
	}                                                                                                                     // 555
	                                                                                                                      // 556
	                                                                                                                      // 557
	/**                                                                                                                   // 558
	 * Array.prototype reduce[Right] method, used for browsers which don't support                                        // 559
	 * JS 1.6. Done this way to reduce code size, since we iterate either way                                             // 560
	 *  @param {object} settings dataTables settings object                                                               // 561
	 *  @memberof DataTable#oApi                                                                                          // 562
	 */                                                                                                                   // 563
	function _fnReduce ( that, fn, init, start, end, inc )                                                                // 564
	{                                                                                                                     // 565
		var                                                                                                                  // 566
			i = start,                                                                                                          // 567
			value,                                                                                                              // 568
			isSet = false;                                                                                                      // 569
	                                                                                                                      // 570
		if ( init !== undefined ) {                                                                                          // 571
			value = init;                                                                                                       // 572
			isSet = true;                                                                                                       // 573
		}                                                                                                                    // 574
	                                                                                                                      // 575
		while ( i !== end ) {                                                                                                // 576
			if ( ! that.hasOwnProperty(i) ) {                                                                                   // 577
				continue;                                                                                                          // 578
			}                                                                                                                   // 579
	                                                                                                                      // 580
			value = isSet ?                                                                                                     // 581
				fn( value, that[i], i, that ) :                                                                                    // 582
				that[i];                                                                                                           // 583
	                                                                                                                      // 584
			isSet = true;                                                                                                       // 585
			i += inc;                                                                                                           // 586
		}                                                                                                                    // 587
	                                                                                                                      // 588
		return value;                                                                                                        // 589
	}                                                                                                                     // 590
	                                                                                                                      // 591
	/**                                                                                                                   // 592
	 * Add a column to the list used for the table with default values                                                    // 593
	 *  @param {object} oSettings dataTables settings object                                                              // 594
	 *  @param {node} nTh The th element for this column                                                                  // 595
	 *  @memberof DataTable#oApi                                                                                          // 596
	 */                                                                                                                   // 597
	function _fnAddColumn( oSettings, nTh )                                                                               // 598
	{                                                                                                                     // 599
		// Add column to aoColumns array                                                                                     // 600
		var oDefaults = DataTable.defaults.column;                                                                           // 601
		var iCol = oSettings.aoColumns.length;                                                                               // 602
		var oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {                                                      // 603
			"nTh": nTh ? nTh : document.createElement('th'),                                                                    // 604
			"sTitle":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',                                  // 605
			"aDataSort": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],                                                    // 606
			"mData": oDefaults.mData ? oDefaults.mData : iCol,                                                                  // 607
			idx: iCol                                                                                                           // 608
		} );                                                                                                                 // 609
		oSettings.aoColumns.push( oCol );                                                                                    // 610
	                                                                                                                      // 611
		// Add search object for column specific search. Note that the `searchCols[ iCol ]`                                  // 612
		// passed into extend can be undefined. This allows the user to give a default                                       // 613
		// with only some of the parameters defined, and also not give a default                                             // 614
		var searchCols = oSettings.aoPreSearchCols;                                                                          // 615
		searchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );                                   // 616
	                                                                                                                      // 617
		// Use the default column options function to initialise classes etc                                                 // 618
		_fnColumnOptions( oSettings, iCol, $(nTh).data() );                                                                  // 619
	}                                                                                                                     // 620
	                                                                                                                      // 621
	                                                                                                                      // 622
	/**                                                                                                                   // 623
	 * Apply options for a column                                                                                         // 624
	 *  @param {object} oSettings dataTables settings object                                                              // 625
	 *  @param {int} iCol column index to consider                                                                        // 626
	 *  @param {object} oOptions object with sType, bVisible and bSearchable etc                                          // 627
	 *  @memberof DataTable#oApi                                                                                          // 628
	 */                                                                                                                   // 629
	function _fnColumnOptions( oSettings, iCol, oOptions )                                                                // 630
	{                                                                                                                     // 631
		var oCol = oSettings.aoColumns[ iCol ];                                                                              // 632
		var oClasses = oSettings.oClasses;                                                                                   // 633
		var th = $(oCol.nTh);                                                                                                // 634
	                                                                                                                      // 635
		// Try to get width information from the DOM. We can't get it from CSS                                               // 636
		// as we'd need to parse the CSS stylesheet. `width` option can override                                             // 637
		if ( ! oCol.sWidthOrig ) {                                                                                           // 638
			// Width attribute                                                                                                  // 639
			oCol.sWidthOrig = th.attr('width') || null;                                                                         // 640
	                                                                                                                      // 641
			// Style attribute                                                                                                  // 642
			var t = (th.attr('style') || '').match(/width:\s*(\d+[pxem%]+)/);                                                   // 643
			if ( t ) {                                                                                                          // 644
				oCol.sWidthOrig = t[1];                                                                                            // 645
			}                                                                                                                   // 646
		}                                                                                                                    // 647
	                                                                                                                      // 648
		/* User specified column options */                                                                                  // 649
		if ( oOptions !== undefined && oOptions !== null )                                                                   // 650
		{                                                                                                                    // 651
			// Backwards compatibility                                                                                          // 652
			_fnCompatCols( oOptions );                                                                                          // 653
	                                                                                                                      // 654
			// Map camel case parameters to their Hungarian counterparts                                                        // 655
			_fnCamelToHungarian( DataTable.defaults.column, oOptions );                                                         // 656
	                                                                                                                      // 657
			/* Backwards compatibility for mDataProp */                                                                         // 658
			if ( oOptions.mDataProp !== undefined && !oOptions.mData )                                                          // 659
			{                                                                                                                   // 660
				oOptions.mData = oOptions.mDataProp;                                                                               // 661
			}                                                                                                                   // 662
	                                                                                                                      // 663
			if ( oOptions.sType )                                                                                               // 664
			{                                                                                                                   // 665
				oCol._sManualType = oOptions.sType;                                                                                // 666
			}                                                                                                                   // 667
	                                                                                                                      // 668
			// `class` is a reserved word in Javascript, so we need to provide                                                  // 669
			// the ability to use a valid name for the camel case input                                                         // 670
			if ( oOptions.className && ! oOptions.sClass )                                                                      // 671
			{                                                                                                                   // 672
				oOptions.sClass = oOptions.className;                                                                              // 673
			}                                                                                                                   // 674
	                                                                                                                      // 675
			$.extend( oCol, oOptions );                                                                                         // 676
			_fnMap( oCol, oOptions, "sWidth", "sWidthOrig" );                                                                   // 677
	                                                                                                                      // 678
			/* iDataSort to be applied (backwards compatibility), but aDataSort will take                                       // 679
			 * priority if defined                                                                                              // 680
			 */                                                                                                                 // 681
			if ( oOptions.iDataSort !== undefined )                                                                             // 682
			{                                                                                                                   // 683
				oCol.aDataSort = [ oOptions.iDataSort ];                                                                           // 684
			}                                                                                                                   // 685
			_fnMap( oCol, oOptions, "aDataSort" );                                                                              // 686
		}                                                                                                                    // 687
	                                                                                                                      // 688
		/* Cache the data get and set functions for speed */                                                                 // 689
		var mDataSrc = oCol.mData;                                                                                           // 690
		var mData = _fnGetObjectDataFn( mDataSrc );                                                                          // 691
		var mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;                                              // 692
	                                                                                                                      // 693
		var attrTest = function( src ) {                                                                                     // 694
			return typeof src === 'string' && src.indexOf('@') !== -1;                                                          // 695
		};                                                                                                                   // 696
		oCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (                                                                    // 697
			attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)                                     // 698
		);                                                                                                                   // 699
	                                                                                                                      // 700
		oCol.fnGetData = function (rowData, type, meta) {                                                                    // 701
			var innerData = mData( rowData, type, undefined, meta );                                                            // 702
	                                                                                                                      // 703
			return mRender && type ?                                                                                            // 704
				mRender( innerData, type, rowData, meta ) :                                                                        // 705
				innerData;                                                                                                         // 706
		};                                                                                                                   // 707
		oCol.fnSetData = function ( rowData, val, meta ) {                                                                   // 708
			return _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );                                                        // 709
		};                                                                                                                   // 710
	                                                                                                                      // 711
		// Indicate if DataTables should read DOM data as an object or array                                                 // 712
		// Used in _fnGetRowElements                                                                                         // 713
		if ( typeof mDataSrc !== 'number' ) {                                                                                // 714
			oSettings._rowReadObject = true;                                                                                    // 715
		}                                                                                                                    // 716
	                                                                                                                      // 717
		/* Feature sorting overrides column specific when off */                                                             // 718
		if ( !oSettings.oFeatures.bSort )                                                                                    // 719
		{                                                                                                                    // 720
			oCol.bSortable = false;                                                                                             // 721
			th.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called                        // 722
		}                                                                                                                    // 723
	                                                                                                                      // 724
		/* Check that the class assignment is correct for sorting */                                                         // 725
		var bAsc = $.inArray('asc', oCol.asSorting) !== -1;                                                                  // 726
		var bDesc = $.inArray('desc', oCol.asSorting) !== -1;                                                                // 727
		if ( !oCol.bSortable || (!bAsc && !bDesc) )                                                                          // 728
		{                                                                                                                    // 729
			oCol.sSortingClass = oClasses.sSortableNone;                                                                        // 730
			oCol.sSortingClassJUI = "";                                                                                         // 731
		}                                                                                                                    // 732
		else if ( bAsc && !bDesc )                                                                                           // 733
		{                                                                                                                    // 734
			oCol.sSortingClass = oClasses.sSortableAsc;                                                                         // 735
			oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;                                                                // 736
		}                                                                                                                    // 737
		else if ( !bAsc && bDesc )                                                                                           // 738
		{                                                                                                                    // 739
			oCol.sSortingClass = oClasses.sSortableDesc;                                                                        // 740
			oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;                                                               // 741
		}                                                                                                                    // 742
		else                                                                                                                 // 743
		{                                                                                                                    // 744
			oCol.sSortingClass = oClasses.sSortable;                                                                            // 745
			oCol.sSortingClassJUI = oClasses.sSortJUI;                                                                          // 746
		}                                                                                                                    // 747
	}                                                                                                                     // 748
	                                                                                                                      // 749
	                                                                                                                      // 750
	/**                                                                                                                   // 751
	 * Adjust the table column widths for new data. Note: you would probably want to                                      // 752
	 * do a redraw after calling this function!                                                                           // 753
	 *  @param {object} settings dataTables settings object                                                               // 754
	 *  @memberof DataTable#oApi                                                                                          // 755
	 */                                                                                                                   // 756
	function _fnAdjustColumnSizing ( settings )                                                                           // 757
	{                                                                                                                     // 758
		/* Not interested in doing column width calculation if auto-width is disabled */                                     // 759
		if ( settings.oFeatures.bAutoWidth !== false )                                                                       // 760
		{                                                                                                                    // 761
			var columns = settings.aoColumns;                                                                                   // 762
	                                                                                                                      // 763
			_fnCalculateColumnWidths( settings );                                                                               // 764
			for ( var i=0 , iLen=columns.length ; i<iLen ; i++ )                                                                // 765
			{                                                                                                                   // 766
				columns[i].nTh.style.width = columns[i].sWidth;                                                                    // 767
			}                                                                                                                   // 768
		}                                                                                                                    // 769
	                                                                                                                      // 770
		var scroll = settings.oScroll;                                                                                       // 771
		if ( scroll.sY !== '' || scroll.sX !== '')                                                                           // 772
		{                                                                                                                    // 773
			_fnScrollDraw( settings );                                                                                          // 774
		}                                                                                                                    // 775
	                                                                                                                      // 776
		_fnCallbackFire( settings, null, 'column-sizing', [settings] );                                                      // 777
	}                                                                                                                     // 778
	                                                                                                                      // 779
	                                                                                                                      // 780
	/**                                                                                                                   // 781
	 * Covert the index of a visible column to the index in the data array (take account                                  // 782
	 * of hidden columns)                                                                                                 // 783
	 *  @param {object} oSettings dataTables settings object                                                              // 784
	 *  @param {int} iMatch Visible column index to lookup                                                                // 785
	 *  @returns {int} i the data index                                                                                   // 786
	 *  @memberof DataTable#oApi                                                                                          // 787
	 */                                                                                                                   // 788
	function _fnVisibleToColumnIndex( oSettings, iMatch )                                                                 // 789
	{                                                                                                                     // 790
		var aiVis = _fnGetColumns( oSettings, 'bVisible' );                                                                  // 791
	                                                                                                                      // 792
		return typeof aiVis[iMatch] === 'number' ?                                                                           // 793
			aiVis[iMatch] :                                                                                                     // 794
			null;                                                                                                               // 795
	}                                                                                                                     // 796
	                                                                                                                      // 797
	                                                                                                                      // 798
	/**                                                                                                                   // 799
	 * Covert the index of an index in the data array and convert it to the visible                                       // 800
	 *   column index (take account of hidden columns)                                                                    // 801
	 *  @param {int} iMatch Column index to lookup                                                                        // 802
	 *  @param {object} oSettings dataTables settings object                                                              // 803
	 *  @returns {int} i the data index                                                                                   // 804
	 *  @memberof DataTable#oApi                                                                                          // 805
	 */                                                                                                                   // 806
	function _fnColumnIndexToVisible( oSettings, iMatch )                                                                 // 807
	{                                                                                                                     // 808
		var aiVis = _fnGetColumns( oSettings, 'bVisible' );                                                                  // 809
		var iPos = $.inArray( iMatch, aiVis );                                                                               // 810
	                                                                                                                      // 811
		return iPos !== -1 ? iPos : null;                                                                                    // 812
	}                                                                                                                     // 813
	                                                                                                                      // 814
	                                                                                                                      // 815
	/**                                                                                                                   // 816
	 * Get the number of visible columns                                                                                  // 817
	 *  @param {object} oSettings dataTables settings object                                                              // 818
	 *  @returns {int} i the number of visible columns                                                                    // 819
	 *  @memberof DataTable#oApi                                                                                          // 820
	 */                                                                                                                   // 821
	function _fnVisbleColumns( oSettings )                                                                                // 822
	{                                                                                                                     // 823
		return _fnGetColumns( oSettings, 'bVisible' ).length;                                                                // 824
	}                                                                                                                     // 825
	                                                                                                                      // 826
	                                                                                                                      // 827
	/**                                                                                                                   // 828
	 * Get an array of column indexes that match a given property                                                         // 829
	 *  @param {object} oSettings dataTables settings object                                                              // 830
	 *  @param {string} sParam Parameter in aoColumns to look for - typically                                             // 831
	 *    bVisible or bSearchable                                                                                         // 832
	 *  @returns {array} Array of indexes with matched properties                                                         // 833
	 *  @memberof DataTable#oApi                                                                                          // 834
	 */                                                                                                                   // 835
	function _fnGetColumns( oSettings, sParam )                                                                           // 836
	{                                                                                                                     // 837
		var a = [];                                                                                                          // 838
	                                                                                                                      // 839
		$.map( oSettings.aoColumns, function(val, i) {                                                                       // 840
			if ( val[sParam] ) {                                                                                                // 841
				a.push( i );                                                                                                       // 842
			}                                                                                                                   // 843
		} );                                                                                                                 // 844
	                                                                                                                      // 845
		return a;                                                                                                            // 846
	}                                                                                                                     // 847
	                                                                                                                      // 848
	                                                                                                                      // 849
	/**                                                                                                                   // 850
	 * Calculate the 'type' of a column                                                                                   // 851
	 *  @param {object} settings dataTables settings object                                                               // 852
	 *  @memberof DataTable#oApi                                                                                          // 853
	 */                                                                                                                   // 854
	function _fnColumnTypes ( settings )                                                                                  // 855
	{                                                                                                                     // 856
		var columns = settings.aoColumns;                                                                                    // 857
		var data = settings.aoData;                                                                                          // 858
		var types = DataTable.ext.type.detect;                                                                               // 859
		var i, ien, j, jen, k, ken;                                                                                          // 860
		var col, cell, detectedType, cache;                                                                                  // 861
	                                                                                                                      // 862
		// For each column, spin over the                                                                                    // 863
		for ( i=0, ien=columns.length ; i<ien ; i++ ) {                                                                      // 864
			col = columns[i];                                                                                                   // 865
			cache = [];                                                                                                         // 866
	                                                                                                                      // 867
			if ( ! col.sType && col._sManualType ) {                                                                            // 868
				col.sType = col._sManualType;                                                                                      // 869
			}                                                                                                                   // 870
			else if ( ! col.sType ) {                                                                                           // 871
				for ( j=0, jen=types.length ; j<jen ; j++ ) {                                                                      // 872
					for ( k=0, ken=data.length ; k<ken ; k++ ) {                                                                      // 873
						// Use a cache array so we only need to get the type data                                                        // 874
						// from the formatter once (when using multiple detectors)                                                       // 875
						if ( cache[k] === undefined ) {                                                                                  // 876
							cache[k] = _fnGetCellData( settings, k, i, 'type' );                                                            // 877
						}                                                                                                                // 878
	                                                                                                                      // 879
						detectedType = types[j]( cache[k], settings );                                                                   // 880
	                                                                                                                      // 881
						// If null, then this type can't apply to this column, so                                                        // 882
						// rather than testing all cells, break out. There is an                                                         // 883
						// exception for the last type which is `html`. We need to                                                       // 884
						// scan all rows since it is possible to mix string and HTML                                                     // 885
						// types                                                                                                         // 886
						if ( ! detectedType && j !== types.length-1 ) {                                                                  // 887
							break;                                                                                                          // 888
						}                                                                                                                // 889
	                                                                                                                      // 890
						// Only a single match is needed for html type since it is                                                       // 891
						// bottom of the pile and very similar to string                                                                 // 892
						if ( detectedType === 'html' ) {                                                                                 // 893
							break;                                                                                                          // 894
						}                                                                                                                // 895
					}                                                                                                                 // 896
	                                                                                                                      // 897
					// Type is valid for all data points in the column - use this                                                     // 898
					// type                                                                                                           // 899
					if ( detectedType ) {                                                                                             // 900
						col.sType = detectedType;                                                                                        // 901
						break;                                                                                                           // 902
					}                                                                                                                 // 903
				}                                                                                                                  // 904
	                                                                                                                      // 905
				// Fall back - if no type was detected, always use string                                                          // 906
				if ( ! col.sType ) {                                                                                               // 907
					col.sType = 'string';                                                                                             // 908
				}                                                                                                                  // 909
			}                                                                                                                   // 910
		}                                                                                                                    // 911
	}                                                                                                                     // 912
	                                                                                                                      // 913
	                                                                                                                      // 914
	/**                                                                                                                   // 915
	 * Take the column definitions and static columns arrays and calculate how                                            // 916
	 * they relate to column indexes. The callback function will then apply the                                           // 917
	 * definition found for a column to a suitable configuration object.                                                  // 918
	 *  @param {object} oSettings dataTables settings object                                                              // 919
	 *  @param {array} aoColDefs The aoColumnDefs array that is to be applied                                             // 920
	 *  @param {array} aoCols The aoColumns array that defines columns individually                                       // 921
	 *  @param {function} fn Callback function - takes two parameters, the calculated                                     // 922
	 *    column index and the definition for that column.                                                                // 923
	 *  @memberof DataTable#oApi                                                                                          // 924
	 */                                                                                                                   // 925
	function _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )                                                       // 926
	{                                                                                                                     // 927
		var i, iLen, j, jLen, k, kLen, def;                                                                                  // 928
		var columns = oSettings.aoColumns;                                                                                   // 929
	                                                                                                                      // 930
		// Column definitions with aTargets                                                                                  // 931
		if ( aoColDefs )                                                                                                     // 932
		{                                                                                                                    // 933
			/* Loop over the definitions array - loop in reverse so first instance has priority */                              // 934
			for ( i=aoColDefs.length-1 ; i>=0 ; i-- )                                                                           // 935
			{                                                                                                                   // 936
				def = aoColDefs[i];                                                                                                // 937
	                                                                                                                      // 938
				/* Each definition can target multiple columns, as it is an array */                                               // 939
				var aTargets = def.targets !== undefined ?                                                                         // 940
					def.targets :                                                                                                     // 941
					def.aTargets;                                                                                                     // 942
	                                                                                                                      // 943
				if ( ! $.isArray( aTargets ) )                                                                                     // 944
				{                                                                                                                  // 945
					aTargets = [ aTargets ];                                                                                          // 946
				}                                                                                                                  // 947
	                                                                                                                      // 948
				for ( j=0, jLen=aTargets.length ; j<jLen ; j++ )                                                                   // 949
				{                                                                                                                  // 950
					if ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )                                                        // 951
					{                                                                                                                 // 952
						/* Add columns that we don't yet know about */                                                                   // 953
						while( columns.length <= aTargets[j] )                                                                           // 954
						{                                                                                                                // 955
							_fnAddColumn( oSettings );                                                                                      // 956
						}                                                                                                                // 957
	                                                                                                                      // 958
						/* Integer, basic index */                                                                                       // 959
						fn( aTargets[j], def );                                                                                          // 960
					}                                                                                                                 // 961
					else if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )                                                    // 962
					{                                                                                                                 // 963
						/* Negative integer, right to left column counting */                                                            // 964
						fn( columns.length+aTargets[j], def );                                                                           // 965
					}                                                                                                                 // 966
					else if ( typeof aTargets[j] === 'string' )                                                                       // 967
					{                                                                                                                 // 968
						/* Class name matching on TH element */                                                                          // 969
						for ( k=0, kLen=columns.length ; k<kLen ; k++ )                                                                  // 970
						{                                                                                                                // 971
							if ( aTargets[j] == "_all" ||                                                                                   // 972
							     $(columns[k].nTh).hasClass( aTargets[j] ) )                                                                // 973
							{                                                                                                               // 974
								fn( k, def );                                                                                                  // 975
							}                                                                                                               // 976
						}                                                                                                                // 977
					}                                                                                                                 // 978
				}                                                                                                                  // 979
			}                                                                                                                   // 980
		}                                                                                                                    // 981
	                                                                                                                      // 982
		// Statically defined columns array                                                                                  // 983
		if ( aoCols )                                                                                                        // 984
		{                                                                                                                    // 985
			for ( i=0, iLen=aoCols.length ; i<iLen ; i++ )                                                                      // 986
			{                                                                                                                   // 987
				fn( i, aoCols[i] );                                                                                                // 988
			}                                                                                                                   // 989
		}                                                                                                                    // 990
	}                                                                                                                     // 991
	                                                                                                                      // 992
	/**                                                                                                                   // 993
	 * Add a data array to the table, creating DOM node etc. This is the parallel to                                      // 994
	 * _fnGatherData, but for adding rows from a Javascript source, rather than a                                         // 995
	 * DOM source.                                                                                                        // 996
	 *  @param {object} oSettings dataTables settings object                                                              // 997
	 *  @param {array} aData data array to be added                                                                       // 998
	 *  @param {node} [nTr] TR element to add to the table - optional. If not given,                                      // 999
	 *    DataTables will create a row automatically                                                                      // 1000
	 *  @param {array} [anTds] Array of TD|TH elements for the row - must be given                                        // 1001
	 *    if nTr is.                                                                                                      // 1002
	 *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed                                        // 1003
	 *  @memberof DataTable#oApi                                                                                          // 1004
	 */                                                                                                                   // 1005
	function _fnAddData ( oSettings, aDataIn, nTr, anTds )                                                                // 1006
	{                                                                                                                     // 1007
		/* Create the object for storing information about this new row */                                                   // 1008
		var iRow = oSettings.aoData.length;                                                                                  // 1009
		var oData = $.extend( true, {}, DataTable.models.oRow, {                                                             // 1010
			src: nTr ? 'dom' : 'data'                                                                                           // 1011
		} );                                                                                                                 // 1012
	                                                                                                                      // 1013
		oData._aData = aDataIn;                                                                                              // 1014
		oSettings.aoData.push( oData );                                                                                      // 1015
	                                                                                                                      // 1016
		/* Create the cells */                                                                                               // 1017
		var nTd, sThisType;                                                                                                  // 1018
		var columns = oSettings.aoColumns;                                                                                   // 1019
		for ( var i=0, iLen=columns.length ; i<iLen ; i++ )                                                                  // 1020
		{                                                                                                                    // 1021
			// When working with a row, the data source object must be populated. In                                            // 1022
			// all other cases, the data source object is already populated, so we                                              // 1023
			// don't overwrite it, which might break bindings etc                                                               // 1024
			if ( nTr ) {                                                                                                        // 1025
				_fnSetCellData( oSettings, iRow, i, _fnGetCellData( oSettings, iRow, i ) );                                        // 1026
			}                                                                                                                   // 1027
			columns[i].sType = null;                                                                                            // 1028
		}                                                                                                                    // 1029
	                                                                                                                      // 1030
		/* Add to the display array */                                                                                       // 1031
		oSettings.aiDisplayMaster.push( iRow );                                                                              // 1032
	                                                                                                                      // 1033
		/* Create the DOM information, or register it if already present */                                                  // 1034
		if ( nTr || ! oSettings.oFeatures.bDeferRender )                                                                     // 1035
		{                                                                                                                    // 1036
			_fnCreateTr( oSettings, iRow, nTr, anTds );                                                                         // 1037
		}                                                                                                                    // 1038
	                                                                                                                      // 1039
		return iRow;                                                                                                         // 1040
	}                                                                                                                     // 1041
	                                                                                                                      // 1042
	                                                                                                                      // 1043
	/**                                                                                                                   // 1044
	 * Add one or more TR elements to the table. Generally we'd expect to                                                 // 1045
	 * use this for reading data from a DOM sourced table, but it could be                                                // 1046
	 * used for an TR element. Note that if a TR is given, it is used (i.e.                                               // 1047
	 * it is not cloned).                                                                                                 // 1048
	 *  @param {object} settings dataTables settings object                                                               // 1049
	 *  @param {array|node|jQuery} trs The TR element(s) to add to the table                                              // 1050
	 *  @returns {array} Array of indexes for the added rows                                                              // 1051
	 *  @memberof DataTable#oApi                                                                                          // 1052
	 */                                                                                                                   // 1053
	function _fnAddTr( settings, trs )                                                                                    // 1054
	{                                                                                                                     // 1055
		var row;                                                                                                             // 1056
	                                                                                                                      // 1057
		// Allow an individual node to be passed in                                                                          // 1058
		if ( ! (trs instanceof $) ) {                                                                                        // 1059
			trs = $(trs);                                                                                                       // 1060
		}                                                                                                                    // 1061
	                                                                                                                      // 1062
		return trs.map( function (i, el) {                                                                                   // 1063
			row = _fnGetRowElements( settings, el );                                                                            // 1064
			return _fnAddData( settings, row.data, el, row.cells );                                                             // 1065
		} );                                                                                                                 // 1066
	}                                                                                                                     // 1067
	                                                                                                                      // 1068
	                                                                                                                      // 1069
	/**                                                                                                                   // 1070
	 * Take a TR element and convert it to an index in aoData                                                             // 1071
	 *  @param {object} oSettings dataTables settings object                                                              // 1072
	 *  @param {node} n the TR element to find                                                                            // 1073
	 *  @returns {int} index if the node is found, null if not                                                            // 1074
	 *  @memberof DataTable#oApi                                                                                          // 1075
	 */                                                                                                                   // 1076
	function _fnNodeToDataIndex( oSettings, n )                                                                           // 1077
	{                                                                                                                     // 1078
		return (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;                                                         // 1079
	}                                                                                                                     // 1080
	                                                                                                                      // 1081
	                                                                                                                      // 1082
	/**                                                                                                                   // 1083
	 * Take a TD element and convert it into a column data index (not the visible index)                                  // 1084
	 *  @param {object} oSettings dataTables settings object                                                              // 1085
	 *  @param {int} iRow The row number the TD/TH can be found in                                                        // 1086
	 *  @param {node} n The TD/TH element to find                                                                         // 1087
	 *  @returns {int} index if the node is found, -1 if not                                                              // 1088
	 *  @memberof DataTable#oApi                                                                                          // 1089
	 */                                                                                                                   // 1090
	function _fnNodeToColumnIndex( oSettings, iRow, n )                                                                   // 1091
	{                                                                                                                     // 1092
		return $.inArray( n, oSettings.aoData[ iRow ].anCells );                                                             // 1093
	}                                                                                                                     // 1094
	                                                                                                                      // 1095
	                                                                                                                      // 1096
	/**                                                                                                                   // 1097
	 * Get the data for a given cell from the internal cache, taking into account data mapping                            // 1098
	 *  @param {object} settings dataTables settings object                                                               // 1099
	 *  @param {int} rowIdx aoData row id                                                                                 // 1100
	 *  @param {int} colIdx Column index                                                                                  // 1101
	 *  @param {string} type data get type ('display', 'type' 'filter' 'sort')                                            // 1102
	 *  @returns {*} Cell data                                                                                            // 1103
	 *  @memberof DataTable#oApi                                                                                          // 1104
	 */                                                                                                                   // 1105
	function _fnGetCellData( settings, rowIdx, colIdx, type )                                                             // 1106
	{                                                                                                                     // 1107
		var draw           = settings.iDraw;                                                                                 // 1108
		var col            = settings.aoColumns[colIdx];                                                                     // 1109
		var rowData        = settings.aoData[rowIdx]._aData;                                                                 // 1110
		var defaultContent = col.sDefaultContent;                                                                            // 1111
		var cellData       = col.fnGetData( rowData, type, {                                                                 // 1112
			settings: settings,                                                                                                 // 1113
			row:      rowIdx,                                                                                                   // 1114
			col:      colIdx                                                                                                    // 1115
		} );                                                                                                                 // 1116
	                                                                                                                      // 1117
		if ( cellData === undefined ) {                                                                                      // 1118
			if ( settings.iDrawError != draw && defaultContent === null ) {                                                     // 1119
				_fnLog( settings, 0, "Requested unknown parameter "+                                                               // 1120
					(typeof col.mData=='function' ? '{function}' : "'"+col.mData+"'")+                                                // 1121
					" for row "+rowIdx, 4 );                                                                                          // 1122
				settings.iDrawError = draw;                                                                                        // 1123
			}                                                                                                                   // 1124
			return defaultContent;                                                                                              // 1125
		}                                                                                                                    // 1126
	                                                                                                                      // 1127
		/* When the data source is null, we can use default column data */                                                   // 1128
		if ( (cellData === rowData || cellData === null) && defaultContent !== null ) {                                      // 1129
			cellData = defaultContent;                                                                                          // 1130
		}                                                                                                                    // 1131
		else if ( typeof cellData === 'function' ) {                                                                         // 1132
			// If the data source is a function, then we run it and use the return,                                             // 1133
			// executing in the scope of the data object (for instances)                                                        // 1134
			return cellData.call( rowData );                                                                                    // 1135
		}                                                                                                                    // 1136
	                                                                                                                      // 1137
		if ( cellData === null && type == 'display' ) {                                                                      // 1138
			return '';                                                                                                          // 1139
		}                                                                                                                    // 1140
		return cellData;                                                                                                     // 1141
	}                                                                                                                     // 1142
	                                                                                                                      // 1143
	                                                                                                                      // 1144
	/**                                                                                                                   // 1145
	 * Set the value for a specific cell, into the internal data cache                                                    // 1146
	 *  @param {object} settings dataTables settings object                                                               // 1147
	 *  @param {int} rowIdx aoData row id                                                                                 // 1148
	 *  @param {int} colIdx Column index                                                                                  // 1149
	 *  @param {*} val Value to set                                                                                       // 1150
	 *  @memberof DataTable#oApi                                                                                          // 1151
	 */                                                                                                                   // 1152
	function _fnSetCellData( settings, rowIdx, colIdx, val )                                                              // 1153
	{                                                                                                                     // 1154
		var col     = settings.aoColumns[colIdx];                                                                            // 1155
		var rowData = settings.aoData[rowIdx]._aData;                                                                        // 1156
	                                                                                                                      // 1157
		col.fnSetData( rowData, val, {                                                                                       // 1158
			settings: settings,                                                                                                 // 1159
			row:      rowIdx,                                                                                                   // 1160
			col:      colIdx                                                                                                    // 1161
		}  );                                                                                                                // 1162
	}                                                                                                                     // 1163
	                                                                                                                      // 1164
	                                                                                                                      // 1165
	// Private variable that is used to match action syntax in the data property object                                   // 1166
	var __reArray = /\[.*?\]$/;                                                                                           // 1167
	var __reFn = /\(\)$/;                                                                                                 // 1168
	                                                                                                                      // 1169
	/**                                                                                                                   // 1170
	 * Split string on periods, taking into account escaped periods                                                       // 1171
	 * @param  {string} str String to split                                                                               // 1172
	 * @return {array} Split string                                                                                       // 1173
	 */                                                                                                                   // 1174
	function _fnSplitObjNotation( str )                                                                                   // 1175
	{                                                                                                                     // 1176
		return $.map( str.match(/(\\.|[^\.])+/g), function ( s ) {                                                           // 1177
			return s.replace(/\\./g, '.');                                                                                      // 1178
		} );                                                                                                                 // 1179
	}                                                                                                                     // 1180
	                                                                                                                      // 1181
	                                                                                                                      // 1182
	/**                                                                                                                   // 1183
	 * Return a function that can be used to get data from a source object, taking                                        // 1184
	 * into account the ability to use nested objects as a source                                                         // 1185
	 *  @param {string|int|function} mSource The data source for the object                                               // 1186
	 *  @returns {function} Data get function                                                                             // 1187
	 *  @memberof DataTable#oApi                                                                                          // 1188
	 */                                                                                                                   // 1189
	function _fnGetObjectDataFn( mSource )                                                                                // 1190
	{                                                                                                                     // 1191
		if ( $.isPlainObject( mSource ) )                                                                                    // 1192
		{                                                                                                                    // 1193
			/* Build an object of get functions, and wrap them in a single call */                                              // 1194
			var o = {};                                                                                                         // 1195
			$.each( mSource, function (key, val) {                                                                              // 1196
				if ( val ) {                                                                                                       // 1197
					o[key] = _fnGetObjectDataFn( val );                                                                               // 1198
				}                                                                                                                  // 1199
			} );                                                                                                                // 1200
	                                                                                                                      // 1201
			return function (data, type, row, meta) {                                                                           // 1202
				var t = o[type] || o._;                                                                                            // 1203
				return t !== undefined ?                                                                                           // 1204
					t(data, type, row, meta) :                                                                                        // 1205
					data;                                                                                                             // 1206
			};                                                                                                                  // 1207
		}                                                                                                                    // 1208
		else if ( mSource === null )                                                                                         // 1209
		{                                                                                                                    // 1210
			/* Give an empty string for rendering / sorting etc */                                                              // 1211
			return function (data) { // type, row and meta also passed, but not used                                            // 1212
				return data;                                                                                                       // 1213
			};                                                                                                                  // 1214
		}                                                                                                                    // 1215
		else if ( typeof mSource === 'function' )                                                                            // 1216
		{                                                                                                                    // 1217
			return function (data, type, row, meta) {                                                                           // 1218
				return mSource( data, type, row, meta );                                                                           // 1219
			};                                                                                                                  // 1220
		}                                                                                                                    // 1221
		else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||                                             // 1222
			      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )                                                 // 1223
		{                                                                                                                    // 1224
			/* If there is a . in the source string then the data source is in a                                                // 1225
			 * nested object so we loop over the data for each level to get the next                                            // 1226
			 * level down. On each loop we test for undefined, and if found immediately                                         // 1227
			 * return. This allows entire objects to be missing and sDefaultContent to                                          // 1228
			 * be used if defined, rather than throwing an error                                                                // 1229
			 */                                                                                                                 // 1230
			var fetchData = function (data, type, src) {                                                                        // 1231
				var arrayNotation, funcNotation, out, innerSrc;                                                                    // 1232
	                                                                                                                      // 1233
				if ( src !== "" )                                                                                                  // 1234
				{                                                                                                                  // 1235
					var a = _fnSplitObjNotation( src );                                                                               // 1236
	                                                                                                                      // 1237
					for ( var i=0, iLen=a.length ; i<iLen ; i++ )                                                                     // 1238
					{                                                                                                                 // 1239
						// Check if we are dealing with special notation                                                                 // 1240
						arrayNotation = a[i].match(__reArray);                                                                           // 1241
						funcNotation = a[i].match(__reFn);                                                                               // 1242
	                                                                                                                      // 1243
						if ( arrayNotation )                                                                                             // 1244
						{                                                                                                                // 1245
							// Array notation                                                                                               // 1246
							a[i] = a[i].replace(__reArray, '');                                                                             // 1247
	                                                                                                                      // 1248
							// Condition allows simply [] to be passed in                                                                   // 1249
							if ( a[i] !== "" ) {                                                                                            // 1250
								data = data[ a[i] ];                                                                                           // 1251
							}                                                                                                               // 1252
							out = [];                                                                                                       // 1253
	                                                                                                                      // 1254
							// Get the remainder of the nested object to get                                                                // 1255
							a.splice( 0, i+1 );                                                                                             // 1256
							innerSrc = a.join('.');                                                                                         // 1257
	                                                                                                                      // 1258
							// Traverse each entry in the array getting the properties requested                                            // 1259
							for ( var j=0, jLen=data.length ; j<jLen ; j++ ) {                                                              // 1260
								out.push( fetchData( data[j], type, innerSrc ) );                                                              // 1261
							}                                                                                                               // 1262
	                                                                                                                      // 1263
							// If a string is given in between the array notation indicators, that                                          // 1264
							// is used to join the strings together, otherwise an array is returned                                         // 1265
							var join = arrayNotation[0].substring(1, arrayNotation[0].length-1);                                            // 1266
							data = (join==="") ? out : out.join(join);                                                                      // 1267
	                                                                                                                      // 1268
							// The inner call to fetchData has already traversed through the remainder                                      // 1269
							// of the source requested, so we exit from the loop                                                            // 1270
							break;                                                                                                          // 1271
						}                                                                                                                // 1272
						else if ( funcNotation )                                                                                         // 1273
						{                                                                                                                // 1274
							// Function call                                                                                                // 1275
							a[i] = a[i].replace(__reFn, '');                                                                                // 1276
							data = data[ a[i] ]();                                                                                          // 1277
							continue;                                                                                                       // 1278
						}                                                                                                                // 1279
	                                                                                                                      // 1280
						if ( data === null || data[ a[i] ] === undefined )                                                               // 1281
						{                                                                                                                // 1282
							return undefined;                                                                                               // 1283
						}                                                                                                                // 1284
						data = data[ a[i] ];                                                                                             // 1285
					}                                                                                                                 // 1286
				}                                                                                                                  // 1287
	                                                                                                                      // 1288
				return data;                                                                                                       // 1289
			};                                                                                                                  // 1290
	                                                                                                                      // 1291
			return function (data, type) { // row and meta also passed, but not used                                            // 1292
				return fetchData( data, type, mSource );                                                                           // 1293
			};                                                                                                                  // 1294
		}                                                                                                                    // 1295
		else                                                                                                                 // 1296
		{                                                                                                                    // 1297
			/* Array or flat object mapping */                                                                                  // 1298
			return function (data, type) { // row and meta also passed, but not used                                            // 1299
				return data[mSource];                                                                                              // 1300
			};                                                                                                                  // 1301
		}                                                                                                                    // 1302
	}                                                                                                                     // 1303
	                                                                                                                      // 1304
	                                                                                                                      // 1305
	/**                                                                                                                   // 1306
	 * Return a function that can be used to set data from a source object, taking                                        // 1307
	 * into account the ability to use nested objects as a source                                                         // 1308
	 *  @param {string|int|function} mSource The data source for the object                                               // 1309
	 *  @returns {function} Data set function                                                                             // 1310
	 *  @memberof DataTable#oApi                                                                                          // 1311
	 */                                                                                                                   // 1312
	function _fnSetObjectDataFn( mSource )                                                                                // 1313
	{                                                                                                                     // 1314
		if ( $.isPlainObject( mSource ) )                                                                                    // 1315
		{                                                                                                                    // 1316
			/* Unlike get, only the underscore (global) option is used for for                                                  // 1317
			 * setting data since we don't know the type here. This is why an object                                            // 1318
			 * option is not documented for `mData` (which is read/write), but it is                                            // 1319
			 * for `mRender` which is read only.                                                                                // 1320
			 */                                                                                                                 // 1321
			return _fnSetObjectDataFn( mSource._ );                                                                             // 1322
		}                                                                                                                    // 1323
		else if ( mSource === null )                                                                                         // 1324
		{                                                                                                                    // 1325
			/* Nothing to do when the data source is null */                                                                    // 1326
			return function () {};                                                                                              // 1327
		}                                                                                                                    // 1328
		else if ( typeof mSource === 'function' )                                                                            // 1329
		{                                                                                                                    // 1330
			return function (data, val, meta) {                                                                                 // 1331
				mSource( data, 'set', val, meta );                                                                                 // 1332
			};                                                                                                                  // 1333
		}                                                                                                                    // 1334
		else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||                                             // 1335
			      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )                                                 // 1336
		{                                                                                                                    // 1337
			/* Like the get, we need to get data from a nested object */                                                        // 1338
			var setData = function (data, val, src) {                                                                           // 1339
				var a = _fnSplitObjNotation( src ), b;                                                                             // 1340
				var aLast = a[a.length-1];                                                                                         // 1341
				var arrayNotation, funcNotation, o, innerSrc;                                                                      // 1342
	                                                                                                                      // 1343
				for ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )                                                                    // 1344
				{                                                                                                                  // 1345
					// Check if we are dealing with an array notation request                                                         // 1346
					arrayNotation = a[i].match(__reArray);                                                                            // 1347
					funcNotation = a[i].match(__reFn);                                                                                // 1348
	                                                                                                                      // 1349
					if ( arrayNotation )                                                                                              // 1350
					{                                                                                                                 // 1351
						a[i] = a[i].replace(__reArray, '');                                                                              // 1352
						data[ a[i] ] = [];                                                                                               // 1353
	                                                                                                                      // 1354
						// Get the remainder of the nested object to set so we can recurse                                               // 1355
						b = a.slice();                                                                                                   // 1356
						b.splice( 0, i+1 );                                                                                              // 1357
						innerSrc = b.join('.');                                                                                          // 1358
	                                                                                                                      // 1359
						// Traverse each entry in the array setting the properties requested                                             // 1360
						for ( var j=0, jLen=val.length ; j<jLen ; j++ )                                                                  // 1361
						{                                                                                                                // 1362
							o = {};                                                                                                         // 1363
							setData( o, val[j], innerSrc );                                                                                 // 1364
							data[ a[i] ].push( o );                                                                                         // 1365
						}                                                                                                                // 1366
	                                                                                                                      // 1367
						// The inner call to setData has already traversed through the remainder                                         // 1368
						// of the source and has set the data, thus we can exit here                                                     // 1369
						return;                                                                                                          // 1370
					}                                                                                                                 // 1371
					else if ( funcNotation )                                                                                          // 1372
					{                                                                                                                 // 1373
						// Function call                                                                                                 // 1374
						a[i] = a[i].replace(__reFn, '');                                                                                 // 1375
						data = data[ a[i] ]( val );                                                                                      // 1376
					}                                                                                                                 // 1377
	                                                                                                                      // 1378
					// If the nested object doesn't currently exist - since we are                                                    // 1379
					// trying to set the value - create it                                                                            // 1380
					if ( data[ a[i] ] === null || data[ a[i] ] === undefined )                                                        // 1381
					{                                                                                                                 // 1382
						data[ a[i] ] = {};                                                                                               // 1383
					}                                                                                                                 // 1384
					data = data[ a[i] ];                                                                                              // 1385
				}                                                                                                                  // 1386
	                                                                                                                      // 1387
				// Last item in the input - i.e, the actual set                                                                    // 1388
				if ( aLast.match(__reFn ) )                                                                                        // 1389
				{                                                                                                                  // 1390
					// Function call                                                                                                  // 1391
					data = data[ aLast.replace(__reFn, '') ]( val );                                                                  // 1392
				}                                                                                                                  // 1393
				else                                                                                                               // 1394
				{                                                                                                                  // 1395
					// If array notation is used, we just want to strip it and use the property name                                  // 1396
					// and assign the value. If it isn't used, then we get the result we want anyway                                  // 1397
					data[ aLast.replace(__reArray, '') ] = val;                                                                       // 1398
				}                                                                                                                  // 1399
			};                                                                                                                  // 1400
	                                                                                                                      // 1401
			return function (data, val) { // meta is also passed in, but not used                                               // 1402
				return setData( data, val, mSource );                                                                              // 1403
			};                                                                                                                  // 1404
		}                                                                                                                    // 1405
		else                                                                                                                 // 1406
		{                                                                                                                    // 1407
			/* Array or flat object mapping */                                                                                  // 1408
			return function (data, val) { // meta is also passed in, but not used                                               // 1409
				data[mSource] = val;                                                                                               // 1410
			};                                                                                                                  // 1411
		}                                                                                                                    // 1412
	}                                                                                                                     // 1413
	                                                                                                                      // 1414
	                                                                                                                      // 1415
	/**                                                                                                                   // 1416
	 * Return an array with the full table data                                                                           // 1417
	 *  @param {object} oSettings dataTables settings object                                                              // 1418
	 *  @returns array {array} aData Master data array                                                                    // 1419
	 *  @memberof DataTable#oApi                                                                                          // 1420
	 */                                                                                                                   // 1421
	function _fnGetDataMaster ( settings )                                                                                // 1422
	{                                                                                                                     // 1423
		return _pluck( settings.aoData, '_aData' );                                                                          // 1424
	}                                                                                                                     // 1425
	                                                                                                                      // 1426
	                                                                                                                      // 1427
	/**                                                                                                                   // 1428
	 * Nuke the table                                                                                                     // 1429
	 *  @param {object} oSettings dataTables settings object                                                              // 1430
	 *  @memberof DataTable#oApi                                                                                          // 1431
	 */                                                                                                                   // 1432
	function _fnClearTable( settings )                                                                                    // 1433
	{                                                                                                                     // 1434
		settings.aoData.length = 0;                                                                                          // 1435
		settings.aiDisplayMaster.length = 0;                                                                                 // 1436
		settings.aiDisplay.length = 0;                                                                                       // 1437
	}                                                                                                                     // 1438
	                                                                                                                      // 1439
	                                                                                                                      // 1440
	 /**                                                                                                                  // 1441
	 * Take an array of integers (index array) and remove a target integer (value - not                                   // 1442
	 * the key!)                                                                                                          // 1443
	 *  @param {array} a Index array to target                                                                            // 1444
	 *  @param {int} iTarget value to find                                                                                // 1445
	 *  @memberof DataTable#oApi                                                                                          // 1446
	 */                                                                                                                   // 1447
	function _fnDeleteIndex( a, iTarget, splice )                                                                         // 1448
	{                                                                                                                     // 1449
		var iTargetIndex = -1;                                                                                               // 1450
	                                                                                                                      // 1451
		for ( var i=0, iLen=a.length ; i<iLen ; i++ )                                                                        // 1452
		{                                                                                                                    // 1453
			if ( a[i] == iTarget )                                                                                              // 1454
			{                                                                                                                   // 1455
				iTargetIndex = i;                                                                                                  // 1456
			}                                                                                                                   // 1457
			else if ( a[i] > iTarget )                                                                                          // 1458
			{                                                                                                                   // 1459
				a[i]--;                                                                                                            // 1460
			}                                                                                                                   // 1461
		}                                                                                                                    // 1462
	                                                                                                                      // 1463
		if ( iTargetIndex != -1 && splice === undefined )                                                                    // 1464
		{                                                                                                                    // 1465
			a.splice( iTargetIndex, 1 );                                                                                        // 1466
		}                                                                                                                    // 1467
	}                                                                                                                     // 1468
	                                                                                                                      // 1469
	                                                                                                                      // 1470
	/**                                                                                                                   // 1471
	 * Mark cached data as invalid such that a re-read of the data will occur when                                        // 1472
	 * the cached data is next requested. Also update from the data source object.                                        // 1473
	 *                                                                                                                    // 1474
	 * @param {object} settings DataTables settings object                                                                // 1475
	 * @param {int}    rowIdx   Row index to invalidate                                                                   // 1476
	 * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'                                       // 1477
	 *     or 'data'                                                                                                      // 1478
	 * @param {int}    [colIdx] Column index to invalidate. If undefined the whole                                        // 1479
	 *     row will be invalidated                                                                                        // 1480
	 * @memberof DataTable#oApi                                                                                           // 1481
	 *                                                                                                                    // 1482
	 * @todo For the modularisation of v1.11 this will need to become a callback, so                                      // 1483
	 *   the sort and filter methods can subscribe to it. That will required                                              // 1484
	 *   initialisation options for sorting, which is why it is not already baked in                                      // 1485
	 */                                                                                                                   // 1486
	function _fnInvalidate( settings, rowIdx, src, colIdx )                                                               // 1487
	{                                                                                                                     // 1488
		var row = settings.aoData[ rowIdx ];                                                                                 // 1489
		var i, ien;                                                                                                          // 1490
		var cellWrite = function ( cell, col ) {                                                                             // 1491
			// This is very frustrating, but in IE if you just write directly                                                   // 1492
			// to innerHTML, and elements that are overwritten are GC'ed,                                                       // 1493
			// even if there is a reference to them elsewhere                                                                   // 1494
			while ( cell.childNodes.length ) {                                                                                  // 1495
				cell.removeChild( cell.firstChild );                                                                               // 1496
			}                                                                                                                   // 1497
	                                                                                                                      // 1498
			cell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );                                                // 1499
		};                                                                                                                   // 1500
	                                                                                                                      // 1501
		// Are we reading last data from DOM or the data object?                                                             // 1502
		if ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {                                           // 1503
			// Read the data from the DOM                                                                                       // 1504
			row._aData = _fnGetRowElements(                                                                                     // 1505
					settings, row, colIdx, colIdx === undefined ? undefined : row._aData                                              // 1506
				)                                                                                                                  // 1507
				.data;                                                                                                             // 1508
		}                                                                                                                    // 1509
		else {                                                                                                               // 1510
			// Reading from data object, update the DOM                                                                         // 1511
			var cells = row.anCells;                                                                                            // 1512
	                                                                                                                      // 1513
			if ( cells ) {                                                                                                      // 1514
				if ( colIdx !== undefined ) {                                                                                      // 1515
					cellWrite( cells[colIdx], colIdx );                                                                               // 1516
				}                                                                                                                  // 1517
				else {                                                                                                             // 1518
					for ( i=0, ien=cells.length ; i<ien ; i++ ) {                                                                     // 1519
						cellWrite( cells[i], i );                                                                                        // 1520
					}                                                                                                                 // 1521
				}                                                                                                                  // 1522
			}                                                                                                                   // 1523
		}                                                                                                                    // 1524
	                                                                                                                      // 1525
		// For both row and cell invalidation, the cached data for sorting and                                               // 1526
		// filtering is nulled out                                                                                           // 1527
		row._aSortData = null;                                                                                               // 1528
		row._aFilterData = null;                                                                                             // 1529
	                                                                                                                      // 1530
		// Invalidate the type for a specific column (if given) or all columns since                                         // 1531
		// the data might have changed                                                                                       // 1532
		var cols = settings.aoColumns;                                                                                       // 1533
		if ( colIdx !== undefined ) {                                                                                        // 1534
			cols[ colIdx ].sType = null;                                                                                        // 1535
		}                                                                                                                    // 1536
		else {                                                                                                               // 1537
			for ( i=0, ien=cols.length ; i<ien ; i++ ) {                                                                        // 1538
				cols[i].sType = null;                                                                                              // 1539
			}                                                                                                                   // 1540
	                                                                                                                      // 1541
			// Update DataTables special `DT_*` attributes for the row                                                          // 1542
			_fnRowAttributes( row );                                                                                            // 1543
		}                                                                                                                    // 1544
	}                                                                                                                     // 1545
	                                                                                                                      // 1546
	                                                                                                                      // 1547
	/**                                                                                                                   // 1548
	 * Build a data source object from an HTML row, reading the contents of the                                           // 1549
	 * cells that are in the row.                                                                                         // 1550
	 *                                                                                                                    // 1551
	 * @param {object} settings DataTables settings object                                                                // 1552
	 * @param {node|object} TR element from which to read data or existing row                                            // 1553
	 *   object from which to re-read the data from the cells                                                             // 1554
	 * @param {int} [colIdx] Optional column index                                                                        // 1555
	 * @param {array|object} [d] Data source object. If `colIdx` is given then this                                       // 1556
	 *   parameter should also be given and will be used to write the data into.                                          // 1557
	 *   Only the column in question will be written                                                                      // 1558
	 * @returns {object} Object with two parameters: `data` the data read, in                                             // 1559
	 *   document order, and `cells` and array of nodes (they can be useful to the                                        // 1560
	 *   caller, so rather than needing a second traversal to get them, just return                                       // 1561
	 *   them from here).                                                                                                 // 1562
	 * @memberof DataTable#oApi                                                                                           // 1563
	 */                                                                                                                   // 1564
	function _fnGetRowElements( settings, row, colIdx, d )                                                                // 1565
	{                                                                                                                     // 1566
		var                                                                                                                  // 1567
			tds = [],                                                                                                           // 1568
			td = row.firstChild,                                                                                                // 1569
			name, col, o, i=0, contents,                                                                                        // 1570
			columns = settings.aoColumns,                                                                                       // 1571
			objectRead = settings._rowReadObject;                                                                               // 1572
	                                                                                                                      // 1573
		// Allow the data object to be passed in, or construct                                                               // 1574
		d = d || objectRead ? {} : [];                                                                                       // 1575
	                                                                                                                      // 1576
		var attr = function ( str, td  ) {                                                                                   // 1577
			if ( typeof str === 'string' ) {                                                                                    // 1578
				var idx = str.indexOf('@');                                                                                        // 1579
	                                                                                                                      // 1580
				if ( idx !== -1 ) {                                                                                                // 1581
					var attr = str.substring( idx+1 );                                                                                // 1582
					var setter = _fnSetObjectDataFn( str );                                                                           // 1583
					setter( d, td.getAttribute( attr ) );                                                                             // 1584
				}                                                                                                                  // 1585
			}                                                                                                                   // 1586
		};                                                                                                                   // 1587
	                                                                                                                      // 1588
		// Read data from a cell and store into the data object                                                              // 1589
		var cellProcess = function ( cell ) {                                                                                // 1590
			if ( colIdx === undefined || colIdx === i ) {                                                                       // 1591
				col = columns[i];                                                                                                  // 1592
				contents = $.trim(cell.innerHTML);                                                                                 // 1593
	                                                                                                                      // 1594
				if ( col && col._bAttrSrc ) {                                                                                      // 1595
					var setter = _fnSetObjectDataFn( col.mData._ );                                                                   // 1596
					setter( d, contents );                                                                                            // 1597
	                                                                                                                      // 1598
					attr( col.mData.sort, cell );                                                                                     // 1599
					attr( col.mData.type, cell );                                                                                     // 1600
					attr( col.mData.filter, cell );                                                                                   // 1601
				}                                                                                                                  // 1602
				else {                                                                                                             // 1603
					// Depending on the `data` option for the columns the data can                                                    // 1604
					// be read to either an object or an array.                                                                       // 1605
					if ( objectRead ) {                                                                                               // 1606
						if ( ! col._setter ) {                                                                                           // 1607
							// Cache the setter function                                                                                    // 1608
							col._setter = _fnSetObjectDataFn( col.mData );                                                                  // 1609
						}                                                                                                                // 1610
						col._setter( d, contents );                                                                                      // 1611
					}                                                                                                                 // 1612
					else {                                                                                                            // 1613
						d[i] = contents;                                                                                                 // 1614
					}                                                                                                                 // 1615
				}                                                                                                                  // 1616
			}                                                                                                                   // 1617
	                                                                                                                      // 1618
			i++;                                                                                                                // 1619
		};                                                                                                                   // 1620
	                                                                                                                      // 1621
		if ( td ) {                                                                                                          // 1622
			// `tr` element was passed in                                                                                       // 1623
			while ( td ) {                                                                                                      // 1624
				name = td.nodeName.toUpperCase();                                                                                  // 1625
	                                                                                                                      // 1626
				if ( name == "TD" || name == "TH" ) {                                                                              // 1627
					cellProcess( td );                                                                                                // 1628
					tds.push( td );                                                                                                   // 1629
				}                                                                                                                  // 1630
	                                                                                                                      // 1631
				td = td.nextSibling;                                                                                               // 1632
			}                                                                                                                   // 1633
		}                                                                                                                    // 1634
		else {                                                                                                               // 1635
			// Existing row object passed in                                                                                    // 1636
			tds = row.anCells;                                                                                                  // 1637
			                                                                                                                    // 1638
			for ( var j=0, jen=tds.length ; j<jen ; j++ ) {                                                                     // 1639
				cellProcess( tds[j] );                                                                                             // 1640
			}                                                                                                                   // 1641
		}                                                                                                                    // 1642
	                                                                                                                      // 1643
		return {                                                                                                             // 1644
			data: d,                                                                                                            // 1645
			cells: tds                                                                                                          // 1646
		};                                                                                                                   // 1647
	}                                                                                                                     // 1648
	/**                                                                                                                   // 1649
	 * Create a new TR element (and it's TD children) for a row                                                           // 1650
	 *  @param {object} oSettings dataTables settings object                                                              // 1651
	 *  @param {int} iRow Row to consider                                                                                 // 1652
	 *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,                                    // 1653
	 *    DataTables will create a row automatically                                                                      // 1654
	 *  @param {array} [anTds] Array of TD|TH elements for the row - must be given                                        // 1655
	 *    if nTr is.                                                                                                      // 1656
	 *  @memberof DataTable#oApi                                                                                          // 1657
	 */                                                                                                                   // 1658
	function _fnCreateTr ( oSettings, iRow, nTrIn, anTds )                                                                // 1659
	{                                                                                                                     // 1660
		var                                                                                                                  // 1661
			row = oSettings.aoData[iRow],                                                                                       // 1662
			rowData = row._aData,                                                                                               // 1663
			cells = [],                                                                                                         // 1664
			nTr, nTd, oCol,                                                                                                     // 1665
			i, iLen;                                                                                                            // 1666
	                                                                                                                      // 1667
		if ( row.nTr === null )                                                                                              // 1668
		{                                                                                                                    // 1669
			nTr = nTrIn || document.createElement('tr');                                                                        // 1670
	                                                                                                                      // 1671
			row.nTr = nTr;                                                                                                      // 1672
			row.anCells = cells;                                                                                                // 1673
	                                                                                                                      // 1674
			/* Use a private property on the node to allow reserve mapping from the node                                        // 1675
			 * to the aoData array for fast look up                                                                             // 1676
			 */                                                                                                                 // 1677
			nTr._DT_RowIndex = iRow;                                                                                            // 1678
	                                                                                                                      // 1679
			/* Special parameters can be given by the data source to be used on the row */                                      // 1680
			_fnRowAttributes( row );                                                                                            // 1681
	                                                                                                                      // 1682
			/* Process each column */                                                                                           // 1683
			for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )                                                         // 1684
			{                                                                                                                   // 1685
				oCol = oSettings.aoColumns[i];                                                                                     // 1686
	                                                                                                                      // 1687
				nTd = nTrIn ? anTds[i] : document.createElement( oCol.sCellType );                                                 // 1688
				cells.push( nTd );                                                                                                 // 1689
	                                                                                                                      // 1690
				// Need to create the HTML if new, or if a rendering function is defined                                           // 1691
				if ( !nTrIn || oCol.mRender || oCol.mData !== i )                                                                  // 1692
				{                                                                                                                  // 1693
					nTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );                                                  // 1694
				}                                                                                                                  // 1695
	                                                                                                                      // 1696
				/* Add user defined class */                                                                                       // 1697
				if ( oCol.sClass )                                                                                                 // 1698
				{                                                                                                                  // 1699
					nTd.className += ' '+oCol.sClass;                                                                                 // 1700
				}                                                                                                                  // 1701
	                                                                                                                      // 1702
				// Visibility - add or remove as required                                                                          // 1703
				if ( oCol.bVisible && ! nTrIn )                                                                                    // 1704
				{                                                                                                                  // 1705
					nTr.appendChild( nTd );                                                                                           // 1706
				}                                                                                                                  // 1707
				else if ( ! oCol.bVisible && nTrIn )                                                                               // 1708
				{                                                                                                                  // 1709
					nTd.parentNode.removeChild( nTd );                                                                                // 1710
				}                                                                                                                  // 1711
	                                                                                                                      // 1712
				if ( oCol.fnCreatedCell )                                                                                          // 1713
				{                                                                                                                  // 1714
					oCol.fnCreatedCell.call( oSettings.oInstance,                                                                     // 1715
						nTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i                                                      // 1716
					);                                                                                                                // 1717
				}                                                                                                                  // 1718
			}                                                                                                                   // 1719
	                                                                                                                      // 1720
			_fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow] );                                   // 1721
		}                                                                                                                    // 1722
	                                                                                                                      // 1723
		// Remove once webkit bug 131819 and Chromium bug 365619 have been resolved                                          // 1724
		// and deployed                                                                                                      // 1725
		row.nTr.setAttribute( 'role', 'row' );                                                                               // 1726
	}                                                                                                                     // 1727
	                                                                                                                      // 1728
	                                                                                                                      // 1729
	/**                                                                                                                   // 1730
	 * Add attributes to a row based on the special `DT_*` parameters in a data                                           // 1731
	 * source object.                                                                                                     // 1732
	 *  @param {object} DataTables row object for the row to be modified                                                  // 1733
	 *  @memberof DataTable#oApi                                                                                          // 1734
	 */                                                                                                                   // 1735
	function _fnRowAttributes( row )                                                                                      // 1736
	{                                                                                                                     // 1737
		var tr = row.nTr;                                                                                                    // 1738
		var data = row._aData;                                                                                               // 1739
	                                                                                                                      // 1740
		if ( tr ) {                                                                                                          // 1741
			if ( data.DT_RowId ) {                                                                                              // 1742
				tr.id = data.DT_RowId;                                                                                             // 1743
			}                                                                                                                   // 1744
	                                                                                                                      // 1745
			if ( data.DT_RowClass ) {                                                                                           // 1746
				// Remove any classes added by DT_RowClass before                                                                  // 1747
				var a = data.DT_RowClass.split(' ');                                                                               // 1748
				row.__rowc = row.__rowc ?                                                                                          // 1749
					_unique( row.__rowc.concat( a ) ) :                                                                               // 1750
					a;                                                                                                                // 1751
	                                                                                                                      // 1752
				$(tr)                                                                                                              // 1753
					.removeClass( row.__rowc.join(' ') )                                                                              // 1754
					.addClass( data.DT_RowClass );                                                                                    // 1755
			}                                                                                                                   // 1756
	                                                                                                                      // 1757
			if ( data.DT_RowAttr ) {                                                                                            // 1758
				$(tr).attr( data.DT_RowAttr );                                                                                     // 1759
			}                                                                                                                   // 1760
	                                                                                                                      // 1761
			if ( data.DT_RowData ) {                                                                                            // 1762
				$(tr).data( data.DT_RowData );                                                                                     // 1763
			}                                                                                                                   // 1764
		}                                                                                                                    // 1765
	}                                                                                                                     // 1766
	                                                                                                                      // 1767
	                                                                                                                      // 1768
	/**                                                                                                                   // 1769
	 * Create the HTML header for the table                                                                               // 1770
	 *  @param {object} oSettings dataTables settings object                                                              // 1771
	 *  @memberof DataTable#oApi                                                                                          // 1772
	 */                                                                                                                   // 1773
	function _fnBuildHead( oSettings )                                                                                    // 1774
	{                                                                                                                     // 1775
		var i, ien, cell, row, column;                                                                                       // 1776
		var thead = oSettings.nTHead;                                                                                        // 1777
		var tfoot = oSettings.nTFoot;                                                                                        // 1778
		var createHeader = $('th, td', thead).length === 0;                                                                  // 1779
		var classes = oSettings.oClasses;                                                                                    // 1780
		var columns = oSettings.aoColumns;                                                                                   // 1781
	                                                                                                                      // 1782
		if ( createHeader ) {                                                                                                // 1783
			row = $('<tr/>').appendTo( thead );                                                                                 // 1784
		}                                                                                                                    // 1785
	                                                                                                                      // 1786
		for ( i=0, ien=columns.length ; i<ien ; i++ ) {                                                                      // 1787
			column = columns[i];                                                                                                // 1788
			cell = $( column.nTh ).addClass( column.sClass );                                                                   // 1789
	                                                                                                                      // 1790
			if ( createHeader ) {                                                                                               // 1791
				cell.appendTo( row );                                                                                              // 1792
			}                                                                                                                   // 1793
	                                                                                                                      // 1794
			// 1.11 move into sorting                                                                                           // 1795
			if ( oSettings.oFeatures.bSort ) {                                                                                  // 1796
				cell.addClass( column.sSortingClass );                                                                             // 1797
	                                                                                                                      // 1798
				if ( column.bSortable !== false ) {                                                                                // 1799
					cell                                                                                                              // 1800
						.attr( 'tabindex', oSettings.iTabIndex )                                                                         // 1801
						.attr( 'aria-controls', oSettings.sTableId );                                                                    // 1802
	                                                                                                                      // 1803
					_fnSortAttachListener( oSettings, column.nTh, i );                                                                // 1804
				}                                                                                                                  // 1805
			}                                                                                                                   // 1806
	                                                                                                                      // 1807
			if ( column.sTitle != cell.html() ) {                                                                               // 1808
				cell.html( column.sTitle );                                                                                        // 1809
			}                                                                                                                   // 1810
	                                                                                                                      // 1811
			_fnRenderer( oSettings, 'header' )(                                                                                 // 1812
				oSettings, cell, column, classes                                                                                   // 1813
			);                                                                                                                  // 1814
		}                                                                                                                    // 1815
	                                                                                                                      // 1816
		if ( createHeader ) {                                                                                                // 1817
			_fnDetectHeader( oSettings.aoHeader, thead );                                                                       // 1818
		}                                                                                                                    // 1819
		                                                                                                                     // 1820
		/* ARIA role for the rows */                                                                                         // 1821
	 	$(thead).find('>tr').attr('role', 'row');                                                                           // 1822
	                                                                                                                      // 1823
		/* Deal with the footer - add classes if required */                                                                 // 1824
		$(thead).find('>tr>th, >tr>td').addClass( classes.sHeaderTH );                                                       // 1825
		$(tfoot).find('>tr>th, >tr>td').addClass( classes.sFooterTH );                                                       // 1826
	                                                                                                                      // 1827
		// Cache the footer cells. Note that we only take the cells from the first                                           // 1828
		// row in the footer. If there is more than one row the user wants to                                                // 1829
		// interact with, they need to use the table().foot() method. Note also this                                         // 1830
		// allows cells to be used for multiple columns using colspan                                                        // 1831
		if ( tfoot !== null ) {                                                                                              // 1832
			var cells = oSettings.aoFooter[0];                                                                                  // 1833
	                                                                                                                      // 1834
			for ( i=0, ien=cells.length ; i<ien ; i++ ) {                                                                       // 1835
				column = columns[i];                                                                                               // 1836
				column.nTf = cells[i].cell;                                                                                        // 1837
	                                                                                                                      // 1838
				if ( column.sClass ) {                                                                                             // 1839
					$(column.nTf).addClass( column.sClass );                                                                          // 1840
				}                                                                                                                  // 1841
			}                                                                                                                   // 1842
		}                                                                                                                    // 1843
	}                                                                                                                     // 1844
	                                                                                                                      // 1845
	                                                                                                                      // 1846
	/**                                                                                                                   // 1847
	 * Draw the header (or footer) element based on the column visibility states. The                                     // 1848
	 * methodology here is to use the layout array from _fnDetectHeader, modified for                                     // 1849
	 * the instantaneous column visibility, to construct the new layout. The grid is                                      // 1850
	 * traversed over cell at a time in a rows x columns grid fashion, although each                                      // 1851
	 * cell insert can cover multiple elements in the grid - which is tracks using the                                    // 1852
	 * aApplied array. Cell inserts in the grid will only occur where there isn't                                         // 1853
	 * already a cell in that position.                                                                                   // 1854
	 *  @param {object} oSettings dataTables settings object                                                              // 1855
	 *  @param array {objects} aoSource Layout array from _fnDetectHeader                                                 // 1856
	 *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,                      // 1857
	 *  @memberof DataTable#oApi                                                                                          // 1858
	 */                                                                                                                   // 1859
	function _fnDrawHead( oSettings, aoSource, bIncludeHidden )                                                           // 1860
	{                                                                                                                     // 1861
		var i, iLen, j, jLen, k, kLen, n, nLocalTr;                                                                          // 1862
		var aoLocal = [];                                                                                                    // 1863
		var aApplied = [];                                                                                                   // 1864
		var iColumns = oSettings.aoColumns.length;                                                                           // 1865
		var iRowspan, iColspan;                                                                                              // 1866
	                                                                                                                      // 1867
		if ( ! aoSource )                                                                                                    // 1868
		{                                                                                                                    // 1869
			return;                                                                                                             // 1870
		}                                                                                                                    // 1871
	                                                                                                                      // 1872
		if (  bIncludeHidden === undefined )                                                                                 // 1873
		{                                                                                                                    // 1874
			bIncludeHidden = false;                                                                                             // 1875
		}                                                                                                                    // 1876
	                                                                                                                      // 1877
		/* Make a copy of the master layout array, but without the visible columns in it */                                  // 1878
		for ( i=0, iLen=aoSource.length ; i<iLen ; i++ )                                                                     // 1879
		{                                                                                                                    // 1880
			aoLocal[i] = aoSource[i].slice();                                                                                   // 1881
			aoLocal[i].nTr = aoSource[i].nTr;                                                                                   // 1882
	                                                                                                                      // 1883
			/* Remove any columns which are currently hidden */                                                                 // 1884
			for ( j=iColumns-1 ; j>=0 ; j-- )                                                                                   // 1885
			{                                                                                                                   // 1886
				if ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )                                                         // 1887
				{                                                                                                                  // 1888
					aoLocal[i].splice( j, 1 );                                                                                        // 1889
				}                                                                                                                  // 1890
			}                                                                                                                   // 1891
	                                                                                                                      // 1892
			/* Prep the applied array - it needs an element for each row */                                                     // 1893
			aApplied.push( [] );                                                                                                // 1894
		}                                                                                                                    // 1895
	                                                                                                                      // 1896
		for ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )                                                                      // 1897
		{                                                                                                                    // 1898
			nLocalTr = aoLocal[i].nTr;                                                                                          // 1899
	                                                                                                                      // 1900
			/* All cells are going to be replaced, so empty out the row */                                                      // 1901
			if ( nLocalTr )                                                                                                     // 1902
			{                                                                                                                   // 1903
				while( (n = nLocalTr.firstChild) )                                                                                 // 1904
				{                                                                                                                  // 1905
					nLocalTr.removeChild( n );                                                                                        // 1906
				}                                                                                                                  // 1907
			}                                                                                                                   // 1908
	                                                                                                                      // 1909
			for ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )                                                                  // 1910
			{                                                                                                                   // 1911
				iRowspan = 1;                                                                                                      // 1912
				iColspan = 1;                                                                                                      // 1913
	                                                                                                                      // 1914
				/* Check to see if there is already a cell (row/colspan) covering our target                                       // 1915
				 * insert point. If there is, then there is nothing to do.                                                         // 1916
				 */                                                                                                                // 1917
				if ( aApplied[i][j] === undefined )                                                                                // 1918
				{                                                                                                                  // 1919
					nLocalTr.appendChild( aoLocal[i][j].cell );                                                                       // 1920
					aApplied[i][j] = 1;                                                                                               // 1921
	                                                                                                                      // 1922
					/* Expand the cell to cover as many rows as needed */                                                             // 1923
					while ( aoLocal[i+iRowspan] !== undefined &&                                                                      // 1924
					        aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )                                                       // 1925
					{                                                                                                                 // 1926
						aApplied[i+iRowspan][j] = 1;                                                                                     // 1927
						iRowspan++;                                                                                                      // 1928
					}                                                                                                                 // 1929
	                                                                                                                      // 1930
					/* Expand the cell to cover as many columns as needed */                                                          // 1931
					while ( aoLocal[i][j+iColspan] !== undefined &&                                                                   // 1932
					        aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )                                                       // 1933
					{                                                                                                                 // 1934
						/* Must update the applied array over the rows for the columns */                                                // 1935
						for ( k=0 ; k<iRowspan ; k++ )                                                                                   // 1936
						{                                                                                                                // 1937
							aApplied[i+k][j+iColspan] = 1;                                                                                  // 1938
						}                                                                                                                // 1939
						iColspan++;                                                                                                      // 1940
					}                                                                                                                 // 1941
	                                                                                                                      // 1942
					/* Do the actual expansion in the DOM */                                                                          // 1943
					$(aoLocal[i][j].cell)                                                                                             // 1944
						.attr('rowspan', iRowspan)                                                                                       // 1945
						.attr('colspan', iColspan);                                                                                      // 1946
				}                                                                                                                  // 1947
			}                                                                                                                   // 1948
		}                                                                                                                    // 1949
	}                                                                                                                     // 1950
	                                                                                                                      // 1951
	                                                                                                                      // 1952
	/**                                                                                                                   // 1953
	 * Insert the required TR nodes into the table for display                                                            // 1954
	 *  @param {object} oSettings dataTables settings object                                                              // 1955
	 *  @memberof DataTable#oApi                                                                                          // 1956
	 */                                                                                                                   // 1957
	function _fnDraw( oSettings )                                                                                         // 1958
	{                                                                                                                     // 1959
		/* Provide a pre-callback function which can be used to cancel the draw is false is returned */                      // 1960
		var aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );                            // 1961
		if ( $.inArray( false, aPreDraw ) !== -1 )                                                                           // 1962
		{                                                                                                                    // 1963
			_fnProcessingDisplay( oSettings, false );                                                                           // 1964
			return;                                                                                                             // 1965
		}                                                                                                                    // 1966
	                                                                                                                      // 1967
		var i, iLen, n;                                                                                                      // 1968
		var anRows = [];                                                                                                     // 1969
		var iRowCount = 0;                                                                                                   // 1970
		var asStripeClasses = oSettings.asStripeClasses;                                                                     // 1971
		var iStripes = asStripeClasses.length;                                                                               // 1972
		var iOpenRows = oSettings.aoOpenRows.length;                                                                         // 1973
		var oLang = oSettings.oLanguage;                                                                                     // 1974
		var iInitDisplayStart = oSettings.iInitDisplayStart;                                                                 // 1975
		var bServerSide = _fnDataSource( oSettings ) == 'ssp';                                                               // 1976
		var aiDisplay = oSettings.aiDisplay;                                                                                 // 1977
	                                                                                                                      // 1978
		oSettings.bDrawing = true;                                                                                           // 1979
	                                                                                                                      // 1980
		/* Check and see if we have an initial draw position from state saving */                                            // 1981
		if ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )                                                   // 1982
		{                                                                                                                    // 1983
			oSettings._iDisplayStart = bServerSide ?                                                                            // 1984
				iInitDisplayStart :                                                                                                // 1985
				iInitDisplayStart >= oSettings.fnRecordsDisplay() ?                                                                // 1986
					0 :                                                                                                               // 1987
					iInitDisplayStart;                                                                                                // 1988
	                                                                                                                      // 1989
			oSettings.iInitDisplayStart = -1;                                                                                   // 1990
		}                                                                                                                    // 1991
	                                                                                                                      // 1992
		var iDisplayStart = oSettings._iDisplayStart;                                                                        // 1993
		var iDisplayEnd = oSettings.fnDisplayEnd();                                                                          // 1994
	                                                                                                                      // 1995
		/* Server-side processing draw intercept */                                                                          // 1996
		if ( oSettings.bDeferLoading )                                                                                       // 1997
		{                                                                                                                    // 1998
			oSettings.bDeferLoading = false;                                                                                    // 1999
			oSettings.iDraw++;                                                                                                  // 2000
			_fnProcessingDisplay( oSettings, false );                                                                           // 2001
		}                                                                                                                    // 2002
		else if ( !bServerSide )                                                                                             // 2003
		{                                                                                                                    // 2004
			oSettings.iDraw++;                                                                                                  // 2005
		}                                                                                                                    // 2006
		else if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )                                                    // 2007
		{                                                                                                                    // 2008
			return;                                                                                                             // 2009
		}                                                                                                                    // 2010
	                                                                                                                      // 2011
		if ( aiDisplay.length !== 0 )                                                                                        // 2012
		{                                                                                                                    // 2013
			var iStart = bServerSide ? 0 : iDisplayStart;                                                                       // 2014
			var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;                                                     // 2015
	                                                                                                                      // 2016
			for ( var j=iStart ; j<iEnd ; j++ )                                                                                 // 2017
			{                                                                                                                   // 2018
				var iDataIndex = aiDisplay[j];                                                                                     // 2019
				var aoData = oSettings.aoData[ iDataIndex ];                                                                       // 2020
				if ( aoData.nTr === null )                                                                                         // 2021
				{                                                                                                                  // 2022
					_fnCreateTr( oSettings, iDataIndex );                                                                             // 2023
				}                                                                                                                  // 2024
	                                                                                                                      // 2025
				var nRow = aoData.nTr;                                                                                             // 2026
	                                                                                                                      // 2027
				/* Remove the old striping classes and then add the new one */                                                     // 2028
				if ( iStripes !== 0 )                                                                                              // 2029
				{                                                                                                                  // 2030
					var sStripe = asStripeClasses[ iRowCount % iStripes ];                                                            // 2031
					if ( aoData._sRowStripe != sStripe )                                                                              // 2032
					{                                                                                                                 // 2033
						$(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );                                                   // 2034
						aoData._sRowStripe = sStripe;                                                                                    // 2035
					}                                                                                                                 // 2036
				}                                                                                                                  // 2037
	                                                                                                                      // 2038
				// Row callback functions - might want to manipulate the row                                                       // 2039
				// iRowCount and j are not currently documented. Are they at all                                                   // 2040
				// useful?                                                                                                         // 2041
				_fnCallbackFire( oSettings, 'aoRowCallback', null,                                                                 // 2042
					[nRow, aoData._aData, iRowCount, j] );                                                                            // 2043
	                                                                                                                      // 2044
				anRows.push( nRow );                                                                                               // 2045
				iRowCount++;                                                                                                       // 2046
			}                                                                                                                   // 2047
		}                                                                                                                    // 2048
		else                                                                                                                 // 2049
		{                                                                                                                    // 2050
			/* Table is empty - create a row with an empty message in it */                                                     // 2051
			var sZero = oLang.sZeroRecords;                                                                                     // 2052
			if ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )                                                // 2053
			{                                                                                                                   // 2054
				sZero = oLang.sLoadingRecords;                                                                                     // 2055
			}                                                                                                                   // 2056
			else if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )                                                   // 2057
			{                                                                                                                   // 2058
				sZero = oLang.sEmptyTable;                                                                                         // 2059
			}                                                                                                                   // 2060
	                                                                                                                      // 2061
			anRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )                                         // 2062
				.append( $('<td />', {                                                                                             // 2063
					'valign':  'top',                                                                                                 // 2064
					'colSpan': _fnVisbleColumns( oSettings ),                                                                         // 2065
					'class':   oSettings.oClasses.sRowEmpty                                                                           // 2066
				} ).html( sZero ) )[0];                                                                                            // 2067
		}                                                                                                                    // 2068
	                                                                                                                      // 2069
		/* Header and footer callbacks */                                                                                    // 2070
		_fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],                   // 2071
			_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );                                           // 2072
	                                                                                                                      // 2073
		_fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],                   // 2074
			_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );                                           // 2075
	                                                                                                                      // 2076
		var body = $(oSettings.nTBody);                                                                                      // 2077
	                                                                                                                      // 2078
		body.children().detach();                                                                                            // 2079
		body.append( $(anRows) );                                                                                            // 2080
	                                                                                                                      // 2081
		/* Call all required callback functions for the end of a draw */                                                     // 2082
		_fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );                                                 // 2083
	                                                                                                                      // 2084
		/* Draw is complete, sorting and filtering must be as well */                                                        // 2085
		oSettings.bSorted = false;                                                                                           // 2086
		oSettings.bFiltered = false;                                                                                         // 2087
		oSettings.bDrawing = false;                                                                                          // 2088
	}                                                                                                                     // 2089
	                                                                                                                      // 2090
	                                                                                                                      // 2091
	/**                                                                                                                   // 2092
	 * Redraw the table - taking account of the various features which are enabled                                        // 2093
	 *  @param {object} oSettings dataTables settings object                                                              // 2094
	 *  @param {boolean} [holdPosition] Keep the current paging position. By default                                      // 2095
	 *    the paging is reset to the first page                                                                           // 2096
	 *  @memberof DataTable#oApi                                                                                          // 2097
	 */                                                                                                                   // 2098
	function _fnReDraw( settings, holdPosition )                                                                          // 2099
	{                                                                                                                     // 2100
		var                                                                                                                  // 2101
			features = settings.oFeatures,                                                                                      // 2102
			sort     = features.bSort,                                                                                          // 2103
			filter   = features.bFilter;                                                                                        // 2104
	                                                                                                                      // 2105
		if ( sort ) {                                                                                                        // 2106
			_fnSort( settings );                                                                                                // 2107
		}                                                                                                                    // 2108
	                                                                                                                      // 2109
		if ( filter ) {                                                                                                      // 2110
			_fnFilterComplete( settings, settings.oPreviousSearch );                                                            // 2111
		}                                                                                                                    // 2112
		else {                                                                                                               // 2113
			// No filtering, so we want to just use the display master                                                          // 2114
			settings.aiDisplay = settings.aiDisplayMaster.slice();                                                              // 2115
		}                                                                                                                    // 2116
	                                                                                                                      // 2117
		if ( holdPosition !== true ) {                                                                                       // 2118
			settings._iDisplayStart = 0;                                                                                        // 2119
		}                                                                                                                    // 2120
	                                                                                                                      // 2121
		// Let any modules know about the draw hold position state (used by                                                  // 2122
		// scrolling internally)                                                                                             // 2123
		settings._drawHold = holdPosition;                                                                                   // 2124
	                                                                                                                      // 2125
		_fnDraw( settings );                                                                                                 // 2126
	                                                                                                                      // 2127
		settings._drawHold = false;                                                                                          // 2128
	}                                                                                                                     // 2129
	                                                                                                                      // 2130
	                                                                                                                      // 2131
	/**                                                                                                                   // 2132
	 * Add the options to the page HTML for the table                                                                     // 2133
	 *  @param {object} oSettings dataTables settings object                                                              // 2134
	 *  @memberof DataTable#oApi                                                                                          // 2135
	 */                                                                                                                   // 2136
	function _fnAddOptionsHtml ( oSettings )                                                                              // 2137
	{                                                                                                                     // 2138
		var classes = oSettings.oClasses;                                                                                    // 2139
		var table = $(oSettings.nTable);                                                                                     // 2140
		var holding = $('<div/>').insertBefore( table ); // Holding element for speed                                        // 2141
		var features = oSettings.oFeatures;                                                                                  // 2142
	                                                                                                                      // 2143
		// All DataTables are wrapped in a div                                                                               // 2144
		var insert = $('<div/>', {                                                                                           // 2145
			id:      oSettings.sTableId+'_wrapper',                                                                             // 2146
			'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)                                         // 2147
		} );                                                                                                                 // 2148
	                                                                                                                      // 2149
		oSettings.nHolding = holding[0];                                                                                     // 2150
		oSettings.nTableWrapper = insert[0];                                                                                 // 2151
		oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;                                                       // 2152
	                                                                                                                      // 2153
		/* Loop over the user set positioning and place the elements as needed */                                            // 2154
		var aDom = oSettings.sDom.split('');                                                                                 // 2155
		var featureNode, cOption, nNewNode, cNext, sAttr, j;                                                                 // 2156
		for ( var i=0 ; i<aDom.length ; i++ )                                                                                // 2157
		{                                                                                                                    // 2158
			featureNode = null;                                                                                                 // 2159
			cOption = aDom[i];                                                                                                  // 2160
	                                                                                                                      // 2161
			if ( cOption == '<' )                                                                                               // 2162
			{                                                                                                                   // 2163
				/* New container div */                                                                                            // 2164
				nNewNode = $('<div/>')[0];                                                                                         // 2165
	                                                                                                                      // 2166
				/* Check to see if we should append an id and/or a class name to the container */                                  // 2167
				cNext = aDom[i+1];                                                                                                 // 2168
				if ( cNext == "'" || cNext == '"' )                                                                                // 2169
				{                                                                                                                  // 2170
					sAttr = "";                                                                                                       // 2171
					j = 2;                                                                                                            // 2172
					while ( aDom[i+j] != cNext )                                                                                      // 2173
					{                                                                                                                 // 2174
						sAttr += aDom[i+j];                                                                                              // 2175
						j++;                                                                                                             // 2176
					}                                                                                                                 // 2177
	                                                                                                                      // 2178
					/* Replace jQuery UI constants @todo depreciated */                                                               // 2179
					if ( sAttr == "H" )                                                                                               // 2180
					{                                                                                                                 // 2181
						sAttr = classes.sJUIHeader;                                                                                      // 2182
					}                                                                                                                 // 2183
					else if ( sAttr == "F" )                                                                                          // 2184
					{                                                                                                                 // 2185
						sAttr = classes.sJUIFooter;                                                                                      // 2186
					}                                                                                                                 // 2187
	                                                                                                                      // 2188
					/* The attribute can be in the format of "#id.class", "#id" or "class" This logic                                 // 2189
					 * breaks the string into parts and applies them as needed                                                        // 2190
					 */                                                                                                               // 2191
					if ( sAttr.indexOf('.') != -1 )                                                                                   // 2192
					{                                                                                                                 // 2193
						var aSplit = sAttr.split('.');                                                                                   // 2194
						nNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);                                                           // 2195
						nNewNode.className = aSplit[1];                                                                                  // 2196
					}                                                                                                                 // 2197
					else if ( sAttr.charAt(0) == "#" )                                                                                // 2198
					{                                                                                                                 // 2199
						nNewNode.id = sAttr.substr(1, sAttr.length-1);                                                                   // 2200
					}                                                                                                                 // 2201
					else                                                                                                              // 2202
					{                                                                                                                 // 2203
						nNewNode.className = sAttr;                                                                                      // 2204
					}                                                                                                                 // 2205
	                                                                                                                      // 2206
					i += j; /* Move along the position array */                                                                       // 2207
				}                                                                                                                  // 2208
	                                                                                                                      // 2209
				insert.append( nNewNode );                                                                                         // 2210
				insert = $(nNewNode);                                                                                              // 2211
			}                                                                                                                   // 2212
			else if ( cOption == '>' )                                                                                          // 2213
			{                                                                                                                   // 2214
				/* End container div */                                                                                            // 2215
				insert = insert.parent();                                                                                          // 2216
			}                                                                                                                   // 2217
			// @todo Move options into their own plugins?                                                                       // 2218
			else if ( cOption == 'l' && features.bPaginate && features.bLengthChange )                                          // 2219
			{                                                                                                                   // 2220
				/* Length */                                                                                                       // 2221
				featureNode = _fnFeatureHtmlLength( oSettings );                                                                   // 2222
			}                                                                                                                   // 2223
			else if ( cOption == 'f' && features.bFilter )                                                                      // 2224
			{                                                                                                                   // 2225
				/* Filter */                                                                                                       // 2226
				featureNode = _fnFeatureHtmlFilter( oSettings );                                                                   // 2227
			}                                                                                                                   // 2228
			else if ( cOption == 'r' && features.bProcessing )                                                                  // 2229
			{                                                                                                                   // 2230
				/* pRocessing */                                                                                                   // 2231
				featureNode = _fnFeatureHtmlProcessing( oSettings );                                                               // 2232
			}                                                                                                                   // 2233
			else if ( cOption == 't' )                                                                                          // 2234
			{                                                                                                                   // 2235
				/* Table */                                                                                                        // 2236
				featureNode = _fnFeatureHtmlTable( oSettings );                                                                    // 2237
			}                                                                                                                   // 2238
			else if ( cOption ==  'i' && features.bInfo )                                                                       // 2239
			{                                                                                                                   // 2240
				/* Info */                                                                                                         // 2241
				featureNode = _fnFeatureHtmlInfo( oSettings );                                                                     // 2242
			}                                                                                                                   // 2243
			else if ( cOption == 'p' && features.bPaginate )                                                                    // 2244
			{                                                                                                                   // 2245
				/* Pagination */                                                                                                   // 2246
				featureNode = _fnFeatureHtmlPaginate( oSettings );                                                                 // 2247
			}                                                                                                                   // 2248
			else if ( DataTable.ext.feature.length !== 0 )                                                                      // 2249
			{                                                                                                                   // 2250
				/* Plug-in features */                                                                                             // 2251
				var aoFeatures = DataTable.ext.feature;                                                                            // 2252
				for ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )                                                             // 2253
				{                                                                                                                  // 2254
					if ( cOption == aoFeatures[k].cFeature )                                                                          // 2255
					{                                                                                                                 // 2256
						featureNode = aoFeatures[k].fnInit( oSettings );                                                                 // 2257
						break;                                                                                                           // 2258
					}                                                                                                                 // 2259
				}                                                                                                                  // 2260
			}                                                                                                                   // 2261
	                                                                                                                      // 2262
			/* Add to the 2D features array */                                                                                  // 2263
			if ( featureNode )                                                                                                  // 2264
			{                                                                                                                   // 2265
				var aanFeatures = oSettings.aanFeatures;                                                                           // 2266
	                                                                                                                      // 2267
				if ( ! aanFeatures[cOption] )                                                                                      // 2268
				{                                                                                                                  // 2269
					aanFeatures[cOption] = [];                                                                                        // 2270
				}                                                                                                                  // 2271
	                                                                                                                      // 2272
				aanFeatures[cOption].push( featureNode );                                                                          // 2273
				insert.append( featureNode );                                                                                      // 2274
			}                                                                                                                   // 2275
		}                                                                                                                    // 2276
	                                                                                                                      // 2277
		/* Built our DOM structure - replace the holding div with what we want */                                            // 2278
		holding.replaceWith( insert );                                                                                       // 2279
	}                                                                                                                     // 2280
	                                                                                                                      // 2281
	                                                                                                                      // 2282
	/**                                                                                                                   // 2283
	 * Use the DOM source to create up an array of header cells. The idea here is to                                      // 2284
	 * create a layout grid (array) of rows x columns, which contains a reference                                         // 2285
	 * to the cell that that point in the grid (regardless of col/rowspan), such that                                     // 2286
	 * any column / row could be removed and the new grid constructed                                                     // 2287
	 *  @param array {object} aLayout Array to store the calculated layout in                                             // 2288
	 *  @param {node} nThead The header/footer element for the table                                                      // 2289
	 *  @memberof DataTable#oApi                                                                                          // 2290
	 */                                                                                                                   // 2291
	function _fnDetectHeader ( aLayout, nThead )                                                                          // 2292
	{                                                                                                                     // 2293
		var nTrs = $(nThead).children('tr');                                                                                 // 2294
		var nTr, nCell;                                                                                                      // 2295
		var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;                                                   // 2296
		var bUnique;                                                                                                         // 2297
		var fnShiftCol = function ( a, i, j ) {                                                                              // 2298
			var k = a[i];                                                                                                       // 2299
	                while ( k[j] ) {                                                                                      // 2300
				j++;                                                                                                               // 2301
			}                                                                                                                   // 2302
			return j;                                                                                                           // 2303
		};                                                                                                                   // 2304
	                                                                                                                      // 2305
		aLayout.splice( 0, aLayout.length );                                                                                 // 2306
	                                                                                                                      // 2307
		/* We know how many rows there are in the layout - so prep it */                                                     // 2308
		for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )                                                                         // 2309
		{                                                                                                                    // 2310
			aLayout.push( [] );                                                                                                 // 2311
		}                                                                                                                    // 2312
	                                                                                                                      // 2313
		/* Calculate a layout array */                                                                                       // 2314
		for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )                                                                         // 2315
		{                                                                                                                    // 2316
			nTr = nTrs[i];                                                                                                      // 2317
			iColumn = 0;                                                                                                        // 2318
	                                                                                                                      // 2319
			/* For every cell in the row... */                                                                                  // 2320
			nCell = nTr.firstChild;                                                                                             // 2321
			while ( nCell ) {                                                                                                   // 2322
				if ( nCell.nodeName.toUpperCase() == "TD" ||                                                                       // 2323
				     nCell.nodeName.toUpperCase() == "TH" )                                                                        // 2324
				{                                                                                                                  // 2325
					/* Get the col and rowspan attributes from the DOM and sanitise them */                                           // 2326
					iColspan = nCell.getAttribute('colspan') * 1;                                                                     // 2327
					iRowspan = nCell.getAttribute('rowspan') * 1;                                                                     // 2328
					iColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;                                            // 2329
					iRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;                                            // 2330
	                                                                                                                      // 2331
					/* There might be colspan cells already in this row, so shift our target                                          // 2332
					 * accordingly                                                                                                    // 2333
					 */                                                                                                               // 2334
					iColShifted = fnShiftCol( aLayout, i, iColumn );                                                                  // 2335
	                                                                                                                      // 2336
					/* Cache calculation for unique columns */                                                                        // 2337
					bUnique = iColspan === 1 ? true : false;                                                                          // 2338
	                                                                                                                      // 2339
					/* If there is col / rowspan, copy the information into the layout grid */                                        // 2340
					for ( l=0 ; l<iColspan ; l++ )                                                                                    // 2341
					{                                                                                                                 // 2342
						for ( k=0 ; k<iRowspan ; k++ )                                                                                   // 2343
						{                                                                                                                // 2344
							aLayout[i+k][iColShifted+l] = {                                                                                 // 2345
								"cell": nCell,                                                                                                 // 2346
								"unique": bUnique                                                                                              // 2347
							};                                                                                                              // 2348
							aLayout[i+k].nTr = nTr;                                                                                         // 2349
						}                                                                                                                // 2350
					}                                                                                                                 // 2351
				}                                                                                                                  // 2352
				nCell = nCell.nextSibling;                                                                                         // 2353
			}                                                                                                                   // 2354
		}                                                                                                                    // 2355
	}                                                                                                                     // 2356
	                                                                                                                      // 2357
	                                                                                                                      // 2358
	/**                                                                                                                   // 2359
	 * Get an array of unique th elements, one for each column                                                            // 2360
	 *  @param {object} oSettings dataTables settings object                                                              // 2361
	 *  @param {node} nHeader automatically detect the layout from this node - optional                                   // 2362
	 *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional                                         // 2363
	 *  @returns array {node} aReturn list of unique th's                                                                 // 2364
	 *  @memberof DataTable#oApi                                                                                          // 2365
	 */                                                                                                                   // 2366
	function _fnGetUniqueThs ( oSettings, nHeader, aLayout )                                                              // 2367
	{                                                                                                                     // 2368
		var aReturn = [];                                                                                                    // 2369
		if ( !aLayout )                                                                                                      // 2370
		{                                                                                                                    // 2371
			aLayout = oSettings.aoHeader;                                                                                       // 2372
			if ( nHeader )                                                                                                      // 2373
			{                                                                                                                   // 2374
				aLayout = [];                                                                                                      // 2375
				_fnDetectHeader( aLayout, nHeader );                                                                               // 2376
			}                                                                                                                   // 2377
		}                                                                                                                    // 2378
	                                                                                                                      // 2379
		for ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )                                                                  // 2380
		{                                                                                                                    // 2381
			for ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )                                                              // 2382
			{                                                                                                                   // 2383
				if ( aLayout[i][j].unique &&                                                                                       // 2384
					 (!aReturn[j] || !oSettings.bSortCellsTop) )                                                                      // 2385
				{                                                                                                                  // 2386
					aReturn[j] = aLayout[i][j].cell;                                                                                  // 2387
				}                                                                                                                  // 2388
			}                                                                                                                   // 2389
		}                                                                                                                    // 2390
	                                                                                                                      // 2391
		return aReturn;                                                                                                      // 2392
	}                                                                                                                     // 2393
	                                                                                                                      // 2394
	/**                                                                                                                   // 2395
	 * Create an Ajax call based on the table's settings, taking into account that                                        // 2396
	 * parameters can have multiple forms, and backwards compatibility.                                                   // 2397
	 *                                                                                                                    // 2398
	 * @param {object} oSettings dataTables settings object                                                               // 2399
	 * @param {array} data Data to send to the server, required by                                                        // 2400
	 *     DataTables - may be augmented by developer callbacks                                                           // 2401
	 * @param {function} fn Callback function to run when data is obtained                                                // 2402
	 */                                                                                                                   // 2403
	function _fnBuildAjax( oSettings, data, fn )                                                                          // 2404
	{                                                                                                                     // 2405
		// Compatibility with 1.9-, allow fnServerData and event to manipulate                                               // 2406
		_fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );                                              // 2407
	                                                                                                                      // 2408
		// Convert to object based for 1.10+ if using the old array scheme which can                                         // 2409
		// come from server-side processing or serverParams                                                                  // 2410
		if ( data && $.isArray(data) ) {                                                                                     // 2411
			var tmp = {};                                                                                                       // 2412
			var rbracket = /(.*?)\[\]$/;                                                                                        // 2413
	                                                                                                                      // 2414
			$.each( data, function (key, val) {                                                                                 // 2415
				var match = val.name.match(rbracket);                                                                              // 2416
	                                                                                                                      // 2417
				if ( match ) {                                                                                                     // 2418
					// Support for arrays                                                                                             // 2419
					var name = match[0];                                                                                              // 2420
	                                                                                                                      // 2421
					if ( ! tmp[ name ] ) {                                                                                            // 2422
						tmp[ name ] = [];                                                                                                // 2423
					}                                                                                                                 // 2424
					tmp[ name ].push( val.value );                                                                                    // 2425
				}                                                                                                                  // 2426
				else {                                                                                                             // 2427
					tmp[val.name] = val.value;                                                                                        // 2428
				}                                                                                                                  // 2429
			} );                                                                                                                // 2430
			data = tmp;                                                                                                         // 2431
		}                                                                                                                    // 2432
	                                                                                                                      // 2433
		var ajaxData;                                                                                                        // 2434
		var ajax = oSettings.ajax;                                                                                           // 2435
		var instance = oSettings.oInstance;                                                                                  // 2436
		var callback = function ( json ) {                                                                                   // 2437
			_fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR] );                                      // 2438
			fn( json );                                                                                                         // 2439
		};                                                                                                                   // 2440
	                                                                                                                      // 2441
		if ( $.isPlainObject( ajax ) && ajax.data )                                                                          // 2442
		{                                                                                                                    // 2443
			ajaxData = ajax.data;                                                                                               // 2444
	                                                                                                                      // 2445
			var newData = $.isFunction( ajaxData ) ?                                                                            // 2446
				ajaxData( data, oSettings ) :  // fn can manipulate data or return                                                 // 2447
				ajaxData;                      // an object object or array to merge                                               // 2448
	                                                                                                                      // 2449
			// If the function returned something, use that alone                                                               // 2450
			data = $.isFunction( ajaxData ) && newData ?                                                                        // 2451
				newData :                                                                                                          // 2452
				$.extend( true, data, newData );                                                                                   // 2453
	                                                                                                                      // 2454
			// Remove the data property as we've resolved it already and don't want                                             // 2455
			// jQuery to do it again (it is restored at the end of the function)                                                // 2456
			delete ajax.data;                                                                                                   // 2457
		}                                                                                                                    // 2458
	                                                                                                                      // 2459
		var baseAjax = {                                                                                                     // 2460
			"data": data,                                                                                                       // 2461
			"success": function (json) {                                                                                        // 2462
				var error = json.error || json.sError;                                                                             // 2463
				if ( error ) {                                                                                                     // 2464
					_fnLog( oSettings, 0, error );                                                                                    // 2465
				}                                                                                                                  // 2466
	                                                                                                                      // 2467
				oSettings.json = json;                                                                                             // 2468
				callback( json );                                                                                                  // 2469
			},                                                                                                                  // 2470
			"dataType": "json",                                                                                                 // 2471
			"cache": false,                                                                                                     // 2472
			"type": oSettings.sServerMethod,                                                                                    // 2473
			"error": function (xhr, error, thrown) {                                                                            // 2474
				var ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR] );                           // 2475
	                                                                                                                      // 2476
				if ( $.inArray( true, ret ) === -1 ) {                                                                             // 2477
					if ( error == "parsererror" ) {                                                                                   // 2478
						_fnLog( oSettings, 0, 'Invalid JSON response', 1 );                                                              // 2479
					}                                                                                                                 // 2480
					else if ( xhr.readyState === 4 ) {                                                                                // 2481
						_fnLog( oSettings, 0, 'Ajax error', 7 );                                                                         // 2482
					}                                                                                                                 // 2483
				}                                                                                                                  // 2484
	                                                                                                                      // 2485
				_fnProcessingDisplay( oSettings, false );                                                                          // 2486
			}                                                                                                                   // 2487
		};                                                                                                                   // 2488
	                                                                                                                      // 2489
		// Store the data submitted for the API                                                                              // 2490
		oSettings.oAjaxData = data;                                                                                          // 2491
	                                                                                                                      // 2492
		// Allow plug-ins and external processes to modify the data                                                          // 2493
		_fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );                                                     // 2494
	                                                                                                                      // 2495
		if ( oSettings.fnServerData )                                                                                        // 2496
		{                                                                                                                    // 2497
			// DataTables 1.9- compatibility                                                                                    // 2498
			oSettings.fnServerData.call( instance,                                                                              // 2499
				oSettings.sAjaxSource,                                                                                             // 2500
				$.map( data, function (val, key) { // Need to convert back to 1.9 trad format                                      // 2501
					return { name: key, value: val };                                                                                 // 2502
				} ),                                                                                                               // 2503
				callback,                                                                                                          // 2504
				oSettings                                                                                                          // 2505
			);                                                                                                                  // 2506
		}                                                                                                                    // 2507
		else if ( oSettings.sAjaxSource || typeof ajax === 'string' )                                                        // 2508
		{                                                                                                                    // 2509
			// DataTables 1.9- compatibility                                                                                    // 2510
			oSettings.jqXHR = $.ajax( $.extend( baseAjax, {                                                                     // 2511
				url: ajax || oSettings.sAjaxSource                                                                                 // 2512
			} ) );                                                                                                              // 2513
		}                                                                                                                    // 2514
		else if ( $.isFunction( ajax ) )                                                                                     // 2515
		{                                                                                                                    // 2516
			// Is a function - let the caller define what needs to be done                                                      // 2517
			oSettings.jqXHR = ajax.call( instance, data, callback, oSettings );                                                 // 2518
		}                                                                                                                    // 2519
		else                                                                                                                 // 2520
		{                                                                                                                    // 2521
			// Object to extend the base settings                                                                               // 2522
			oSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );                                                             // 2523
	                                                                                                                      // 2524
			// Restore for next time around                                                                                     // 2525
			ajax.data = ajaxData;                                                                                               // 2526
		}                                                                                                                    // 2527
	}                                                                                                                     // 2528
	                                                                                                                      // 2529
	                                                                                                                      // 2530
	/**                                                                                                                   // 2531
	 * Update the table using an Ajax call                                                                                // 2532
	 *  @param {object} settings dataTables settings object                                                               // 2533
	 *  @returns {boolean} Block the table drawing or not                                                                 // 2534
	 *  @memberof DataTable#oApi                                                                                          // 2535
	 */                                                                                                                   // 2536
	function _fnAjaxUpdate( settings )                                                                                    // 2537
	{                                                                                                                     // 2538
		if ( settings.bAjaxDataGet ) {                                                                                       // 2539
			settings.iDraw++;                                                                                                   // 2540
			_fnProcessingDisplay( settings, true );                                                                             // 2541
	                                                                                                                      // 2542
			_fnBuildAjax(                                                                                                       // 2543
				settings,                                                                                                          // 2544
				_fnAjaxParameters( settings ),                                                                                     // 2545
				function(json) {                                                                                                   // 2546
					_fnAjaxUpdateDraw( settings, json );                                                                              // 2547
				}                                                                                                                  // 2548
			);                                                                                                                  // 2549
	                                                                                                                      // 2550
			return false;                                                                                                       // 2551
		}                                                                                                                    // 2552
		return true;                                                                                                         // 2553
	}                                                                                                                     // 2554
	                                                                                                                      // 2555
	                                                                                                                      // 2556
	/**                                                                                                                   // 2557
	 * Build up the parameters in an object needed for a server-side processing                                           // 2558
	 * request. Note that this is basically done twice, is different ways - a modern                                      // 2559
	 * method which is used by default in DataTables 1.10 which uses objects and                                          // 2560
	 * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if                                       // 2561
	 * the sAjaxSource option is used in the initialisation, or the legacyAjax                                            // 2562
	 * option is set.                                                                                                     // 2563
	 *  @param {object} oSettings dataTables settings object                                                              // 2564
	 *  @returns {bool} block the table drawing or not                                                                    // 2565
	 *  @memberof DataTable#oApi                                                                                          // 2566
	 */                                                                                                                   // 2567
	function _fnAjaxParameters( settings )                                                                                // 2568
	{                                                                                                                     // 2569
		var                                                                                                                  // 2570
			columns = settings.aoColumns,                                                                                       // 2571
			columnCount = columns.length,                                                                                       // 2572
			features = settings.oFeatures,                                                                                      // 2573
			preSearch = settings.oPreviousSearch,                                                                               // 2574
			preColSearch = settings.aoPreSearchCols,                                                                            // 2575
			i, data = [], dataProp, column, columnSearch,                                                                       // 2576
			sort = _fnSortFlatten( settings ),                                                                                  // 2577
			displayStart = settings._iDisplayStart,                                                                             // 2578
			displayLength = features.bPaginate !== false ?                                                                      // 2579
				settings._iDisplayLength :                                                                                         // 2580
				-1;                                                                                                                // 2581
	                                                                                                                      // 2582
		var param = function ( name, value ) {                                                                               // 2583
			data.push( { 'name': name, 'value': value } );                                                                      // 2584
		};                                                                                                                   // 2585
	                                                                                                                      // 2586
		// DataTables 1.9- compatible method                                                                                 // 2587
		param( 'sEcho',          settings.iDraw );                                                                           // 2588
		param( 'iColumns',       columnCount );                                                                              // 2589
		param( 'sColumns',       _pluck( columns, 'sName' ).join(',') );                                                     // 2590
		param( 'iDisplayStart',  displayStart );                                                                             // 2591
		param( 'iDisplayLength', displayLength );                                                                            // 2592
	                                                                                                                      // 2593
		// DataTables 1.10+ method                                                                                           // 2594
		var d = {                                                                                                            // 2595
			draw:    settings.iDraw,                                                                                            // 2596
			columns: [],                                                                                                        // 2597
			order:   [],                                                                                                        // 2598
			start:   displayStart,                                                                                              // 2599
			length:  displayLength,                                                                                             // 2600
			search:  {                                                                                                          // 2601
				value: preSearch.sSearch,                                                                                          // 2602
				regex: preSearch.bRegex                                                                                            // 2603
			}                                                                                                                   // 2604
		};                                                                                                                   // 2605
	                                                                                                                      // 2606
		for ( i=0 ; i<columnCount ; i++ ) {                                                                                  // 2607
			column = columns[i];                                                                                                // 2608
			columnSearch = preColSearch[i];                                                                                     // 2609
			dataProp = typeof column.mData=="function" ? 'function' : column.mData ;                                            // 2610
	                                                                                                                      // 2611
			d.columns.push( {                                                                                                   // 2612
				data:       dataProp,                                                                                              // 2613
				name:       column.sName,                                                                                          // 2614
				searchable: column.bSearchable,                                                                                    // 2615
				orderable:  column.bSortable,                                                                                      // 2616
				search:     {                                                                                                      // 2617
					value: columnSearch.sSearch,                                                                                      // 2618
					regex: columnSearch.bRegex                                                                                        // 2619
				}                                                                                                                  // 2620
			} );                                                                                                                // 2621
	                                                                                                                      // 2622
			param( "mDataProp_"+i, dataProp );                                                                                  // 2623
	                                                                                                                      // 2624
			if ( features.bFilter ) {                                                                                           // 2625
				param( 'sSearch_'+i,     columnSearch.sSearch );                                                                   // 2626
				param( 'bRegex_'+i,      columnSearch.bRegex );                                                                    // 2627
				param( 'bSearchable_'+i, column.bSearchable );                                                                     // 2628
			}                                                                                                                   // 2629
	                                                                                                                      // 2630
			if ( features.bSort ) {                                                                                             // 2631
				param( 'bSortable_'+i, column.bSortable );                                                                         // 2632
			}                                                                                                                   // 2633
		}                                                                                                                    // 2634
	                                                                                                                      // 2635
		if ( features.bFilter ) {                                                                                            // 2636
			param( 'sSearch', preSearch.sSearch );                                                                              // 2637
			param( 'bRegex', preSearch.bRegex );                                                                                // 2638
		}                                                                                                                    // 2639
	                                                                                                                      // 2640
		if ( features.bSort ) {                                                                                              // 2641
			$.each( sort, function ( i, val ) {                                                                                 // 2642
				d.order.push( { column: val.col, dir: val.dir } );                                                                 // 2643
	                                                                                                                      // 2644
				param( 'iSortCol_'+i, val.col );                                                                                   // 2645
				param( 'sSortDir_'+i, val.dir );                                                                                   // 2646
			} );                                                                                                                // 2647
	                                                                                                                      // 2648
			param( 'iSortingCols', sort.length );                                                                               // 2649
		}                                                                                                                    // 2650
	                                                                                                                      // 2651
		// If the legacy.ajax parameter is null, then we automatically decide which                                          // 2652
		// form to use, based on sAjaxSource                                                                                 // 2653
		var legacy = DataTable.ext.legacy.ajax;                                                                              // 2654
		if ( legacy === null ) {                                                                                             // 2655
			return settings.sAjaxSource ? data : d;                                                                             // 2656
		}                                                                                                                    // 2657
	                                                                                                                      // 2658
		// Otherwise, if legacy has been specified then we use that to decide on the                                         // 2659
		// form                                                                                                              // 2660
		return legacy ? data : d;                                                                                            // 2661
	}                                                                                                                     // 2662
	                                                                                                                      // 2663
	                                                                                                                      // 2664
	/**                                                                                                                   // 2665
	 * Data the data from the server (nuking the old) and redraw the table                                                // 2666
	 *  @param {object} oSettings dataTables settings object                                                              // 2667
	 *  @param {object} json json data return from the server.                                                            // 2668
	 *  @param {string} json.sEcho Tracking flag for DataTables to match requests                                         // 2669
	 *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering                   // 2670
	 *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering                // 2671
	 *  @param {array} json.aaData The data to display on this page                                                       // 2672
	 *  @param {string} [json.sColumns] Column ordering (sName, comma separated)                                          // 2673
	 *  @memberof DataTable#oApi                                                                                          // 2674
	 */                                                                                                                   // 2675
	function _fnAjaxUpdateDraw ( settings, json )                                                                         // 2676
	{                                                                                                                     // 2677
		// v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.                                                // 2678
		// Support both                                                                                                      // 2679
		var compat = function ( old, modern ) {                                                                              // 2680
			return json[old] !== undefined ? json[old] : json[modern];                                                          // 2681
		};                                                                                                                   // 2682
	                                                                                                                      // 2683
		var data = _fnAjaxDataSrc( settings, json );                                                                         // 2684
		var draw            = compat( 'sEcho',                'draw' );                                                      // 2685
		var recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );                                              // 2686
		var recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );                                           // 2687
	                                                                                                                      // 2688
		if ( draw ) {                                                                                                        // 2689
			// Protect against out of sequence returns                                                                          // 2690
			if ( draw*1 < settings.iDraw ) {                                                                                    // 2691
				return;                                                                                                            // 2692
			}                                                                                                                   // 2693
			settings.iDraw = draw * 1;                                                                                          // 2694
		}                                                                                                                    // 2695
	                                                                                                                      // 2696
		_fnClearTable( settings );                                                                                           // 2697
		settings._iRecordsTotal   = parseInt(recordsTotal, 10);                                                              // 2698
		settings._iRecordsDisplay = parseInt(recordsFiltered, 10);                                                           // 2699
	                                                                                                                      // 2700
		for ( var i=0, ien=data.length ; i<ien ; i++ ) {                                                                     // 2701
			_fnAddData( settings, data[i] );                                                                                    // 2702
		}                                                                                                                    // 2703
		settings.aiDisplay = settings.aiDisplayMaster.slice();                                                               // 2704
	                                                                                                                      // 2705
		settings.bAjaxDataGet = false;                                                                                       // 2706
		_fnDraw( settings );                                                                                                 // 2707
	                                                                                                                      // 2708
		if ( ! settings._bInitComplete ) {                                                                                   // 2709
			_fnInitComplete( settings, json );                                                                                  // 2710
		}                                                                                                                    // 2711
	                                                                                                                      // 2712
		settings.bAjaxDataGet = true;                                                                                        // 2713
		_fnProcessingDisplay( settings, false );                                                                             // 2714
	}                                                                                                                     // 2715
	                                                                                                                      // 2716
	                                                                                                                      // 2717
	/**                                                                                                                   // 2718
	 * Get the data from the JSON data source to use for drawing a table. Using                                           // 2719
	 * `_fnGetObjectDataFn` allows the data to be sourced from a property of the                                          // 2720
	 * source object, or from a processing function.                                                                      // 2721
	 *  @param {object} oSettings dataTables settings object                                                              // 2722
	 *  @param  {object} json Data source object / array from the server                                                  // 2723
	 *  @return {array} Array of data to use                                                                              // 2724
	 */                                                                                                                   // 2725
	function _fnAjaxDataSrc ( oSettings, json )                                                                           // 2726
	{                                                                                                                     // 2727
		var dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?                            // 2728
			oSettings.ajax.dataSrc :                                                                                            // 2729
			oSettings.sAjaxDataProp; // Compatibility with 1.9-.                                                                // 2730
	                                                                                                                      // 2731
		// Compatibility with 1.9-. In order to read from aaData, check if the                                               // 2732
		// default has been changed, if not, check for aaData                                                                // 2733
		if ( dataSrc === 'data' ) {                                                                                          // 2734
			return json.aaData || json[dataSrc];                                                                                // 2735
		}                                                                                                                    // 2736
	                                                                                                                      // 2737
		return dataSrc !== "" ?                                                                                              // 2738
			_fnGetObjectDataFn( dataSrc )( json ) :                                                                             // 2739
			json;                                                                                                               // 2740
	}                                                                                                                     // 2741
	                                                                                                                      // 2742
	/**                                                                                                                   // 2743
	 * Generate the node required for filtering text                                                                      // 2744
	 *  @returns {node} Filter control element                                                                            // 2745
	 *  @param {object} oSettings dataTables settings object                                                              // 2746
	 *  @memberof DataTable#oApi                                                                                          // 2747
	 */                                                                                                                   // 2748
	function _fnFeatureHtmlFilter ( settings )                                                                            // 2749
	{                                                                                                                     // 2750
		var classes = settings.oClasses;                                                                                     // 2751
		var tableId = settings.sTableId;                                                                                     // 2752
		var language = settings.oLanguage;                                                                                   // 2753
		var previousSearch = settings.oPreviousSearch;                                                                       // 2754
		var features = settings.aanFeatures;                                                                                 // 2755
		var input = '<input type="search" class="'+classes.sFilterInput+'"/>';                                               // 2756
	                                                                                                                      // 2757
		var str = language.sSearch;                                                                                          // 2758
		str = str.match(/_INPUT_/) ?                                                                                         // 2759
			str.replace('_INPUT_', input) :                                                                                     // 2760
			str+input;                                                                                                          // 2761
	                                                                                                                      // 2762
		var filter = $('<div/>', {                                                                                           // 2763
				'id': ! features.f ? tableId+'_filter' : null,                                                                     // 2764
				'class': classes.sFilter                                                                                           // 2765
			} )                                                                                                                 // 2766
			.append( $('<label/>' ).append( str ) );                                                                            // 2767
	                                                                                                                      // 2768
		var searchFn = function() {                                                                                          // 2769
			/* Update all other filter input elements for the new display */                                                    // 2770
			var n = features.f;                                                                                                 // 2771
			var val = !this.value ? "" : this.value; // mental IE8 fix :-(                                                      // 2772
	                                                                                                                      // 2773
			/* Now do the filter */                                                                                             // 2774
			if ( val != previousSearch.sSearch ) {                                                                              // 2775
				_fnFilterComplete( settings, {                                                                                     // 2776
					"sSearch": val,                                                                                                   // 2777
					"bRegex": previousSearch.bRegex,                                                                                  // 2778
					"bSmart": previousSearch.bSmart ,                                                                                 // 2779
					"bCaseInsensitive": previousSearch.bCaseInsensitive                                                               // 2780
				} );                                                                                                               // 2781
	                                                                                                                      // 2782
				// Need to redraw, without resorting                                                                               // 2783
				settings._iDisplayStart = 0;                                                                                       // 2784
				_fnDraw( settings );                                                                                               // 2785
			}                                                                                                                   // 2786
		};                                                                                                                   // 2787
	                                                                                                                      // 2788
		var searchDelay = settings.searchDelay !== null ?                                                                    // 2789
			settings.searchDelay :                                                                                              // 2790
			_fnDataSource( settings ) === 'ssp' ?                                                                               // 2791
				400 :                                                                                                              // 2792
				0;                                                                                                                 // 2793
	                                                                                                                      // 2794
		var jqFilter = $('input', filter)                                                                                    // 2795
			.val( previousSearch.sSearch )                                                                                      // 2796
			.attr( 'placeholder', language.sSearchPlaceholder )                                                                 // 2797
			.bind(                                                                                                              // 2798
				'keyup.DT search.DT input.DT paste.DT cut.DT',                                                                     // 2799
				searchDelay ?                                                                                                      // 2800
					_fnThrottle( searchFn, searchDelay ) :                                                                            // 2801
					searchFn                                                                                                          // 2802
			)                                                                                                                   // 2803
			.bind( 'keypress.DT', function(e) {                                                                                 // 2804
				/* Prevent form submission */                                                                                      // 2805
				if ( e.keyCode == 13 ) {                                                                                           // 2806
					return false;                                                                                                     // 2807
				}                                                                                                                  // 2808
			} )                                                                                                                 // 2809
			.attr('aria-controls', tableId);                                                                                    // 2810
	                                                                                                                      // 2811
		// Update the input elements whenever the table is filtered                                                          // 2812
		$(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {                                                          // 2813
			if ( settings === s ) {                                                                                             // 2814
				// IE9 throws an 'unknown error' if document.activeElement is used                                                 // 2815
				// inside an iframe or frame...                                                                                    // 2816
				try {                                                                                                              // 2817
					if ( jqFilter[0] !== document.activeElement ) {                                                                   // 2818
						jqFilter.val( previousSearch.sSearch );                                                                          // 2819
					}                                                                                                                 // 2820
				}                                                                                                                  // 2821
				catch ( e ) {}                                                                                                     // 2822
			}                                                                                                                   // 2823
		} );                                                                                                                 // 2824
	                                                                                                                      // 2825
		return filter[0];                                                                                                    // 2826
	}                                                                                                                     // 2827
	                                                                                                                      // 2828
	                                                                                                                      // 2829
	/**                                                                                                                   // 2830
	 * Filter the table using both the global filter and column based filtering                                           // 2831
	 *  @param {object} oSettings dataTables settings object                                                              // 2832
	 *  @param {object} oSearch search information                                                                        // 2833
	 *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)                            // 2834
	 *  @memberof DataTable#oApi                                                                                          // 2835
	 */                                                                                                                   // 2836
	function _fnFilterComplete ( oSettings, oInput, iForce )                                                              // 2837
	{                                                                                                                     // 2838
		var oPrevSearch = oSettings.oPreviousSearch;                                                                         // 2839
		var aoPrevSearch = oSettings.aoPreSearchCols;                                                                        // 2840
		var fnSaveFilter = function ( oFilter ) {                                                                            // 2841
			/* Save the filtering values */                                                                                     // 2842
			oPrevSearch.sSearch = oFilter.sSearch;                                                                              // 2843
			oPrevSearch.bRegex = oFilter.bRegex;                                                                                // 2844
			oPrevSearch.bSmart = oFilter.bSmart;                                                                                // 2845
			oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;                                                            // 2846
		};                                                                                                                   // 2847
		var fnRegex = function ( o ) {                                                                                       // 2848
			// Backwards compatibility with the bEscapeRegex option                                                             // 2849
			return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;                                                   // 2850
		};                                                                                                                   // 2851
	                                                                                                                      // 2852
		// Resolve any column types that are unknown due to addition or invalidation                                         // 2853
		// @todo As per sort - can this be moved into an event handler?                                                      // 2854
		_fnColumnTypes( oSettings );                                                                                         // 2855
	                                                                                                                      // 2856
		/* In server-side processing all filtering is done by the server, so no point hanging around here */                 // 2857
		if ( _fnDataSource( oSettings ) != 'ssp' )                                                                           // 2858
		{                                                                                                                    // 2859
			/* Global filter */                                                                                                 // 2860
			_fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );            // 2861
			fnSaveFilter( oInput );                                                                                             // 2862
	                                                                                                                      // 2863
			/* Now do the individual column filter */                                                                           // 2864
			for ( var i=0 ; i<aoPrevSearch.length ; i++ )                                                                       // 2865
			{                                                                                                                   // 2866
				_fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),                                  // 2867
					aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );                                                       // 2868
			}                                                                                                                   // 2869
	                                                                                                                      // 2870
			/* Custom filtering */                                                                                              // 2871
			_fnFilterCustom( oSettings );                                                                                       // 2872
		}                                                                                                                    // 2873
		else                                                                                                                 // 2874
		{                                                                                                                    // 2875
			fnSaveFilter( oInput );                                                                                             // 2876
		}                                                                                                                    // 2877
	                                                                                                                      // 2878
		/* Tell the draw function we have been filtering */                                                                  // 2879
		oSettings.bFiltered = true;                                                                                          // 2880
		_fnCallbackFire( oSettings, null, 'search', [oSettings] );                                                           // 2881
	}                                                                                                                     // 2882
	                                                                                                                      // 2883
	                                                                                                                      // 2884
	/**                                                                                                                   // 2885
	 * Apply custom filtering functions                                                                                   // 2886
	 *  @param {object} oSettings dataTables settings object                                                              // 2887
	 *  @memberof DataTable#oApi                                                                                          // 2888
	 */                                                                                                                   // 2889
	function _fnFilterCustom( settings )                                                                                  // 2890
	{                                                                                                                     // 2891
		var filters = DataTable.ext.search;                                                                                  // 2892
		var displayRows = settings.aiDisplay;                                                                                // 2893
		var row, rowIdx;                                                                                                     // 2894
	                                                                                                                      // 2895
		for ( var i=0, ien=filters.length ; i<ien ; i++ ) {                                                                  // 2896
			var rows = [];                                                                                                      // 2897
	                                                                                                                      // 2898
			// Loop over each row and see if it should be included                                                              // 2899
			for ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {                                                             // 2900
				rowIdx = displayRows[ j ];                                                                                         // 2901
				row = settings.aoData[ rowIdx ];                                                                                   // 2902
	                                                                                                                      // 2903
				if ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {                                           // 2904
					rows.push( rowIdx );                                                                                              // 2905
				}                                                                                                                  // 2906
			}                                                                                                                   // 2907
	                                                                                                                      // 2908
			// So the array reference doesn't break set the results into the                                                    // 2909
			// existing array                                                                                                   // 2910
			displayRows.length = 0;                                                                                             // 2911
			displayRows.push.apply( displayRows, rows );                                                                        // 2912
		}                                                                                                                    // 2913
	}                                                                                                                     // 2914
	                                                                                                                      // 2915
	                                                                                                                      // 2916
	/**                                                                                                                   // 2917
	 * Filter the table on a per-column basis                                                                             // 2918
	 *  @param {object} oSettings dataTables settings object                                                              // 2919
	 *  @param {string} sInput string to filter on                                                                        // 2920
	 *  @param {int} iColumn column to filter                                                                             // 2921
	 *  @param {bool} bRegex treat search string as a regular expression or not                                           // 2922
	 *  @param {bool} bSmart use smart filtering or not                                                                   // 2923
	 *  @param {bool} bCaseInsensitive Do case insenstive matching or not                                                 // 2924
	 *  @memberof DataTable#oApi                                                                                          // 2925
	 */                                                                                                                   // 2926
	function _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )                               // 2927
	{                                                                                                                     // 2928
		if ( searchStr === '' ) {                                                                                            // 2929
			return;                                                                                                             // 2930
		}                                                                                                                    // 2931
	                                                                                                                      // 2932
		var data;                                                                                                            // 2933
		var display = settings.aiDisplay;                                                                                    // 2934
		var rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );                                    // 2935
	                                                                                                                      // 2936
		for ( var i=display.length-1 ; i>=0 ; i-- ) {                                                                        // 2937
			data = settings.aoData[ display[i] ]._aFilterData[ colIdx ];                                                        // 2938
	                                                                                                                      // 2939
			if ( ! rpSearch.test( data ) ) {                                                                                    // 2940
				display.splice( i, 1 );                                                                                            // 2941
			}                                                                                                                   // 2942
		}                                                                                                                    // 2943
	}                                                                                                                     // 2944
	                                                                                                                      // 2945
	                                                                                                                      // 2946
	/**                                                                                                                   // 2947
	 * Filter the data table based on user input and draw the table                                                       // 2948
	 *  @param {object} settings dataTables settings object                                                               // 2949
	 *  @param {string} input string to filter on                                                                         // 2950
	 *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)                    // 2951
	 *  @param {bool} regex treat as a regular expression or not                                                          // 2952
	 *  @param {bool} smart perform smart filtering or not                                                                // 2953
	 *  @param {bool} caseInsensitive Do case insenstive matching or not                                                  // 2954
	 *  @memberof DataTable#oApi                                                                                          // 2955
	 */                                                                                                                   // 2956
	function _fnFilter( settings, input, force, regex, smart, caseInsensitive )                                           // 2957
	{                                                                                                                     // 2958
		var rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );                                        // 2959
		var prevSearch = settings.oPreviousSearch.sSearch;                                                                   // 2960
		var displayMaster = settings.aiDisplayMaster;                                                                        // 2961
		var display, invalidated, i;                                                                                         // 2962
	                                                                                                                      // 2963
		// Need to take account of custom filtering functions - always filter                                                // 2964
		if ( DataTable.ext.search.length !== 0 ) {                                                                           // 2965
			force = true;                                                                                                       // 2966
		}                                                                                                                    // 2967
	                                                                                                                      // 2968
		// Check if any of the rows were invalidated                                                                         // 2969
		invalidated = _fnFilterData( settings );                                                                             // 2970
	                                                                                                                      // 2971
		// If the input is blank - we just want the full data set                                                            // 2972
		if ( input.length <= 0 ) {                                                                                           // 2973
			settings.aiDisplay = displayMaster.slice();                                                                         // 2974
		}                                                                                                                    // 2975
		else {                                                                                                               // 2976
			// New search - start from the master array                                                                         // 2977
			if ( invalidated ||                                                                                                 // 2978
				 force ||                                                                                                          // 2979
				 prevSearch.length > input.length ||                                                                               // 2980
				 input.indexOf(prevSearch) !== 0 ||                                                                                // 2981
				 settings.bSorted // On resort, the display master needs to be                                                     // 2982
				                  // re-filtered since indexes will have changed                                                   // 2983
			) {                                                                                                                 // 2984
				settings.aiDisplay = displayMaster.slice();                                                                        // 2985
			}                                                                                                                   // 2986
	                                                                                                                      // 2987
			// Search the display array                                                                                         // 2988
			display = settings.aiDisplay;                                                                                       // 2989
	                                                                                                                      // 2990
			for ( i=display.length-1 ; i>=0 ; i-- ) {                                                                           // 2991
				if ( ! rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {                                              // 2992
					display.splice( i, 1 );                                                                                           // 2993
				}                                                                                                                  // 2994
			}                                                                                                                   // 2995
		}                                                                                                                    // 2996
	}                                                                                                                     // 2997
	                                                                                                                      // 2998
	                                                                                                                      // 2999
	/**                                                                                                                   // 3000
	 * Build a regular expression object suitable for searching a table                                                   // 3001
	 *  @param {string} sSearch string to search for                                                                      // 3002
	 *  @param {bool} bRegex treat as a regular expression or not                                                         // 3003
	 *  @param {bool} bSmart perform smart filtering or not                                                               // 3004
	 *  @param {bool} bCaseInsensitive Do case insensitive matching or not                                                // 3005
	 *  @returns {RegExp} constructed object                                                                              // 3006
	 *  @memberof DataTable#oApi                                                                                          // 3007
	 */                                                                                                                   // 3008
	function _fnFilterCreateSearch( search, regex, smart, caseInsensitive )                                               // 3009
	{                                                                                                                     // 3010
		search = regex ?                                                                                                     // 3011
			search :                                                                                                            // 3012
			_fnEscapeRegex( search );                                                                                           // 3013
		                                                                                                                     // 3014
		if ( smart ) {                                                                                                       // 3015
			/* For smart filtering we want to allow the search to work regardless of                                            // 3016
			 * word order. We also want double quoted text to be preserved, so word                                             // 3017
			 * order is important - a la google. So this is what we want to                                                     // 3018
			 * generate:                                                                                                        // 3019
			 *                                                                                                                  // 3020
			 * ^(?=.*?\bone\b)(?=.*?\btwo three\b)(?=.*?\bfour\b).*$                                                            // 3021
			 */                                                                                                                 // 3022
			var a = $.map( search.match( /"[^"]+"|[^ ]+/g ) || [''], function ( word ) {                                        // 3023
				if ( word.charAt(0) === '"' ) {                                                                                    // 3024
					var m = word.match( /^"(.*)"$/ );                                                                                 // 3025
					word = m ? m[1] : word;                                                                                           // 3026
				}                                                                                                                  // 3027
	                                                                                                                      // 3028
				return word.replace('"', '');                                                                                      // 3029
			} );                                                                                                                // 3030
	                                                                                                                      // 3031
			search = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';                                                                      // 3032
		}                                                                                                                    // 3033
	                                                                                                                      // 3034
		return new RegExp( search, caseInsensitive ? 'i' : '' );                                                             // 3035
	}                                                                                                                     // 3036
	                                                                                                                      // 3037
	                                                                                                                      // 3038
	/**                                                                                                                   // 3039
	 * Escape a string such that it can be used in a regular expression                                                   // 3040
	 *  @param {string} sVal string to escape                                                                             // 3041
	 *  @returns {string} escaped string                                                                                  // 3042
	 *  @memberof DataTable#oApi                                                                                          // 3043
	 */                                                                                                                   // 3044
	function _fnEscapeRegex ( sVal )                                                                                      // 3045
	{                                                                                                                     // 3046
		return sVal.replace( _re_escape_regex, '\\$1' );                                                                     // 3047
	}                                                                                                                     // 3048
	                                                                                                                      // 3049
	                                                                                                                      // 3050
	                                                                                                                      // 3051
	var __filter_div = $('<div>')[0];                                                                                     // 3052
	var __filter_div_textContent = __filter_div.textContent !== undefined;                                                // 3053
	                                                                                                                      // 3054
	// Update the filtering data for each row if needed (by invalidation or first run)                                    // 3055
	function _fnFilterData ( settings )                                                                                   // 3056
	{                                                                                                                     // 3057
		var columns = settings.aoColumns;                                                                                    // 3058
		var column;                                                                                                          // 3059
		var i, j, ien, jen, filterData, cellData, row;                                                                       // 3060
		var fomatters = DataTable.ext.type.search;                                                                           // 3061
		var wasInvalidated = false;                                                                                          // 3062
	                                                                                                                      // 3063
		for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {                                                              // 3064
			row = settings.aoData[i];                                                                                           // 3065
	                                                                                                                      // 3066
			if ( ! row._aFilterData ) {                                                                                         // 3067
				filterData = [];                                                                                                   // 3068
	                                                                                                                      // 3069
				for ( j=0, jen=columns.length ; j<jen ; j++ ) {                                                                    // 3070
					column = columns[j];                                                                                              // 3071
	                                                                                                                      // 3072
					if ( column.bSearchable ) {                                                                                       // 3073
						cellData = _fnGetCellData( settings, i, j, 'filter' );                                                           // 3074
	                                                                                                                      // 3075
						if ( fomatters[ column.sType ] ) {                                                                               // 3076
							cellData = fomatters[ column.sType ]( cellData );                                                               // 3077
						}                                                                                                                // 3078
	                                                                                                                      // 3079
						// Search in DataTables 1.10 is string based. In 1.11 this                                                       // 3080
						// should be altered to also allow strict type checking.                                                         // 3081
						if ( cellData === null ) {                                                                                       // 3082
							cellData = '';                                                                                                  // 3083
						}                                                                                                                // 3084
	                                                                                                                      // 3085
						if ( typeof cellData !== 'string' && cellData.toString ) {                                                       // 3086
							cellData = cellData.toString();                                                                                 // 3087
						}                                                                                                                // 3088
					}                                                                                                                 // 3089
					else {                                                                                                            // 3090
						cellData = '';                                                                                                   // 3091
					}                                                                                                                 // 3092
	                                                                                                                      // 3093
					// If it looks like there is an HTML entity in the string,                                                        // 3094
					// attempt to decode it so sorting works as expected. Note that                                                   // 3095
					// we could use a single line of jQuery to do this, but the DOM                                                   // 3096
					// method used here is much faster http://jsperf.com/html-decode                                                  // 3097
					if ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {                                                         // 3098
						__filter_div.innerHTML = cellData;                                                                               // 3099
						cellData = __filter_div_textContent ?                                                                            // 3100
							__filter_div.textContent :                                                                                      // 3101
							__filter_div.innerText;                                                                                         // 3102
					}                                                                                                                 // 3103
	                                                                                                                      // 3104
					if ( cellData.replace ) {                                                                                         // 3105
						cellData = cellData.replace(/[\r\n]/g, '');                                                                      // 3106
					}                                                                                                                 // 3107
	                                                                                                                      // 3108
					filterData.push( cellData );                                                                                      // 3109
				}                                                                                                                  // 3110
	                                                                                                                      // 3111
				row._aFilterData = filterData;                                                                                     // 3112
				row._sFilterRow = filterData.join('  ');                                                                           // 3113
				wasInvalidated = true;                                                                                             // 3114
			}                                                                                                                   // 3115
		}                                                                                                                    // 3116
	                                                                                                                      // 3117
		return wasInvalidated;                                                                                               // 3118
	}                                                                                                                     // 3119
	                                                                                                                      // 3120
	                                                                                                                      // 3121
	/**                                                                                                                   // 3122
	 * Convert from the internal Hungarian notation to camelCase for external                                             // 3123
	 * interaction                                                                                                        // 3124
	 *  @param {object} obj Object to convert                                                                             // 3125
	 *  @returns {object} Inverted object                                                                                 // 3126
	 *  @memberof DataTable#oApi                                                                                          // 3127
	 */                                                                                                                   // 3128
	function _fnSearchToCamel ( obj )                                                                                     // 3129
	{                                                                                                                     // 3130
		return {                                                                                                             // 3131
			search:          obj.sSearch,                                                                                       // 3132
			smart:           obj.bSmart,                                                                                        // 3133
			regex:           obj.bRegex,                                                                                        // 3134
			caseInsensitive: obj.bCaseInsensitive                                                                               // 3135
		};                                                                                                                   // 3136
	}                                                                                                                     // 3137
	                                                                                                                      // 3138
	                                                                                                                      // 3139
	                                                                                                                      // 3140
	/**                                                                                                                   // 3141
	 * Convert from camelCase notation to the internal Hungarian. We could use the                                        // 3142
	 * Hungarian convert function here, but this is cleaner                                                               // 3143
	 *  @param {object} obj Object to convert                                                                             // 3144
	 *  @returns {object} Inverted object                                                                                 // 3145
	 *  @memberof DataTable#oApi                                                                                          // 3146
	 */                                                                                                                   // 3147
	function _fnSearchToHung ( obj )                                                                                      // 3148
	{                                                                                                                     // 3149
		return {                                                                                                             // 3150
			sSearch:          obj.search,                                                                                       // 3151
			bSmart:           obj.smart,                                                                                        // 3152
			bRegex:           obj.regex,                                                                                        // 3153
			bCaseInsensitive: obj.caseInsensitive                                                                               // 3154
		};                                                                                                                   // 3155
	}                                                                                                                     // 3156
	                                                                                                                      // 3157
	/**                                                                                                                   // 3158
	 * Generate the node required for the info display                                                                    // 3159
	 *  @param {object} oSettings dataTables settings object                                                              // 3160
	 *  @returns {node} Information element                                                                               // 3161
	 *  @memberof DataTable#oApi                                                                                          // 3162
	 */                                                                                                                   // 3163
	function _fnFeatureHtmlInfo ( settings )                                                                              // 3164
	{                                                                                                                     // 3165
		var                                                                                                                  // 3166
			tid = settings.sTableId,                                                                                            // 3167
			nodes = settings.aanFeatures.i,                                                                                     // 3168
			n = $('<div/>', {                                                                                                   // 3169
				'class': settings.oClasses.sInfo,                                                                                  // 3170
				'id': ! nodes ? tid+'_info' : null                                                                                 // 3171
			} );                                                                                                                // 3172
	                                                                                                                      // 3173
		if ( ! nodes ) {                                                                                                     // 3174
			// Update display on each draw                                                                                      // 3175
			settings.aoDrawCallback.push( {                                                                                     // 3176
				"fn": _fnUpdateInfo,                                                                                               // 3177
				"sName": "information"                                                                                             // 3178
			} );                                                                                                                // 3179
	                                                                                                                      // 3180
			n                                                                                                                   // 3181
				.attr( 'role', 'status' )                                                                                          // 3182
				.attr( 'aria-live', 'polite' );                                                                                    // 3183
	                                                                                                                      // 3184
			// Table is described by our info div                                                                               // 3185
			$(settings.nTable).attr( 'aria-describedby', tid+'_info' );                                                         // 3186
		}                                                                                                                    // 3187
	                                                                                                                      // 3188
		return n[0];                                                                                                         // 3189
	}                                                                                                                     // 3190
	                                                                                                                      // 3191
	                                                                                                                      // 3192
	/**                                                                                                                   // 3193
	 * Update the information elements in the display                                                                     // 3194
	 *  @param {object} settings dataTables settings object                                                               // 3195
	 *  @memberof DataTable#oApi                                                                                          // 3196
	 */                                                                                                                   // 3197
	function _fnUpdateInfo ( settings )                                                                                   // 3198
	{                                                                                                                     // 3199
		/* Show information about the table */                                                                               // 3200
		var nodes = settings.aanFeatures.i;                                                                                  // 3201
		if ( nodes.length === 0 ) {                                                                                          // 3202
			return;                                                                                                             // 3203
		}                                                                                                                    // 3204
	                                                                                                                      // 3205
		var                                                                                                                  // 3206
			lang  = settings.oLanguage,                                                                                         // 3207
			start = settings._iDisplayStart+1,                                                                                  // 3208
			end   = settings.fnDisplayEnd(),                                                                                    // 3209
			max   = settings.fnRecordsTotal(),                                                                                  // 3210
			total = settings.fnRecordsDisplay(),                                                                                // 3211
			out   = total ?                                                                                                     // 3212
				lang.sInfo :                                                                                                       // 3213
				lang.sInfoEmpty;                                                                                                   // 3214
	                                                                                                                      // 3215
		if ( total !== max ) {                                                                                               // 3216
			/* Record set after filtering */                                                                                    // 3217
			out += ' ' + lang.sInfoFiltered;                                                                                    // 3218
		}                                                                                                                    // 3219
	                                                                                                                      // 3220
		// Convert the macros                                                                                                // 3221
		out += lang.sInfoPostFix;                                                                                            // 3222
		out = _fnInfoMacros( settings, out );                                                                                // 3223
	                                                                                                                      // 3224
		var callback = lang.fnInfoCallback;                                                                                  // 3225
		if ( callback !== null ) {                                                                                           // 3226
			out = callback.call( settings.oInstance,                                                                            // 3227
				settings, start, end, max, total, out                                                                              // 3228
			);                                                                                                                  // 3229
		}                                                                                                                    // 3230
	                                                                                                                      // 3231
		$(nodes).html( out );                                                                                                // 3232
	}                                                                                                                     // 3233
	                                                                                                                      // 3234
	                                                                                                                      // 3235
	function _fnInfoMacros ( settings, str )                                                                              // 3236
	{                                                                                                                     // 3237
		// When infinite scrolling, we are always starting at 1. _iDisplayStart is used only                                 // 3238
		// internally                                                                                                        // 3239
		var                                                                                                                  // 3240
			formatter  = settings.fnFormatNumber,                                                                               // 3241
			start      = settings._iDisplayStart+1,                                                                             // 3242
			len        = settings._iDisplayLength,                                                                              // 3243
			vis        = settings.fnRecordsDisplay(),                                                                           // 3244
			all        = len === -1;                                                                                            // 3245
	                                                                                                                      // 3246
		return str.                                                                                                          // 3247
			replace(/_START_/g, formatter.call( settings, start ) ).                                                            // 3248
			replace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).                                          // 3249
			replace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).                                        // 3250
			replace(/_TOTAL_/g, formatter.call( settings, vis ) ).                                                              // 3251
			replace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).                               // 3252
			replace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );                                 // 3253
	}                                                                                                                     // 3254
	                                                                                                                      // 3255
	                                                                                                                      // 3256
	                                                                                                                      // 3257
	/**                                                                                                                   // 3258
	 * Draw the table for the first time, adding all required features                                                    // 3259
	 *  @param {object} settings dataTables settings object                                                               // 3260
	 *  @memberof DataTable#oApi                                                                                          // 3261
	 */                                                                                                                   // 3262
	function _fnInitialise ( settings )                                                                                   // 3263
	{                                                                                                                     // 3264
		var i, iLen, iAjaxStart=settings.iInitDisplayStart;                                                                  // 3265
		var columns = settings.aoColumns, column;                                                                            // 3266
		var features = settings.oFeatures;                                                                                   // 3267
	                                                                                                                      // 3268
		/* Ensure that the table data is fully initialised */                                                                // 3269
		if ( ! settings.bInitialised ) {                                                                                     // 3270
			setTimeout( function(){ _fnInitialise( settings ); }, 200 );                                                        // 3271
			return;                                                                                                             // 3272
		}                                                                                                                    // 3273
	                                                                                                                      // 3274
		/* Show the display HTML options */                                                                                  // 3275
		_fnAddOptionsHtml( settings );                                                                                       // 3276
	                                                                                                                      // 3277
		/* Build and draw the header / footer for the table */                                                               // 3278
		_fnBuildHead( settings );                                                                                            // 3279
		_fnDrawHead( settings, settings.aoHeader );                                                                          // 3280
		_fnDrawHead( settings, settings.aoFooter );                                                                          // 3281
	                                                                                                                      // 3282
		/* Okay to show that something is going on now */                                                                    // 3283
		_fnProcessingDisplay( settings, true );                                                                              // 3284
	                                                                                                                      // 3285
		/* Calculate sizes for columns */                                                                                    // 3286
		if ( features.bAutoWidth ) {                                                                                         // 3287
			_fnCalculateColumnWidths( settings );                                                                               // 3288
		}                                                                                                                    // 3289
	                                                                                                                      // 3290
		for ( i=0, iLen=columns.length ; i<iLen ; i++ ) {                                                                    // 3291
			column = columns[i];                                                                                                // 3292
	                                                                                                                      // 3293
			if ( column.sWidth ) {                                                                                              // 3294
				column.nTh.style.width = _fnStringToCss( column.sWidth );                                                          // 3295
			}                                                                                                                   // 3296
		}                                                                                                                    // 3297
	                                                                                                                      // 3298
		// If there is default sorting required - let's do it. The sort function                                             // 3299
		// will do the drawing for us. Otherwise we draw the table regardless of the                                         // 3300
		// Ajax source - this allows the table to look initialised for Ajax sourcing                                         // 3301
		// data (show 'loading' message possibly)                                                                            // 3302
		_fnReDraw( settings );                                                                                               // 3303
	                                                                                                                      // 3304
		// Server-side processing init complete is done by _fnAjaxUpdateDraw                                                 // 3305
		var dataSrc = _fnDataSource( settings );                                                                             // 3306
		if ( dataSrc != 'ssp' ) {                                                                                            // 3307
			// if there is an ajax source load the data                                                                         // 3308
			if ( dataSrc == 'ajax' ) {                                                                                          // 3309
				_fnBuildAjax( settings, [], function(json) {                                                                       // 3310
					var aData = _fnAjaxDataSrc( settings, json );                                                                     // 3311
	                                                                                                                      // 3312
					// Got the data - add it to the table                                                                             // 3313
					for ( i=0 ; i<aData.length ; i++ ) {                                                                              // 3314
						_fnAddData( settings, aData[i] );                                                                                // 3315
					}                                                                                                                 // 3316
	                                                                                                                      // 3317
					// Reset the init display for cookie saving. We've already done                                                   // 3318
					// a filter, and therefore cleared it before. So we need to make                                                  // 3319
					// it appear 'fresh'                                                                                              // 3320
					settings.iInitDisplayStart = iAjaxStart;                                                                          // 3321
	                                                                                                                      // 3322
					_fnReDraw( settings );                                                                                            // 3323
	                                                                                                                      // 3324
					_fnProcessingDisplay( settings, false );                                                                          // 3325
					_fnInitComplete( settings, json );                                                                                // 3326
				}, settings );                                                                                                     // 3327
			}                                                                                                                   // 3328
			else {                                                                                                              // 3329
				_fnProcessingDisplay( settings, false );                                                                           // 3330
				_fnInitComplete( settings );                                                                                       // 3331
			}                                                                                                                   // 3332
		}                                                                                                                    // 3333
	}                                                                                                                     // 3334
	                                                                                                                      // 3335
	                                                                                                                      // 3336
	/**                                                                                                                   // 3337
	 * Draw the table for the first time, adding all required features                                                    // 3338
	 *  @param {object} oSettings dataTables settings object                                                              // 3339
	 *  @param {object} [json] JSON from the server that completed the table, if using Ajax source                        // 3340
	 *    with client-side processing (optional)                                                                          // 3341
	 *  @memberof DataTable#oApi                                                                                          // 3342
	 */                                                                                                                   // 3343
	function _fnInitComplete ( settings, json )                                                                           // 3344
	{                                                                                                                     // 3345
		settings._bInitComplete = true;                                                                                      // 3346
	                                                                                                                      // 3347
		// On an Ajax load we now have data and therefore want to apply the column                                           // 3348
		// sizing                                                                                                            // 3349
		if ( json ) {                                                                                                        // 3350
			_fnAdjustColumnSizing( settings );                                                                                  // 3351
		}                                                                                                                    // 3352
	                                                                                                                      // 3353
		_fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );                                             // 3354
	}                                                                                                                     // 3355
	                                                                                                                      // 3356
	                                                                                                                      // 3357
	function _fnLengthChange ( settings, val )                                                                            // 3358
	{                                                                                                                     // 3359
		var len = parseInt( val, 10 );                                                                                       // 3360
		settings._iDisplayLength = len;                                                                                      // 3361
	                                                                                                                      // 3362
		_fnLengthOverflow( settings );                                                                                       // 3363
	                                                                                                                      // 3364
		// Fire length change event                                                                                          // 3365
		_fnCallbackFire( settings, null, 'length', [settings, len] );                                                        // 3366
	}                                                                                                                     // 3367
	                                                                                                                      // 3368
	                                                                                                                      // 3369
	/**                                                                                                                   // 3370
	 * Generate the node required for user display length changing                                                        // 3371
	 *  @param {object} settings dataTables settings object                                                               // 3372
	 *  @returns {node} Display length feature node                                                                       // 3373
	 *  @memberof DataTable#oApi                                                                                          // 3374
	 */                                                                                                                   // 3375
	function _fnFeatureHtmlLength ( settings )                                                                            // 3376
	{                                                                                                                     // 3377
		var                                                                                                                  // 3378
			classes  = settings.oClasses,                                                                                       // 3379
			tableId  = settings.sTableId,                                                                                       // 3380
			menu     = settings.aLengthMenu,                                                                                    // 3381
			d2       = $.isArray( menu[0] ),                                                                                    // 3382
			lengths  = d2 ? menu[0] : menu,                                                                                     // 3383
			language = d2 ? menu[1] : menu;                                                                                     // 3384
	                                                                                                                      // 3385
		var select = $('<select/>', {                                                                                        // 3386
			'name':          tableId+'_length',                                                                                 // 3387
			'aria-controls': tableId,                                                                                           // 3388
			'class':         classes.sLengthSelect                                                                              // 3389
		} );                                                                                                                 // 3390
	                                                                                                                      // 3391
		for ( var i=0, ien=lengths.length ; i<ien ; i++ ) {                                                                  // 3392
			select[0][ i ] = new Option( language[i], lengths[i] );                                                             // 3393
		}                                                                                                                    // 3394
	                                                                                                                      // 3395
		var div = $('<div><label/></div>').addClass( classes.sLength );                                                      // 3396
		if ( ! settings.aanFeatures.l ) {                                                                                    // 3397
			div[0].id = tableId+'_length';                                                                                      // 3398
		}                                                                                                                    // 3399
	                                                                                                                      // 3400
		div.children().append(                                                                                               // 3401
			settings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )                                             // 3402
		);                                                                                                                   // 3403
	                                                                                                                      // 3404
		// Can't use `select` variable as user might provide their own and the                                               // 3405
		// reference is broken by the use of outerHTML                                                                       // 3406
		$('select', div)                                                                                                     // 3407
			.val( settings._iDisplayLength )                                                                                    // 3408
			.bind( 'change.DT', function(e) {                                                                                   // 3409
				_fnLengthChange( settings, $(this).val() );                                                                        // 3410
				_fnDraw( settings );                                                                                               // 3411
			} );                                                                                                                // 3412
	                                                                                                                      // 3413
		// Update node value whenever anything changes the table's length                                                    // 3414
		$(settings.nTable).bind( 'length.dt.DT', function (e, s, len) {                                                      // 3415
			if ( settings === s ) {                                                                                             // 3416
				$('select', div).val( len );                                                                                       // 3417
			}                                                                                                                   // 3418
		} );                                                                                                                 // 3419
	                                                                                                                      // 3420
		return div[0];                                                                                                       // 3421
	}                                                                                                                     // 3422
	                                                                                                                      // 3423
	                                                                                                                      // 3424
	                                                                                                                      // 3425
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                          // 3426
	 * Note that most of the paging logic is done in                                                                      // 3427
	 * DataTable.ext.pager                                                                                                // 3428
	 */                                                                                                                   // 3429
	                                                                                                                      // 3430
	/**                                                                                                                   // 3431
	 * Generate the node required for default pagination                                                                  // 3432
	 *  @param {object} oSettings dataTables settings object                                                              // 3433
	 *  @returns {node} Pagination feature node                                                                           // 3434
	 *  @memberof DataTable#oApi                                                                                          // 3435
	 */                                                                                                                   // 3436
	function _fnFeatureHtmlPaginate ( settings )                                                                          // 3437
	{                                                                                                                     // 3438
		var                                                                                                                  // 3439
			type   = settings.sPaginationType,                                                                                  // 3440
			plugin = DataTable.ext.pager[ type ],                                                                               // 3441
			modern = typeof plugin === 'function',                                                                              // 3442
			redraw = function( settings ) {                                                                                     // 3443
				_fnDraw( settings );                                                                                               // 3444
			},                                                                                                                  // 3445
			node = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],                                                 // 3446
			features = settings.aanFeatures;                                                                                    // 3447
	                                                                                                                      // 3448
		if ( ! modern ) {                                                                                                    // 3449
			plugin.fnInit( settings, node, redraw );                                                                            // 3450
		}                                                                                                                    // 3451
	                                                                                                                      // 3452
		/* Add a draw callback for the pagination on first instance, to update the paging display */                         // 3453
		if ( ! features.p )                                                                                                  // 3454
		{                                                                                                                    // 3455
			node.id = settings.sTableId+'_paginate';                                                                            // 3456
	                                                                                                                      // 3457
			settings.aoDrawCallback.push( {                                                                                     // 3458
				"fn": function( settings ) {                                                                                       // 3459
					if ( modern ) {                                                                                                   // 3460
						var                                                                                                              // 3461
							start      = settings._iDisplayStart,                                                                           // 3462
							len        = settings._iDisplayLength,                                                                          // 3463
							visRecords = settings.fnRecordsDisplay(),                                                                       // 3464
							all        = len === -1,                                                                                        // 3465
							page = all ? 0 : Math.ceil( start / len ),                                                                      // 3466
							pages = all ? 1 : Math.ceil( visRecords / len ),                                                                // 3467
							buttons = plugin(page, pages),                                                                                  // 3468
							i, ien;                                                                                                         // 3469
	                                                                                                                      // 3470
						for ( i=0, ien=features.p.length ; i<ien ; i++ ) {                                                               // 3471
							_fnRenderer( settings, 'pageButton' )(                                                                          // 3472
								settings, features.p[i], i, buttons, page, pages                                                               // 3473
							);                                                                                                              // 3474
						}                                                                                                                // 3475
					}                                                                                                                 // 3476
					else {                                                                                                            // 3477
						plugin.fnUpdate( settings, redraw );                                                                             // 3478
					}                                                                                                                 // 3479
				},                                                                                                                 // 3480
				"sName": "pagination"                                                                                              // 3481
			} );                                                                                                                // 3482
		}                                                                                                                    // 3483
	                                                                                                                      // 3484
		return node;                                                                                                         // 3485
	}                                                                                                                     // 3486
	                                                                                                                      // 3487
	                                                                                                                      // 3488
	/**                                                                                                                   // 3489
	 * Alter the display settings to change the page                                                                      // 3490
	 *  @param {object} settings DataTables settings object                                                               // 3491
	 *  @param {string|int} action Paging action to take: "first", "previous",                                            // 3492
	 *    "next" or "last" or page number to jump to (integer)                                                            // 3493
	 *  @param [bool] redraw Automatically draw the update or not                                                         // 3494
	 *  @returns {bool} true page has changed, false - no change                                                          // 3495
	 *  @memberof DataTable#oApi                                                                                          // 3496
	 */                                                                                                                   // 3497
	function _fnPageChange ( settings, action, redraw )                                                                   // 3498
	{                                                                                                                     // 3499
		var                                                                                                                  // 3500
			start     = settings._iDisplayStart,                                                                                // 3501
			len       = settings._iDisplayLength,                                                                               // 3502
			records   = settings.fnRecordsDisplay();                                                                            // 3503
	                                                                                                                      // 3504
		if ( records === 0 || len === -1 )                                                                                   // 3505
		{                                                                                                                    // 3506
			start = 0;                                                                                                          // 3507
		}                                                                                                                    // 3508
		else if ( typeof action === "number" )                                                                               // 3509
		{                                                                                                                    // 3510
			start = action * len;                                                                                               // 3511
	                                                                                                                      // 3512
			if ( start > records )                                                                                              // 3513
			{                                                                                                                   // 3514
				start = 0;                                                                                                         // 3515
			}                                                                                                                   // 3516
		}                                                                                                                    // 3517
		else if ( action == "first" )                                                                                        // 3518
		{                                                                                                                    // 3519
			start = 0;                                                                                                          // 3520
		}                                                                                                                    // 3521
		else if ( action == "previous" )                                                                                     // 3522
		{                                                                                                                    // 3523
			start = len >= 0 ?                                                                                                  // 3524
				start - len :                                                                                                      // 3525
				0;                                                                                                                 // 3526
	                                                                                                                      // 3527
			if ( start < 0 )                                                                                                    // 3528
			{                                                                                                                   // 3529
			  start = 0;                                                                                                        // 3530
			}                                                                                                                   // 3531
		}                                                                                                                    // 3532
		else if ( action == "next" )                                                                                         // 3533
		{                                                                                                                    // 3534
			if ( start + len < records )                                                                                        // 3535
			{                                                                                                                   // 3536
				start += len;                                                                                                      // 3537
			}                                                                                                                   // 3538
		}                                                                                                                    // 3539
		else if ( action == "last" )                                                                                         // 3540
		{                                                                                                                    // 3541
			start = Math.floor( (records-1) / len) * len;                                                                       // 3542
		}                                                                                                                    // 3543
		else                                                                                                                 // 3544
		{                                                                                                                    // 3545
			_fnLog( settings, 0, "Unknown paging action: "+action, 5 );                                                         // 3546
		}                                                                                                                    // 3547
	                                                                                                                      // 3548
		var changed = settings._iDisplayStart !== start;                                                                     // 3549
		settings._iDisplayStart = start;                                                                                     // 3550
	                                                                                                                      // 3551
		if ( changed ) {                                                                                                     // 3552
			_fnCallbackFire( settings, null, 'page', [settings] );                                                              // 3553
	                                                                                                                      // 3554
			if ( redraw ) {                                                                                                     // 3555
				_fnDraw( settings );                                                                                               // 3556
			}                                                                                                                   // 3557
		}                                                                                                                    // 3558
	                                                                                                                      // 3559
		return changed;                                                                                                      // 3560
	}                                                                                                                     // 3561
	                                                                                                                      // 3562
	                                                                                                                      // 3563
	                                                                                                                      // 3564
	/**                                                                                                                   // 3565
	 * Generate the node required for the processing node                                                                 // 3566
	 *  @param {object} settings dataTables settings object                                                               // 3567
	 *  @returns {node} Processing element                                                                                // 3568
	 *  @memberof DataTable#oApi                                                                                          // 3569
	 */                                                                                                                   // 3570
	function _fnFeatureHtmlProcessing ( settings )                                                                        // 3571
	{                                                                                                                     // 3572
		return $('<div/>', {                                                                                                 // 3573
				'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,                                           // 3574
				'class': settings.oClasses.sProcessing                                                                             // 3575
			} )                                                                                                                 // 3576
			.html( settings.oLanguage.sProcessing )                                                                             // 3577
			.insertBefore( settings.nTable )[0];                                                                                // 3578
	}                                                                                                                     // 3579
	                                                                                                                      // 3580
	                                                                                                                      // 3581
	/**                                                                                                                   // 3582
	 * Display or hide the processing indicator                                                                           // 3583
	 *  @param {object} settings dataTables settings object                                                               // 3584
	 *  @param {bool} show Show the processing indicator (true) or not (false)                                            // 3585
	 *  @memberof DataTable#oApi                                                                                          // 3586
	 */                                                                                                                   // 3587
	function _fnProcessingDisplay ( settings, show )                                                                      // 3588
	{                                                                                                                     // 3589
		if ( settings.oFeatures.bProcessing ) {                                                                              // 3590
			$(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );                                                // 3591
		}                                                                                                                    // 3592
	                                                                                                                      // 3593
		_fnCallbackFire( settings, null, 'processing', [settings, show] );                                                   // 3594
	}                                                                                                                     // 3595
	                                                                                                                      // 3596
	/**                                                                                                                   // 3597
	 * Add any control elements for the table - specifically scrolling                                                    // 3598
	 *  @param {object} settings dataTables settings object                                                               // 3599
	 *  @returns {node} Node to add to the DOM                                                                            // 3600
	 *  @memberof DataTable#oApi                                                                                          // 3601
	 */                                                                                                                   // 3602
	function _fnFeatureHtmlTable ( settings )                                                                             // 3603
	{                                                                                                                     // 3604
		var table = $(settings.nTable);                                                                                      // 3605
	                                                                                                                      // 3606
		// Add the ARIA grid role to the table                                                                               // 3607
		table.attr( 'role', 'grid' );                                                                                        // 3608
	                                                                                                                      // 3609
		// Scrolling from here on in                                                                                         // 3610
		var scroll = settings.oScroll;                                                                                       // 3611
	                                                                                                                      // 3612
		if ( scroll.sX === '' && scroll.sY === '' ) {                                                                        // 3613
			return settings.nTable;                                                                                             // 3614
		}                                                                                                                    // 3615
	                                                                                                                      // 3616
		var scrollX = scroll.sX;                                                                                             // 3617
		var scrollY = scroll.sY;                                                                                             // 3618
		var classes = settings.oClasses;                                                                                     // 3619
		var caption = table.children('caption');                                                                             // 3620
		var captionSide = caption.length ? caption[0]._captionSide : null;                                                   // 3621
		var headerClone = $( table[0].cloneNode(false) );                                                                    // 3622
		var footerClone = $( table[0].cloneNode(false) );                                                                    // 3623
		var footer = table.children('tfoot');                                                                                // 3624
		var _div = '<div/>';                                                                                                 // 3625
		var size = function ( s ) {                                                                                          // 3626
			return !s ? null : _fnStringToCss( s );                                                                             // 3627
		};                                                                                                                   // 3628
	                                                                                                                      // 3629
		// This is fairly messy, but with x scrolling enabled, if the table has a                                            // 3630
		// width attribute, regardless of any width applied using the column width                                           // 3631
		// options, the browser will shrink or grow the table as needed to fit into                                          // 3632
		// that 100%. That would make the width options useless. So we remove it.                                            // 3633
		// This is okay, under the assumption that width:100% is applied to the                                              // 3634
		// table in CSS (it is in the default stylesheet) which will set the table                                           // 3635
		// width as appropriate (the attribute and css behave differently...)                                                // 3636
		if ( scroll.sX && table.attr('width') === '100%' ) {                                                                 // 3637
			table.removeAttr('width');                                                                                          // 3638
		}                                                                                                                    // 3639
	                                                                                                                      // 3640
		if ( ! footer.length ) {                                                                                             // 3641
			footer = null;                                                                                                      // 3642
		}                                                                                                                    // 3643
	                                                                                                                      // 3644
		/*                                                                                                                   // 3645
		 * The HTML structure that we want to generate in this function is:                                                  // 3646
		 *  div - scroller                                                                                                   // 3647
		 *    div - scroll head                                                                                              // 3648
		 *      div - scroll head inner                                                                                      // 3649
		 *        table - scroll head table                                                                                  // 3650
		 *          thead - thead                                                                                            // 3651
		 *    div - scroll body                                                                                              // 3652
		 *      table - table (master table)                                                                                 // 3653
		 *        thead - thead clone for sizing                                                                             // 3654
		 *        tbody - tbody                                                                                              // 3655
		 *    div - scroll foot                                                                                              // 3656
		 *      div - scroll foot inner                                                                                      // 3657
		 *        table - scroll foot table                                                                                  // 3658
		 *          tfoot - tfoot                                                                                            // 3659
		 */                                                                                                                  // 3660
		var scroller = $( _div, { 'class': classes.sScrollWrapper } )                                                        // 3661
			.append(                                                                                                            // 3662
				$(_div, { 'class': classes.sScrollHead } )                                                                         // 3663
					.css( {                                                                                                           // 3664
						overflow: 'hidden',                                                                                              // 3665
						position: 'relative',                                                                                            // 3666
						border: 0,                                                                                                       // 3667
						width: scrollX ? size(scrollX) : '100%'                                                                          // 3668
					} )                                                                                                               // 3669
					.append(                                                                                                          // 3670
						$(_div, { 'class': classes.sScrollHeadInner } )                                                                  // 3671
							.css( {                                                                                                         // 3672
								'box-sizing': 'content-box',                                                                                   // 3673
								width: scroll.sXInner || '100%'                                                                                // 3674
							} )                                                                                                             // 3675
							.append(                                                                                                        // 3676
								headerClone                                                                                                    // 3677
									.removeAttr('id')                                                                                             // 3678
									.css( 'margin-left', 0 )                                                                                      // 3679
									.append( captionSide === 'top' ? caption : null )                                                             // 3680
									.append(                                                                                                      // 3681
										table.children('thead')                                                                                      // 3682
									)                                                                                                             // 3683
							)                                                                                                               // 3684
					)                                                                                                                 // 3685
			)                                                                                                                   // 3686
			.append(                                                                                                            // 3687
				$(_div, { 'class': classes.sScrollBody } )                                                                         // 3688
					.css( {                                                                                                           // 3689
						overflow: 'auto',                                                                                                // 3690
						height: size( scrollY ),                                                                                         // 3691
						width: size( scrollX )                                                                                           // 3692
					} )                                                                                                               // 3693
					.append( table )                                                                                                  // 3694
			);                                                                                                                  // 3695
	                                                                                                                      // 3696
		if ( footer ) {                                                                                                      // 3697
			scroller.append(                                                                                                    // 3698
				$(_div, { 'class': classes.sScrollFoot } )                                                                         // 3699
					.css( {                                                                                                           // 3700
						overflow: 'hidden',                                                                                              // 3701
						border: 0,                                                                                                       // 3702
						width: scrollX ? size(scrollX) : '100%'                                                                          // 3703
					} )                                                                                                               // 3704
					.append(                                                                                                          // 3705
						$(_div, { 'class': classes.sScrollFootInner } )                                                                  // 3706
							.append(                                                                                                        // 3707
								footerClone                                                                                                    // 3708
									.removeAttr('id')                                                                                             // 3709
									.css( 'margin-left', 0 )                                                                                      // 3710
									.append( captionSide === 'bottom' ? caption : null )                                                          // 3711
									.append(                                                                                                      // 3712
										table.children('tfoot')                                                                                      // 3713
									)                                                                                                             // 3714
							)                                                                                                               // 3715
					)                                                                                                                 // 3716
			);                                                                                                                  // 3717
		}                                                                                                                    // 3718
	                                                                                                                      // 3719
		var children = scroller.children();                                                                                  // 3720
		var scrollHead = children[0];                                                                                        // 3721
		var scrollBody = children[1];                                                                                        // 3722
		var scrollFoot = footer ? children[2] : null;                                                                        // 3723
	                                                                                                                      // 3724
		// When the body is scrolled, then we also want to scroll the headers                                                // 3725
		if ( scrollX ) {                                                                                                     // 3726
			$(scrollBody).on( 'scroll.DT', function (e) {                                                                       // 3727
				var scrollLeft = this.scrollLeft;                                                                                  // 3728
	                                                                                                                      // 3729
				scrollHead.scrollLeft = scrollLeft;                                                                                // 3730
	                                                                                                                      // 3731
				if ( footer ) {                                                                                                    // 3732
					scrollFoot.scrollLeft = scrollLeft;                                                                               // 3733
				}                                                                                                                  // 3734
			} );                                                                                                                // 3735
		}                                                                                                                    // 3736
	                                                                                                                      // 3737
		settings.nScrollHead = scrollHead;                                                                                   // 3738
		settings.nScrollBody = scrollBody;                                                                                   // 3739
		settings.nScrollFoot = scrollFoot;                                                                                   // 3740
	                                                                                                                      // 3741
		// On redraw - align columns                                                                                         // 3742
		settings.aoDrawCallback.push( {                                                                                      // 3743
			"fn": _fnScrollDraw,                                                                                                // 3744
			"sName": "scrolling"                                                                                                // 3745
		} );                                                                                                                 // 3746
	                                                                                                                      // 3747
		return scroller[0];                                                                                                  // 3748
	}                                                                                                                     // 3749
	                                                                                                                      // 3750
	                                                                                                                      // 3751
	                                                                                                                      // 3752
	/**                                                                                                                   // 3753
	 * Update the header, footer and body tables for resizing - i.e. column                                               // 3754
	 * alignment.                                                                                                         // 3755
	 *                                                                                                                    // 3756
	 * Welcome to the most horrible function DataTables. The process that this                                            // 3757
	 * function follows is basically:                                                                                     // 3758
	 *   1. Re-create the table inside the scrolling div                                                                  // 3759
	 *   2. Take live measurements from the DOM                                                                           // 3760
	 *   3. Apply the measurements to align the columns                                                                   // 3761
	 *   4. Clean up                                                                                                      // 3762
	 *                                                                                                                    // 3763
	 *  @param {object} settings dataTables settings object                                                               // 3764
	 *  @memberof DataTable#oApi                                                                                          // 3765
	 */                                                                                                                   // 3766
	function _fnScrollDraw ( settings )                                                                                   // 3767
	{                                                                                                                     // 3768
		// Given that this is such a monster function, a lot of variables are use                                            // 3769
		// to try and keep the minimised size as small as possible                                                           // 3770
		var                                                                                                                  // 3771
			scroll         = settings.oScroll,                                                                                  // 3772
			scrollX        = scroll.sX,                                                                                         // 3773
			scrollXInner   = scroll.sXInner,                                                                                    // 3774
			scrollY        = scroll.sY,                                                                                         // 3775
			barWidth       = scroll.iBarWidth,                                                                                  // 3776
			divHeader      = $(settings.nScrollHead),                                                                           // 3777
			divHeaderStyle = divHeader[0].style,                                                                                // 3778
			divHeaderInner = divHeader.children('div'),                                                                         // 3779
			divHeaderInnerStyle = divHeaderInner[0].style,                                                                      // 3780
			divHeaderTable = divHeaderInner.children('table'),                                                                  // 3781
			divBodyEl      = settings.nScrollBody,                                                                              // 3782
			divBody        = $(divBodyEl),                                                                                      // 3783
			divBodyStyle   = divBodyEl.style,                                                                                   // 3784
			divFooter      = $(settings.nScrollFoot),                                                                           // 3785
			divFooterInner = divFooter.children('div'),                                                                         // 3786
			divFooterTable = divFooterInner.children('table'),                                                                  // 3787
			header         = $(settings.nTHead),                                                                                // 3788
			table          = $(settings.nTable),                                                                                // 3789
			tableEl        = table[0],                                                                                          // 3790
			tableStyle     = tableEl.style,                                                                                     // 3791
			footer         = settings.nTFoot ? $(settings.nTFoot) : null,                                                       // 3792
			browser        = settings.oBrowser,                                                                                 // 3793
			ie67           = browser.bScrollOversize,                                                                           // 3794
			headerTrgEls, footerTrgEls,                                                                                         // 3795
			headerSrcEls, footerSrcEls,                                                                                         // 3796
			headerCopy, footerCopy,                                                                                             // 3797
			headerWidths=[], footerWidths=[],                                                                                   // 3798
			headerContent=[],                                                                                                   // 3799
			idx, correction, sanityWidth,                                                                                       // 3800
			zeroOut = function(nSizer) {                                                                                        // 3801
				var style = nSizer.style;                                                                                          // 3802
				style.paddingTop = "0";                                                                                            // 3803
				style.paddingBottom = "0";                                                                                         // 3804
				style.borderTopWidth = "0";                                                                                        // 3805
				style.borderBottomWidth = "0";                                                                                     // 3806
				style.height = 0;                                                                                                  // 3807
			};                                                                                                                  // 3808
	                                                                                                                      // 3809
		/*                                                                                                                   // 3810
		 * 1. Re-create the table inside the scrolling div                                                                   // 3811
		 */                                                                                                                  // 3812
	                                                                                                                      // 3813
		// Remove the old minimised thead and tfoot elements in the inner table                                              // 3814
		table.children('thead, tfoot').remove();                                                                             // 3815
	                                                                                                                      // 3816
		// Clone the current header and footer elements and then place it into the inner table                               // 3817
		headerCopy = header.clone().prependTo( table );                                                                      // 3818
		headerTrgEls = header.find('tr'); // original header is in its own table                                             // 3819
		headerSrcEls = headerCopy.find('tr');                                                                                // 3820
		headerCopy.find('th, td').removeAttr('tabindex');                                                                    // 3821
	                                                                                                                      // 3822
		if ( footer ) {                                                                                                      // 3823
			footerCopy = footer.clone().prependTo( table );                                                                     // 3824
			footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized                       // 3825
			footerSrcEls = footerCopy.find('tr');                                                                               // 3826
		}                                                                                                                    // 3827
	                                                                                                                      // 3828
	                                                                                                                      // 3829
		/*                                                                                                                   // 3830
		 * 2. Take live measurements from the DOM - do not alter the DOM itself!                                             // 3831
		 */                                                                                                                  // 3832
	                                                                                                                      // 3833
		// Remove old sizing and apply the calculated column widths                                                          // 3834
		// Get the unique column headers in the newly created (cloned) header. We want to apply the                          // 3835
		// calculated sizes to this header                                                                                   // 3836
		if ( ! scrollX )                                                                                                     // 3837
		{                                                                                                                    // 3838
			divBodyStyle.width = '100%';                                                                                        // 3839
			divHeader[0].style.width = '100%';                                                                                  // 3840
		}                                                                                                                    // 3841
	                                                                                                                      // 3842
		$.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {                                                // 3843
			idx = _fnVisibleToColumnIndex( settings, i );                                                                       // 3844
			el.style.width = settings.aoColumns[idx].sWidth;                                                                    // 3845
		} );                                                                                                                 // 3846
	                                                                                                                      // 3847
		if ( footer ) {                                                                                                      // 3848
			_fnApplyToChildren( function(n) {                                                                                   // 3849
				n.style.width = "";                                                                                                // 3850
			}, footerSrcEls );                                                                                                  // 3851
		}                                                                                                                    // 3852
	                                                                                                                      // 3853
		// If scroll collapse is enabled, when we put the headers back into the body for sizing, we                          // 3854
		// will end up forcing the scrollbar to appear, making our measurements wrong for when we                            // 3855
		// then hide it (end of this function), so add the header height to the body scroller.                               // 3856
		if ( scroll.bCollapse && scrollY !== "" ) {                                                                          // 3857
			divBodyStyle.height = (divBody[0].offsetHeight + header[0].offsetHeight)+"px";                                      // 3858
		}                                                                                                                    // 3859
	                                                                                                                      // 3860
		// Size the table as a whole                                                                                         // 3861
		sanityWidth = table.outerWidth();                                                                                    // 3862
		if ( scrollX === "" ) {                                                                                              // 3863
			// No x scrolling                                                                                                   // 3864
			tableStyle.width = "100%";                                                                                          // 3865
	                                                                                                                      // 3866
			// IE7 will make the width of the table when 100% include the scrollbar                                             // 3867
			// - which is shouldn't. When there is a scrollbar we need to take this                                             // 3868
			// into account.                                                                                                    // 3869
			if ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||                                              // 3870
				divBody.css('overflow-y') == "scroll")                                                                             // 3871
			) {                                                                                                                 // 3872
				tableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);                                                 // 3873
			}                                                                                                                   // 3874
		}                                                                                                                    // 3875
		else                                                                                                                 // 3876
		{                                                                                                                    // 3877
			// x scrolling                                                                                                      // 3878
			if ( scrollXInner !== "" ) {                                                                                        // 3879
				// x scroll inner has been given - use it                                                                          // 3880
				tableStyle.width = _fnStringToCss(scrollXInner);                                                                   // 3881
			}                                                                                                                   // 3882
			else if ( sanityWidth == divBody.width() && divBody.height() < table.height() ) {                                   // 3883
				// There is y-scrolling - try to take account of the y scroll bar                                                  // 3884
				tableStyle.width = _fnStringToCss( sanityWidth-barWidth );                                                         // 3885
				if ( table.outerWidth() > sanityWidth-barWidth ) {                                                                 // 3886
					// Not possible to take account of it                                                                             // 3887
					tableStyle.width = _fnStringToCss( sanityWidth );                                                                 // 3888
				}                                                                                                                  // 3889
			}                                                                                                                   // 3890
			else {                                                                                                              // 3891
				// When all else fails                                                                                             // 3892
				tableStyle.width = _fnStringToCss( sanityWidth );                                                                  // 3893
			}                                                                                                                   // 3894
		}                                                                                                                    // 3895
	                                                                                                                      // 3896
		// Recalculate the sanity width - now that we've applied the required width,                                         // 3897
		// before it was a temporary variable. This is required because the column                                           // 3898
		// width calculation is done before this table DOM is created.                                                       // 3899
		sanityWidth = table.outerWidth();                                                                                    // 3900
	                                                                                                                      // 3901
		// Hidden header should have zero height, so remove padding and borders. Then                                        // 3902
		// set the width based on the real headers                                                                           // 3903
	                                                                                                                      // 3904
		// Apply all styles in one pass                                                                                      // 3905
		_fnApplyToChildren( zeroOut, headerSrcEls );                                                                         // 3906
	                                                                                                                      // 3907
		// Read all widths in next pass                                                                                      // 3908
		_fnApplyToChildren( function(nSizer) {                                                                               // 3909
			headerContent.push( nSizer.innerHTML );                                                                             // 3910
			headerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );                                                      // 3911
		}, headerSrcEls );                                                                                                   // 3912
	                                                                                                                      // 3913
		// Apply all widths in final pass                                                                                    // 3914
		_fnApplyToChildren( function(nToSize, i) {                                                                           // 3915
			nToSize.style.width = headerWidths[i];                                                                              // 3916
		}, headerTrgEls );                                                                                                   // 3917
	                                                                                                                      // 3918
		$(headerSrcEls).height(0);                                                                                           // 3919
	                                                                                                                      // 3920
		/* Same again with the footer if we have one */                                                                      // 3921
		if ( footer )                                                                                                        // 3922
		{                                                                                                                    // 3923
			_fnApplyToChildren( zeroOut, footerSrcEls );                                                                        // 3924
	                                                                                                                      // 3925
			_fnApplyToChildren( function(nSizer) {                                                                              // 3926
				footerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );                                                     // 3927
			}, footerSrcEls );                                                                                                  // 3928
	                                                                                                                      // 3929
			_fnApplyToChildren( function(nToSize, i) {                                                                          // 3930
				nToSize.style.width = footerWidths[i];                                                                             // 3931
			}, footerTrgEls );                                                                                                  // 3932
	                                                                                                                      // 3933
			$(footerSrcEls).height(0);                                                                                          // 3934
		}                                                                                                                    // 3935
	                                                                                                                      // 3936
	                                                                                                                      // 3937
		/*                                                                                                                   // 3938
		 * 3. Apply the measurements                                                                                         // 3939
		 */                                                                                                                  // 3940
	                                                                                                                      // 3941
		// "Hide" the header and footer that we used for the sizing. We need to keep                                         // 3942
		// the content of the cell so that the width applied to the header and body                                          // 3943
		// both match, but we want to hide it completely. We want to also fix their                                          // 3944
		// width to what they currently are                                                                                  // 3945
		_fnApplyToChildren( function(nSizer, i) {                                                                            // 3946
			nSizer.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">'+headerContent[i]+'</div>';   // 3947
			nSizer.style.width = headerWidths[i];                                                                               // 3948
		}, headerSrcEls );                                                                                                   // 3949
	                                                                                                                      // 3950
		if ( footer )                                                                                                        // 3951
		{                                                                                                                    // 3952
			_fnApplyToChildren( function(nSizer, i) {                                                                           // 3953
				nSizer.innerHTML = "";                                                                                             // 3954
				nSizer.style.width = footerWidths[i];                                                                              // 3955
			}, footerSrcEls );                                                                                                  // 3956
		}                                                                                                                    // 3957
	                                                                                                                      // 3958
		// Sanity check that the table is of a sensible width. If not then we are going to get                               // 3959
		// misalignment - try to prevent this by not allowing the table to shrink below its min width                        // 3960
		if ( table.outerWidth() < sanityWidth )                                                                              // 3961
		{                                                                                                                    // 3962
			// The min width depends upon if we have a vertical scrollbar visible or not */                                     // 3963
			correction = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||                                                   // 3964
				divBody.css('overflow-y') == "scroll")) ?                                                                          // 3965
					sanityWidth+barWidth :                                                                                            // 3966
					sanityWidth;                                                                                                      // 3967
	                                                                                                                      // 3968
			// IE6/7 are a law unto themselves...                                                                               // 3969
			if ( ie67 && (divBodyEl.scrollHeight >                                                                              // 3970
				divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll")                                                   // 3971
			) {                                                                                                                 // 3972
				tableStyle.width = _fnStringToCss( correction-barWidth );                                                          // 3973
			}                                                                                                                   // 3974
	                                                                                                                      // 3975
			// And give the user a warning that we've stopped the table getting too small                                       // 3976
			if ( scrollX === "" || scrollXInner !== "" ) {                                                                      // 3977
				_fnLog( settings, 1, 'Possible column misalignment', 6 );                                                          // 3978
			}                                                                                                                   // 3979
		}                                                                                                                    // 3980
		else                                                                                                                 // 3981
		{                                                                                                                    // 3982
			correction = '100%';                                                                                                // 3983
		}                                                                                                                    // 3984
	                                                                                                                      // 3985
		// Apply to the container elements                                                                                   // 3986
		divBodyStyle.width = _fnStringToCss( correction );                                                                   // 3987
		divHeaderStyle.width = _fnStringToCss( correction );                                                                 // 3988
	                                                                                                                      // 3989
		if ( footer ) {                                                                                                      // 3990
			settings.nScrollFoot.style.width = _fnStringToCss( correction );                                                    // 3991
		}                                                                                                                    // 3992
	                                                                                                                      // 3993
	                                                                                                                      // 3994
		/*                                                                                                                   // 3995
		 * 4. Clean up                                                                                                       // 3996
		 */                                                                                                                  // 3997
		if ( ! scrollY ) {                                                                                                   // 3998
			/* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting                                // 3999
			 * the scrollbar height from the visible display, rather than adding it on. We need to                              // 4000
			 * set the height in order to sort this. Don't want to do it in any other browsers.                                 // 4001
			 */                                                                                                                 // 4002
			if ( ie67 ) {                                                                                                       // 4003
				divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );                                             // 4004
			}                                                                                                                   // 4005
		}                                                                                                                    // 4006
	                                                                                                                      // 4007
		if ( scrollY && scroll.bCollapse ) {                                                                                 // 4008
			divBodyStyle.height = _fnStringToCss( scrollY );                                                                    // 4009
	                                                                                                                      // 4010
			var iExtra = (scrollX && tableEl.offsetWidth > divBodyEl.offsetWidth) ?                                             // 4011
				barWidth :                                                                                                         // 4012
				0;                                                                                                                 // 4013
	                                                                                                                      // 4014
			if ( tableEl.offsetHeight < divBodyEl.offsetHeight ) {                                                              // 4015
				divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+iExtra );                                               // 4016
			}                                                                                                                   // 4017
		}                                                                                                                    // 4018
	                                                                                                                      // 4019
		/* Finally set the width's of the header and footer tables */                                                        // 4020
		var iOuterWidth = table.outerWidth();                                                                                // 4021
		divHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );                                                       // 4022
		divHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );                                                           // 4023
	                                                                                                                      // 4024
		// Figure out if there are scrollbar present - if so then we need a the header and footer to                         // 4025
		// provide a bit more space to allow "overflow" scrolling (i.e. past the scrollbar)                                  // 4026
		var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == "scroll";                   // 4027
		var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );                                              // 4028
		divHeaderInnerStyle[ padding ] = bScrolling ? barWidth+"px" : "0px";                                                 // 4029
	                                                                                                                      // 4030
		if ( footer ) {                                                                                                      // 4031
			divFooterTable[0].style.width = _fnStringToCss( iOuterWidth );                                                      // 4032
			divFooterInner[0].style.width = _fnStringToCss( iOuterWidth );                                                      // 4033
			divFooterInner[0].style[padding] = bScrolling ? barWidth+"px" : "0px";                                              // 4034
		}                                                                                                                    // 4035
	                                                                                                                      // 4036
		/* Adjust the position of the header in case we loose the y-scrollbar */                                             // 4037
		divBody.scroll();                                                                                                    // 4038
	                                                                                                                      // 4039
		// If sorting or filtering has occurred, jump the scrolling back to the top                                          // 4040
		// only if we aren't holding the position                                                                            // 4041
		if ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {                                            // 4042
			divBodyEl.scrollTop = 0;                                                                                            // 4043
		}                                                                                                                    // 4044
	}                                                                                                                     // 4045
	                                                                                                                      // 4046
	                                                                                                                      // 4047
	                                                                                                                      // 4048
	/**                                                                                                                   // 4049
	 * Apply a given function to the display child nodes of an element array (typically                                   // 4050
	 * TD children of TR rows                                                                                             // 4051
	 *  @param {function} fn Method to apply to the objects                                                               // 4052
	 *  @param array {nodes} an1 List of elements to look through for display children                                    // 4053
	 *  @param array {nodes} an2 Another list (identical structure to the first) - optional                               // 4054
	 *  @memberof DataTable#oApi                                                                                          // 4055
	 */                                                                                                                   // 4056
	function _fnApplyToChildren( fn, an1, an2 )                                                                           // 4057
	{                                                                                                                     // 4058
		var index=0, i=0, iLen=an1.length;                                                                                   // 4059
		var nNode1, nNode2;                                                                                                  // 4060
	                                                                                                                      // 4061
		while ( i < iLen ) {                                                                                                 // 4062
			nNode1 = an1[i].firstChild;                                                                                         // 4063
			nNode2 = an2 ? an2[i].firstChild : null;                                                                            // 4064
	                                                                                                                      // 4065
			while ( nNode1 ) {                                                                                                  // 4066
				if ( nNode1.nodeType === 1 ) {                                                                                     // 4067
					if ( an2 ) {                                                                                                      // 4068
						fn( nNode1, nNode2, index );                                                                                     // 4069
					}                                                                                                                 // 4070
					else {                                                                                                            // 4071
						fn( nNode1, index );                                                                                             // 4072
					}                                                                                                                 // 4073
	                                                                                                                      // 4074
					index++;                                                                                                          // 4075
				}                                                                                                                  // 4076
	                                                                                                                      // 4077
				nNode1 = nNode1.nextSibling;                                                                                       // 4078
				nNode2 = an2 ? nNode2.nextSibling : null;                                                                          // 4079
			}                                                                                                                   // 4080
	                                                                                                                      // 4081
			i++;                                                                                                                // 4082
		}                                                                                                                    // 4083
	}                                                                                                                     // 4084
	                                                                                                                      // 4085
	                                                                                                                      // 4086
	                                                                                                                      // 4087
	var __re_html_remove = /<.*?>/g;                                                                                      // 4088
	                                                                                                                      // 4089
	                                                                                                                      // 4090
	/**                                                                                                                   // 4091
	 * Calculate the width of columns for the table                                                                       // 4092
	 *  @param {object} oSettings dataTables settings object                                                              // 4093
	 *  @memberof DataTable#oApi                                                                                          // 4094
	 */                                                                                                                   // 4095
	function _fnCalculateColumnWidths ( oSettings )                                                                       // 4096
	{                                                                                                                     // 4097
		var                                                                                                                  // 4098
			table = oSettings.nTable,                                                                                           // 4099
			columns = oSettings.aoColumns,                                                                                      // 4100
			scroll = oSettings.oScroll,                                                                                         // 4101
			scrollY = scroll.sY,                                                                                                // 4102
			scrollX = scroll.sX,                                                                                                // 4103
			scrollXInner = scroll.sXInner,                                                                                      // 4104
			columnCount = columns.length,                                                                                       // 4105
			visibleColumns = _fnGetColumns( oSettings, 'bVisible' ),                                                            // 4106
			headerCells = $('th', oSettings.nTHead),                                                                            // 4107
			tableWidthAttr = table.getAttribute('width'), // from DOM element                                                   // 4108
			tableContainer = table.parentNode,                                                                                  // 4109
			userInputs = false,                                                                                                 // 4110
			i, column, columnIdx, width, outerWidth;                                                                            // 4111
	                                                                                                                      // 4112
		var styleWidth = table.style.width;                                                                                  // 4113
		if ( styleWidth && styleWidth.indexOf('%') !== -1 ) {                                                                // 4114
			tableWidthAttr = styleWidth;                                                                                        // 4115
		}                                                                                                                    // 4116
	                                                                                                                      // 4117
		/* Convert any user input sizes into pixel sizes */                                                                  // 4118
		for ( i=0 ; i<visibleColumns.length ; i++ ) {                                                                        // 4119
			column = columns[ visibleColumns[i] ];                                                                              // 4120
	                                                                                                                      // 4121
			if ( column.sWidth !== null ) {                                                                                     // 4122
				column.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );                                            // 4123
	                                                                                                                      // 4124
				userInputs = true;                                                                                                 // 4125
			}                                                                                                                   // 4126
		}                                                                                                                    // 4127
	                                                                                                                      // 4128
		/* If the number of columns in the DOM equals the number that we have to                                             // 4129
		 * process in DataTables, then we can use the offsets that are created by                                            // 4130
		 * the web- browser. No custom sizes can be set in order for this to happen,                                         // 4131
		 * nor scrolling used                                                                                                // 4132
		 */                                                                                                                  // 4133
		if ( ! userInputs && ! scrollX && ! scrollY &&                                                                       // 4134
		    columnCount == _fnVisbleColumns( oSettings ) &&                                                                  // 4135
			columnCount == headerCells.length                                                                                   // 4136
		) {                                                                                                                  // 4137
			for ( i=0 ; i<columnCount ; i++ ) {                                                                                 // 4138
				columns[i].sWidth = _fnStringToCss( headerCells.eq(i).width() );                                                   // 4139
			}                                                                                                                   // 4140
		}                                                                                                                    // 4141
		else                                                                                                                 // 4142
		{                                                                                                                    // 4143
			// Otherwise construct a single row, worst case, table with the widest                                              // 4144
			// node in the data, assign any user defined widths, then insert it into                                            // 4145
			// the DOM and allow the browser to do all the hard work of calculating                                             // 4146
			// table widths                                                                                                     // 4147
			var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table                   // 4148
				.css( 'visibility', 'hidden' )                                                                                     // 4149
				.removeAttr( 'id' );                                                                                               // 4150
	                                                                                                                      // 4151
			// Clean up the table body                                                                                          // 4152
			tmpTable.find('tbody tr').remove();                                                                                 // 4153
			var tr = $('<tr/>').appendTo( tmpTable.find('tbody') );                                                             // 4154
	                                                                                                                      // 4155
			// Remove any assigned widths from the footer (from scrolling)                                                      // 4156
			tmpTable.find('tfoot th, tfoot td').css('width', '');                                                               // 4157
	                                                                                                                      // 4158
			// Apply custom sizing to the cloned header                                                                         // 4159
			headerCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );                                              // 4160
	                                                                                                                      // 4161
			for ( i=0 ; i<visibleColumns.length ; i++ ) {                                                                       // 4162
				column = columns[ visibleColumns[i] ];                                                                             // 4163
	                                                                                                                      // 4164
				headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?                              // 4165
					_fnStringToCss( column.sWidthOrig ) :                                                                             // 4166
					'';                                                                                                               // 4167
			}                                                                                                                   // 4168
	                                                                                                                      // 4169
			// Find the widest cell for each column and put it into the table                                                   // 4170
			if ( oSettings.aoData.length ) {                                                                                    // 4171
				for ( i=0 ; i<visibleColumns.length ; i++ ) {                                                                      // 4172
					columnIdx = visibleColumns[i];                                                                                    // 4173
					column = columns[ columnIdx ];                                                                                    // 4174
	                                                                                                                      // 4175
					$( _fnGetWidestNode( oSettings, columnIdx ) )                                                                     // 4176
						.clone( false )                                                                                                  // 4177
						.append( column.sContentPadding )                                                                                // 4178
						.appendTo( tr );                                                                                                 // 4179
				}                                                                                                                  // 4180
			}                                                                                                                   // 4181
	                                                                                                                      // 4182
			// Table has been built, attach to the document so we can work with it                                              // 4183
			tmpTable.appendTo( tableContainer );                                                                                // 4184
	                                                                                                                      // 4185
			// When scrolling (X or Y) we want to set the width of the table as                                                 // 4186
			// appropriate. However, when not scrolling leave the table width as it                                             // 4187
			// is. This results in slightly different, but I think correct behaviour                                            // 4188
			if ( scrollX && scrollXInner ) {                                                                                    // 4189
				tmpTable.width( scrollXInner );                                                                                    // 4190
			}                                                                                                                   // 4191
			else if ( scrollX ) {                                                                                               // 4192
				tmpTable.css( 'width', 'auto' );                                                                                   // 4193
	                                                                                                                      // 4194
				if ( tmpTable.width() < tableContainer.offsetWidth ) {                                                             // 4195
					tmpTable.width( tableContainer.offsetWidth );                                                                     // 4196
				}                                                                                                                  // 4197
			}                                                                                                                   // 4198
			else if ( scrollY ) {                                                                                               // 4199
				tmpTable.width( tableContainer.offsetWidth );                                                                      // 4200
			}                                                                                                                   // 4201
			else if ( tableWidthAttr ) {                                                                                        // 4202
				tmpTable.width( tableWidthAttr );                                                                                  // 4203
			}                                                                                                                   // 4204
	                                                                                                                      // 4205
			// Take into account the y scrollbar                                                                                // 4206
			_fnScrollingWidthAdjust( oSettings, tmpTable[0] );                                                                  // 4207
	                                                                                                                      // 4208
			// Browsers need a bit of a hand when a width is assigned to any columns                                            // 4209
			// when x-scrolling as they tend to collapse the table to the min-width,                                            // 4210
			// even if we sent the column widths. So we need to keep track of what                                              // 4211
			// the table width should be by summing the user given values, and the                                              // 4212
			// automatic values                                                                                                 // 4213
			if ( scrollX )                                                                                                      // 4214
			{                                                                                                                   // 4215
				var total = 0;                                                                                                     // 4216
	                                                                                                                      // 4217
				for ( i=0 ; i<visibleColumns.length ; i++ ) {                                                                      // 4218
					column = columns[ visibleColumns[i] ];                                                                            // 4219
					outerWidth = $(headerCells[i]).outerWidth();                                                                      // 4220
	                                                                                                                      // 4221
					total += column.sWidthOrig === null ?                                                                             // 4222
						outerWidth :                                                                                                     // 4223
						parseInt( column.sWidth, 10 ) + outerWidth - $(headerCells[i]).width();                                          // 4224
				}                                                                                                                  // 4225
	                                                                                                                      // 4226
				tmpTable.width( _fnStringToCss( total ) );                                                                         // 4227
				table.style.width = _fnStringToCss( total );                                                                       // 4228
			}                                                                                                                   // 4229
	                                                                                                                      // 4230
			// Get the width of each column in the constructed table                                                            // 4231
			for ( i=0 ; i<visibleColumns.length ; i++ ) {                                                                       // 4232
				column = columns[ visibleColumns[i] ];                                                                             // 4233
				width = $(headerCells[i]).width();                                                                                 // 4234
	                                                                                                                      // 4235
				if ( width ) {                                                                                                     // 4236
					column.sWidth = _fnStringToCss( width );                                                                          // 4237
				}                                                                                                                  // 4238
			}                                                                                                                   // 4239
	                                                                                                                      // 4240
			table.style.width = _fnStringToCss( tmpTable.css('width') );                                                        // 4241
	                                                                                                                      // 4242
			// Finished with the table - ditch it                                                                               // 4243
			tmpTable.remove();                                                                                                  // 4244
		}                                                                                                                    // 4245
	                                                                                                                      // 4246
		// If there is a width attr, we want to attach an event listener which                                               // 4247
		// allows the table sizing to automatically adjust when the window is                                                // 4248
		// resized. Use the width attr rather than CSS, since we can't know if the                                           // 4249
		// CSS is a relative value or absolute - DOM read is always px.                                                      // 4250
		if ( tableWidthAttr ) {                                                                                              // 4251
			table.style.width = _fnStringToCss( tableWidthAttr );                                                               // 4252
		}                                                                                                                    // 4253
	                                                                                                                      // 4254
		if ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {                                                         // 4255
			var bindResize = function () {                                                                                      // 4256
				$(window).bind('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {                                        // 4257
					_fnAdjustColumnSizing( oSettings );                                                                               // 4258
				} ) );                                                                                                             // 4259
			};                                                                                                                  // 4260
	                                                                                                                      // 4261
			// IE6/7 will crash if we bind a resize event handler on page load.                                                 // 4262
			// To be removed in 1.11 which drops IE6/7 support                                                                  // 4263
			if ( oSettings.oBrowser.bScrollOversize ) {                                                                         // 4264
				setTimeout( bindResize, 1000 );                                                                                    // 4265
			}                                                                                                                   // 4266
			else {                                                                                                              // 4267
				bindResize();                                                                                                      // 4268
			}                                                                                                                   // 4269
	                                                                                                                      // 4270
			oSettings._reszEvt = true;                                                                                          // 4271
		}                                                                                                                    // 4272
	}                                                                                                                     // 4273
	                                                                                                                      // 4274
	                                                                                                                      // 4275
	/**                                                                                                                   // 4276
	 * Throttle the calls to a function. Arguments and context are maintained for                                         // 4277
	 * the throttled function                                                                                             // 4278
	 *  @param {function} fn Function to be called                                                                        // 4279
	 *  @param {int} [freq=200] call frequency in mS                                                                      // 4280
	 *  @returns {function} wrapped function                                                                              // 4281
	 *  @memberof DataTable#oApi                                                                                          // 4282
	 */                                                                                                                   // 4283
	function _fnThrottle( fn, freq ) {                                                                                    // 4284
		var                                                                                                                  // 4285
			frequency = freq !== undefined ? freq : 200,                                                                        // 4286
			last,                                                                                                               // 4287
			timer;                                                                                                              // 4288
	                                                                                                                      // 4289
		return function () {                                                                                                 // 4290
			var                                                                                                                 // 4291
				that = this,                                                                                                       // 4292
				now  = +new Date(),                                                                                                // 4293
				args = arguments;                                                                                                  // 4294
	                                                                                                                      // 4295
			if ( last && now < last + frequency ) {                                                                             // 4296
				clearTimeout( timer );                                                                                             // 4297
	                                                                                                                      // 4298
				timer = setTimeout( function () {                                                                                  // 4299
					last = undefined;                                                                                                 // 4300
					fn.apply( that, args );                                                                                           // 4301
				}, frequency );                                                                                                    // 4302
			}                                                                                                                   // 4303
			else {                                                                                                              // 4304
				last = now;                                                                                                        // 4305
				fn.apply( that, args );                                                                                            // 4306
			}                                                                                                                   // 4307
		};                                                                                                                   // 4308
	}                                                                                                                     // 4309
	                                                                                                                      // 4310
	                                                                                                                      // 4311
	/**                                                                                                                   // 4312
	 * Convert a CSS unit width to pixels (e.g. 2em)                                                                      // 4313
	 *  @param {string} width width to be converted                                                                       // 4314
	 *  @param {node} parent parent to get the with for (required for relative widths) - optional                         // 4315
	 *  @returns {int} width in pixels                                                                                    // 4316
	 *  @memberof DataTable#oApi                                                                                          // 4317
	 */                                                                                                                   // 4318
	function _fnConvertToWidth ( width, parent )                                                                          // 4319
	{                                                                                                                     // 4320
		if ( ! width ) {                                                                                                     // 4321
			return 0;                                                                                                           // 4322
		}                                                                                                                    // 4323
	                                                                                                                      // 4324
		var n = $('<div/>')                                                                                                  // 4325
			.css( 'width', _fnStringToCss( width ) )                                                                            // 4326
			.appendTo( parent || document.body );                                                                               // 4327
	                                                                                                                      // 4328
		var val = n[0].offsetWidth;                                                                                          // 4329
		n.remove();                                                                                                          // 4330
	                                                                                                                      // 4331
		return val;                                                                                                          // 4332
	}                                                                                                                     // 4333
	                                                                                                                      // 4334
	                                                                                                                      // 4335
	/**                                                                                                                   // 4336
	 * Adjust a table's width to take account of vertical scroll bar                                                      // 4337
	 *  @param {object} oSettings dataTables settings object                                                              // 4338
	 *  @param {node} n table node                                                                                        // 4339
	 *  @memberof DataTable#oApi                                                                                          // 4340
	 */                                                                                                                   // 4341
	                                                                                                                      // 4342
	function _fnScrollingWidthAdjust ( settings, n )                                                                      // 4343
	{                                                                                                                     // 4344
		var scroll = settings.oScroll;                                                                                       // 4345
	                                                                                                                      // 4346
		if ( scroll.sX || scroll.sY ) {                                                                                      // 4347
			// When y-scrolling only, we want to remove the width of the scroll bar                                             // 4348
			// so the table + scroll bar will fit into the area available, otherwise                                            // 4349
			// we fix the table at its current size with no adjustment                                                          // 4350
			var correction = ! scroll.sX ? scroll.iBarWidth : 0;                                                                // 4351
			n.style.width = _fnStringToCss( $(n).outerWidth() - correction );                                                   // 4352
		}                                                                                                                    // 4353
	}                                                                                                                     // 4354
	                                                                                                                      // 4355
	                                                                                                                      // 4356
	/**                                                                                                                   // 4357
	 * Get the widest node                                                                                                // 4358
	 *  @param {object} settings dataTables settings object                                                               // 4359
	 *  @param {int} colIdx column of interest                                                                            // 4360
	 *  @returns {node} widest table node                                                                                 // 4361
	 *  @memberof DataTable#oApi                                                                                          // 4362
	 */                                                                                                                   // 4363
	function _fnGetWidestNode( settings, colIdx )                                                                         // 4364
	{                                                                                                                     // 4365
		var idx = _fnGetMaxLenString( settings, colIdx );                                                                    // 4366
		if ( idx < 0 ) {                                                                                                     // 4367
			return null;                                                                                                        // 4368
		}                                                                                                                    // 4369
	                                                                                                                      // 4370
		var data = settings.aoData[ idx ];                                                                                   // 4371
		return ! data.nTr ? // Might not have been created when deferred rendering                                           // 4372
			$('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :                                          // 4373
			data.anCells[ colIdx ];                                                                                             // 4374
	}                                                                                                                     // 4375
	                                                                                                                      // 4376
	                                                                                                                      // 4377
	/**                                                                                                                   // 4378
	 * Get the maximum strlen for each data column                                                                        // 4379
	 *  @param {object} settings dataTables settings object                                                               // 4380
	 *  @param {int} colIdx column of interest                                                                            // 4381
	 *  @returns {string} max string length for each column                                                               // 4382
	 *  @memberof DataTable#oApi                                                                                          // 4383
	 */                                                                                                                   // 4384
	function _fnGetMaxLenString( settings, colIdx )                                                                       // 4385
	{                                                                                                                     // 4386
		var s, max=-1, maxIdx = -1;                                                                                          // 4387
	                                                                                                                      // 4388
		for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {                                                          // 4389
			s = _fnGetCellData( settings, i, colIdx, 'display' )+'';                                                            // 4390
			s = s.replace( __re_html_remove, '' );                                                                              // 4391
	                                                                                                                      // 4392
			if ( s.length > max ) {                                                                                             // 4393
				max = s.length;                                                                                                    // 4394
				maxIdx = i;                                                                                                        // 4395
			}                                                                                                                   // 4396
		}                                                                                                                    // 4397
	                                                                                                                      // 4398
		return maxIdx;                                                                                                       // 4399
	}                                                                                                                     // 4400
	                                                                                                                      // 4401
	                                                                                                                      // 4402
	/**                                                                                                                   // 4403
	 * Append a CSS unit (only if required) to a string                                                                   // 4404
	 *  @param {string} value to css-ify                                                                                  // 4405
	 *  @returns {string} value with css unit                                                                             // 4406
	 *  @memberof DataTable#oApi                                                                                          // 4407
	 */                                                                                                                   // 4408
	function _fnStringToCss( s )                                                                                          // 4409
	{                                                                                                                     // 4410
		if ( s === null ) {                                                                                                  // 4411
			return '0px';                                                                                                       // 4412
		}                                                                                                                    // 4413
	                                                                                                                      // 4414
		if ( typeof s == 'number' ) {                                                                                        // 4415
			return s < 0 ?                                                                                                      // 4416
				'0px' :                                                                                                            // 4417
				s+'px';                                                                                                            // 4418
		}                                                                                                                    // 4419
	                                                                                                                      // 4420
		// Check it has a unit character already                                                                             // 4421
		return s.match(/\d$/) ?                                                                                              // 4422
			s+'px' :                                                                                                            // 4423
			s;                                                                                                                  // 4424
	}                                                                                                                     // 4425
	                                                                                                                      // 4426
	                                                                                                                      // 4427
	/**                                                                                                                   // 4428
	 * Get the width of a scroll bar in this browser being used                                                           // 4429
	 *  @returns {int} width in pixels                                                                                    // 4430
	 *  @memberof DataTable#oApi                                                                                          // 4431
	 */                                                                                                                   // 4432
	function _fnScrollBarWidth ()                                                                                         // 4433
	{                                                                                                                     // 4434
		// On first run a static variable is set, since this is only needed once.                                            // 4435
		// Subsequent runs will just use the previously calculated value                                                     // 4436
		var width = DataTable.__scrollbarWidth;                                                                              // 4437
	                                                                                                                      // 4438
		if ( width === undefined ) {                                                                                         // 4439
			var sizer = $('<p/>').css( {                                                                                        // 4440
					position: 'absolute',                                                                                             // 4441
					top: 0,                                                                                                           // 4442
					left: 0,                                                                                                          // 4443
					width: '100%',                                                                                                    // 4444
					height: 150,                                                                                                      // 4445
					padding: 0,                                                                                                       // 4446
					overflow: 'scroll',                                                                                               // 4447
					visibility: 'hidden'                                                                                              // 4448
				} )                                                                                                                // 4449
				.appendTo('body');                                                                                                 // 4450
	                                                                                                                      // 4451
			width = sizer[0].offsetWidth - sizer[0].clientWidth;                                                                // 4452
			DataTable.__scrollbarWidth = width;                                                                                 // 4453
	                                                                                                                      // 4454
			sizer.remove();                                                                                                     // 4455
		}                                                                                                                    // 4456
	                                                                                                                      // 4457
		return width;                                                                                                        // 4458
	}                                                                                                                     // 4459
	                                                                                                                      // 4460
	                                                                                                                      // 4461
	                                                                                                                      // 4462
	function _fnSortFlatten ( settings )                                                                                  // 4463
	{                                                                                                                     // 4464
		var                                                                                                                  // 4465
			i, iLen, k, kLen,                                                                                                   // 4466
			aSort = [],                                                                                                         // 4467
			aiOrig = [],                                                                                                        // 4468
			aoColumns = settings.aoColumns,                                                                                     // 4469
			aDataSort, iCol, sType, srcCol,                                                                                     // 4470
			fixed = settings.aaSortingFixed,                                                                                    // 4471
			fixedObj = $.isPlainObject( fixed ),                                                                                // 4472
			nestedSort = [],                                                                                                    // 4473
			add = function ( a ) {                                                                                              // 4474
				if ( a.length && ! $.isArray( a[0] ) ) {                                                                           // 4475
					// 1D array                                                                                                       // 4476
					nestedSort.push( a );                                                                                             // 4477
				}                                                                                                                  // 4478
				else {                                                                                                             // 4479
					// 2D array                                                                                                       // 4480
					nestedSort.push.apply( nestedSort, a );                                                                           // 4481
				}                                                                                                                  // 4482
			};                                                                                                                  // 4483
	                                                                                                                      // 4484
		// Build the sort array, with pre-fix and post-fix options if they have been                                         // 4485
		// specified                                                                                                         // 4486
		if ( $.isArray( fixed ) ) {                                                                                          // 4487
			add( fixed );                                                                                                       // 4488
		}                                                                                                                    // 4489
	                                                                                                                      // 4490
		if ( fixedObj && fixed.pre ) {                                                                                       // 4491
			add( fixed.pre );                                                                                                   // 4492
		}                                                                                                                    // 4493
	                                                                                                                      // 4494
		add( settings.aaSorting );                                                                                           // 4495
	                                                                                                                      // 4496
		if (fixedObj && fixed.post ) {                                                                                       // 4497
			add( fixed.post );                                                                                                  // 4498
		}                                                                                                                    // 4499
	                                                                                                                      // 4500
		for ( i=0 ; i<nestedSort.length ; i++ )                                                                              // 4501
		{                                                                                                                    // 4502
			srcCol = nestedSort[i][0];                                                                                          // 4503
			aDataSort = aoColumns[ srcCol ].aDataSort;                                                                          // 4504
	                                                                                                                      // 4505
			for ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )                                                                   // 4506
			{                                                                                                                   // 4507
				iCol = aDataSort[k];                                                                                               // 4508
				sType = aoColumns[ iCol ].sType || 'string';                                                                       // 4509
	                                                                                                                      // 4510
				if ( nestedSort[i]._idx === undefined ) {                                                                          // 4511
					nestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );                                    // 4512
				}                                                                                                                  // 4513
	                                                                                                                      // 4514
				aSort.push( {                                                                                                      // 4515
					src:       srcCol,                                                                                                // 4516
					col:       iCol,                                                                                                  // 4517
					dir:       nestedSort[i][1],                                                                                      // 4518
					index:     nestedSort[i]._idx,                                                                                    // 4519
					type:      sType,                                                                                                 // 4520
					formatter: DataTable.ext.type.order[ sType+"-pre" ]                                                               // 4521
				} );                                                                                                               // 4522
			}                                                                                                                   // 4523
		}                                                                                                                    // 4524
	                                                                                                                      // 4525
		return aSort;                                                                                                        // 4526
	}                                                                                                                     // 4527
	                                                                                                                      // 4528
	/**                                                                                                                   // 4529
	 * Change the order of the table                                                                                      // 4530
	 *  @param {object} oSettings dataTables settings object                                                              // 4531
	 *  @memberof DataTable#oApi                                                                                          // 4532
	 *  @todo This really needs split up!                                                                                 // 4533
	 */                                                                                                                   // 4534
	function _fnSort ( oSettings )                                                                                        // 4535
	{                                                                                                                     // 4536
		var                                                                                                                  // 4537
			i, ien, iLen, j, jLen, k, kLen,                                                                                     // 4538
			sDataType, nTh,                                                                                                     // 4539
			aiOrig = [],                                                                                                        // 4540
			oExtSort = DataTable.ext.type.order,                                                                                // 4541
			aoData = oSettings.aoData,                                                                                          // 4542
			aoColumns = oSettings.aoColumns,                                                                                    // 4543
			aDataSort, data, iCol, sType, oSort,                                                                                // 4544
			formatters = 0,                                                                                                     // 4545
			sortCol,                                                                                                            // 4546
			displayMaster = oSettings.aiDisplayMaster,                                                                          // 4547
			aSort;                                                                                                              // 4548
	                                                                                                                      // 4549
		// Resolve any column types that are unknown due to addition or invalidation                                         // 4550
		// @todo Can this be moved into a 'data-ready' handler which is called when                                          // 4551
		//   data is going to be used in the table?                                                                          // 4552
		_fnColumnTypes( oSettings );                                                                                         // 4553
	                                                                                                                      // 4554
		aSort = _fnSortFlatten( oSettings );                                                                                 // 4555
	                                                                                                                      // 4556
		for ( i=0, ien=aSort.length ; i<ien ; i++ ) {                                                                        // 4557
			sortCol = aSort[i];                                                                                                 // 4558
	                                                                                                                      // 4559
			// Track if we can use the fast sort algorithm                                                                      // 4560
			if ( sortCol.formatter ) {                                                                                          // 4561
				formatters++;                                                                                                      // 4562
			}                                                                                                                   // 4563
	                                                                                                                      // 4564
			// Load the data needed for the sort, for each cell                                                                 // 4565
			_fnSortData( oSettings, sortCol.col );                                                                              // 4566
		}                                                                                                                    // 4567
	                                                                                                                      // 4568
		/* No sorting required if server-side or no sorting array */                                                         // 4569
		if ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )                                                     // 4570
		{                                                                                                                    // 4571
			// Create a value - key array of the current row positions such that we can use their                               // 4572
			// current position during the sort, if values match, in order to perform stable sorting                            // 4573
			for ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {                                                             // 4574
				aiOrig[ displayMaster[i] ] = i;                                                                                    // 4575
			}                                                                                                                   // 4576
	                                                                                                                      // 4577
			/* Do the sort - here we want multi-column sorting based on a given data source (column)                            // 4578
			 * and sorting function (from oSort) in a certain direction. It's reasonably complex to                             // 4579
			 * follow on it's own, but this is what we want (example two column sorting):                                       // 4580
			 *  fnLocalSorting = function(a,b){                                                                                 // 4581
			 *    var iTest;                                                                                                    // 4582
			 *    iTest = oSort['string-asc']('data11', 'data12');                                                              // 4583
			 *      if (iTest !== 0)                                                                                            // 4584
			 *        return iTest;                                                                                             // 4585
			 *    iTest = oSort['numeric-desc']('data21', 'data22');                                                            // 4586
			 *    if (iTest !== 0)                                                                                              // 4587
			 *      return iTest;                                                                                               // 4588
			 *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );                                                          // 4589
			 *  }                                                                                                               // 4590
			 * Basically we have a test for each sorting column, if the data in that column is equal,                           // 4591
			 * test the next column. If all columns match, then we use a numeric sort on the row                                // 4592
			 * positions in the original data array to provide a stable sort.                                                   // 4593
			 *                                                                                                                  // 4594
			 * Note - I know it seems excessive to have two sorting methods, but the first is around                            // 4595
			 * 15% faster, so the second is only maintained for backwards compatibility with sorting                            // 4596
			 * methods which do not have a pre-sort formatting function.                                                        // 4597
			 */                                                                                                                 // 4598
			if ( formatters === aSort.length ) {                                                                                // 4599
				// All sort types have formatting functions                                                                        // 4600
				displayMaster.sort( function ( a, b ) {                                                                            // 4601
					var                                                                                                               // 4602
						x, y, k, test, sort,                                                                                             // 4603
						len=aSort.length,                                                                                                // 4604
						dataA = aoData[a]._aSortData,                                                                                    // 4605
						dataB = aoData[b]._aSortData;                                                                                    // 4606
	                                                                                                                      // 4607
					for ( k=0 ; k<len ; k++ ) {                                                                                       // 4608
						sort = aSort[k];                                                                                                 // 4609
	                                                                                                                      // 4610
						x = dataA[ sort.col ];                                                                                           // 4611
						y = dataB[ sort.col ];                                                                                           // 4612
	                                                                                                                      // 4613
						test = x<y ? -1 : x>y ? 1 : 0;                                                                                   // 4614
						if ( test !== 0 ) {                                                                                              // 4615
							return sort.dir === 'asc' ? test : -test;                                                                       // 4616
						}                                                                                                                // 4617
					}                                                                                                                 // 4618
	                                                                                                                      // 4619
					x = aiOrig[a];                                                                                                    // 4620
					y = aiOrig[b];                                                                                                    // 4621
					return x<y ? -1 : x>y ? 1 : 0;                                                                                    // 4622
				} );                                                                                                               // 4623
			}                                                                                                                   // 4624
			else {                                                                                                              // 4625
				// Depreciated - remove in 1.11 (providing a plug-in option)                                                       // 4626
				// Not all sort types have formatting methods, so we have to call their sorting                                    // 4627
				// methods.                                                                                                        // 4628
				displayMaster.sort( function ( a, b ) {                                                                            // 4629
					var                                                                                                               // 4630
						x, y, k, l, test, sort, fn,                                                                                      // 4631
						len=aSort.length,                                                                                                // 4632
						dataA = aoData[a]._aSortData,                                                                                    // 4633
						dataB = aoData[b]._aSortData;                                                                                    // 4634
	                                                                                                                      // 4635
					for ( k=0 ; k<len ; k++ ) {                                                                                       // 4636
						sort = aSort[k];                                                                                                 // 4637
	                                                                                                                      // 4638
						x = dataA[ sort.col ];                                                                                           // 4639
						y = dataB[ sort.col ];                                                                                           // 4640
	                                                                                                                      // 4641
						fn = oExtSort[ sort.type+"-"+sort.dir ] || oExtSort[ "string-"+sort.dir ];                                       // 4642
						test = fn( x, y );                                                                                               // 4643
						if ( test !== 0 ) {                                                                                              // 4644
							return test;                                                                                                    // 4645
						}                                                                                                                // 4646
					}                                                                                                                 // 4647
	                                                                                                                      // 4648
					x = aiOrig[a];                                                                                                    // 4649
					y = aiOrig[b];                                                                                                    // 4650
					return x<y ? -1 : x>y ? 1 : 0;                                                                                    // 4651
				} );                                                                                                               // 4652
			}                                                                                                                   // 4653
		}                                                                                                                    // 4654
	                                                                                                                      // 4655
		/* Tell the draw function that we have sorted the data */                                                            // 4656
		oSettings.bSorted = true;                                                                                            // 4657
	}                                                                                                                     // 4658
	                                                                                                                      // 4659
	                                                                                                                      // 4660
	function _fnSortAria ( settings )                                                                                     // 4661
	{                                                                                                                     // 4662
		var label;                                                                                                           // 4663
		var nextSort;                                                                                                        // 4664
		var columns = settings.aoColumns;                                                                                    // 4665
		var aSort = _fnSortFlatten( settings );                                                                              // 4666
		var oAria = settings.oLanguage.oAria;                                                                                // 4667
	                                                                                                                      // 4668
		// ARIA attributes - need to loop all columns, to update all (removing old                                           // 4669
		// attributes as needed)                                                                                             // 4670
		for ( var i=0, iLen=columns.length ; i<iLen ; i++ )                                                                  // 4671
		{                                                                                                                    // 4672
			var col = columns[i];                                                                                               // 4673
			var asSorting = col.asSorting;                                                                                      // 4674
			var sTitle = col.sTitle.replace( /<.*?>/g, "" );                                                                    // 4675
			var th = col.nTh;                                                                                                   // 4676
	                                                                                                                      // 4677
			// IE7 is throwing an error when setting these properties with jQuery's                                             // 4678
			// attr() and removeAttr() methods...                                                                               // 4679
			th.removeAttribute('aria-sort');                                                                                    // 4680
	                                                                                                                      // 4681
			/* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */                         // 4682
			if ( col.bSortable ) {                                                                                              // 4683
				if ( aSort.length > 0 && aSort[0].col == i ) {                                                                     // 4684
					th.setAttribute('aria-sort', aSort[0].dir=="asc" ? "ascending" : "descending" );                                  // 4685
					nextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];                                                         // 4686
				}                                                                                                                  // 4687
				else {                                                                                                             // 4688
					nextSort = asSorting[0];                                                                                          // 4689
				}                                                                                                                  // 4690
	                                                                                                                      // 4691
				label = sTitle + ( nextSort === "asc" ?                                                                            // 4692
					oAria.sSortAscending :                                                                                            // 4693
					oAria.sSortDescending                                                                                             // 4694
				);                                                                                                                 // 4695
			}                                                                                                                   // 4696
			else {                                                                                                              // 4697
				label = sTitle;                                                                                                    // 4698
			}                                                                                                                   // 4699
	                                                                                                                      // 4700
			th.setAttribute('aria-label', label);                                                                               // 4701
		}                                                                                                                    // 4702
	}                                                                                                                     // 4703
	                                                                                                                      // 4704
	                                                                                                                      // 4705
	/**                                                                                                                   // 4706
	 * Function to run on user sort request                                                                               // 4707
	 *  @param {object} settings dataTables settings object                                                               // 4708
	 *  @param {node} attachTo node to attach the handler to                                                              // 4709
	 *  @param {int} colIdx column sorting index                                                                          // 4710
	 *  @param {boolean} [append=false] Append the requested sort to the existing                                         // 4711
	 *    sort if true (i.e. multi-column sort)                                                                           // 4712
	 *  @param {function} [callback] callback function                                                                    // 4713
	 *  @memberof DataTable#oApi                                                                                          // 4714
	 */                                                                                                                   // 4715
	function _fnSortListener ( settings, colIdx, append, callback )                                                       // 4716
	{                                                                                                                     // 4717
		var col = settings.aoColumns[ colIdx ];                                                                              // 4718
		var sorting = settings.aaSorting;                                                                                    // 4719
		var asSorting = col.asSorting;                                                                                       // 4720
		var nextSortIdx;                                                                                                     // 4721
		var next = function ( a, overflow ) {                                                                                // 4722
			var idx = a._idx;                                                                                                   // 4723
			if ( idx === undefined ) {                                                                                          // 4724
				idx = $.inArray( a[1], asSorting );                                                                                // 4725
			}                                                                                                                   // 4726
	                                                                                                                      // 4727
			return idx+1 < asSorting.length ?                                                                                   // 4728
				idx+1 :                                                                                                            // 4729
				overflow ?                                                                                                         // 4730
					null :                                                                                                            // 4731
					0;                                                                                                                // 4732
		};                                                                                                                   // 4733
	                                                                                                                      // 4734
		// Convert to 2D array if needed                                                                                     // 4735
		if ( typeof sorting[0] === 'number' ) {                                                                              // 4736
			sorting = settings.aaSorting = [ sorting ];                                                                         // 4737
		}                                                                                                                    // 4738
	                                                                                                                      // 4739
		// If appending the sort then we are multi-column sorting                                                            // 4740
		if ( append && settings.oFeatures.bSortMulti ) {                                                                     // 4741
			// Are we already doing some kind of sort on this column?                                                           // 4742
			var sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );                                                            // 4743
	                                                                                                                      // 4744
			if ( sortIdx !== -1 ) {                                                                                             // 4745
				// Yes, modify the sort                                                                                            // 4746
				nextSortIdx = next( sorting[sortIdx], true );                                                                      // 4747
	                                                                                                                      // 4748
				if ( nextSortIdx === null && sorting.length === 1 ) {                                                              // 4749
					nextSortIdx = 0; // can't remove sorting completely                                                               // 4750
				}                                                                                                                  // 4751
	                                                                                                                      // 4752
				if ( nextSortIdx === null ) {                                                                                      // 4753
					sorting.splice( sortIdx, 1 );                                                                                     // 4754
				}                                                                                                                  // 4755
				else {                                                                                                             // 4756
					sorting[sortIdx][1] = asSorting[ nextSortIdx ];                                                                   // 4757
					sorting[sortIdx]._idx = nextSortIdx;                                                                              // 4758
				}                                                                                                                  // 4759
			}                                                                                                                   // 4760
			else {                                                                                                              // 4761
				// No sort on this column yet                                                                                      // 4762
				sorting.push( [ colIdx, asSorting[0], 0 ] );                                                                       // 4763
				sorting[sorting.length-1]._idx = 0;                                                                                // 4764
			}                                                                                                                   // 4765
		}                                                                                                                    // 4766
		else if ( sorting.length && sorting[0][0] == colIdx ) {                                                              // 4767
			// Single column - already sorting on this column, modify the sort                                                  // 4768
			nextSortIdx = next( sorting[0] );                                                                                   // 4769
	                                                                                                                      // 4770
			sorting.length = 1;                                                                                                 // 4771
			sorting[0][1] = asSorting[ nextSortIdx ];                                                                           // 4772
			sorting[0]._idx = nextSortIdx;                                                                                      // 4773
		}                                                                                                                    // 4774
		else {                                                                                                               // 4775
			// Single column - sort only on this column                                                                         // 4776
			sorting.length = 0;                                                                                                 // 4777
			sorting.push( [ colIdx, asSorting[0] ] );                                                                           // 4778
			sorting[0]._idx = 0;                                                                                                // 4779
		}                                                                                                                    // 4780
	                                                                                                                      // 4781
		// Run the sort by calling a full redraw                                                                             // 4782
		_fnReDraw( settings );                                                                                               // 4783
	                                                                                                                      // 4784
		// callback used for async user interaction                                                                          // 4785
		if ( typeof callback == 'function' ) {                                                                               // 4786
			callback( settings );                                                                                               // 4787
		}                                                                                                                    // 4788
	}                                                                                                                     // 4789
	                                                                                                                      // 4790
	                                                                                                                      // 4791
	/**                                                                                                                   // 4792
	 * Attach a sort handler (click) to a node                                                                            // 4793
	 *  @param {object} settings dataTables settings object                                                               // 4794
	 *  @param {node} attachTo node to attach the handler to                                                              // 4795
	 *  @param {int} colIdx column sorting index                                                                          // 4796
	 *  @param {function} [callback] callback function                                                                    // 4797
	 *  @memberof DataTable#oApi                                                                                          // 4798
	 */                                                                                                                   // 4799
	function _fnSortAttachListener ( settings, attachTo, colIdx, callback )                                               // 4800
	{                                                                                                                     // 4801
		var col = settings.aoColumns[ colIdx ];                                                                              // 4802
	                                                                                                                      // 4803
		_fnBindAction( attachTo, {}, function (e) {                                                                          // 4804
			/* If the column is not sortable - don't to anything */                                                             // 4805
			if ( col.bSortable === false ) {                                                                                    // 4806
				return;                                                                                                            // 4807
			}                                                                                                                   // 4808
	                                                                                                                      // 4809
			// If processing is enabled use a timeout to allow the processing                                                   // 4810
			// display to be shown - otherwise to it synchronously                                                              // 4811
			if ( settings.oFeatures.bProcessing ) {                                                                             // 4812
				_fnProcessingDisplay( settings, true );                                                                            // 4813
	                                                                                                                      // 4814
				setTimeout( function() {                                                                                           // 4815
					_fnSortListener( settings, colIdx, e.shiftKey, callback );                                                        // 4816
	                                                                                                                      // 4817
					// In server-side processing, the draw callback will remove the                                                   // 4818
					// processing display                                                                                             // 4819
					if ( _fnDataSource( settings ) !== 'ssp' ) {                                                                      // 4820
						_fnProcessingDisplay( settings, false );                                                                         // 4821
					}                                                                                                                 // 4822
				}, 0 );                                                                                                            // 4823
			}                                                                                                                   // 4824
			else {                                                                                                              // 4825
				_fnSortListener( settings, colIdx, e.shiftKey, callback );                                                         // 4826
			}                                                                                                                   // 4827
		} );                                                                                                                 // 4828
	}                                                                                                                     // 4829
	                                                                                                                      // 4830
	                                                                                                                      // 4831
	/**                                                                                                                   // 4832
	 * Set the sorting classes on table's body, Note: it is safe to call this function                                    // 4833
	 * when bSort and bSortClasses are false                                                                              // 4834
	 *  @param {object} oSettings dataTables settings object                                                              // 4835
	 *  @memberof DataTable#oApi                                                                                          // 4836
	 */                                                                                                                   // 4837
	function _fnSortingClasses( settings )                                                                                // 4838
	{                                                                                                                     // 4839
		var oldSort = settings.aLastSort;                                                                                    // 4840
		var sortClass = settings.oClasses.sSortColumn;                                                                       // 4841
		var sort = _fnSortFlatten( settings );                                                                               // 4842
		var features = settings.oFeatures;                                                                                   // 4843
		var i, ien, colIdx;                                                                                                  // 4844
	                                                                                                                      // 4845
		if ( features.bSort && features.bSortClasses ) {                                                                     // 4846
			// Remove old sorting classes                                                                                       // 4847
			for ( i=0, ien=oldSort.length ; i<ien ; i++ ) {                                                                     // 4848
				colIdx = oldSort[i].src;                                                                                           // 4849
	                                                                                                                      // 4850
				// Remove column sorting                                                                                           // 4851
				$( _pluck( settings.aoData, 'anCells', colIdx ) )                                                                  // 4852
					.removeClass( sortClass + (i<2 ? i+1 : 3) );                                                                      // 4853
			}                                                                                                                   // 4854
	                                                                                                                      // 4855
			// Add new column sorting                                                                                           // 4856
			for ( i=0, ien=sort.length ; i<ien ; i++ ) {                                                                        // 4857
				colIdx = sort[i].src;                                                                                              // 4858
	                                                                                                                      // 4859
				$( _pluck( settings.aoData, 'anCells', colIdx ) )                                                                  // 4860
					.addClass( sortClass + (i<2 ? i+1 : 3) );                                                                         // 4861
			}                                                                                                                   // 4862
		}                                                                                                                    // 4863
	                                                                                                                      // 4864
		settings.aLastSort = sort;                                                                                           // 4865
	}                                                                                                                     // 4866
	                                                                                                                      // 4867
	                                                                                                                      // 4868
	// Get the data to sort a column, be it from cache, fresh (populating the                                             // 4869
	// cache), or from a sort formatter                                                                                   // 4870
	function _fnSortData( settings, idx )                                                                                 // 4871
	{                                                                                                                     // 4872
		// Custom sorting function - provided by the sort data type                                                          // 4873
		var column = settings.aoColumns[ idx ];                                                                              // 4874
		var customSort = DataTable.ext.order[ column.sSortDataType ];                                                        // 4875
		var customData;                                                                                                      // 4876
	                                                                                                                      // 4877
		if ( customSort ) {                                                                                                  // 4878
			customData = customSort.call( settings.oInstance, settings, idx,                                                    // 4879
				_fnColumnIndexToVisible( settings, idx )                                                                           // 4880
			);                                                                                                                  // 4881
		}                                                                                                                    // 4882
	                                                                                                                      // 4883
		// Use / populate cache                                                                                              // 4884
		var row, cellData;                                                                                                   // 4885
		var formatter = DataTable.ext.type.order[ column.sType+"-pre" ];                                                     // 4886
	                                                                                                                      // 4887
		for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {                                                          // 4888
			row = settings.aoData[i];                                                                                           // 4889
	                                                                                                                      // 4890
			if ( ! row._aSortData ) {                                                                                           // 4891
				row._aSortData = [];                                                                                               // 4892
			}                                                                                                                   // 4893
	                                                                                                                      // 4894
			if ( ! row._aSortData[idx] || customSort ) {                                                                        // 4895
				cellData = customSort ?                                                                                            // 4896
					customData[i] : // If there was a custom sort function, use data from there                                       // 4897
					_fnGetCellData( settings, i, idx, 'sort' );                                                                       // 4898
	                                                                                                                      // 4899
				row._aSortData[ idx ] = formatter ?                                                                                // 4900
					formatter( cellData ) :                                                                                           // 4901
					cellData;                                                                                                         // 4902
			}                                                                                                                   // 4903
		}                                                                                                                    // 4904
	}                                                                                                                     // 4905
	                                                                                                                      // 4906
	                                                                                                                      // 4907
	                                                                                                                      // 4908
	/**                                                                                                                   // 4909
	 * Save the state of a table                                                                                          // 4910
	 *  @param {object} oSettings dataTables settings object                                                              // 4911
	 *  @memberof DataTable#oApi                                                                                          // 4912
	 */                                                                                                                   // 4913
	function _fnSaveState ( settings )                                                                                    // 4914
	{                                                                                                                     // 4915
		if ( !settings.oFeatures.bStateSave || settings.bDestroying )                                                        // 4916
		{                                                                                                                    // 4917
			return;                                                                                                             // 4918
		}                                                                                                                    // 4919
	                                                                                                                      // 4920
		/* Store the interesting variables */                                                                                // 4921
		var state = {                                                                                                        // 4922
			time:    +new Date(),                                                                                               // 4923
			start:   settings._iDisplayStart,                                                                                   // 4924
			length:  settings._iDisplayLength,                                                                                  // 4925
			order:   $.extend( true, [], settings.aaSorting ),                                                                  // 4926
			search:  _fnSearchToCamel( settings.oPreviousSearch ),                                                              // 4927
			columns: $.map( settings.aoColumns, function ( col, i ) {                                                           // 4928
				return {                                                                                                           // 4929
					visible: col.bVisible,                                                                                            // 4930
					search: _fnSearchToCamel( settings.aoPreSearchCols[i] )                                                           // 4931
				};                                                                                                                 // 4932
			} )                                                                                                                 // 4933
		};                                                                                                                   // 4934
	                                                                                                                      // 4935
		_fnCallbackFire( settings, "aoStateSaveParams", 'stateSaveParams', [settings, state] );                              // 4936
	                                                                                                                      // 4937
		settings.oSavedState = state;                                                                                        // 4938
		settings.fnStateSaveCallback.call( settings.oInstance, settings, state );                                            // 4939
	}                                                                                                                     // 4940
	                                                                                                                      // 4941
	                                                                                                                      // 4942
	/**                                                                                                                   // 4943
	 * Attempt to load a saved table state                                                                                // 4944
	 *  @param {object} oSettings dataTables settings object                                                              // 4945
	 *  @param {object} oInit DataTables init object so we can override settings                                          // 4946
	 *  @memberof DataTable#oApi                                                                                          // 4947
	 */                                                                                                                   // 4948
	function _fnLoadState ( settings, oInit )                                                                             // 4949
	{                                                                                                                     // 4950
		var i, ien;                                                                                                          // 4951
		var columns = settings.aoColumns;                                                                                    // 4952
	                                                                                                                      // 4953
		if ( ! settings.oFeatures.bStateSave ) {                                                                             // 4954
			return;                                                                                                             // 4955
		}                                                                                                                    // 4956
	                                                                                                                      // 4957
		var state = settings.fnStateLoadCallback.call( settings.oInstance, settings );                                       // 4958
		if ( ! state || ! state.time ) {                                                                                     // 4959
			return;                                                                                                             // 4960
		}                                                                                                                    // 4961
	                                                                                                                      // 4962
		/* Allow custom and plug-in manipulation functions to alter the saved data set and                                   // 4963
		 * cancelling of loading by returning false                                                                          // 4964
		 */                                                                                                                  // 4965
		var abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, state] );            // 4966
		if ( $.inArray( false, abStateLoad ) !== -1 ) {                                                                      // 4967
			return;                                                                                                             // 4968
		}                                                                                                                    // 4969
	                                                                                                                      // 4970
		/* Reject old data */                                                                                                // 4971
		var duration = settings.iStateDuration;                                                                              // 4972
		if ( duration > 0 && state.time < +new Date() - (duration*1000) ) {                                                  // 4973
			return;                                                                                                             // 4974
		}                                                                                                                    // 4975
	                                                                                                                      // 4976
		// Number of columns have changed - all bets are off, no restore of settings                                         // 4977
		if ( columns.length !== state.columns.length ) {                                                                     // 4978
			return;                                                                                                             // 4979
		}                                                                                                                    // 4980
	                                                                                                                      // 4981
		// Store the saved state so it might be accessed at any time                                                         // 4982
		settings.oLoadedState = $.extend( true, {}, state );                                                                 // 4983
	                                                                                                                      // 4984
		// Restore key features - todo - for 1.11 this needs to be done by                                                   // 4985
		// subscribed events                                                                                                 // 4986
		if ( state.start !== undefined ) {                                                                                   // 4987
			settings._iDisplayStart    = state.start;                                                                           // 4988
			settings.iInitDisplayStart = state.start;                                                                           // 4989
		}                                                                                                                    // 4990
		if ( state.length !== undefined ) {                                                                                  // 4991
			settings._iDisplayLength   = state.length;                                                                          // 4992
		}                                                                                                                    // 4993
	                                                                                                                      // 4994
		// Order                                                                                                             // 4995
		if ( state.order !== undefined ) {                                                                                   // 4996
			settings.aaSorting = [];                                                                                            // 4997
			$.each( state.order, function ( i, col ) {                                                                          // 4998
				settings.aaSorting.push( col[0] >= columns.length ?                                                                // 4999
					[ 0, col[1] ] :                                                                                                   // 5000
					col                                                                                                               // 5001
				);                                                                                                                 // 5002
			} );                                                                                                                // 5003
		}                                                                                                                    // 5004
	                                                                                                                      // 5005
		// Search                                                                                                            // 5006
		if ( state.search !== undefined ) {                                                                                  // 5007
			$.extend( settings.oPreviousSearch, _fnSearchToHung( state.search ) );                                              // 5008
		}                                                                                                                    // 5009
	                                                                                                                      // 5010
		// Columns                                                                                                           // 5011
		for ( i=0, ien=state.columns.length ; i<ien ; i++ ) {                                                                // 5012
			var col = state.columns[i];                                                                                         // 5013
	                                                                                                                      // 5014
			// Visibility                                                                                                       // 5015
			if ( col.visible !== undefined ) {                                                                                  // 5016
				columns[i].bVisible = col.visible;                                                                                 // 5017
			}                                                                                                                   // 5018
	                                                                                                                      // 5019
			// Search                                                                                                           // 5020
			if ( col.search !== undefined ) {                                                                                   // 5021
				$.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );                                            // 5022
			}                                                                                                                   // 5023
		}                                                                                                                    // 5024
	                                                                                                                      // 5025
		_fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, state] );                                      // 5026
	}                                                                                                                     // 5027
	                                                                                                                      // 5028
	                                                                                                                      // 5029
	/**                                                                                                                   // 5030
	 * Return the settings object for a particular table                                                                  // 5031
	 *  @param {node} table table we are using as a dataTable                                                             // 5032
	 *  @returns {object} Settings object - or null if not found                                                          // 5033
	 *  @memberof DataTable#oApi                                                                                          // 5034
	 */                                                                                                                   // 5035
	function _fnSettingsFromNode ( table )                                                                                // 5036
	{                                                                                                                     // 5037
		var settings = DataTable.settings;                                                                                   // 5038
		var idx = $.inArray( table, _pluck( settings, 'nTable' ) );                                                          // 5039
	                                                                                                                      // 5040
		return idx !== -1 ?                                                                                                  // 5041
			settings[ idx ] :                                                                                                   // 5042
			null;                                                                                                               // 5043
	}                                                                                                                     // 5044
	                                                                                                                      // 5045
	                                                                                                                      // 5046
	/**                                                                                                                   // 5047
	 * Log an error message                                                                                               // 5048
	 *  @param {object} settings dataTables settings object                                                               // 5049
	 *  @param {int} level log error messages, or display them to the user                                                // 5050
	 *  @param {string} msg error message                                                                                 // 5051
	 *  @param {int} tn Technical note id to get more information about the error.                                        // 5052
	 *  @memberof DataTable#oApi                                                                                          // 5053
	 */                                                                                                                   // 5054
	function _fnLog( settings, level, msg, tn )                                                                           // 5055
	{                                                                                                                     // 5056
		msg = 'DataTables warning: '+                                                                                        // 5057
			(settings!==null ? 'table id='+settings.sTableId+' - ' : '')+msg;                                                   // 5058
	                                                                                                                      // 5059
		if ( tn ) {                                                                                                          // 5060
			msg += '. For more information about this error, please see '+                                                      // 5061
			'http://datatables.net/tn/'+tn;                                                                                     // 5062
		}                                                                                                                    // 5063
	                                                                                                                      // 5064
		if ( ! level  ) {                                                                                                    // 5065
			// Backwards compatibility pre 1.10                                                                                 // 5066
			var ext = DataTable.ext;                                                                                            // 5067
			var type = ext.sErrMode || ext.errMode;                                                                             // 5068
	                                                                                                                      // 5069
			_fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );                                                  // 5070
	                                                                                                                      // 5071
			if ( type == 'alert' ) {                                                                                            // 5072
				alert( msg );                                                                                                      // 5073
			}                                                                                                                   // 5074
			else if ( type == 'throw' ) {                                                                                       // 5075
				throw new Error(msg);                                                                                              // 5076
			}                                                                                                                   // 5077
			else if ( typeof type == 'function' ) {                                                                             // 5078
				type( settings, tn, msg );                                                                                         // 5079
			}                                                                                                                   // 5080
		}                                                                                                                    // 5081
		else if ( window.console && console.log ) {                                                                          // 5082
			console.log( msg );                                                                                                 // 5083
		}                                                                                                                    // 5084
	}                                                                                                                     // 5085
	                                                                                                                      // 5086
	                                                                                                                      // 5087
	/**                                                                                                                   // 5088
	 * See if a property is defined on one object, if so assign it to the other object                                    // 5089
	 *  @param {object} ret target object                                                                                 // 5090
	 *  @param {object} src source object                                                                                 // 5091
	 *  @param {string} name property                                                                                     // 5092
	 *  @param {string} [mappedName] name to map too - optional, name used if not given                                   // 5093
	 *  @memberof DataTable#oApi                                                                                          // 5094
	 */                                                                                                                   // 5095
	function _fnMap( ret, src, name, mappedName )                                                                         // 5096
	{                                                                                                                     // 5097
		if ( $.isArray( name ) ) {                                                                                           // 5098
			$.each( name, function (i, val) {                                                                                   // 5099
				if ( $.isArray( val ) ) {                                                                                          // 5100
					_fnMap( ret, src, val[0], val[1] );                                                                               // 5101
				}                                                                                                                  // 5102
				else {                                                                                                             // 5103
					_fnMap( ret, src, val );                                                                                          // 5104
				}                                                                                                                  // 5105
			} );                                                                                                                // 5106
	                                                                                                                      // 5107
			return;                                                                                                             // 5108
		}                                                                                                                    // 5109
	                                                                                                                      // 5110
		if ( mappedName === undefined ) {                                                                                    // 5111
			mappedName = name;                                                                                                  // 5112
		}                                                                                                                    // 5113
	                                                                                                                      // 5114
		if ( src[name] !== undefined ) {                                                                                     // 5115
			ret[mappedName] = src[name];                                                                                        // 5116
		}                                                                                                                    // 5117
	}                                                                                                                     // 5118
	                                                                                                                      // 5119
	                                                                                                                      // 5120
	/**                                                                                                                   // 5121
	 * Extend objects - very similar to jQuery.extend, but deep copy objects, and                                         // 5122
	 * shallow copy arrays. The reason we need to do this, is that we don't want to                                       // 5123
	 * deep copy array init values (such as aaSorting) since the dev wouldn't be                                          // 5124
	 * able to override them, but we do want to deep copy arrays.                                                         // 5125
	 *  @param {object} out Object to extend                                                                              // 5126
	 *  @param {object} extender Object from which the properties will be applied to                                      // 5127
	 *      out                                                                                                           // 5128
	 *  @param {boolean} breakRefs If true, then arrays will be sliced to take an                                         // 5129
	 *      independent copy with the exception of the `data` or `aaData` parameters                                      // 5130
	 *      if they are present. This is so you can pass in a collection to                                               // 5131
	 *      DataTables and have that used as your data source without breaking the                                        // 5132
	 *      references                                                                                                    // 5133
	 *  @returns {object} out Reference, just for convenience - out === the return.                                       // 5134
	 *  @memberof DataTable#oApi                                                                                          // 5135
	 *  @todo This doesn't take account of arrays inside the deep copied objects.                                         // 5136
	 */                                                                                                                   // 5137
	function _fnExtend( out, extender, breakRefs )                                                                        // 5138
	{                                                                                                                     // 5139
		var val;                                                                                                             // 5140
	                                                                                                                      // 5141
		for ( var prop in extender ) {                                                                                       // 5142
			if ( extender.hasOwnProperty(prop) ) {                                                                              // 5143
				val = extender[prop];                                                                                              // 5144
	                                                                                                                      // 5145
				if ( $.isPlainObject( val ) ) {                                                                                    // 5146
					if ( ! $.isPlainObject( out[prop] ) ) {                                                                           // 5147
						out[prop] = {};                                                                                                  // 5148
					}                                                                                                                 // 5149
					$.extend( true, out[prop], val );                                                                                 // 5150
				}                                                                                                                  // 5151
				else if ( breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val) ) {                                  // 5152
					out[prop] = val.slice();                                                                                          // 5153
				}                                                                                                                  // 5154
				else {                                                                                                             // 5155
					out[prop] = val;                                                                                                  // 5156
				}                                                                                                                  // 5157
			}                                                                                                                   // 5158
		}                                                                                                                    // 5159
	                                                                                                                      // 5160
		return out;                                                                                                          // 5161
	}                                                                                                                     // 5162
	                                                                                                                      // 5163
	                                                                                                                      // 5164
	/**                                                                                                                   // 5165
	 * Bind an event handers to allow a click or return key to activate the callback.                                     // 5166
	 * This is good for accessibility since a return on the keyboard will have the                                        // 5167
	 * same effect as a click, if the element has focus.                                                                  // 5168
	 *  @param {element} n Element to bind the action to                                                                  // 5169
	 *  @param {object} oData Data object to pass to the triggered function                                               // 5170
	 *  @param {function} fn Callback function for when the event is triggered                                            // 5171
	 *  @memberof DataTable#oApi                                                                                          // 5172
	 */                                                                                                                   // 5173
	function _fnBindAction( n, oData, fn )                                                                                // 5174
	{                                                                                                                     // 5175
		$(n)                                                                                                                 // 5176
			.bind( 'click.DT', oData, function (e) {                                                                            // 5177
					n.blur(); // Remove focus outline for mouse users                                                                 // 5178
					fn(e);                                                                                                            // 5179
				} )                                                                                                                // 5180
			.bind( 'keypress.DT', oData, function (e){                                                                          // 5181
					if ( e.which === 13 ) {                                                                                           // 5182
						e.preventDefault();                                                                                              // 5183
						fn(e);                                                                                                           // 5184
					}                                                                                                                 // 5185
				} )                                                                                                                // 5186
			.bind( 'selectstart.DT', function () {                                                                              // 5187
					/* Take the brutal approach to cancelling text selection */                                                       // 5188
					return false;                                                                                                     // 5189
				} );                                                                                                               // 5190
	}                                                                                                                     // 5191
	                                                                                                                      // 5192
	                                                                                                                      // 5193
	/**                                                                                                                   // 5194
	 * Register a callback function. Easily allows a callback function to be added to                                     // 5195
	 * an array store of callback functions that can then all be called together.                                         // 5196
	 *  @param {object} oSettings dataTables settings object                                                              // 5197
	 *  @param {string} sStore Name of the array storage for the callbacks in oSettings                                   // 5198
	 *  @param {function} fn Function to be called back                                                                   // 5199
	 *  @param {string} sName Identifying name for the callback (i.e. a label)                                            // 5200
	 *  @memberof DataTable#oApi                                                                                          // 5201
	 */                                                                                                                   // 5202
	function _fnCallbackReg( oSettings, sStore, fn, sName )                                                               // 5203
	{                                                                                                                     // 5204
		if ( fn )                                                                                                            // 5205
		{                                                                                                                    // 5206
			oSettings[sStore].push( {                                                                                           // 5207
				"fn": fn,                                                                                                          // 5208
				"sName": sName                                                                                                     // 5209
			} );                                                                                                                // 5210
		}                                                                                                                    // 5211
	}                                                                                                                     // 5212
	                                                                                                                      // 5213
	                                                                                                                      // 5214
	/**                                                                                                                   // 5215
	 * Fire callback functions and trigger events. Note that the loop over the                                            // 5216
	 * callback array store is done backwards! Further note that you do not want to                                       // 5217
	 * fire off triggers in time sensitive applications (for example cell creation)                                       // 5218
	 * as its slow.                                                                                                       // 5219
	 *  @param {object} settings dataTables settings object                                                               // 5220
	 *  @param {string} callbackArr Name of the array storage for the callbacks in                                        // 5221
	 *      oSettings                                                                                                     // 5222
	 *  @param {string} eventName Name of the jQuery custom event to trigger. If                                          // 5223
	 *      null no trigger is fired                                                                                      // 5224
	 *  @param {array} args Array of arguments to pass to the callback function /                                         // 5225
	 *      trigger                                                                                                       // 5226
	 *  @memberof DataTable#oApi                                                                                          // 5227
	 */                                                                                                                   // 5228
	function _fnCallbackFire( settings, callbackArr, eventName, args )                                                    // 5229
	{                                                                                                                     // 5230
		var ret = [];                                                                                                        // 5231
	                                                                                                                      // 5232
		if ( callbackArr ) {                                                                                                 // 5233
			ret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {                                           // 5234
				return val.fn.apply( settings.oInstance, args );                                                                   // 5235
			} );                                                                                                                // 5236
		}                                                                                                                    // 5237
	                                                                                                                      // 5238
		if ( eventName !== null ) {                                                                                          // 5239
			var e = $.Event( eventName+'.dt' );                                                                                 // 5240
	                                                                                                                      // 5241
			$(settings.nTable).trigger( e, args );                                                                              // 5242
	                                                                                                                      // 5243
			ret.push( e.result );                                                                                               // 5244
		}                                                                                                                    // 5245
	                                                                                                                      // 5246
		return ret;                                                                                                          // 5247
	}                                                                                                                     // 5248
	                                                                                                                      // 5249
	                                                                                                                      // 5250
	function _fnLengthOverflow ( settings )                                                                               // 5251
	{                                                                                                                     // 5252
		var                                                                                                                  // 5253
			start = settings._iDisplayStart,                                                                                    // 5254
			end = settings.fnDisplayEnd(),                                                                                      // 5255
			len = settings._iDisplayLength;                                                                                     // 5256
	                                                                                                                      // 5257
		/* If we have space to show extra rows (backing up from the end point - then do so */                                // 5258
		if ( start >= end )                                                                                                  // 5259
		{                                                                                                                    // 5260
			start = end - len;                                                                                                  // 5261
		}                                                                                                                    // 5262
	                                                                                                                      // 5263
		// Keep the start record on the current page                                                                         // 5264
		start -= (start % len);                                                                                              // 5265
	                                                                                                                      // 5266
		if ( len === -1 || start < 0 )                                                                                       // 5267
		{                                                                                                                    // 5268
			start = 0;                                                                                                          // 5269
		}                                                                                                                    // 5270
	                                                                                                                      // 5271
		settings._iDisplayStart = start;                                                                                     // 5272
	}                                                                                                                     // 5273
	                                                                                                                      // 5274
	                                                                                                                      // 5275
	function _fnRenderer( settings, type )                                                                                // 5276
	{                                                                                                                     // 5277
		var renderer = settings.renderer;                                                                                    // 5278
		var host = DataTable.ext.renderer[type];                                                                             // 5279
	                                                                                                                      // 5280
		if ( $.isPlainObject( renderer ) && renderer[type] ) {                                                               // 5281
			// Specific renderer for this type. If available use it, otherwise use                                              // 5282
			// the default.                                                                                                     // 5283
			return host[renderer[type]] || host._;                                                                              // 5284
		}                                                                                                                    // 5285
		else if ( typeof renderer === 'string' ) {                                                                           // 5286
			// Common renderer - if there is one available for this type use it,                                                // 5287
			// otherwise use the default                                                                                        // 5288
			return host[renderer] || host._;                                                                                    // 5289
		}                                                                                                                    // 5290
	                                                                                                                      // 5291
		// Use the default                                                                                                   // 5292
		return host._;                                                                                                       // 5293
	}                                                                                                                     // 5294
	                                                                                                                      // 5295
	                                                                                                                      // 5296
	/**                                                                                                                   // 5297
	 * Detect the data source being used for the table. Used to simplify the code                                         // 5298
	 * a little (ajax) and to make it compress a little smaller.                                                          // 5299
	 *                                                                                                                    // 5300
	 *  @param {object} settings dataTables settings object                                                               // 5301
	 *  @returns {string} Data source                                                                                     // 5302
	 *  @memberof DataTable#oApi                                                                                          // 5303
	 */                                                                                                                   // 5304
	function _fnDataSource ( settings )                                                                                   // 5305
	{                                                                                                                     // 5306
		if ( settings.oFeatures.bServerSide ) {                                                                              // 5307
			return 'ssp';                                                                                                       // 5308
		}                                                                                                                    // 5309
		else if ( settings.ajax || settings.sAjaxSource ) {                                                                  // 5310
			return 'ajax';                                                                                                      // 5311
		}                                                                                                                    // 5312
		return 'dom';                                                                                                        // 5313
	}                                                                                                                     // 5314
	                                                                                                                      // 5315
                                                                                                                       // 5316
	DataTable = function( options )                                                                                       // 5317
	{                                                                                                                     // 5318
		/**                                                                                                                  // 5319
		 * Perform a jQuery selector action on the table's TR elements (from the tbody) and                                  // 5320
		 * return the resulting jQuery object.                                                                               // 5321
		 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on                               // 5322
		 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included                                // 5323
		 *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter                              // 5324
		 *    criterion ("applied") or all TR elements (i.e. no filter).                                                     // 5325
		 *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.                           // 5326
		 *    Can be either 'current', whereby the current sorting of the table is used, or                                  // 5327
		 *    'original' whereby the original order the data was read into the table is used.                                // 5328
		 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page                             // 5329
		 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be                                 // 5330
		 *    'current' and filter is 'applied', regardless of what they might be given as.                                  // 5331
		 *  @returns {object} jQuery object, filtered by the given selector.                                                 // 5332
		 *  @dtopt API                                                                                                       // 5333
		 *  @deprecated Since v1.10                                                                                          // 5334
		 *                                                                                                                   // 5335
		 *  @example                                                                                                         // 5336
		 *    $(document).ready(function() {                                                                                 // 5337
		 *      var oTable = $('#example').dataTable();                                                                      // 5338
		 *                                                                                                                   // 5339
		 *      // Highlight every second row                                                                                // 5340
		 *      oTable.$('tr:odd').css('backgroundColor', 'blue');                                                           // 5341
		 *    } );                                                                                                           // 5342
		 *                                                                                                                   // 5343
		 *  @example                                                                                                         // 5344
		 *    $(document).ready(function() {                                                                                 // 5345
		 *      var oTable = $('#example').dataTable();                                                                      // 5346
		 *                                                                                                                   // 5347
		 *      // Filter to rows with 'Webkit' in them, add a background colour and then                                    // 5348
		 *      // remove the filter, thus highlighting the 'Webkit' rows only.                                              // 5349
		 *      oTable.fnFilter('Webkit');                                                                                   // 5350
		 *      oTable.$('tr', {"search": "applied"}).css('backgroundColor', 'blue');                                        // 5351
		 *      oTable.fnFilter('');                                                                                         // 5352
		 *    } );                                                                                                           // 5353
		 */                                                                                                                  // 5354
		this.$ = function ( sSelector, oOpts )                                                                               // 5355
		{                                                                                                                    // 5356
			return this.api(true).$( sSelector, oOpts );                                                                        // 5357
		};                                                                                                                   // 5358
		                                                                                                                     // 5359
		                                                                                                                     // 5360
		/**                                                                                                                  // 5361
		 * Almost identical to $ in operation, but in this case returns the data for the matched                             // 5362
		 * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes                            // 5363
		 * rather than any descendants, so the data can be obtained for the row/cell. If matching                            // 5364
		 * rows are found, the data returned is the original data array/object that was used to                              // 5365
		 * create the row (or a generated array if from a DOM source).                                                       // 5366
		 *                                                                                                                   // 5367
		 * This method is often useful in-combination with $ where both functions are given the                              // 5368
		 * same parameters and the array indexes will match identically.                                                     // 5369
		 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on                               // 5370
		 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included                                // 5371
		 *  @param {string} [oOpts.filter=none] Select elements that meet the current filter                                 // 5372
		 *    criterion ("applied") or all elements (i.e. no filter).                                                        // 5373
		 *  @param {string} [oOpts.order=current] Order of the data in the processed array.                                  // 5374
		 *    Can be either 'current', whereby the current sorting of the table is used, or                                  // 5375
		 *    'original' whereby the original order the data was read into the table is used.                                // 5376
		 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page                             // 5377
		 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be                                 // 5378
		 *    'current' and filter is 'applied', regardless of what they might be given as.                                  // 5379
		 *  @returns {array} Data for the matched elements. If any elements, as a result of the                              // 5380
		 *    selector, were not TR, TD or TH elements in the DataTable, they will have a null                               // 5381
		 *    entry in the array.                                                                                            // 5382
		 *  @dtopt API                                                                                                       // 5383
		 *  @deprecated Since v1.10                                                                                          // 5384
		 *                                                                                                                   // 5385
		 *  @example                                                                                                         // 5386
		 *    $(document).ready(function() {                                                                                 // 5387
		 *      var oTable = $('#example').dataTable();                                                                      // 5388
		 *                                                                                                                   // 5389
		 *      // Get the data from the first row in the table                                                              // 5390
		 *      var data = oTable._('tr:first');                                                                             // 5391
		 *                                                                                                                   // 5392
		 *      // Do something useful with the data                                                                         // 5393
		 *      alert( "First cell is: "+data[0] );                                                                          // 5394
		 *    } );                                                                                                           // 5395
		 *                                                                                                                   // 5396
		 *  @example                                                                                                         // 5397
		 *    $(document).ready(function() {                                                                                 // 5398
		 *      var oTable = $('#example').dataTable();                                                                      // 5399
		 *                                                                                                                   // 5400
		 *      // Filter to 'Webkit' and get all data for                                                                   // 5401
		 *      oTable.fnFilter('Webkit');                                                                                   // 5402
		 *      var data = oTable._('tr', {"search": "applied"});                                                            // 5403
		 *                                                                                                                   // 5404
		 *      // Do something with the data                                                                                // 5405
		 *      alert( data.length+" rows matched the search" );                                                             // 5406
		 *    } );                                                                                                           // 5407
		 */                                                                                                                  // 5408
		this._ = function ( sSelector, oOpts )                                                                               // 5409
		{                                                                                                                    // 5410
			return this.api(true).rows( sSelector, oOpts ).data();                                                              // 5411
		};                                                                                                                   // 5412
		                                                                                                                     // 5413
		                                                                                                                     // 5414
		/**                                                                                                                  // 5415
		 * Create a DataTables Api instance, with the currently selected tables for                                          // 5416
		 * the Api's context.                                                                                                // 5417
		 * @param {boolean} [traditional=false] Set the API instance's context to be                                         // 5418
		 *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was                                      // 5419
		 *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),                                       // 5420
		 *   or if all tables captured in the jQuery object should be used.                                                  // 5421
		 * @return {DataTables.Api}                                                                                          // 5422
		 */                                                                                                                  // 5423
		this.api = function ( traditional )                                                                                  // 5424
		{                                                                                                                    // 5425
			return traditional ?                                                                                                // 5426
				new _Api(                                                                                                          // 5427
					_fnSettingsFromNode( this[ _ext.iApiIndex ] )                                                                     // 5428
				) :                                                                                                                // 5429
				new _Api( this );                                                                                                  // 5430
		};                                                                                                                   // 5431
		                                                                                                                     // 5432
		                                                                                                                     // 5433
		/**                                                                                                                  // 5434
		 * Add a single new row or multiple rows of data to the table. Please note                                           // 5435
		 * that this is suitable for client-side processing only - if you are using                                          // 5436
		 * server-side processing (i.e. "bServerSide": true), then to add data, you                                          // 5437
		 * must add it to the data source, i.e. the server-side, through an Ajax call.                                       // 5438
		 *  @param {array|object} data The data to be added to the table. This can be:                                       // 5439
		 *    <ul>                                                                                                           // 5440
		 *      <li>1D array of data - add a single row with the data provided</li>                                          // 5441
		 *      <li>2D array of arrays - add multiple rows in a single call</li>                                             // 5442
		 *      <li>object - data object when using <i>mData</i></li>                                                        // 5443
		 *      <li>array of objects - multiple data objects when using <i>mData</i></li>                                    // 5444
		 *    </ul>                                                                                                          // 5445
		 *  @param {bool} [redraw=true] redraw the table or not                                                              // 5446
		 *  @returns {array} An array of integers, representing the list of indexes in                                       // 5447
		 *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to                                     // 5448
		 *    the table.                                                                                                     // 5449
		 *  @dtopt API                                                                                                       // 5450
		 *  @deprecated Since v1.10                                                                                          // 5451
		 *                                                                                                                   // 5452
		 *  @example                                                                                                         // 5453
		 *    // Global var for counter                                                                                      // 5454
		 *    var giCount = 2;                                                                                               // 5455
		 *                                                                                                                   // 5456
		 *    $(document).ready(function() {                                                                                 // 5457
		 *      $('#example').dataTable();                                                                                   // 5458
		 *    } );                                                                                                           // 5459
		 *                                                                                                                   // 5460
		 *    function fnClickAddRow() {                                                                                     // 5461
		 *      $('#example').dataTable().fnAddData( [                                                                       // 5462
		 *        giCount+".1",                                                                                              // 5463
		 *        giCount+".2",                                                                                              // 5464
		 *        giCount+".3",                                                                                              // 5465
		 *        giCount+".4" ]                                                                                             // 5466
		 *      );                                                                                                           // 5467
		 *                                                                                                                   // 5468
		 *      giCount++;                                                                                                   // 5469
		 *    }                                                                                                              // 5470
		 */                                                                                                                  // 5471
		this.fnAddData = function( data, redraw )                                                                            // 5472
		{                                                                                                                    // 5473
			var api = this.api( true );                                                                                         // 5474
		                                                                                                                     // 5475
			/* Check if we want to add multiple rows or not */                                                                  // 5476
			var rows = $.isArray(data) && ( $.isArray(data[0]) || $.isPlainObject(data[0]) ) ?                                  // 5477
				api.rows.add( data ) :                                                                                             // 5478
				api.row.add( data );                                                                                               // 5479
		                                                                                                                     // 5480
			if ( redraw === undefined || redraw ) {                                                                             // 5481
				api.draw();                                                                                                        // 5482
			}                                                                                                                   // 5483
		                                                                                                                     // 5484
			return rows.flatten().toArray();                                                                                    // 5485
		};                                                                                                                   // 5486
		                                                                                                                     // 5487
		                                                                                                                     // 5488
		/**                                                                                                                  // 5489
		 * This function will make DataTables recalculate the column sizes, based on the data                                // 5490
		 * contained in the table and the sizes applied to the columns (in the DOM, CSS or                                   // 5491
		 * through the sWidth parameter). This can be useful when the width of the table's                                   // 5492
		 * parent element changes (for example a window resize).                                                             // 5493
		 *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to                              // 5494
		 *  @dtopt API                                                                                                       // 5495
		 *  @deprecated Since v1.10                                                                                          // 5496
		 *                                                                                                                   // 5497
		 *  @example                                                                                                         // 5498
		 *    $(document).ready(function() {                                                                                 // 5499
		 *      var oTable = $('#example').dataTable( {                                                                      // 5500
		 *        "sScrollY": "200px",                                                                                       // 5501
		 *        "bPaginate": false                                                                                         // 5502
		 *      } );                                                                                                         // 5503
		 *                                                                                                                   // 5504
		 *      $(window).bind('resize', function () {                                                                       // 5505
		 *        oTable.fnAdjustColumnSizing();                                                                             // 5506
		 *      } );                                                                                                         // 5507
		 *    } );                                                                                                           // 5508
		 */                                                                                                                  // 5509
		this.fnAdjustColumnSizing = function ( bRedraw )                                                                     // 5510
		{                                                                                                                    // 5511
			var api = this.api( true ).columns.adjust();                                                                        // 5512
			var settings = api.settings()[0];                                                                                   // 5513
			var scroll = settings.oScroll;                                                                                      // 5514
		                                                                                                                     // 5515
			if ( bRedraw === undefined || bRedraw ) {                                                                           // 5516
				api.draw( false );                                                                                                 // 5517
			}                                                                                                                   // 5518
			else if ( scroll.sX !== "" || scroll.sY !== "" ) {                                                                  // 5519
				/* If not redrawing, but scrolling, we want to apply the new column sizes anyway */                                // 5520
				_fnScrollDraw( settings );                                                                                         // 5521
			}                                                                                                                   // 5522
		};                                                                                                                   // 5523
		                                                                                                                     // 5524
		                                                                                                                     // 5525
		/**                                                                                                                  // 5526
		 * Quickly and simply clear a table                                                                                  // 5527
		 *  @param {bool} [bRedraw=true] redraw the table or not                                                             // 5528
		 *  @dtopt API                                                                                                       // 5529
		 *  @deprecated Since v1.10                                                                                          // 5530
		 *                                                                                                                   // 5531
		 *  @example                                                                                                         // 5532
		 *    $(document).ready(function() {                                                                                 // 5533
		 *      var oTable = $('#example').dataTable();                                                                      // 5534
		 *                                                                                                                   // 5535
		 *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)                             // 5536
		 *      oTable.fnClearTable();                                                                                       // 5537
		 *    } );                                                                                                           // 5538
		 */                                                                                                                  // 5539
		this.fnClearTable = function( bRedraw )                                                                              // 5540
		{                                                                                                                    // 5541
			var api = this.api( true ).clear();                                                                                 // 5542
		                                                                                                                     // 5543
			if ( bRedraw === undefined || bRedraw ) {                                                                           // 5544
				api.draw();                                                                                                        // 5545
			}                                                                                                                   // 5546
		};                                                                                                                   // 5547
		                                                                                                                     // 5548
		                                                                                                                     // 5549
		/**                                                                                                                  // 5550
		 * The exact opposite of 'opening' a row, this function will close any rows which                                    // 5551
		 * are currently 'open'.                                                                                             // 5552
		 *  @param {node} nTr the table row to 'close'                                                                       // 5553
		 *  @returns {int} 0 on success, or 1 if failed (can't find the row)                                                 // 5554
		 *  @dtopt API                                                                                                       // 5555
		 *  @deprecated Since v1.10                                                                                          // 5556
		 *                                                                                                                   // 5557
		 *  @example                                                                                                         // 5558
		 *    $(document).ready(function() {                                                                                 // 5559
		 *      var oTable;                                                                                                  // 5560
		 *                                                                                                                   // 5561
		 *      // 'open' an information row when a row is clicked on                                                        // 5562
		 *      $('#example tbody tr').click( function () {                                                                  // 5563
		 *        if ( oTable.fnIsOpen(this) ) {                                                                             // 5564
		 *          oTable.fnClose( this );                                                                                  // 5565
		 *        } else {                                                                                                   // 5566
		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );                                               // 5567
		 *        }                                                                                                          // 5568
		 *      } );                                                                                                         // 5569
		 *                                                                                                                   // 5570
		 *      oTable = $('#example').dataTable();                                                                          // 5571
		 *    } );                                                                                                           // 5572
		 */                                                                                                                  // 5573
		this.fnClose = function( nTr )                                                                                       // 5574
		{                                                                                                                    // 5575
			this.api( true ).row( nTr ).child.hide();                                                                           // 5576
		};                                                                                                                   // 5577
		                                                                                                                     // 5578
		                                                                                                                     // 5579
		/**                                                                                                                  // 5580
		 * Remove a row for the table                                                                                        // 5581
		 *  @param {mixed} target The index of the row from aoData to be deleted, or                                         // 5582
		 *    the TR element you want to delete                                                                              // 5583
		 *  @param {function|null} [callBack] Callback function                                                              // 5584
		 *  @param {bool} [redraw=true] Redraw the table or not                                                              // 5585
		 *  @returns {array} The row that was deleted                                                                        // 5586
		 *  @dtopt API                                                                                                       // 5587
		 *  @deprecated Since v1.10                                                                                          // 5588
		 *                                                                                                                   // 5589
		 *  @example                                                                                                         // 5590
		 *    $(document).ready(function() {                                                                                 // 5591
		 *      var oTable = $('#example').dataTable();                                                                      // 5592
		 *                                                                                                                   // 5593
		 *      // Immediately remove the first row                                                                          // 5594
		 *      oTable.fnDeleteRow( 0 );                                                                                     // 5595
		 *    } );                                                                                                           // 5596
		 */                                                                                                                  // 5597
		this.fnDeleteRow = function( target, callback, redraw )                                                              // 5598
		{                                                                                                                    // 5599
			var api = this.api( true );                                                                                         // 5600
			var rows = api.rows( target );                                                                                      // 5601
			var settings = rows.settings()[0];                                                                                  // 5602
			var data = settings.aoData[ rows[0][0] ];                                                                           // 5603
		                                                                                                                     // 5604
			rows.remove();                                                                                                      // 5605
		                                                                                                                     // 5606
			if ( callback ) {                                                                                                   // 5607
				callback.call( this, settings, data );                                                                             // 5608
			}                                                                                                                   // 5609
		                                                                                                                     // 5610
			if ( redraw === undefined || redraw ) {                                                                             // 5611
				api.draw();                                                                                                        // 5612
			}                                                                                                                   // 5613
		                                                                                                                     // 5614
			return data;                                                                                                        // 5615
		};                                                                                                                   // 5616
		                                                                                                                     // 5617
		                                                                                                                     // 5618
		/**                                                                                                                  // 5619
		 * Restore the table to it's original state in the DOM by removing all of DataTables                                 // 5620
		 * enhancements, alterations to the DOM structure of the table and event listeners.                                  // 5621
		 *  @param {boolean} [remove=false] Completely remove the table from the DOM                                         // 5622
		 *  @dtopt API                                                                                                       // 5623
		 *  @deprecated Since v1.10                                                                                          // 5624
		 *                                                                                                                   // 5625
		 *  @example                                                                                                         // 5626
		 *    $(document).ready(function() {                                                                                 // 5627
		 *      // This example is fairly pointless in reality, but shows how fnDestroy can be used                          // 5628
		 *      var oTable = $('#example').dataTable();                                                                      // 5629
		 *      oTable.fnDestroy();                                                                                          // 5630
		 *    } );                                                                                                           // 5631
		 */                                                                                                                  // 5632
		this.fnDestroy = function ( remove )                                                                                 // 5633
		{                                                                                                                    // 5634
			this.api( true ).destroy( remove );                                                                                 // 5635
		};                                                                                                                   // 5636
		                                                                                                                     // 5637
		                                                                                                                     // 5638
		/**                                                                                                                  // 5639
		 * Redraw the table                                                                                                  // 5640
		 *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.                       // 5641
		 *  @dtopt API                                                                                                       // 5642
		 *  @deprecated Since v1.10                                                                                          // 5643
		 *                                                                                                                   // 5644
		 *  @example                                                                                                         // 5645
		 *    $(document).ready(function() {                                                                                 // 5646
		 *      var oTable = $('#example').dataTable();                                                                      // 5647
		 *                                                                                                                   // 5648
		 *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)                              // 5649
		 *      oTable.fnDraw();                                                                                             // 5650
		 *    } );                                                                                                           // 5651
		 */                                                                                                                  // 5652
		this.fnDraw = function( complete )                                                                                   // 5653
		{                                                                                                                    // 5654
			// Note that this isn't an exact match to the old call to _fnDraw - it takes                                        // 5655
			// into account the new data, but can hold position.                                                                // 5656
			this.api( true ).draw( complete );                                                                                  // 5657
		};                                                                                                                   // 5658
		                                                                                                                     // 5659
		                                                                                                                     // 5660
		/**                                                                                                                  // 5661
		 * Filter the input based on data                                                                                    // 5662
		 *  @param {string} sInput String to filter the table on                                                             // 5663
		 *  @param {int|null} [iColumn] Column to limit filtering to                                                         // 5664
		 *  @param {bool} [bRegex=false] Treat as regular expression or not                                                  // 5665
		 *  @param {bool} [bSmart=true] Perform smart filtering or not                                                       // 5666
		 *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)                              // 5667
		 *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)                         // 5668
		 *  @dtopt API                                                                                                       // 5669
		 *  @deprecated Since v1.10                                                                                          // 5670
		 *                                                                                                                   // 5671
		 *  @example                                                                                                         // 5672
		 *    $(document).ready(function() {                                                                                 // 5673
		 *      var oTable = $('#example').dataTable();                                                                      // 5674
		 *                                                                                                                   // 5675
		 *      // Sometime later - filter...                                                                                // 5676
		 *      oTable.fnFilter( 'test string' );                                                                            // 5677
		 *    } );                                                                                                           // 5678
		 */                                                                                                                  // 5679
		this.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )                           // 5680
		{                                                                                                                    // 5681
			var api = this.api( true );                                                                                         // 5682
		                                                                                                                     // 5683
			if ( iColumn === null || iColumn === undefined ) {                                                                  // 5684
				api.search( sInput, bRegex, bSmart, bCaseInsensitive );                                                            // 5685
			}                                                                                                                   // 5686
			else {                                                                                                              // 5687
				api.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );                                          // 5688
			}                                                                                                                   // 5689
		                                                                                                                     // 5690
			api.draw();                                                                                                         // 5691
		};                                                                                                                   // 5692
		                                                                                                                     // 5693
		                                                                                                                     // 5694
		/**                                                                                                                  // 5695
		 * Get the data for the whole table, an individual row or an individual cell based on the                            // 5696
		 * provided parameters.                                                                                              // 5697
		 *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as                                // 5698
		 *    a TR node then the data source for the whole row will be returned. If given as a                               // 5699
		 *    TD/TH cell node then iCol will be automatically calculated and the data for the                                // 5700
		 *    cell returned. If given as an integer, then this is treated as the aoData internal                             // 5701
		 *    data index for the row (see fnGetPosition) and the data for that row used.                                     // 5702
		 *  @param {int} [col] Optional column index that you want the data of.                                              // 5703
		 *  @returns {array|object|string} If mRow is undefined, then the data for all rows is                               // 5704
		 *    returned. If mRow is defined, just data for that row, and is iCol is                                           // 5705
		 *    defined, only data for the designated cell is returned.                                                        // 5706
		 *  @dtopt API                                                                                                       // 5707
		 *  @deprecated Since v1.10                                                                                          // 5708
		 *                                                                                                                   // 5709
		 *  @example                                                                                                         // 5710
		 *    // Row data                                                                                                    // 5711
		 *    $(document).ready(function() {                                                                                 // 5712
		 *      oTable = $('#example').dataTable();                                                                          // 5713
		 *                                                                                                                   // 5714
		 *      oTable.$('tr').click( function () {                                                                          // 5715
		 *        var data = oTable.fnGetData( this );                                                                       // 5716
		 *        // ... do something with the array / object of data for the row                                            // 5717
		 *      } );                                                                                                         // 5718
		 *    } );                                                                                                           // 5719
		 *                                                                                                                   // 5720
		 *  @example                                                                                                         // 5721
		 *    // Individual cell data                                                                                        // 5722
		 *    $(document).ready(function() {                                                                                 // 5723
		 *      oTable = $('#example').dataTable();                                                                          // 5724
		 *                                                                                                                   // 5725
		 *      oTable.$('td').click( function () {                                                                          // 5726
		 *        var sData = oTable.fnGetData( this );                                                                      // 5727
		 *        alert( 'The cell clicked on had the value of '+sData );                                                    // 5728
		 *      } );                                                                                                         // 5729
		 *    } );                                                                                                           // 5730
		 */                                                                                                                  // 5731
		this.fnGetData = function( src, col )                                                                                // 5732
		{                                                                                                                    // 5733
			var api = this.api( true );                                                                                         // 5734
		                                                                                                                     // 5735
			if ( src !== undefined ) {                                                                                          // 5736
				var type = src.nodeName ? src.nodeName.toLowerCase() : '';                                                         // 5737
		                                                                                                                     // 5738
				return col !== undefined || type == 'td' || type == 'th' ?                                                         // 5739
					api.cell( src, col ).data() :                                                                                     // 5740
					api.row( src ).data() || null;                                                                                    // 5741
			}                                                                                                                   // 5742
		                                                                                                                     // 5743
			return api.data().toArray();                                                                                        // 5744
		};                                                                                                                   // 5745
		                                                                                                                     // 5746
		                                                                                                                     // 5747
		/**                                                                                                                  // 5748
		 * Get an array of the TR nodes that are used in the table's body. Note that you will                                // 5749
		 * typically want to use the '$' API method in preference to this as it is more                                      // 5750
		 * flexible.                                                                                                         // 5751
		 *  @param {int} [iRow] Optional row index for the TR element you want                                               // 5752
		 *  @returns {array|node} If iRow is undefined, returns an array of all TR elements                                  // 5753
		 *    in the table's body, or iRow is defined, just the TR element requested.                                        // 5754
		 *  @dtopt API                                                                                                       // 5755
		 *  @deprecated Since v1.10                                                                                          // 5756
		 *                                                                                                                   // 5757
		 *  @example                                                                                                         // 5758
		 *    $(document).ready(function() {                                                                                 // 5759
		 *      var oTable = $('#example').dataTable();                                                                      // 5760
		 *                                                                                                                   // 5761
		 *      // Get the nodes from the table                                                                              // 5762
		 *      var nNodes = oTable.fnGetNodes( );                                                                           // 5763
		 *    } );                                                                                                           // 5764
		 */                                                                                                                  // 5765
		this.fnGetNodes = function( iRow )                                                                                   // 5766
		{                                                                                                                    // 5767
			var api = this.api( true );                                                                                         // 5768
		                                                                                                                     // 5769
			return iRow !== undefined ?                                                                                         // 5770
				api.row( iRow ).node() :                                                                                           // 5771
				api.rows().nodes().flatten().toArray();                                                                            // 5772
		};                                                                                                                   // 5773
		                                                                                                                     // 5774
		                                                                                                                     // 5775
		/**                                                                                                                  // 5776
		 * Get the array indexes of a particular cell from it's DOM element                                                  // 5777
		 * and column index including hidden columns                                                                         // 5778
		 *  @param {node} node this can either be a TR, TD or TH in the table's body                                         // 5779
		 *  @returns {int} If nNode is given as a TR, then a single index is returned, or                                    // 5780
		 *    if given as a cell, an array of [row index, column index (visible),                                            // 5781
		 *    column index (all)] is given.                                                                                  // 5782
		 *  @dtopt API                                                                                                       // 5783
		 *  @deprecated Since v1.10                                                                                          // 5784
		 *                                                                                                                   // 5785
		 *  @example                                                                                                         // 5786
		 *    $(document).ready(function() {                                                                                 // 5787
		 *      $('#example tbody td').click( function () {                                                                  // 5788
		 *        // Get the position of the current data from the node                                                      // 5789
		 *        var aPos = oTable.fnGetPosition( this );                                                                   // 5790
		 *                                                                                                                   // 5791
		 *        // Get the data array for this row                                                                         // 5792
		 *        var aData = oTable.fnGetData( aPos[0] );                                                                   // 5793
		 *                                                                                                                   // 5794
		 *        // Update the data array and return the value                                                              // 5795
		 *        aData[ aPos[1] ] = 'clicked';                                                                              // 5796
		 *        this.innerHTML = 'clicked';                                                                                // 5797
		 *      } );                                                                                                         // 5798
		 *                                                                                                                   // 5799
		 *      // Init DataTables                                                                                           // 5800
		 *      oTable = $('#example').dataTable();                                                                          // 5801
		 *    } );                                                                                                           // 5802
		 */                                                                                                                  // 5803
		this.fnGetPosition = function( node )                                                                                // 5804
		{                                                                                                                    // 5805
			var api = this.api( true );                                                                                         // 5806
			var nodeName = node.nodeName.toUpperCase();                                                                         // 5807
		                                                                                                                     // 5808
			if ( nodeName == 'TR' ) {                                                                                           // 5809
				return api.row( node ).index();                                                                                    // 5810
			}                                                                                                                   // 5811
			else if ( nodeName == 'TD' || nodeName == 'TH' ) {                                                                  // 5812
				var cell = api.cell( node ).index();                                                                               // 5813
		                                                                                                                     // 5814
				return [                                                                                                           // 5815
					cell.row,                                                                                                         // 5816
					cell.columnVisible,                                                                                               // 5817
					cell.column                                                                                                       // 5818
				];                                                                                                                 // 5819
			}                                                                                                                   // 5820
			return null;                                                                                                        // 5821
		};                                                                                                                   // 5822
		                                                                                                                     // 5823
		                                                                                                                     // 5824
		/**                                                                                                                  // 5825
		 * Check to see if a row is 'open' or not.                                                                           // 5826
		 *  @param {node} nTr the table row to check                                                                         // 5827
		 *  @returns {boolean} true if the row is currently open, false otherwise                                            // 5828
		 *  @dtopt API                                                                                                       // 5829
		 *  @deprecated Since v1.10                                                                                          // 5830
		 *                                                                                                                   // 5831
		 *  @example                                                                                                         // 5832
		 *    $(document).ready(function() {                                                                                 // 5833
		 *      var oTable;                                                                                                  // 5834
		 *                                                                                                                   // 5835
		 *      // 'open' an information row when a row is clicked on                                                        // 5836
		 *      $('#example tbody tr').click( function () {                                                                  // 5837
		 *        if ( oTable.fnIsOpen(this) ) {                                                                             // 5838
		 *          oTable.fnClose( this );                                                                                  // 5839
		 *        } else {                                                                                                   // 5840
		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );                                               // 5841
		 *        }                                                                                                          // 5842
		 *      } );                                                                                                         // 5843
		 *                                                                                                                   // 5844
		 *      oTable = $('#example').dataTable();                                                                          // 5845
		 *    } );                                                                                                           // 5846
		 */                                                                                                                  // 5847
		this.fnIsOpen = function( nTr )                                                                                      // 5848
		{                                                                                                                    // 5849
			return this.api( true ).row( nTr ).child.isShown();                                                                 // 5850
		};                                                                                                                   // 5851
		                                                                                                                     // 5852
		                                                                                                                     // 5853
		/**                                                                                                                  // 5854
		 * This function will place a new row directly after a row which is currently                                        // 5855
		 * on display on the page, with the HTML contents that is passed into the                                            // 5856
		 * function. This can be used, for example, to ask for confirmation that a                                           // 5857
		 * particular record should be deleted.                                                                              // 5858
		 *  @param {node} nTr The table row to 'open'                                                                        // 5859
		 *  @param {string|node|jQuery} mHtml The HTML to put into the row                                                   // 5860
		 *  @param {string} sClass Class to give the new TD cell                                                             // 5861
		 *  @returns {node} The row opened. Note that if the table row passed in as the                                      // 5862
		 *    first parameter, is not found in the table, this method will silently                                          // 5863
		 *    return.                                                                                                        // 5864
		 *  @dtopt API                                                                                                       // 5865
		 *  @deprecated Since v1.10                                                                                          // 5866
		 *                                                                                                                   // 5867
		 *  @example                                                                                                         // 5868
		 *    $(document).ready(function() {                                                                                 // 5869
		 *      var oTable;                                                                                                  // 5870
		 *                                                                                                                   // 5871
		 *      // 'open' an information row when a row is clicked on                                                        // 5872
		 *      $('#example tbody tr').click( function () {                                                                  // 5873
		 *        if ( oTable.fnIsOpen(this) ) {                                                                             // 5874
		 *          oTable.fnClose( this );                                                                                  // 5875
		 *        } else {                                                                                                   // 5876
		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );                                               // 5877
		 *        }                                                                                                          // 5878
		 *      } );                                                                                                         // 5879
		 *                                                                                                                   // 5880
		 *      oTable = $('#example').dataTable();                                                                          // 5881
		 *    } );                                                                                                           // 5882
		 */                                                                                                                  // 5883
		this.fnOpen = function( nTr, mHtml, sClass )                                                                         // 5884
		{                                                                                                                    // 5885
			return this.api( true )                                                                                             // 5886
				.row( nTr )                                                                                                        // 5887
				.child( mHtml, sClass )                                                                                            // 5888
				.show()                                                                                                            // 5889
				.child()[0];                                                                                                       // 5890
		};                                                                                                                   // 5891
		                                                                                                                     // 5892
		                                                                                                                     // 5893
		/**                                                                                                                  // 5894
		 * Change the pagination - provides the internal logic for pagination in a simple API                                // 5895
		 * function. With this function you can have a DataTables table go to the next,                                      // 5896
		 * previous, first or last pages.                                                                                    // 5897
		 *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"                         // 5898
		 *    or page number to jump to (integer), note that page 0 is the first page.                                       // 5899
		 *  @param {bool} [bRedraw=true] Redraw the table or not                                                             // 5900
		 *  @dtopt API                                                                                                       // 5901
		 *  @deprecated Since v1.10                                                                                          // 5902
		 *                                                                                                                   // 5903
		 *  @example                                                                                                         // 5904
		 *    $(document).ready(function() {                                                                                 // 5905
		 *      var oTable = $('#example').dataTable();                                                                      // 5906
		 *      oTable.fnPageChange( 'next' );                                                                               // 5907
		 *    } );                                                                                                           // 5908
		 */                                                                                                                  // 5909
		this.fnPageChange = function ( mAction, bRedraw )                                                                    // 5910
		{                                                                                                                    // 5911
			var api = this.api( true ).page( mAction );                                                                         // 5912
		                                                                                                                     // 5913
			if ( bRedraw === undefined || bRedraw ) {                                                                           // 5914
				api.draw(false);                                                                                                   // 5915
			}                                                                                                                   // 5916
		};                                                                                                                   // 5917
		                                                                                                                     // 5918
		                                                                                                                     // 5919
		/**                                                                                                                  // 5920
		 * Show a particular column                                                                                          // 5921
		 *  @param {int} iCol The column whose display should be changed                                                     // 5922
		 *  @param {bool} bShow Show (true) or hide (false) the column                                                       // 5923
		 *  @param {bool} [bRedraw=true] Redraw the table or not                                                             // 5924
		 *  @dtopt API                                                                                                       // 5925
		 *  @deprecated Since v1.10                                                                                          // 5926
		 *                                                                                                                   // 5927
		 *  @example                                                                                                         // 5928
		 *    $(document).ready(function() {                                                                                 // 5929
		 *      var oTable = $('#example').dataTable();                                                                      // 5930
		 *                                                                                                                   // 5931
		 *      // Hide the second column after initialisation                                                               // 5932
		 *      oTable.fnSetColumnVis( 1, false );                                                                           // 5933
		 *    } );                                                                                                           // 5934
		 */                                                                                                                  // 5935
		this.fnSetColumnVis = function ( iCol, bShow, bRedraw )                                                              // 5936
		{                                                                                                                    // 5937
			var api = this.api( true ).column( iCol ).visible( bShow );                                                         // 5938
		                                                                                                                     // 5939
			if ( bRedraw === undefined || bRedraw ) {                                                                           // 5940
				api.columns.adjust().draw();                                                                                       // 5941
			}                                                                                                                   // 5942
		};                                                                                                                   // 5943
		                                                                                                                     // 5944
		                                                                                                                     // 5945
		/**                                                                                                                  // 5946
		 * Get the settings for a particular table for external manipulation                                                 // 5947
		 *  @returns {object} DataTables settings object. See                                                                // 5948
		 *    {@link DataTable.models.oSettings}                                                                             // 5949
		 *  @dtopt API                                                                                                       // 5950
		 *  @deprecated Since v1.10                                                                                          // 5951
		 *                                                                                                                   // 5952
		 *  @example                                                                                                         // 5953
		 *    $(document).ready(function() {                                                                                 // 5954
		 *      var oTable = $('#example').dataTable();                                                                      // 5955
		 *      var oSettings = oTable.fnSettings();                                                                         // 5956
		 *                                                                                                                   // 5957
		 *      // Show an example parameter from the settings                                                               // 5958
		 *      alert( oSettings._iDisplayStart );                                                                           // 5959
		 *    } );                                                                                                           // 5960
		 */                                                                                                                  // 5961
		this.fnSettings = function()                                                                                         // 5962
		{                                                                                                                    // 5963
			return _fnSettingsFromNode( this[_ext.iApiIndex] );                                                                 // 5964
		};                                                                                                                   // 5965
		                                                                                                                     // 5966
		                                                                                                                     // 5967
		/**                                                                                                                  // 5968
		 * Sort the table by a particular column                                                                             // 5969
		 *  @param {int} iCol the data index to sort on. Note that this will not match the                                   // 5970
		 *    'display index' if you have hidden data entries                                                                // 5971
		 *  @dtopt API                                                                                                       // 5972
		 *  @deprecated Since v1.10                                                                                          // 5973
		 *                                                                                                                   // 5974
		 *  @example                                                                                                         // 5975
		 *    $(document).ready(function() {                                                                                 // 5976
		 *      var oTable = $('#example').dataTable();                                                                      // 5977
		 *                                                                                                                   // 5978
		 *      // Sort immediately with columns 0 and 1                                                                     // 5979
		 *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );                                                                   // 5980
		 *    } );                                                                                                           // 5981
		 */                                                                                                                  // 5982
		this.fnSort = function( aaSort )                                                                                     // 5983
		{                                                                                                                    // 5984
			this.api( true ).order( aaSort ).draw();                                                                            // 5985
		};                                                                                                                   // 5986
		                                                                                                                     // 5987
		                                                                                                                     // 5988
		/**                                                                                                                  // 5989
		 * Attach a sort listener to an element for a given column                                                           // 5990
		 *  @param {node} nNode the element to attach the sort listener to                                                   // 5991
		 *  @param {int} iColumn the column that a click on this node will sort on                                           // 5992
		 *  @param {function} [fnCallback] callback function when sort is run                                                // 5993
		 *  @dtopt API                                                                                                       // 5994
		 *  @deprecated Since v1.10                                                                                          // 5995
		 *                                                                                                                   // 5996
		 *  @example                                                                                                         // 5997
		 *    $(document).ready(function() {                                                                                 // 5998
		 *      var oTable = $('#example').dataTable();                                                                      // 5999
		 *                                                                                                                   // 6000
		 *      // Sort on column 1, when 'sorter' is clicked on                                                             // 6001
		 *      oTable.fnSortListener( document.getElementById('sorter'), 1 );                                               // 6002
		 *    } );                                                                                                           // 6003
		 */                                                                                                                  // 6004
		this.fnSortListener = function( nNode, iColumn, fnCallback )                                                         // 6005
		{                                                                                                                    // 6006
			this.api( true ).order.listener( nNode, iColumn, fnCallback );                                                      // 6007
		};                                                                                                                   // 6008
		                                                                                                                     // 6009
		                                                                                                                     // 6010
		/**                                                                                                                  // 6011
		 * Update a table cell or row - this method will accept either a single value to                                     // 6012
		 * update the cell with, an array of values with one element for each column or                                      // 6013
		 * an object in the same format as the original data source. The function is                                         // 6014
		 * self-referencing in order to make the multi column updates easier.                                                // 6015
		 *  @param {object|array|string} mData Data to update the cell/row with                                              // 6016
		 *  @param {node|int} mRow TR element you want to update or the aoData index                                         // 6017
		 *  @param {int} [iColumn] The column to update, give as null or undefined to                                        // 6018
		 *    update a whole row.                                                                                            // 6019
		 *  @param {bool} [bRedraw=true] Redraw the table or not                                                             // 6020
		 *  @param {bool} [bAction=true] Perform pre-draw actions or not                                                     // 6021
		 *  @returns {int} 0 on success, 1 on error                                                                          // 6022
		 *  @dtopt API                                                                                                       // 6023
		 *  @deprecated Since v1.10                                                                                          // 6024
		 *                                                                                                                   // 6025
		 *  @example                                                                                                         // 6026
		 *    $(document).ready(function() {                                                                                 // 6027
		 *      var oTable = $('#example').dataTable();                                                                      // 6028
		 *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell                                                    // 6029
		 *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row                                       // 6030
		 *    } );                                                                                                           // 6031
		 */                                                                                                                  // 6032
		this.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )                                                   // 6033
		{                                                                                                                    // 6034
			var api = this.api( true );                                                                                         // 6035
		                                                                                                                     // 6036
			if ( iColumn === undefined || iColumn === null ) {                                                                  // 6037
				api.row( mRow ).data( mData );                                                                                     // 6038
			}                                                                                                                   // 6039
			else {                                                                                                              // 6040
				api.cell( mRow, iColumn ).data( mData );                                                                           // 6041
			}                                                                                                                   // 6042
		                                                                                                                     // 6043
			if ( bAction === undefined || bAction ) {                                                                           // 6044
				api.columns.adjust();                                                                                              // 6045
			}                                                                                                                   // 6046
		                                                                                                                     // 6047
			if ( bRedraw === undefined || bRedraw ) {                                                                           // 6048
				api.draw();                                                                                                        // 6049
			}                                                                                                                   // 6050
			return 0;                                                                                                           // 6051
		};                                                                                                                   // 6052
		                                                                                                                     // 6053
		                                                                                                                     // 6054
		/**                                                                                                                  // 6055
		 * Provide a common method for plug-ins to check the version of DataTables being used, in order                      // 6056
		 * to ensure compatibility.                                                                                          // 6057
		 *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the                       // 6058
		 *    formats "X" and "X.Y" are also acceptable.                                                                     // 6059
		 *  @returns {boolean} true if this version of DataTables is greater or equal to the required                        // 6060
		 *    version, or false if this version of DataTales is not suitable                                                 // 6061
		 *  @method                                                                                                          // 6062
		 *  @dtopt API                                                                                                       // 6063
		 *  @deprecated Since v1.10                                                                                          // 6064
		 *                                                                                                                   // 6065
		 *  @example                                                                                                         // 6066
		 *    $(document).ready(function() {                                                                                 // 6067
		 *      var oTable = $('#example').dataTable();                                                                      // 6068
		 *      alert( oTable.fnVersionCheck( '1.9.0' ) );                                                                   // 6069
		 *    } );                                                                                                           // 6070
		 */                                                                                                                  // 6071
		this.fnVersionCheck = _ext.fnVersionCheck;                                                                           // 6072
		                                                                                                                     // 6073
                                                                                                                       // 6074
		var _that = this;                                                                                                    // 6075
		var emptyInit = options === undefined;                                                                               // 6076
		var len = this.length;                                                                                               // 6077
                                                                                                                       // 6078
		if ( emptyInit ) {                                                                                                   // 6079
			options = {};                                                                                                       // 6080
		}                                                                                                                    // 6081
                                                                                                                       // 6082
		this.oApi = this.internal = _ext.internal;                                                                           // 6083
                                                                                                                       // 6084
		// Extend with old style plug-in API methods                                                                         // 6085
		for ( var fn in DataTable.ext.internal ) {                                                                           // 6086
			if ( fn ) {                                                                                                         // 6087
				this[fn] = _fnExternApiFunc(fn);                                                                                   // 6088
			}                                                                                                                   // 6089
		}                                                                                                                    // 6090
                                                                                                                       // 6091
		this.each(function() {                                                                                               // 6092
			// For each initialisation we want to give it a clean initialisation                                                // 6093
			// object that can be bashed around                                                                                 // 6094
			var o = {};                                                                                                         // 6095
			var oInit = len > 1 ? // optimisation for single table case                                                         // 6096
				_fnExtend( o, options, true ) :                                                                                    // 6097
				options;                                                                                                           // 6098
                                                                                                                       // 6099
			/*global oInit,_that,emptyInit*/                                                                                    // 6100
			var i=0, iLen, j, jLen, k, kLen;                                                                                    // 6101
			var sId = this.getAttribute( 'id' );                                                                                // 6102
			var bInitHandedOff = false;                                                                                         // 6103
			var defaults = DataTable.defaults;                                                                                  // 6104
			var $this = $(this);                                                                                                // 6105
			                                                                                                                    // 6106
			                                                                                                                    // 6107
			/* Sanity check */                                                                                                  // 6108
			if ( this.nodeName.toLowerCase() != 'table' )                                                                       // 6109
			{                                                                                                                   // 6110
				_fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );                                         // 6111
				return;                                                                                                            // 6112
			}                                                                                                                   // 6113
			                                                                                                                    // 6114
			/* Backwards compatibility for the defaults */                                                                      // 6115
			_fnCompatOpts( defaults );                                                                                          // 6116
			_fnCompatCols( defaults.column );                                                                                   // 6117
			                                                                                                                    // 6118
			/* Convert the camel-case defaults to Hungarian */                                                                  // 6119
			_fnCamelToHungarian( defaults, defaults, true );                                                                    // 6120
			_fnCamelToHungarian( defaults.column, defaults.column, true );                                                      // 6121
			                                                                                                                    // 6122
			/* Setting up the initialisation object */                                                                          // 6123
			_fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ) );                                                   // 6124
			                                                                                                                    // 6125
			                                                                                                                    // 6126
			                                                                                                                    // 6127
			/* Check to see if we are re-initialising a table */                                                                // 6128
			var allSettings = DataTable.settings;                                                                               // 6129
			for ( i=0, iLen=allSettings.length ; i<iLen ; i++ )                                                                 // 6130
			{                                                                                                                   // 6131
				var s = allSettings[i];                                                                                            // 6132
			                                                                                                                    // 6133
				/* Base check on table node */                                                                                     // 6134
				if ( s.nTable == this || s.nTHead.parentNode == this || (s.nTFoot && s.nTFoot.parentNode == this) )                // 6135
				{                                                                                                                  // 6136
					var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;                             // 6137
					var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;                                 // 6138
			                                                                                                                    // 6139
					if ( emptyInit || bRetrieve )                                                                                     // 6140
					{                                                                                                                 // 6141
						return s.oInstance;                                                                                              // 6142
					}                                                                                                                 // 6143
					else if ( bDestroy )                                                                                              // 6144
					{                                                                                                                 // 6145
						s.oInstance.fnDestroy();                                                                                         // 6146
						break;                                                                                                           // 6147
					}                                                                                                                 // 6148
					else                                                                                                              // 6149
					{                                                                                                                 // 6150
						_fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );                                                              // 6151
						return;                                                                                                          // 6152
					}                                                                                                                 // 6153
				}                                                                                                                  // 6154
			                                                                                                                    // 6155
				/* If the element we are initialising has the same ID as a table which was previously                              // 6156
				 * initialised, but the table nodes don't match (from before) then we destroy the old                              // 6157
				 * instance by simply deleting it. This is under the assumption that the table has been                            // 6158
				 * destroyed by other methods. Anyone using non-id selectors will need to do this manually                         // 6159
				 */                                                                                                                // 6160
				if ( s.sTableId == this.id )                                                                                       // 6161
				{                                                                                                                  // 6162
					allSettings.splice( i, 1 );                                                                                       // 6163
					break;                                                                                                            // 6164
				}                                                                                                                  // 6165
			}                                                                                                                   // 6166
			                                                                                                                    // 6167
			/* Ensure the table has an ID - required for accessibility */                                                       // 6168
			if ( sId === null || sId === "" )                                                                                   // 6169
			{                                                                                                                   // 6170
				sId = "DataTables_Table_"+(DataTable.ext._unique++);                                                               // 6171
				this.id = sId;                                                                                                     // 6172
			}                                                                                                                   // 6173
			                                                                                                                    // 6174
			/* Create the settings object for this table and set some of the default parameters */                              // 6175
			var oSettings = $.extend( true, {}, DataTable.models.oSettings, {                                                   // 6176
				"sDestroyWidth": $this[0].style.width,                                                                             // 6177
				"sInstance":     sId,                                                                                              // 6178
				"sTableId":      sId                                                                                               // 6179
			} );                                                                                                                // 6180
			oSettings.nTable = this;                                                                                            // 6181
			oSettings.oApi   = _that.internal;                                                                                  // 6182
			oSettings.oInit  = oInit;                                                                                           // 6183
			                                                                                                                    // 6184
			allSettings.push( oSettings );                                                                                      // 6185
			                                                                                                                    // 6186
			// Need to add the instance after the instance after the settings object has been added                             // 6187
			// to the settings array, so we can self reference the table instance if more than one                              // 6188
			oSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();                                               // 6189
			                                                                                                                    // 6190
			// Backwards compatibility, before we apply all the defaults                                                        // 6191
			_fnCompatOpts( oInit );                                                                                             // 6192
			                                                                                                                    // 6193
			if ( oInit.oLanguage )                                                                                              // 6194
			{                                                                                                                   // 6195
				_fnLanguageCompat( oInit.oLanguage );                                                                              // 6196
			}                                                                                                                   // 6197
			                                                                                                                    // 6198
			// If the length menu is given, but the init display length is not, use the length menu                             // 6199
			if ( oInit.aLengthMenu && ! oInit.iDisplayLength )                                                                  // 6200
			{                                                                                                                   // 6201
				oInit.iDisplayLength = $.isArray( oInit.aLengthMenu[0] ) ?                                                         // 6202
					oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];                                                                   // 6203
			}                                                                                                                   // 6204
			                                                                                                                    // 6205
			// Apply the defaults and init options to make a single init object will all                                        // 6206
			// options defined from defaults and instance options.                                                              // 6207
			oInit = _fnExtend( $.extend( true, {}, defaults ), oInit );                                                         // 6208
			                                                                                                                    // 6209
			                                                                                                                    // 6210
			// Map the initialisation options onto the settings object                                                          // 6211
			_fnMap( oSettings.oFeatures, oInit, [                                                                               // 6212
				"bPaginate",                                                                                                       // 6213
				"bLengthChange",                                                                                                   // 6214
				"bFilter",                                                                                                         // 6215
				"bSort",                                                                                                           // 6216
				"bSortMulti",                                                                                                      // 6217
				"bInfo",                                                                                                           // 6218
				"bProcessing",                                                                                                     // 6219
				"bAutoWidth",                                                                                                      // 6220
				"bSortClasses",                                                                                                    // 6221
				"bServerSide",                                                                                                     // 6222
				"bDeferRender"                                                                                                     // 6223
			] );                                                                                                                // 6224
			_fnMap( oSettings, oInit, [                                                                                         // 6225
				"asStripeClasses",                                                                                                 // 6226
				"ajax",                                                                                                            // 6227
				"fnServerData",                                                                                                    // 6228
				"fnFormatNumber",                                                                                                  // 6229
				"sServerMethod",                                                                                                   // 6230
				"aaSorting",                                                                                                       // 6231
				"aaSortingFixed",                                                                                                  // 6232
				"aLengthMenu",                                                                                                     // 6233
				"sPaginationType",                                                                                                 // 6234
				"sAjaxSource",                                                                                                     // 6235
				"sAjaxDataProp",                                                                                                   // 6236
				"iStateDuration",                                                                                                  // 6237
				"sDom",                                                                                                            // 6238
				"bSortCellsTop",                                                                                                   // 6239
				"iTabIndex",                                                                                                       // 6240
				"fnStateLoadCallback",                                                                                             // 6241
				"fnStateSaveCallback",                                                                                             // 6242
				"renderer",                                                                                                        // 6243
				"searchDelay",                                                                                                     // 6244
				[ "iCookieDuration", "iStateDuration" ], // backwards compat                                                       // 6245
				[ "oSearch", "oPreviousSearch" ],                                                                                  // 6246
				[ "aoSearchCols", "aoPreSearchCols" ],                                                                             // 6247
				[ "iDisplayLength", "_iDisplayLength" ],                                                                           // 6248
				[ "bJQueryUI", "bJUI" ]                                                                                            // 6249
			] );                                                                                                                // 6250
			_fnMap( oSettings.oScroll, oInit, [                                                                                 // 6251
				[ "sScrollX", "sX" ],                                                                                              // 6252
				[ "sScrollXInner", "sXInner" ],                                                                                    // 6253
				[ "sScrollY", "sY" ],                                                                                              // 6254
				[ "bScrollCollapse", "bCollapse" ]                                                                                 // 6255
			] );                                                                                                                // 6256
			_fnMap( oSettings.oLanguage, oInit, "fnInfoCallback" );                                                             // 6257
			                                                                                                                    // 6258
			/* Callback functions which are array driven */                                                                     // 6259
			_fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );                             // 6260
			_fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );                             // 6261
			_fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );                             // 6262
			_fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );                             // 6263
			_fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );                             // 6264
			_fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );                             // 6265
			_fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );                             // 6266
			_fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );                             // 6267
			_fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );                             // 6268
			_fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );                             // 6269
			_fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );                             // 6270
			                                                                                                                    // 6271
			var oClasses = oSettings.oClasses;                                                                                  // 6272
			                                                                                                                    // 6273
			// @todo Remove in 1.11                                                                                             // 6274
			if ( oInit.bJQueryUI )                                                                                              // 6275
			{                                                                                                                   // 6276
				/* Use the JUI classes object for display. You could clone the oStdClasses object if                               // 6277
				 * you want to have multiple tables with multiple independent classes                                              // 6278
				 */                                                                                                                // 6279
				$.extend( oClasses, DataTable.ext.oJUIClasses, oInit.oClasses );                                                   // 6280
			                                                                                                                    // 6281
				if ( oInit.sDom === defaults.sDom && defaults.sDom === "lfrtip" )                                                  // 6282
				{                                                                                                                  // 6283
					/* Set the DOM to use a layout suitable for jQuery UI's theming */                                                // 6284
					oSettings.sDom = '<"H"lfr>t<"F"ip>';                                                                              // 6285
				}                                                                                                                  // 6286
			                                                                                                                    // 6287
				if ( ! oSettings.renderer ) {                                                                                      // 6288
					oSettings.renderer = 'jqueryui';                                                                                  // 6289
				}                                                                                                                  // 6290
				else if ( $.isPlainObject( oSettings.renderer ) && ! oSettings.renderer.header ) {                                 // 6291
					oSettings.renderer.header = 'jqueryui';                                                                           // 6292
				}                                                                                                                  // 6293
			}                                                                                                                   // 6294
			else                                                                                                                // 6295
			{                                                                                                                   // 6296
				$.extend( oClasses, DataTable.ext.classes, oInit.oClasses );                                                       // 6297
			}                                                                                                                   // 6298
			$this.addClass( oClasses.sTable );                                                                                  // 6299
			                                                                                                                    // 6300
			/* Calculate the scroll bar width and cache it for use later on */                                                  // 6301
			if ( oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "" )                                                   // 6302
			{                                                                                                                   // 6303
				oSettings.oScroll.iBarWidth = _fnScrollBarWidth();                                                                 // 6304
			}                                                                                                                   // 6305
			if ( oSettings.oScroll.sX === true ) { // Easy initialisation of x-scrolling                                        // 6306
				oSettings.oScroll.sX = '100%';                                                                                     // 6307
			}                                                                                                                   // 6308
			                                                                                                                    // 6309
			if ( oSettings.iInitDisplayStart === undefined )                                                                    // 6310
			{                                                                                                                   // 6311
				/* Display start point, taking into account the save saving */                                                     // 6312
				oSettings.iInitDisplayStart = oInit.iDisplayStart;                                                                 // 6313
				oSettings._iDisplayStart = oInit.iDisplayStart;                                                                    // 6314
			}                                                                                                                   // 6315
			                                                                                                                    // 6316
			if ( oInit.iDeferLoading !== null )                                                                                 // 6317
			{                                                                                                                   // 6318
				oSettings.bDeferLoading = true;                                                                                    // 6319
				var tmp = $.isArray( oInit.iDeferLoading );                                                                        // 6320
				oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;                                   // 6321
				oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;                                     // 6322
			}                                                                                                                   // 6323
			                                                                                                                    // 6324
			/* Language definitions */                                                                                          // 6325
			var oLanguage = oSettings.oLanguage;                                                                                // 6326
			$.extend( true, oLanguage, oInit.oLanguage );                                                                       // 6327
			                                                                                                                    // 6328
			if ( oLanguage.sUrl !== "" )                                                                                        // 6329
			{                                                                                                                   // 6330
				/* Get the language definitions from a file - because this Ajax call makes the language                            // 6331
				 * get async to the remainder of this function we use bInitHandedOff to indicate that                              // 6332
				 * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor                           // 6333
				 */                                                                                                                // 6334
				$.ajax( {                                                                                                          // 6335
					dataType: 'json',                                                                                                 // 6336
					url: oLanguage.sUrl,                                                                                              // 6337
					success: function ( json ) {                                                                                      // 6338
						_fnLanguageCompat( json );                                                                                       // 6339
						_fnCamelToHungarian( defaults.oLanguage, json );                                                                 // 6340
						$.extend( true, oLanguage, json );                                                                               // 6341
						_fnInitialise( oSettings );                                                                                      // 6342
					},                                                                                                                // 6343
					error: function () {                                                                                              // 6344
						// Error occurred loading language file, continue on as best we can                                              // 6345
						_fnInitialise( oSettings );                                                                                      // 6346
					}                                                                                                                 // 6347
				} );                                                                                                               // 6348
				bInitHandedOff = true;                                                                                             // 6349
			}                                                                                                                   // 6350
			                                                                                                                    // 6351
			/*                                                                                                                  // 6352
			 * Stripes                                                                                                          // 6353
			 */                                                                                                                 // 6354
			if ( oInit.asStripeClasses === null )                                                                               // 6355
			{                                                                                                                   // 6356
				oSettings.asStripeClasses =[                                                                                       // 6357
					oClasses.sStripeOdd,                                                                                              // 6358
					oClasses.sStripeEven                                                                                              // 6359
				];                                                                                                                 // 6360
			}                                                                                                                   // 6361
			                                                                                                                    // 6362
			/* Remove row stripe classes if they are already on the table row */                                                // 6363
			var stripeClasses = oSettings.asStripeClasses;                                                                      // 6364
			var rowOne = $this.children('tbody').find('tr').eq(0);                                                              // 6365
			if ( $.inArray( true, $.map( stripeClasses, function(el, i) {                                                       // 6366
				return rowOne.hasClass(el);                                                                                        // 6367
			} ) ) !== -1 ) {                                                                                                    // 6368
				$('tbody tr', this).removeClass( stripeClasses.join(' ') );                                                        // 6369
				oSettings.asDestroyStripes = stripeClasses.slice();                                                                // 6370
			}                                                                                                                   // 6371
			                                                                                                                    // 6372
			/*                                                                                                                  // 6373
			 * Columns                                                                                                          // 6374
			 * See if we should load columns automatically or use defined ones                                                  // 6375
			 */                                                                                                                 // 6376
			var anThs = [];                                                                                                     // 6377
			var aoColumnsInit;                                                                                                  // 6378
			var nThead = this.getElementsByTagName('thead');                                                                    // 6379
			if ( nThead.length !== 0 )                                                                                          // 6380
			{                                                                                                                   // 6381
				_fnDetectHeader( oSettings.aoHeader, nThead[0] );                                                                  // 6382
				anThs = _fnGetUniqueThs( oSettings );                                                                              // 6383
			}                                                                                                                   // 6384
			                                                                                                                    // 6385
			/* If not given a column array, generate one with nulls */                                                          // 6386
			if ( oInit.aoColumns === null )                                                                                     // 6387
			{                                                                                                                   // 6388
				aoColumnsInit = [];                                                                                                // 6389
				for ( i=0, iLen=anThs.length ; i<iLen ; i++ )                                                                      // 6390
				{                                                                                                                  // 6391
					aoColumnsInit.push( null );                                                                                       // 6392
				}                                                                                                                  // 6393
			}                                                                                                                   // 6394
			else                                                                                                                // 6395
			{                                                                                                                   // 6396
				aoColumnsInit = oInit.aoColumns;                                                                                   // 6397
			}                                                                                                                   // 6398
			                                                                                                                    // 6399
			/* Add the columns */                                                                                               // 6400
			for ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )                                                               // 6401
			{                                                                                                                   // 6402
				_fnAddColumn( oSettings, anThs ? anThs[i] : null );                                                                // 6403
			}                                                                                                                   // 6404
			                                                                                                                    // 6405
			/* Apply the column definitions */                                                                                  // 6406
			_fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {                           // 6407
				_fnColumnOptions( oSettings, iCol, oDef );                                                                         // 6408
			} );                                                                                                                // 6409
			                                                                                                                    // 6410
			/* HTML5 attribute detection - build an mData object automatically if the                                           // 6411
			 * attributes are found                                                                                             // 6412
			 */                                                                                                                 // 6413
			if ( rowOne.length ) {                                                                                              // 6414
				var a = function ( cell, name ) {                                                                                  // 6415
					return cell.getAttribute( 'data-'+name ) !== null ? name : null;                                                  // 6416
				};                                                                                                                 // 6417
			                                                                                                                    // 6418
				$.each( _fnGetRowElements( oSettings, rowOne[0] ).cells, function (i, cell) {                                      // 6419
					var col = oSettings.aoColumns[i];                                                                                 // 6420
			                                                                                                                    // 6421
					if ( col.mData === i ) {                                                                                          // 6422
						var sort = a( cell, 'sort' ) || a( cell, 'order' );                                                              // 6423
						var filter = a( cell, 'filter' ) || a( cell, 'search' );                                                         // 6424
			                                                                                                                    // 6425
						if ( sort !== null || filter !== null ) {                                                                        // 6426
							col.mData = {                                                                                                   // 6427
								_:      i+'.display',                                                                                          // 6428
								sort:   sort !== null   ? i+'.@data-'+sort   : undefined,                                                      // 6429
								type:   sort !== null   ? i+'.@data-'+sort   : undefined,                                                      // 6430
								filter: filter !== null ? i+'.@data-'+filter : undefined                                                       // 6431
							};                                                                                                              // 6432
			                                                                                                                    // 6433
							_fnColumnOptions( oSettings, i );                                                                               // 6434
						}                                                                                                                // 6435
					}                                                                                                                 // 6436
				} );                                                                                                               // 6437
			}                                                                                                                   // 6438
			                                                                                                                    // 6439
			var features = oSettings.oFeatures;                                                                                 // 6440
			                                                                                                                    // 6441
			/* Must be done after everything which can be overridden by the state saving! */                                    // 6442
			if ( oInit.bStateSave )                                                                                             // 6443
			{                                                                                                                   // 6444
				features.bStateSave = true;                                                                                        // 6445
				_fnLoadState( oSettings, oInit );                                                                                  // 6446
				_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );                                         // 6447
			}                                                                                                                   // 6448
			                                                                                                                    // 6449
			                                                                                                                    // 6450
			/*                                                                                                                  // 6451
			 * Sorting                                                                                                          // 6452
			 * @todo For modularisation (1.11) this needs to do into a sort start up handler                                    // 6453
			 */                                                                                                                 // 6454
			                                                                                                                    // 6455
			// If aaSorting is not defined, then we use the first indicator in asSorting                                        // 6456
			// in case that has been altered, so the default sort reflects that option                                          // 6457
			if ( oInit.aaSorting === undefined )                                                                                // 6458
			{                                                                                                                   // 6459
				var sorting = oSettings.aaSorting;                                                                                 // 6460
				for ( i=0, iLen=sorting.length ; i<iLen ; i++ )                                                                    // 6461
				{                                                                                                                  // 6462
					sorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];                                                            // 6463
				}                                                                                                                  // 6464
			}                                                                                                                   // 6465
			                                                                                                                    // 6466
			/* Do a first pass on the sorting classes (allows any size changes to be taken into                                 // 6467
			 * account, and also will apply sorting disabled classes if disabled                                                // 6468
			 */                                                                                                                 // 6469
			_fnSortingClasses( oSettings );                                                                                     // 6470
			                                                                                                                    // 6471
			if ( features.bSort )                                                                                               // 6472
			{                                                                                                                   // 6473
				_fnCallbackReg( oSettings, 'aoDrawCallback', function () {                                                         // 6474
					if ( oSettings.bSorted ) {                                                                                        // 6475
						var aSort = _fnSortFlatten( oSettings );                                                                         // 6476
						var sortedColumns = {};                                                                                          // 6477
			                                                                                                                    // 6478
						$.each( aSort, function (i, val) {                                                                               // 6479
							sortedColumns[ val.src ] = val.dir;                                                                             // 6480
						} );                                                                                                             // 6481
			                                                                                                                    // 6482
						_fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );                                  // 6483
						_fnSortAria( oSettings );                                                                                        // 6484
					}                                                                                                                 // 6485
				} );                                                                                                               // 6486
			}                                                                                                                   // 6487
			                                                                                                                    // 6488
			_fnCallbackReg( oSettings, 'aoDrawCallback', function () {                                                          // 6489
				if ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {                        // 6490
					_fnSortingClasses( oSettings );                                                                                   // 6491
				}                                                                                                                  // 6492
			}, 'sc' );                                                                                                          // 6493
			                                                                                                                    // 6494
			                                                                                                                    // 6495
			/*                                                                                                                  // 6496
			 * Final init                                                                                                       // 6497
			 * Cache the header, body and footer as required, creating them if needed                                           // 6498
			 */                                                                                                                 // 6499
			                                                                                                                    // 6500
			/* Browser support detection */                                                                                     // 6501
			_fnBrowserDetect( oSettings );                                                                                      // 6502
			                                                                                                                    // 6503
			// Work around for Webkit bug 83867 - store the caption-side before removing from doc                               // 6504
			var captions = $this.children('caption').each( function () {                                                        // 6505
				this._captionSide = $this.css('caption-side');                                                                     // 6506
			} );                                                                                                                // 6507
			                                                                                                                    // 6508
			var thead = $this.children('thead');                                                                                // 6509
			if ( thead.length === 0 )                                                                                           // 6510
			{                                                                                                                   // 6511
				thead = $('<thead/>').appendTo(this);                                                                              // 6512
			}                                                                                                                   // 6513
			oSettings.nTHead = thead[0];                                                                                        // 6514
			                                                                                                                    // 6515
			var tbody = $this.children('tbody');                                                                                // 6516
			if ( tbody.length === 0 )                                                                                           // 6517
			{                                                                                                                   // 6518
				tbody = $('<tbody/>').appendTo(this);                                                                              // 6519
			}                                                                                                                   // 6520
			oSettings.nTBody = tbody[0];                                                                                        // 6521
			                                                                                                                    // 6522
			var tfoot = $this.children('tfoot');                                                                                // 6523
			if ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "") )    // 6524
			{                                                                                                                   // 6525
				// If we are a scrolling table, and no footer has been given, then we need to create                               // 6526
				// a tfoot element for the caption element to be appended to                                                       // 6527
				tfoot = $('<tfoot/>').appendTo(this);                                                                              // 6528
			}                                                                                                                   // 6529
			                                                                                                                    // 6530
			if ( tfoot.length === 0 || tfoot.children().length === 0 ) {                                                        // 6531
				$this.addClass( oClasses.sNoFooter );                                                                              // 6532
			}                                                                                                                   // 6533
			else if ( tfoot.length > 0 ) {                                                                                      // 6534
				oSettings.nTFoot = tfoot[0];                                                                                       // 6535
				_fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );                                                           // 6536
			}                                                                                                                   // 6537
			                                                                                                                    // 6538
			/* Check if there is data passing into the constructor */                                                           // 6539
			if ( oInit.aaData )                                                                                                 // 6540
			{                                                                                                                   // 6541
				for ( i=0 ; i<oInit.aaData.length ; i++ )                                                                          // 6542
				{                                                                                                                  // 6543
					_fnAddData( oSettings, oInit.aaData[ i ] );                                                                       // 6544
				}                                                                                                                  // 6545
			}                                                                                                                   // 6546
			else if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' )                                          // 6547
			{                                                                                                                   // 6548
				/* Grab the data from the page - only do this when deferred loading or no Ajax                                     // 6549
				 * source since there is no point in reading the DOM data if we are then going                                     // 6550
				 * to replace it with Ajax data                                                                                    // 6551
				 */                                                                                                                // 6552
				_fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );                                                         // 6553
			}                                                                                                                   // 6554
			                                                                                                                    // 6555
			/* Copy the data index array */                                                                                     // 6556
			oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();                                                            // 6557
			                                                                                                                    // 6558
			/* Initialisation complete - table can be drawn */                                                                  // 6559
			oSettings.bInitialised = true;                                                                                      // 6560
			                                                                                                                    // 6561
			/* Check if we need to initialise the table (it might not have been handed off to the                               // 6562
			 * language processor)                                                                                              // 6563
			 */                                                                                                                 // 6564
			if ( bInitHandedOff === false )                                                                                     // 6565
			{                                                                                                                   // 6566
				_fnInitialise( oSettings );                                                                                        // 6567
			}                                                                                                                   // 6568
		} );                                                                                                                 // 6569
		_that = null;                                                                                                        // 6570
		return this;                                                                                                         // 6571
	};                                                                                                                    // 6572
                                                                                                                       // 6573
	                                                                                                                      // 6574
	                                                                                                                      // 6575
	/**                                                                                                                   // 6576
	 * Computed structure of the DataTables API, defined by the options passed to                                         // 6577
	 * `DataTable.Api.register()` when building the API.                                                                  // 6578
	 *                                                                                                                    // 6579
	 * The structure is built in order to speed creation and extension of the Api                                         // 6580
	 * objects since the extensions are effectively pre-parsed.                                                           // 6581
	 *                                                                                                                    // 6582
	 * The array is an array of objects with the following structure, where this                                          // 6583
	 * base array represents the Api prototype base:                                                                      // 6584
	 *                                                                                                                    // 6585
	 *     [                                                                                                              // 6586
	 *       {                                                                                                            // 6587
	 *         name:      'data'                -- string   - Property name                                               // 6588
	 *         val:       function () {},       -- function - Api method (or undefined if just an object                  // 6589
	 *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
	 *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property      // 6591
	 *       },                                                                                                           // 6592
	 *       {                                                                                                            // 6593
	 *         name:     'row'                                                                                            // 6594
	 *         val:       {},                                                                                             // 6595
	 *         methodExt: [ ... ],                                                                                        // 6596
	 *         propExt:   [                                                                                               // 6597
	 *           {                                                                                                        // 6598
	 *             name:      'data'                                                                                      // 6599
	 *             val:       function () {},                                                                             // 6600
	 *             methodExt: [ ... ],                                                                                    // 6601
	 *             propExt:   [ ... ]                                                                                     // 6602
	 *           },                                                                                                       // 6603
	 *           ...                                                                                                      // 6604
	 *         ]                                                                                                          // 6605
	 *       }                                                                                                            // 6606
	 *     ]                                                                                                              // 6607
	 *                                                                                                                    // 6608
	 * @type {Array}                                                                                                      // 6609
	 * @ignore                                                                                                            // 6610
	 */                                                                                                                   // 6611
	var __apiStruct = [];                                                                                                 // 6612
	                                                                                                                      // 6613
	                                                                                                                      // 6614
	/**                                                                                                                   // 6615
	 * `Array.prototype` reference.                                                                                       // 6616
	 *                                                                                                                    // 6617
	 * @type object                                                                                                       // 6618
	 * @ignore                                                                                                            // 6619
	 */                                                                                                                   // 6620
	var __arrayProto = Array.prototype;                                                                                   // 6621
	                                                                                                                      // 6622
	                                                                                                                      // 6623
	/**                                                                                                                   // 6624
	 * Abstraction for `context` parameter of the `Api` constructor to allow it to                                        // 6625
	 * take several different forms for ease of use.                                                                      // 6626
	 *                                                                                                                    // 6627
	 * Each of the input parameter types will be converted to a DataTables settings                                       // 6628
	 * object where possible.                                                                                             // 6629
	 *                                                                                                                    // 6630
	 * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one                                         // 6631
	 *   of:                                                                                                              // 6632
	 *                                                                                                                    // 6633
	 *   * `string` - jQuery selector. Any DataTables' matching the given selector                                        // 6634
	 *     with be found and used.                                                                                        // 6635
	 *   * `node` - `TABLE` node which has already been formed into a DataTable.                                          // 6636
	 *   * `jQuery` - A jQuery object of `TABLE` nodes.                                                                   // 6637
	 *   * `object` - DataTables settings object                                                                          // 6638
	 *   * `DataTables.Api` - API instance                                                                                // 6639
	 * @return {array|null} Matching DataTables settings objects. `null` or                                               // 6640
	 *   `undefined` is returned if no matching DataTable is found.                                                       // 6641
	 * @ignore                                                                                                            // 6642
	 */                                                                                                                   // 6643
	var _toSettings = function ( mixed )                                                                                  // 6644
	{                                                                                                                     // 6645
		var idx, jq;                                                                                                         // 6646
		var settings = DataTable.settings;                                                                                   // 6647
		var tables = $.map( settings, function (el, i) {                                                                     // 6648
			return el.nTable;                                                                                                   // 6649
		} );                                                                                                                 // 6650
	                                                                                                                      // 6651
		if ( ! mixed ) {                                                                                                     // 6652
			return [];                                                                                                          // 6653
		}                                                                                                                    // 6654
		else if ( mixed.nTable && mixed.oApi ) {                                                                             // 6655
			// DataTables settings object                                                                                       // 6656
			return [ mixed ];                                                                                                   // 6657
		}                                                                                                                    // 6658
		else if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {                                             // 6659
			// Table node                                                                                                       // 6660
			idx = $.inArray( mixed, tables );                                                                                   // 6661
			return idx !== -1 ? [ settings[idx] ] : null;                                                                       // 6662
		}                                                                                                                    // 6663
		else if ( mixed && typeof mixed.settings === 'function' ) {                                                          // 6664
			return mixed.settings().toArray();                                                                                  // 6665
		}                                                                                                                    // 6666
		else if ( typeof mixed === 'string' ) {                                                                              // 6667
			// jQuery selector                                                                                                  // 6668
			jq = $(mixed);                                                                                                      // 6669
		}                                                                                                                    // 6670
		else if ( mixed instanceof $ ) {                                                                                     // 6671
			// jQuery object (also DataTables instance)                                                                         // 6672
			jq = mixed;                                                                                                         // 6673
		}                                                                                                                    // 6674
	                                                                                                                      // 6675
		if ( jq ) {                                                                                                          // 6676
			return jq.map( function(i) {                                                                                        // 6677
				idx = $.inArray( this, tables );                                                                                   // 6678
				return idx !== -1 ? settings[idx] : null;                                                                          // 6679
			} ).toArray();                                                                                                      // 6680
		}                                                                                                                    // 6681
	};                                                                                                                    // 6682
	                                                                                                                      // 6683
	                                                                                                                      // 6684
	/**                                                                                                                   // 6685
	 * DataTables API class - used to control and interface with  one or more                                             // 6686
	 * DataTables enhanced tables.                                                                                        // 6687
	 *                                                                                                                    // 6688
	 * The API class is heavily based on jQuery, presenting a chainable interface                                         // 6689
	 * that you can use to interact with tables. Each instance of the API class has                                       // 6690
	 * a "context" - i.e. the tables that it will operate on. This could be a single                                      // 6691
	 * table, all tables on a page or a sub-set thereof.                                                                  // 6692
	 *                                                                                                                    // 6693
	 * Additionally the API is designed to allow you to easily work with the data in                                      // 6694
	 * the tables, retrieving and manipulating it as required. This is done by                                            // 6695
	 * presenting the API class as an array like interface. The contents of the                                           // 6696
	 * array depend upon the actions requested by each method (for example                                                // 6697
	 * `rows().nodes()` will return an array of nodes, while `rows().data()` will                                         // 6698
	 * return an array of objects or arrays depending upon your table's                                                   // 6699
	 * configuration). The API object has a number of array like methods (`push`,                                         // 6700
	 * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,                                       // 6701
	 * `unique` etc) to assist your working with the data held in a table.                                                // 6702
	 *                                                                                                                    // 6703
	 * Most methods (those which return an Api instance) are chainable, which means                                       // 6704
	 * the return from a method call also has all of the methods available that the                                       // 6705
	 * top level object had. For example, these two calls are equivalent:                                                 // 6706
	 *                                                                                                                    // 6707
	 *     // Not chained                                                                                                 // 6708
	 *     api.row.add( {...} );                                                                                          // 6709
	 *     api.draw();                                                                                                    // 6710
	 *                                                                                                                    // 6711
	 *     // Chained                                                                                                     // 6712
	 *     api.row.add( {...} ).draw();                                                                                   // 6713
	 *                                                                                                                    // 6714
	 * @class DataTable.Api                                                                                               // 6715
	 * @param {array|object|string|jQuery} context DataTable identifier. This is                                          // 6716
	 *   used to define which DataTables enhanced tables this API will operate on.                                        // 6717
	 *   Can be one of:                                                                                                   // 6718
	 *                                                                                                                    // 6719
	 *   * `string` - jQuery selector. Any DataTables' matching the given selector                                        // 6720
	 *     with be found and used.                                                                                        // 6721
	 *   * `node` - `TABLE` node which has already been formed into a DataTable.                                          // 6722
	 *   * `jQuery` - A jQuery object of `TABLE` nodes.                                                                   // 6723
	 *   * `object` - DataTables settings object                                                                          // 6724
	 * @param {array} [data] Data to initialise the Api instance with.                                                    // 6725
	 *                                                                                                                    // 6726
	 * @example                                                                                                           // 6727
	 *   // Direct initialisation during DataTables construction                                                          // 6728
	 *   var api = $('#example').DataTable();                                                                             // 6729
	 *                                                                                                                    // 6730
	 * @example                                                                                                           // 6731
	 *   // Initialisation using a DataTables jQuery object                                                               // 6732
	 *   var api = $('#example').dataTable().api();                                                                       // 6733
	 *                                                                                                                    // 6734
	 * @example                                                                                                           // 6735
	 *   // Initialisation as a constructor                                                                               // 6736
	 *   var api = new $.fn.DataTable.Api( 'table.dataTable' );                                                           // 6737
	 */                                                                                                                   // 6738
	_Api = function ( context, data )                                                                                     // 6739
	{                                                                                                                     // 6740
		if ( ! (this instanceof _Api) ) {                                                                                    // 6741
			return new _Api( context, data );                                                                                   // 6742
		}                                                                                                                    // 6743
	                                                                                                                      // 6744
		var settings = [];                                                                                                   // 6745
		var ctxSettings = function ( o ) {                                                                                   // 6746
			var a = _toSettings( o );                                                                                           // 6747
			if ( a ) {                                                                                                          // 6748
				settings.push.apply( settings, a );                                                                                // 6749
			}                                                                                                                   // 6750
		};                                                                                                                   // 6751
	                                                                                                                      // 6752
		if ( $.isArray( context ) ) {                                                                                        // 6753
			for ( var i=0, ien=context.length ; i<ien ; i++ ) {                                                                 // 6754
				ctxSettings( context[i] );                                                                                         // 6755
			}                                                                                                                   // 6756
		}                                                                                                                    // 6757
		else {                                                                                                               // 6758
			ctxSettings( context );                                                                                             // 6759
		}                                                                                                                    // 6760
	                                                                                                                      // 6761
		// Remove duplicates                                                                                                 // 6762
		this.context = _unique( settings );                                                                                  // 6763
	                                                                                                                      // 6764
		// Initial data                                                                                                      // 6765
		if ( data ) {                                                                                                        // 6766
			this.push.apply( this, data.toArray ? data.toArray() : data );                                                      // 6767
		}                                                                                                                    // 6768
	                                                                                                                      // 6769
		// selector                                                                                                          // 6770
		this.selector = {                                                                                                    // 6771
			rows: null,                                                                                                         // 6772
			cols: null,                                                                                                         // 6773
			opts: null                                                                                                          // 6774
		};                                                                                                                   // 6775
	                                                                                                                      // 6776
		_Api.extend( this, this, __apiStruct );                                                                              // 6777
	};                                                                                                                    // 6778
	                                                                                                                      // 6779
	DataTable.Api = _Api;                                                                                                 // 6780
	                                                                                                                      // 6781
	_Api.prototype = /** @lends DataTables.Api */{                                                                        // 6782
		any: function ()                                                                                                     // 6783
		{                                                                                                                    // 6784
			return this.flatten().length !== 0;                                                                                 // 6785
		},                                                                                                                   // 6786
	                                                                                                                      // 6787
	                                                                                                                      // 6788
		concat:  __arrayProto.concat,                                                                                        // 6789
	                                                                                                                      // 6790
	                                                                                                                      // 6791
		context: [], // array of table settings objects                                                                      // 6792
	                                                                                                                      // 6793
	                                                                                                                      // 6794
		each: function ( fn )                                                                                                // 6795
		{                                                                                                                    // 6796
			for ( var i=0, ien=this.length ; i<ien; i++ ) {                                                                     // 6797
				fn.call( this, this[i], i, this );                                                                                 // 6798
			}                                                                                                                   // 6799
	                                                                                                                      // 6800
			return this;                                                                                                        // 6801
		},                                                                                                                   // 6802
	                                                                                                                      // 6803
	                                                                                                                      // 6804
		eq: function ( idx )                                                                                                 // 6805
		{                                                                                                                    // 6806
			var ctx = this.context;                                                                                             // 6807
	                                                                                                                      // 6808
			return ctx.length > idx ?                                                                                           // 6809
				new _Api( ctx[idx], this[idx] ) :                                                                                  // 6810
				null;                                                                                                              // 6811
		},                                                                                                                   // 6812
	                                                                                                                      // 6813
	                                                                                                                      // 6814
		filter: function ( fn )                                                                                              // 6815
		{                                                                                                                    // 6816
			var a = [];                                                                                                         // 6817
	                                                                                                                      // 6818
			if ( __arrayProto.filter ) {                                                                                        // 6819
				a = __arrayProto.filter.call( this, fn, this );                                                                    // 6820
			}                                                                                                                   // 6821
			else {                                                                                                              // 6822
				// Compatibility for browsers without EMCA-252-5 (JS 1.6)                                                          // 6823
				for ( var i=0, ien=this.length ; i<ien ; i++ ) {                                                                   // 6824
					if ( fn.call( this, this[i], i, this ) ) {                                                                        // 6825
						a.push( this[i] );                                                                                               // 6826
					}                                                                                                                 // 6827
				}                                                                                                                  // 6828
			}                                                                                                                   // 6829
	                                                                                                                      // 6830
			return new _Api( this.context, a );                                                                                 // 6831
		},                                                                                                                   // 6832
	                                                                                                                      // 6833
	                                                                                                                      // 6834
		flatten: function ()                                                                                                 // 6835
		{                                                                                                                    // 6836
			var a = [];                                                                                                         // 6837
			return new _Api( this.context, a.concat.apply( a, this.toArray() ) );                                               // 6838
		},                                                                                                                   // 6839
	                                                                                                                      // 6840
	                                                                                                                      // 6841
		join:    __arrayProto.join,                                                                                          // 6842
	                                                                                                                      // 6843
	                                                                                                                      // 6844
		indexOf: __arrayProto.indexOf || function (obj, start)                                                               // 6845
		{                                                                                                                    // 6846
			for ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {                                                         // 6847
				if ( this[i] === obj ) {                                                                                           // 6848
					return i;                                                                                                         // 6849
				}                                                                                                                  // 6850
			}                                                                                                                   // 6851
			return -1;                                                                                                          // 6852
		},                                                                                                                   // 6853
	                                                                                                                      // 6854
		iterator: function ( flatten, type, fn, alwaysNew ) {                                                                // 6855
			var                                                                                                                 // 6856
				a = [], ret,                                                                                                       // 6857
				i, ien, j, jen,                                                                                                    // 6858
				context = this.context,                                                                                            // 6859
				rows, items, item,                                                                                                 // 6860
				selector = this.selector;                                                                                          // 6861
	                                                                                                                      // 6862
			// Argument shifting                                                                                                // 6863
			if ( typeof flatten === 'string' ) {                                                                                // 6864
				alwaysNew = fn;                                                                                                    // 6865
				fn = type;                                                                                                         // 6866
				type = flatten;                                                                                                    // 6867
				flatten = false;                                                                                                   // 6868
			}                                                                                                                   // 6869
	                                                                                                                      // 6870
			for ( i=0, ien=context.length ; i<ien ; i++ ) {                                                                     // 6871
				var apiInst = new _Api( context[i] );                                                                              // 6872
	                                                                                                                      // 6873
				if ( type === 'table' ) {                                                                                          // 6874
					ret = fn.call( apiInst, context[i], i );                                                                          // 6875
	                                                                                                                      // 6876
					if ( ret !== undefined ) {                                                                                        // 6877
						a.push( ret );                                                                                                   // 6878
					}                                                                                                                 // 6879
				}                                                                                                                  // 6880
				else if ( type === 'columns' || type === 'rows' ) {                                                                // 6881
					// this has same length as context - one entry for each table                                                     // 6882
					ret = fn.call( apiInst, context[i], this[i], i );                                                                 // 6883
	                                                                                                                      // 6884
					if ( ret !== undefined ) {                                                                                        // 6885
						a.push( ret );                                                                                                   // 6886
					}                                                                                                                 // 6887
				}                                                                                                                  // 6888
				else if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {                     // 6889
					// columns and rows share the same structure.                                                                     // 6890
					// 'this' is an array of column indexes for each context                                                          // 6891
					items = this[i];                                                                                                  // 6892
	                                                                                                                      // 6893
					if ( type === 'column-rows' ) {                                                                                   // 6894
						rows = _selector_row_indexes( context[i], selector.opts );                                                       // 6895
					}                                                                                                                 // 6896
	                                                                                                                      // 6897
					for ( j=0, jen=items.length ; j<jen ; j++ ) {                                                                     // 6898
						item = items[j];                                                                                                 // 6899
	                                                                                                                      // 6900
						if ( type === 'cell' ) {                                                                                         // 6901
							ret = fn.call( apiInst, context[i], item.row, item.column, i, j );                                              // 6902
						}                                                                                                                // 6903
						else {                                                                                                           // 6904
							ret = fn.call( apiInst, context[i], item, i, j, rows );                                                         // 6905
						}                                                                                                                // 6906
	                                                                                                                      // 6907
						if ( ret !== undefined ) {                                                                                       // 6908
							a.push( ret );                                                                                                  // 6909
						}                                                                                                                // 6910
					}                                                                                                                 // 6911
				}                                                                                                                  // 6912
			}                                                                                                                   // 6913
	                                                                                                                      // 6914
			if ( a.length || alwaysNew ) {                                                                                      // 6915
				var api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );                                              // 6916
				var apiSelector = api.selector;                                                                                    // 6917
				apiSelector.rows = selector.rows;                                                                                  // 6918
				apiSelector.cols = selector.cols;                                                                                  // 6919
				apiSelector.opts = selector.opts;                                                                                  // 6920
				return api;                                                                                                        // 6921
			}                                                                                                                   // 6922
			return this;                                                                                                        // 6923
		},                                                                                                                   // 6924
	                                                                                                                      // 6925
	                                                                                                                      // 6926
		lastIndexOf: __arrayProto.lastIndexOf || function (obj, start)                                                       // 6927
		{                                                                                                                    // 6928
			// Bit cheeky...                                                                                                    // 6929
			return this.indexOf.apply( this.toArray.reverse(), arguments );                                                     // 6930
		},                                                                                                                   // 6931
	                                                                                                                      // 6932
	                                                                                                                      // 6933
		length:  0,                                                                                                          // 6934
	                                                                                                                      // 6935
	                                                                                                                      // 6936
		map: function ( fn )                                                                                                 // 6937
		{                                                                                                                    // 6938
			var a = [];                                                                                                         // 6939
	                                                                                                                      // 6940
			if ( __arrayProto.map ) {                                                                                           // 6941
				a = __arrayProto.map.call( this, fn, this );                                                                       // 6942
			}                                                                                                                   // 6943
			else {                                                                                                              // 6944
				// Compatibility for browsers without EMCA-252-5 (JS 1.6)                                                          // 6945
				for ( var i=0, ien=this.length ; i<ien ; i++ ) {                                                                   // 6946
					a.push( fn.call( this, this[i], i ) );                                                                            // 6947
				}                                                                                                                  // 6948
			}                                                                                                                   // 6949
	                                                                                                                      // 6950
			return new _Api( this.context, a );                                                                                 // 6951
		},                                                                                                                   // 6952
	                                                                                                                      // 6953
	                                                                                                                      // 6954
		pluck: function ( prop )                                                                                             // 6955
		{                                                                                                                    // 6956
			return this.map( function ( el ) {                                                                                  // 6957
				return el[ prop ];                                                                                                 // 6958
			} );                                                                                                                // 6959
		},                                                                                                                   // 6960
	                                                                                                                      // 6961
		pop:     __arrayProto.pop,                                                                                           // 6962
	                                                                                                                      // 6963
	                                                                                                                      // 6964
		push:    __arrayProto.push,                                                                                          // 6965
	                                                                                                                      // 6966
	                                                                                                                      // 6967
		// Does not return an API instance                                                                                   // 6968
		reduce: __arrayProto.reduce || function ( fn, init )                                                                 // 6969
		{                                                                                                                    // 6970
			return _fnReduce( this, fn, init, 0, this.length, 1 );                                                              // 6971
		},                                                                                                                   // 6972
	                                                                                                                      // 6973
	                                                                                                                      // 6974
		reduceRight: __arrayProto.reduceRight || function ( fn, init )                                                       // 6975
		{                                                                                                                    // 6976
			return _fnReduce( this, fn, init, this.length-1, -1, -1 );                                                          // 6977
		},                                                                                                                   // 6978
	                                                                                                                      // 6979
	                                                                                                                      // 6980
		reverse: __arrayProto.reverse,                                                                                       // 6981
	                                                                                                                      // 6982
	                                                                                                                      // 6983
		// Object with rows, columns and opts                                                                                // 6984
		selector: null,                                                                                                      // 6985
	                                                                                                                      // 6986
	                                                                                                                      // 6987
		shift:   __arrayProto.shift,                                                                                         // 6988
	                                                                                                                      // 6989
	                                                                                                                      // 6990
		sort:    __arrayProto.sort, // ? name - order?                                                                       // 6991
	                                                                                                                      // 6992
	                                                                                                                      // 6993
		splice:  __arrayProto.splice,                                                                                        // 6994
	                                                                                                                      // 6995
	                                                                                                                      // 6996
		toArray: function ()                                                                                                 // 6997
		{                                                                                                                    // 6998
			return __arrayProto.slice.call( this );                                                                             // 6999
		},                                                                                                                   // 7000
	                                                                                                                      // 7001
	                                                                                                                      // 7002
		to$: function ()                                                                                                     // 7003
		{                                                                                                                    // 7004
			return $( this );                                                                                                   // 7005
		},                                                                                                                   // 7006
	                                                                                                                      // 7007
	                                                                                                                      // 7008
		toJQuery: function ()                                                                                                // 7009
		{                                                                                                                    // 7010
			return $( this );                                                                                                   // 7011
		},                                                                                                                   // 7012
	                                                                                                                      // 7013
	                                                                                                                      // 7014
		unique: function ()                                                                                                  // 7015
		{                                                                                                                    // 7016
			return new _Api( this.context, _unique(this) );                                                                     // 7017
		},                                                                                                                   // 7018
	                                                                                                                      // 7019
	                                                                                                                      // 7020
		unshift: __arrayProto.unshift                                                                                        // 7021
	};                                                                                                                    // 7022
	                                                                                                                      // 7023
	                                                                                                                      // 7024
	_Api.extend = function ( scope, obj, ext )                                                                            // 7025
	{                                                                                                                     // 7026
		// Only extend API instances and static properties of the API                                                        // 7027
		if ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {                                  // 7028
			return;                                                                                                             // 7029
		}                                                                                                                    // 7030
	                                                                                                                      // 7031
		var                                                                                                                  // 7032
			i, ien,                                                                                                             // 7033
			j, jen,                                                                                                             // 7034
			struct, inner,                                                                                                      // 7035
			methodScoping = function ( scope, fn, struc ) {                                                                     // 7036
				return function () {                                                                                               // 7037
					var ret = fn.apply( scope, arguments );                                                                           // 7038
	                                                                                                                      // 7039
					// Method extension                                                                                               // 7040
					_Api.extend( ret, ret, struc.methodExt );                                                                         // 7041
					return ret;                                                                                                       // 7042
				};                                                                                                                 // 7043
			};                                                                                                                  // 7044
	                                                                                                                      // 7045
		for ( i=0, ien=ext.length ; i<ien ; i++ ) {                                                                          // 7046
			struct = ext[i];                                                                                                    // 7047
	                                                                                                                      // 7048
			// Value                                                                                                            // 7049
			obj[ struct.name ] = typeof struct.val === 'function' ?                                                             // 7050
				methodScoping( scope, struct.val, struct ) :                                                                       // 7051
				$.isPlainObject( struct.val ) ?                                                                                    // 7052
					{} :                                                                                                              // 7053
					struct.val;                                                                                                       // 7054
	                                                                                                                      // 7055
			obj[ struct.name ].__dt_wrapper = true;                                                                             // 7056
	                                                                                                                      // 7057
			// Property extension                                                                                               // 7058
			_Api.extend( scope, obj[ struct.name ], struct.propExt );                                                           // 7059
		}                                                                                                                    // 7060
	};                                                                                                                    // 7061
	                                                                                                                      // 7062
	                                                                                                                      // 7063
	// @todo - Is there need for an augment function?                                                                     // 7064
	// _Api.augment = function ( inst, name )                                                                             // 7065
	// {                                                                                                                  // 7066
	// 	// Find src object in the structure from the name                                                                 // 7067
	// 	var parts = name.split('.');                                                                                      // 7068
	                                                                                                                      // 7069
	// 	_Api.extend( inst, obj );                                                                                         // 7070
	// };                                                                                                                 // 7071
	                                                                                                                      // 7072
	                                                                                                                      // 7073
	//     [                                                                                                              // 7074
	//       {                                                                                                            // 7075
	//         name:      'data'                -- string   - Property name                                               // 7076
	//         val:       function () {},       -- function - Api method (or undefined if just an object                  // 7077
	//         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
	//         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property      // 7079
	//       },                                                                                                           // 7080
	//       {                                                                                                            // 7081
	//         name:     'row'                                                                                            // 7082
	//         val:       {},                                                                                             // 7083
	//         methodExt: [ ... ],                                                                                        // 7084
	//         propExt:   [                                                                                               // 7085
	//           {                                                                                                        // 7086
	//             name:      'data'                                                                                      // 7087
	//             val:       function () {},                                                                             // 7088
	//             methodExt: [ ... ],                                                                                    // 7089
	//             propExt:   [ ... ]                                                                                     // 7090
	//           },                                                                                                       // 7091
	//           ...                                                                                                      // 7092
	//         ]                                                                                                          // 7093
	//       }                                                                                                            // 7094
	//     ]                                                                                                              // 7095
	                                                                                                                      // 7096
	_Api.register = _api_register = function ( name, val )                                                                // 7097
	{                                                                                                                     // 7098
		if ( $.isArray( name ) ) {                                                                                           // 7099
			for ( var j=0, jen=name.length ; j<jen ; j++ ) {                                                                    // 7100
				_Api.register( name[j], val );                                                                                     // 7101
			}                                                                                                                   // 7102
			return;                                                                                                             // 7103
		}                                                                                                                    // 7104
	                                                                                                                      // 7105
		var                                                                                                                  // 7106
			i, ien,                                                                                                             // 7107
			heir = name.split('.'),                                                                                             // 7108
			struct = __apiStruct,                                                                                               // 7109
			key, method;                                                                                                        // 7110
	                                                                                                                      // 7111
		var find = function ( src, name ) {                                                                                  // 7112
			for ( var i=0, ien=src.length ; i<ien ; i++ ) {                                                                     // 7113
				if ( src[i].name === name ) {                                                                                      // 7114
					return src[i];                                                                                                    // 7115
				}                                                                                                                  // 7116
			}                                                                                                                   // 7117
			return null;                                                                                                        // 7118
		};                                                                                                                   // 7119
	                                                                                                                      // 7120
		for ( i=0, ien=heir.length ; i<ien ; i++ ) {                                                                         // 7121
			method = heir[i].indexOf('()') !== -1;                                                                              // 7122
			key = method ?                                                                                                      // 7123
				heir[i].replace('()', '') :                                                                                        // 7124
				heir[i];                                                                                                           // 7125
	                                                                                                                      // 7126
			var src = find( struct, key );                                                                                      // 7127
			if ( ! src ) {                                                                                                      // 7128
				src = {                                                                                                            // 7129
					name:      key,                                                                                                   // 7130
					val:       {},                                                                                                    // 7131
					methodExt: [],                                                                                                    // 7132
					propExt:   []                                                                                                     // 7133
				};                                                                                                                 // 7134
				struct.push( src );                                                                                                // 7135
			}                                                                                                                   // 7136
	                                                                                                                      // 7137
			if ( i === ien-1 ) {                                                                                                // 7138
				src.val = val;                                                                                                     // 7139
			}                                                                                                                   // 7140
			else {                                                                                                              // 7141
				struct = method ?                                                                                                  // 7142
					src.methodExt :                                                                                                   // 7143
					src.propExt;                                                                                                      // 7144
			}                                                                                                                   // 7145
		}                                                                                                                    // 7146
	};                                                                                                                    // 7147
	                                                                                                                      // 7148
	                                                                                                                      // 7149
	_Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {                              // 7150
		_Api.register( pluralName, val );                                                                                    // 7151
	                                                                                                                      // 7152
		_Api.register( singularName, function () {                                                                           // 7153
			var ret = val.apply( this, arguments );                                                                             // 7154
	                                                                                                                      // 7155
			if ( ret === this ) {                                                                                               // 7156
				// Returned item is the API instance that was passed in, return it                                                 // 7157
				return this;                                                                                                       // 7158
			}                                                                                                                   // 7159
			else if ( ret instanceof _Api ) {                                                                                   // 7160
				// New API instance returned, want the value from the first item                                                   // 7161
				// in the returned array for the singular result.                                                                  // 7162
				return ret.length ?                                                                                                // 7163
					$.isArray( ret[0] ) ?                                                                                             // 7164
						new _Api( ret.context, ret[0] ) : // Array results are 'enhanced'                                                // 7165
						ret[0] :                                                                                                         // 7166
					undefined;                                                                                                        // 7167
			}                                                                                                                   // 7168
	                                                                                                                      // 7169
			// Non-API return - just fire it back                                                                               // 7170
			return ret;                                                                                                         // 7171
		} );                                                                                                                 // 7172
	};                                                                                                                    // 7173
	                                                                                                                      // 7174
	                                                                                                                      // 7175
	/**                                                                                                                   // 7176
	 * Selector for HTML tables. Apply the given selector to the give array of                                            // 7177
	 * DataTables settings objects.                                                                                       // 7178
	 *                                                                                                                    // 7179
	 * @param {string|integer} [selector] jQuery selector string or integer                                               // 7180
	 * @param  {array} Array of DataTables settings objects to be filtered                                                // 7181
	 * @return {array}                                                                                                    // 7182
	 * @ignore                                                                                                            // 7183
	 */                                                                                                                   // 7184
	var __table_selector = function ( selector, a )                                                                       // 7185
	{                                                                                                                     // 7186
		// Integer is used to pick out a table by index                                                                      // 7187
		if ( typeof selector === 'number' ) {                                                                                // 7188
			return [ a[ selector ] ];                                                                                           // 7189
		}                                                                                                                    // 7190
	                                                                                                                      // 7191
		// Perform a jQuery selector on the table nodes                                                                      // 7192
		var nodes = $.map( a, function (el, i) {                                                                             // 7193
			return el.nTable;                                                                                                   // 7194
		} );                                                                                                                 // 7195
	                                                                                                                      // 7196
		return $(nodes)                                                                                                      // 7197
			.filter( selector )                                                                                                 // 7198
			.map( function (i) {                                                                                                // 7199
				// Need to translate back from the table node to the settings                                                      // 7200
				var idx = $.inArray( this, nodes );                                                                                // 7201
				return a[ idx ];                                                                                                   // 7202
			} )                                                                                                                 // 7203
			.toArray();                                                                                                         // 7204
	};                                                                                                                    // 7205
	                                                                                                                      // 7206
	                                                                                                                      // 7207
	                                                                                                                      // 7208
	/**                                                                                                                   // 7209
	 * Context selector for the API's context (i.e. the tables the API instance                                           // 7210
	 * refers to.                                                                                                         // 7211
	 *                                                                                                                    // 7212
	 * @name    DataTable.Api#tables                                                                                      // 7213
	 * @param {string|integer} [selector] Selector to pick which tables the iterator                                      // 7214
	 *   should operate on. If not given, all tables in the current context are                                           // 7215
	 *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to                                         // 7216
	 *   select multiple tables or as an integer to select a single table.                                                // 7217
	 * @returns {DataTable.Api} Returns a new API instance if a selector is given.                                        // 7218
	 */                                                                                                                   // 7219
	_api_register( 'tables()', function ( selector ) {                                                                    // 7220
		// A new instance is created if there was a selector specified                                                       // 7221
		return selector ?                                                                                                    // 7222
			new _Api( __table_selector( selector, this.context ) ) :                                                            // 7223
			this;                                                                                                               // 7224
	} );                                                                                                                  // 7225
	                                                                                                                      // 7226
	                                                                                                                      // 7227
	_api_register( 'table()', function ( selector ) {                                                                     // 7228
		var tables = this.tables( selector );                                                                                // 7229
		var ctx = tables.context;                                                                                            // 7230
	                                                                                                                      // 7231
		// Truncate to the first matched table                                                                               // 7232
		return ctx.length ?                                                                                                  // 7233
			new _Api( ctx[0] ) :                                                                                                // 7234
			tables;                                                                                                             // 7235
	} );                                                                                                                  // 7236
	                                                                                                                      // 7237
	                                                                                                                      // 7238
	_api_registerPlural( 'tables().nodes()', 'table().node()' , function () {                                             // 7239
		return this.iterator( 'table', function ( ctx ) {                                                                    // 7240
			return ctx.nTable;                                                                                                  // 7241
		}, 1 );                                                                                                              // 7242
	} );                                                                                                                  // 7243
	                                                                                                                      // 7244
	                                                                                                                      // 7245
	_api_registerPlural( 'tables().body()', 'table().body()' , function () {                                              // 7246
		return this.iterator( 'table', function ( ctx ) {                                                                    // 7247
			return ctx.nTBody;                                                                                                  // 7248
		}, 1 );                                                                                                              // 7249
	} );                                                                                                                  // 7250
	                                                                                                                      // 7251
	                                                                                                                      // 7252
	_api_registerPlural( 'tables().header()', 'table().header()' , function () {                                          // 7253
		return this.iterator( 'table', function ( ctx ) {                                                                    // 7254
			return ctx.nTHead;                                                                                                  // 7255
		}, 1 );                                                                                                              // 7256
	} );                                                                                                                  // 7257
	                                                                                                                      // 7258
	                                                                                                                      // 7259
	_api_registerPlural( 'tables().footer()', 'table().footer()' , function () {                                          // 7260
		return this.iterator( 'table', function ( ctx ) {                                                                    // 7261
			return ctx.nTFoot;                                                                                                  // 7262
		}, 1 );                                                                                                              // 7263
	} );                                                                                                                  // 7264
	                                                                                                                      // 7265
	                                                                                                                      // 7266
	_api_registerPlural( 'tables().containers()', 'table().container()' , function () {                                   // 7267
		return this.iterator( 'table', function ( ctx ) {                                                                    // 7268
			return ctx.nTableWrapper;                                                                                           // 7269
		}, 1 );                                                                                                              // 7270
	} );                                                                                                                  // 7271
	                                                                                                                      // 7272
	                                                                                                                      // 7273
	                                                                                                                      // 7274
	/**                                                                                                                   // 7275
	 * Redraw the tables in the current context.                                                                          // 7276
	 *                                                                                                                    // 7277
	 * @param {boolean} [reset=true] Reset (default) or hold the current paging                                           // 7278
	 *   position. A full re-sort and re-filter is performed when this method is                                          // 7279
	 *   called, which is why the pagination reset is the default action.                                                 // 7280
	 * @returns {DataTables.Api} this                                                                                     // 7281
	 */                                                                                                                   // 7282
	_api_register( 'draw()', function ( resetPaging ) {                                                                   // 7283
		return this.iterator( 'table', function ( settings ) {                                                               // 7284
			_fnReDraw( settings, resetPaging===false );                                                                         // 7285
		} );                                                                                                                 // 7286
	} );                                                                                                                  // 7287
	                                                                                                                      // 7288
	                                                                                                                      // 7289
	                                                                                                                      // 7290
	/**                                                                                                                   // 7291
	 * Get the current page index.                                                                                        // 7292
	 *                                                                                                                    // 7293
	 * @return {integer} Current page index (zero based)                                                                  // 7294
	 *//**                                                                                                                // 7295
	 * Set the current page.                                                                                              // 7296
	 *                                                                                                                    // 7297
	 * Note that if you attempt to show a page which does not exist, DataTables will                                      // 7298
	 * not throw an error, but rather reset the paging.                                                                   // 7299
	 *                                                                                                                    // 7300
	 * @param {integer|string} action The paging action to take. This can be one of:                                      // 7301
	 *  * `integer` - The page index to jump to                                                                           // 7302
	 *  * `string` - An action to take:                                                                                   // 7303
	 *    * `first` - Jump to first page.                                                                                 // 7304
	 *    * `next` - Jump to the next page                                                                                // 7305
	 *    * `previous` - Jump to previous page                                                                            // 7306
	 *    * `last` - Jump to the last page.                                                                               // 7307
	 * @returns {DataTables.Api} this                                                                                     // 7308
	 */                                                                                                                   // 7309
	_api_register( 'page()', function ( action ) {                                                                        // 7310
		if ( action === undefined ) {                                                                                        // 7311
			return this.page.info().page; // not an expensive call                                                              // 7312
		}                                                                                                                    // 7313
	                                                                                                                      // 7314
		// else, have an action to take on all tables                                                                        // 7315
		return this.iterator( 'table', function ( settings ) {                                                               // 7316
			_fnPageChange( settings, action );                                                                                  // 7317
		} );                                                                                                                 // 7318
	} );                                                                                                                  // 7319
	                                                                                                                      // 7320
	                                                                                                                      // 7321
	/**                                                                                                                   // 7322
	 * Paging information for the first table in the current context.                                                     // 7323
	 *                                                                                                                    // 7324
	 * If you require paging information for another table, use the `table()` method                                      // 7325
	 * with a suitable selector.                                                                                          // 7326
	 *                                                                                                                    // 7327
	 * @return {object} Object with the following properties set:                                                         // 7328
	 *  * `page` - Current page index (zero based - i.e. the first page is `0`)                                           // 7329
	 *  * `pages` - Total number of pages                                                                                 // 7330
	 *  * `start` - Display index for the first record shown on the current page                                          // 7331
	 *  * `end` - Display index for the last record shown on the current page                                             // 7332
	 *  * `length` - Display length (number of records). Note that generally `start                                       // 7333
	 *    + length = end`, but this is not always true, for example if there are                                          // 7334
	 *    only 2 records to show on the final page, with a length of 10.                                                  // 7335
	 *  * `recordsTotal` - Full data set length                                                                           // 7336
	 *  * `recordsDisplay` - Data set length once the current filtering criterion                                         // 7337
	 *    are applied.                                                                                                    // 7338
	 */                                                                                                                   // 7339
	_api_register( 'page.info()', function ( action ) {                                                                   // 7340
		if ( this.context.length === 0 ) {                                                                                   // 7341
			return undefined;                                                                                                   // 7342
		}                                                                                                                    // 7343
	                                                                                                                      // 7344
		var                                                                                                                  // 7345
			settings   = this.context[0],                                                                                       // 7346
			start      = settings._iDisplayStart,                                                                               // 7347
			len        = settings._iDisplayLength,                                                                              // 7348
			visRecords = settings.fnRecordsDisplay(),                                                                           // 7349
			all        = len === -1;                                                                                            // 7350
	                                                                                                                      // 7351
		return {                                                                                                             // 7352
			"page":           all ? 0 : Math.floor( start / len ),                                                              // 7353
			"pages":          all ? 1 : Math.ceil( visRecords / len ),                                                          // 7354
			"start":          start,                                                                                            // 7355
			"end":            settings.fnDisplayEnd(),                                                                          // 7356
			"length":         len,                                                                                              // 7357
			"recordsTotal":   settings.fnRecordsTotal(),                                                                        // 7358
			"recordsDisplay": visRecords                                                                                        // 7359
		};                                                                                                                   // 7360
	} );                                                                                                                  // 7361
	                                                                                                                      // 7362
	                                                                                                                      // 7363
	/**                                                                                                                   // 7364
	 * Get the current page length.                                                                                       // 7365
	 *                                                                                                                    // 7366
	 * @return {integer} Current page length. Note `-1` indicates that all records                                        // 7367
	 *   are to be shown.                                                                                                 // 7368
	 *//**                                                                                                                // 7369
	 * Set the current page length.                                                                                       // 7370
	 *                                                                                                                    // 7371
	 * @param {integer} Page length to set. Use `-1` to show all records.                                                 // 7372
	 * @returns {DataTables.Api} this                                                                                     // 7373
	 */                                                                                                                   // 7374
	_api_register( 'page.len()', function ( len ) {                                                                       // 7375
		// Note that we can't call this function 'length()' because `length`                                                 // 7376
		// is a Javascript property of functions which defines how many arguments                                            // 7377
		// the function expects.                                                                                             // 7378
		if ( len === undefined ) {                                                                                           // 7379
			return this.context.length !== 0 ?                                                                                  // 7380
				this.context[0]._iDisplayLength :                                                                                  // 7381
				undefined;                                                                                                         // 7382
		}                                                                                                                    // 7383
	                                                                                                                      // 7384
		// else, set the page length                                                                                         // 7385
		return this.iterator( 'table', function ( settings ) {                                                               // 7386
			_fnLengthChange( settings, len );                                                                                   // 7387
		} );                                                                                                                 // 7388
	} );                                                                                                                  // 7389
	                                                                                                                      // 7390
	                                                                                                                      // 7391
	                                                                                                                      // 7392
	var __reload = function ( settings, holdPosition, callback ) {                                                        // 7393
		// Use the draw event to trigger a callback                                                                          // 7394
		if ( callback ) {                                                                                                    // 7395
			var api = new _Api( settings );                                                                                     // 7396
	                                                                                                                      // 7397
			api.one( 'draw', function () {                                                                                      // 7398
				callback( api.ajax.json() );                                                                                       // 7399
			} );                                                                                                                // 7400
		}                                                                                                                    // 7401
	                                                                                                                      // 7402
		if ( _fnDataSource( settings ) == 'ssp' ) {                                                                          // 7403
			_fnReDraw( settings, holdPosition );                                                                                // 7404
		}                                                                                                                    // 7405
		else {                                                                                                               // 7406
			// Trigger xhr                                                                                                      // 7407
			_fnProcessingDisplay( settings, true );                                                                             // 7408
	                                                                                                                      // 7409
			_fnBuildAjax( settings, [], function( json ) {                                                                      // 7410
				_fnClearTable( settings );                                                                                         // 7411
	                                                                                                                      // 7412
				var data = _fnAjaxDataSrc( settings, json );                                                                       // 7413
				for ( var i=0, ien=data.length ; i<ien ; i++ ) {                                                                   // 7414
					_fnAddData( settings, data[i] );                                                                                  // 7415
				}                                                                                                                  // 7416
	                                                                                                                      // 7417
				_fnReDraw( settings, holdPosition );                                                                               // 7418
				_fnProcessingDisplay( settings, false );                                                                           // 7419
			} );                                                                                                                // 7420
		}                                                                                                                    // 7421
	};                                                                                                                    // 7422
	                                                                                                                      // 7423
	                                                                                                                      // 7424
	/**                                                                                                                   // 7425
	 * Get the JSON response from the last Ajax request that DataTables made to the                                       // 7426
	 * server. Note that this returns the JSON from the first table in the current                                        // 7427
	 * context.                                                                                                           // 7428
	 *                                                                                                                    // 7429
	 * @return {object} JSON received from the server.                                                                    // 7430
	 */                                                                                                                   // 7431
	_api_register( 'ajax.json()', function () {                                                                           // 7432
		var ctx = this.context;                                                                                              // 7433
	                                                                                                                      // 7434
		if ( ctx.length > 0 ) {                                                                                              // 7435
			return ctx[0].json;                                                                                                 // 7436
		}                                                                                                                    // 7437
	                                                                                                                      // 7438
		// else return undefined;                                                                                            // 7439
	} );                                                                                                                  // 7440
	                                                                                                                      // 7441
	                                                                                                                      // 7442
	/**                                                                                                                   // 7443
	 * Get the data submitted in the last Ajax request                                                                    // 7444
	 */                                                                                                                   // 7445
	_api_register( 'ajax.params()', function () {                                                                         // 7446
		var ctx = this.context;                                                                                              // 7447
	                                                                                                                      // 7448
		if ( ctx.length > 0 ) {                                                                                              // 7449
			return ctx[0].oAjaxData;                                                                                            // 7450
		}                                                                                                                    // 7451
	                                                                                                                      // 7452
		// else return undefined;                                                                                            // 7453
	} );                                                                                                                  // 7454
	                                                                                                                      // 7455
	                                                                                                                      // 7456
	/**                                                                                                                   // 7457
	 * Reload tables from the Ajax data source. Note that this function will                                              // 7458
	 * automatically re-draw the table when the remote data has been loaded.                                              // 7459
	 *                                                                                                                    // 7460
	 * @param {boolean} [reset=true] Reset (default) or hold the current paging                                           // 7461
	 *   position. A full re-sort and re-filter is performed when this method is                                          // 7462
	 *   called, which is why the pagination reset is the default action.                                                 // 7463
	 * @returns {DataTables.Api} this                                                                                     // 7464
	 */                                                                                                                   // 7465
	_api_register( 'ajax.reload()', function ( callback, resetPaging ) {                                                  // 7466
		return this.iterator( 'table', function (settings) {                                                                 // 7467
			__reload( settings, resetPaging===false, callback );                                                                // 7468
		} );                                                                                                                 // 7469
	} );                                                                                                                  // 7470
	                                                                                                                      // 7471
	                                                                                                                      // 7472
	/**                                                                                                                   // 7473
	 * Get the current Ajax URL. Note that this returns the URL from the first                                            // 7474
	 * table in the current context.                                                                                      // 7475
	 *                                                                                                                    // 7476
	 * @return {string} Current Ajax source URL                                                                           // 7477
	 *//**                                                                                                                // 7478
	 * Set the Ajax URL. Note that this will set the URL for all tables in the                                            // 7479
	 * current context.                                                                                                   // 7480
	 *                                                                                                                    // 7481
	 * @param {string} url URL to set.                                                                                    // 7482
	 * @returns {DataTables.Api} this                                                                                     // 7483
	 */                                                                                                                   // 7484
	_api_register( 'ajax.url()', function ( url ) {                                                                       // 7485
		var ctx = this.context;                                                                                              // 7486
	                                                                                                                      // 7487
		if ( url === undefined ) {                                                                                           // 7488
			// get                                                                                                              // 7489
			if ( ctx.length === 0 ) {                                                                                           // 7490
				return undefined;                                                                                                  // 7491
			}                                                                                                                   // 7492
			ctx = ctx[0];                                                                                                       // 7493
	                                                                                                                      // 7494
			return ctx.ajax ?                                                                                                   // 7495
				$.isPlainObject( ctx.ajax ) ?                                                                                      // 7496
					ctx.ajax.url :                                                                                                    // 7497
					ctx.ajax :                                                                                                        // 7498
				ctx.sAjaxSource;                                                                                                   // 7499
		}                                                                                                                    // 7500
	                                                                                                                      // 7501
		// set                                                                                                               // 7502
		return this.iterator( 'table', function ( settings ) {                                                               // 7503
			if ( $.isPlainObject( settings.ajax ) ) {                                                                           // 7504
				settings.ajax.url = url;                                                                                           // 7505
			}                                                                                                                   // 7506
			else {                                                                                                              // 7507
				settings.ajax = url;                                                                                               // 7508
			}                                                                                                                   // 7509
			// No need to consider sAjaxSource here since DataTables gives priority                                             // 7510
			// to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any                                                // 7511
			// value of `sAjaxSource` redundant.                                                                                // 7512
		} );                                                                                                                 // 7513
	} );                                                                                                                  // 7514
	                                                                                                                      // 7515
	                                                                                                                      // 7516
	/**                                                                                                                   // 7517
	 * Load data from the newly set Ajax URL. Note that this method is only                                               // 7518
	 * available when `ajax.url()` is used to set a URL. Additionally, this method                                        // 7519
	 * has the same effect as calling `ajax.reload()` but is provided for                                                 // 7520
	 * convenience when setting a new URL. Like `ajax.reload()` it will                                                   // 7521
	 * automatically redraw the table once the remote data has been loaded.                                               // 7522
	 *                                                                                                                    // 7523
	 * @returns {DataTables.Api} this                                                                                     // 7524
	 */                                                                                                                   // 7525
	_api_register( 'ajax.url().load()', function ( callback, resetPaging ) {                                              // 7526
		// Same as a reload, but makes sense to present it for easy access after a                                           // 7527
		// url change                                                                                                        // 7528
		return this.iterator( 'table', function ( ctx ) {                                                                    // 7529
			__reload( ctx, resetPaging===false, callback );                                                                     // 7530
		} );                                                                                                                 // 7531
	} );                                                                                                                  // 7532
	                                                                                                                      // 7533
	                                                                                                                      // 7534
	                                                                                                                      // 7535
	                                                                                                                      // 7536
	var _selector_run = function ( type, selector, selectFn, settings, opts )                                             // 7537
	{                                                                                                                     // 7538
		var                                                                                                                  // 7539
			out = [], res,                                                                                                      // 7540
			a, i, ien, j, jen,                                                                                                  // 7541
			selectorType = typeof selector;                                                                                     // 7542
	                                                                                                                      // 7543
		// Can't just check for isArray here, as an API or jQuery instance might be                                          // 7544
		// given with their array like look                                                                                  // 7545
		if ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined ) {     // 7546
			selector = [ selector ];                                                                                            // 7547
		}                                                                                                                    // 7548
	                                                                                                                      // 7549
		for ( i=0, ien=selector.length ; i<ien ; i++ ) {                                                                     // 7550
			a = selector[i] && selector[i].split ?                                                                              // 7551
				selector[i].split(',') :                                                                                           // 7552
				[ selector[i] ];                                                                                                   // 7553
	                                                                                                                      // 7554
			for ( j=0, jen=a.length ; j<jen ; j++ ) {                                                                           // 7555
				res = selectFn( typeof a[j] === 'string' ? $.trim(a[j]) : a[j] );                                                  // 7556
	                                                                                                                      // 7557
				if ( res && res.length ) {                                                                                         // 7558
					out.push.apply( out, res );                                                                                       // 7559
				}                                                                                                                  // 7560
			}                                                                                                                   // 7561
		}                                                                                                                    // 7562
	                                                                                                                      // 7563
		// selector extensions                                                                                               // 7564
		var ext = _ext.selector[ type ];                                                                                     // 7565
		if ( ext.length ) {                                                                                                  // 7566
			for ( i=0, ien=ext.length ; i<ien ; i++ ) {                                                                         // 7567
				out = ext[i]( settings, opts, out );                                                                               // 7568
			}                                                                                                                   // 7569
		}                                                                                                                    // 7570
	                                                                                                                      // 7571
		return out;                                                                                                          // 7572
	};                                                                                                                    // 7573
	                                                                                                                      // 7574
	                                                                                                                      // 7575
	var _selector_opts = function ( opts )                                                                                // 7576
	{                                                                                                                     // 7577
		if ( ! opts ) {                                                                                                      // 7578
			opts = {};                                                                                                          // 7579
		}                                                                                                                    // 7580
	                                                                                                                      // 7581
		// Backwards compatibility for 1.9- which used the terminology filter rather                                         // 7582
		// than search                                                                                                       // 7583
		if ( opts.filter && opts.search === undefined ) {                                                                    // 7584
			opts.search = opts.filter;                                                                                          // 7585
		}                                                                                                                    // 7586
	                                                                                                                      // 7587
		return $.extend( {                                                                                                   // 7588
			search: 'none',                                                                                                     // 7589
			order: 'current',                                                                                                   // 7590
			page: 'all'                                                                                                         // 7591
		}, opts );                                                                                                           // 7592
	};                                                                                                                    // 7593
	                                                                                                                      // 7594
	                                                                                                                      // 7595
	var _selector_first = function ( inst )                                                                               // 7596
	{                                                                                                                     // 7597
		// Reduce the API instance to the first item found                                                                   // 7598
		for ( var i=0, ien=inst.length ; i<ien ; i++ ) {                                                                     // 7599
			if ( inst[i].length > 0 ) {                                                                                         // 7600
				// Assign the first element to the first item in the instance                                                      // 7601
				// and truncate the instance and context                                                                           // 7602
				inst[0] = inst[i];                                                                                                 // 7603
				inst[0].length = 1;                                                                                                // 7604
				inst.length = 1;                                                                                                   // 7605
				inst.context = [ inst.context[i] ];                                                                                // 7606
	                                                                                                                      // 7607
				return inst;                                                                                                       // 7608
			}                                                                                                                   // 7609
		}                                                                                                                    // 7610
	                                                                                                                      // 7611
		// Not found - return an empty instance                                                                              // 7612
		inst.length = 0;                                                                                                     // 7613
		return inst;                                                                                                         // 7614
	};                                                                                                                    // 7615
	                                                                                                                      // 7616
	                                                                                                                      // 7617
	var _selector_row_indexes = function ( settings, opts )                                                               // 7618
	{                                                                                                                     // 7619
		var                                                                                                                  // 7620
			i, ien, tmp, a=[],                                                                                                  // 7621
			displayFiltered = settings.aiDisplay,                                                                               // 7622
			displayMaster = settings.aiDisplayMaster;                                                                           // 7623
	                                                                                                                      // 7624
		var                                                                                                                  // 7625
			search = opts.search,  // none, applied, removed                                                                    // 7626
			order  = opts.order,   // applied, current, index (original - compatibility with 1.9)                               // 7627
			page   = opts.page;    // all, current                                                                              // 7628
	                                                                                                                      // 7629
		if ( _fnDataSource( settings ) == 'ssp' ) {                                                                          // 7630
			// In server-side processing mode, most options are irrelevant since                                                // 7631
			// rows not shown don't exist and the index order is the applied order                                              // 7632
			// Removed is a special case - for consistency just return an empty                                                 // 7633
			// array                                                                                                            // 7634
			return search === 'removed' ?                                                                                       // 7635
				[] :                                                                                                               // 7636
				_range( 0, displayMaster.length );                                                                                 // 7637
		}                                                                                                                    // 7638
		else if ( page == 'current' ) {                                                                                      // 7639
			// Current page implies that order=current and fitler=applied, since it is                                          // 7640
			// fairly senseless otherwise, regardless of what order and search actually                                         // 7641
			// are                                                                                                              // 7642
			for ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {                                      // 7643
				a.push( displayFiltered[i] );                                                                                      // 7644
			}                                                                                                                   // 7645
		}                                                                                                                    // 7646
		else if ( order == 'current' || order == 'applied' ) {                                                               // 7647
			a = search == 'none' ?                                                                                              // 7648
				displayMaster.slice() :                      // no search                                                          // 7649
				search == 'applied' ?                                                                                              // 7650
					displayFiltered.slice() :                // applied search                                                        // 7651
					$.map( displayMaster, function (el, i) { // removed search                                                        // 7652
						return $.inArray( el, displayFiltered ) === -1 ? el : null;                                                      // 7653
					} );                                                                                                              // 7654
		}                                                                                                                    // 7655
		else if ( order == 'index' || order == 'original' ) {                                                                // 7656
			for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {                                                             // 7657
				if ( search == 'none' ) {                                                                                          // 7658
					a.push( i );                                                                                                      // 7659
				}                                                                                                                  // 7660
				else { // applied | removed                                                                                        // 7661
					tmp = $.inArray( i, displayFiltered );                                                                            // 7662
	                                                                                                                      // 7663
					if ((tmp === -1 && search == 'removed') ||                                                                        // 7664
						(tmp >= 0   && search == 'applied') )                                                                            // 7665
					{                                                                                                                 // 7666
						a.push( i );                                                                                                     // 7667
					}                                                                                                                 // 7668
				}                                                                                                                  // 7669
			}                                                                                                                   // 7670
		}                                                                                                                    // 7671
	                                                                                                                      // 7672
		return a;                                                                                                            // 7673
	};                                                                                                                    // 7674
	                                                                                                                      // 7675
	                                                                                                                      // 7676
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                        // 7677
	 * Rows                                                                                                               // 7678
	 *                                                                                                                    // 7679
	 * {}          - no selector - use all available rows                                                                 // 7680
	 * {integer}   - row aoData index                                                                                     // 7681
	 * {node}      - TR node                                                                                              // 7682
	 * {string}    - jQuery selector to apply to the TR elements                                                          // 7683
	 * {array}     - jQuery array of nodes, or simply an array of TR nodes                                                // 7684
	 *                                                                                                                    // 7685
	 */                                                                                                                   // 7686
	                                                                                                                      // 7687
	                                                                                                                      // 7688
	var __row_selector = function ( settings, selector, opts )                                                            // 7689
	{                                                                                                                     // 7690
		var run = function ( sel ) {                                                                                         // 7691
			var selInt = _intVal( sel );                                                                                        // 7692
			var i, ien;                                                                                                         // 7693
	                                                                                                                      // 7694
			// Short cut - selector is a number and no options provided (default is                                             // 7695
			// all records, so no need to check if the index is in there, since it                                              // 7696
			// must be - dev error if the index doesn't exist).                                                                 // 7697
			if ( selInt !== null && ! opts ) {                                                                                  // 7698
				return [ selInt ];                                                                                                 // 7699
			}                                                                                                                   // 7700
	                                                                                                                      // 7701
			var rows = _selector_row_indexes( settings, opts );                                                                 // 7702
	                                                                                                                      // 7703
			if ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {                                                        // 7704
				// Selector - integer                                                                                              // 7705
				return [ selInt ];                                                                                                 // 7706
			}                                                                                                                   // 7707
			else if ( ! sel ) {                                                                                                 // 7708
				// Selector - none                                                                                                 // 7709
				return rows;                                                                                                       // 7710
			}                                                                                                                   // 7711
	                                                                                                                      // 7712
			// Selector - function                                                                                              // 7713
			if ( typeof sel === 'function' ) {                                                                                  // 7714
				return $.map( rows, function (idx) {                                                                               // 7715
					var row = settings.aoData[ idx ];                                                                                 // 7716
					return sel( idx, row._aData, row.nTr ) ? idx : null;                                                              // 7717
				} );                                                                                                               // 7718
			}                                                                                                                   // 7719
	                                                                                                                      // 7720
			// Get nodes in the order from the `rows` array with null values removed                                            // 7721
			var nodes = _removeEmpty(                                                                                           // 7722
				_pluck_order( settings.aoData, rows, 'nTr' )                                                                       // 7723
			);                                                                                                                  // 7724
	                                                                                                                      // 7725
			// Selector - node                                                                                                  // 7726
			if ( sel.nodeName ) {                                                                                               // 7727
				if ( $.inArray( sel, nodes ) !== -1 ) {                                                                            // 7728
					return [ sel._DT_RowIndex ]; // sel is a TR node that is in the table                                             // 7729
					                             // and DataTables adds a prop for fast lookup                                        // 7730
				}                                                                                                                  // 7731
			}                                                                                                                   // 7732
	                                                                                                                      // 7733
			// Selector - jQuery selector string, array of nodes or jQuery object/                                              // 7734
			// As jQuery's .filter() allows jQuery objects to be passed in filter,                                              // 7735
			// it also allows arrays, so this will cope with all three options                                                  // 7736
			return $(nodes)                                                                                                     // 7737
				.filter( sel )                                                                                                     // 7738
				.map( function () {                                                                                                // 7739
					return this._DT_RowIndex;                                                                                         // 7740
				} )                                                                                                                // 7741
				.toArray();                                                                                                        // 7742
		};                                                                                                                   // 7743
	                                                                                                                      // 7744
		return _selector_run( 'row', selector, run, settings, opts );                                                        // 7745
	};                                                                                                                    // 7746
	                                                                                                                      // 7747
	                                                                                                                      // 7748
	_api_register( 'rows()', function ( selector, opts ) {                                                                // 7749
		// argument shifting                                                                                                 // 7750
		if ( selector === undefined ) {                                                                                      // 7751
			selector = '';                                                                                                      // 7752
		}                                                                                                                    // 7753
		else if ( $.isPlainObject( selector ) ) {                                                                            // 7754
			opts = selector;                                                                                                    // 7755
			selector = '';                                                                                                      // 7756
		}                                                                                                                    // 7757
	                                                                                                                      // 7758
		opts = _selector_opts( opts );                                                                                       // 7759
	                                                                                                                      // 7760
		var inst = this.iterator( 'table', function ( settings ) {                                                           // 7761
			return __row_selector( settings, selector, opts );                                                                  // 7762
		}, 1 );                                                                                                              // 7763
	                                                                                                                      // 7764
		// Want argument shifting here and in __row_selector?                                                                // 7765
		inst.selector.rows = selector;                                                                                       // 7766
		inst.selector.opts = opts;                                                                                           // 7767
	                                                                                                                      // 7768
		return inst;                                                                                                         // 7769
	} );                                                                                                                  // 7770
	                                                                                                                      // 7771
	_api_register( 'rows().nodes()', function () {                                                                        // 7772
		return this.iterator( 'row', function ( settings, row ) {                                                            // 7773
			return settings.aoData[ row ].nTr || undefined;                                                                     // 7774
		}, 1 );                                                                                                              // 7775
	} );                                                                                                                  // 7776
	                                                                                                                      // 7777
	_api_register( 'rows().data()', function () {                                                                         // 7778
		return this.iterator( true, 'rows', function ( settings, rows ) {                                                    // 7779
			return _pluck_order( settings.aoData, rows, '_aData' );                                                             // 7780
		}, 1 );                                                                                                              // 7781
	} );                                                                                                                  // 7782
	                                                                                                                      // 7783
	_api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {                                           // 7784
		return this.iterator( 'row', function ( settings, row ) {                                                            // 7785
			var r = settings.aoData[ row ];                                                                                     // 7786
			return type === 'search' ? r._aFilterData : r._aSortData;                                                           // 7787
		}, 1 );                                                                                                              // 7788
	} );                                                                                                                  // 7789
	                                                                                                                      // 7790
	_api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {                                  // 7791
		return this.iterator( 'row', function ( settings, row ) {                                                            // 7792
			_fnInvalidate( settings, row, src );                                                                                // 7793
		} );                                                                                                                 // 7794
	} );                                                                                                                  // 7795
	                                                                                                                      // 7796
	_api_registerPlural( 'rows().indexes()', 'row().index()', function () {                                               // 7797
		return this.iterator( 'row', function ( settings, row ) {                                                            // 7798
			return row;                                                                                                         // 7799
		}, 1 );                                                                                                              // 7800
	} );                                                                                                                  // 7801
	                                                                                                                      // 7802
	_api_registerPlural( 'rows().remove()', 'row().remove()', function () {                                               // 7803
		var that = this;                                                                                                     // 7804
	                                                                                                                      // 7805
		return this.iterator( 'row', function ( settings, row, thatIdx ) {                                                   // 7806
			var data = settings.aoData;                                                                                         // 7807
	                                                                                                                      // 7808
			data.splice( row, 1 );                                                                                              // 7809
	                                                                                                                      // 7810
			// Update the _DT_RowIndex parameter on all rows in the table                                                       // 7811
			for ( var i=0, ien=data.length ; i<ien ; i++ ) {                                                                    // 7812
				if ( data[i].nTr !== null ) {                                                                                      // 7813
					data[i].nTr._DT_RowIndex = i;                                                                                     // 7814
				}                                                                                                                  // 7815
			}                                                                                                                   // 7816
	                                                                                                                      // 7817
			// Remove the target row from the search array                                                                      // 7818
			var displayIndex = $.inArray( row, settings.aiDisplay );                                                            // 7819
	                                                                                                                      // 7820
			// Delete from the display arrays                                                                                   // 7821
			_fnDeleteIndex( settings.aiDisplayMaster, row );                                                                    // 7822
			_fnDeleteIndex( settings.aiDisplay, row );                                                                          // 7823
			_fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes                                            // 7824
	                                                                                                                      // 7825
			// Check for an 'overflow' they case for displaying the table                                                       // 7826
			_fnLengthOverflow( settings );                                                                                      // 7827
		} );                                                                                                                 // 7828
	} );                                                                                                                  // 7829
	                                                                                                                      // 7830
	                                                                                                                      // 7831
	_api_register( 'rows.add()', function ( rows ) {                                                                      // 7832
		var newRows = this.iterator( 'table', function ( settings ) {                                                        // 7833
				var row, i, ien;                                                                                                   // 7834
				var out = [];                                                                                                      // 7835
	                                                                                                                      // 7836
				for ( i=0, ien=rows.length ; i<ien ; i++ ) {                                                                       // 7837
					row = rows[i];                                                                                                    // 7838
	                                                                                                                      // 7839
					if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {                                                      // 7840
						out.push( _fnAddTr( settings, row )[0] );                                                                        // 7841
					}                                                                                                                 // 7842
					else {                                                                                                            // 7843
						out.push( _fnAddData( settings, row ) );                                                                         // 7844
					}                                                                                                                 // 7845
				}                                                                                                                  // 7846
	                                                                                                                      // 7847
				return out;                                                                                                        // 7848
			}, 1 );                                                                                                             // 7849
	                                                                                                                      // 7850
		// Return an Api.rows() extended instance, so rows().nodes() etc can be used                                         // 7851
		var modRows = this.rows( -1 );                                                                                       // 7852
		modRows.pop();                                                                                                       // 7853
		modRows.push.apply( modRows, newRows.toArray() );                                                                    // 7854
	                                                                                                                      // 7855
		return modRows;                                                                                                      // 7856
	} );                                                                                                                  // 7857
	                                                                                                                      // 7858
	                                                                                                                      // 7859
	                                                                                                                      // 7860
	                                                                                                                      // 7861
	                                                                                                                      // 7862
	/**                                                                                                                   // 7863
	 *                                                                                                                    // 7864
	 */                                                                                                                   // 7865
	_api_register( 'row()', function ( selector, opts ) {                                                                 // 7866
		return _selector_first( this.rows( selector, opts ) );                                                               // 7867
	} );                                                                                                                  // 7868
	                                                                                                                      // 7869
	                                                                                                                      // 7870
	_api_register( 'row().data()', function ( data ) {                                                                    // 7871
		var ctx = this.context;                                                                                              // 7872
	                                                                                                                      // 7873
		if ( data === undefined ) {                                                                                          // 7874
			// Get                                                                                                              // 7875
			return ctx.length && this.length ?                                                                                  // 7876
				ctx[0].aoData[ this[0] ]._aData :                                                                                  // 7877
				undefined;                                                                                                         // 7878
		}                                                                                                                    // 7879
	                                                                                                                      // 7880
		// Set                                                                                                               // 7881
		ctx[0].aoData[ this[0] ]._aData = data;                                                                              // 7882
	                                                                                                                      // 7883
		// Automatically invalidate                                                                                          // 7884
		_fnInvalidate( ctx[0], this[0], 'data' );                                                                            // 7885
	                                                                                                                      // 7886
		return this;                                                                                                         // 7887
	} );                                                                                                                  // 7888
	                                                                                                                      // 7889
	                                                                                                                      // 7890
	_api_register( 'row().node()', function () {                                                                          // 7891
		var ctx = this.context;                                                                                              // 7892
	                                                                                                                      // 7893
		return ctx.length && this.length ?                                                                                   // 7894
			ctx[0].aoData[ this[0] ].nTr || null :                                                                              // 7895
			null;                                                                                                               // 7896
	} );                                                                                                                  // 7897
	                                                                                                                      // 7898
	                                                                                                                      // 7899
	_api_register( 'row.add()', function ( row ) {                                                                        // 7900
		// Allow a jQuery object to be passed in - only a single row is added from                                           // 7901
		// it though - the first element in the set                                                                          // 7902
		if ( row instanceof $ && row.length ) {                                                                              // 7903
			row = row[0];                                                                                                       // 7904
		}                                                                                                                    // 7905
	                                                                                                                      // 7906
		var rows = this.iterator( 'table', function ( settings ) {                                                           // 7907
			if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {                                                        // 7908
				return _fnAddTr( settings, row )[0];                                                                               // 7909
			}                                                                                                                   // 7910
			return _fnAddData( settings, row );                                                                                 // 7911
		} );                                                                                                                 // 7912
	                                                                                                                      // 7913
		// Return an Api.rows() extended instance, with the newly added row selected                                         // 7914
		return this.row( rows[0] );                                                                                          // 7915
	} );                                                                                                                  // 7916
	                                                                                                                      // 7917
	                                                                                                                      // 7918
	                                                                                                                      // 7919
	var __details_add = function ( ctx, row, data, klass )                                                                // 7920
	{                                                                                                                     // 7921
		// Convert to array of TR elements                                                                                   // 7922
		var rows = [];                                                                                                       // 7923
		var addRow = function ( r, k ) {                                                                                     // 7924
			// Recursion to allow for arrays of jQuery objects                                                                  // 7925
			if ( $.isArray( r ) || r instanceof $ ) {                                                                           // 7926
				for ( var i=0, ien=r.length ; i<ien ; i++ ) {                                                                      // 7927
					addRow( r[i], k );                                                                                                // 7928
				}                                                                                                                  // 7929
				return;                                                                                                            // 7930
			}                                                                                                                   // 7931
	                                                                                                                      // 7932
			// If we get a TR element, then just add it directly - up to the dev                                                // 7933
			// to add the correct number of columns etc                                                                         // 7934
			if ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {                                                            // 7935
				rows.push( r );                                                                                                    // 7936
			}                                                                                                                   // 7937
			else {                                                                                                              // 7938
				// Otherwise create a row with a wrapper                                                                           // 7939
				var created = $('<tr><td/></tr>').addClass( k );                                                                   // 7940
				$('td', created)                                                                                                   // 7941
					.addClass( k )                                                                                                    // 7942
					.html( r )                                                                                                        // 7943
					[0].colSpan = _fnVisbleColumns( ctx );                                                                            // 7944
	                                                                                                                      // 7945
				rows.push( created[0] );                                                                                           // 7946
			}                                                                                                                   // 7947
		};                                                                                                                   // 7948
	                                                                                                                      // 7949
		addRow( data, klass );                                                                                               // 7950
	                                                                                                                      // 7951
		if ( row._details ) {                                                                                                // 7952
			row._details.remove();                                                                                              // 7953
		}                                                                                                                    // 7954
	                                                                                                                      // 7955
		row._details = $(rows);                                                                                              // 7956
	                                                                                                                      // 7957
		// If the children were already shown, that state should be retained                                                 // 7958
		if ( row._detailsShow ) {                                                                                            // 7959
			row._details.insertAfter( row.nTr );                                                                                // 7960
		}                                                                                                                    // 7961
	};                                                                                                                    // 7962
	                                                                                                                      // 7963
	                                                                                                                      // 7964
	var __details_remove = function ( api, idx )                                                                          // 7965
	{                                                                                                                     // 7966
		var ctx = api.context;                                                                                               // 7967
	                                                                                                                      // 7968
		if ( ctx.length ) {                                                                                                  // 7969
			var row = ctx[0].aoData[ idx !== undefined ? idx : api[0] ];                                                        // 7970
	                                                                                                                      // 7971
			if ( row._details ) {                                                                                               // 7972
				row._details.remove();                                                                                             // 7973
	                                                                                                                      // 7974
				row._detailsShow = undefined;                                                                                      // 7975
				row._details = undefined;                                                                                          // 7976
			}                                                                                                                   // 7977
		}                                                                                                                    // 7978
	};                                                                                                                    // 7979
	                                                                                                                      // 7980
	                                                                                                                      // 7981
	var __details_display = function ( api, show ) {                                                                      // 7982
		var ctx = api.context;                                                                                               // 7983
	                                                                                                                      // 7984
		if ( ctx.length && api.length ) {                                                                                    // 7985
			var row = ctx[0].aoData[ api[0] ];                                                                                  // 7986
	                                                                                                                      // 7987
			if ( row._details ) {                                                                                               // 7988
				row._detailsShow = show;                                                                                           // 7989
	                                                                                                                      // 7990
				if ( show ) {                                                                                                      // 7991
					row._details.insertAfter( row.nTr );                                                                              // 7992
				}                                                                                                                  // 7993
				else {                                                                                                             // 7994
					row._details.detach();                                                                                            // 7995
				}                                                                                                                  // 7996
	                                                                                                                      // 7997
				__details_events( ctx[0] );                                                                                        // 7998
			}                                                                                                                   // 7999
		}                                                                                                                    // 8000
	};                                                                                                                    // 8001
	                                                                                                                      // 8002
	                                                                                                                      // 8003
	var __details_events = function ( settings )                                                                          // 8004
	{                                                                                                                     // 8005
		var api = new _Api( settings );                                                                                      // 8006
		var namespace = '.dt.DT_details';                                                                                    // 8007
		var drawEvent = 'draw'+namespace;                                                                                    // 8008
		var colvisEvent = 'column-visibility'+namespace;                                                                     // 8009
		var destroyEvent = 'destroy'+namespace;                                                                              // 8010
		var data = settings.aoData;                                                                                          // 8011
	                                                                                                                      // 8012
		api.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );                                                           // 8013
	                                                                                                                      // 8014
		if ( _pluck( data, '_details' ).length > 0 ) {                                                                       // 8015
			// On each draw, insert the required elements into the document                                                     // 8016
			api.on( drawEvent, function ( e, ctx ) {                                                                            // 8017
				if ( settings !== ctx ) {                                                                                          // 8018
					return;                                                                                                           // 8019
				}                                                                                                                  // 8020
	                                                                                                                      // 8021
				api.rows( {page:'current'} ).eq(0).each( function (idx) {                                                          // 8022
					// Internal data grab                                                                                             // 8023
					var row = data[ idx ];                                                                                            // 8024
	                                                                                                                      // 8025
					if ( row._detailsShow ) {                                                                                         // 8026
						row._details.insertAfter( row.nTr );                                                                             // 8027
					}                                                                                                                 // 8028
				} );                                                                                                               // 8029
			} );                                                                                                                // 8030
	                                                                                                                      // 8031
			// Column visibility change - update the colspan                                                                    // 8032
			api.on( colvisEvent, function ( e, ctx, idx, vis ) {                                                                // 8033
				if ( settings !== ctx ) {                                                                                          // 8034
					return;                                                                                                           // 8035
				}                                                                                                                  // 8036
	                                                                                                                      // 8037
				// Update the colspan for the details rows (note, only if it already has                                           // 8038
				// a colspan)                                                                                                      // 8039
				var row, visible = _fnVisbleColumns( ctx );                                                                        // 8040
	                                                                                                                      // 8041
				for ( var i=0, ien=data.length ; i<ien ; i++ ) {                                                                   // 8042
					row = data[i];                                                                                                    // 8043
	                                                                                                                      // 8044
					if ( row._details ) {                                                                                             // 8045
						row._details.children('td[colspan]').attr('colspan', visible );                                                  // 8046
					}                                                                                                                 // 8047
				}                                                                                                                  // 8048
			} );                                                                                                                // 8049
	                                                                                                                      // 8050
			// Table destroyed - nuke any child rows                                                                            // 8051
			api.on( destroyEvent, function ( e, ctx ) {                                                                         // 8052
				if ( settings !== ctx ) {                                                                                          // 8053
					return;                                                                                                           // 8054
				}                                                                                                                  // 8055
	                                                                                                                      // 8056
				for ( var i=0, ien=data.length ; i<ien ; i++ ) {                                                                   // 8057
					if ( data[i]._details ) {                                                                                         // 8058
						__details_remove( api, i );                                                                                      // 8059
					}                                                                                                                 // 8060
				}                                                                                                                  // 8061
			} );                                                                                                                // 8062
		}                                                                                                                    // 8063
	};                                                                                                                    // 8064
	                                                                                                                      // 8065
	// Strings for the method names to help minification                                                                  // 8066
	var _emp = '';                                                                                                        // 8067
	var _child_obj = _emp+'row().child';                                                                                  // 8068
	var _child_mth = _child_obj+'()';                                                                                     // 8069
	                                                                                                                      // 8070
	// data can be:                                                                                                       // 8071
	//  tr                                                                                                                // 8072
	//  string                                                                                                            // 8073
	//  jQuery or array of any of the above                                                                               // 8074
	_api_register( _child_mth, function ( data, klass ) {                                                                 // 8075
		var ctx = this.context;                                                                                              // 8076
	                                                                                                                      // 8077
		if ( data === undefined ) {                                                                                          // 8078
			// get                                                                                                              // 8079
			return ctx.length && this.length ?                                                                                  // 8080
				ctx[0].aoData[ this[0] ]._details :                                                                                // 8081
				undefined;                                                                                                         // 8082
		}                                                                                                                    // 8083
		else if ( data === true ) {                                                                                          // 8084
			// show                                                                                                             // 8085
			this.child.show();                                                                                                  // 8086
		}                                                                                                                    // 8087
		else if ( data === false ) {                                                                                         // 8088
			// remove                                                                                                           // 8089
			__details_remove( this );                                                                                           // 8090
		}                                                                                                                    // 8091
		else if ( ctx.length && this.length ) {                                                                              // 8092
			// set                                                                                                              // 8093
			__details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );                                                     // 8094
		}                                                                                                                    // 8095
	                                                                                                                      // 8096
		return this;                                                                                                         // 8097
	} );                                                                                                                  // 8098
	                                                                                                                      // 8099
	                                                                                                                      // 8100
	_api_register( [                                                                                                      // 8101
		_child_obj+'.show()',                                                                                                // 8102
		_child_mth+'.show()' // only when `child()` was called with parameters (without                                      // 8103
	], function ( show ) {   // it returns an object and this method is not executed)                                     // 8104
		__details_display( this, true );                                                                                     // 8105
		return this;                                                                                                         // 8106
	} );                                                                                                                  // 8107
	                                                                                                                      // 8108
	                                                                                                                      // 8109
	_api_register( [                                                                                                      // 8110
		_child_obj+'.hide()',                                                                                                // 8111
		_child_mth+'.hide()' // only when `child()` was called with parameters (without                                      // 8112
	], function () {         // it returns an object and this method is not executed)                                     // 8113
		__details_display( this, false );                                                                                    // 8114
		return this;                                                                                                         // 8115
	} );                                                                                                                  // 8116
	                                                                                                                      // 8117
	                                                                                                                      // 8118
	_api_register( [                                                                                                      // 8119
		_child_obj+'.remove()',                                                                                              // 8120
		_child_mth+'.remove()' // only when `child()` was called with parameters (without                                    // 8121
	], function () {           // it returns an object and this method is not executed)                                   // 8122
		__details_remove( this );                                                                                            // 8123
		return this;                                                                                                         // 8124
	} );                                                                                                                  // 8125
	                                                                                                                      // 8126
	                                                                                                                      // 8127
	_api_register( _child_obj+'.isShown()', function () {                                                                 // 8128
		var ctx = this.context;                                                                                              // 8129
	                                                                                                                      // 8130
		if ( ctx.length && this.length ) {                                                                                   // 8131
			// _detailsShown as false or undefined will fall through to return false                                            // 8132
			return ctx[0].aoData[ this[0] ]._detailsShow || false;                                                              // 8133
		}                                                                                                                    // 8134
		return false;                                                                                                        // 8135
	} );                                                                                                                  // 8136
	                                                                                                                      // 8137
	                                                                                                                      // 8138
	                                                                                                                      // 8139
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                        // 8140
	 * Columns                                                                                                            // 8141
	 *                                                                                                                    // 8142
	 * {integer}           - column index (>=0 count from left, <0 count from right)                                      // 8143
	 * "{integer}:visIdx"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)
	 * "{integer}:visible" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)                       // 8145
	 * "{string}:name"     - column name                                                                                  // 8146
	 * "{string}"          - jQuery selector on column header nodes                                                       // 8147
	 *                                                                                                                    // 8148
	 */                                                                                                                   // 8149
	                                                                                                                      // 8150
	// can be an array of these items, comma separated list, or an array of comma                                         // 8151
	// separated lists                                                                                                    // 8152
	                                                                                                                      // 8153
	var __re_column_selector = /^(.+):(name|visIdx|visible)$/;                                                            // 8154
	                                                                                                                      // 8155
	                                                                                                                      // 8156
	// r1 and r2 are redundant - but it means that the parameters match for the                                           // 8157
	// iterator callback in columns().data()                                                                              // 8158
	var __columnData = function ( settings, column, r1, r2, rows ) {                                                      // 8159
		var a = [];                                                                                                          // 8160
		for ( var row=0, ien=rows.length ; row<ien ; row++ ) {                                                               // 8161
			a.push( _fnGetCellData( settings, rows[row], column ) );                                                            // 8162
		}                                                                                                                    // 8163
		return a;                                                                                                            // 8164
	};                                                                                                                    // 8165
	                                                                                                                      // 8166
	                                                                                                                      // 8167
	var __column_selector = function ( settings, selector, opts )                                                         // 8168
	{                                                                                                                     // 8169
		var                                                                                                                  // 8170
			columns = settings.aoColumns,                                                                                       // 8171
			names = _pluck( columns, 'sName' ),                                                                                 // 8172
			nodes = _pluck( columns, 'nTh' );                                                                                   // 8173
	                                                                                                                      // 8174
		var run = function ( s ) {                                                                                           // 8175
			var selInt = _intVal( s );                                                                                          // 8176
	                                                                                                                      // 8177
			// Selector - all                                                                                                   // 8178
			if ( s === '' ) {                                                                                                   // 8179
				return _range( columns.length );                                                                                   // 8180
			}                                                                                                                   // 8181
			                                                                                                                    // 8182
			// Selector - index                                                                                                 // 8183
			if ( selInt !== null ) {                                                                                            // 8184
				return [ selInt >= 0 ?                                                                                             // 8185
					selInt : // Count from left                                                                                       // 8186
					columns.length + selInt // Count from right (+ because its a negative value)                                      // 8187
				];                                                                                                                 // 8188
			}                                                                                                                   // 8189
			                                                                                                                    // 8190
			// Selector = function                                                                                              // 8191
			if ( typeof s === 'function' ) {                                                                                    // 8192
				var rows = _selector_row_indexes( settings, opts );                                                                // 8193
	                                                                                                                      // 8194
				return $.map( columns, function (col, idx) {                                                                       // 8195
					return s(                                                                                                         // 8196
							idx,                                                                                                            // 8197
							__columnData( settings, idx, 0, 0, rows ),                                                                      // 8198
							nodes[ idx ]                                                                                                    // 8199
						) ? idx : null;                                                                                                  // 8200
				} );                                                                                                               // 8201
			}                                                                                                                   // 8202
	                                                                                                                      // 8203
			// jQuery or string selector                                                                                        // 8204
			var match = typeof s === 'string' ?                                                                                 // 8205
				s.match( __re_column_selector ) :                                                                                  // 8206
				'';                                                                                                                // 8207
	                                                                                                                      // 8208
			if ( match ) {                                                                                                      // 8209
				switch( match[2] ) {                                                                                               // 8210
					case 'visIdx':                                                                                                    // 8211
					case 'visible':                                                                                                   // 8212
						var idx = parseInt( match[1], 10 );                                                                              // 8213
						// Visible index given, convert to column index                                                                  // 8214
						if ( idx < 0 ) {                                                                                                 // 8215
							// Counting from the right                                                                                      // 8216
							var visColumns = $.map( columns, function (col,i) {                                                             // 8217
								return col.bVisible ? i : null;                                                                                // 8218
							} );                                                                                                            // 8219
							return [ visColumns[ visColumns.length + idx ] ];                                                               // 8220
						}                                                                                                                // 8221
						// Counting from the left                                                                                        // 8222
						return [ _fnVisibleToColumnIndex( settings, idx ) ];                                                             // 8223
	                                                                                                                      // 8224
					case 'name':                                                                                                      // 8225
						// match by name. `names` is column index complete and in order                                                  // 8226
						return $.map( names, function (name, i) {                                                                        // 8227
							return name === match[1] ? i : null;                                                                            // 8228
						} );                                                                                                             // 8229
				}                                                                                                                  // 8230
			}                                                                                                                   // 8231
			else {                                                                                                              // 8232
				// jQuery selector on the TH elements for the columns                                                              // 8233
				return $( nodes )                                                                                                  // 8234
					.filter( s )                                                                                                      // 8235
					.map( function () {                                                                                               // 8236
						return $.inArray( this, nodes ); // `nodes` is column index complete and in order                                // 8237
					} )                                                                                                               // 8238
					.toArray();                                                                                                       // 8239
			}                                                                                                                   // 8240
		};                                                                                                                   // 8241
	                                                                                                                      // 8242
		return _selector_run( 'column', selector, run, settings, opts );                                                     // 8243
	};                                                                                                                    // 8244
	                                                                                                                      // 8245
	                                                                                                                      // 8246
	var __setColumnVis = function ( settings, column, vis, recalc ) {                                                     // 8247
		var                                                                                                                  // 8248
			cols = settings.aoColumns,                                                                                          // 8249
			col  = cols[ column ],                                                                                              // 8250
			data = settings.aoData,                                                                                             // 8251
			row, cells, i, ien, tr;                                                                                             // 8252
	                                                                                                                      // 8253
		// Get                                                                                                               // 8254
		if ( vis === undefined ) {                                                                                           // 8255
			return col.bVisible;                                                                                                // 8256
		}                                                                                                                    // 8257
	                                                                                                                      // 8258
		// Set                                                                                                               // 8259
		// No change                                                                                                         // 8260
		if ( col.bVisible === vis ) {                                                                                        // 8261
			return;                                                                                                             // 8262
		}                                                                                                                    // 8263
	                                                                                                                      // 8264
		if ( vis ) {                                                                                                         // 8265
			// Insert column                                                                                                    // 8266
			// Need to decide if we should use appendChild or insertBefore                                                      // 8267
			var insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );                                           // 8268
	                                                                                                                      // 8269
			for ( i=0, ien=data.length ; i<ien ; i++ ) {                                                                        // 8270
				tr = data[i].nTr;                                                                                                  // 8271
				cells = data[i].anCells;                                                                                           // 8272
	                                                                                                                      // 8273
				if ( tr ) {                                                                                                        // 8274
					// insertBefore can act like appendChild if 2nd arg is null                                                       // 8275
					tr.insertBefore( cells[ column ], cells[ insertBefore ] || null );                                                // 8276
				}                                                                                                                  // 8277
			}                                                                                                                   // 8278
		}                                                                                                                    // 8279
		else {                                                                                                               // 8280
			// Remove column                                                                                                    // 8281
			$( _pluck( settings.aoData, 'anCells', column ) ).detach();                                                         // 8282
		}                                                                                                                    // 8283
	                                                                                                                      // 8284
		// Common actions                                                                                                    // 8285
		col.bVisible = vis;                                                                                                  // 8286
		_fnDrawHead( settings, settings.aoHeader );                                                                          // 8287
		_fnDrawHead( settings, settings.aoFooter );                                                                          // 8288
	                                                                                                                      // 8289
		if ( recalc === undefined || recalc ) {                                                                              // 8290
			// Automatically adjust column sizing                                                                               // 8291
			_fnAdjustColumnSizing( settings );                                                                                  // 8292
	                                                                                                                      // 8293
			// Realign columns for scrolling                                                                                    // 8294
			if ( settings.oScroll.sX || settings.oScroll.sY ) {                                                                 // 8295
				_fnScrollDraw( settings );                                                                                         // 8296
			}                                                                                                                   // 8297
		}                                                                                                                    // 8298
	                                                                                                                      // 8299
		_fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis] );                                     // 8300
	                                                                                                                      // 8301
		_fnSaveState( settings );                                                                                            // 8302
	};                                                                                                                    // 8303
	                                                                                                                      // 8304
	                                                                                                                      // 8305
	_api_register( 'columns()', function ( selector, opts ) {                                                             // 8306
		// argument shifting                                                                                                 // 8307
		if ( selector === undefined ) {                                                                                      // 8308
			selector = '';                                                                                                      // 8309
		}                                                                                                                    // 8310
		else if ( $.isPlainObject( selector ) ) {                                                                            // 8311
			opts = selector;                                                                                                    // 8312
			selector = '';                                                                                                      // 8313
		}                                                                                                                    // 8314
	                                                                                                                      // 8315
		opts = _selector_opts( opts );                                                                                       // 8316
	                                                                                                                      // 8317
		var inst = this.iterator( 'table', function ( settings ) {                                                           // 8318
			return __column_selector( settings, selector, opts );                                                               // 8319
		}, 1 );                                                                                                              // 8320
	                                                                                                                      // 8321
		// Want argument shifting here and in _row_selector?                                                                 // 8322
		inst.selector.cols = selector;                                                                                       // 8323
		inst.selector.opts = opts;                                                                                           // 8324
	                                                                                                                      // 8325
		return inst;                                                                                                         // 8326
	} );                                                                                                                  // 8327
	                                                                                                                      // 8328
	_api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {                         // 8329
		return this.iterator( 'column', function ( settings, column ) {                                                      // 8330
			return settings.aoColumns[column].nTh;                                                                              // 8331
		}, 1 );                                                                                                              // 8332
	} );                                                                                                                  // 8333
	                                                                                                                      // 8334
	_api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {                         // 8335
		return this.iterator( 'column', function ( settings, column ) {                                                      // 8336
			return settings.aoColumns[column].nTf;                                                                              // 8337
		}, 1 );                                                                                                              // 8338
	} );                                                                                                                  // 8339
	                                                                                                                      // 8340
	_api_registerPlural( 'columns().data()', 'column().data()', function () {                                             // 8341
		return this.iterator( 'column-rows', __columnData, 1 );                                                              // 8342
	} );                                                                                                                  // 8343
	                                                                                                                      // 8344
	_api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {                                       // 8345
		return this.iterator( 'column', function ( settings, column ) {                                                      // 8346
			return settings.aoColumns[column].mData;                                                                            // 8347
		}, 1 );                                                                                                              // 8348
	} );                                                                                                                  // 8349
	                                                                                                                      // 8350
	_api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {                                     // 8351
		return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {                                     // 8352
			return _pluck_order( settings.aoData, rows,                                                                         // 8353
				type === 'search' ? '_aFilterData' : '_aSortData', column                                                          // 8354
			);                                                                                                                  // 8355
		}, 1 );                                                                                                              // 8356
	} );                                                                                                                  // 8357
	                                                                                                                      // 8358
	_api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {                                           // 8359
		return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {                                     // 8360
			return _pluck_order( settings.aoData, rows, 'anCells', column ) ;                                                   // 8361
		}, 1 );                                                                                                              // 8362
	} );                                                                                                                  // 8363
	                                                                                                                      // 8364
	_api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {                            // 8365
		return this.iterator( 'column', function ( settings, column ) {                                                      // 8366
			if ( vis === undefined ) {                                                                                          // 8367
				return settings.aoColumns[ column ].bVisible;                                                                      // 8368
			} // else                                                                                                           // 8369
			__setColumnVis( settings, column, vis, calc );                                                                      // 8370
		} );                                                                                                                 // 8371
	} );                                                                                                                  // 8372
	                                                                                                                      // 8373
	_api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {                                   // 8374
		return this.iterator( 'column', function ( settings, column ) {                                                      // 8375
			return type === 'visible' ?                                                                                         // 8376
				_fnColumnIndexToVisible( settings, column ) :                                                                      // 8377
				column;                                                                                                            // 8378
		}, 1 );                                                                                                              // 8379
	} );                                                                                                                  // 8380
	                                                                                                                      // 8381
	_api_register( 'columns.adjust()', function () {                                                                      // 8382
		return this.iterator( 'table', function ( settings ) {                                                               // 8383
			_fnAdjustColumnSizing( settings );                                                                                  // 8384
		}, 1 );                                                                                                              // 8385
	} );                                                                                                                  // 8386
	                                                                                                                      // 8387
	_api_register( 'column.index()', function ( type, idx ) {                                                             // 8388
		if ( this.context.length !== 0 ) {                                                                                   // 8389
			var ctx = this.context[0];                                                                                          // 8390
	                                                                                                                      // 8391
			if ( type === 'fromVisible' || type === 'toData' ) {                                                                // 8392
				return _fnVisibleToColumnIndex( ctx, idx );                                                                        // 8393
			}                                                                                                                   // 8394
			else if ( type === 'fromData' || type === 'toVisible' ) {                                                           // 8395
				return _fnColumnIndexToVisible( ctx, idx );                                                                        // 8396
			}                                                                                                                   // 8397
		}                                                                                                                    // 8398
	} );                                                                                                                  // 8399
	                                                                                                                      // 8400
	_api_register( 'column()', function ( selector, opts ) {                                                              // 8401
		return _selector_first( this.columns( selector, opts ) );                                                            // 8402
	} );                                                                                                                  // 8403
	                                                                                                                      // 8404
	                                                                                                                      // 8405
	                                                                                                                      // 8406
	                                                                                                                      // 8407
	var __cell_selector = function ( settings, selector, opts )                                                           // 8408
	{                                                                                                                     // 8409
		var data = settings.aoData;                                                                                          // 8410
		var rows = _selector_row_indexes( settings, opts );                                                                  // 8411
		var cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );                                                   // 8412
		var allCells = $( [].concat.apply([], cells) );                                                                      // 8413
		var row;                                                                                                             // 8414
		var columns = settings.aoColumns.length;                                                                             // 8415
		var a, i, ien, j, o, host;                                                                                           // 8416
	                                                                                                                      // 8417
		var run = function ( s ) {                                                                                           // 8418
			var fnSelector = typeof s === 'function';                                                                           // 8419
	                                                                                                                      // 8420
			if ( s === null || s === undefined || fnSelector ) {                                                                // 8421
				// All cells and function selectors                                                                                // 8422
				a = [];                                                                                                            // 8423
	                                                                                                                      // 8424
				for ( i=0, ien=rows.length ; i<ien ; i++ ) {                                                                       // 8425
					row = rows[i];                                                                                                    // 8426
	                                                                                                                      // 8427
					for ( j=0 ; j<columns ; j++ ) {                                                                                   // 8428
						o = {                                                                                                            // 8429
							row: row,                                                                                                       // 8430
							column: j                                                                                                       // 8431
						};                                                                                                               // 8432
	                                                                                                                      // 8433
						if ( fnSelector ) {                                                                                              // 8434
							// Selector - function                                                                                          // 8435
							host = settings.aoData[ row ];                                                                                  // 8436
	                                                                                                                      // 8437
							if ( s( o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null ) ) {                        // 8438
								a.push( o );                                                                                                   // 8439
							}                                                                                                               // 8440
						}                                                                                                                // 8441
						else {                                                                                                           // 8442
							// Selector - all                                                                                               // 8443
							a.push( o );                                                                                                    // 8444
						}                                                                                                                // 8445
					}                                                                                                                 // 8446
				}                                                                                                                  // 8447
	                                                                                                                      // 8448
				return a;                                                                                                          // 8449
			}                                                                                                                   // 8450
			                                                                                                                    // 8451
			// Selector - index                                                                                                 // 8452
			if ( $.isPlainObject( s ) ) {                                                                                       // 8453
				return [s];                                                                                                        // 8454
			}                                                                                                                   // 8455
	                                                                                                                      // 8456
			// Selector - jQuery filtered cells                                                                                 // 8457
			return allCells                                                                                                     // 8458
				.filter( s )                                                                                                       // 8459
				.map( function (i, el) {                                                                                           // 8460
					row = el.parentNode._DT_RowIndex;                                                                                 // 8461
	                                                                                                                      // 8462
					return {                                                                                                          // 8463
						row: row,                                                                                                        // 8464
						column: $.inArray( el, data[ row ].anCells )                                                                     // 8465
					};                                                                                                                // 8466
				} )                                                                                                                // 8467
				.toArray();                                                                                                        // 8468
		};                                                                                                                   // 8469
	                                                                                                                      // 8470
		return _selector_run( 'cell', selector, run, settings, opts );                                                       // 8471
	};                                                                                                                    // 8472
	                                                                                                                      // 8473
	                                                                                                                      // 8474
	                                                                                                                      // 8475
	                                                                                                                      // 8476
	_api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {                                            // 8477
		// Argument shifting                                                                                                 // 8478
		if ( $.isPlainObject( rowSelector ) ) {                                                                              // 8479
			// Indexes                                                                                                          // 8480
			if ( rowSelector.row === undefined ) {                                                                              // 8481
				// Selector options in first parameter                                                                             // 8482
				opts = rowSelector;                                                                                                // 8483
				rowSelector = null;                                                                                                // 8484
			}                                                                                                                   // 8485
			else {                                                                                                              // 8486
				// Cell index objects in first parameter                                                                           // 8487
				opts = columnSelector;                                                                                             // 8488
				columnSelector = null;                                                                                             // 8489
			}                                                                                                                   // 8490
		}                                                                                                                    // 8491
		if ( $.isPlainObject( columnSelector ) ) {                                                                           // 8492
			opts = columnSelector;                                                                                              // 8493
			columnSelector = null;                                                                                              // 8494
		}                                                                                                                    // 8495
	                                                                                                                      // 8496
		// Cell selector                                                                                                     // 8497
		if ( columnSelector === null || columnSelector === undefined ) {                                                     // 8498
			return this.iterator( 'table', function ( settings ) {                                                              // 8499
				return __cell_selector( settings, rowSelector, _selector_opts( opts ) );                                           // 8500
			} );                                                                                                                // 8501
		}                                                                                                                    // 8502
	                                                                                                                      // 8503
		// Row + column selector                                                                                             // 8504
		var columns = this.columns( columnSelector, opts );                                                                  // 8505
		var rows = this.rows( rowSelector, opts );                                                                           // 8506
		var a, i, ien, j, jen;                                                                                               // 8507
	                                                                                                                      // 8508
		var cells = this.iterator( 'table', function ( settings, idx ) {                                                     // 8509
			a = [];                                                                                                             // 8510
	                                                                                                                      // 8511
			for ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {                                                                   // 8512
				for ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {                                                               // 8513
					a.push( {                                                                                                         // 8514
						row:    rows[idx][i],                                                                                            // 8515
						column: columns[idx][j]                                                                                          // 8516
					} );                                                                                                              // 8517
				}                                                                                                                  // 8518
			}                                                                                                                   // 8519
	                                                                                                                      // 8520
			return a;                                                                                                           // 8521
		}, 1 );                                                                                                              // 8522
	                                                                                                                      // 8523
		$.extend( cells.selector, {                                                                                          // 8524
			cols: columnSelector,                                                                                               // 8525
			rows: rowSelector,                                                                                                  // 8526
			opts: opts                                                                                                          // 8527
		} );                                                                                                                 // 8528
	                                                                                                                      // 8529
		return cells;                                                                                                        // 8530
	} );                                                                                                                  // 8531
	                                                                                                                      // 8532
	                                                                                                                      // 8533
	_api_registerPlural( 'cells().nodes()', 'cell().node()', function () {                                                // 8534
		return this.iterator( 'cell', function ( settings, row, column ) {                                                   // 8535
			var cells = settings.aoData[ row ].anCells;                                                                         // 8536
			return cells ?                                                                                                      // 8537
				cells[ column ] :                                                                                                  // 8538
				undefined;                                                                                                         // 8539
		}, 1 );                                                                                                              // 8540
	} );                                                                                                                  // 8541
	                                                                                                                      // 8542
	                                                                                                                      // 8543
	_api_register( 'cells().data()', function () {                                                                        // 8544
		return this.iterator( 'cell', function ( settings, row, column ) {                                                   // 8545
			return _fnGetCellData( settings, row, column );                                                                     // 8546
		}, 1 );                                                                                                              // 8547
	} );                                                                                                                  // 8548
	                                                                                                                      // 8549
	                                                                                                                      // 8550
	_api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {                                         // 8551
		type = type === 'search' ? '_aFilterData' : '_aSortData';                                                            // 8552
	                                                                                                                      // 8553
		return this.iterator( 'cell', function ( settings, row, column ) {                                                   // 8554
			return settings.aoData[ row ][ type ][ column ];                                                                    // 8555
		}, 1 );                                                                                                              // 8556
	} );                                                                                                                  // 8557
	                                                                                                                      // 8558
	                                                                                                                      // 8559
	_api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {                                       // 8560
		return this.iterator( 'cell', function ( settings, row, column ) {                                                   // 8561
			return _fnGetCellData( settings, row, column, type );                                                               // 8562
		}, 1 );                                                                                                              // 8563
	} );                                                                                                                  // 8564
	                                                                                                                      // 8565
	                                                                                                                      // 8566
	_api_registerPlural( 'cells().indexes()', 'cell().index()', function () {                                             // 8567
		return this.iterator( 'cell', function ( settings, row, column ) {                                                   // 8568
			return {                                                                                                            // 8569
				row: row,                                                                                                          // 8570
				column: column,                                                                                                    // 8571
				columnVisible: _fnColumnIndexToVisible( settings, column )                                                         // 8572
			};                                                                                                                  // 8573
		}, 1 );                                                                                                              // 8574
	} );                                                                                                                  // 8575
	                                                                                                                      // 8576
	                                                                                                                      // 8577
	_api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {                                // 8578
		return this.iterator( 'cell', function ( settings, row, column ) {                                                   // 8579
			_fnInvalidate( settings, row, src, column );                                                                        // 8580
		} );                                                                                                                 // 8581
	} );                                                                                                                  // 8582
	                                                                                                                      // 8583
	                                                                                                                      // 8584
	                                                                                                                      // 8585
	_api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {                                             // 8586
		return _selector_first( this.cells( rowSelector, columnSelector, opts ) );                                           // 8587
	} );                                                                                                                  // 8588
	                                                                                                                      // 8589
	                                                                                                                      // 8590
	_api_register( 'cell().data()', function ( data ) {                                                                   // 8591
		var ctx = this.context;                                                                                              // 8592
		var cell = this[0];                                                                                                  // 8593
	                                                                                                                      // 8594
		if ( data === undefined ) {                                                                                          // 8595
			// Get                                                                                                              // 8596
			return ctx.length && cell.length ?                                                                                  // 8597
				_fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :                                                            // 8598
				undefined;                                                                                                         // 8599
		}                                                                                                                    // 8600
	                                                                                                                      // 8601
		// Set                                                                                                               // 8602
		_fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );                                                         // 8603
		_fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );                                                        // 8604
	                                                                                                                      // 8605
		return this;                                                                                                         // 8606
	} );                                                                                                                  // 8607
	                                                                                                                      // 8608
	                                                                                                                      // 8609
	                                                                                                                      // 8610
	/**                                                                                                                   // 8611
	 * Get current ordering (sorting) that has been applied to the table.                                                 // 8612
	 *                                                                                                                    // 8613
	 * @returns {array} 2D array containing the sorting information for the first                                         // 8614
	 *   table in the current context. Each element in the parent array represents                                        // 8615
	 *   a column being sorted upon (i.e. multi-sorting with two columns would have                                       // 8616
	 *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is                                         // 8617
	 *   the column index that the sorting condition applies to, the second is the                                        // 8618
	 *   direction of the sort (`desc` or `asc`) and, optionally, the third is the                                        // 8619
	 *   index of the sorting order from the `column.sorting` initialisation array.                                       // 8620
	 *//**                                                                                                                // 8621
	 * Set the ordering for the table.                                                                                    // 8622
	 *                                                                                                                    // 8623
	 * @param {integer} order Column index to sort upon.                                                                  // 8624
	 * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)                                    // 8625
	 * @returns {DataTables.Api} this                                                                                     // 8626
	 *//**                                                                                                                // 8627
	 * Set the ordering for the table.                                                                                    // 8628
	 *                                                                                                                    // 8629
	 * @param {array} order 1D array of sorting information to be applied.                                                // 8630
	 * @param {array} [...] Optional additional sorting conditions                                                        // 8631
	 * @returns {DataTables.Api} this                                                                                     // 8632
	 *//**                                                                                                                // 8633
	 * Set the ordering for the table.                                                                                    // 8634
	 *                                                                                                                    // 8635
	 * @param {array} order 2D array of sorting information to be applied.                                                // 8636
	 * @returns {DataTables.Api} this                                                                                     // 8637
	 */                                                                                                                   // 8638
	_api_register( 'order()', function ( order, dir ) {                                                                   // 8639
		var ctx = this.context;                                                                                              // 8640
	                                                                                                                      // 8641
		if ( order === undefined ) {                                                                                         // 8642
			// get                                                                                                              // 8643
			return ctx.length !== 0 ?                                                                                           // 8644
				ctx[0].aaSorting :                                                                                                 // 8645
				undefined;                                                                                                         // 8646
		}                                                                                                                    // 8647
	                                                                                                                      // 8648
		// set                                                                                                               // 8649
		if ( typeof order === 'number' ) {                                                                                   // 8650
			// Simple column / direction passed in                                                                              // 8651
			order = [ [ order, dir ] ];                                                                                         // 8652
		}                                                                                                                    // 8653
		else if ( ! $.isArray( order[0] ) ) {                                                                                // 8654
			// Arguments passed in (list of 1D arrays)                                                                          // 8655
			order = Array.prototype.slice.call( arguments );                                                                    // 8656
		}                                                                                                                    // 8657
		// otherwise a 2D array was passed in                                                                                // 8658
	                                                                                                                      // 8659
		return this.iterator( 'table', function ( settings ) {                                                               // 8660
			settings.aaSorting = order.slice();                                                                                 // 8661
		} );                                                                                                                 // 8662
	} );                                                                                                                  // 8663
	                                                                                                                      // 8664
	                                                                                                                      // 8665
	/**                                                                                                                   // 8666
	 * Attach a sort listener to an element for a given column                                                            // 8667
	 *                                                                                                                    // 8668
	 * @param {node|jQuery|string} node Identifier for the element(s) to attach the                                       // 8669
	 *   listener to. This can take the form of a single DOM node, a jQuery                                               // 8670
	 *   collection of nodes or a jQuery selector which will identify the node(s).                                        // 8671
	 * @param {integer} column the column that a click on this node will sort on                                          // 8672
	 * @param {function} [callback] callback function when sort is run                                                    // 8673
	 * @returns {DataTables.Api} this                                                                                     // 8674
	 */                                                                                                                   // 8675
	_api_register( 'order.listener()', function ( node, column, callback ) {                                              // 8676
		return this.iterator( 'table', function ( settings ) {                                                               // 8677
			_fnSortAttachListener( settings, node, column, callback );                                                          // 8678
		} );                                                                                                                 // 8679
	} );                                                                                                                  // 8680
	                                                                                                                      // 8681
	                                                                                                                      // 8682
	// Order by the selected column(s)                                                                                    // 8683
	_api_register( [                                                                                                      // 8684
		'columns().order()',                                                                                                 // 8685
		'column().order()'                                                                                                   // 8686
	], function ( dir ) {                                                                                                 // 8687
		var that = this;                                                                                                     // 8688
	                                                                                                                      // 8689
		return this.iterator( 'table', function ( settings, i ) {                                                            // 8690
			var sort = [];                                                                                                      // 8691
	                                                                                                                      // 8692
			$.each( that[i], function (j, col) {                                                                                // 8693
				sort.push( [ col, dir ] );                                                                                         // 8694
			} );                                                                                                                // 8695
	                                                                                                                      // 8696
			settings.aaSorting = sort;                                                                                          // 8697
		} );                                                                                                                 // 8698
	} );                                                                                                                  // 8699
	                                                                                                                      // 8700
	                                                                                                                      // 8701
	                                                                                                                      // 8702
	_api_register( 'search()', function ( input, regex, smart, caseInsen ) {                                              // 8703
		var ctx = this.context;                                                                                              // 8704
	                                                                                                                      // 8705
		if ( input === undefined ) {                                                                                         // 8706
			// get                                                                                                              // 8707
			return ctx.length !== 0 ?                                                                                           // 8708
				ctx[0].oPreviousSearch.sSearch :                                                                                   // 8709
				undefined;                                                                                                         // 8710
		}                                                                                                                    // 8711
	                                                                                                                      // 8712
		// set                                                                                                               // 8713
		return this.iterator( 'table', function ( settings ) {                                                               // 8714
			if ( ! settings.oFeatures.bFilter ) {                                                                               // 8715
				return;                                                                                                            // 8716
			}                                                                                                                   // 8717
	                                                                                                                      // 8718
			_fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {                                              // 8719
				"sSearch": input+"",                                                                                               // 8720
				"bRegex":  regex === null ? false : regex,                                                                         // 8721
				"bSmart":  smart === null ? true  : smart,                                                                         // 8722
				"bCaseInsensitive": caseInsen === null ? true : caseInsen                                                          // 8723
			} ), 1 );                                                                                                           // 8724
		} );                                                                                                                 // 8725
	} );                                                                                                                  // 8726
	                                                                                                                      // 8727
	                                                                                                                      // 8728
	_api_registerPlural(                                                                                                  // 8729
		'columns().search()',                                                                                                // 8730
		'column().search()',                                                                                                 // 8731
		function ( input, regex, smart, caseInsen ) {                                                                        // 8732
			return this.iterator( 'column', function ( settings, column ) {                                                     // 8733
				var preSearch = settings.aoPreSearchCols;                                                                          // 8734
	                                                                                                                      // 8735
				if ( input === undefined ) {                                                                                       // 8736
					// get                                                                                                            // 8737
					return preSearch[ column ].sSearch;                                                                               // 8738
				}                                                                                                                  // 8739
	                                                                                                                      // 8740
				// set                                                                                                             // 8741
				if ( ! settings.oFeatures.bFilter ) {                                                                              // 8742
					return;                                                                                                           // 8743
				}                                                                                                                  // 8744
	                                                                                                                      // 8745
				$.extend( preSearch[ column ], {                                                                                   // 8746
					"sSearch": input+"",                                                                                              // 8747
					"bRegex":  regex === null ? false : regex,                                                                        // 8748
					"bSmart":  smart === null ? true  : smart,                                                                        // 8749
					"bCaseInsensitive": caseInsen === null ? true : caseInsen                                                         // 8750
				} );                                                                                                               // 8751
	                                                                                                                      // 8752
				_fnFilterComplete( settings, settings.oPreviousSearch, 1 );                                                        // 8753
			} );                                                                                                                // 8754
		}                                                                                                                    // 8755
	);                                                                                                                    // 8756
	                                                                                                                      // 8757
	/*                                                                                                                    // 8758
	 * State API methods                                                                                                  // 8759
	 */                                                                                                                   // 8760
	                                                                                                                      // 8761
	_api_register( 'state()', function () {                                                                               // 8762
		return this.context.length ?                                                                                         // 8763
			this.context[0].oSavedState :                                                                                       // 8764
			null;                                                                                                               // 8765
	} );                                                                                                                  // 8766
	                                                                                                                      // 8767
	                                                                                                                      // 8768
	_api_register( 'state.clear()', function () {                                                                         // 8769
		return this.iterator( 'table', function ( settings ) {                                                               // 8770
			// Save an empty object                                                                                             // 8771
			settings.fnStateSaveCallback.call( settings.oInstance, settings, {} );                                              // 8772
		} );                                                                                                                 // 8773
	} );                                                                                                                  // 8774
	                                                                                                                      // 8775
	                                                                                                                      // 8776
	_api_register( 'state.loaded()', function () {                                                                        // 8777
		return this.context.length ?                                                                                         // 8778
			this.context[0].oLoadedState :                                                                                      // 8779
			null;                                                                                                               // 8780
	} );                                                                                                                  // 8781
	                                                                                                                      // 8782
	                                                                                                                      // 8783
	_api_register( 'state.save()', function () {                                                                          // 8784
		return this.iterator( 'table', function ( settings ) {                                                               // 8785
			_fnSaveState( settings );                                                                                           // 8786
		} );                                                                                                                 // 8787
	} );                                                                                                                  // 8788
	                                                                                                                      // 8789
	                                                                                                                      // 8790
	                                                                                                                      // 8791
	/**                                                                                                                   // 8792
	 * Provide a common method for plug-ins to check the version of DataTables being                                      // 8793
	 * used, in order to ensure compatibility.                                                                            // 8794
	 *                                                                                                                    // 8795
	 *  @param {string} version Version string to check for, in the format "X.Y.Z".                                       // 8796
	 *    Note that the formats "X" and "X.Y" are also acceptable.                                                        // 8797
	 *  @returns {boolean} true if this version of DataTables is greater or equal to                                      // 8798
	 *    the required version, or false if this version of DataTales is not                                              // 8799
	 *    suitable                                                                                                        // 8800
	 *  @static                                                                                                           // 8801
	 *  @dtopt API-Static                                                                                                 // 8802
	 *                                                                                                                    // 8803
	 *  @example                                                                                                          // 8804
	 *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );                                                                // 8805
	 */                                                                                                                   // 8806
	DataTable.versionCheck = DataTable.fnVersionCheck = function( version )                                               // 8807
	{                                                                                                                     // 8808
		var aThis = DataTable.version.split('.');                                                                            // 8809
		var aThat = version.split('.');                                                                                      // 8810
		var iThis, iThat;                                                                                                    // 8811
	                                                                                                                      // 8812
		for ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {                                                                  // 8813
			iThis = parseInt( aThis[i], 10 ) || 0;                                                                              // 8814
			iThat = parseInt( aThat[i], 10 ) || 0;                                                                              // 8815
	                                                                                                                      // 8816
			// Parts are the same, keep comparing                                                                               // 8817
			if (iThis === iThat) {                                                                                              // 8818
				continue;                                                                                                          // 8819
			}                                                                                                                   // 8820
	                                                                                                                      // 8821
			// Parts are different, return immediately                                                                          // 8822
			return iThis > iThat;                                                                                               // 8823
		}                                                                                                                    // 8824
	                                                                                                                      // 8825
		return true;                                                                                                         // 8826
	};                                                                                                                    // 8827
	                                                                                                                      // 8828
	                                                                                                                      // 8829
	/**                                                                                                                   // 8830
	 * Check if a `<table>` node is a DataTable table already or not.                                                     // 8831
	 *                                                                                                                    // 8832
	 *  @param {node|jquery|string} table Table node, jQuery object or jQuery                                             // 8833
	 *      selector for the table to test. Note that if more than more than one                                          // 8834
	 *      table is passed on, only the first will be checked                                                            // 8835
	 *  @returns {boolean} true the table given is a DataTable, or false otherwise                                        // 8836
	 *  @static                                                                                                           // 8837
	 *  @dtopt API-Static                                                                                                 // 8838
	 *                                                                                                                    // 8839
	 *  @example                                                                                                          // 8840
	 *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {                                                             // 8841
	 *      $('#example').dataTable();                                                                                    // 8842
	 *    }                                                                                                               // 8843
	 */                                                                                                                   // 8844
	DataTable.isDataTable = DataTable.fnIsDataTable = function ( table )                                                  // 8845
	{                                                                                                                     // 8846
		var t = $(table).get(0);                                                                                             // 8847
		var is = false;                                                                                                      // 8848
	                                                                                                                      // 8849
		$.each( DataTable.settings, function (i, o) {                                                                        // 8850
			var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;                                                     // 8851
			var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;                                                     // 8852
	                                                                                                                      // 8853
			if ( o.nTable === t || head === t || foot === t ) {                                                                 // 8854
				is = true;                                                                                                         // 8855
			}                                                                                                                   // 8856
		} );                                                                                                                 // 8857
	                                                                                                                      // 8858
		return is;                                                                                                           // 8859
	};                                                                                                                    // 8860
	                                                                                                                      // 8861
	                                                                                                                      // 8862
	/**                                                                                                                   // 8863
	 * Get all DataTable tables that have been initialised - optionally you can                                           // 8864
	 * select to get only currently visible tables.                                                                       // 8865
	 *                                                                                                                    // 8866
	 *  @param {boolean} [visible=false] Flag to indicate if you want all (default)                                       // 8867
	 *    or visible tables only.                                                                                         // 8868
	 *  @returns {array} Array of `table` nodes (not DataTable instances) which are                                       // 8869
	 *    DataTables                                                                                                      // 8870
	 *  @static                                                                                                           // 8871
	 *  @dtopt API-Static                                                                                                 // 8872
	 *                                                                                                                    // 8873
	 *  @example                                                                                                          // 8874
	 *    $.each( $.fn.dataTable.tables(true), function () {                                                              // 8875
	 *      $(table).DataTable().columns.adjust();                                                                        // 8876
	 *    } );                                                                                                            // 8877
	 */                                                                                                                   // 8878
	DataTable.tables = DataTable.fnTables = function ( visible )                                                          // 8879
	{                                                                                                                     // 8880
		return $.map( DataTable.settings, function (o) {                                                                     // 8881
			if ( !visible || (visible && $(o.nTable).is(':visible')) ) {                                                        // 8882
				return o.nTable;                                                                                                   // 8883
			}                                                                                                                   // 8884
		} );                                                                                                                 // 8885
	};                                                                                                                    // 8886
	                                                                                                                      // 8887
	                                                                                                                      // 8888
	/**                                                                                                                   // 8889
	 * DataTables utility methods                                                                                         // 8890
	 *                                                                                                                    // 8891
	 * This namespace provides helper methods that DataTables uses internally to                                          // 8892
	 * create a DataTable, but which are not exclusively used only for DataTables.                                        // 8893
	 * These methods can be used by extension authors to save the duplication of                                          // 8894
	 * code.                                                                                                              // 8895
	 *                                                                                                                    // 8896
	 *  @namespace                                                                                                        // 8897
	 */                                                                                                                   // 8898
	DataTable.util = {                                                                                                    // 8899
		/**                                                                                                                  // 8900
		 * Throttle the calls to a function. Arguments and context are maintained                                            // 8901
		 * for the throttled function.                                                                                       // 8902
		 *                                                                                                                   // 8903
		 * @param {function} fn Function to be called                                                                        // 8904
		 * @param {integer} freq Call frequency in mS                                                                        // 8905
		 * @return {function} Wrapped function                                                                               // 8906
		 */                                                                                                                  // 8907
		throttle: _fnThrottle,                                                                                               // 8908
	                                                                                                                      // 8909
	                                                                                                                      // 8910
		/**                                                                                                                  // 8911
		 * Escape a string such that it can be used in a regular expression                                                  // 8912
		 *                                                                                                                   // 8913
		 *  @param {string} sVal string to escape                                                                            // 8914
		 *  @returns {string} escaped string                                                                                 // 8915
		 */                                                                                                                  // 8916
		escapeRegex: _fnEscapeRegex                                                                                          // 8917
	};                                                                                                                    // 8918
	                                                                                                                      // 8919
	                                                                                                                      // 8920
	/**                                                                                                                   // 8921
	 * Convert from camel case parameters to Hungarian notation. This is made public                                      // 8922
	 * for the extensions to provide the same ability as DataTables core to accept                                        // 8923
	 * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase                                              // 8924
	 * parameters.                                                                                                        // 8925
	 *                                                                                                                    // 8926
	 *  @param {object} src The model object which holds all parameters that can be                                       // 8927
	 *    mapped.                                                                                                         // 8928
	 *  @param {object} user The object to convert from camel case to Hungarian.                                          // 8929
	 *  @param {boolean} force When set to `true`, properties which already have a                                        // 8930
	 *    Hungarian value in the `user` object will be overwritten. Otherwise they                                        // 8931
	 *    won't be.                                                                                                       // 8932
	 */                                                                                                                   // 8933
	DataTable.camelToHungarian = _fnCamelToHungarian;                                                                     // 8934
	                                                                                                                      // 8935
	                                                                                                                      // 8936
	                                                                                                                      // 8937
	/**                                                                                                                   // 8938
	 *                                                                                                                    // 8939
	 */                                                                                                                   // 8940
	_api_register( '$()', function ( selector, opts ) {                                                                   // 8941
		var                                                                                                                  // 8942
			rows   = this.rows( opts ).nodes(), // Get all rows                                                                 // 8943
			jqRows = $(rows);                                                                                                   // 8944
	                                                                                                                      // 8945
		return $( [].concat(                                                                                                 // 8946
			jqRows.filter( selector ).toArray(),                                                                                // 8947
			jqRows.find( selector ).toArray()                                                                                   // 8948
		) );                                                                                                                 // 8949
	} );                                                                                                                  // 8950
	                                                                                                                      // 8951
	                                                                                                                      // 8952
	// jQuery functions to operate on the tables                                                                          // 8953
	$.each( [ 'on', 'one', 'off' ], function (i, key) {                                                                   // 8954
		_api_register( key+'()', function ( /* event, handler */ ) {                                                         // 8955
			var args = Array.prototype.slice.call(arguments);                                                                   // 8956
	                                                                                                                      // 8957
			// Add the `dt` namespace automatically if it isn't already present                                                 // 8958
			if ( ! args[0].match(/\.dt\b/) ) {                                                                                  // 8959
				args[0] += '.dt';                                                                                                  // 8960
			}                                                                                                                   // 8961
	                                                                                                                      // 8962
			var inst = $( this.tables().nodes() );                                                                              // 8963
			inst[key].apply( inst, args );                                                                                      // 8964
			return this;                                                                                                        // 8965
		} );                                                                                                                 // 8966
	} );                                                                                                                  // 8967
	                                                                                                                      // 8968
	                                                                                                                      // 8969
	_api_register( 'clear()', function () {                                                                               // 8970
		return this.iterator( 'table', function ( settings ) {                                                               // 8971
			_fnClearTable( settings );                                                                                          // 8972
		} );                                                                                                                 // 8973
	} );                                                                                                                  // 8974
	                                                                                                                      // 8975
	                                                                                                                      // 8976
	_api_register( 'settings()', function () {                                                                            // 8977
		return new _Api( this.context, this.context );                                                                       // 8978
	} );                                                                                                                  // 8979
	                                                                                                                      // 8980
	                                                                                                                      // 8981
	_api_register( 'init()', function () {                                                                                // 8982
		var ctx = this.context;                                                                                              // 8983
		return ctx.length ? ctx[0].oInit : null;                                                                             // 8984
	} );                                                                                                                  // 8985
	                                                                                                                      // 8986
	                                                                                                                      // 8987
	_api_register( 'data()', function () {                                                                                // 8988
		return this.iterator( 'table', function ( settings ) {                                                               // 8989
			return _pluck( settings.aoData, '_aData' );                                                                         // 8990
		} ).flatten();                                                                                                       // 8991
	} );                                                                                                                  // 8992
	                                                                                                                      // 8993
	                                                                                                                      // 8994
	_api_register( 'destroy()', function ( remove ) {                                                                     // 8995
		remove = remove || false;                                                                                            // 8996
	                                                                                                                      // 8997
		return this.iterator( 'table', function ( settings ) {                                                               // 8998
			var orig      = settings.nTableWrapper.parentNode;                                                                  // 8999
			var classes   = settings.oClasses;                                                                                  // 9000
			var table     = settings.nTable;                                                                                    // 9001
			var tbody     = settings.nTBody;                                                                                    // 9002
			var thead     = settings.nTHead;                                                                                    // 9003
			var tfoot     = settings.nTFoot;                                                                                    // 9004
			var jqTable   = $(table);                                                                                           // 9005
			var jqTbody   = $(tbody);                                                                                           // 9006
			var jqWrapper = $(settings.nTableWrapper);                                                                          // 9007
			var rows      = $.map( settings.aoData, function (r) { return r.nTr; } );                                           // 9008
			var i, ien;                                                                                                         // 9009
	                                                                                                                      // 9010
			// Flag to note that the table is currently being destroyed - no action                                             // 9011
			// should be taken                                                                                                  // 9012
			settings.bDestroying = true;                                                                                        // 9013
	                                                                                                                      // 9014
			// Fire off the destroy callbacks for plug-ins etc                                                                  // 9015
			_fnCallbackFire( settings, "aoDestroyCallback", "destroy", [settings] );                                            // 9016
	                                                                                                                      // 9017
			// If not being removed from the document, make all columns visible                                                 // 9018
			if ( ! remove ) {                                                                                                   // 9019
				new _Api( settings ).columns().visible( true );                                                                    // 9020
			}                                                                                                                   // 9021
	                                                                                                                      // 9022
			// Blitz all `DT` namespaced events (these are internal events, the                                                 // 9023
			// lowercase, `dt` events are user subscribed and they are responsible                                              // 9024
			// for removing them                                                                                                // 9025
			jqWrapper.unbind('.DT').find(':not(tbody *)').unbind('.DT');                                                        // 9026
			$(window).unbind('.DT-'+settings.sInstance);                                                                        // 9027
	                                                                                                                      // 9028
			// When scrolling we had to break the table up - restore it                                                         // 9029
			if ( table != thead.parentNode ) {                                                                                  // 9030
				jqTable.children('thead').detach();                                                                                // 9031
				jqTable.append( thead );                                                                                           // 9032
			}                                                                                                                   // 9033
	                                                                                                                      // 9034
			if ( tfoot && table != tfoot.parentNode ) {                                                                         // 9035
				jqTable.children('tfoot').detach();                                                                                // 9036
				jqTable.append( tfoot );                                                                                           // 9037
			}                                                                                                                   // 9038
	                                                                                                                      // 9039
			// Remove the DataTables generated nodes, events and classes                                                        // 9040
			jqTable.detach();                                                                                                   // 9041
			jqWrapper.detach();                                                                                                 // 9042
	                                                                                                                      // 9043
			settings.aaSorting = [];                                                                                            // 9044
			settings.aaSortingFixed = [];                                                                                       // 9045
			_fnSortingClasses( settings );                                                                                      // 9046
	                                                                                                                      // 9047
			$( rows ).removeClass( settings.asStripeClasses.join(' ') );                                                        // 9048
	                                                                                                                      // 9049
			$('th, td', thead).removeClass( classes.sSortable+' '+                                                              // 9050
				classes.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone                                           // 9051
			);                                                                                                                  // 9052
	                                                                                                                      // 9053
			if ( settings.bJUI ) {                                                                                              // 9054
				$('th span.'+classes.sSortIcon+ ', td span.'+classes.sSortIcon, thead).detach();                                   // 9055
				$('th, td', thead).each( function () {                                                                             // 9056
					var wrapper = $('div.'+classes.sSortJUIWrapper, this);                                                            // 9057
					$(this).append( wrapper.contents() );                                                                             // 9058
					wrapper.detach();                                                                                                 // 9059
				} );                                                                                                               // 9060
			}                                                                                                                   // 9061
	                                                                                                                      // 9062
			if ( ! remove && orig ) {                                                                                           // 9063
				// insertBefore acts like appendChild if !arg[1]                                                                   // 9064
				orig.insertBefore( table, settings.nTableReinsertBefore );                                                         // 9065
			}                                                                                                                   // 9066
	                                                                                                                      // 9067
			// Add the TR elements back into the table in their original order                                                  // 9068
			jqTbody.children().detach();                                                                                        // 9069
			jqTbody.append( rows );                                                                                             // 9070
	                                                                                                                      // 9071
			// Restore the width of the original table - was read from the style property,                                      // 9072
			// so we can restore directly to that                                                                               // 9073
			jqTable                                                                                                             // 9074
				.css( 'width', settings.sDestroyWidth )                                                                            // 9075
				.removeClass( classes.sTable );                                                                                    // 9076
	                                                                                                                      // 9077
			// If the were originally stripe classes - then we add them back here.                                              // 9078
			// Note this is not fool proof (for example if not all rows had stripe                                              // 9079
			// classes - but it's a good effort without getting carried away                                                    // 9080
			ien = settings.asDestroyStripes.length;                                                                             // 9081
	                                                                                                                      // 9082
			if ( ien ) {                                                                                                        // 9083
				jqTbody.children().each( function (i) {                                                                            // 9084
					$(this).addClass( settings.asDestroyStripes[i % ien] );                                                           // 9085
				} );                                                                                                               // 9086
			}                                                                                                                   // 9087
	                                                                                                                      // 9088
			/* Remove the settings object from the settings array */                                                            // 9089
			var idx = $.inArray( settings, DataTable.settings );                                                                // 9090
			if ( idx !== -1 ) {                                                                                                 // 9091
				DataTable.settings.splice( idx, 1 );                                                                               // 9092
			}                                                                                                                   // 9093
		} );                                                                                                                 // 9094
	} );                                                                                                                  // 9095
	                                                                                                                      // 9096
	                                                                                                                      // 9097
	// Add the `every()` method for rows, columns and cells in a compact form                                             // 9098
	$.each( [ 'column', 'row', 'cell' ], function ( i, type ) {                                                           // 9099
		_api_register( type+'s().every()', function ( fn ) {                                                                 // 9100
			return this.iterator( type, function ( settings, idx, idx2 ) {                                                      // 9101
				// idx2 is undefined for rows and columns.                                                                         // 9102
				fn.call( new _Api( settings )[ type ]( idx, idx2 ) );                                                              // 9103
			} );                                                                                                                // 9104
		} );                                                                                                                 // 9105
	} );                                                                                                                  // 9106
	                                                                                                                      // 9107
	                                                                                                                      // 9108
	// i18n method for extensions to be able to use the language object from the                                          // 9109
	// DataTable                                                                                                          // 9110
	_api_register( 'i18n()', function ( token, def, plural ) {                                                            // 9111
		var ctx = this.context[0];                                                                                           // 9112
		var resolved = _fnGetObjectDataFn( token )( ctx.oLanguage );                                                         // 9113
	                                                                                                                      // 9114
		if ( resolved === undefined ) {                                                                                      // 9115
			resolved = def;                                                                                                     // 9116
		}                                                                                                                    // 9117
	                                                                                                                      // 9118
		if ( plural !== undefined && $.isPlainObject( resolved ) ) {                                                         // 9119
			resolved = resolved[ plural ] !== undefined ?                                                                       // 9120
				resolved[ plural ] :                                                                                               // 9121
				resolved._;                                                                                                        // 9122
		}                                                                                                                    // 9123
	                                                                                                                      // 9124
		return resolved.replace( '%d', plural ); // nb: plural might be undefined,                                           // 9125
	} );                                                                                                                  // 9126
                                                                                                                       // 9127
	/**                                                                                                                   // 9128
	 * Version string for plug-ins to check compatibility. Allowed format is                                              // 9129
	 * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used                                        // 9130
	 * only for non-release builds. See http://semver.org/ for more information.                                          // 9131
	 *  @member                                                                                                           // 9132
	 *  @type string                                                                                                      // 9133
	 *  @default Version number                                                                                           // 9134
	 */                                                                                                                   // 9135
	DataTable.version = "1.10.7";                                                                                         // 9136
                                                                                                                       // 9137
	/**                                                                                                                   // 9138
	 * Private data store, containing all of the settings objects that are                                                // 9139
	 * created for the tables on a given page.                                                                            // 9140
	 *                                                                                                                    // 9141
	 * Note that the `DataTable.settings` object is aliased to                                                            // 9142
	 * `jQuery.fn.dataTableExt` through which it may be accessed and                                                      // 9143
	 * manipulated, or `jQuery.fn.dataTable.settings`.                                                                    // 9144
	 *  @member                                                                                                           // 9145
	 *  @type array                                                                                                       // 9146
	 *  @default []                                                                                                       // 9147
	 *  @private                                                                                                          // 9148
	 */                                                                                                                   // 9149
	DataTable.settings = [];                                                                                              // 9150
                                                                                                                       // 9151
	/**                                                                                                                   // 9152
	 * Object models container, for the various models that DataTables has                                                // 9153
	 * available to it. These models define the objects that are used to hold                                             // 9154
	 * the active state and configuration of the table.                                                                   // 9155
	 *  @namespace                                                                                                        // 9156
	 */                                                                                                                   // 9157
	DataTable.models = {};                                                                                                // 9158
	                                                                                                                      // 9159
	                                                                                                                      // 9160
	                                                                                                                      // 9161
	/**                                                                                                                   // 9162
	 * Template object for the way in which DataTables holds information about                                            // 9163
	 * search information for the global filter and individual column filters.                                            // 9164
	 *  @namespace                                                                                                        // 9165
	 */                                                                                                                   // 9166
	DataTable.models.oSearch = {                                                                                          // 9167
		/**                                                                                                                  // 9168
		 * Flag to indicate if the filtering should be case insensitive or not                                               // 9169
		 *  @type boolean                                                                                                    // 9170
		 *  @default true                                                                                                    // 9171
		 */                                                                                                                  // 9172
		"bCaseInsensitive": true,                                                                                            // 9173
	                                                                                                                      // 9174
		/**                                                                                                                  // 9175
		 * Applied search term                                                                                               // 9176
		 *  @type string                                                                                                     // 9177
		 *  @default <i>Empty string</i>                                                                                     // 9178
		 */                                                                                                                  // 9179
		"sSearch": "",                                                                                                       // 9180
	                                                                                                                      // 9181
		/**                                                                                                                  // 9182
		 * Flag to indicate if the search term should be interpreted as a                                                    // 9183
		 * regular expression (true) or not (false) and therefore and special                                                // 9184
		 * regex characters escaped.                                                                                         // 9185
		 *  @type boolean                                                                                                    // 9186
		 *  @default false                                                                                                   // 9187
		 */                                                                                                                  // 9188
		"bRegex": false,                                                                                                     // 9189
	                                                                                                                      // 9190
		/**                                                                                                                  // 9191
		 * Flag to indicate if DataTables is to use its smart filtering or not.                                              // 9192
		 *  @type boolean                                                                                                    // 9193
		 *  @default true                                                                                                    // 9194
		 */                                                                                                                  // 9195
		"bSmart": true                                                                                                       // 9196
	};                                                                                                                    // 9197
	                                                                                                                      // 9198
	                                                                                                                      // 9199
	                                                                                                                      // 9200
	                                                                                                                      // 9201
	/**                                                                                                                   // 9202
	 * Template object for the way in which DataTables holds information about                                            // 9203
	 * each individual row. This is the object format used for the settings                                               // 9204
	 * aoData array.                                                                                                      // 9205
	 *  @namespace                                                                                                        // 9206
	 */                                                                                                                   // 9207
	DataTable.models.oRow = {                                                                                             // 9208
		/**                                                                                                                  // 9209
		 * TR element for the row                                                                                            // 9210
		 *  @type node                                                                                                       // 9211
		 *  @default null                                                                                                    // 9212
		 */                                                                                                                  // 9213
		"nTr": null,                                                                                                         // 9214
	                                                                                                                      // 9215
		/**                                                                                                                  // 9216
		 * Array of TD elements for each row. This is null until the row has been                                            // 9217
		 * created.                                                                                                          // 9218
		 *  @type array nodes                                                                                                // 9219
		 *  @default []                                                                                                      // 9220
		 */                                                                                                                  // 9221
		"anCells": null,                                                                                                     // 9222
	                                                                                                                      // 9223
		/**                                                                                                                  // 9224
		 * Data object from the original data source for the row. This is either                                             // 9225
		 * an array if using the traditional form of DataTables, or an object if                                             // 9226
		 * using mData options. The exact type will depend on the passed in                                                  // 9227
		 * data from the data source, or will be an array if using DOM a data                                                // 9228
		 * source.                                                                                                           // 9229
		 *  @type array|object                                                                                               // 9230
		 *  @default []                                                                                                      // 9231
		 */                                                                                                                  // 9232
		"_aData": [],                                                                                                        // 9233
	                                                                                                                      // 9234
		/**                                                                                                                  // 9235
		 * Sorting data cache - this array is ostensibly the same length as the                                              // 9236
		 * number of columns (although each index is generated only as it is                                                 // 9237
		 * needed), and holds the data that is used for sorting each column in the                                           // 9238
		 * row. We do this cache generation at the start of the sort in order that                                           // 9239
		 * the formatting of the sort data need be done only once for each cell                                              // 9240
		 * per sort. This array should not be read from or written to by anything                                            // 9241
		 * other than the master sorting methods.                                                                            // 9242
		 *  @type array                                                                                                      // 9243
		 *  @default null                                                                                                    // 9244
		 *  @private                                                                                                         // 9245
		 */                                                                                                                  // 9246
		"_aSortData": null,                                                                                                  // 9247
	                                                                                                                      // 9248
		/**                                                                                                                  // 9249
		 * Per cell filtering data cache. As per the sort data cache, used to                                                // 9250
		 * increase the performance of the filtering in DataTables                                                           // 9251
		 *  @type array                                                                                                      // 9252
		 *  @default null                                                                                                    // 9253
		 *  @private                                                                                                         // 9254
		 */                                                                                                                  // 9255
		"_aFilterData": null,                                                                                                // 9256
	                                                                                                                      // 9257
		/**                                                                                                                  // 9258
		 * Filtering data cache. This is the same as the cell filtering cache, but                                           // 9259
		 * in this case a string rather than an array. This is easily computed with                                          // 9260
		 * a join on `_aFilterData`, but is provided as a cache so the join isn't                                            // 9261
		 * needed on every search (memory traded for performance)                                                            // 9262
		 *  @type array                                                                                                      // 9263
		 *  @default null                                                                                                    // 9264
		 *  @private                                                                                                         // 9265
		 */                                                                                                                  // 9266
		"_sFilterRow": null,                                                                                                 // 9267
	                                                                                                                      // 9268
		/**                                                                                                                  // 9269
		 * Cache of the class name that DataTables has applied to the row, so we                                             // 9270
		 * can quickly look at this variable rather than needing to do a DOM check                                           // 9271
		 * on className for the nTr property.                                                                                // 9272
		 *  @type string                                                                                                     // 9273
		 *  @default <i>Empty string</i>                                                                                     // 9274
		 *  @private                                                                                                         // 9275
		 */                                                                                                                  // 9276
		"_sRowStripe": "",                                                                                                   // 9277
	                                                                                                                      // 9278
		/**                                                                                                                  // 9279
		 * Denote if the original data source was from the DOM, or the data source                                           // 9280
		 * object. This is used for invalidating data, so DataTables can                                                     // 9281
		 * automatically read data from the original source, unless uninstructed                                             // 9282
		 * otherwise.                                                                                                        // 9283
		 *  @type string                                                                                                     // 9284
		 *  @default null                                                                                                    // 9285
		 *  @private                                                                                                         // 9286
		 */                                                                                                                  // 9287
		"src": null                                                                                                          // 9288
	};                                                                                                                    // 9289
	                                                                                                                      // 9290
	                                                                                                                      // 9291
	/**                                                                                                                   // 9292
	 * Template object for the column information object in DataTables. This object                                       // 9293
	 * is held in the settings aoColumns array and contains all the information that                                      // 9294
	 * DataTables needs about each individual column.                                                                     // 9295
	 *                                                                                                                    // 9296
	 * Note that this object is related to {@link DataTable.defaults.column}                                              // 9297
	 * but this one is the internal data store for DataTables's cache of columns.                                         // 9298
	 * It should NOT be manipulated outside of DataTables. Any configuration should                                       // 9299
	 * be done through the initialisation options.                                                                        // 9300
	 *  @namespace                                                                                                        // 9301
	 */                                                                                                                   // 9302
	DataTable.models.oColumn = {                                                                                          // 9303
		/**                                                                                                                  // 9304
		 * Column index. This could be worked out on-the-fly with $.inArray, but it                                          // 9305
		 * is faster to just hold it as a variable                                                                           // 9306
		 *  @type integer                                                                                                    // 9307
		 *  @default null                                                                                                    // 9308
		 */                                                                                                                  // 9309
		"idx": null,                                                                                                         // 9310
	                                                                                                                      // 9311
		/**                                                                                                                  // 9312
		 * A list of the columns that sorting should occur on when this column                                               // 9313
		 * is sorted. That this property is an array allows multi-column sorting                                             // 9314
		 * to be defined for a column (for example first name / last name columns                                            // 9315
		 * would benefit from this). The values are integers pointing to the                                                 // 9316
		 * columns to be sorted on (typically it will be a single integer pointing                                           // 9317
		 * at itself, but that doesn't need to be the case).                                                                 // 9318
		 *  @type array                                                                                                      // 9319
		 */                                                                                                                  // 9320
		"aDataSort": null,                                                                                                   // 9321
	                                                                                                                      // 9322
		/**                                                                                                                  // 9323
		 * Define the sorting directions that are applied to the column, in sequence                                         // 9324
		 * as the column is repeatedly sorted upon - i.e. the first value is used                                            // 9325
		 * as the sorting direction when the column if first sorted (clicked on).                                            // 9326
		 * Sort it again (click again) and it will move on to the next index.                                                // 9327
		 * Repeat until loop.                                                                                                // 9328
		 *  @type array                                                                                                      // 9329
		 */                                                                                                                  // 9330
		"asSorting": null,                                                                                                   // 9331
	                                                                                                                      // 9332
		/**                                                                                                                  // 9333
		 * Flag to indicate if the column is searchable, and thus should be included                                         // 9334
		 * in the filtering or not.                                                                                          // 9335
		 *  @type boolean                                                                                                    // 9336
		 */                                                                                                                  // 9337
		"bSearchable": null,                                                                                                 // 9338
	                                                                                                                      // 9339
		/**                                                                                                                  // 9340
		 * Flag to indicate if the column is sortable or not.                                                                // 9341
		 *  @type boolean                                                                                                    // 9342
		 */                                                                                                                  // 9343
		"bSortable": null,                                                                                                   // 9344
	                                                                                                                      // 9345
		/**                                                                                                                  // 9346
		 * Flag to indicate if the column is currently visible in the table or not                                           // 9347
		 *  @type boolean                                                                                                    // 9348
		 */                                                                                                                  // 9349
		"bVisible": null,                                                                                                    // 9350
	                                                                                                                      // 9351
		/**                                                                                                                  // 9352
		 * Store for manual type assignment using the `column.type` option. This                                             // 9353
		 * is held in store so we can manipulate the column's `sType` property.                                              // 9354
		 *  @type string                                                                                                     // 9355
		 *  @default null                                                                                                    // 9356
		 *  @private                                                                                                         // 9357
		 */                                                                                                                  // 9358
		"_sManualType": null,                                                                                                // 9359
	                                                                                                                      // 9360
		/**                                                                                                                  // 9361
		 * Flag to indicate if HTML5 data attributes should be used as the data                                              // 9362
		 * source for filtering or sorting. True is either are.                                                              // 9363
		 *  @type boolean                                                                                                    // 9364
		 *  @default false                                                                                                   // 9365
		 *  @private                                                                                                         // 9366
		 */                                                                                                                  // 9367
		"_bAttrSrc": false,                                                                                                  // 9368
	                                                                                                                      // 9369
		/**                                                                                                                  // 9370
		 * Developer definable function that is called whenever a cell is created (Ajax source,                              // 9371
		 * etc) or processed for input (DOM source). This can be used as a compliment to mRender                             // 9372
		 * allowing you to modify the DOM element (add background colour for example) when the                               // 9373
		 * element is available.                                                                                             // 9374
		 *  @type function                                                                                                   // 9375
		 *  @param {element} nTd The TD node that has been created                                                           // 9376
		 *  @param {*} sData The Data for the cell                                                                           // 9377
		 *  @param {array|object} oData The data for the whole row                                                           // 9378
		 *  @param {int} iRow The row index for the aoData data store                                                        // 9379
		 *  @default null                                                                                                    // 9380
		 */                                                                                                                  // 9381
		"fnCreatedCell": null,                                                                                               // 9382
	                                                                                                                      // 9383
		/**                                                                                                                  // 9384
		 * Function to get data from a cell in a column. You should <b>never</b>                                             // 9385
		 * access data directly through _aData internally in DataTables - always use                                         // 9386
		 * the method attached to this property. It allows mData to function as                                              // 9387
		 * required. This function is automatically assigned by the column                                                   // 9388
		 * initialisation method                                                                                             // 9389
		 *  @type function                                                                                                   // 9390
		 *  @param {array|object} oData The data array/object for the array                                                  // 9391
		 *    (i.e. aoData[]._aData)                                                                                         // 9392
		 *  @param {string} sSpecific The specific data type you want to get -                                               // 9393
		 *    'display', 'type' 'filter' 'sort'                                                                              // 9394
		 *  @returns {*} The data for the cell from the given row's data                                                     // 9395
		 *  @default null                                                                                                    // 9396
		 */                                                                                                                  // 9397
		"fnGetData": null,                                                                                                   // 9398
	                                                                                                                      // 9399
		/**                                                                                                                  // 9400
		 * Function to set data for a cell in the column. You should <b>never</b>                                            // 9401
		 * set the data directly to _aData internally in DataTables - always use                                             // 9402
		 * this method. It allows mData to function as required. This function                                               // 9403
		 * is automatically assigned by the column initialisation method                                                     // 9404
		 *  @type function                                                                                                   // 9405
		 *  @param {array|object} oData The data array/object for the array                                                  // 9406
		 *    (i.e. aoData[]._aData)                                                                                         // 9407
		 *  @param {*} sValue Value to set                                                                                   // 9408
		 *  @default null                                                                                                    // 9409
		 */                                                                                                                  // 9410
		"fnSetData": null,                                                                                                   // 9411
	                                                                                                                      // 9412
		/**                                                                                                                  // 9413
		 * Property to read the value for the cells in the column from the data                                              // 9414
		 * source array / object. If null, then the default content is used, if a                                            // 9415
		 * function is given then the return from the function is used.                                                      // 9416
		 *  @type function|int|string|null                                                                                   // 9417
		 *  @default null                                                                                                    // 9418
		 */                                                                                                                  // 9419
		"mData": null,                                                                                                       // 9420
	                                                                                                                      // 9421
		/**                                                                                                                  // 9422
		 * Partner property to mData which is used (only when defined) to get                                                // 9423
		 * the data - i.e. it is basically the same as mData, but without the                                                // 9424
		 * 'set' option, and also the data fed to it is the result from mData.                                               // 9425
		 * This is the rendering method to match the data method of mData.                                                   // 9426
		 *  @type function|int|string|null                                                                                   // 9427
		 *  @default null                                                                                                    // 9428
		 */                                                                                                                  // 9429
		"mRender": null,                                                                                                     // 9430
	                                                                                                                      // 9431
		/**                                                                                                                  // 9432
		 * Unique header TH/TD element for this column - this is what the sorting                                            // 9433
		 * listener is attached to (if sorting is enabled.)                                                                  // 9434
		 *  @type node                                                                                                       // 9435
		 *  @default null                                                                                                    // 9436
		 */                                                                                                                  // 9437
		"nTh": null,                                                                                                         // 9438
	                                                                                                                      // 9439
		/**                                                                                                                  // 9440
		 * Unique footer TH/TD element for this column (if there is one). Not used                                           // 9441
		 * in DataTables as such, but can be used for plug-ins to reference the                                              // 9442
		 * footer for each column.                                                                                           // 9443
		 *  @type node                                                                                                       // 9444
		 *  @default null                                                                                                    // 9445
		 */                                                                                                                  // 9446
		"nTf": null,                                                                                                         // 9447
	                                                                                                                      // 9448
		/**                                                                                                                  // 9449
		 * The class to apply to all TD elements in the table's TBODY for the column                                         // 9450
		 *  @type string                                                                                                     // 9451
		 *  @default null                                                                                                    // 9452
		 */                                                                                                                  // 9453
		"sClass": null,                                                                                                      // 9454
	                                                                                                                      // 9455
		/**                                                                                                                  // 9456
		 * When DataTables calculates the column widths to assign to each column,                                            // 9457
		 * it finds the longest string in each column and then constructs a                                                  // 9458
		 * temporary table and reads the widths from that. The problem with this                                             // 9459
		 * is that "mmm" is much wider then "iiii", but the latter is a longer                                               // 9460
		 * string - thus the calculation can go wrong (doing it properly and putting                                         // 9461
		 * it into an DOM object and measuring that is horribly(!) slow). Thus as                                            // 9462
		 * a "work around" we provide this option. It will append its value to the                                           // 9463
		 * text that is found to be the longest string for the column - i.e. padding.                                        // 9464
		 *  @type string                                                                                                     // 9465
		 */                                                                                                                  // 9466
		"sContentPadding": null,                                                                                             // 9467
	                                                                                                                      // 9468
		/**                                                                                                                  // 9469
		 * Allows a default value to be given for a column's data, and will be used                                          // 9470
		 * whenever a null data source is encountered (this can be because mData                                             // 9471
		 * is set to null, or because the data source itself is null).                                                       // 9472
		 *  @type string                                                                                                     // 9473
		 *  @default null                                                                                                    // 9474
		 */                                                                                                                  // 9475
		"sDefaultContent": null,                                                                                             // 9476
	                                                                                                                      // 9477
		/**                                                                                                                  // 9478
		 * Name for the column, allowing reference to the column by name as well as                                          // 9479
		 * by index (needs a lookup to work by name).                                                                        // 9480
		 *  @type string                                                                                                     // 9481
		 */                                                                                                                  // 9482
		"sName": null,                                                                                                       // 9483
	                                                                                                                      // 9484
		/**                                                                                                                  // 9485
		 * Custom sorting data type - defines which of the available plug-ins in                                             // 9486
		 * afnSortData the custom sorting will use - if any is defined.                                                      // 9487
		 *  @type string                                                                                                     // 9488
		 *  @default std                                                                                                     // 9489
		 */                                                                                                                  // 9490
		"sSortDataType": 'std',                                                                                              // 9491
	                                                                                                                      // 9492
		/**                                                                                                                  // 9493
		 * Class to be applied to the header element when sorting on this column                                             // 9494
		 *  @type string                                                                                                     // 9495
		 *  @default null                                                                                                    // 9496
		 */                                                                                                                  // 9497
		"sSortingClass": null,                                                                                               // 9498
	                                                                                                                      // 9499
		/**                                                                                                                  // 9500
		 * Class to be applied to the header element when sorting on this column -                                           // 9501
		 * when jQuery UI theming is used.                                                                                   // 9502
		 *  @type string                                                                                                     // 9503
		 *  @default null                                                                                                    // 9504
		 */                                                                                                                  // 9505
		"sSortingClassJUI": null,                                                                                            // 9506
	                                                                                                                      // 9507
		/**                                                                                                                  // 9508
		 * Title of the column - what is seen in the TH element (nTh).                                                       // 9509
		 *  @type string                                                                                                     // 9510
		 */                                                                                                                  // 9511
		"sTitle": null,                                                                                                      // 9512
	                                                                                                                      // 9513
		/**                                                                                                                  // 9514
		 * Column sorting and filtering type                                                                                 // 9515
		 *  @type string                                                                                                     // 9516
		 *  @default null                                                                                                    // 9517
		 */                                                                                                                  // 9518
		"sType": null,                                                                                                       // 9519
	                                                                                                                      // 9520
		/**                                                                                                                  // 9521
		 * Width of the column                                                                                               // 9522
		 *  @type string                                                                                                     // 9523
		 *  @default null                                                                                                    // 9524
		 */                                                                                                                  // 9525
		"sWidth": null,                                                                                                      // 9526
	                                                                                                                      // 9527
		/**                                                                                                                  // 9528
		 * Width of the column when it was first "encountered"                                                               // 9529
		 *  @type string                                                                                                     // 9530
		 *  @default null                                                                                                    // 9531
		 */                                                                                                                  // 9532
		"sWidthOrig": null                                                                                                   // 9533
	};                                                                                                                    // 9534
	                                                                                                                      // 9535
	                                                                                                                      // 9536
	/*                                                                                                                    // 9537
	 * Developer note: The properties of the object below are given in Hungarian                                          // 9538
	 * notation, that was used as the interface for DataTables prior to v1.10, however                                    // 9539
	 * from v1.10 onwards the primary interface is camel case. In order to avoid                                          // 9540
	 * breaking backwards compatibility utterly with this change, the Hungarian                                           // 9541
	 * version is still, internally the primary interface, but is is not documented                                       // 9542
	 * - hence the @name tags in each doc comment. This allows a Javascript function                                      // 9543
	 * to create a map from Hungarian notation to camel case (going the other direction                                   // 9544
	 * would require each property to be listed, which would at around 3K to the size                                     // 9545
	 * of DataTables, while this method is about a 0.5K hit.                                                              // 9546
	 *                                                                                                                    // 9547
	 * Ultimately this does pave the way for Hungarian notation to be dropped                                             // 9548
	 * completely, but that is a massive amount of work and will break current                                            // 9549
	 * installs (therefore is on-hold until v2).                                                                          // 9550
	 */                                                                                                                   // 9551
	                                                                                                                      // 9552
	/**                                                                                                                   // 9553
	 * Initialisation options that can be given to DataTables at initialisation                                           // 9554
	 * time.                                                                                                              // 9555
	 *  @namespace                                                                                                        // 9556
	 */                                                                                                                   // 9557
	DataTable.defaults = {                                                                                                // 9558
		/**                                                                                                                  // 9559
		 * An array of data to use for the table, passed in at initialisation which                                          // 9560
		 * will be used in preference to any data which is already in the DOM. This is                                       // 9561
		 * particularly useful for constructing tables purely in Javascript, for                                             // 9562
		 * example with a custom Ajax call.                                                                                  // 9563
		 *  @type array                                                                                                      // 9564
		 *  @default null                                                                                                    // 9565
		 *                                                                                                                   // 9566
		 *  @dtopt Option                                                                                                    // 9567
		 *  @name DataTable.defaults.data                                                                                    // 9568
		 *                                                                                                                   // 9569
		 *  @example                                                                                                         // 9570
		 *    // Using a 2D array data source                                                                                // 9571
		 *    $(document).ready( function () {                                                                               // 9572
		 *      $('#example').dataTable( {                                                                                   // 9573
		 *        "data": [                                                                                                  // 9574
		 *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],                                                 // 9575
		 *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],                                                 // 9576
		 *        ],                                                                                                         // 9577
		 *        "columns": [                                                                                               // 9578
		 *          { "title": "Engine" },                                                                                   // 9579
		 *          { "title": "Browser" },                                                                                  // 9580
		 *          { "title": "Platform" },                                                                                 // 9581
		 *          { "title": "Version" },                                                                                  // 9582
		 *          { "title": "Grade" }                                                                                     // 9583
		 *        ]                                                                                                          // 9584
		 *      } );                                                                                                         // 9585
		 *    } );                                                                                                           // 9586
		 *                                                                                                                   // 9587
		 *  @example                                                                                                         // 9588
		 *    // Using an array of objects as a data source (`data`)                                                         // 9589
		 *    $(document).ready( function () {                                                                               // 9590
		 *      $('#example').dataTable( {                                                                                   // 9591
		 *        "data": [                                                                                                  // 9592
		 *          {                                                                                                        // 9593
		 *            "engine":   "Trident",                                                                                 // 9594
		 *            "browser":  "Internet Explorer 4.0",                                                                   // 9595
		 *            "platform": "Win 95+",                                                                                 // 9596
		 *            "version":  4,                                                                                         // 9597
		 *            "grade":    "X"                                                                                        // 9598
		 *          },                                                                                                       // 9599
		 *          {                                                                                                        // 9600
		 *            "engine":   "Trident",                                                                                 // 9601
		 *            "browser":  "Internet Explorer 5.0",                                                                   // 9602
		 *            "platform": "Win 95+",                                                                                 // 9603
		 *            "version":  5,                                                                                         // 9604
		 *            "grade":    "C"                                                                                        // 9605
		 *          }                                                                                                        // 9606
		 *        ],                                                                                                         // 9607
		 *        "columns": [                                                                                               // 9608
		 *          { "title": "Engine",   "data": "engine" },                                                               // 9609
		 *          { "title": "Browser",  "data": "browser" },                                                              // 9610
		 *          { "title": "Platform", "data": "platform" },                                                             // 9611
		 *          { "title": "Version",  "data": "version" },                                                              // 9612
		 *          { "title": "Grade",    "data": "grade" }                                                                 // 9613
		 *        ]                                                                                                          // 9614
		 *      } );                                                                                                         // 9615
		 *    } );                                                                                                           // 9616
		 */                                                                                                                  // 9617
		"aaData": null,                                                                                                      // 9618
	                                                                                                                      // 9619
	                                                                                                                      // 9620
		/**                                                                                                                  // 9621
		 * If ordering is enabled, then DataTables will perform a first pass sort on                                         // 9622
		 * initialisation. You can define which column(s) the sort is performed                                              // 9623
		 * upon, and the sorting direction, with this variable. The `sorting` array                                          // 9624
		 * should contain an array for each column to be sorted initially containing                                         // 9625
		 * the column's index and a direction string ('asc' or 'desc').                                                      // 9626
		 *  @type array                                                                                                      // 9627
		 *  @default [[0,'asc']]                                                                                             // 9628
		 *                                                                                                                   // 9629
		 *  @dtopt Option                                                                                                    // 9630
		 *  @name DataTable.defaults.order                                                                                   // 9631
		 *                                                                                                                   // 9632
		 *  @example                                                                                                         // 9633
		 *    // Sort by 3rd column first, and then 4th column                                                               // 9634
		 *    $(document).ready( function() {                                                                                // 9635
		 *      $('#example').dataTable( {                                                                                   // 9636
		 *        "order": [[2,'asc'], [3,'desc']]                                                                           // 9637
		 *      } );                                                                                                         // 9638
		 *    } );                                                                                                           // 9639
		 *                                                                                                                   // 9640
		 *    // No initial sorting                                                                                          // 9641
		 *    $(document).ready( function() {                                                                                // 9642
		 *      $('#example').dataTable( {                                                                                   // 9643
		 *        "order": []                                                                                                // 9644
		 *      } );                                                                                                         // 9645
		 *    } );                                                                                                           // 9646
		 */                                                                                                                  // 9647
		"aaSorting": [[0,'asc']],                                                                                            // 9648
	                                                                                                                      // 9649
	                                                                                                                      // 9650
		/**                                                                                                                  // 9651
		 * This parameter is basically identical to the `sorting` parameter, but                                             // 9652
		 * cannot be overridden by user interaction with the table. What this means                                          // 9653
		 * is that you could have a column (visible or hidden) which the sorting                                             // 9654
		 * will always be forced on first - any sorting after that (from the user)                                           // 9655
		 * will then be performed as required. This can be useful for grouping rows                                          // 9656
		 * together.                                                                                                         // 9657
		 *  @type array                                                                                                      // 9658
		 *  @default null                                                                                                    // 9659
		 *                                                                                                                   // 9660
		 *  @dtopt Option                                                                                                    // 9661
		 *  @name DataTable.defaults.orderFixed                                                                              // 9662
		 *                                                                                                                   // 9663
		 *  @example                                                                                                         // 9664
		 *    $(document).ready( function() {                                                                                // 9665
		 *      $('#example').dataTable( {                                                                                   // 9666
		 *        "orderFixed": [[0,'asc']]                                                                                  // 9667
		 *      } );                                                                                                         // 9668
		 *    } )                                                                                                            // 9669
		 */                                                                                                                  // 9670
		"aaSortingFixed": [],                                                                                                // 9671
	                                                                                                                      // 9672
	                                                                                                                      // 9673
		/**                                                                                                                  // 9674
		 * DataTables can be instructed to load data to display in the table from a                                          // 9675
		 * Ajax source. This option defines how that Ajax call is made and where to.                                         // 9676
		 *                                                                                                                   // 9677
		 * The `ajax` property has three different modes of operation, depending on                                          // 9678
		 * how it is defined. These are:                                                                                     // 9679
		 *                                                                                                                   // 9680
		 * * `string` - Set the URL from where the data should be loaded from.                                               // 9681
		 * * `object` - Define properties for `jQuery.ajax`.                                                                 // 9682
		 * * `function` - Custom data get function                                                                           // 9683
		 *                                                                                                                   // 9684
		 * `string`                                                                                                          // 9685
		 * --------                                                                                                          // 9686
		 *                                                                                                                   // 9687
		 * As a string, the `ajax` property simply defines the URL from which                                                // 9688
		 * DataTables will load data.                                                                                        // 9689
		 *                                                                                                                   // 9690
		 * `object`                                                                                                          // 9691
		 * --------                                                                                                          // 9692
		 *                                                                                                                   // 9693
		 * As an object, the parameters in the object are passed to                                                          // 9694
		 * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control                                           // 9695
		 * of the Ajax request. DataTables has a number of default parameters which                                          // 9696
		 * you can override using this option. Please refer to the jQuery                                                    // 9697
		 * documentation for a full description of the options available, although                                           // 9698
		 * the following parameters provide additional options in DataTables or                                              // 9699
		 * require special consideration:                                                                                    // 9700
		 *                                                                                                                   // 9701
		 * * `data` - As with jQuery, `data` can be provided as an object, but it                                            // 9702
		 *   can also be used as a function to manipulate the data DataTables sends                                          // 9703
		 *   to the server. The function takes a single parameter, an object of                                              // 9704
		 *   parameters with the values that DataTables has readied for sending. An                                          // 9705
		 *   object may be returned which will be merged into the DataTables                                                 // 9706
		 *   defaults, or you can add the items to the object that was passed in and                                         // 9707
		 *   not return anything from the function. This supersedes `fnServerParams`                                         // 9708
		 *   from DataTables 1.9-.                                                                                           // 9709
		 *                                                                                                                   // 9710
		 * * `dataSrc` - By default DataTables will look for the property `data` (or                                         // 9711
		 *   `aaData` for compatibility with DataTables 1.9-) when obtaining data                                            // 9712
		 *   from an Ajax source or for server-side processing - this parameter                                              // 9713
		 *   allows that property to be changed. You can use Javascript dotted                                               // 9714
		 *   object notation to get a data source for multiple levels of nesting, or                                         // 9715
		 *   it my be used as a function. As a function it takes a single parameter,                                         // 9716
		 *   the JSON returned from the server, which can be manipulated as                                                  // 9717
		 *   required, with the returned value being that used by DataTables as the                                          // 9718
		 *   data source for the table. This supersedes `sAjaxDataProp` from                                                 // 9719
		 *   DataTables 1.9-.                                                                                                // 9720
		 *                                                                                                                   // 9721
		 * * `success` - Should not be overridden it is used internally in                                                   // 9722
		 *   DataTables. To manipulate / transform the data returned by the server                                           // 9723
		 *   use `ajax.dataSrc`, or use `ajax` as a function (see below).                                                    // 9724
		 *                                                                                                                   // 9725
		 * `function`                                                                                                        // 9726
		 * ----------                                                                                                        // 9727
		 *                                                                                                                   // 9728
		 * As a function, making the Ajax call is left up to yourself allowing                                               // 9729
		 * complete control of the Ajax request. Indeed, if desired, a method other                                          // 9730
		 * than Ajax could be used to obtain the required data, such as Web storage                                          // 9731
		 * or an AIR database.                                                                                               // 9732
		 *                                                                                                                   // 9733
		 * The function is given four parameters and no return is required. The                                              // 9734
		 * parameters are:                                                                                                   // 9735
		 *                                                                                                                   // 9736
		 * 1. _object_ - Data to send to the server                                                                          // 9737
		 * 2. _function_ - Callback function that must be executed when the required                                         // 9738
		 *    data has been obtained. That data should be passed into the callback                                           // 9739
		 *    as the only parameter                                                                                          // 9740
		 * 3. _object_ - DataTables settings object for the table                                                            // 9741
		 *                                                                                                                   // 9742
		 * Note that this supersedes `fnServerData` from DataTables 1.9-.                                                    // 9743
		 *                                                                                                                   // 9744
		 *  @type string|object|function                                                                                     // 9745
		 *  @default null                                                                                                    // 9746
		 *                                                                                                                   // 9747
		 *  @dtopt Option                                                                                                    // 9748
		 *  @name DataTable.defaults.ajax                                                                                    // 9749
		 *  @since 1.10.0                                                                                                    // 9750
		 *                                                                                                                   // 9751
		 * @example                                                                                                          // 9752
		 *   // Get JSON data from a file via Ajax.                                                                          // 9753
		 *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).                             // 9754
		 *   $('#example').dataTable( {                                                                                      // 9755
		 *     "ajax": "data.json"                                                                                           // 9756
		 *   } );                                                                                                            // 9757
		 *                                                                                                                   // 9758
		 * @example                                                                                                          // 9759
		 *   // Get JSON data from a file via Ajax, using `dataSrc` to change                                                // 9760
		 *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)                                                 // 9761
		 *   $('#example').dataTable( {                                                                                      // 9762
		 *     "ajax": {                                                                                                     // 9763
		 *       "url": "data.json",                                                                                         // 9764
		 *       "dataSrc": "tableData"                                                                                      // 9765
		 *     }                                                                                                             // 9766
		 *   } );                                                                                                            // 9767
		 *                                                                                                                   // 9768
		 * @example                                                                                                          // 9769
		 *   // Get JSON data from a file via Ajax, using `dataSrc` to read data                                             // 9770
		 *   // from a plain array rather than an array in an object                                                         // 9771
		 *   $('#example').dataTable( {                                                                                      // 9772
		 *     "ajax": {                                                                                                     // 9773
		 *       "url": "data.json",                                                                                         // 9774
		 *       "dataSrc": ""                                                                                               // 9775
		 *     }                                                                                                             // 9776
		 *   } );                                                                                                            // 9777
		 *                                                                                                                   // 9778
		 * @example                                                                                                          // 9779
		 *   // Manipulate the data returned from the server - add a link to data                                            // 9780
		 *   // (note this can, should, be done using `render` for the column - this                                         // 9781
		 *   // is just a simple example of how the data can be manipulated).                                                // 9782
		 *   $('#example').dataTable( {                                                                                      // 9783
		 *     "ajax": {                                                                                                     // 9784
		 *       "url": "data.json",                                                                                         // 9785
		 *       "dataSrc": function ( json ) {                                                                              // 9786
		 *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {                                                          // 9787
		 *           json[i][0] = '<a href="/message/'+json[i][0]+'>View message</a>';                                       // 9788
		 *         }                                                                                                         // 9789
		 *         return json;                                                                                              // 9790
		 *       }                                                                                                           // 9791
		 *     }                                                                                                             // 9792
		 *   } );                                                                                                            // 9793
		 *                                                                                                                   // 9794
		 * @example                                                                                                          // 9795
		 *   // Add data to the request                                                                                      // 9796
		 *   $('#example').dataTable( {                                                                                      // 9797
		 *     "ajax": {                                                                                                     // 9798
		 *       "url": "data.json",                                                                                         // 9799
		 *       "data": function ( d ) {                                                                                    // 9800
		 *         return {                                                                                                  // 9801
		 *           "extra_search": $('#extra').val()                                                                       // 9802
		 *         };                                                                                                        // 9803
		 *       }                                                                                                           // 9804
		 *     }                                                                                                             // 9805
		 *   } );                                                                                                            // 9806
		 *                                                                                                                   // 9807
		 * @example                                                                                                          // 9808
		 *   // Send request as POST                                                                                         // 9809
		 *   $('#example').dataTable( {                                                                                      // 9810
		 *     "ajax": {                                                                                                     // 9811
		 *       "url": "data.json",                                                                                         // 9812
		 *       "type": "POST"                                                                                              // 9813
		 *     }                                                                                                             // 9814
		 *   } );                                                                                                            // 9815
		 *                                                                                                                   // 9816
		 * @example                                                                                                          // 9817
		 *   // Get the data from localStorage (could interface with a form for                                              // 9818
		 *   // adding, editing and removing rows).                                                                          // 9819
		 *   $('#example').dataTable( {                                                                                      // 9820
		 *     "ajax": function (data, callback, settings) {                                                                 // 9821
		 *       callback(                                                                                                   // 9822
		 *         JSON.parse( localStorage.getItem('dataTablesData') )                                                      // 9823
		 *       );                                                                                                          // 9824
		 *     }                                                                                                             // 9825
		 *   } );                                                                                                            // 9826
		 */                                                                                                                  // 9827
		"ajax": null,                                                                                                        // 9828
	                                                                                                                      // 9829
	                                                                                                                      // 9830
		/**                                                                                                                  // 9831
		 * This parameter allows you to readily specify the entries in the length drop                                       // 9832
		 * down menu that DataTables shows when pagination is enabled. It can be                                             // 9833
		 * either a 1D array of options which will be used for both the displayed                                            // 9834
		 * option and the value, or a 2D array which will use the array in the first                                         // 9835
		 * position as the value, and the array in the second position as the                                                // 9836
		 * displayed options (useful for language strings such as 'All').                                                    // 9837
		 *                                                                                                                   // 9838
		 * Note that the `pageLength` property will be automatically set to the                                              // 9839
		 * first value given in this array, unless `pageLength` is also provided.                                            // 9840
		 *  @type array                                                                                                      // 9841
		 *  @default [ 10, 25, 50, 100 ]                                                                                     // 9842
		 *                                                                                                                   // 9843
		 *  @dtopt Option                                                                                                    // 9844
		 *  @name DataTable.defaults.lengthMenu                                                                              // 9845
		 *                                                                                                                   // 9846
		 *  @example                                                                                                         // 9847
		 *    $(document).ready( function() {                                                                                // 9848
		 *      $('#example').dataTable( {                                                                                   // 9849
		 *        "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]                                                      // 9850
		 *      } );                                                                                                         // 9851
		 *    } );                                                                                                           // 9852
		 */                                                                                                                  // 9853
		"aLengthMenu": [ 10, 25, 50, 100 ],                                                                                  // 9854
	                                                                                                                      // 9855
	                                                                                                                      // 9856
		/**                                                                                                                  // 9857
		 * The `columns` option in the initialisation parameter allows you to define                                         // 9858
		 * details about the way individual columns behave. For a full list of                                               // 9859
		 * column options that can be set, please see                                                                        // 9860
		 * {@link DataTable.defaults.column}. Note that if you use `columns` to                                              // 9861
		 * define your columns, you must have an entry in the array for every single                                         // 9862
		 * column that you have in your table (these can be null if you don't which                                          // 9863
		 * to specify any options).                                                                                          // 9864
		 *  @member                                                                                                          // 9865
		 *                                                                                                                   // 9866
		 *  @name DataTable.defaults.column                                                                                  // 9867
		 */                                                                                                                  // 9868
		"aoColumns": null,                                                                                                   // 9869
	                                                                                                                      // 9870
		/**                                                                                                                  // 9871
		 * Very similar to `columns`, `columnDefs` allows you to target a specific                                           // 9872
		 * column, multiple columns, or all columns, using the `targets` property of                                         // 9873
		 * each object in the array. This allows great flexibility when creating                                             // 9874
		 * tables, as the `columnDefs` arrays can be of any length, targeting the                                            // 9875
		 * columns you specifically want. `columnDefs` may use any of the column                                             // 9876
		 * options available: {@link DataTable.defaults.column}, but it _must_                                               // 9877
		 * have `targets` defined in each object in the array. Values in the `targets`                                       // 9878
		 * array may be:                                                                                                     // 9879
		 *   <ul>                                                                                                            // 9880
		 *     <li>a string - class name will be matched on the TH for the column</li>                                       // 9881
		 *     <li>0 or a positive integer - column index counting from the left</li>                                        // 9882
		 *     <li>a negative integer - column index counting from the right</li>                                            // 9883
		 *     <li>the string "_all" - all columns (i.e. assign a default)</li>                                              // 9884
		 *   </ul>                                                                                                           // 9885
		 *  @member                                                                                                          // 9886
		 *                                                                                                                   // 9887
		 *  @name DataTable.defaults.columnDefs                                                                              // 9888
		 */                                                                                                                  // 9889
		"aoColumnDefs": null,                                                                                                // 9890
	                                                                                                                      // 9891
	                                                                                                                      // 9892
		/**                                                                                                                  // 9893
		 * Basically the same as `search`, this parameter defines the individual column                                      // 9894
		 * filtering state at initialisation time. The array must be of the same size                                        // 9895
		 * as the number of columns, and each element be an object with the parameters                                       // 9896
		 * `search` and `escapeRegex` (the latter is optional). 'null' is also                                               // 9897
		 * accepted and the default will be used.                                                                            // 9898
		 *  @type array                                                                                                      // 9899
		 *  @default []                                                                                                      // 9900
		 *                                                                                                                   // 9901
		 *  @dtopt Option                                                                                                    // 9902
		 *  @name DataTable.defaults.searchCols                                                                              // 9903
		 *                                                                                                                   // 9904
		 *  @example                                                                                                         // 9905
		 *    $(document).ready( function() {                                                                                // 9906
		 *      $('#example').dataTable( {                                                                                   // 9907
		 *        "searchCols": [                                                                                            // 9908
		 *          null,                                                                                                    // 9909
		 *          { "search": "My filter" },                                                                               // 9910
		 *          null,                                                                                                    // 9911
		 *          { "search": "^[0-9]", "escapeRegex": false }                                                             // 9912
		 *        ]                                                                                                          // 9913
		 *      } );                                                                                                         // 9914
		 *    } )                                                                                                            // 9915
		 */                                                                                                                  // 9916
		"aoSearchCols": [],                                                                                                  // 9917
	                                                                                                                      // 9918
	                                                                                                                      // 9919
		/**                                                                                                                  // 9920
		 * An array of CSS classes that should be applied to displayed rows. This                                            // 9921
		 * array may be of any length, and DataTables will apply each class                                                  // 9922
		 * sequentially, looping when required.                                                                              // 9923
		 *  @type array                                                                                                      // 9924
		 *  @default null <i>Will take the values determined by the `oClasses.stripe*`                                       // 9925
		 *    options</i>                                                                                                    // 9926
		 *                                                                                                                   // 9927
		 *  @dtopt Option                                                                                                    // 9928
		 *  @name DataTable.defaults.stripeClasses                                                                           // 9929
		 *                                                                                                                   // 9930
		 *  @example                                                                                                         // 9931
		 *    $(document).ready( function() {                                                                                // 9932
		 *      $('#example').dataTable( {                                                                                   // 9933
		 *        "stripeClasses": [ 'strip1', 'strip2', 'strip3' ]                                                          // 9934
		 *      } );                                                                                                         // 9935
		 *    } )                                                                                                            // 9936
		 */                                                                                                                  // 9937
		"asStripeClasses": null,                                                                                             // 9938
	                                                                                                                      // 9939
	                                                                                                                      // 9940
		/**                                                                                                                  // 9941
		 * Enable or disable automatic column width calculation. This can be disabled                                        // 9942
		 * as an optimisation (it takes some time to calculate the widths) if the                                            // 9943
		 * tables widths are passed in using `columns`.                                                                      // 9944
		 *  @type boolean                                                                                                    // 9945
		 *  @default true                                                                                                    // 9946
		 *                                                                                                                   // 9947
		 *  @dtopt Features                                                                                                  // 9948
		 *  @name DataTable.defaults.autoWidth                                                                               // 9949
		 *                                                                                                                   // 9950
		 *  @example                                                                                                         // 9951
		 *    $(document).ready( function () {                                                                               // 9952
		 *      $('#example').dataTable( {                                                                                   // 9953
		 *        "autoWidth": false                                                                                         // 9954
		 *      } );                                                                                                         // 9955
		 *    } );                                                                                                           // 9956
		 */                                                                                                                  // 9957
		"bAutoWidth": true,                                                                                                  // 9958
	                                                                                                                      // 9959
	                                                                                                                      // 9960
		/**                                                                                                                  // 9961
		 * Deferred rendering can provide DataTables with a huge speed boost when you                                        // 9962
		 * are using an Ajax or JS data source for the table. This option, when set to                                       // 9963
		 * true, will cause DataTables to defer the creation of the table elements for                                       // 9964
		 * each row until they are needed for a draw - saving a significant amount of                                        // 9965
		 * time.                                                                                                             // 9966
		 *  @type boolean                                                                                                    // 9967
		 *  @default false                                                                                                   // 9968
		 *                                                                                                                   // 9969
		 *  @dtopt Features                                                                                                  // 9970
		 *  @name DataTable.defaults.deferRender                                                                             // 9971
		 *                                                                                                                   // 9972
		 *  @example                                                                                                         // 9973
		 *    $(document).ready( function() {                                                                                // 9974
		 *      $('#example').dataTable( {                                                                                   // 9975
		 *        "ajax": "sources/arrays.txt",                                                                              // 9976
		 *        "deferRender": true                                                                                        // 9977
		 *      } );                                                                                                         // 9978
		 *    } );                                                                                                           // 9979
		 */                                                                                                                  // 9980
		"bDeferRender": false,                                                                                               // 9981
	                                                                                                                      // 9982
	                                                                                                                      // 9983
		/**                                                                                                                  // 9984
		 * Replace a DataTable which matches the given selector and replace it with                                          // 9985
		 * one which has the properties of the new initialisation object passed. If no                                       // 9986
		 * table matches the selector, then the new DataTable will be constructed as                                         // 9987
		 * per normal.                                                                                                       // 9988
		 *  @type boolean                                                                                                    // 9989
		 *  @default false                                                                                                   // 9990
		 *                                                                                                                   // 9991
		 *  @dtopt Options                                                                                                   // 9992
		 *  @name DataTable.defaults.destroy                                                                                 // 9993
		 *                                                                                                                   // 9994
		 *  @example                                                                                                         // 9995
		 *    $(document).ready( function() {                                                                                // 9996
		 *      $('#example').dataTable( {                                                                                   // 9997
		 *        "srollY": "200px",                                                                                         // 9998
		 *        "paginate": false                                                                                          // 9999
		 *      } );                                                                                                         // 10000
		 *                                                                                                                   // 10001
		 *      // Some time later....                                                                                       // 10002
		 *      $('#example').dataTable( {                                                                                   // 10003
		 *        "filter": false,                                                                                           // 10004
		 *        "destroy": true                                                                                            // 10005
		 *      } );                                                                                                         // 10006
		 *    } );                                                                                                           // 10007
		 */                                                                                                                  // 10008
		"bDestroy": false,                                                                                                   // 10009
	                                                                                                                      // 10010
	                                                                                                                      // 10011
		/**                                                                                                                  // 10012
		 * Enable or disable filtering of data. Filtering in DataTables is "smart" in                                        // 10013
		 * that it allows the end user to input multiple words (space separated) and                                         // 10014
		 * will match a row containing those words, even if not in the order that was                                        // 10015
		 * specified (this allow matching across multiple columns). Note that if you                                         // 10016
		 * wish to use filtering in DataTables this must remain 'true' - to remove the                                       // 10017
		 * default filtering input box and retain filtering abilities, please use                                            // 10018
		 * {@link DataTable.defaults.dom}.                                                                                   // 10019
		 *  @type boolean                                                                                                    // 10020
		 *  @default true                                                                                                    // 10021
		 *                                                                                                                   // 10022
		 *  @dtopt Features                                                                                                  // 10023
		 *  @name DataTable.defaults.searching                                                                               // 10024
		 *                                                                                                                   // 10025
		 *  @example                                                                                                         // 10026
		 *    $(document).ready( function () {                                                                               // 10027
		 *      $('#example').dataTable( {                                                                                   // 10028
		 *        "searching": false                                                                                         // 10029
		 *      } );                                                                                                         // 10030
		 *    } );                                                                                                           // 10031
		 */                                                                                                                  // 10032
		"bFilter": true,                                                                                                     // 10033
	                                                                                                                      // 10034
	                                                                                                                      // 10035
		/**                                                                                                                  // 10036
		 * Enable or disable the table information display. This shows information                                           // 10037
		 * about the data that is currently visible on the page, including information                                       // 10038
		 * about filtered data if that action is being performed.                                                            // 10039
		 *  @type boolean                                                                                                    // 10040
		 *  @default true                                                                                                    // 10041
		 *                                                                                                                   // 10042
		 *  @dtopt Features                                                                                                  // 10043
		 *  @name DataTable.defaults.info                                                                                    // 10044
		 *                                                                                                                   // 10045
		 *  @example                                                                                                         // 10046
		 *    $(document).ready( function () {                                                                               // 10047
		 *      $('#example').dataTable( {                                                                                   // 10048
		 *        "info": false                                                                                              // 10049
		 *      } );                                                                                                         // 10050
		 *    } );                                                                                                           // 10051
		 */                                                                                                                  // 10052
		"bInfo": true,                                                                                                       // 10053
	                                                                                                                      // 10054
	                                                                                                                      // 10055
		/**                                                                                                                  // 10056
		 * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some                                       // 10057
		 * slightly different and additional mark-up from what DataTables has                                                // 10058
		 * traditionally used).                                                                                              // 10059
		 *  @type boolean                                                                                                    // 10060
		 *  @default false                                                                                                   // 10061
		 *                                                                                                                   // 10062
		 *  @dtopt Features                                                                                                  // 10063
		 *  @name DataTable.defaults.jQueryUI                                                                                // 10064
		 *                                                                                                                   // 10065
		 *  @example                                                                                                         // 10066
		 *    $(document).ready( function() {                                                                                // 10067
		 *      $('#example').dataTable( {                                                                                   // 10068
		 *        "jQueryUI": true                                                                                           // 10069
		 *      } );                                                                                                         // 10070
		 *    } );                                                                                                           // 10071
		 */                                                                                                                  // 10072
		"bJQueryUI": false,                                                                                                  // 10073
	                                                                                                                      // 10074
	                                                                                                                      // 10075
		/**                                                                                                                  // 10076
		 * Allows the end user to select the size of a formatted page from a select                                          // 10077
		 * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).                                            // 10078
		 *  @type boolean                                                                                                    // 10079
		 *  @default true                                                                                                    // 10080
		 *                                                                                                                   // 10081
		 *  @dtopt Features                                                                                                  // 10082
		 *  @name DataTable.defaults.lengthChange                                                                            // 10083
		 *                                                                                                                   // 10084
		 *  @example                                                                                                         // 10085
		 *    $(document).ready( function () {                                                                               // 10086
		 *      $('#example').dataTable( {                                                                                   // 10087
		 *        "lengthChange": false                                                                                      // 10088
		 *      } );                                                                                                         // 10089
		 *    } );                                                                                                           // 10090
		 */                                                                                                                  // 10091
		"bLengthChange": true,                                                                                               // 10092
	                                                                                                                      // 10093
	                                                                                                                      // 10094
		/**                                                                                                                  // 10095
		 * Enable or disable pagination.                                                                                     // 10096
		 *  @type boolean                                                                                                    // 10097
		 *  @default true                                                                                                    // 10098
		 *                                                                                                                   // 10099
		 *  @dtopt Features                                                                                                  // 10100
		 *  @name DataTable.defaults.paging                                                                                  // 10101
		 *                                                                                                                   // 10102
		 *  @example                                                                                                         // 10103
		 *    $(document).ready( function () {                                                                               // 10104
		 *      $('#example').dataTable( {                                                                                   // 10105
		 *        "paging": false                                                                                            // 10106
		 *      } );                                                                                                         // 10107
		 *    } );                                                                                                           // 10108
		 */                                                                                                                  // 10109
		"bPaginate": true,                                                                                                   // 10110
	                                                                                                                      // 10111
	                                                                                                                      // 10112
		/**                                                                                                                  // 10113
		 * Enable or disable the display of a 'processing' indicator when the table is                                       // 10114
		 * being processed (e.g. a sort). This is particularly useful for tables with                                        // 10115
		 * large amounts of data where it can take a noticeable amount of time to sort                                       // 10116
		 * the entries.                                                                                                      // 10117
		 *  @type boolean                                                                                                    // 10118
		 *  @default false                                                                                                   // 10119
		 *                                                                                                                   // 10120
		 *  @dtopt Features                                                                                                  // 10121
		 *  @name DataTable.defaults.processing                                                                              // 10122
		 *                                                                                                                   // 10123
		 *  @example                                                                                                         // 10124
		 *    $(document).ready( function () {                                                                               // 10125
		 *      $('#example').dataTable( {                                                                                   // 10126
		 *        "processing": true                                                                                         // 10127
		 *      } );                                                                                                         // 10128
		 *    } );                                                                                                           // 10129
		 */                                                                                                                  // 10130
		"bProcessing": false,                                                                                                // 10131
	                                                                                                                      // 10132
	                                                                                                                      // 10133
		/**                                                                                                                  // 10134
		 * Retrieve the DataTables object for the given selector. Note that if the                                           // 10135
		 * table has already been initialised, this parameter will cause DataTables                                          // 10136
		 * to simply return the object that has already been set up - it will not take                                       // 10137
		 * account of any changes you might have made to the initialisation object                                           // 10138
		 * passed to DataTables (setting this parameter to true is an acknowledgement                                        // 10139
		 * that you understand this). `destroy` can be used to reinitialise a table if                                       // 10140
		 * you need.                                                                                                         // 10141
		 *  @type boolean                                                                                                    // 10142
		 *  @default false                                                                                                   // 10143
		 *                                                                                                                   // 10144
		 *  @dtopt Options                                                                                                   // 10145
		 *  @name DataTable.defaults.retrieve                                                                                // 10146
		 *                                                                                                                   // 10147
		 *  @example                                                                                                         // 10148
		 *    $(document).ready( function() {                                                                                // 10149
		 *      initTable();                                                                                                 // 10150
		 *      tableActions();                                                                                              // 10151
		 *    } );                                                                                                           // 10152
		 *                                                                                                                   // 10153
		 *    function initTable ()                                                                                          // 10154
		 *    {                                                                                                              // 10155
		 *      return $('#example').dataTable( {                                                                            // 10156
		 *        "scrollY": "200px",                                                                                        // 10157
		 *        "paginate": false,                                                                                         // 10158
		 *        "retrieve": true                                                                                           // 10159
		 *      } );                                                                                                         // 10160
		 *    }                                                                                                              // 10161
		 *                                                                                                                   // 10162
		 *    function tableActions ()                                                                                       // 10163
		 *    {                                                                                                              // 10164
		 *      var table = initTable();                                                                                     // 10165
		 *      // perform API operations with oTable                                                                        // 10166
		 *    }                                                                                                              // 10167
		 */                                                                                                                  // 10168
		"bRetrieve": false,                                                                                                  // 10169
	                                                                                                                      // 10170
	                                                                                                                      // 10171
		/**                                                                                                                  // 10172
		 * When vertical (y) scrolling is enabled, DataTables will force the height of                                       // 10173
		 * the table's viewport to the given height at all times (useful for layout).                                        // 10174
		 * However, this can look odd when filtering data down to a small data set,                                          // 10175
		 * and the footer is left "floating" further down. This parameter (when                                              // 10176
		 * enabled) will cause DataTables to collapse the table's viewport down when                                         // 10177
		 * the result set will fit within the given Y height.                                                                // 10178
		 *  @type boolean                                                                                                    // 10179
		 *  @default false                                                                                                   // 10180
		 *                                                                                                                   // 10181
		 *  @dtopt Options                                                                                                   // 10182
		 *  @name DataTable.defaults.scrollCollapse                                                                          // 10183
		 *                                                                                                                   // 10184
		 *  @example                                                                                                         // 10185
		 *    $(document).ready( function() {                                                                                // 10186
		 *      $('#example').dataTable( {                                                                                   // 10187
		 *        "scrollY": "200",                                                                                          // 10188
		 *        "scrollCollapse": true                                                                                     // 10189
		 *      } );                                                                                                         // 10190
		 *    } );                                                                                                           // 10191
		 */                                                                                                                  // 10192
		"bScrollCollapse": false,                                                                                            // 10193
	                                                                                                                      // 10194
	                                                                                                                      // 10195
		/**                                                                                                                  // 10196
		 * Configure DataTables to use server-side processing. Note that the                                                 // 10197
		 * `ajax` parameter must also be given in order to give DataTables a                                                 // 10198
		 * source to obtain the required data for each draw.                                                                 // 10199
		 *  @type boolean                                                                                                    // 10200
		 *  @default false                                                                                                   // 10201
		 *                                                                                                                   // 10202
		 *  @dtopt Features                                                                                                  // 10203
		 *  @dtopt Server-side                                                                                               // 10204
		 *  @name DataTable.defaults.serverSide                                                                              // 10205
		 *                                                                                                                   // 10206
		 *  @example                                                                                                         // 10207
		 *    $(document).ready( function () {                                                                               // 10208
		 *      $('#example').dataTable( {                                                                                   // 10209
		 *        "serverSide": true,                                                                                        // 10210
		 *        "ajax": "xhr.php"                                                                                          // 10211
		 *      } );                                                                                                         // 10212
		 *    } );                                                                                                           // 10213
		 */                                                                                                                  // 10214
		"bServerSide": false,                                                                                                // 10215
	                                                                                                                      // 10216
	                                                                                                                      // 10217
		/**                                                                                                                  // 10218
		 * Enable or disable sorting of columns. Sorting of individual columns can be                                        // 10219
		 * disabled by the `sortable` option for each column.                                                                // 10220
		 *  @type boolean                                                                                                    // 10221
		 *  @default true                                                                                                    // 10222
		 *                                                                                                                   // 10223
		 *  @dtopt Features                                                                                                  // 10224
		 *  @name DataTable.defaults.ordering                                                                                // 10225
		 *                                                                                                                   // 10226
		 *  @example                                                                                                         // 10227
		 *    $(document).ready( function () {                                                                               // 10228
		 *      $('#example').dataTable( {                                                                                   // 10229
		 *        "ordering": false                                                                                          // 10230
		 *      } );                                                                                                         // 10231
		 *    } );                                                                                                           // 10232
		 */                                                                                                                  // 10233
		"bSort": true,                                                                                                       // 10234
	                                                                                                                      // 10235
	                                                                                                                      // 10236
		/**                                                                                                                  // 10237
		 * Enable or display DataTables' ability to sort multiple columns at the                                             // 10238
		 * same time (activated by shift-click by the user).                                                                 // 10239
		 *  @type boolean                                                                                                    // 10240
		 *  @default true                                                                                                    // 10241
		 *                                                                                                                   // 10242
		 *  @dtopt Options                                                                                                   // 10243
		 *  @name DataTable.defaults.orderMulti                                                                              // 10244
		 *                                                                                                                   // 10245
		 *  @example                                                                                                         // 10246
		 *    // Disable multiple column sorting ability                                                                     // 10247
		 *    $(document).ready( function () {                                                                               // 10248
		 *      $('#example').dataTable( {                                                                                   // 10249
		 *        "orderMulti": false                                                                                        // 10250
		 *      } );                                                                                                         // 10251
		 *    } );                                                                                                           // 10252
		 */                                                                                                                  // 10253
		"bSortMulti": true,                                                                                                  // 10254
	                                                                                                                      // 10255
	                                                                                                                      // 10256
		/**                                                                                                                  // 10257
		 * Allows control over whether DataTables should use the top (true) unique                                           // 10258
		 * cell that is found for a single column, or the bottom (false - default).                                          // 10259
		 * This is useful when using complex headers.                                                                        // 10260
		 *  @type boolean                                                                                                    // 10261
		 *  @default false                                                                                                   // 10262
		 *                                                                                                                   // 10263
		 *  @dtopt Options                                                                                                   // 10264
		 *  @name DataTable.defaults.orderCellsTop                                                                           // 10265
		 *                                                                                                                   // 10266
		 *  @example                                                                                                         // 10267
		 *    $(document).ready( function() {                                                                                // 10268
		 *      $('#example').dataTable( {                                                                                   // 10269
		 *        "orderCellsTop": true                                                                                      // 10270
		 *      } );                                                                                                         // 10271
		 *    } );                                                                                                           // 10272
		 */                                                                                                                  // 10273
		"bSortCellsTop": false,                                                                                              // 10274
	                                                                                                                      // 10275
	                                                                                                                      // 10276
		/**                                                                                                                  // 10277
		 * Enable or disable the addition of the classes `sorting\_1`, `sorting\_2` and                                      // 10278
		 * `sorting\_3` to the columns which are currently being sorted on. This is                                          // 10279
		 * presented as a feature switch as it can increase processing time (while                                           // 10280
		 * classes are removed and added) so for large data sets you might want to                                           // 10281
		 * turn this off.                                                                                                    // 10282
		 *  @type boolean                                                                                                    // 10283
		 *  @default true                                                                                                    // 10284
		 *                                                                                                                   // 10285
		 *  @dtopt Features                                                                                                  // 10286
		 *  @name DataTable.defaults.orderClasses                                                                            // 10287
		 *                                                                                                                   // 10288
		 *  @example                                                                                                         // 10289
		 *    $(document).ready( function () {                                                                               // 10290
		 *      $('#example').dataTable( {                                                                                   // 10291
		 *        "orderClasses": false                                                                                      // 10292
		 *      } );                                                                                                         // 10293
		 *    } );                                                                                                           // 10294
		 */                                                                                                                  // 10295
		"bSortClasses": true,                                                                                                // 10296
	                                                                                                                      // 10297
	                                                                                                                      // 10298
		/**                                                                                                                  // 10299
		 * Enable or disable state saving. When enabled HTML5 `localStorage` will be                                         // 10300
		 * used to save table display information such as pagination information,                                            // 10301
		 * display length, filtering and sorting. As such when the end user reloads                                          // 10302
		 * the page the display display will match what thy had previously set up.                                           // 10303
		 *                                                                                                                   // 10304
		 * Due to the use of `localStorage` the default state saving is not supported                                        // 10305
		 * in IE6 or 7. If state saving is required in those browsers, use                                                   // 10306
		 * `stateSaveCallback` to provide a storage solution such as cookies.                                                // 10307
		 *  @type boolean                                                                                                    // 10308
		 *  @default false                                                                                                   // 10309
		 *                                                                                                                   // 10310
		 *  @dtopt Features                                                                                                  // 10311
		 *  @name DataTable.defaults.stateSave                                                                               // 10312
		 *                                                                                                                   // 10313
		 *  @example                                                                                                         // 10314
		 *    $(document).ready( function () {                                                                               // 10315
		 *      $('#example').dataTable( {                                                                                   // 10316
		 *        "stateSave": true                                                                                          // 10317
		 *      } );                                                                                                         // 10318
		 *    } );                                                                                                           // 10319
		 */                                                                                                                  // 10320
		"bStateSave": false,                                                                                                 // 10321
	                                                                                                                      // 10322
	                                                                                                                      // 10323
		/**                                                                                                                  // 10324
		 * This function is called when a TR element is created (and all TD child                                            // 10325
		 * elements have been inserted), or registered if using a DOM source, allowing                                       // 10326
		 * manipulation of the TR element (adding classes etc).                                                              // 10327
		 *  @type function                                                                                                   // 10328
		 *  @param {node} row "TR" element for the current row                                                               // 10329
		 *  @param {array} data Raw data array for this row                                                                  // 10330
		 *  @param {int} dataIndex The index of this row in the internal aoData array                                        // 10331
		 *                                                                                                                   // 10332
		 *  @dtopt Callbacks                                                                                                 // 10333
		 *  @name DataTable.defaults.createdRow                                                                              // 10334
		 *                                                                                                                   // 10335
		 *  @example                                                                                                         // 10336
		 *    $(document).ready( function() {                                                                                // 10337
		 *      $('#example').dataTable( {                                                                                   // 10338
		 *        "createdRow": function( row, data, dataIndex ) {                                                           // 10339
		 *          // Bold the grade for all 'A' grade browsers                                                             // 10340
		 *          if ( data[4] == "A" )                                                                                    // 10341
		 *          {                                                                                                        // 10342
		 *            $('td:eq(4)', row).html( '<b>A</b>' );                                                                 // 10343
		 *          }                                                                                                        // 10344
		 *        }                                                                                                          // 10345
		 *      } );                                                                                                         // 10346
		 *    } );                                                                                                           // 10347
		 */                                                                                                                  // 10348
		"fnCreatedRow": null,                                                                                                // 10349
	                                                                                                                      // 10350
	                                                                                                                      // 10351
		/**                                                                                                                  // 10352
		 * This function is called on every 'draw' event, and allows you to                                                  // 10353
		 * dynamically modify any aspect you want about the created DOM.                                                     // 10354
		 *  @type function                                                                                                   // 10355
		 *  @param {object} settings DataTables settings object                                                              // 10356
		 *                                                                                                                   // 10357
		 *  @dtopt Callbacks                                                                                                 // 10358
		 *  @name DataTable.defaults.drawCallback                                                                            // 10359
		 *                                                                                                                   // 10360
		 *  @example                                                                                                         // 10361
		 *    $(document).ready( function() {                                                                                // 10362
		 *      $('#example').dataTable( {                                                                                   // 10363
		 *        "drawCallback": function( settings ) {                                                                     // 10364
		 *          alert( 'DataTables has redrawn the table' );                                                             // 10365
		 *        }                                                                                                          // 10366
		 *      } );                                                                                                         // 10367
		 *    } );                                                                                                           // 10368
		 */                                                                                                                  // 10369
		"fnDrawCallback": null,                                                                                              // 10370
	                                                                                                                      // 10371
	                                                                                                                      // 10372
		/**                                                                                                                  // 10373
		 * Identical to fnHeaderCallback() but for the table footer this function                                            // 10374
		 * allows you to modify the table footer on every 'draw' event.                                                      // 10375
		 *  @type function                                                                                                   // 10376
		 *  @param {node} foot "TR" element for the footer                                                                   // 10377
		 *  @param {array} data Full table data (as derived from the original HTML)                                          // 10378
		 *  @param {int} start Index for the current display starting point in the                                           // 10379
		 *    display array                                                                                                  // 10380
		 *  @param {int} end Index for the current display ending point in the                                               // 10381
		 *    display array                                                                                                  // 10382
		 *  @param {array int} display Index array to translate the visual position                                          // 10383
		 *    to the full data array                                                                                         // 10384
		 *                                                                                                                   // 10385
		 *  @dtopt Callbacks                                                                                                 // 10386
		 *  @name DataTable.defaults.footerCallback                                                                          // 10387
		 *                                                                                                                   // 10388
		 *  @example                                                                                                         // 10389
		 *    $(document).ready( function() {                                                                                // 10390
		 *      $('#example').dataTable( {                                                                                   // 10391
		 *        "footerCallback": function( tfoot, data, start, end, display ) {                                           // 10392
		 *          tfoot.getElementsByTagName('th')[0].innerHTML = "Starting index is "+start;                              // 10393
		 *        }                                                                                                          // 10394
		 *      } );                                                                                                         // 10395
		 *    } )                                                                                                            // 10396
		 */                                                                                                                  // 10397
		"fnFooterCallback": null,                                                                                            // 10398
	                                                                                                                      // 10399
	                                                                                                                      // 10400
		/**                                                                                                                  // 10401
		 * When rendering large numbers in the information element for the table                                             // 10402
		 * (i.e. "Showing 1 to 10 of 57 entries") DataTables will render large numbers                                       // 10403
		 * to have a comma separator for the 'thousands' units (e.g. 1 million is                                            // 10404
		 * rendered as "1,000,000") to help readability for the end user. This                                               // 10405
		 * function will override the default method DataTables uses.                                                        // 10406
		 *  @type function                                                                                                   // 10407
		 *  @member                                                                                                          // 10408
		 *  @param {int} toFormat number to be formatted                                                                     // 10409
		 *  @returns {string} formatted string for DataTables to show the number                                             // 10410
		 *                                                                                                                   // 10411
		 *  @dtopt Callbacks                                                                                                 // 10412
		 *  @name DataTable.defaults.formatNumber                                                                            // 10413
		 *                                                                                                                   // 10414
		 *  @example                                                                                                         // 10415
		 *    // Format a number using a single quote for the separator (note that                                           // 10416
		 *    // this can also be done with the language.thousands option)                                                   // 10417
		 *    $(document).ready( function() {                                                                                // 10418
		 *      $('#example').dataTable( {                                                                                   // 10419
		 *        "formatNumber": function ( toFormat ) {                                                                    // 10420
		 *          return toFormat.toString().replace(                                                                      // 10421
		 *            /\B(?=(\d{3})+(?!\d))/g, "'"                                                                           // 10422
		 *          );                                                                                                       // 10423
		 *        };                                                                                                         // 10424
		 *      } );                                                                                                         // 10425
		 *    } );                                                                                                           // 10426
		 */                                                                                                                  // 10427
		"fnFormatNumber": function ( toFormat ) {                                                                            // 10428
			return toFormat.toString().replace(                                                                                 // 10429
				/\B(?=(\d{3})+(?!\d))/g,                                                                                           // 10430
				this.oLanguage.sThousands                                                                                          // 10431
			);                                                                                                                  // 10432
		},                                                                                                                   // 10433
	                                                                                                                      // 10434
	                                                                                                                      // 10435
		/**                                                                                                                  // 10436
		 * This function is called on every 'draw' event, and allows you to                                                  // 10437
		 * dynamically modify the header row. This can be used to calculate and                                              // 10438
		 * display useful information about the table.                                                                       // 10439
		 *  @type function                                                                                                   // 10440
		 *  @param {node} head "TR" element for the header                                                                   // 10441
		 *  @param {array} data Full table data (as derived from the original HTML)                                          // 10442
		 *  @param {int} start Index for the current display starting point in the                                           // 10443
		 *    display array                                                                                                  // 10444
		 *  @param {int} end Index for the current display ending point in the                                               // 10445
		 *    display array                                                                                                  // 10446
		 *  @param {array int} display Index array to translate the visual position                                          // 10447
		 *    to the full data array                                                                                         // 10448
		 *                                                                                                                   // 10449
		 *  @dtopt Callbacks                                                                                                 // 10450
		 *  @name DataTable.defaults.headerCallback                                                                          // 10451
		 *                                                                                                                   // 10452
		 *  @example                                                                                                         // 10453
		 *    $(document).ready( function() {                                                                                // 10454
		 *      $('#example').dataTable( {                                                                                   // 10455
		 *        "fheaderCallback": function( head, data, start, end, display ) {                                           // 10456
		 *          head.getElementsByTagName('th')[0].innerHTML = "Displaying "+(end-start)+" records";                     // 10457
		 *        }                                                                                                          // 10458
		 *      } );                                                                                                         // 10459
		 *    } )                                                                                                            // 10460
		 */                                                                                                                  // 10461
		"fnHeaderCallback": null,                                                                                            // 10462
	                                                                                                                      // 10463
	                                                                                                                      // 10464
		/**                                                                                                                  // 10465
		 * The information element can be used to convey information about the current                                       // 10466
		 * state of the table. Although the internationalisation options presented by                                        // 10467
		 * DataTables are quite capable of dealing with most customisations, there may                                       // 10468
		 * be times where you wish to customise the string further. This callback                                            // 10469
		 * allows you to do exactly that.                                                                                    // 10470
		 *  @type function                                                                                                   // 10471
		 *  @param {object} oSettings DataTables settings object                                                             // 10472
		 *  @param {int} start Starting position in data for the draw                                                        // 10473
		 *  @param {int} end End position in data for the draw                                                               // 10474
		 *  @param {int} max Total number of rows in the table (regardless of                                                // 10475
		 *    filtering)                                                                                                     // 10476
		 *  @param {int} total Total number of rows in the data set, after filtering                                         // 10477
		 *  @param {string} pre The string that DataTables has formatted using it's                                          // 10478
		 *    own rules                                                                                                      // 10479
		 *  @returns {string} The string to be displayed in the information element.                                         // 10480
		 *                                                                                                                   // 10481
		 *  @dtopt Callbacks                                                                                                 // 10482
		 *  @name DataTable.defaults.infoCallback                                                                            // 10483
		 *                                                                                                                   // 10484
		 *  @example                                                                                                         // 10485
		 *    $('#example').dataTable( {                                                                                     // 10486
		 *      "infoCallback": function( settings, start, end, max, total, pre ) {                                          // 10487
		 *        return start +" to "+ end;                                                                                 // 10488
		 *      }                                                                                                            // 10489
		 *    } );                                                                                                           // 10490
		 */                                                                                                                  // 10491
		"fnInfoCallback": null,                                                                                              // 10492
	                                                                                                                      // 10493
	                                                                                                                      // 10494
		/**                                                                                                                  // 10495
		 * Called when the table has been initialised. Normally DataTables will                                              // 10496
		 * initialise sequentially and there will be no need for this function,                                              // 10497
		 * however, this does not hold true when using external language information                                         // 10498
		 * since that is obtained using an async XHR call.                                                                   // 10499
		 *  @type function                                                                                                   // 10500
		 *  @param {object} settings DataTables settings object                                                              // 10501
		 *  @param {object} json The JSON object request from the server - only                                              // 10502
		 *    present if client-side Ajax sourced data is used                                                               // 10503
		 *                                                                                                                   // 10504
		 *  @dtopt Callbacks                                                                                                 // 10505
		 *  @name DataTable.defaults.initComplete                                                                            // 10506
		 *                                                                                                                   // 10507
		 *  @example                                                                                                         // 10508
		 *    $(document).ready( function() {                                                                                // 10509
		 *      $('#example').dataTable( {                                                                                   // 10510
		 *        "initComplete": function(settings, json) {                                                                 // 10511
		 *          alert( 'DataTables has finished its initialisation.' );                                                  // 10512
		 *        }                                                                                                          // 10513
		 *      } );                                                                                                         // 10514
		 *    } )                                                                                                            // 10515
		 */                                                                                                                  // 10516
		"fnInitComplete": null,                                                                                              // 10517
	                                                                                                                      // 10518
	                                                                                                                      // 10519
		/**                                                                                                                  // 10520
		 * Called at the very start of each table draw and can be used to cancel the                                         // 10521
		 * draw by returning false, any other return (including undefined) results in                                        // 10522
		 * the full draw occurring).                                                                                         // 10523
		 *  @type function                                                                                                   // 10524
		 *  @param {object} settings DataTables settings object                                                              // 10525
		 *  @returns {boolean} False will cancel the draw, anything else (including no                                       // 10526
		 *    return) will allow it to complete.                                                                             // 10527
		 *                                                                                                                   // 10528
		 *  @dtopt Callbacks                                                                                                 // 10529
		 *  @name DataTable.defaults.preDrawCallback                                                                         // 10530
		 *                                                                                                                   // 10531
		 *  @example                                                                                                         // 10532
		 *    $(document).ready( function() {                                                                                // 10533
		 *      $('#example').dataTable( {                                                                                   // 10534
		 *        "preDrawCallback": function( settings ) {                                                                  // 10535
		 *          if ( $('#test').val() == 1 ) {                                                                           // 10536
		 *            return false;                                                                                          // 10537
		 *          }                                                                                                        // 10538
		 *        }                                                                                                          // 10539
		 *      } );                                                                                                         // 10540
		 *    } );                                                                                                           // 10541
		 */                                                                                                                  // 10542
		"fnPreDrawCallback": null,                                                                                           // 10543
	                                                                                                                      // 10544
	                                                                                                                      // 10545
		/**                                                                                                                  // 10546
		 * This function allows you to 'post process' each row after it have been                                            // 10547
		 * generated for each table draw, but before it is rendered on screen. This                                          // 10548
		 * function might be used for setting the row class name etc.                                                        // 10549
		 *  @type function                                                                                                   // 10550
		 *  @param {node} row "TR" element for the current row                                                               // 10551
		 *  @param {array} data Raw data array for this row                                                                  // 10552
		 *  @param {int} displayIndex The display index for the current table draw                                           // 10553
		 *  @param {int} displayIndexFull The index of the data in the full list of                                          // 10554
		 *    rows (after filtering)                                                                                         // 10555
		 *                                                                                                                   // 10556
		 *  @dtopt Callbacks                                                                                                 // 10557
		 *  @name DataTable.defaults.rowCallback                                                                             // 10558
		 *                                                                                                                   // 10559
		 *  @example                                                                                                         // 10560
		 *    $(document).ready( function() {                                                                                // 10561
		 *      $('#example').dataTable( {                                                                                   // 10562
		 *        "rowCallback": function( row, data, displayIndex, displayIndexFull ) {                                     // 10563
		 *          // Bold the grade for all 'A' grade browsers                                                             // 10564
		 *          if ( data[4] == "A" ) {                                                                                  // 10565
		 *            $('td:eq(4)', row).html( '<b>A</b>' );                                                                 // 10566
		 *          }                                                                                                        // 10567
		 *        }                                                                                                          // 10568
		 *      } );                                                                                                         // 10569
		 *    } );                                                                                                           // 10570
		 */                                                                                                                  // 10571
		"fnRowCallback": null,                                                                                               // 10572
	                                                                                                                      // 10573
	                                                                                                                      // 10574
		/**                                                                                                                  // 10575
		 * __Deprecated__ The functionality provided by this parameter has now been                                          // 10576
		 * superseded by that provided through `ajax`, which should be used instead.                                         // 10577
		 *                                                                                                                   // 10578
		 * This parameter allows you to override the default function which obtains                                          // 10579
		 * the data from the server so something more suitable for your application.                                         // 10580
		 * For example you could use POST data, or pull information from a Gears or                                          // 10581
		 * AIR database.                                                                                                     // 10582
		 *  @type function                                                                                                   // 10583
		 *  @member                                                                                                          // 10584
		 *  @param {string} source HTTP source to obtain the data from (`ajax`)                                              // 10585
		 *  @param {array} data A key/value pair object containing the data to send                                          // 10586
		 *    to the server                                                                                                  // 10587
		 *  @param {function} callback to be called on completion of the data get                                            // 10588
		 *    process that will draw the data on the page.                                                                   // 10589
		 *  @param {object} settings DataTables settings object                                                              // 10590
		 *                                                                                                                   // 10591
		 *  @dtopt Callbacks                                                                                                 // 10592
		 *  @dtopt Server-side                                                                                               // 10593
		 *  @name DataTable.defaults.serverData                                                                              // 10594
		 *                                                                                                                   // 10595
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.                                                  // 10596
		 */                                                                                                                  // 10597
		"fnServerData": null,                                                                                                // 10598
	                                                                                                                      // 10599
	                                                                                                                      // 10600
		/**                                                                                                                  // 10601
		 * __Deprecated__ The functionality provided by this parameter has now been                                          // 10602
		 * superseded by that provided through `ajax`, which should be used instead.                                         // 10603
		 *                                                                                                                   // 10604
		 *  It is often useful to send extra data to the server when making an Ajax                                          // 10605
		 * request - for example custom filtering information, and this callback                                             // 10606
		 * function makes it trivial to send extra information to the server. The                                            // 10607
		 * passed in parameter is the data set that has been constructed by                                                  // 10608
		 * DataTables, and you can add to this or modify it as you require.                                                  // 10609
		 *  @type function                                                                                                   // 10610
		 *  @param {array} data Data array (array of objects which are name/value                                            // 10611
		 *    pairs) that has been constructed by DataTables and will be sent to the                                         // 10612
		 *    server. In the case of Ajax sourced data with server-side processing                                           // 10613
		 *    this will be an empty array, for server-side processing there will be a                                        // 10614
		 *    significant number of parameters!                                                                              // 10615
		 *  @returns {undefined} Ensure that you modify the data array passed in,                                            // 10616
		 *    as this is passed by reference.                                                                                // 10617
		 *                                                                                                                   // 10618
		 *  @dtopt Callbacks                                                                                                 // 10619
		 *  @dtopt Server-side                                                                                               // 10620
		 *  @name DataTable.defaults.serverParams                                                                            // 10621
		 *                                                                                                                   // 10622
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.                                                  // 10623
		 */                                                                                                                  // 10624
		"fnServerParams": null,                                                                                              // 10625
	                                                                                                                      // 10626
	                                                                                                                      // 10627
		/**                                                                                                                  // 10628
		 * Load the table state. With this function you can define from where, and how, the                                  // 10629
		 * state of a table is loaded. By default DataTables will load from `localStorage`                                   // 10630
		 * but you might wish to use a server-side database or cookies.                                                      // 10631
		 *  @type function                                                                                                   // 10632
		 *  @member                                                                                                          // 10633
		 *  @param {object} settings DataTables settings object                                                              // 10634
		 *  @return {object} The DataTables state object to be loaded                                                        // 10635
		 *                                                                                                                   // 10636
		 *  @dtopt Callbacks                                                                                                 // 10637
		 *  @name DataTable.defaults.stateLoadCallback                                                                       // 10638
		 *                                                                                                                   // 10639
		 *  @example                                                                                                         // 10640
		 *    $(document).ready( function() {                                                                                // 10641
		 *      $('#example').dataTable( {                                                                                   // 10642
		 *        "stateSave": true,                                                                                         // 10643
		 *        "stateLoadCallback": function (settings) {                                                                 // 10644
		 *          var o;                                                                                                   // 10645
		 *                                                                                                                   // 10646
		 *          // Send an Ajax request to the server to get the data. Note that                                         // 10647
		 *          // this is a synchronous request.                                                                        // 10648
		 *          $.ajax( {                                                                                                // 10649
		 *            "url": "/state_load",                                                                                  // 10650
		 *            "async": false,                                                                                        // 10651
		 *            "dataType": "json",                                                                                    // 10652
		 *            "success": function (json) {                                                                           // 10653
		 *              o = json;                                                                                            // 10654
		 *            }                                                                                                      // 10655
		 *          } );                                                                                                     // 10656
		 *                                                                                                                   // 10657
		 *          return o;                                                                                                // 10658
		 *        }                                                                                                          // 10659
		 *      } );                                                                                                         // 10660
		 *    } );                                                                                                           // 10661
		 */                                                                                                                  // 10662
		"fnStateLoadCallback": function ( settings ) {                                                                       // 10663
			try {                                                                                                               // 10664
				return JSON.parse(                                                                                                 // 10665
					(settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(                                         // 10666
						'DataTables_'+settings.sInstance+'_'+location.pathname                                                           // 10667
					)                                                                                                                 // 10668
				);                                                                                                                 // 10669
			} catch (e) {}                                                                                                      // 10670
		},                                                                                                                   // 10671
	                                                                                                                      // 10672
	                                                                                                                      // 10673
		/**                                                                                                                  // 10674
		 * Callback which allows modification of the saved state prior to loading that state.                                // 10675
		 * This callback is called when the table is loading state from the stored data, but                                 // 10676
		 * prior to the settings object being modified by the saved state. Note that for                                     // 10677
		 * plug-in authors, you should use the `stateLoadParams` event to load parameters for                                // 10678
		 * a plug-in.                                                                                                        // 10679
		 *  @type function                                                                                                   // 10680
		 *  @param {object} settings DataTables settings object                                                              // 10681
		 *  @param {object} data The state object that is to be loaded                                                       // 10682
		 *                                                                                                                   // 10683
		 *  @dtopt Callbacks                                                                                                 // 10684
		 *  @name DataTable.defaults.stateLoadParams                                                                         // 10685
		 *                                                                                                                   // 10686
		 *  @example                                                                                                         // 10687
		 *    // Remove a saved filter, so filtering is never loaded                                                         // 10688
		 *    $(document).ready( function() {                                                                                // 10689
		 *      $('#example').dataTable( {                                                                                   // 10690
		 *        "stateSave": true,                                                                                         // 10691
		 *        "stateLoadParams": function (settings, data) {                                                             // 10692
		 *          data.oSearch.sSearch = "";                                                                               // 10693
		 *        }                                                                                                          // 10694
		 *      } );                                                                                                         // 10695
		 *    } );                                                                                                           // 10696
		 *                                                                                                                   // 10697
		 *  @example                                                                                                         // 10698
		 *    // Disallow state loading by returning false                                                                   // 10699
		 *    $(document).ready( function() {                                                                                // 10700
		 *      $('#example').dataTable( {                                                                                   // 10701
		 *        "stateSave": true,                                                                                         // 10702
		 *        "stateLoadParams": function (settings, data) {                                                             // 10703
		 *          return false;                                                                                            // 10704
		 *        }                                                                                                          // 10705
		 *      } );                                                                                                         // 10706
		 *    } );                                                                                                           // 10707
		 */                                                                                                                  // 10708
		"fnStateLoadParams": null,                                                                                           // 10709
	                                                                                                                      // 10710
	                                                                                                                      // 10711
		/**                                                                                                                  // 10712
		 * Callback that is called when the state has been loaded from the state saving method                               // 10713
		 * and the DataTables settings object has been modified as a result of the loaded state.                             // 10714
		 *  @type function                                                                                                   // 10715
		 *  @param {object} settings DataTables settings object                                                              // 10716
		 *  @param {object} data The state object that was loaded                                                            // 10717
		 *                                                                                                                   // 10718
		 *  @dtopt Callbacks                                                                                                 // 10719
		 *  @name DataTable.defaults.stateLoaded                                                                             // 10720
		 *                                                                                                                   // 10721
		 *  @example                                                                                                         // 10722
		 *    // Show an alert with the filtering value that was saved                                                       // 10723
		 *    $(document).ready( function() {                                                                                // 10724
		 *      $('#example').dataTable( {                                                                                   // 10725
		 *        "stateSave": true,                                                                                         // 10726
		 *        "stateLoaded": function (settings, data) {                                                                 // 10727
		 *          alert( 'Saved filter was: '+data.oSearch.sSearch );                                                      // 10728
		 *        }                                                                                                          // 10729
		 *      } );                                                                                                         // 10730
		 *    } );                                                                                                           // 10731
		 */                                                                                                                  // 10732
		"fnStateLoaded": null,                                                                                               // 10733
	                                                                                                                      // 10734
	                                                                                                                      // 10735
		/**                                                                                                                  // 10736
		 * Save the table state. This function allows you to define where and how the state                                  // 10737
		 * information for the table is stored By default DataTables will use `localStorage`                                 // 10738
		 * but you might wish to use a server-side database or cookies.                                                      // 10739
		 *  @type function                                                                                                   // 10740
		 *  @member                                                                                                          // 10741
		 *  @param {object} settings DataTables settings object                                                              // 10742
		 *  @param {object} data The state object to be saved                                                                // 10743
		 *                                                                                                                   // 10744
		 *  @dtopt Callbacks                                                                                                 // 10745
		 *  @name DataTable.defaults.stateSaveCallback                                                                       // 10746
		 *                                                                                                                   // 10747
		 *  @example                                                                                                         // 10748
		 *    $(document).ready( function() {                                                                                // 10749
		 *      $('#example').dataTable( {                                                                                   // 10750
		 *        "stateSave": true,                                                                                         // 10751
		 *        "stateSaveCallback": function (settings, data) {                                                           // 10752
		 *          // Send an Ajax request to the server with the state object                                              // 10753
		 *          $.ajax( {                                                                                                // 10754
		 *            "url": "/state_save",                                                                                  // 10755
		 *            "data": data,                                                                                          // 10756
		 *            "dataType": "json",                                                                                    // 10757
		 *            "method": "POST"                                                                                       // 10758
		 *            "success": function () {}                                                                              // 10759
		 *          } );                                                                                                     // 10760
		 *        }                                                                                                          // 10761
		 *      } );                                                                                                         // 10762
		 *    } );                                                                                                           // 10763
		 */                                                                                                                  // 10764
		"fnStateSaveCallback": function ( settings, data ) {                                                                 // 10765
			try {                                                                                                               // 10766
				(settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(                                          // 10767
					'DataTables_'+settings.sInstance+'_'+location.pathname,                                                           // 10768
					JSON.stringify( data )                                                                                            // 10769
				);                                                                                                                 // 10770
			} catch (e) {}                                                                                                      // 10771
		},                                                                                                                   // 10772
	                                                                                                                      // 10773
	                                                                                                                      // 10774
		/**                                                                                                                  // 10775
		 * Callback which allows modification of the state to be saved. Called when the table                                // 10776
		 * has changed state a new state save is required. This method allows modification of                                // 10777
		 * the state saving object prior to actually doing the save, including addition or                                   // 10778
		 * other state properties or modification. Note that for plug-in authors, you should                                 // 10779
		 * use the `stateSaveParams` event to save parameters for a plug-in.                                                 // 10780
		 *  @type function                                                                                                   // 10781
		 *  @param {object} settings DataTables settings object                                                              // 10782
		 *  @param {object} data The state object to be saved                                                                // 10783
		 *                                                                                                                   // 10784
		 *  @dtopt Callbacks                                                                                                 // 10785
		 *  @name DataTable.defaults.stateSaveParams                                                                         // 10786
		 *                                                                                                                   // 10787
		 *  @example                                                                                                         // 10788
		 *    // Remove a saved filter, so filtering is never saved                                                          // 10789
		 *    $(document).ready( function() {                                                                                // 10790
		 *      $('#example').dataTable( {                                                                                   // 10791
		 *        "stateSave": true,                                                                                         // 10792
		 *        "stateSaveParams": function (settings, data) {                                                             // 10793
		 *          data.oSearch.sSearch = "";                                                                               // 10794
		 *        }                                                                                                          // 10795
		 *      } );                                                                                                         // 10796
		 *    } );                                                                                                           // 10797
		 */                                                                                                                  // 10798
		"fnStateSaveParams": null,                                                                                           // 10799
	                                                                                                                      // 10800
	                                                                                                                      // 10801
		/**                                                                                                                  // 10802
		 * Duration for which the saved state information is considered valid. After this period                             // 10803
		 * has elapsed the state will be returned to the default.                                                            // 10804
		 * Value is given in seconds.                                                                                        // 10805
		 *  @type int                                                                                                        // 10806
		 *  @default 7200 <i>(2 hours)</i>                                                                                   // 10807
		 *                                                                                                                   // 10808
		 *  @dtopt Options                                                                                                   // 10809
		 *  @name DataTable.defaults.stateDuration                                                                           // 10810
		 *                                                                                                                   // 10811
		 *  @example                                                                                                         // 10812
		 *    $(document).ready( function() {                                                                                // 10813
		 *      $('#example').dataTable( {                                                                                   // 10814
		 *        "stateDuration": 60*60*24; // 1 day                                                                        // 10815
		 *      } );                                                                                                         // 10816
		 *    } )                                                                                                            // 10817
		 */                                                                                                                  // 10818
		"iStateDuration": 7200,                                                                                              // 10819
	                                                                                                                      // 10820
	                                                                                                                      // 10821
		/**                                                                                                                  // 10822
		 * When enabled DataTables will not make a request to the server for the first                                       // 10823
		 * page draw - rather it will use the data already on the page (no sorting etc                                       // 10824
		 * will be applied to it), thus saving on an XHR at load time. `deferLoading`                                        // 10825
		 * is used to indicate that deferred loading is required, but it is also used                                        // 10826
		 * to tell DataTables how many records there are in the full table (allowing                                         // 10827
		 * the information element and pagination to be displayed correctly). In the case                                    // 10828
		 * where a filtering is applied to the table on initial load, this can be                                            // 10829
		 * indicated by giving the parameter as an array, where the first element is                                         // 10830
		 * the number of records available after filtering and the second element is the                                     // 10831
		 * number of records without filtering (allowing the table information element                                       // 10832
		 * to be shown correctly).                                                                                           // 10833
		 *  @type int | array                                                                                                // 10834
		 *  @default null                                                                                                    // 10835
		 *                                                                                                                   // 10836
		 *  @dtopt Options                                                                                                   // 10837
		 *  @name DataTable.defaults.deferLoading                                                                            // 10838
		 *                                                                                                                   // 10839
		 *  @example                                                                                                         // 10840
		 *    // 57 records available in the table, no filtering applied                                                     // 10841
		 *    $(document).ready( function() {                                                                                // 10842
		 *      $('#example').dataTable( {                                                                                   // 10843
		 *        "serverSide": true,                                                                                        // 10844
		 *        "ajax": "scripts/server_processing.php",                                                                   // 10845
		 *        "deferLoading": 57                                                                                         // 10846
		 *      } );                                                                                                         // 10847
		 *    } );                                                                                                           // 10848
		 *                                                                                                                   // 10849
		 *  @example                                                                                                         // 10850
		 *    // 57 records after filtering, 100 without filtering (an initial filter applied)                               // 10851
		 *    $(document).ready( function() {                                                                                // 10852
		 *      $('#example').dataTable( {                                                                                   // 10853
		 *        "serverSide": true,                                                                                        // 10854
		 *        "ajax": "scripts/server_processing.php",                                                                   // 10855
		 *        "deferLoading": [ 57, 100 ],                                                                               // 10856
		 *        "search": {                                                                                                // 10857
		 *          "search": "my_filter"                                                                                    // 10858
		 *        }                                                                                                          // 10859
		 *      } );                                                                                                         // 10860
		 *    } );                                                                                                           // 10861
		 */                                                                                                                  // 10862
		"iDeferLoading": null,                                                                                               // 10863
	                                                                                                                      // 10864
	                                                                                                                      // 10865
		/**                                                                                                                  // 10866
		 * Number of rows to display on a single page when using pagination. If                                              // 10867
		 * feature enabled (`lengthChange`) then the end user will be able to override                                       // 10868
		 * this to a custom setting using a pop-up menu.                                                                     // 10869
		 *  @type int                                                                                                        // 10870
		 *  @default 10                                                                                                      // 10871
		 *                                                                                                                   // 10872
		 *  @dtopt Options                                                                                                   // 10873
		 *  @name DataTable.defaults.pageLength                                                                              // 10874
		 *                                                                                                                   // 10875
		 *  @example                                                                                                         // 10876
		 *    $(document).ready( function() {                                                                                // 10877
		 *      $('#example').dataTable( {                                                                                   // 10878
		 *        "pageLength": 50                                                                                           // 10879
		 *      } );                                                                                                         // 10880
		 *    } )                                                                                                            // 10881
		 */                                                                                                                  // 10882
		"iDisplayLength": 10,                                                                                                // 10883
	                                                                                                                      // 10884
	                                                                                                                      // 10885
		/**                                                                                                                  // 10886
		 * Define the starting point for data display when using DataTables with                                             // 10887
		 * pagination. Note that this parameter is the number of records, rather than                                        // 10888
		 * the page number, so if you have 10 records per page and want to start on                                          // 10889
		 * the third page, it should be "20".                                                                                // 10890
		 *  @type int                                                                                                        // 10891
		 *  @default 0                                                                                                       // 10892
		 *                                                                                                                   // 10893
		 *  @dtopt Options                                                                                                   // 10894
		 *  @name DataTable.defaults.displayStart                                                                            // 10895
		 *                                                                                                                   // 10896
		 *  @example                                                                                                         // 10897
		 *    $(document).ready( function() {                                                                                // 10898
		 *      $('#example').dataTable( {                                                                                   // 10899
		 *        "displayStart": 20                                                                                         // 10900
		 *      } );                                                                                                         // 10901
		 *    } )                                                                                                            // 10902
		 */                                                                                                                  // 10903
		"iDisplayStart": 0,                                                                                                  // 10904
	                                                                                                                      // 10905
	                                                                                                                      // 10906
		/**                                                                                                                  // 10907
		 * By default DataTables allows keyboard navigation of the table (sorting, paging,                                   // 10908
		 * and filtering) by adding a `tabindex` attribute to the required elements. This                                    // 10909
		 * allows you to tab through the controls and press the enter key to activate them.                                  // 10910
		 * The tabindex is default 0, meaning that the tab follows the flow of the document.                                 // 10911
		 * You can overrule this using this parameter if you wish. Use a value of -1 to                                      // 10912
		 * disable built-in keyboard navigation.                                                                             // 10913
		 *  @type int                                                                                                        // 10914
		 *  @default 0                                                                                                       // 10915
		 *                                                                                                                   // 10916
		 *  @dtopt Options                                                                                                   // 10917
		 *  @name DataTable.defaults.tabIndex                                                                                // 10918
		 *                                                                                                                   // 10919
		 *  @example                                                                                                         // 10920
		 *    $(document).ready( function() {                                                                                // 10921
		 *      $('#example').dataTable( {                                                                                   // 10922
		 *        "tabIndex": 1                                                                                              // 10923
		 *      } );                                                                                                         // 10924
		 *    } );                                                                                                           // 10925
		 */                                                                                                                  // 10926
		"iTabIndex": 0,                                                                                                      // 10927
	                                                                                                                      // 10928
	                                                                                                                      // 10929
		/**                                                                                                                  // 10930
		 * Classes that DataTables assigns to the various components and features                                            // 10931
		 * that it adds to the HTML table. This allows classes to be configured                                              // 10932
		 * during initialisation in addition to through the static                                                           // 10933
		 * {@link DataTable.ext.oStdClasses} object).                                                                        // 10934
		 *  @namespace                                                                                                       // 10935
		 *  @name DataTable.defaults.classes                                                                                 // 10936
		 */                                                                                                                  // 10937
		"oClasses": {},                                                                                                      // 10938
	                                                                                                                      // 10939
	                                                                                                                      // 10940
		/**                                                                                                                  // 10941
		 * All strings that DataTables uses in the user interface that it creates                                            // 10942
		 * are defined in this object, allowing you to modified them individually or                                         // 10943
		 * completely replace them all as required.                                                                          // 10944
		 *  @namespace                                                                                                       // 10945
		 *  @name DataTable.defaults.language                                                                                // 10946
		 */                                                                                                                  // 10947
		"oLanguage": {                                                                                                       // 10948
			/**                                                                                                                 // 10949
			 * Strings that are used for WAI-ARIA labels and controls only (these are not                                       // 10950
			 * actually visible on the page, but will be read by screenreaders, and thus                                        // 10951
			 * must be internationalised as well).                                                                              // 10952
			 *  @namespace                                                                                                      // 10953
			 *  @name DataTable.defaults.language.aria                                                                          // 10954
			 */                                                                                                                 // 10955
			"oAria": {                                                                                                          // 10956
				/**                                                                                                                // 10957
				 * ARIA label that is added to the table headers when the column may be                                            // 10958
				 * sorted ascending by activing the column (click or return when focused).                                         // 10959
				 * Note that the column header is prefixed to this string.                                                         // 10960
				 *  @type string                                                                                                   // 10961
				 *  @default : activate to sort column ascending                                                                   // 10962
				 *                                                                                                                 // 10963
				 *  @dtopt Language                                                                                                // 10964
				 *  @name DataTable.defaults.language.aria.sortAscending                                                           // 10965
				 *                                                                                                                 // 10966
				 *  @example                                                                                                       // 10967
				 *    $(document).ready( function() {                                                                              // 10968
				 *      $('#example').dataTable( {                                                                                 // 10969
				 *        "language": {                                                                                            // 10970
				 *          "aria": {                                                                                              // 10971
				 *            "sortAscending": " - click/return to sort ascending"                                                 // 10972
				 *          }                                                                                                      // 10973
				 *        }                                                                                                        // 10974
				 *      } );                                                                                                       // 10975
				 *    } );                                                                                                         // 10976
				 */                                                                                                                // 10977
				"sSortAscending": ": activate to sort column ascending",                                                           // 10978
	                                                                                                                      // 10979
				/**                                                                                                                // 10980
				 * ARIA label that is added to the table headers when the column may be                                            // 10981
				 * sorted descending by activing the column (click or return when focused).                                        // 10982
				 * Note that the column header is prefixed to this string.                                                         // 10983
				 *  @type string                                                                                                   // 10984
				 *  @default : activate to sort column ascending                                                                   // 10985
				 *                                                                                                                 // 10986
				 *  @dtopt Language                                                                                                // 10987
				 *  @name DataTable.defaults.language.aria.sortDescending                                                          // 10988
				 *                                                                                                                 // 10989
				 *  @example                                                                                                       // 10990
				 *    $(document).ready( function() {                                                                              // 10991
				 *      $('#example').dataTable( {                                                                                 // 10992
				 *        "language": {                                                                                            // 10993
				 *          "aria": {                                                                                              // 10994
				 *            "sortDescending": " - click/return to sort descending"                                               // 10995
				 *          }                                                                                                      // 10996
				 *        }                                                                                                        // 10997
				 *      } );                                                                                                       // 10998
				 *    } );                                                                                                         // 10999
				 */                                                                                                                // 11000
				"sSortDescending": ": activate to sort column descending"                                                          // 11001
			},                                                                                                                  // 11002
	                                                                                                                      // 11003
			/**                                                                                                                 // 11004
			 * Pagination string used by DataTables for the built-in pagination                                                 // 11005
			 * control types.                                                                                                   // 11006
			 *  @namespace                                                                                                      // 11007
			 *  @name DataTable.defaults.language.paginate                                                                      // 11008
			 */                                                                                                                 // 11009
			"oPaginate": {                                                                                                      // 11010
				/**                                                                                                                // 11011
				 * Text to use when using the 'full_numbers' type of pagination for the                                            // 11012
				 * button to take the user to the first page.                                                                      // 11013
				 *  @type string                                                                                                   // 11014
				 *  @default First                                                                                                 // 11015
				 *                                                                                                                 // 11016
				 *  @dtopt Language                                                                                                // 11017
				 *  @name DataTable.defaults.language.paginate.first                                                               // 11018
				 *                                                                                                                 // 11019
				 *  @example                                                                                                       // 11020
				 *    $(document).ready( function() {                                                                              // 11021
				 *      $('#example').dataTable( {                                                                                 // 11022
				 *        "language": {                                                                                            // 11023
				 *          "paginate": {                                                                                          // 11024
				 *            "first": "First page"                                                                                // 11025
				 *          }                                                                                                      // 11026
				 *        }                                                                                                        // 11027
				 *      } );                                                                                                       // 11028
				 *    } );                                                                                                         // 11029
				 */                                                                                                                // 11030
				"sFirst": "First",                                                                                                 // 11031
	                                                                                                                      // 11032
	                                                                                                                      // 11033
				/**                                                                                                                // 11034
				 * Text to use when using the 'full_numbers' type of pagination for the                                            // 11035
				 * button to take the user to the last page.                                                                       // 11036
				 *  @type string                                                                                                   // 11037
				 *  @default Last                                                                                                  // 11038
				 *                                                                                                                 // 11039
				 *  @dtopt Language                                                                                                // 11040
				 *  @name DataTable.defaults.language.paginate.last                                                                // 11041
				 *                                                                                                                 // 11042
				 *  @example                                                                                                       // 11043
				 *    $(document).ready( function() {                                                                              // 11044
				 *      $('#example').dataTable( {                                                                                 // 11045
				 *        "language": {                                                                                            // 11046
				 *          "paginate": {                                                                                          // 11047
				 *            "last": "Last page"                                                                                  // 11048
				 *          }                                                                                                      // 11049
				 *        }                                                                                                        // 11050
				 *      } );                                                                                                       // 11051
				 *    } );                                                                                                         // 11052
				 */                                                                                                                // 11053
				"sLast": "Last",                                                                                                   // 11054
	                                                                                                                      // 11055
	                                                                                                                      // 11056
				/**                                                                                                                // 11057
				 * Text to use for the 'next' pagination button (to take the user to the                                           // 11058
				 * next page).                                                                                                     // 11059
				 *  @type string                                                                                                   // 11060
				 *  @default Next                                                                                                  // 11061
				 *                                                                                                                 // 11062
				 *  @dtopt Language                                                                                                // 11063
				 *  @name DataTable.defaults.language.paginate.next                                                                // 11064
				 *                                                                                                                 // 11065
				 *  @example                                                                                                       // 11066
				 *    $(document).ready( function() {                                                                              // 11067
				 *      $('#example').dataTable( {                                                                                 // 11068
				 *        "language": {                                                                                            // 11069
				 *          "paginate": {                                                                                          // 11070
				 *            "next": "Next page"                                                                                  // 11071
				 *          }                                                                                                      // 11072
				 *        }                                                                                                        // 11073
				 *      } );                                                                                                       // 11074
				 *    } );                                                                                                         // 11075
				 */                                                                                                                // 11076
				"sNext": "Next",                                                                                                   // 11077
	                                                                                                                      // 11078
	                                                                                                                      // 11079
				/**                                                                                                                // 11080
				 * Text to use for the 'previous' pagination button (to take the user to                                           // 11081
				 * the previous page).                                                                                             // 11082
				 *  @type string                                                                                                   // 11083
				 *  @default Previous                                                                                              // 11084
				 *                                                                                                                 // 11085
				 *  @dtopt Language                                                                                                // 11086
				 *  @name DataTable.defaults.language.paginate.previous                                                            // 11087
				 *                                                                                                                 // 11088
				 *  @example                                                                                                       // 11089
				 *    $(document).ready( function() {                                                                              // 11090
				 *      $('#example').dataTable( {                                                                                 // 11091
				 *        "language": {                                                                                            // 11092
				 *          "paginate": {                                                                                          // 11093
				 *            "previous": "Previous page"                                                                          // 11094
				 *          }                                                                                                      // 11095
				 *        }                                                                                                        // 11096
				 *      } );                                                                                                       // 11097
				 *    } );                                                                                                         // 11098
				 */                                                                                                                // 11099
				"sPrevious": "Previous"                                                                                            // 11100
			},                                                                                                                  // 11101
	                                                                                                                      // 11102
			/**                                                                                                                 // 11103
			 * This string is shown in preference to `zeroRecords` when the table is                                            // 11104
			 * empty of data (regardless of filtering). Note that this is an optional                                           // 11105
			 * parameter - if it is not given, the value of `zeroRecords` will be used                                          // 11106
			 * instead (either the default or given value).                                                                     // 11107
			 *  @type string                                                                                                    // 11108
			 *  @default No data available in table                                                                             // 11109
			 *                                                                                                                  // 11110
			 *  @dtopt Language                                                                                                 // 11111
			 *  @name DataTable.defaults.language.emptyTable                                                                    // 11112
			 *                                                                                                                  // 11113
			 *  @example                                                                                                        // 11114
			 *    $(document).ready( function() {                                                                               // 11115
			 *      $('#example').dataTable( {                                                                                  // 11116
			 *        "language": {                                                                                             // 11117
			 *          "emptyTable": "No data available in table"                                                              // 11118
			 *        }                                                                                                         // 11119
			 *      } );                                                                                                        // 11120
			 *    } );                                                                                                          // 11121
			 */                                                                                                                 // 11122
			"sEmptyTable": "No data available in table",                                                                        // 11123
	                                                                                                                      // 11124
	                                                                                                                      // 11125
			/**                                                                                                                 // 11126
			 * This string gives information to the end user about the information                                              // 11127
			 * that is current on display on the page. The following tokens can be                                              // 11128
			 * used in the string and will be dynamically replaced as the table                                                 // 11129
			 * display updates. This tokens can be placed anywhere in the string, or                                            // 11130
			 * removed as needed by the language requires:                                                                      // 11131
			 *                                                                                                                  // 11132
			 * * `\_START\_` - Display index of the first record on the current page                                            // 11133
			 * * `\_END\_` - Display index of the last record on the current page                                               // 11134
			 * * `\_TOTAL\_` - Number of records in the table after filtering                                                   // 11135
			 * * `\_MAX\_` - Number of records in the table without filtering                                                   // 11136
			 * * `\_PAGE\_` - Current page number                                                                               // 11137
			 * * `\_PAGES\_` - Total number of pages of data in the table                                                       // 11138
			 *                                                                                                                  // 11139
			 *  @type string                                                                                                    // 11140
			 *  @default Showing _START_ to _END_ of _TOTAL_ entries                                                            // 11141
			 *                                                                                                                  // 11142
			 *  @dtopt Language                                                                                                 // 11143
			 *  @name DataTable.defaults.language.info                                                                          // 11144
			 *                                                                                                                  // 11145
			 *  @example                                                                                                        // 11146
			 *    $(document).ready( function() {                                                                               // 11147
			 *      $('#example').dataTable( {                                                                                  // 11148
			 *        "language": {                                                                                             // 11149
			 *          "info": "Showing page _PAGE_ of _PAGES_"                                                                // 11150
			 *        }                                                                                                         // 11151
			 *      } );                                                                                                        // 11152
			 *    } );                                                                                                          // 11153
			 */                                                                                                                 // 11154
			"sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",                                                             // 11155
	                                                                                                                      // 11156
	                                                                                                                      // 11157
			/**                                                                                                                 // 11158
			 * Display information string for when the table is empty. Typically the                                            // 11159
			 * format of this string should match `info`.                                                                       // 11160
			 *  @type string                                                                                                    // 11161
			 *  @default Showing 0 to 0 of 0 entries                                                                            // 11162
			 *                                                                                                                  // 11163
			 *  @dtopt Language                                                                                                 // 11164
			 *  @name DataTable.defaults.language.infoEmpty                                                                     // 11165
			 *                                                                                                                  // 11166
			 *  @example                                                                                                        // 11167
			 *    $(document).ready( function() {                                                                               // 11168
			 *      $('#example').dataTable( {                                                                                  // 11169
			 *        "language": {                                                                                             // 11170
			 *          "infoEmpty": "No entries to show"                                                                       // 11171
			 *        }                                                                                                         // 11172
			 *      } );                                                                                                        // 11173
			 *    } );                                                                                                          // 11174
			 */                                                                                                                 // 11175
			"sInfoEmpty": "Showing 0 to 0 of 0 entries",                                                                        // 11176
	                                                                                                                      // 11177
	                                                                                                                      // 11178
			/**                                                                                                                 // 11179
			 * When a user filters the information in a table, this string is appended                                          // 11180
			 * to the information (`info`) to give an idea of how strong the filtering                                          // 11181
			 * is. The variable _MAX_ is dynamically updated.                                                                   // 11182
			 *  @type string                                                                                                    // 11183
			 *  @default (filtered from _MAX_ total entries)                                                                    // 11184
			 *                                                                                                                  // 11185
			 *  @dtopt Language                                                                                                 // 11186
			 *  @name DataTable.defaults.language.infoFiltered                                                                  // 11187
			 *                                                                                                                  // 11188
			 *  @example                                                                                                        // 11189
			 *    $(document).ready( function() {                                                                               // 11190
			 *      $('#example').dataTable( {                                                                                  // 11191
			 *        "language": {                                                                                             // 11192
			 *          "infoFiltered": " - filtering from _MAX_ records"                                                       // 11193
			 *        }                                                                                                         // 11194
			 *      } );                                                                                                        // 11195
			 *    } );                                                                                                          // 11196
			 */                                                                                                                 // 11197
			"sInfoFiltered": "(filtered from _MAX_ total entries)",                                                             // 11198
	                                                                                                                      // 11199
	                                                                                                                      // 11200
			/**                                                                                                                 // 11201
			 * If can be useful to append extra information to the info string at times,                                        // 11202
			 * and this variable does exactly that. This information will be appended to                                        // 11203
			 * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are                                      // 11204
			 * being used) at all times.                                                                                        // 11205
			 *  @type string                                                                                                    // 11206
			 *  @default <i>Empty string</i>                                                                                    // 11207
			 *                                                                                                                  // 11208
			 *  @dtopt Language                                                                                                 // 11209
			 *  @name DataTable.defaults.language.infoPostFix                                                                   // 11210
			 *                                                                                                                  // 11211
			 *  @example                                                                                                        // 11212
			 *    $(document).ready( function() {                                                                               // 11213
			 *      $('#example').dataTable( {                                                                                  // 11214
			 *        "language": {                                                                                             // 11215
			 *          "infoPostFix": "All records shown are derived from real information."                                   // 11216
			 *        }                                                                                                         // 11217
			 *      } );                                                                                                        // 11218
			 *    } );                                                                                                          // 11219
			 */                                                                                                                 // 11220
			"sInfoPostFix": "",                                                                                                 // 11221
	                                                                                                                      // 11222
	                                                                                                                      // 11223
			/**                                                                                                                 // 11224
			 * This decimal place operator is a little different from the other                                                 // 11225
			 * language options since DataTables doesn't output floating point                                                  // 11226
			 * numbers, so it won't ever use this for display of a number. Rather,                                              // 11227
			 * what this parameter does is modify the sort methods of the table so                                              // 11228
			 * that numbers which are in a format which has a character other than                                              // 11229
			 * a period (`.`) as a decimal place will be sorted numerically.                                                    // 11230
			 *                                                                                                                  // 11231
			 * Note that numbers with different decimal places cannot be shown in                                               // 11232
			 * the same table and still be sortable, the table must be consistent.                                              // 11233
			 * However, multiple different tables on the page can use different                                                 // 11234
			 * decimal place characters.                                                                                        // 11235
			 *  @type string                                                                                                    // 11236
			 *  @default                                                                                                        // 11237
			 *                                                                                                                  // 11238
			 *  @dtopt Language                                                                                                 // 11239
			 *  @name DataTable.defaults.language.decimal                                                                       // 11240
			 *                                                                                                                  // 11241
			 *  @example                                                                                                        // 11242
			 *    $(document).ready( function() {                                                                               // 11243
			 *      $('#example').dataTable( {                                                                                  // 11244
			 *        "language": {                                                                                             // 11245
			 *          "decimal": ","                                                                                          // 11246
			 *          "thousands": "."                                                                                        // 11247
			 *        }                                                                                                         // 11248
			 *      } );                                                                                                        // 11249
			 *    } );                                                                                                          // 11250
			 */                                                                                                                 // 11251
			"sDecimal": "",                                                                                                     // 11252
	                                                                                                                      // 11253
	                                                                                                                      // 11254
			/**                                                                                                                 // 11255
			 * DataTables has a build in number formatter (`formatNumber`) which is                                             // 11256
			 * used to format large numbers that are used in the table information.                                             // 11257
			 * By default a comma is used, but this can be trivially changed to any                                             // 11258
			 * character you wish with this parameter.                                                                          // 11259
			 *  @type string                                                                                                    // 11260
			 *  @default ,                                                                                                      // 11261
			 *                                                                                                                  // 11262
			 *  @dtopt Language                                                                                                 // 11263
			 *  @name DataTable.defaults.language.thousands                                                                     // 11264
			 *                                                                                                                  // 11265
			 *  @example                                                                                                        // 11266
			 *    $(document).ready( function() {                                                                               // 11267
			 *      $('#example').dataTable( {                                                                                  // 11268
			 *        "language": {                                                                                             // 11269
			 *          "thousands": "'"                                                                                        // 11270
			 *        }                                                                                                         // 11271
			 *      } );                                                                                                        // 11272
			 *    } );                                                                                                          // 11273
			 */                                                                                                                 // 11274
			"sThousands": ",",                                                                                                  // 11275
	                                                                                                                      // 11276
	                                                                                                                      // 11277
			/**                                                                                                                 // 11278
			 * Detail the action that will be taken when the drop down menu for the                                             // 11279
			 * pagination length option is changed. The '_MENU_' variable is replaced                                           // 11280
			 * with a default select list of 10, 25, 50 and 100, and can be replaced                                            // 11281
			 * with a custom select box if required.                                                                            // 11282
			 *  @type string                                                                                                    // 11283
			 *  @default Show _MENU_ entries                                                                                    // 11284
			 *                                                                                                                  // 11285
			 *  @dtopt Language                                                                                                 // 11286
			 *  @name DataTable.defaults.language.lengthMenu                                                                    // 11287
			 *                                                                                                                  // 11288
			 *  @example                                                                                                        // 11289
			 *    // Language change only                                                                                       // 11290
			 *    $(document).ready( function() {                                                                               // 11291
			 *      $('#example').dataTable( {                                                                                  // 11292
			 *        "language": {                                                                                             // 11293
			 *          "lengthMenu": "Display _MENU_ records"                                                                  // 11294
			 *        }                                                                                                         // 11295
			 *      } );                                                                                                        // 11296
			 *    } );                                                                                                          // 11297
			 *                                                                                                                  // 11298
			 *  @example                                                                                                        // 11299
			 *    // Language and options change                                                                                // 11300
			 *    $(document).ready( function() {                                                                               // 11301
			 *      $('#example').dataTable( {                                                                                  // 11302
			 *        "language": {                                                                                             // 11303
			 *          "lengthMenu": 'Display <select>'+                                                                       // 11304
			 *            '<option value="10">10</option>'+                                                                     // 11305
			 *            '<option value="20">20</option>'+                                                                     // 11306
			 *            '<option value="30">30</option>'+                                                                     // 11307
			 *            '<option value="40">40</option>'+                                                                     // 11308
			 *            '<option value="50">50</option>'+                                                                     // 11309
			 *            '<option value="-1">All</option>'+                                                                    // 11310
			 *            '</select> records'                                                                                   // 11311
			 *        }                                                                                                         // 11312
			 *      } );                                                                                                        // 11313
			 *    } );                                                                                                          // 11314
			 */                                                                                                                 // 11315
			"sLengthMenu": "Show _MENU_ entries",                                                                               // 11316
	                                                                                                                      // 11317
	                                                                                                                      // 11318
			/**                                                                                                                 // 11319
			 * When using Ajax sourced data and during the first draw when DataTables is                                        // 11320
			 * gathering the data, this message is shown in an empty row in the table to                                        // 11321
			 * indicate to the end user the the data is being loaded. Note that this                                            // 11322
			 * parameter is not used when loading data by server-side processing, just                                          // 11323
			 * Ajax sourced data with client-side processing.                                                                   // 11324
			 *  @type string                                                                                                    // 11325
			 *  @default Loading...                                                                                             // 11326
			 *                                                                                                                  // 11327
			 *  @dtopt Language                                                                                                 // 11328
			 *  @name DataTable.defaults.language.loadingRecords                                                                // 11329
			 *                                                                                                                  // 11330
			 *  @example                                                                                                        // 11331
			 *    $(document).ready( function() {                                                                               // 11332
			 *      $('#example').dataTable( {                                                                                  // 11333
			 *        "language": {                                                                                             // 11334
			 *          "loadingRecords": "Please wait - loading..."                                                            // 11335
			 *        }                                                                                                         // 11336
			 *      } );                                                                                                        // 11337
			 *    } );                                                                                                          // 11338
			 */                                                                                                                 // 11339
			"sLoadingRecords": "Loading...",                                                                                    // 11340
	                                                                                                                      // 11341
	                                                                                                                      // 11342
			/**                                                                                                                 // 11343
			 * Text which is displayed when the table is processing a user action                                               // 11344
			 * (usually a sort command or similar).                                                                             // 11345
			 *  @type string                                                                                                    // 11346
			 *  @default Processing...                                                                                          // 11347
			 *                                                                                                                  // 11348
			 *  @dtopt Language                                                                                                 // 11349
			 *  @name DataTable.defaults.language.processing                                                                    // 11350
			 *                                                                                                                  // 11351
			 *  @example                                                                                                        // 11352
			 *    $(document).ready( function() {                                                                               // 11353
			 *      $('#example').dataTable( {                                                                                  // 11354
			 *        "language": {                                                                                             // 11355
			 *          "processing": "DataTables is currently busy"                                                            // 11356
			 *        }                                                                                                         // 11357
			 *      } );                                                                                                        // 11358
			 *    } );                                                                                                          // 11359
			 */                                                                                                                 // 11360
			"sProcessing": "Processing...",                                                                                     // 11361
	                                                                                                                      // 11362
	                                                                                                                      // 11363
			/**                                                                                                                 // 11364
			 * Details the actions that will be taken when the user types into the                                              // 11365
			 * filtering input text box. The variable "_INPUT_", if used in the string,                                         // 11366
			 * is replaced with the HTML text box for the filtering input allowing                                              // 11367
			 * control over where it appears in the string. If "_INPUT_" is not given                                           // 11368
			 * then the input box is appended to the string automatically.                                                      // 11369
			 *  @type string                                                                                                    // 11370
			 *  @default Search:                                                                                                // 11371
			 *                                                                                                                  // 11372
			 *  @dtopt Language                                                                                                 // 11373
			 *  @name DataTable.defaults.language.search                                                                        // 11374
			 *                                                                                                                  // 11375
			 *  @example                                                                                                        // 11376
			 *    // Input text box will be appended at the end automatically                                                   // 11377
			 *    $(document).ready( function() {                                                                               // 11378
			 *      $('#example').dataTable( {                                                                                  // 11379
			 *        "language": {                                                                                             // 11380
			 *          "search": "Filter records:"                                                                             // 11381
			 *        }                                                                                                         // 11382
			 *      } );                                                                                                        // 11383
			 *    } );                                                                                                          // 11384
			 *                                                                                                                  // 11385
			 *  @example                                                                                                        // 11386
			 *    // Specify where the filter should appear                                                                     // 11387
			 *    $(document).ready( function() {                                                                               // 11388
			 *      $('#example').dataTable( {                                                                                  // 11389
			 *        "language": {                                                                                             // 11390
			 *          "search": "Apply filter _INPUT_ to table"                                                               // 11391
			 *        }                                                                                                         // 11392
			 *      } );                                                                                                        // 11393
			 *    } );                                                                                                          // 11394
			 */                                                                                                                 // 11395
			"sSearch": "Search:",                                                                                               // 11396
	                                                                                                                      // 11397
	                                                                                                                      // 11398
			/**                                                                                                                 // 11399
			 * Assign a `placeholder` attribute to the search `input` element                                                   // 11400
			 *  @type string                                                                                                    // 11401
			 *  @default                                                                                                        // 11402
			 *                                                                                                                  // 11403
			 *  @dtopt Language                                                                                                 // 11404
			 *  @name DataTable.defaults.language.searchPlaceholder                                                             // 11405
			 */                                                                                                                 // 11406
			"sSearchPlaceholder": "",                                                                                           // 11407
	                                                                                                                      // 11408
	                                                                                                                      // 11409
			/**                                                                                                                 // 11410
			 * All of the language information can be stored in a file on the                                                   // 11411
			 * server-side, which DataTables will look up if this parameter is passed.                                          // 11412
			 * It must store the URL of the language file, which is in a JSON format,                                           // 11413
			 * and the object has the same properties as the oLanguage object in the                                            // 11414
			 * initialiser object (i.e. the above parameters). Please refer to one of                                           // 11415
			 * the example language files to see how this works in action.                                                      // 11416
			 *  @type string                                                                                                    // 11417
			 *  @default <i>Empty string - i.e. disabled</i>                                                                    // 11418
			 *                                                                                                                  // 11419
			 *  @dtopt Language                                                                                                 // 11420
			 *  @name DataTable.defaults.language.url                                                                           // 11421
			 *                                                                                                                  // 11422
			 *  @example                                                                                                        // 11423
			 *    $(document).ready( function() {                                                                               // 11424
			 *      $('#example').dataTable( {                                                                                  // 11425
			 *        "language": {                                                                                             // 11426
			 *          "url": "http://www.sprymedia.co.uk/dataTables/lang.txt"                                                 // 11427
			 *        }                                                                                                         // 11428
			 *      } );                                                                                                        // 11429
			 *    } );                                                                                                          // 11430
			 */                                                                                                                 // 11431
			"sUrl": "",                                                                                                         // 11432
	                                                                                                                      // 11433
	                                                                                                                      // 11434
			/**                                                                                                                 // 11435
			 * Text shown inside the table records when the is no information to be                                             // 11436
			 * displayed after filtering. `emptyTable` is shown when there is simply no                                         // 11437
			 * information in the table at all (regardless of filtering).                                                       // 11438
			 *  @type string                                                                                                    // 11439
			 *  @default No matching records found                                                                              // 11440
			 *                                                                                                                  // 11441
			 *  @dtopt Language                                                                                                 // 11442
			 *  @name DataTable.defaults.language.zeroRecords                                                                   // 11443
			 *                                                                                                                  // 11444
			 *  @example                                                                                                        // 11445
			 *    $(document).ready( function() {                                                                               // 11446
			 *      $('#example').dataTable( {                                                                                  // 11447
			 *        "language": {                                                                                             // 11448
			 *          "zeroRecords": "No records to display"                                                                  // 11449
			 *        }                                                                                                         // 11450
			 *      } );                                                                                                        // 11451
			 *    } );                                                                                                          // 11452
			 */                                                                                                                 // 11453
			"sZeroRecords": "No matching records found"                                                                         // 11454
		},                                                                                                                   // 11455
	                                                                                                                      // 11456
	                                                                                                                      // 11457
		/**                                                                                                                  // 11458
		 * This parameter allows you to have define the global filtering state at                                            // 11459
		 * initialisation time. As an object the `search` parameter must be                                                  // 11460
		 * defined, but all other parameters are optional. When `regex` is true,                                             // 11461
		 * the search string will be treated as a regular expression, when false                                             // 11462
		 * (default) it will be treated as a straight string. When `smart`                                                   // 11463
		 * DataTables will use it's smart filtering methods (to word match at                                                // 11464
		 * any point in the data), when false this will not be done.                                                         // 11465
		 *  @namespace                                                                                                       // 11466
		 *  @extends DataTable.models.oSearch                                                                                // 11467
		 *                                                                                                                   // 11468
		 *  @dtopt Options                                                                                                   // 11469
		 *  @name DataTable.defaults.search                                                                                  // 11470
		 *                                                                                                                   // 11471
		 *  @example                                                                                                         // 11472
		 *    $(document).ready( function() {                                                                                // 11473
		 *      $('#example').dataTable( {                                                                                   // 11474
		 *        "search": {"search": "Initial search"}                                                                     // 11475
		 *      } );                                                                                                         // 11476
		 *    } )                                                                                                            // 11477
		 */                                                                                                                  // 11478
		"oSearch": $.extend( {}, DataTable.models.oSearch ),                                                                 // 11479
	                                                                                                                      // 11480
	                                                                                                                      // 11481
		/**                                                                                                                  // 11482
		 * __Deprecated__ The functionality provided by this parameter has now been                                          // 11483
		 * superseded by that provided through `ajax`, which should be used instead.                                         // 11484
		 *                                                                                                                   // 11485
		 * By default DataTables will look for the property `data` (or `aaData` for                                          // 11486
		 * compatibility with DataTables 1.9-) when obtaining data from an Ajax                                              // 11487
		 * source or for server-side processing - this parameter allows that                                                 // 11488
		 * property to be changed. You can use Javascript dotted object notation to                                          // 11489
		 * get a data source for multiple levels of nesting.                                                                 // 11490
		 *  @type string                                                                                                     // 11491
		 *  @default data                                                                                                    // 11492
		 *                                                                                                                   // 11493
		 *  @dtopt Options                                                                                                   // 11494
		 *  @dtopt Server-side                                                                                               // 11495
		 *  @name DataTable.defaults.ajaxDataProp                                                                            // 11496
		 *                                                                                                                   // 11497
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.                                                  // 11498
		 */                                                                                                                  // 11499
		"sAjaxDataProp": "data",                                                                                             // 11500
	                                                                                                                      // 11501
	                                                                                                                      // 11502
		/**                                                                                                                  // 11503
		 * __Deprecated__ The functionality provided by this parameter has now been                                          // 11504
		 * superseded by that provided through `ajax`, which should be used instead.                                         // 11505
		 *                                                                                                                   // 11506
		 * You can instruct DataTables to load data from an external                                                         // 11507
		 * source using this parameter (use aData if you want to pass data in you                                            // 11508
		 * already have). Simply provide a url a JSON object can be obtained from.                                           // 11509
		 *  @type string                                                                                                     // 11510
		 *  @default null                                                                                                    // 11511
		 *                                                                                                                   // 11512
		 *  @dtopt Options                                                                                                   // 11513
		 *  @dtopt Server-side                                                                                               // 11514
		 *  @name DataTable.defaults.ajaxSource                                                                              // 11515
		 *                                                                                                                   // 11516
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.                                                  // 11517
		 */                                                                                                                  // 11518
		"sAjaxSource": null,                                                                                                 // 11519
	                                                                                                                      // 11520
	                                                                                                                      // 11521
		/**                                                                                                                  // 11522
		 * This initialisation variable allows you to specify exactly where in the                                           // 11523
		 * DOM you want DataTables to inject the various controls it adds to the page                                        // 11524
		 * (for example you might want the pagination controls at the top of the                                             // 11525
		 * table). DIV elements (with or without a custom class) can also be added to                                        // 11526
		 * aid styling. The follow syntax is used:                                                                           // 11527
		 *   <ul>                                                                                                            // 11528
		 *     <li>The following options are allowed:                                                                        // 11529
		 *       <ul>                                                                                                        // 11530
		 *         <li>'l' - Length changing</li>                                                                            // 11531
		 *         <li>'f' - Filtering input</li>                                                                            // 11532
		 *         <li>'t' - The table!</li>                                                                                 // 11533
		 *         <li>'i' - Information</li>                                                                                // 11534
		 *         <li>'p' - Pagination</li>                                                                                 // 11535
		 *         <li>'r' - pRocessing</li>                                                                                 // 11536
		 *       </ul>                                                                                                       // 11537
		 *     </li>                                                                                                         // 11538
		 *     <li>The following constants are allowed:                                                                      // 11539
		 *       <ul>                                                                                                        // 11540
		 *         <li>'H' - jQueryUI theme "header" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>
		 *         <li>'F' - jQueryUI theme "footer" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>
		 *       </ul>                                                                                                       // 11543
		 *     </li>                                                                                                         // 11544
		 *     <li>The following syntax is expected:                                                                         // 11545
		 *       <ul>                                                                                                        // 11546
		 *         <li>'&lt;' and '&gt;' - div elements</li>                                                                 // 11547
		 *         <li>'&lt;"class" and '&gt;' - div with a class</li>                                                       // 11548
		 *         <li>'&lt;"#id" and '&gt;' - div with an ID</li>                                                           // 11549
		 *       </ul>                                                                                                       // 11550
		 *     </li>                                                                                                         // 11551
		 *     <li>Examples:                                                                                                 // 11552
		 *       <ul>                                                                                                        // 11553
		 *         <li>'&lt;"wrapper"flipt&gt;'</li>                                                                         // 11554
		 *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>                                                                          // 11555
		 *       </ul>                                                                                                       // 11556
		 *     </li>                                                                                                         // 11557
		 *   </ul>                                                                                                           // 11558
		 *  @type string                                                                                                     // 11559
		 *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>                                                      // 11560
		 *    <"H"lfr>t<"F"ip> <i>(when `jQueryUI` is true)</i>                                                              // 11561
		 *                                                                                                                   // 11562
		 *  @dtopt Options                                                                                                   // 11563
		 *  @name DataTable.defaults.dom                                                                                     // 11564
		 *                                                                                                                   // 11565
		 *  @example                                                                                                         // 11566
		 *    $(document).ready( function() {                                                                                // 11567
		 *      $('#example').dataTable( {                                                                                   // 11568
		 *        "dom": '&lt;"top"i&gt;rt&lt;"bottom"flp&gt;&lt;"clear"&gt;'                                                // 11569
		 *      } );                                                                                                         // 11570
		 *    } );                                                                                                           // 11571
		 */                                                                                                                  // 11572
		"sDom": "lfrtip",                                                                                                    // 11573
	                                                                                                                      // 11574
	                                                                                                                      // 11575
		/**                                                                                                                  // 11576
		 * Search delay option. This will throttle full table searches that use the                                          // 11577
		 * DataTables provided search input element (it does not effect calls to                                             // 11578
		 * `dt-api search()`, providing a delay before the search is made.                                                   // 11579
		 *  @type integer                                                                                                    // 11580
		 *  @default 0                                                                                                       // 11581
		 *                                                                                                                   // 11582
		 *  @dtopt Options                                                                                                   // 11583
		 *  @name DataTable.defaults.searchDelay                                                                             // 11584
		 *                                                                                                                   // 11585
		 *  @example                                                                                                         // 11586
		 *    $(document).ready( function() {                                                                                // 11587
		 *      $('#example').dataTable( {                                                                                   // 11588
		 *        "searchDelay": 200                                                                                         // 11589
		 *      } );                                                                                                         // 11590
		 *    } )                                                                                                            // 11591
		 */                                                                                                                  // 11592
		"searchDelay": null,                                                                                                 // 11593
	                                                                                                                      // 11594
	                                                                                                                      // 11595
		/**                                                                                                                  // 11596
		 * DataTables features four different built-in options for the buttons to                                            // 11597
		 * display for pagination control:                                                                                   // 11598
		 *                                                                                                                   // 11599
		 * * `simple` - 'Previous' and 'Next' buttons only                                                                   // 11600
		 * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers                                             // 11601
		 * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons                                                         // 11602
		 * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus                                           // 11603
		 *   page numbers                                                                                                    // 11604
		 *                                                                                                                   // 11605
		 * Further methods can be added using {@link DataTable.ext.oPagination}.                                             // 11606
		 *  @type string                                                                                                     // 11607
		 *  @default simple_numbers                                                                                          // 11608
		 *                                                                                                                   // 11609
		 *  @dtopt Options                                                                                                   // 11610
		 *  @name DataTable.defaults.pagingType                                                                              // 11611
		 *                                                                                                                   // 11612
		 *  @example                                                                                                         // 11613
		 *    $(document).ready( function() {                                                                                // 11614
		 *      $('#example').dataTable( {                                                                                   // 11615
		 *        "pagingType": "full_numbers"                                                                               // 11616
		 *      } );                                                                                                         // 11617
		 *    } )                                                                                                            // 11618
		 */                                                                                                                  // 11619
		"sPaginationType": "simple_numbers",                                                                                 // 11620
	                                                                                                                      // 11621
	                                                                                                                      // 11622
		/**                                                                                                                  // 11623
		 * Enable horizontal scrolling. When a table is too wide to fit into a                                               // 11624
		 * certain layout, or you have a large number of columns in the table, you                                           // 11625
		 * can enable x-scrolling to show the table in a viewport, which can be                                              // 11626
		 * scrolled. This property can be `true` which will allow the table to                                               // 11627
		 * scroll horizontally when needed, or any CSS unit, or a number (in which                                           // 11628
		 * case it will be treated as a pixel measurement). Setting as simply `true`                                         // 11629
		 * is recommended.                                                                                                   // 11630
		 *  @type boolean|string                                                                                             // 11631
		 *  @default <i>blank string - i.e. disabled</i>                                                                     // 11632
		 *                                                                                                                   // 11633
		 *  @dtopt Features                                                                                                  // 11634
		 *  @name DataTable.defaults.scrollX                                                                                 // 11635
		 *                                                                                                                   // 11636
		 *  @example                                                                                                         // 11637
		 *    $(document).ready( function() {                                                                                // 11638
		 *      $('#example').dataTable( {                                                                                   // 11639
		 *        "scrollX": true,                                                                                           // 11640
		 *        "scrollCollapse": true                                                                                     // 11641
		 *      } );                                                                                                         // 11642
		 *    } );                                                                                                           // 11643
		 */                                                                                                                  // 11644
		"sScrollX": "",                                                                                                      // 11645
	                                                                                                                      // 11646
	                                                                                                                      // 11647
		/**                                                                                                                  // 11648
		 * This property can be used to force a DataTable to use more width than it                                          // 11649
		 * might otherwise do when x-scrolling is enabled. For example if you have a                                         // 11650
		 * table which requires to be well spaced, this parameter is useful for                                              // 11651
		 * "over-sizing" the table, and thus forcing scrolling. This property can by                                         // 11652
		 * any CSS unit, or a number (in which case it will be treated as a pixel                                            // 11653
		 * measurement).                                                                                                     // 11654
		 *  @type string                                                                                                     // 11655
		 *  @default <i>blank string - i.e. disabled</i>                                                                     // 11656
		 *                                                                                                                   // 11657
		 *  @dtopt Options                                                                                                   // 11658
		 *  @name DataTable.defaults.scrollXInner                                                                            // 11659
		 *                                                                                                                   // 11660
		 *  @example                                                                                                         // 11661
		 *    $(document).ready( function() {                                                                                // 11662
		 *      $('#example').dataTable( {                                                                                   // 11663
		 *        "scrollX": "100%",                                                                                         // 11664
		 *        "scrollXInner": "110%"                                                                                     // 11665
		 *      } );                                                                                                         // 11666
		 *    } );                                                                                                           // 11667
		 */                                                                                                                  // 11668
		"sScrollXInner": "",                                                                                                 // 11669
	                                                                                                                      // 11670
	                                                                                                                      // 11671
		/**                                                                                                                  // 11672
		 * Enable vertical scrolling. Vertical scrolling will constrain the DataTable                                        // 11673
		 * to the given height, and enable scrolling for any data which overflows the                                        // 11674
		 * current viewport. This can be used as an alternative to paging to display                                         // 11675
		 * a lot of data in a small area (although paging and scrolling can both be                                          // 11676
		 * enabled at the same time). This property can be any CSS unit, or a number                                         // 11677
		 * (in which case it will be treated as a pixel measurement).                                                        // 11678
		 *  @type string                                                                                                     // 11679
		 *  @default <i>blank string - i.e. disabled</i>                                                                     // 11680
		 *                                                                                                                   // 11681
		 *  @dtopt Features                                                                                                  // 11682
		 *  @name DataTable.defaults.scrollY                                                                                 // 11683
		 *                                                                                                                   // 11684
		 *  @example                                                                                                         // 11685
		 *    $(document).ready( function() {                                                                                // 11686
		 *      $('#example').dataTable( {                                                                                   // 11687
		 *        "scrollY": "200px",                                                                                        // 11688
		 *        "paginate": false                                                                                          // 11689
		 *      } );                                                                                                         // 11690
		 *    } );                                                                                                           // 11691
		 */                                                                                                                  // 11692
		"sScrollY": "",                                                                                                      // 11693
	                                                                                                                      // 11694
	                                                                                                                      // 11695
		/**                                                                                                                  // 11696
		 * __Deprecated__ The functionality provided by this parameter has now been                                          // 11697
		 * superseded by that provided through `ajax`, which should be used instead.                                         // 11698
		 *                                                                                                                   // 11699
		 * Set the HTTP method that is used to make the Ajax call for server-side                                            // 11700
		 * processing or Ajax sourced data.                                                                                  // 11701
		 *  @type string                                                                                                     // 11702
		 *  @default GET                                                                                                     // 11703
		 *                                                                                                                   // 11704
		 *  @dtopt Options                                                                                                   // 11705
		 *  @dtopt Server-side                                                                                               // 11706
		 *  @name DataTable.defaults.serverMethod                                                                            // 11707
		 *                                                                                                                   // 11708
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.                                                  // 11709
		 */                                                                                                                  // 11710
		"sServerMethod": "GET",                                                                                              // 11711
	                                                                                                                      // 11712
	                                                                                                                      // 11713
		/**                                                                                                                  // 11714
		 * DataTables makes use of renderers when displaying HTML elements for                                               // 11715
		 * a table. These renderers can be added or modified by plug-ins to                                                  // 11716
		 * generate suitable mark-up for a site. For example the Bootstrap                                                   // 11717
		 * integration plug-in for DataTables uses a paging button renderer to                                               // 11718
		 * display pagination buttons in the mark-up required by Bootstrap.                                                  // 11719
		 *                                                                                                                   // 11720
		 * For further information about the renderers available see                                                         // 11721
		 * DataTable.ext.renderer                                                                                            // 11722
		 *  @type string|object                                                                                              // 11723
		 *  @default null                                                                                                    // 11724
		 *                                                                                                                   // 11725
		 *  @name DataTable.defaults.renderer                                                                                // 11726
		 *                                                                                                                   // 11727
		 */                                                                                                                  // 11728
		"renderer": null                                                                                                     // 11729
	};                                                                                                                    // 11730
	                                                                                                                      // 11731
	_fnHungarianMap( DataTable.defaults );                                                                                // 11732
	                                                                                                                      // 11733
	                                                                                                                      // 11734
	                                                                                                                      // 11735
	/*                                                                                                                    // 11736
	 * Developer note - See note in model.defaults.js about the use of Hungarian                                          // 11737
	 * notation and camel case.                                                                                           // 11738
	 */                                                                                                                   // 11739
	                                                                                                                      // 11740
	/**                                                                                                                   // 11741
	 * Column options that can be given to DataTables at initialisation time.                                             // 11742
	 *  @namespace                                                                                                        // 11743
	 */                                                                                                                   // 11744
	DataTable.defaults.column = {                                                                                         // 11745
		/**                                                                                                                  // 11746
		 * Define which column(s) an order will occur on for this column. This                                               // 11747
		 * allows a column's ordering to take multiple columns into account when                                             // 11748
		 * doing a sort or use the data from a different column. For example first                                           // 11749
		 * name / last name columns make sense to do a multi-column sort over the                                            // 11750
		 * two columns.                                                                                                      // 11751
		 *  @type array|int                                                                                                  // 11752
		 *  @default null <i>Takes the value of the column index automatically</i>                                           // 11753
		 *                                                                                                                   // 11754
		 *  @name DataTable.defaults.column.orderData                                                                        // 11755
		 *  @dtopt Columns                                                                                                   // 11756
		 *                                                                                                                   // 11757
		 *  @example                                                                                                         // 11758
		 *    // Using `columnDefs`                                                                                          // 11759
		 *    $(document).ready( function() {                                                                                // 11760
		 *      $('#example').dataTable( {                                                                                   // 11761
		 *        "columnDefs": [                                                                                            // 11762
		 *          { "orderData": [ 0, 1 ], "targets": [ 0 ] },                                                             // 11763
		 *          { "orderData": [ 1, 0 ], "targets": [ 1 ] },                                                             // 11764
		 *          { "orderData": 2, "targets": [ 2 ] }                                                                     // 11765
		 *        ]                                                                                                          // 11766
		 *      } );                                                                                                         // 11767
		 *    } );                                                                                                           // 11768
		 *                                                                                                                   // 11769
		 *  @example                                                                                                         // 11770
		 *    // Using `columns`                                                                                             // 11771
		 *    $(document).ready( function() {                                                                                // 11772
		 *      $('#example').dataTable( {                                                                                   // 11773
		 *        "columns": [                                                                                               // 11774
		 *          { "orderData": [ 0, 1 ] },                                                                               // 11775
		 *          { "orderData": [ 1, 0 ] },                                                                               // 11776
		 *          { "orderData": 2 },                                                                                      // 11777
		 *          null,                                                                                                    // 11778
		 *          null                                                                                                     // 11779
		 *        ]                                                                                                          // 11780
		 *      } );                                                                                                         // 11781
		 *    } );                                                                                                           // 11782
		 */                                                                                                                  // 11783
		"aDataSort": null,                                                                                                   // 11784
		"iDataSort": -1,                                                                                                     // 11785
	                                                                                                                      // 11786
	                                                                                                                      // 11787
		/**                                                                                                                  // 11788
		 * You can control the default ordering direction, and even alter the                                                // 11789
		 * behaviour of the sort handler (i.e. only allow ascending ordering etc)                                            // 11790
		 * using this parameter.                                                                                             // 11791
		 *  @type array                                                                                                      // 11792
		 *  @default [ 'asc', 'desc' ]                                                                                       // 11793
		 *                                                                                                                   // 11794
		 *  @name DataTable.defaults.column.orderSequence                                                                    // 11795
		 *  @dtopt Columns                                                                                                   // 11796
		 *                                                                                                                   // 11797
		 *  @example                                                                                                         // 11798
		 *    // Using `columnDefs`                                                                                          // 11799
		 *    $(document).ready( function() {                                                                                // 11800
		 *      $('#example').dataTable( {                                                                                   // 11801
		 *        "columnDefs": [                                                                                            // 11802
		 *          { "orderSequence": [ "asc" ], "targets": [ 1 ] },                                                        // 11803
		 *          { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },                                         // 11804
		 *          { "orderSequence": [ "desc" ], "targets": [ 3 ] }                                                        // 11805
		 *        ]                                                                                                          // 11806
		 *      } );                                                                                                         // 11807
		 *    } );                                                                                                           // 11808
		 *                                                                                                                   // 11809
		 *  @example                                                                                                         // 11810
		 *    // Using `columns`                                                                                             // 11811
		 *    $(document).ready( function() {                                                                                // 11812
		 *      $('#example').dataTable( {                                                                                   // 11813
		 *        "columns": [                                                                                               // 11814
		 *          null,                                                                                                    // 11815
		 *          { "orderSequence": [ "asc" ] },                                                                          // 11816
		 *          { "orderSequence": [ "desc", "asc", "asc" ] },                                                           // 11817
		 *          { "orderSequence": [ "desc" ] },                                                                         // 11818
		 *          null                                                                                                     // 11819
		 *        ]                                                                                                          // 11820
		 *      } );                                                                                                         // 11821
		 *    } );                                                                                                           // 11822
		 */                                                                                                                  // 11823
		"asSorting": [ 'asc', 'desc' ],                                                                                      // 11824
	                                                                                                                      // 11825
	                                                                                                                      // 11826
		/**                                                                                                                  // 11827
		 * Enable or disable filtering on the data in this column.                                                           // 11828
		 *  @type boolean                                                                                                    // 11829
		 *  @default true                                                                                                    // 11830
		 *                                                                                                                   // 11831
		 *  @name DataTable.defaults.column.searchable                                                                       // 11832
		 *  @dtopt Columns                                                                                                   // 11833
		 *                                                                                                                   // 11834
		 *  @example                                                                                                         // 11835
		 *    // Using `columnDefs`                                                                                          // 11836
		 *    $(document).ready( function() {                                                                                // 11837
		 *      $('#example').dataTable( {                                                                                   // 11838
		 *        "columnDefs": [                                                                                            // 11839
		 *          { "searchable": false, "targets": [ 0 ] }                                                                // 11840
		 *        ] } );                                                                                                     // 11841
		 *    } );                                                                                                           // 11842
		 *                                                                                                                   // 11843
		 *  @example                                                                                                         // 11844
		 *    // Using `columns`                                                                                             // 11845
		 *    $(document).ready( function() {                                                                                // 11846
		 *      $('#example').dataTable( {                                                                                   // 11847
		 *        "columns": [                                                                                               // 11848
		 *          { "searchable": false },                                                                                 // 11849
		 *          null,                                                                                                    // 11850
		 *          null,                                                                                                    // 11851
		 *          null,                                                                                                    // 11852
		 *          null                                                                                                     // 11853
		 *        ] } );                                                                                                     // 11854
		 *    } );                                                                                                           // 11855
		 */                                                                                                                  // 11856
		"bSearchable": true,                                                                                                 // 11857
	                                                                                                                      // 11858
	                                                                                                                      // 11859
		/**                                                                                                                  // 11860
		 * Enable or disable ordering on this column.                                                                        // 11861
		 *  @type boolean                                                                                                    // 11862
		 *  @default true                                                                                                    // 11863
		 *                                                                                                                   // 11864
		 *  @name DataTable.defaults.column.orderable                                                                        // 11865
		 *  @dtopt Columns                                                                                                   // 11866
		 *                                                                                                                   // 11867
		 *  @example                                                                                                         // 11868
		 *    // Using `columnDefs`                                                                                          // 11869
		 *    $(document).ready( function() {                                                                                // 11870
		 *      $('#example').dataTable( {                                                                                   // 11871
		 *        "columnDefs": [                                                                                            // 11872
		 *          { "orderable": false, "targets": [ 0 ] }                                                                 // 11873
		 *        ] } );                                                                                                     // 11874
		 *    } );                                                                                                           // 11875
		 *                                                                                                                   // 11876
		 *  @example                                                                                                         // 11877
		 *    // Using `columns`                                                                                             // 11878
		 *    $(document).ready( function() {                                                                                // 11879
		 *      $('#example').dataTable( {                                                                                   // 11880
		 *        "columns": [                                                                                               // 11881
		 *          { "orderable": false },                                                                                  // 11882
		 *          null,                                                                                                    // 11883
		 *          null,                                                                                                    // 11884
		 *          null,                                                                                                    // 11885
		 *          null                                                                                                     // 11886
		 *        ] } );                                                                                                     // 11887
		 *    } );                                                                                                           // 11888
		 */                                                                                                                  // 11889
		"bSortable": true,                                                                                                   // 11890
	                                                                                                                      // 11891
	                                                                                                                      // 11892
		/**                                                                                                                  // 11893
		 * Enable or disable the display of this column.                                                                     // 11894
		 *  @type boolean                                                                                                    // 11895
		 *  @default true                                                                                                    // 11896
		 *                                                                                                                   // 11897
		 *  @name DataTable.defaults.column.visible                                                                          // 11898
		 *  @dtopt Columns                                                                                                   // 11899
		 *                                                                                                                   // 11900
		 *  @example                                                                                                         // 11901
		 *    // Using `columnDefs`                                                                                          // 11902
		 *    $(document).ready( function() {                                                                                // 11903
		 *      $('#example').dataTable( {                                                                                   // 11904
		 *        "columnDefs": [                                                                                            // 11905
		 *          { "visible": false, "targets": [ 0 ] }                                                                   // 11906
		 *        ] } );                                                                                                     // 11907
		 *    } );                                                                                                           // 11908
		 *                                                                                                                   // 11909
		 *  @example                                                                                                         // 11910
		 *    // Using `columns`                                                                                             // 11911
		 *    $(document).ready( function() {                                                                                // 11912
		 *      $('#example').dataTable( {                                                                                   // 11913
		 *        "columns": [                                                                                               // 11914
		 *          { "visible": false },                                                                                    // 11915
		 *          null,                                                                                                    // 11916
		 *          null,                                                                                                    // 11917
		 *          null,                                                                                                    // 11918
		 *          null                                                                                                     // 11919
		 *        ] } );                                                                                                     // 11920
		 *    } );                                                                                                           // 11921
		 */                                                                                                                  // 11922
		"bVisible": true,                                                                                                    // 11923
	                                                                                                                      // 11924
	                                                                                                                      // 11925
		/**                                                                                                                  // 11926
		 * Developer definable function that is called whenever a cell is created (Ajax source,                              // 11927
		 * etc) or processed for input (DOM source). This can be used as a compliment to mRender                             // 11928
		 * allowing you to modify the DOM element (add background colour for example) when the                               // 11929
		 * element is available.                                                                                             // 11930
		 *  @type function                                                                                                   // 11931
		 *  @param {element} td The TD node that has been created                                                            // 11932
		 *  @param {*} cellData The Data for the cell                                                                        // 11933
		 *  @param {array|object} rowData The data for the whole row                                                         // 11934
		 *  @param {int} row The row index for the aoData data store                                                         // 11935
		 *  @param {int} col The column index for aoColumns                                                                  // 11936
		 *                                                                                                                   // 11937
		 *  @name DataTable.defaults.column.createdCell                                                                      // 11938
		 *  @dtopt Columns                                                                                                   // 11939
		 *                                                                                                                   // 11940
		 *  @example                                                                                                         // 11941
		 *    $(document).ready( function() {                                                                                // 11942
		 *      $('#example').dataTable( {                                                                                   // 11943
		 *        "columnDefs": [ {                                                                                          // 11944
		 *          "targets": [3],                                                                                          // 11945
		 *          "createdCell": function (td, cellData, rowData, row, col) {                                              // 11946
		 *            if ( cellData == "1.7" ) {                                                                             // 11947
		 *              $(td).css('color', 'blue')                                                                           // 11948
		 *            }                                                                                                      // 11949
		 *          }                                                                                                        // 11950
		 *        } ]                                                                                                        // 11951
		 *      });                                                                                                          // 11952
		 *    } );                                                                                                           // 11953
		 */                                                                                                                  // 11954
		"fnCreatedCell": null,                                                                                               // 11955
	                                                                                                                      // 11956
	                                                                                                                      // 11957
		/**                                                                                                                  // 11958
		 * This parameter has been replaced by `data` in DataTables to ensure naming                                         // 11959
		 * consistency. `dataProp` can still be used, as there is backwards                                                  // 11960
		 * compatibility in DataTables for this option, but it is strongly                                                   // 11961
		 * recommended that you use `data` in preference to `dataProp`.                                                      // 11962
		 *  @name DataTable.defaults.column.dataProp                                                                         // 11963
		 */                                                                                                                  // 11964
	                                                                                                                      // 11965
	                                                                                                                      // 11966
		/**                                                                                                                  // 11967
		 * This property can be used to read data from any data source property,                                             // 11968
		 * including deeply nested objects / properties. `data` can be given in a                                            // 11969
		 * number of different ways which effect its behaviour:                                                              // 11970
		 *                                                                                                                   // 11971
		 * * `integer` - treated as an array index for the data source. This is the                                          // 11972
		 *   default that DataTables uses (incrementally increased for each column).                                         // 11973
		 * * `string` - read an object property from the data source. There are                                              // 11974
		 *   three 'special' options that can be used in the string to alter how                                             // 11975
		 *   DataTables reads the data from the source object:                                                               // 11976
		 *    * `.` - Dotted Javascript notation. Just as you use a `.` in                                                   // 11977
		 *      Javascript to read from nested objects, so to can the options                                                // 11978
		 *      specified in `data`. For example: `browser.version` or                                                       // 11979
		 *      `browser.name`. If your object parameter name contains a period, use                                         // 11980
		 *      `\\` to escape it - i.e. `first\\.name`.                                                                     // 11981
		 *    * `[]` - Array notation. DataTables can automatically combine data                                             // 11982
		 *      from and array source, joining the data with the characters provided                                         // 11983
		 *      between the two brackets. For example: `name[, ]` would provide a                                            // 11984
		 *      comma-space separated list from the source array. If no characters                                           // 11985
		 *      are provided between the brackets, the original array source is                                              // 11986
		 *      returned.                                                                                                    // 11987
		 *    * `()` - Function notation. Adding `()` to the end of a parameter will                                         // 11988
		 *      execute a function of the name given. For example: `browser()` for a                                         // 11989
		 *      simple function on the data source, `browser.version()` for a                                                // 11990
		 *      function in a nested property or even `browser().version` to get an                                          // 11991
		 *      object property if the function called returns an object. Note that                                          // 11992
		 *      function notation is recommended for use in `render` rather than                                             // 11993
		 *      `data` as it is much simpler to use as a renderer.                                                           // 11994
		 * * `null` - use the original data source for the row rather than plucking                                          // 11995
		 *   data directly from it. This action has effects on two other                                                     // 11996
		 *   initialisation options:                                                                                         // 11997
		 *    * `defaultContent` - When null is given as the `data` option and                                               // 11998
		 *      `defaultContent` is specified for the column, the value defined by                                           // 11999
		 *      `defaultContent` will be used for the cell.                                                                  // 12000
		 *    * `render` - When null is used for the `data` option and the `render`                                          // 12001
		 *      option is specified for the column, the whole data source for the                                            // 12002
		 *      row is used for the renderer.                                                                                // 12003
		 * * `function` - the function given will be executed whenever DataTables                                            // 12004
		 *   needs to set or get the data for a cell in the column. The function                                             // 12005
		 *   takes three parameters:                                                                                         // 12006
		 *    * Parameters:                                                                                                  // 12007
		 *      * `{array|object}` The data source for the row                                                               // 12008
		 *      * `{string}` The type call data requested - this will be 'set' when                                          // 12009
		 *        setting data or 'filter', 'display', 'type', 'sort' or undefined                                           // 12010
		 *        when gathering data. Note that when `undefined` is given for the                                           // 12011
		 *        type DataTables expects to get the raw data for the object back<                                           // 12012
		 *      * `{*}` Data to set when the second parameter is 'set'.                                                      // 12013
		 *    * Return:                                                                                                      // 12014
		 *      * The return value from the function is not required when 'set' is                                           // 12015
		 *        the type of call, but otherwise the return is what will be used                                            // 12016
		 *        for the data requested.                                                                                    // 12017
		 *                                                                                                                   // 12018
		 * Note that `data` is a getter and setter option. If you just require                                               // 12019
		 * formatting of data for output, you will likely want to use `render` which                                         // 12020
		 * is simply a getter and thus simpler to use.                                                                       // 12021
		 *                                                                                                                   // 12022
		 * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The                                            // 12023
		 * name change reflects the flexibility of this property and is consistent                                           // 12024
		 * with the naming of mRender. If 'mDataProp' is given, then it will still                                           // 12025
		 * be used by DataTables, as it automatically maps the old name to the new                                           // 12026
		 * if required.                                                                                                      // 12027
		 *                                                                                                                   // 12028
		 *  @type string|int|function|null                                                                                   // 12029
		 *  @default null <i>Use automatically calculated column index</i>                                                   // 12030
		 *                                                                                                                   // 12031
		 *  @name DataTable.defaults.column.data                                                                             // 12032
		 *  @dtopt Columns                                                                                                   // 12033
		 *                                                                                                                   // 12034
		 *  @example                                                                                                         // 12035
		 *    // Read table data from objects                                                                                // 12036
		 *    // JSON structure for each row:                                                                                // 12037
		 *    //   {                                                                                                         // 12038
		 *    //      "engine": {value},                                                                                     // 12039
		 *    //      "browser": {value},                                                                                    // 12040
		 *    //      "platform": {value},                                                                                   // 12041
		 *    //      "version": {value},                                                                                    // 12042
		 *    //      "grade": {value}                                                                                       // 12043
		 *    //   }                                                                                                         // 12044
		 *    $(document).ready( function() {                                                                                // 12045
		 *      $('#example').dataTable( {                                                                                   // 12046
		 *        "ajaxSource": "sources/objects.txt",                                                                       // 12047
		 *        "columns": [                                                                                               // 12048
		 *          { "data": "engine" },                                                                                    // 12049
		 *          { "data": "browser" },                                                                                   // 12050
		 *          { "data": "platform" },                                                                                  // 12051
		 *          { "data": "version" },                                                                                   // 12052
		 *          { "data": "grade" }                                                                                      // 12053
		 *        ]                                                                                                          // 12054
		 *      } );                                                                                                         // 12055
		 *    } );                                                                                                           // 12056
		 *                                                                                                                   // 12057
		 *  @example                                                                                                         // 12058
		 *    // Read information from deeply nested objects                                                                 // 12059
		 *    // JSON structure for each row:                                                                                // 12060
		 *    //   {                                                                                                         // 12061
		 *    //      "engine": {value},                                                                                     // 12062
		 *    //      "browser": {value},                                                                                    // 12063
		 *    //      "platform": {                                                                                          // 12064
		 *    //         "inner": {value}                                                                                    // 12065
		 *    //      },                                                                                                     // 12066
		 *    //      "details": [                                                                                           // 12067
		 *    //         {value}, {value}                                                                                    // 12068
		 *    //      ]                                                                                                      // 12069
		 *    //   }                                                                                                         // 12070
		 *    $(document).ready( function() {                                                                                // 12071
		 *      $('#example').dataTable( {                                                                                   // 12072
		 *        "ajaxSource": "sources/deep.txt",                                                                          // 12073
		 *        "columns": [                                                                                               // 12074
		 *          { "data": "engine" },                                                                                    // 12075
		 *          { "data": "browser" },                                                                                   // 12076
		 *          { "data": "platform.inner" },                                                                            // 12077
		 *          { "data": "platform.details.0" },                                                                        // 12078
		 *          { "data": "platform.details.1" }                                                                         // 12079
		 *        ]                                                                                                          // 12080
		 *      } );                                                                                                         // 12081
		 *    } );                                                                                                           // 12082
		 *                                                                                                                   // 12083
		 *  @example                                                                                                         // 12084
		 *    // Using `data` as a function to provide different information for                                             // 12085
		 *    // sorting, filtering and display. In this case, currency (price)                                              // 12086
		 *    $(document).ready( function() {                                                                                // 12087
		 *      $('#example').dataTable( {                                                                                   // 12088
		 *        "columnDefs": [ {                                                                                          // 12089
		 *          "targets": [ 0 ],                                                                                        // 12090
		 *          "data": function ( source, type, val ) {                                                                 // 12091
		 *            if (type === 'set') {                                                                                  // 12092
		 *              source.price = val;                                                                                  // 12093
		 *              // Store the computed dislay and filter values for efficiency                                        // 12094
		 *              source.price_display = val=="" ? "" : "$"+numberFormat(val);                                         // 12095
		 *              source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;                                 // 12096
		 *              return;                                                                                              // 12097
		 *            }                                                                                                      // 12098
		 *            else if (type === 'display') {                                                                         // 12099
		 *              return source.price_display;                                                                         // 12100
		 *            }                                                                                                      // 12101
		 *            else if (type === 'filter') {                                                                          // 12102
		 *              return source.price_filter;                                                                          // 12103
		 *            }                                                                                                      // 12104
		 *            // 'sort', 'type' and undefined all just use the integer                                               // 12105
		 *            return source.price;                                                                                   // 12106
		 *          }                                                                                                        // 12107
		 *        } ]                                                                                                        // 12108
		 *      } );                                                                                                         // 12109
		 *    } );                                                                                                           // 12110
		 *                                                                                                                   // 12111
		 *  @example                                                                                                         // 12112
		 *    // Using default content                                                                                       // 12113
		 *    $(document).ready( function() {                                                                                // 12114
		 *      $('#example').dataTable( {                                                                                   // 12115
		 *        "columnDefs": [ {                                                                                          // 12116
		 *          "targets": [ 0 ],                                                                                        // 12117
		 *          "data": null,                                                                                            // 12118
		 *          "defaultContent": "Click to edit"                                                                        // 12119
		 *        } ]                                                                                                        // 12120
		 *      } );                                                                                                         // 12121
		 *    } );                                                                                                           // 12122
		 *                                                                                                                   // 12123
		 *  @example                                                                                                         // 12124
		 *    // Using array notation - outputting a list from an array                                                      // 12125
		 *    $(document).ready( function() {                                                                                // 12126
		 *      $('#example').dataTable( {                                                                                   // 12127
		 *        "columnDefs": [ {                                                                                          // 12128
		 *          "targets": [ 0 ],                                                                                        // 12129
		 *          "data": "name[, ]"                                                                                       // 12130
		 *        } ]                                                                                                        // 12131
		 *      } );                                                                                                         // 12132
		 *    } );                                                                                                           // 12133
		 *                                                                                                                   // 12134
		 */                                                                                                                  // 12135
		"mData": null,                                                                                                       // 12136
	                                                                                                                      // 12137
	                                                                                                                      // 12138
		/**                                                                                                                  // 12139
		 * This property is the rendering partner to `data` and it is suggested that                                         // 12140
		 * when you want to manipulate data for display (including filtering,                                                // 12141
		 * sorting etc) without altering the underlying data for the table, use this                                         // 12142
		 * property. `render` can be considered to be the the read only companion to                                         // 12143
		 * `data` which is read / write (then as such more complex). Like `data`                                             // 12144
		 * this option can be given in a number of different ways to effect its                                              // 12145
		 * behaviour:                                                                                                        // 12146
		 *                                                                                                                   // 12147
		 * * `integer` - treated as an array index for the data source. This is the                                          // 12148
		 *   default that DataTables uses (incrementally increased for each column).                                         // 12149
		 * * `string` - read an object property from the data source. There are                                              // 12150
		 *   three 'special' options that can be used in the string to alter how                                             // 12151
		 *   DataTables reads the data from the source object:                                                               // 12152
		 *    * `.` - Dotted Javascript notation. Just as you use a `.` in                                                   // 12153
		 *      Javascript to read from nested objects, so to can the options                                                // 12154
		 *      specified in `data`. For example: `browser.version` or                                                       // 12155
		 *      `browser.name`. If your object parameter name contains a period, use                                         // 12156
		 *      `\\` to escape it - i.e. `first\\.name`.                                                                     // 12157
		 *    * `[]` - Array notation. DataTables can automatically combine data                                             // 12158
		 *      from and array source, joining the data with the characters provided                                         // 12159
		 *      between the two brackets. For example: `name[, ]` would provide a                                            // 12160
		 *      comma-space separated list from the source array. If no characters                                           // 12161
		 *      are provided between the brackets, the original array source is                                              // 12162
		 *      returned.                                                                                                    // 12163
		 *    * `()` - Function notation. Adding `()` to the end of a parameter will                                         // 12164
		 *      execute a function of the name given. For example: `browser()` for a                                         // 12165
		 *      simple function on the data source, `browser.version()` for a                                                // 12166
		 *      function in a nested property or even `browser().version` to get an                                          // 12167
		 *      object property if the function called returns an object.                                                    // 12168
		 * * `object` - use different data for the different data types requested by                                         // 12169
		 *   DataTables ('filter', 'display', 'type' or 'sort'). The property names                                          // 12170
		 *   of the object is the data type the property refers to and the value can                                         // 12171
		 *   defined using an integer, string or function using the same rules as                                            // 12172
		 *   `render` normally does. Note that an `_` option _must_ be specified.                                            // 12173
		 *   This is the default value to use if you haven't specified a value for                                           // 12174
		 *   the data type requested by DataTables.                                                                          // 12175
		 * * `function` - the function given will be executed whenever DataTables                                            // 12176
		 *   needs to set or get the data for a cell in the column. The function                                             // 12177
		 *   takes three parameters:                                                                                         // 12178
		 *    * Parameters:                                                                                                  // 12179
		 *      * {array|object} The data source for the row (based on `data`)                                               // 12180
		 *      * {string} The type call data requested - this will be 'filter',                                             // 12181
		 *        'display', 'type' or 'sort'.                                                                               // 12182
		 *      * {array|object} The full data source for the row (not based on                                              // 12183
		 *        `data`)                                                                                                    // 12184
		 *    * Return:                                                                                                      // 12185
		 *      * The return value from the function is what will be used for the                                            // 12186
		 *        data requested.                                                                                            // 12187
		 *                                                                                                                   // 12188
		 *  @type string|int|function|object|null                                                                            // 12189
		 *  @default null Use the data source value.                                                                         // 12190
		 *                                                                                                                   // 12191
		 *  @name DataTable.defaults.column.render                                                                           // 12192
		 *  @dtopt Columns                                                                                                   // 12193
		 *                                                                                                                   // 12194
		 *  @example                                                                                                         // 12195
		 *    // Create a comma separated list from an array of objects                                                      // 12196
		 *    $(document).ready( function() {                                                                                // 12197
		 *      $('#example').dataTable( {                                                                                   // 12198
		 *        "ajaxSource": "sources/deep.txt",                                                                          // 12199
		 *        "columns": [                                                                                               // 12200
		 *          { "data": "engine" },                                                                                    // 12201
		 *          { "data": "browser" },                                                                                   // 12202
		 *          {                                                                                                        // 12203
		 *            "data": "platform",                                                                                    // 12204
		 *            "render": "[, ].name"                                                                                  // 12205
		 *          }                                                                                                        // 12206
		 *        ]                                                                                                          // 12207
		 *      } );                                                                                                         // 12208
		 *    } );                                                                                                           // 12209
		 *                                                                                                                   // 12210
		 *  @example                                                                                                         // 12211
		 *    // Execute a function to obtain data                                                                           // 12212
		 *    $(document).ready( function() {                                                                                // 12213
		 *      $('#example').dataTable( {                                                                                   // 12214
		 *        "columnDefs": [ {                                                                                          // 12215
		 *          "targets": [ 0 ],                                                                                        // 12216
		 *          "data": null, // Use the full data source object for the renderer's source                               // 12217
		 *          "render": "browserName()"                                                                                // 12218
		 *        } ]                                                                                                        // 12219
		 *      } );                                                                                                         // 12220
		 *    } );                                                                                                           // 12221
		 *                                                                                                                   // 12222
		 *  @example                                                                                                         // 12223
		 *    // As an object, extracting different data for the different types                                             // 12224
		 *    // This would be used with a data source such as:                                                              // 12225
		 *    //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }                     // 12226
		 *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`                       // 12227
		 *    // (which has both forms) is used for filtering for if a user inputs either format, while                      // 12228
		 *    // the formatted phone number is the one that is shown in the table.                                           // 12229
		 *    $(document).ready( function() {                                                                                // 12230
		 *      $('#example').dataTable( {                                                                                   // 12231
		 *        "columnDefs": [ {                                                                                          // 12232
		 *          "targets": [ 0 ],                                                                                        // 12233
		 *          "data": null, // Use the full data source object for the renderer's source                               // 12234
		 *          "render": {                                                                                              // 12235
		 *            "_": "phone",                                                                                          // 12236
		 *            "filter": "phone_filter",                                                                              // 12237
		 *            "display": "phone_display"                                                                             // 12238
		 *          }                                                                                                        // 12239
		 *        } ]                                                                                                        // 12240
		 *      } );                                                                                                         // 12241
		 *    } );                                                                                                           // 12242
		 *                                                                                                                   // 12243
		 *  @example                                                                                                         // 12244
		 *    // Use as a function to create a link from the data source                                                     // 12245
		 *    $(document).ready( function() {                                                                                // 12246
		 *      $('#example').dataTable( {                                                                                   // 12247
		 *        "columnDefs": [ {                                                                                          // 12248
		 *          "targets": [ 0 ],                                                                                        // 12249
		 *          "data": "download_link",                                                                                 // 12250
		 *          "render": function ( data, type, full ) {                                                                // 12251
		 *            return '<a href="'+data+'">Download</a>';                                                              // 12252
		 *          }                                                                                                        // 12253
		 *        } ]                                                                                                        // 12254
		 *      } );                                                                                                         // 12255
		 *    } );                                                                                                           // 12256
		 */                                                                                                                  // 12257
		"mRender": null,                                                                                                     // 12258
	                                                                                                                      // 12259
	                                                                                                                      // 12260
		/**                                                                                                                  // 12261
		 * Change the cell type created for the column - either TD cells or TH cells. This                                   // 12262
		 * can be useful as TH cells have semantic meaning in the table body, allowing them                                  // 12263
		 * to act as a header for a row (you may wish to add scope='row' to the TH elements).                                // 12264
		 *  @type string                                                                                                     // 12265
		 *  @default td                                                                                                      // 12266
		 *                                                                                                                   // 12267
		 *  @name DataTable.defaults.column.cellType                                                                         // 12268
		 *  @dtopt Columns                                                                                                   // 12269
		 *                                                                                                                   // 12270
		 *  @example                                                                                                         // 12271
		 *    // Make the first column use TH cells                                                                          // 12272
		 *    $(document).ready( function() {                                                                                // 12273
		 *      $('#example').dataTable( {                                                                                   // 12274
		 *        "columnDefs": [ {                                                                                          // 12275
		 *          "targets": [ 0 ],                                                                                        // 12276
		 *          "cellType": "th"                                                                                         // 12277
		 *        } ]                                                                                                        // 12278
		 *      } );                                                                                                         // 12279
		 *    } );                                                                                                           // 12280
		 */                                                                                                                  // 12281
		"sCellType": "td",                                                                                                   // 12282
	                                                                                                                      // 12283
	                                                                                                                      // 12284
		/**                                                                                                                  // 12285
		 * Class to give to each cell in this column.                                                                        // 12286
		 *  @type string                                                                                                     // 12287
		 *  @default <i>Empty string</i>                                                                                     // 12288
		 *                                                                                                                   // 12289
		 *  @name DataTable.defaults.column.class                                                                            // 12290
		 *  @dtopt Columns                                                                                                   // 12291
		 *                                                                                                                   // 12292
		 *  @example                                                                                                         // 12293
		 *    // Using `columnDefs`                                                                                          // 12294
		 *    $(document).ready( function() {                                                                                // 12295
		 *      $('#example').dataTable( {                                                                                   // 12296
		 *        "columnDefs": [                                                                                            // 12297
		 *          { "class": "my_class", "targets": [ 0 ] }                                                                // 12298
		 *        ]                                                                                                          // 12299
		 *      } );                                                                                                         // 12300
		 *    } );                                                                                                           // 12301
		 *                                                                                                                   // 12302
		 *  @example                                                                                                         // 12303
		 *    // Using `columns`                                                                                             // 12304
		 *    $(document).ready( function() {                                                                                // 12305
		 *      $('#example').dataTable( {                                                                                   // 12306
		 *        "columns": [                                                                                               // 12307
		 *          { "class": "my_class" },                                                                                 // 12308
		 *          null,                                                                                                    // 12309
		 *          null,                                                                                                    // 12310
		 *          null,                                                                                                    // 12311
		 *          null                                                                                                     // 12312
		 *        ]                                                                                                          // 12313
		 *      } );                                                                                                         // 12314
		 *    } );                                                                                                           // 12315
		 */                                                                                                                  // 12316
		"sClass": "",                                                                                                        // 12317
	                                                                                                                      // 12318
		/**                                                                                                                  // 12319
		 * When DataTables calculates the column widths to assign to each column,                                            // 12320
		 * it finds the longest string in each column and then constructs a                                                  // 12321
		 * temporary table and reads the widths from that. The problem with this                                             // 12322
		 * is that "mmm" is much wider then "iiii", but the latter is a longer                                               // 12323
		 * string - thus the calculation can go wrong (doing it properly and putting                                         // 12324
		 * it into an DOM object and measuring that is horribly(!) slow). Thus as                                            // 12325
		 * a "work around" we provide this option. It will append its value to the                                           // 12326
		 * text that is found to be the longest string for the column - i.e. padding.                                        // 12327
		 * Generally you shouldn't need this!                                                                                // 12328
		 *  @type string                                                                                                     // 12329
		 *  @default <i>Empty string<i>                                                                                      // 12330
		 *                                                                                                                   // 12331
		 *  @name DataTable.defaults.column.contentPadding                                                                   // 12332
		 *  @dtopt Columns                                                                                                   // 12333
		 *                                                                                                                   // 12334
		 *  @example                                                                                                         // 12335
		 *    // Using `columns`                                                                                             // 12336
		 *    $(document).ready( function() {                                                                                // 12337
		 *      $('#example').dataTable( {                                                                                   // 12338
		 *        "columns": [                                                                                               // 12339
		 *          null,                                                                                                    // 12340
		 *          null,                                                                                                    // 12341
		 *          null,                                                                                                    // 12342
		 *          {                                                                                                        // 12343
		 *            "contentPadding": "mmm"                                                                                // 12344
		 *          }                                                                                                        // 12345
		 *        ]                                                                                                          // 12346
		 *      } );                                                                                                         // 12347
		 *    } );                                                                                                           // 12348
		 */                                                                                                                  // 12349
		"sContentPadding": "",                                                                                               // 12350
	                                                                                                                      // 12351
	                                                                                                                      // 12352
		/**                                                                                                                  // 12353
		 * Allows a default value to be given for a column's data, and will be used                                          // 12354
		 * whenever a null data source is encountered (this can be because `data`                                            // 12355
		 * is set to null, or because the data source itself is null).                                                       // 12356
		 *  @type string                                                                                                     // 12357
		 *  @default null                                                                                                    // 12358
		 *                                                                                                                   // 12359
		 *  @name DataTable.defaults.column.defaultContent                                                                   // 12360
		 *  @dtopt Columns                                                                                                   // 12361
		 *                                                                                                                   // 12362
		 *  @example                                                                                                         // 12363
		 *    // Using `columnDefs`                                                                                          // 12364
		 *    $(document).ready( function() {                                                                                // 12365
		 *      $('#example').dataTable( {                                                                                   // 12366
		 *        "columnDefs": [                                                                                            // 12367
		 *          {                                                                                                        // 12368
		 *            "data": null,                                                                                          // 12369
		 *            "defaultContent": "Edit",                                                                              // 12370
		 *            "targets": [ -1 ]                                                                                      // 12371
		 *          }                                                                                                        // 12372
		 *        ]                                                                                                          // 12373
		 *      } );                                                                                                         // 12374
		 *    } );                                                                                                           // 12375
		 *                                                                                                                   // 12376
		 *  @example                                                                                                         // 12377
		 *    // Using `columns`                                                                                             // 12378
		 *    $(document).ready( function() {                                                                                // 12379
		 *      $('#example').dataTable( {                                                                                   // 12380
		 *        "columns": [                                                                                               // 12381
		 *          null,                                                                                                    // 12382
		 *          null,                                                                                                    // 12383
		 *          null,                                                                                                    // 12384
		 *          {                                                                                                        // 12385
		 *            "data": null,                                                                                          // 12386
		 *            "defaultContent": "Edit"                                                                               // 12387
		 *          }                                                                                                        // 12388
		 *        ]                                                                                                          // 12389
		 *      } );                                                                                                         // 12390
		 *    } );                                                                                                           // 12391
		 */                                                                                                                  // 12392
		"sDefaultContent": null,                                                                                             // 12393
	                                                                                                                      // 12394
	                                                                                                                      // 12395
		/**                                                                                                                  // 12396
		 * This parameter is only used in DataTables' server-side processing. It can                                         // 12397
		 * be exceptionally useful to know what columns are being displayed on the                                           // 12398
		 * client side, and to map these to database fields. When defined, the names                                         // 12399
		 * also allow DataTables to reorder information from the server if it comes                                          // 12400
		 * back in an unexpected order (i.e. if you switch your columns around on the                                        // 12401
		 * client-side, your server-side code does not also need updating).                                                  // 12402
		 *  @type string                                                                                                     // 12403
		 *  @default <i>Empty string</i>                                                                                     // 12404
		 *                                                                                                                   // 12405
		 *  @name DataTable.defaults.column.name                                                                             // 12406
		 *  @dtopt Columns                                                                                                   // 12407
		 *                                                                                                                   // 12408
		 *  @example                                                                                                         // 12409
		 *    // Using `columnDefs`                                                                                          // 12410
		 *    $(document).ready( function() {                                                                                // 12411
		 *      $('#example').dataTable( {                                                                                   // 12412
		 *        "columnDefs": [                                                                                            // 12413
		 *          { "name": "engine", "targets": [ 0 ] },                                                                  // 12414
		 *          { "name": "browser", "targets": [ 1 ] },                                                                 // 12415
		 *          { "name": "platform", "targets": [ 2 ] },                                                                // 12416
		 *          { "name": "version", "targets": [ 3 ] },                                                                 // 12417
		 *          { "name": "grade", "targets": [ 4 ] }                                                                    // 12418
		 *        ]                                                                                                          // 12419
		 *      } );                                                                                                         // 12420
		 *    } );                                                                                                           // 12421
		 *                                                                                                                   // 12422
		 *  @example                                                                                                         // 12423
		 *    // Using `columns`                                                                                             // 12424
		 *    $(document).ready( function() {                                                                                // 12425
		 *      $('#example').dataTable( {                                                                                   // 12426
		 *        "columns": [                                                                                               // 12427
		 *          { "name": "engine" },                                                                                    // 12428
		 *          { "name": "browser" },                                                                                   // 12429
		 *          { "name": "platform" },                                                                                  // 12430
		 *          { "name": "version" },                                                                                   // 12431
		 *          { "name": "grade" }                                                                                      // 12432
		 *        ]                                                                                                          // 12433
		 *      } );                                                                                                         // 12434
		 *    } );                                                                                                           // 12435
		 */                                                                                                                  // 12436
		"sName": "",                                                                                                         // 12437
	                                                                                                                      // 12438
	                                                                                                                      // 12439
		/**                                                                                                                  // 12440
		 * Defines a data source type for the ordering which can be used to read                                             // 12441
		 * real-time information from the table (updating the internally cached                                              // 12442
		 * version) prior to ordering. This allows ordering to occur on user                                                 // 12443
		 * editable elements such as form inputs.                                                                            // 12444
		 *  @type string                                                                                                     // 12445
		 *  @default std                                                                                                     // 12446
		 *                                                                                                                   // 12447
		 *  @name DataTable.defaults.column.orderDataType                                                                    // 12448
		 *  @dtopt Columns                                                                                                   // 12449
		 *                                                                                                                   // 12450
		 *  @example                                                                                                         // 12451
		 *    // Using `columnDefs`                                                                                          // 12452
		 *    $(document).ready( function() {                                                                                // 12453
		 *      $('#example').dataTable( {                                                                                   // 12454
		 *        "columnDefs": [                                                                                            // 12455
		 *          { "orderDataType": "dom-text", "targets": [ 2, 3 ] },                                                    // 12456
		 *          { "type": "numeric", "targets": [ 3 ] },                                                                 // 12457
		 *          { "orderDataType": "dom-select", "targets": [ 4 ] },                                                     // 12458
		 *          { "orderDataType": "dom-checkbox", "targets": [ 5 ] }                                                    // 12459
		 *        ]                                                                                                          // 12460
		 *      } );                                                                                                         // 12461
		 *    } );                                                                                                           // 12462
		 *                                                                                                                   // 12463
		 *  @example                                                                                                         // 12464
		 *    // Using `columns`                                                                                             // 12465
		 *    $(document).ready( function() {                                                                                // 12466
		 *      $('#example').dataTable( {                                                                                   // 12467
		 *        "columns": [                                                                                               // 12468
		 *          null,                                                                                                    // 12469
		 *          null,                                                                                                    // 12470
		 *          { "orderDataType": "dom-text" },                                                                         // 12471
		 *          { "orderDataType": "dom-text", "type": "numeric" },                                                      // 12472
		 *          { "orderDataType": "dom-select" },                                                                       // 12473
		 *          { "orderDataType": "dom-checkbox" }                                                                      // 12474
		 *        ]                                                                                                          // 12475
		 *      } );                                                                                                         // 12476
		 *    } );                                                                                                           // 12477
		 */                                                                                                                  // 12478
		"sSortDataType": "std",                                                                                              // 12479
	                                                                                                                      // 12480
	                                                                                                                      // 12481
		/**                                                                                                                  // 12482
		 * The title of this column.                                                                                         // 12483
		 *  @type string                                                                                                     // 12484
		 *  @default null <i>Derived from the 'TH' value for this column in the                                              // 12485
		 *    original HTML table.</i>                                                                                       // 12486
		 *                                                                                                                   // 12487
		 *  @name DataTable.defaults.column.title                                                                            // 12488
		 *  @dtopt Columns                                                                                                   // 12489
		 *                                                                                                                   // 12490
		 *  @example                                                                                                         // 12491
		 *    // Using `columnDefs`                                                                                          // 12492
		 *    $(document).ready( function() {                                                                                // 12493
		 *      $('#example').dataTable( {                                                                                   // 12494
		 *        "columnDefs": [                                                                                            // 12495
		 *          { "title": "My column title", "targets": [ 0 ] }                                                         // 12496
		 *        ]                                                                                                          // 12497
		 *      } );                                                                                                         // 12498
		 *    } );                                                                                                           // 12499
		 *                                                                                                                   // 12500
		 *  @example                                                                                                         // 12501
		 *    // Using `columns`                                                                                             // 12502
		 *    $(document).ready( function() {                                                                                // 12503
		 *      $('#example').dataTable( {                                                                                   // 12504
		 *        "columns": [                                                                                               // 12505
		 *          { "title": "My column title" },                                                                          // 12506
		 *          null,                                                                                                    // 12507
		 *          null,                                                                                                    // 12508
		 *          null,                                                                                                    // 12509
		 *          null                                                                                                     // 12510
		 *        ]                                                                                                          // 12511
		 *      } );                                                                                                         // 12512
		 *    } );                                                                                                           // 12513
		 */                                                                                                                  // 12514
		"sTitle": null,                                                                                                      // 12515
	                                                                                                                      // 12516
	                                                                                                                      // 12517
		/**                                                                                                                  // 12518
		 * The type allows you to specify how the data for this column will be                                               // 12519
		 * ordered. Four types (string, numeric, date and html (which will strip                                             // 12520
		 * HTML tags before ordering)) are currently available. Note that only date                                          // 12521
		 * formats understood by Javascript's Date() object will be accepted as type                                         // 12522
		 * date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',                                         // 12523
		 * 'numeric', 'date' or 'html' (by default). Further types can be adding                                             // 12524
		 * through plug-ins.                                                                                                 // 12525
		 *  @type string                                                                                                     // 12526
		 *  @default null <i>Auto-detected from raw data</i>                                                                 // 12527
		 *                                                                                                                   // 12528
		 *  @name DataTable.defaults.column.type                                                                             // 12529
		 *  @dtopt Columns                                                                                                   // 12530
		 *                                                                                                                   // 12531
		 *  @example                                                                                                         // 12532
		 *    // Using `columnDefs`                                                                                          // 12533
		 *    $(document).ready( function() {                                                                                // 12534
		 *      $('#example').dataTable( {                                                                                   // 12535
		 *        "columnDefs": [                                                                                            // 12536
		 *          { "type": "html", "targets": [ 0 ] }                                                                     // 12537
		 *        ]                                                                                                          // 12538
		 *      } );                                                                                                         // 12539
		 *    } );                                                                                                           // 12540
		 *                                                                                                                   // 12541
		 *  @example                                                                                                         // 12542
		 *    // Using `columns`                                                                                             // 12543
		 *    $(document).ready( function() {                                                                                // 12544
		 *      $('#example').dataTable( {                                                                                   // 12545
		 *        "columns": [                                                                                               // 12546
		 *          { "type": "html" },                                                                                      // 12547
		 *          null,                                                                                                    // 12548
		 *          null,                                                                                                    // 12549
		 *          null,                                                                                                    // 12550
		 *          null                                                                                                     // 12551
		 *        ]                                                                                                          // 12552
		 *      } );                                                                                                         // 12553
		 *    } );                                                                                                           // 12554
		 */                                                                                                                  // 12555
		"sType": null,                                                                                                       // 12556
	                                                                                                                      // 12557
	                                                                                                                      // 12558
		/**                                                                                                                  // 12559
		 * Defining the width of the column, this parameter may take any CSS value                                           // 12560
		 * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not                                      // 12561
		 * been given a specific width through this interface ensuring that the table                                        // 12562
		 * remains readable.                                                                                                 // 12563
		 *  @type string                                                                                                     // 12564
		 *  @default null <i>Automatic</i>                                                                                   // 12565
		 *                                                                                                                   // 12566
		 *  @name DataTable.defaults.column.width                                                                            // 12567
		 *  @dtopt Columns                                                                                                   // 12568
		 *                                                                                                                   // 12569
		 *  @example                                                                                                         // 12570
		 *    // Using `columnDefs`                                                                                          // 12571
		 *    $(document).ready( function() {                                                                                // 12572
		 *      $('#example').dataTable( {                                                                                   // 12573
		 *        "columnDefs": [                                                                                            // 12574
		 *          { "width": "20%", "targets": [ 0 ] }                                                                     // 12575
		 *        ]                                                                                                          // 12576
		 *      } );                                                                                                         // 12577
		 *    } );                                                                                                           // 12578
		 *                                                                                                                   // 12579
		 *  @example                                                                                                         // 12580
		 *    // Using `columns`                                                                                             // 12581
		 *    $(document).ready( function() {                                                                                // 12582
		 *      $('#example').dataTable( {                                                                                   // 12583
		 *        "columns": [                                                                                               // 12584
		 *          { "width": "20%" },                                                                                      // 12585
		 *          null,                                                                                                    // 12586
		 *          null,                                                                                                    // 12587
		 *          null,                                                                                                    // 12588
		 *          null                                                                                                     // 12589
		 *        ]                                                                                                          // 12590
		 *      } );                                                                                                         // 12591
		 *    } );                                                                                                           // 12592
		 */                                                                                                                  // 12593
		"sWidth": null                                                                                                       // 12594
	};                                                                                                                    // 12595
	                                                                                                                      // 12596
	_fnHungarianMap( DataTable.defaults.column );                                                                         // 12597
	                                                                                                                      // 12598
	                                                                                                                      // 12599
	                                                                                                                      // 12600
	/**                                                                                                                   // 12601
	 * DataTables settings object - this holds all the information needed for a                                           // 12602
	 * given table, including configuration, data and current application of the                                          // 12603
	 * table options. DataTables does not have a single instance for each DataTable                                       // 12604
	 * with the settings attached to that instance, but rather instances of the                                           // 12605
	 * DataTable "class" are created on-the-fly as needed (typically by a                                                 // 12606
	 * $().dataTable() call) and the settings object is then applied to that                                              // 12607
	 * instance.                                                                                                          // 12608
	 *                                                                                                                    // 12609
	 * Note that this object is related to {@link DataTable.defaults} but this                                            // 12610
	 * one is the internal data store for DataTables's cache of columns. It should                                        // 12611
	 * NOT be manipulated outside of DataTables. Any configuration should be done                                         // 12612
	 * through the initialisation options.                                                                                // 12613
	 *  @namespace                                                                                                        // 12614
	 *  @todo Really should attach the settings object to individual instances so we                                      // 12615
	 *    don't need to create new instances on each $().dataTable() call (if the                                         // 12616
	 *    table already exists). It would also save passing oSettings around and                                          // 12617
	 *    into every single function. However, this is a very significant                                                 // 12618
	 *    architecture change for DataTables and will almost certainly break                                              // 12619
	 *    backwards compatibility with older installations. This is something that                                        // 12620
	 *    will be done in 2.0.                                                                                            // 12621
	 */                                                                                                                   // 12622
	DataTable.models.oSettings = {                                                                                        // 12623
		/**                                                                                                                  // 12624
		 * Primary features of DataTables and their enablement state.                                                        // 12625
		 *  @namespace                                                                                                       // 12626
		 */                                                                                                                  // 12627
		"oFeatures": {                                                                                                       // 12628
	                                                                                                                      // 12629
			/**                                                                                                                 // 12630
			 * Flag to say if DataTables should automatically try to calculate the                                              // 12631
			 * optimum table and columns widths (true) or not (false).                                                          // 12632
			 * Note that this parameter will be set by the initialisation routine. To                                           // 12633
			 * set a default use {@link DataTable.defaults}.                                                                    // 12634
			 *  @type boolean                                                                                                   // 12635
			 */                                                                                                                 // 12636
			"bAutoWidth": null,                                                                                                 // 12637
	                                                                                                                      // 12638
			/**                                                                                                                 // 12639
			 * Delay the creation of TR and TD elements until they are actually                                                 // 12640
			 * needed by a driven page draw. This can give a significant speed                                                  // 12641
			 * increase for Ajax source and Javascript source data, but makes no                                                // 12642
			 * difference at all fro DOM and server-side processing tables.                                                     // 12643
			 * Note that this parameter will be set by the initialisation routine. To                                           // 12644
			 * set a default use {@link DataTable.defaults}.                                                                    // 12645
			 *  @type boolean                                                                                                   // 12646
			 */                                                                                                                 // 12647
			"bDeferRender": null,                                                                                               // 12648
	                                                                                                                      // 12649
			/**                                                                                                                 // 12650
			 * Enable filtering on the table or not. Note that if this is disabled                                              // 12651
			 * then there is no filtering at all on the table, including fnFilter.                                              // 12652
			 * To just remove the filtering input use sDom and remove the 'f' option.                                           // 12653
			 * Note that this parameter will be set by the initialisation routine. To                                           // 12654
			 * set a default use {@link DataTable.defaults}.                                                                    // 12655
			 *  @type boolean                                                                                                   // 12656
			 */                                                                                                                 // 12657
			"bFilter": null,                                                                                                    // 12658
	                                                                                                                      // 12659
			/**                                                                                                                 // 12660
			 * Table information element (the 'Showing x of y records' div) enable                                              // 12661
			 * flag.                                                                                                            // 12662
			 * Note that this parameter will be set by the initialisation routine. To                                           // 12663
			 * set a default use {@link DataTable.defaults}.                                                                    // 12664
			 *  @type boolean                                                                                                   // 12665
			 */                                                                                                                 // 12666
			"bInfo": null,                                                                                                      // 12667
	                                                                                                                      // 12668
			/**                                                                                                                 // 12669
			 * Present a user control allowing the end user to change the page size                                             // 12670
			 * when pagination is enabled.                                                                                      // 12671
			 * Note that this parameter will be set by the initialisation routine. To                                           // 12672
			 * set a default use {@link DataTable.defaults}.                                                                    // 12673
			 *  @type boolean                                                                                                   // 12674
			 */                                                                                                                 // 12675
			"bLengthChange": null,                                                                                              // 12676
	                                                                                                                      // 12677
			/**                                                                                                                 // 12678
			 * Pagination enabled or not. Note that if this is disabled then length                                             // 12679
			 * changing must also be disabled.                                                                                  // 12680
			 * Note that this parameter will be set by the initialisation routine. To                                           // 12681
			 * set a default use {@link DataTable.defaults}.                                                                    // 12682
			 *  @type boolean                                                                                                   // 12683
			 */                                                                                                                 // 12684
			"bPaginate": null,                                                                                                  // 12685
	                                                                                                                      // 12686
			/**                                                                                                                 // 12687
			 * Processing indicator enable flag whenever DataTables is enacting a                                               // 12688
			 * user request - typically an Ajax request for server-side processing.                                             // 12689
			 * Note that this parameter will be set by the initialisation routine. To                                           // 12690
			 * set a default use {@link DataTable.defaults}.                                                                    // 12691
			 *  @type boolean                                                                                                   // 12692
			 */                                                                                                                 // 12693
			"bProcessing": null,                                                                                                // 12694
	                                                                                                                      // 12695
			/**                                                                                                                 // 12696
			 * Server-side processing enabled flag - when enabled DataTables will                                               // 12697
			 * get all data from the server for every draw - there is no filtering,                                             // 12698
			 * sorting or paging done on the client-side.                                                                       // 12699
			 * Note that this parameter will be set by the initialisation routine. To                                           // 12700
			 * set a default use {@link DataTable.defaults}.                                                                    // 12701
			 *  @type boolean                                                                                                   // 12702
			 */                                                                                                                 // 12703
			"bServerSide": null,                                                                                                // 12704
	                                                                                                                      // 12705
			/**                                                                                                                 // 12706
			 * Sorting enablement flag.                                                                                         // 12707
			 * Note that this parameter will be set by the initialisation routine. To                                           // 12708
			 * set a default use {@link DataTable.defaults}.                                                                    // 12709
			 *  @type boolean                                                                                                   // 12710
			 */                                                                                                                 // 12711
			"bSort": null,                                                                                                      // 12712
	                                                                                                                      // 12713
			/**                                                                                                                 // 12714
			 * Multi-column sorting                                                                                             // 12715
			 * Note that this parameter will be set by the initialisation routine. To                                           // 12716
			 * set a default use {@link DataTable.defaults}.                                                                    // 12717
			 *  @type boolean                                                                                                   // 12718
			 */                                                                                                                 // 12719
			"bSortMulti": null,                                                                                                 // 12720
	                                                                                                                      // 12721
			/**                                                                                                                 // 12722
			 * Apply a class to the columns which are being sorted to provide a                                                 // 12723
			 * visual highlight or not. This can slow things down when enabled since                                            // 12724
			 * there is a lot of DOM interaction.                                                                               // 12725
			 * Note that this parameter will be set by the initialisation routine. To                                           // 12726
			 * set a default use {@link DataTable.defaults}.                                                                    // 12727
			 *  @type boolean                                                                                                   // 12728
			 */                                                                                                                 // 12729
			"bSortClasses": null,                                                                                               // 12730
	                                                                                                                      // 12731
			/**                                                                                                                 // 12732
			 * State saving enablement flag.                                                                                    // 12733
			 * Note that this parameter will be set by the initialisation routine. To                                           // 12734
			 * set a default use {@link DataTable.defaults}.                                                                    // 12735
			 *  @type boolean                                                                                                   // 12736
			 */                                                                                                                 // 12737
			"bStateSave": null                                                                                                  // 12738
		},                                                                                                                   // 12739
	                                                                                                                      // 12740
	                                                                                                                      // 12741
		/**                                                                                                                  // 12742
		 * Scrolling settings for a table.                                                                                   // 12743
		 *  @namespace                                                                                                       // 12744
		 */                                                                                                                  // 12745
		"oScroll": {                                                                                                         // 12746
			/**                                                                                                                 // 12747
			 * When the table is shorter in height than sScrollY, collapse the                                                  // 12748
			 * table container down to the height of the table (when true).                                                     // 12749
			 * Note that this parameter will be set by the initialisation routine. To                                           // 12750
			 * set a default use {@link DataTable.defaults}.                                                                    // 12751
			 *  @type boolean                                                                                                   // 12752
			 */                                                                                                                 // 12753
			"bCollapse": null,                                                                                                  // 12754
	                                                                                                                      // 12755
			/**                                                                                                                 // 12756
			 * Width of the scrollbar for the web-browser's platform. Calculated                                                // 12757
			 * during table initialisation.                                                                                     // 12758
			 *  @type int                                                                                                       // 12759
			 *  @default 0                                                                                                      // 12760
			 */                                                                                                                 // 12761
			"iBarWidth": 0,                                                                                                     // 12762
	                                                                                                                      // 12763
			/**                                                                                                                 // 12764
			 * Viewport width for horizontal scrolling. Horizontal scrolling is                                                 // 12765
			 * disabled if an empty string.                                                                                     // 12766
			 * Note that this parameter will be set by the initialisation routine. To                                           // 12767
			 * set a default use {@link DataTable.defaults}.                                                                    // 12768
			 *  @type string                                                                                                    // 12769
			 */                                                                                                                 // 12770
			"sX": null,                                                                                                         // 12771
	                                                                                                                      // 12772
			/**                                                                                                                 // 12773
			 * Width to expand the table to when using x-scrolling. Typically you                                               // 12774
			 * should not need to use this.                                                                                     // 12775
			 * Note that this parameter will be set by the initialisation routine. To                                           // 12776
			 * set a default use {@link DataTable.defaults}.                                                                    // 12777
			 *  @type string                                                                                                    // 12778
			 *  @deprecated                                                                                                     // 12779
			 */                                                                                                                 // 12780
			"sXInner": null,                                                                                                    // 12781
	                                                                                                                      // 12782
			/**                                                                                                                 // 12783
			 * Viewport height for vertical scrolling. Vertical scrolling is disabled                                           // 12784
			 * if an empty string.                                                                                              // 12785
			 * Note that this parameter will be set by the initialisation routine. To                                           // 12786
			 * set a default use {@link DataTable.defaults}.                                                                    // 12787
			 *  @type string                                                                                                    // 12788
			 */                                                                                                                 // 12789
			"sY": null                                                                                                          // 12790
		},                                                                                                                   // 12791
	                                                                                                                      // 12792
		/**                                                                                                                  // 12793
		 * Language information for the table.                                                                               // 12794
		 *  @namespace                                                                                                       // 12795
		 *  @extends DataTable.defaults.oLanguage                                                                            // 12796
		 */                                                                                                                  // 12797
		"oLanguage": {                                                                                                       // 12798
			/**                                                                                                                 // 12799
			 * Information callback function. See                                                                               // 12800
			 * {@link DataTable.defaults.fnInfoCallback}                                                                        // 12801
			 *  @type function                                                                                                  // 12802
			 *  @default null                                                                                                   // 12803
			 */                                                                                                                 // 12804
			"fnInfoCallback": null                                                                                              // 12805
		},                                                                                                                   // 12806
	                                                                                                                      // 12807
		/**                                                                                                                  // 12808
		 * Browser support parameters                                                                                        // 12809
		 *  @namespace                                                                                                       // 12810
		 */                                                                                                                  // 12811
		"oBrowser": {                                                                                                        // 12812
			/**                                                                                                                 // 12813
			 * Indicate if the browser incorrectly calculates width:100% inside a                                               // 12814
			 * scrolling element (IE6/7)                                                                                        // 12815
			 *  @type boolean                                                                                                   // 12816
			 *  @default false                                                                                                  // 12817
			 */                                                                                                                 // 12818
			"bScrollOversize": false,                                                                                           // 12819
	                                                                                                                      // 12820
			/**                                                                                                                 // 12821
			 * Determine if the vertical scrollbar is on the right or left of the                                               // 12822
			 * scrolling container - needed for rtl language layout, although not                                               // 12823
			 * all browsers move the scrollbar (Safari).                                                                        // 12824
			 *  @type boolean                                                                                                   // 12825
			 *  @default false                                                                                                  // 12826
			 */                                                                                                                 // 12827
			"bScrollbarLeft": false                                                                                             // 12828
		},                                                                                                                   // 12829
	                                                                                                                      // 12830
	                                                                                                                      // 12831
		"ajax": null,                                                                                                        // 12832
	                                                                                                                      // 12833
	                                                                                                                      // 12834
		/**                                                                                                                  // 12835
		 * Array referencing the nodes which are used for the features. The                                                  // 12836
		 * parameters of this object match what is allowed by sDom - i.e.                                                    // 12837
		 *   <ul>                                                                                                            // 12838
		 *     <li>'l' - Length changing</li>                                                                                // 12839
		 *     <li>'f' - Filtering input</li>                                                                                // 12840
		 *     <li>'t' - The table!</li>                                                                                     // 12841
		 *     <li>'i' - Information</li>                                                                                    // 12842
		 *     <li>'p' - Pagination</li>                                                                                     // 12843
		 *     <li>'r' - pRocessing</li>                                                                                     // 12844
		 *   </ul>                                                                                                           // 12845
		 *  @type array                                                                                                      // 12846
		 *  @default []                                                                                                      // 12847
		 */                                                                                                                  // 12848
		"aanFeatures": [],                                                                                                   // 12849
	                                                                                                                      // 12850
		/**                                                                                                                  // 12851
		 * Store data information - see {@link DataTable.models.oRow} for detailed                                           // 12852
		 * information.                                                                                                      // 12853
		 *  @type array                                                                                                      // 12854
		 *  @default []                                                                                                      // 12855
		 */                                                                                                                  // 12856
		"aoData": [],                                                                                                        // 12857
	                                                                                                                      // 12858
		/**                                                                                                                  // 12859
		 * Array of indexes which are in the current display (after filtering etc)                                           // 12860
		 *  @type array                                                                                                      // 12861
		 *  @default []                                                                                                      // 12862
		 */                                                                                                                  // 12863
		"aiDisplay": [],                                                                                                     // 12864
	                                                                                                                      // 12865
		/**                                                                                                                  // 12866
		 * Array of indexes for display - no filtering                                                                       // 12867
		 *  @type array                                                                                                      // 12868
		 *  @default []                                                                                                      // 12869
		 */                                                                                                                  // 12870
		"aiDisplayMaster": [],                                                                                               // 12871
	                                                                                                                      // 12872
		/**                                                                                                                  // 12873
		 * Store information about each column that is in use                                                                // 12874
		 *  @type array                                                                                                      // 12875
		 *  @default []                                                                                                      // 12876
		 */                                                                                                                  // 12877
		"aoColumns": [],                                                                                                     // 12878
	                                                                                                                      // 12879
		/**                                                                                                                  // 12880
		 * Store information about the table's header                                                                        // 12881
		 *  @type array                                                                                                      // 12882
		 *  @default []                                                                                                      // 12883
		 */                                                                                                                  // 12884
		"aoHeader": [],                                                                                                      // 12885
	                                                                                                                      // 12886
		/**                                                                                                                  // 12887
		 * Store information about the table's footer                                                                        // 12888
		 *  @type array                                                                                                      // 12889
		 *  @default []                                                                                                      // 12890
		 */                                                                                                                  // 12891
		"aoFooter": [],                                                                                                      // 12892
	                                                                                                                      // 12893
		/**                                                                                                                  // 12894
		 * Store the applied global search information in case we want to force a                                            // 12895
		 * research or compare the old search to a new one.                                                                  // 12896
		 * Note that this parameter will be set by the initialisation routine. To                                            // 12897
		 * set a default use {@link DataTable.defaults}.                                                                     // 12898
		 *  @namespace                                                                                                       // 12899
		 *  @extends DataTable.models.oSearch                                                                                // 12900
		 */                                                                                                                  // 12901
		"oPreviousSearch": {},                                                                                               // 12902
	                                                                                                                      // 12903
		/**                                                                                                                  // 12904
		 * Store the applied search for each column - see                                                                    // 12905
		 * {@link DataTable.models.oSearch} for the format that is used for the                                              // 12906
		 * filtering information for each column.                                                                            // 12907
		 *  @type array                                                                                                      // 12908
		 *  @default []                                                                                                      // 12909
		 */                                                                                                                  // 12910
		"aoPreSearchCols": [],                                                                                               // 12911
	                                                                                                                      // 12912
		/**                                                                                                                  // 12913
		 * Sorting that is applied to the table. Note that the inner arrays are                                              // 12914
		 * used in the following manner:                                                                                     // 12915
		 * <ul>                                                                                                              // 12916
		 *   <li>Index 0 - column number</li>                                                                                // 12917
		 *   <li>Index 1 - current sorting direction</li>                                                                    // 12918
		 * </ul>                                                                                                             // 12919
		 * Note that this parameter will be set by the initialisation routine. To                                            // 12920
		 * set a default use {@link DataTable.defaults}.                                                                     // 12921
		 *  @type array                                                                                                      // 12922
		 *  @todo These inner arrays should really be objects                                                                // 12923
		 */                                                                                                                  // 12924
		"aaSorting": null,                                                                                                   // 12925
	                                                                                                                      // 12926
		/**                                                                                                                  // 12927
		 * Sorting that is always applied to the table (i.e. prefixed in front of                                            // 12928
		 * aaSorting).                                                                                                       // 12929
		 * Note that this parameter will be set by the initialisation routine. To                                            // 12930
		 * set a default use {@link DataTable.defaults}.                                                                     // 12931
		 *  @type array                                                                                                      // 12932
		 *  @default []                                                                                                      // 12933
		 */                                                                                                                  // 12934
		"aaSortingFixed": [],                                                                                                // 12935
	                                                                                                                      // 12936
		/**                                                                                                                  // 12937
		 * Classes to use for the striping of a table.                                                                       // 12938
		 * Note that this parameter will be set by the initialisation routine. To                                            // 12939
		 * set a default use {@link DataTable.defaults}.                                                                     // 12940
		 *  @type array                                                                                                      // 12941
		 *  @default []                                                                                                      // 12942
		 */                                                                                                                  // 12943
		"asStripeClasses": null,                                                                                             // 12944
	                                                                                                                      // 12945
		/**                                                                                                                  // 12946
		 * If restoring a table - we should restore its striping classes as well                                             // 12947
		 *  @type array                                                                                                      // 12948
		 *  @default []                                                                                                      // 12949
		 */                                                                                                                  // 12950
		"asDestroyStripes": [],                                                                                              // 12951
	                                                                                                                      // 12952
		/**                                                                                                                  // 12953
		 * If restoring a table - we should restore its width                                                                // 12954
		 *  @type int                                                                                                        // 12955
		 *  @default 0                                                                                                       // 12956
		 */                                                                                                                  // 12957
		"sDestroyWidth": 0,                                                                                                  // 12958
	                                                                                                                      // 12959
		/**                                                                                                                  // 12960
		 * Callback functions array for every time a row is inserted (i.e. on a draw).                                       // 12961
		 *  @type array                                                                                                      // 12962
		 *  @default []                                                                                                      // 12963
		 */                                                                                                                  // 12964
		"aoRowCallback": [],                                                                                                 // 12965
	                                                                                                                      // 12966
		/**                                                                                                                  // 12967
		 * Callback functions for the header on each draw.                                                                   // 12968
		 *  @type array                                                                                                      // 12969
		 *  @default []                                                                                                      // 12970
		 */                                                                                                                  // 12971
		"aoHeaderCallback": [],                                                                                              // 12972
	                                                                                                                      // 12973
		/**                                                                                                                  // 12974
		 * Callback function for the footer on each draw.                                                                    // 12975
		 *  @type array                                                                                                      // 12976
		 *  @default []                                                                                                      // 12977
		 */                                                                                                                  // 12978
		"aoFooterCallback": [],                                                                                              // 12979
	                                                                                                                      // 12980
		/**                                                                                                                  // 12981
		 * Array of callback functions for draw callback functions                                                           // 12982
		 *  @type array                                                                                                      // 12983
		 *  @default []                                                                                                      // 12984
		 */                                                                                                                  // 12985
		"aoDrawCallback": [],                                                                                                // 12986
	                                                                                                                      // 12987
		/**                                                                                                                  // 12988
		 * Array of callback functions for row created function                                                              // 12989
		 *  @type array                                                                                                      // 12990
		 *  @default []                                                                                                      // 12991
		 */                                                                                                                  // 12992
		"aoRowCreatedCallback": [],                                                                                          // 12993
	                                                                                                                      // 12994
		/**                                                                                                                  // 12995
		 * Callback functions for just before the table is redrawn. A return of                                              // 12996
		 * false will be used to cancel the draw.                                                                            // 12997
		 *  @type array                                                                                                      // 12998
		 *  @default []                                                                                                      // 12999
		 */                                                                                                                  // 13000
		"aoPreDrawCallback": [],                                                                                             // 13001
	                                                                                                                      // 13002
		/**                                                                                                                  // 13003
		 * Callback functions for when the table has been initialised.                                                       // 13004
		 *  @type array                                                                                                      // 13005
		 *  @default []                                                                                                      // 13006
		 */                                                                                                                  // 13007
		"aoInitComplete": [],                                                                                                // 13008
	                                                                                                                      // 13009
	                                                                                                                      // 13010
		/**                                                                                                                  // 13011
		 * Callbacks for modifying the settings to be stored for state saving, prior to                                      // 13012
		 * saving state.                                                                                                     // 13013
		 *  @type array                                                                                                      // 13014
		 *  @default []                                                                                                      // 13015
		 */                                                                                                                  // 13016
		"aoStateSaveParams": [],                                                                                             // 13017
	                                                                                                                      // 13018
		/**                                                                                                                  // 13019
		 * Callbacks for modifying the settings that have been stored for state saving                                       // 13020
		 * prior to using the stored values to restore the state.                                                            // 13021
		 *  @type array                                                                                                      // 13022
		 *  @default []                                                                                                      // 13023
		 */                                                                                                                  // 13024
		"aoStateLoadParams": [],                                                                                             // 13025
	                                                                                                                      // 13026
		/**                                                                                                                  // 13027
		 * Callbacks for operating on the settings object once the saved state has been                                      // 13028
		 * loaded                                                                                                            // 13029
		 *  @type array                                                                                                      // 13030
		 *  @default []                                                                                                      // 13031
		 */                                                                                                                  // 13032
		"aoStateLoaded": [],                                                                                                 // 13033
	                                                                                                                      // 13034
		/**                                                                                                                  // 13035
		 * Cache the table ID for quick access                                                                               // 13036
		 *  @type string                                                                                                     // 13037
		 *  @default <i>Empty string</i>                                                                                     // 13038
		 */                                                                                                                  // 13039
		"sTableId": "",                                                                                                      // 13040
	                                                                                                                      // 13041
		/**                                                                                                                  // 13042
		 * The TABLE node for the main table                                                                                 // 13043
		 *  @type node                                                                                                       // 13044
		 *  @default null                                                                                                    // 13045
		 */                                                                                                                  // 13046
		"nTable": null,                                                                                                      // 13047
	                                                                                                                      // 13048
		/**                                                                                                                  // 13049
		 * Permanent ref to the thead element                                                                                // 13050
		 *  @type node                                                                                                       // 13051
		 *  @default null                                                                                                    // 13052
		 */                                                                                                                  // 13053
		"nTHead": null,                                                                                                      // 13054
	                                                                                                                      // 13055
		/**                                                                                                                  // 13056
		 * Permanent ref to the tfoot element - if it exists                                                                 // 13057
		 *  @type node                                                                                                       // 13058
		 *  @default null                                                                                                    // 13059
		 */                                                                                                                  // 13060
		"nTFoot": null,                                                                                                      // 13061
	                                                                                                                      // 13062
		/**                                                                                                                  // 13063
		 * Permanent ref to the tbody element                                                                                // 13064
		 *  @type node                                                                                                       // 13065
		 *  @default null                                                                                                    // 13066
		 */                                                                                                                  // 13067
		"nTBody": null,                                                                                                      // 13068
	                                                                                                                      // 13069
		/**                                                                                                                  // 13070
		 * Cache the wrapper node (contains all DataTables controlled elements)                                              // 13071
		 *  @type node                                                                                                       // 13072
		 *  @default null                                                                                                    // 13073
		 */                                                                                                                  // 13074
		"nTableWrapper": null,                                                                                               // 13075
	                                                                                                                      // 13076
		/**                                                                                                                  // 13077
		 * Indicate if when using server-side processing the loading of data                                                 // 13078
		 * should be deferred until the second draw.                                                                         // 13079
		 * Note that this parameter will be set by the initialisation routine. To                                            // 13080
		 * set a default use {@link DataTable.defaults}.                                                                     // 13081
		 *  @type boolean                                                                                                    // 13082
		 *  @default false                                                                                                   // 13083
		 */                                                                                                                  // 13084
		"bDeferLoading": false,                                                                                              // 13085
	                                                                                                                      // 13086
		/**                                                                                                                  // 13087
		 * Indicate if all required information has been read in                                                             // 13088
		 *  @type boolean                                                                                                    // 13089
		 *  @default false                                                                                                   // 13090
		 */                                                                                                                  // 13091
		"bInitialised": false,                                                                                               // 13092
	                                                                                                                      // 13093
		/**                                                                                                                  // 13094
		 * Information about open rows. Each object in the array has the parameters                                          // 13095
		 * 'nTr' and 'nParent'                                                                                               // 13096
		 *  @type array                                                                                                      // 13097
		 *  @default []                                                                                                      // 13098
		 */                                                                                                                  // 13099
		"aoOpenRows": [],                                                                                                    // 13100
	                                                                                                                      // 13101
		/**                                                                                                                  // 13102
		 * Dictate the positioning of DataTables' control elements - see                                                     // 13103
		 * {@link DataTable.model.oInit.sDom}.                                                                               // 13104
		 * Note that this parameter will be set by the initialisation routine. To                                            // 13105
		 * set a default use {@link DataTable.defaults}.                                                                     // 13106
		 *  @type string                                                                                                     // 13107
		 *  @default null                                                                                                    // 13108
		 */                                                                                                                  // 13109
		"sDom": null,                                                                                                        // 13110
	                                                                                                                      // 13111
		/**                                                                                                                  // 13112
		 * Search delay (in mS)                                                                                              // 13113
		 *  @type integer                                                                                                    // 13114
		 *  @default null                                                                                                    // 13115
		 */                                                                                                                  // 13116
		"searchDelay": null,                                                                                                 // 13117
	                                                                                                                      // 13118
		/**                                                                                                                  // 13119
		 * Which type of pagination should be used.                                                                          // 13120
		 * Note that this parameter will be set by the initialisation routine. To                                            // 13121
		 * set a default use {@link DataTable.defaults}.                                                                     // 13122
		 *  @type string                                                                                                     // 13123
		 *  @default two_button                                                                                              // 13124
		 */                                                                                                                  // 13125
		"sPaginationType": "two_button",                                                                                     // 13126
	                                                                                                                      // 13127
		/**                                                                                                                  // 13128
		 * The state duration (for `stateSave`) in seconds.                                                                  // 13129
		 * Note that this parameter will be set by the initialisation routine. To                                            // 13130
		 * set a default use {@link DataTable.defaults}.                                                                     // 13131
		 *  @type int                                                                                                        // 13132
		 *  @default 0                                                                                                       // 13133
		 */                                                                                                                  // 13134
		"iStateDuration": 0,                                                                                                 // 13135
	                                                                                                                      // 13136
		/**                                                                                                                  // 13137
		 * Array of callback functions for state saving. Each array element is an                                            // 13138
		 * object with the following parameters:                                                                             // 13139
		 *   <ul>                                                                                                            // 13140
		 *     <li>function:fn - function to call. Takes two parameters, oSettings                                           // 13141
		 *       and the JSON string to save that has been thus far created. Returns                                         // 13142
		 *       a JSON string to be inserted into a json object                                                             // 13143
		 *       (i.e. '"param": [ 0, 1, 2]')</li>                                                                           // 13144
		 *     <li>string:sName - name of callback</li>                                                                      // 13145
		 *   </ul>                                                                                                           // 13146
		 *  @type array                                                                                                      // 13147
		 *  @default []                                                                                                      // 13148
		 */                                                                                                                  // 13149
		"aoStateSave": [],                                                                                                   // 13150
	                                                                                                                      // 13151
		/**                                                                                                                  // 13152
		 * Array of callback functions for state loading. Each array element is an                                           // 13153
		 * object with the following parameters:                                                                             // 13154
		 *   <ul>                                                                                                            // 13155
		 *     <li>function:fn - function to call. Takes two parameters, oSettings                                           // 13156
		 *       and the object stored. May return false to cancel state loading</li>                                        // 13157
		 *     <li>string:sName - name of callback</li>                                                                      // 13158
		 *   </ul>                                                                                                           // 13159
		 *  @type array                                                                                                      // 13160
		 *  @default []                                                                                                      // 13161
		 */                                                                                                                  // 13162
		"aoStateLoad": [],                                                                                                   // 13163
	                                                                                                                      // 13164
		/**                                                                                                                  // 13165
		 * State that was saved. Useful for back reference                                                                   // 13166
		 *  @type object                                                                                                     // 13167
		 *  @default null                                                                                                    // 13168
		 */                                                                                                                  // 13169
		"oSavedState": null,                                                                                                 // 13170
	                                                                                                                      // 13171
		/**                                                                                                                  // 13172
		 * State that was loaded. Useful for back reference                                                                  // 13173
		 *  @type object                                                                                                     // 13174
		 *  @default null                                                                                                    // 13175
		 */                                                                                                                  // 13176
		"oLoadedState": null,                                                                                                // 13177
	                                                                                                                      // 13178
		/**                                                                                                                  // 13179
		 * Source url for AJAX data for the table.                                                                           // 13180
		 * Note that this parameter will be set by the initialisation routine. To                                            // 13181
		 * set a default use {@link DataTable.defaults}.                                                                     // 13182
		 *  @type string                                                                                                     // 13183
		 *  @default null                                                                                                    // 13184
		 */                                                                                                                  // 13185
		"sAjaxSource": null,                                                                                                 // 13186
	                                                                                                                      // 13187
		/**                                                                                                                  // 13188
		 * Property from a given object from which to read the table data from. This                                         // 13189
		 * can be an empty string (when not server-side processing), in which case                                           // 13190
		 * it is  assumed an an array is given directly.                                                                     // 13191
		 * Note that this parameter will be set by the initialisation routine. To                                            // 13192
		 * set a default use {@link DataTable.defaults}.                                                                     // 13193
		 *  @type string                                                                                                     // 13194
		 */                                                                                                                  // 13195
		"sAjaxDataProp": null,                                                                                               // 13196
	                                                                                                                      // 13197
		/**                                                                                                                  // 13198
		 * Note if draw should be blocked while getting data                                                                 // 13199
		 *  @type boolean                                                                                                    // 13200
		 *  @default true                                                                                                    // 13201
		 */                                                                                                                  // 13202
		"bAjaxDataGet": true,                                                                                                // 13203
	                                                                                                                      // 13204
		/**                                                                                                                  // 13205
		 * The last jQuery XHR object that was used for server-side data gathering.                                          // 13206
		 * This can be used for working with the XHR information in one of the                                               // 13207
		 * callbacks                                                                                                         // 13208
		 *  @type object                                                                                                     // 13209
		 *  @default null                                                                                                    // 13210
		 */                                                                                                                  // 13211
		"jqXHR": null,                                                                                                       // 13212
	                                                                                                                      // 13213
		/**                                                                                                                  // 13214
		 * JSON returned from the server in the last Ajax request                                                            // 13215
		 *  @type object                                                                                                     // 13216
		 *  @default undefined                                                                                               // 13217
		 */                                                                                                                  // 13218
		"json": undefined,                                                                                                   // 13219
	                                                                                                                      // 13220
		/**                                                                                                                  // 13221
		 * Data submitted as part of the last Ajax request                                                                   // 13222
		 *  @type object                                                                                                     // 13223
		 *  @default undefined                                                                                               // 13224
		 */                                                                                                                  // 13225
		"oAjaxData": undefined,                                                                                              // 13226
	                                                                                                                      // 13227
		/**                                                                                                                  // 13228
		 * Function to get the server-side data.                                                                             // 13229
		 * Note that this parameter will be set by the initialisation routine. To                                            // 13230
		 * set a default use {@link DataTable.defaults}.                                                                     // 13231
		 *  @type function                                                                                                   // 13232
		 */                                                                                                                  // 13233
		"fnServerData": null,                                                                                                // 13234
	                                                                                                                      // 13235
		/**                                                                                                                  // 13236
		 * Functions which are called prior to sending an Ajax request so extra                                              // 13237
		 * parameters can easily be sent to the server                                                                       // 13238
		 *  @type array                                                                                                      // 13239
		 *  @default []                                                                                                      // 13240
		 */                                                                                                                  // 13241
		"aoServerParams": [],                                                                                                // 13242
	                                                                                                                      // 13243
		/**                                                                                                                  // 13244
		 * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if                                                 // 13245
		 * required).                                                                                                        // 13246
		 * Note that this parameter will be set by the initialisation routine. To                                            // 13247
		 * set a default use {@link DataTable.defaults}.                                                                     // 13248
		 *  @type string                                                                                                     // 13249
		 */                                                                                                                  // 13250
		"sServerMethod": null,                                                                                               // 13251
	                                                                                                                      // 13252
		/**                                                                                                                  // 13253
		 * Format numbers for display.                                                                                       // 13254
		 * Note that this parameter will be set by the initialisation routine. To                                            // 13255
		 * set a default use {@link DataTable.defaults}.                                                                     // 13256
		 *  @type function                                                                                                   // 13257
		 */                                                                                                                  // 13258
		"fnFormatNumber": null,                                                                                              // 13259
	                                                                                                                      // 13260
		/**                                                                                                                  // 13261
		 * List of options that can be used for the user selectable length menu.                                             // 13262
		 * Note that this parameter will be set by the initialisation routine. To                                            // 13263
		 * set a default use {@link DataTable.defaults}.                                                                     // 13264
		 *  @type array                                                                                                      // 13265
		 *  @default []                                                                                                      // 13266
		 */                                                                                                                  // 13267
		"aLengthMenu": null,                                                                                                 // 13268
	                                                                                                                      // 13269
		/**                                                                                                                  // 13270
		 * Counter for the draws that the table does. Also used as a tracker for                                             // 13271
		 * server-side processing                                                                                            // 13272
		 *  @type int                                                                                                        // 13273
		 *  @default 0                                                                                                       // 13274
		 */                                                                                                                  // 13275
		"iDraw": 0,                                                                                                          // 13276
	                                                                                                                      // 13277
		/**                                                                                                                  // 13278
		 * Indicate if a redraw is being done - useful for Ajax                                                              // 13279
		 *  @type boolean                                                                                                    // 13280
		 *  @default false                                                                                                   // 13281
		 */                                                                                                                  // 13282
		"bDrawing": false,                                                                                                   // 13283
	                                                                                                                      // 13284
		/**                                                                                                                  // 13285
		 * Draw index (iDraw) of the last error when parsing the returned data                                               // 13286
		 *  @type int                                                                                                        // 13287
		 *  @default -1                                                                                                      // 13288
		 */                                                                                                                  // 13289
		"iDrawError": -1,                                                                                                    // 13290
	                                                                                                                      // 13291
		/**                                                                                                                  // 13292
		 * Paging display length                                                                                             // 13293
		 *  @type int                                                                                                        // 13294
		 *  @default 10                                                                                                      // 13295
		 */                                                                                                                  // 13296
		"_iDisplayLength": 10,                                                                                               // 13297
	                                                                                                                      // 13298
		/**                                                                                                                  // 13299
		 * Paging start point - aiDisplay index                                                                              // 13300
		 *  @type int                                                                                                        // 13301
		 *  @default 0                                                                                                       // 13302
		 */                                                                                                                  // 13303
		"_iDisplayStart": 0,                                                                                                 // 13304
	                                                                                                                      // 13305
		/**                                                                                                                  // 13306
		 * Server-side processing - number of records in the result set                                                      // 13307
		 * (i.e. before filtering), Use fnRecordsTotal rather than                                                           // 13308
		 * this property to get the value of the number of records, regardless of                                            // 13309
		 * the server-side processing setting.                                                                               // 13310
		 *  @type int                                                                                                        // 13311
		 *  @default 0                                                                                                       // 13312
		 *  @private                                                                                                         // 13313
		 */                                                                                                                  // 13314
		"_iRecordsTotal": 0,                                                                                                 // 13315
	                                                                                                                      // 13316
		/**                                                                                                                  // 13317
		 * Server-side processing - number of records in the current display set                                             // 13318
		 * (i.e. after filtering). Use fnRecordsDisplay rather than                                                          // 13319
		 * this property to get the value of the number of records, regardless of                                            // 13320
		 * the server-side processing setting.                                                                               // 13321
		 *  @type boolean                                                                                                    // 13322
		 *  @default 0                                                                                                       // 13323
		 *  @private                                                                                                         // 13324
		 */                                                                                                                  // 13325
		"_iRecordsDisplay": 0,                                                                                               // 13326
	                                                                                                                      // 13327
		/**                                                                                                                  // 13328
		 * Flag to indicate if jQuery UI marking and classes should be used.                                                 // 13329
		 * Note that this parameter will be set by the initialisation routine. To                                            // 13330
		 * set a default use {@link DataTable.defaults}.                                                                     // 13331
		 *  @type boolean                                                                                                    // 13332
		 */                                                                                                                  // 13333
		"bJUI": null,                                                                                                        // 13334
	                                                                                                                      // 13335
		/**                                                                                                                  // 13336
		 * The classes to use for the table                                                                                  // 13337
		 *  @type object                                                                                                     // 13338
		 *  @default {}                                                                                                      // 13339
		 */                                                                                                                  // 13340
		"oClasses": {},                                                                                                      // 13341
	                                                                                                                      // 13342
		/**                                                                                                                  // 13343
		 * Flag attached to the settings object so you can check in the draw                                                 // 13344
		 * callback if filtering has been done in the draw. Deprecated in favour of                                          // 13345
		 * events.                                                                                                           // 13346
		 *  @type boolean                                                                                                    // 13347
		 *  @default false                                                                                                   // 13348
		 *  @deprecated                                                                                                      // 13349
		 */                                                                                                                  // 13350
		"bFiltered": false,                                                                                                  // 13351
	                                                                                                                      // 13352
		/**                                                                                                                  // 13353
		 * Flag attached to the settings object so you can check in the draw                                                 // 13354
		 * callback if sorting has been done in the draw. Deprecated in favour of                                            // 13355
		 * events.                                                                                                           // 13356
		 *  @type boolean                                                                                                    // 13357
		 *  @default false                                                                                                   // 13358
		 *  @deprecated                                                                                                      // 13359
		 */                                                                                                                  // 13360
		"bSorted": false,                                                                                                    // 13361
	                                                                                                                      // 13362
		/**                                                                                                                  // 13363
		 * Indicate that if multiple rows are in the header and there is more than                                           // 13364
		 * one unique cell per column, if the top one (true) or bottom one (false)                                           // 13365
		 * should be used for sorting / title by DataTables.                                                                 // 13366
		 * Note that this parameter will be set by the initialisation routine. To                                            // 13367
		 * set a default use {@link DataTable.defaults}.                                                                     // 13368
		 *  @type boolean                                                                                                    // 13369
		 */                                                                                                                  // 13370
		"bSortCellsTop": null,                                                                                               // 13371
	                                                                                                                      // 13372
		/**                                                                                                                  // 13373
		 * Initialisation object that is used for the table                                                                  // 13374
		 *  @type object                                                                                                     // 13375
		 *  @default null                                                                                                    // 13376
		 */                                                                                                                  // 13377
		"oInit": null,                                                                                                       // 13378
	                                                                                                                      // 13379
		/**                                                                                                                  // 13380
		 * Destroy callback functions - for plug-ins to attach themselves to the                                             // 13381
		 * destroy so they can clean up markup and events.                                                                   // 13382
		 *  @type array                                                                                                      // 13383
		 *  @default []                                                                                                      // 13384
		 */                                                                                                                  // 13385
		"aoDestroyCallback": [],                                                                                             // 13386
	                                                                                                                      // 13387
	                                                                                                                      // 13388
		/**                                                                                                                  // 13389
		 * Get the number of records in the current record set, before filtering                                             // 13390
		 *  @type function                                                                                                   // 13391
		 */                                                                                                                  // 13392
		"fnRecordsTotal": function ()                                                                                        // 13393
		{                                                                                                                    // 13394
			return _fnDataSource( this ) == 'ssp' ?                                                                             // 13395
				this._iRecordsTotal * 1 :                                                                                          // 13396
				this.aiDisplayMaster.length;                                                                                       // 13397
		},                                                                                                                   // 13398
	                                                                                                                      // 13399
		/**                                                                                                                  // 13400
		 * Get the number of records in the current record set, after filtering                                              // 13401
		 *  @type function                                                                                                   // 13402
		 */                                                                                                                  // 13403
		"fnRecordsDisplay": function ()                                                                                      // 13404
		{                                                                                                                    // 13405
			return _fnDataSource( this ) == 'ssp' ?                                                                             // 13406
				this._iRecordsDisplay * 1 :                                                                                        // 13407
				this.aiDisplay.length;                                                                                             // 13408
		},                                                                                                                   // 13409
	                                                                                                                      // 13410
		/**                                                                                                                  // 13411
		 * Get the display end point - aiDisplay index                                                                       // 13412
		 *  @type function                                                                                                   // 13413
		 */                                                                                                                  // 13414
		"fnDisplayEnd": function ()                                                                                          // 13415
		{                                                                                                                    // 13416
			var                                                                                                                 // 13417
				len      = this._iDisplayLength,                                                                                   // 13418
				start    = this._iDisplayStart,                                                                                    // 13419
				calc     = start + len,                                                                                            // 13420
				records  = this.aiDisplay.length,                                                                                  // 13421
				features = this.oFeatures,                                                                                         // 13422
				paginate = features.bPaginate;                                                                                     // 13423
	                                                                                                                      // 13424
			if ( features.bServerSide ) {                                                                                       // 13425
				return paginate === false || len === -1 ?                                                                          // 13426
					start + records :                                                                                                 // 13427
					Math.min( start+len, this._iRecordsDisplay );                                                                     // 13428
			}                                                                                                                   // 13429
			else {                                                                                                              // 13430
				return ! paginate || calc>records || len===-1 ?                                                                    // 13431
					records :                                                                                                         // 13432
					calc;                                                                                                             // 13433
			}                                                                                                                   // 13434
		},                                                                                                                   // 13435
	                                                                                                                      // 13436
		/**                                                                                                                  // 13437
		 * The DataTables object for this table                                                                              // 13438
		 *  @type object                                                                                                     // 13439
		 *  @default null                                                                                                    // 13440
		 */                                                                                                                  // 13441
		"oInstance": null,                                                                                                   // 13442
	                                                                                                                      // 13443
		/**                                                                                                                  // 13444
		 * Unique identifier for each instance of the DataTables object. If there                                            // 13445
		 * is an ID on the table node, then it takes that value, otherwise an                                                // 13446
		 * incrementing internal counter is used.                                                                            // 13447
		 *  @type string                                                                                                     // 13448
		 *  @default null                                                                                                    // 13449
		 */                                                                                                                  // 13450
		"sInstance": null,                                                                                                   // 13451
	                                                                                                                      // 13452
		/**                                                                                                                  // 13453
		 * tabindex attribute value that is added to DataTables control elements, allowing                                   // 13454
		 * keyboard navigation of the table and its controls.                                                                // 13455
		 */                                                                                                                  // 13456
		"iTabIndex": 0,                                                                                                      // 13457
	                                                                                                                      // 13458
		/**                                                                                                                  // 13459
		 * DIV container for the footer scrolling table if scrolling                                                         // 13460
		 */                                                                                                                  // 13461
		"nScrollHead": null,                                                                                                 // 13462
	                                                                                                                      // 13463
		/**                                                                                                                  // 13464
		 * DIV container for the footer scrolling table if scrolling                                                         // 13465
		 */                                                                                                                  // 13466
		"nScrollFoot": null,                                                                                                 // 13467
	                                                                                                                      // 13468
		/**                                                                                                                  // 13469
		 * Last applied sort                                                                                                 // 13470
		 *  @type array                                                                                                      // 13471
		 *  @default []                                                                                                      // 13472
		 */                                                                                                                  // 13473
		"aLastSort": [],                                                                                                     // 13474
	                                                                                                                      // 13475
		/**                                                                                                                  // 13476
		 * Stored plug-in instances                                                                                          // 13477
		 *  @type object                                                                                                     // 13478
		 *  @default {}                                                                                                      // 13479
		 */                                                                                                                  // 13480
		"oPlugins": {}                                                                                                       // 13481
	};                                                                                                                    // 13482
                                                                                                                       // 13483
	/**                                                                                                                   // 13484
	 * Extension object for DataTables that is used to provide all extension                                              // 13485
	 * options.                                                                                                           // 13486
	 *                                                                                                                    // 13487
	 * Note that the `DataTable.ext` object is available through                                                          // 13488
	 * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is                                          // 13489
	 * also aliased to `jQuery.fn.dataTableExt` for historic reasons.                                                     // 13490
	 *  @namespace                                                                                                        // 13491
	 *  @extends DataTable.models.ext                                                                                     // 13492
	 */                                                                                                                   // 13493
	                                                                                                                      // 13494
	                                                                                                                      // 13495
	/**                                                                                                                   // 13496
	 * DataTables extensions                                                                                              // 13497
	 *                                                                                                                    // 13498
	 * This namespace acts as a collection area for plug-ins that can be used to                                          // 13499
	 * extend DataTables capabilities. Indeed many of the build in methods                                                // 13500
	 * use this method to provide their own capabilities (sorting methods for                                             // 13501
	 * example).                                                                                                          // 13502
	 *                                                                                                                    // 13503
	 * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy                                         // 13504
	 * reasons                                                                                                            // 13505
	 *                                                                                                                    // 13506
	 *  @namespace                                                                                                        // 13507
	 */                                                                                                                   // 13508
	DataTable.ext = _ext = {                                                                                              // 13509
		/**                                                                                                                  // 13510
		 * Buttons. For use with the Buttons extension for DataTables. This is                                               // 13511
		 * defined here so other extensions can define buttons regardless of load                                            // 13512
		 * order. It is _not_ used by DataTables core.                                                                       // 13513
		 *                                                                                                                   // 13514
		 *  @type object                                                                                                     // 13515
		 *  @default {}                                                                                                      // 13516
		 */                                                                                                                  // 13517
		buttons: {},                                                                                                         // 13518
	                                                                                                                      // 13519
	                                                                                                                      // 13520
		/**                                                                                                                  // 13521
		 * Element class names                                                                                               // 13522
		 *                                                                                                                   // 13523
		 *  @type object                                                                                                     // 13524
		 *  @default {}                                                                                                      // 13525
		 */                                                                                                                  // 13526
		classes: {},                                                                                                         // 13527
	                                                                                                                      // 13528
	                                                                                                                      // 13529
		/**                                                                                                                  // 13530
		 * Error reporting.                                                                                                  // 13531
		 *                                                                                                                   // 13532
		 * How should DataTables report an error. Can take the value 'alert',                                                // 13533
		 * 'throw', 'none' or a function.                                                                                    // 13534
		 *                                                                                                                   // 13535
		 *  @type string|function                                                                                            // 13536
		 *  @default alert                                                                                                   // 13537
		 */                                                                                                                  // 13538
		errMode: "alert",                                                                                                    // 13539
	                                                                                                                      // 13540
	                                                                                                                      // 13541
		/**                                                                                                                  // 13542
		 * Feature plug-ins.                                                                                                 // 13543
		 *                                                                                                                   // 13544
		 * This is an array of objects which describe the feature plug-ins that are                                          // 13545
		 * available to DataTables. These feature plug-ins are then available for                                            // 13546
		 * use through the `dom` initialisation option.                                                                      // 13547
		 *                                                                                                                   // 13548
		 * Each feature plug-in is described by an object which must have the                                                // 13549
		 * following properties:                                                                                             // 13550
		 *                                                                                                                   // 13551
		 * * `fnInit` - function that is used to initialise the plug-in,                                                     // 13552
		 * * `cFeature` - a character so the feature can be enabled by the `dom`                                             // 13553
		 *   instillation option. This is case sensitive.                                                                    // 13554
		 *                                                                                                                   // 13555
		 * The `fnInit` function has the following input parameters:                                                         // 13556
		 *                                                                                                                   // 13557
		 * 1. `{object}` DataTables settings object: see                                                                     // 13558
		 *    {@link DataTable.models.oSettings}                                                                             // 13559
		 *                                                                                                                   // 13560
		 * And the following return is expected:                                                                             // 13561
		 *                                                                                                                   // 13562
		 * * {node|null} The element which contains your feature. Note that the                                              // 13563
		 *   return may also be void if your plug-in does not require to inject any                                          // 13564
		 *   DOM elements into DataTables control (`dom`) - for example this might                                           // 13565
		 *   be useful when developing a plug-in which allows table control via                                              // 13566
		 *   keyboard entry                                                                                                  // 13567
		 *                                                                                                                   // 13568
		 *  @type array                                                                                                      // 13569
		 *                                                                                                                   // 13570
		 *  @example                                                                                                         // 13571
		 *    $.fn.dataTable.ext.features.push( {                                                                            // 13572
		 *      "fnInit": function( oSettings ) {                                                                            // 13573
		 *        return new TableTools( { "oDTSettings": oSettings } );                                                     // 13574
		 *      },                                                                                                           // 13575
		 *      "cFeature": "T"                                                                                              // 13576
		 *    } );                                                                                                           // 13577
		 */                                                                                                                  // 13578
		feature: [],                                                                                                         // 13579
	                                                                                                                      // 13580
	                                                                                                                      // 13581
		/**                                                                                                                  // 13582
		 * Row searching.                                                                                                    // 13583
		 *                                                                                                                   // 13584
		 * This method of searching is complimentary to the default type based                                               // 13585
		 * searching, and a lot more comprehensive as it allows you complete control                                         // 13586
		 * over the searching logic. Each element in this array is a function                                                // 13587
		 * (parameters described below) that is called for every row in the table,                                           // 13588
		 * and your logic decides if it should be included in the searching data set                                         // 13589
		 * or not.                                                                                                           // 13590
		 *                                                                                                                   // 13591
		 * Searching functions have the following input parameters:                                                          // 13592
		 *                                                                                                                   // 13593
		 * 1. `{object}` DataTables settings object: see                                                                     // 13594
		 *    {@link DataTable.models.oSettings}                                                                             // 13595
		 * 2. `{array|object}` Data for the row to be processed (same as the                                                 // 13596
		 *    original format that was passed in as the data source, or an array                                             // 13597
		 *    from a DOM data source                                                                                         // 13598
		 * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which                                           // 13599
		 *    can be useful to retrieve the `TR` element if you need DOM interaction.                                        // 13600
		 *                                                                                                                   // 13601
		 * And the following return is expected:                                                                             // 13602
		 *                                                                                                                   // 13603
		 * * {boolean} Include the row in the searched result set (true) or not                                              // 13604
		 *   (false)                                                                                                         // 13605
		 *                                                                                                                   // 13606
		 * Note that as with the main search ability in DataTables, technically this                                         // 13607
		 * is "filtering", since it is subtractive. However, for consistency in                                              // 13608
		 * naming we call it searching here.                                                                                 // 13609
		 *                                                                                                                   // 13610
		 *  @type array                                                                                                      // 13611
		 *  @default []                                                                                                      // 13612
		 *                                                                                                                   // 13613
		 *  @example                                                                                                         // 13614
		 *    // The following example shows custom search being applied to the                                              // 13615
		 *    // fourth column (i.e. the data[3] index) based on two input values                                            // 13616
		 *    // from the end-user, matching the data in a certain range.                                                    // 13617
		 *    $.fn.dataTable.ext.search.push(                                                                                // 13618
		 *      function( settings, data, dataIndex ) {                                                                      // 13619
		 *        var min = document.getElementById('min').value * 1;                                                        // 13620
		 *        var max = document.getElementById('max').value * 1;                                                        // 13621
		 *        var version = data[3] == "-" ? 0 : data[3]*1;                                                              // 13622
		 *                                                                                                                   // 13623
		 *        if ( min == "" && max == "" ) {                                                                            // 13624
		 *          return true;                                                                                             // 13625
		 *        }                                                                                                          // 13626
		 *        else if ( min == "" && version < max ) {                                                                   // 13627
		 *          return true;                                                                                             // 13628
		 *        }                                                                                                          // 13629
		 *        else if ( min < version && "" == max ) {                                                                   // 13630
		 *          return true;                                                                                             // 13631
		 *        }                                                                                                          // 13632
		 *        else if ( min < version && version < max ) {                                                               // 13633
		 *          return true;                                                                                             // 13634
		 *        }                                                                                                          // 13635
		 *        return false;                                                                                              // 13636
		 *      }                                                                                                            // 13637
		 *    );                                                                                                             // 13638
		 */                                                                                                                  // 13639
		search: [],                                                                                                          // 13640
	                                                                                                                      // 13641
	                                                                                                                      // 13642
		/**                                                                                                                  // 13643
		 * Selector extensions                                                                                               // 13644
		 *                                                                                                                   // 13645
		 * The `selector` option can be used to extend the options available for the                                         // 13646
		 * selector modifier options (`selector-modifier` object data type) that                                             // 13647
		 * each of the three built in selector types offer (row, column and cell +                                           // 13648
		 * their plural counterparts). For example the Select extension uses this                                            // 13649
		 * mechanism to provide an option to select only rows, columns and cells                                             // 13650
		 * that have been marked as selected by the end user (`{selected: true}`),                                           // 13651
		 * which can be used in conjunction with the existing built in selector                                              // 13652
		 * options.                                                                                                          // 13653
		 *                                                                                                                   // 13654
		 * Each property is an array to which functions can be pushed. The functions                                         // 13655
		 * take three attributes:                                                                                            // 13656
		 *                                                                                                                   // 13657
		 * * Settings object for the host table                                                                              // 13658
		 * * Options object (`selector-modifier` object type)                                                                // 13659
		 * * Array of selected item indexes                                                                                  // 13660
		 *                                                                                                                   // 13661
		 * The return is an array of the resulting item indexes after the custom                                             // 13662
		 * selector has been applied.                                                                                        // 13663
		 *                                                                                                                   // 13664
		 *  @type object                                                                                                     // 13665
		 */                                                                                                                  // 13666
		selector: {                                                                                                          // 13667
			cell: [],                                                                                                           // 13668
			column: [],                                                                                                         // 13669
			row: []                                                                                                             // 13670
		},                                                                                                                   // 13671
	                                                                                                                      // 13672
	                                                                                                                      // 13673
		/**                                                                                                                  // 13674
		 * Internal functions, exposed for used in plug-ins.                                                                 // 13675
		 *                                                                                                                   // 13676
		 * Please note that you should not need to use the internal methods for                                              // 13677
		 * anything other than a plug-in (and even then, try to avoid if possible).                                          // 13678
		 * The internal function may change between releases.                                                                // 13679
		 *                                                                                                                   // 13680
		 *  @type object                                                                                                     // 13681
		 *  @default {}                                                                                                      // 13682
		 */                                                                                                                  // 13683
		internal: {},                                                                                                        // 13684
	                                                                                                                      // 13685
	                                                                                                                      // 13686
		/**                                                                                                                  // 13687
		 * Legacy configuration options. Enable and disable legacy options that                                              // 13688
		 * are available in DataTables.                                                                                      // 13689
		 *                                                                                                                   // 13690
		 *  @type object                                                                                                     // 13691
		 */                                                                                                                  // 13692
		legacy: {                                                                                                            // 13693
			/**                                                                                                                 // 13694
			 * Enable / disable DataTables 1.9 compatible server-side processing                                                // 13695
			 * requests                                                                                                         // 13696
			 *                                                                                                                  // 13697
			 *  @type boolean                                                                                                   // 13698
			 *  @default null                                                                                                   // 13699
			 */                                                                                                                 // 13700
			ajax: null                                                                                                          // 13701
		},                                                                                                                   // 13702
	                                                                                                                      // 13703
	                                                                                                                      // 13704
		/**                                                                                                                  // 13705
		 * Pagination plug-in methods.                                                                                       // 13706
		 *                                                                                                                   // 13707
		 * Each entry in this object is a function and defines which buttons should                                          // 13708
		 * be shown by the pagination rendering method that is used for the table:                                           // 13709
		 * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the                                         // 13710
		 * buttons are displayed in the document, while the functions here tell it                                           // 13711
		 * what buttons to display. This is done by returning an array of button                                             // 13712
		 * descriptions (what each button will do).                                                                          // 13713
		 *                                                                                                                   // 13714
		 * Pagination types (the four built in options and any additional plug-in                                            // 13715
		 * options defined here) can be used through the `paginationType`                                                    // 13716
		 * initialisation parameter.                                                                                         // 13717
		 *                                                                                                                   // 13718
		 * The functions defined take two parameters:                                                                        // 13719
		 *                                                                                                                   // 13720
		 * 1. `{int} page` The current page index                                                                            // 13721
		 * 2. `{int} pages` The number of pages in the table                                                                 // 13722
		 *                                                                                                                   // 13723
		 * Each function is expected to return an array where each element of the                                            // 13724
		 * array can be one of:                                                                                              // 13725
		 *                                                                                                                   // 13726
		 * * `first` - Jump to first page when activated                                                                     // 13727
		 * * `last` - Jump to last page when activated                                                                       // 13728
		 * * `previous` - Show previous page when activated                                                                  // 13729
		 * * `next` - Show next page when activated                                                                          // 13730
		 * * `{int}` - Show page of the index given                                                                          // 13731
		 * * `{array}` - A nested array containing the above elements to add a                                               // 13732
		 *   containing 'DIV' element (might be useful for styling).                                                         // 13733
		 *                                                                                                                   // 13734
		 * Note that DataTables v1.9- used this object slightly differently whereby                                          // 13735
		 * an object with two functions would be defined for each plug-in. That                                              // 13736
		 * ability is still supported by DataTables 1.10+ to provide backwards                                               // 13737
		 * compatibility, but this option of use is now decremented and no longer                                            // 13738
		 * documented in DataTables 1.10+.                                                                                   // 13739
		 *                                                                                                                   // 13740
		 *  @type object                                                                                                     // 13741
		 *  @default {}                                                                                                      // 13742
		 *                                                                                                                   // 13743
		 *  @example                                                                                                         // 13744
		 *    // Show previous, next and current page buttons only                                                           // 13745
		 *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {                                             // 13746
		 *      return [ 'previous', page, 'next' ];                                                                         // 13747
		 *    };                                                                                                             // 13748
		 */                                                                                                                  // 13749
		pager: {},                                                                                                           // 13750
	                                                                                                                      // 13751
	                                                                                                                      // 13752
		renderer: {                                                                                                          // 13753
			pageButton: {},                                                                                                     // 13754
			header: {}                                                                                                          // 13755
		},                                                                                                                   // 13756
	                                                                                                                      // 13757
	                                                                                                                      // 13758
		/**                                                                                                                  // 13759
		 * Ordering plug-ins - custom data source                                                                            // 13760
		 *                                                                                                                   // 13761
		 * The extension options for ordering of data available here is complimentary                                        // 13762
		 * to the default type based ordering that DataTables typically uses. It                                             // 13763
		 * allows much greater control over the the data that is being used to                                               // 13764
		 * order a column, but is necessarily therefore more complex.                                                        // 13765
		 *                                                                                                                   // 13766
		 * This type of ordering is useful if you want to do ordering based on data                                          // 13767
		 * live from the DOM (for example the contents of an 'input' element) rather                                         // 13768
		 * than just the static string that DataTables knows of.                                                             // 13769
		 *                                                                                                                   // 13770
		 * The way these plug-ins work is that you create an array of the values you                                         // 13771
		 * wish to be ordering for the column in question and then return that                                               // 13772
		 * array. The data in the array much be in the index order of the rows in                                            // 13773
		 * the table (not the currently ordering order!). Which order data gathering                                         // 13774
		 * function is run here depends on the `dt-init columns.orderDataType`                                               // 13775
		 * parameter that is used for the column (if any).                                                                   // 13776
		 *                                                                                                                   // 13777
		 * The functions defined take two parameters:                                                                        // 13778
		 *                                                                                                                   // 13779
		 * 1. `{object}` DataTables settings object: see                                                                     // 13780
		 *    {@link DataTable.models.oSettings}                                                                             // 13781
		 * 2. `{int}` Target column index                                                                                    // 13782
		 *                                                                                                                   // 13783
		 * Each function is expected to return an array:                                                                     // 13784
		 *                                                                                                                   // 13785
		 * * `{array}` Data for the column to be ordering upon                                                               // 13786
		 *                                                                                                                   // 13787
		 *  @type array                                                                                                      // 13788
		 *                                                                                                                   // 13789
		 *  @example                                                                                                         // 13790
		 *    // Ordering using `input` node values                                                                          // 13791
		 *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )                                             // 13792
		 *    {                                                                                                              // 13793
		 *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {                           // 13794
		 *        return $('input', td).val();                                                                               // 13795
		 *      } );                                                                                                         // 13796
		 *    }                                                                                                              // 13797
		 */                                                                                                                  // 13798
		order: {},                                                                                                           // 13799
	                                                                                                                      // 13800
	                                                                                                                      // 13801
		/**                                                                                                                  // 13802
		 * Type based plug-ins.                                                                                              // 13803
		 *                                                                                                                   // 13804
		 * Each column in DataTables has a type assigned to it, either by automatic                                          // 13805
		 * detection or by direct assignment using the `type` option for the column.                                         // 13806
		 * The type of a column will effect how it is ordering and search (plug-ins                                          // 13807
		 * can also make use of the column type if required).                                                                // 13808
		 *                                                                                                                   // 13809
		 * @namespace                                                                                                        // 13810
		 */                                                                                                                  // 13811
		type: {                                                                                                              // 13812
			/**                                                                                                                 // 13813
			 * Type detection functions.                                                                                        // 13814
			 *                                                                                                                  // 13815
			 * The functions defined in this object are used to automatically detect                                            // 13816
			 * a column's type, making initialisation of DataTables super easy, even                                            // 13817
			 * when complex data is in the table.                                                                               // 13818
			 *                                                                                                                  // 13819
			 * The functions defined take two parameters:                                                                       // 13820
			 *                                                                                                                  // 13821
		     *  1. `{*}` Data from the column cell to be analysed                                                            // 13822
		     *  2. `{settings}` DataTables settings object. This can be used to                                              // 13823
		     *     perform context specific type detection - for example detection                                           // 13824
		     *     based on language settings such as using a comma for a decimal                                            // 13825
		     *     place. Generally speaking the options from the settings will not                                          // 13826
		     *     be required                                                                                               // 13827
			 *                                                                                                                  // 13828
			 * Each function is expected to return:                                                                             // 13829
			 *                                                                                                                  // 13830
			 * * `{string|null}` Data type detected, or null if unknown (and thus                                               // 13831
			 *   pass it on to the other type detection functions.                                                              // 13832
			 *                                                                                                                  // 13833
			 *  @type array                                                                                                     // 13834
			 *                                                                                                                  // 13835
			 *  @example                                                                                                        // 13836
			 *    // Currency type detection plug-in:                                                                           // 13837
			 *    $.fn.dataTable.ext.type.detect.push(                                                                          // 13838
			 *      function ( data, settings ) {                                                                               // 13839
			 *        // Check the numeric part                                                                                 // 13840
			 *        if ( ! $.isNumeric( data.substring(1) ) ) {                                                               // 13841
			 *          return null;                                                                                            // 13842
			 *        }                                                                                                         // 13843
			 *                                                                                                                  // 13844
			 *        // Check prefixed by currency                                                                             // 13845
			 *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {                                             // 13846
			 *          return 'currency';                                                                                      // 13847
			 *        }                                                                                                         // 13848
			 *        return null;                                                                                              // 13849
			 *      }                                                                                                           // 13850
			 *    );                                                                                                            // 13851
			 */                                                                                                                 // 13852
			detect: [],                                                                                                         // 13853
	                                                                                                                      // 13854
	                                                                                                                      // 13855
			/**                                                                                                                 // 13856
			 * Type based search formatting.                                                                                    // 13857
			 *                                                                                                                  // 13858
			 * The type based searching functions can be used to pre-format the                                                 // 13859
			 * data to be search on. For example, it can be used to strip HTML                                                  // 13860
			 * tags or to de-format telephone numbers for numeric only searching.                                               // 13861
			 *                                                                                                                  // 13862
			 * Note that is a search is not defined for a column of a given type,                                               // 13863
			 * no search formatting will be performed.                                                                          // 13864
			 *                                                                                                                  // 13865
			 * Pre-processing of searching data plug-ins - When you assign the sType                                            // 13866
			 * for a column (or have it automatically detected for you by DataTables                                            // 13867
			 * or a type detection plug-in), you will typically be using this for                                               // 13868
			 * custom sorting, but it can also be used to provide custom searching                                              // 13869
			 * by allowing you to pre-processing the data and returning the data in                                             // 13870
			 * the format that should be searched upon. This is done by adding                                                  // 13871
			 * functions this object with a parameter name which matches the sType                                              // 13872
			 * for that target column. This is the corollary of <i>afnSortData</i>                                              // 13873
			 * for searching data.                                                                                              // 13874
			 *                                                                                                                  // 13875
			 * The functions defined take a single parameter:                                                                   // 13876
			 *                                                                                                                  // 13877
		     *  1. `{*}` Data from the column cell to be prepared for searching                                              // 13878
			 *                                                                                                                  // 13879
			 * Each function is expected to return:                                                                             // 13880
			 *                                                                                                                  // 13881
			 * * `{string|null}` Formatted string that will be used for the searching.                                          // 13882
			 *                                                                                                                  // 13883
			 *  @type object                                                                                                    // 13884
			 *  @default {}                                                                                                     // 13885
			 *                                                                                                                  // 13886
			 *  @example                                                                                                        // 13887
			 *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {                                            // 13888
			 *      return d.replace(/\n/g," ").replace( /<.*?>/g, "" );                                                        // 13889
			 *    }                                                                                                             // 13890
			 */                                                                                                                 // 13891
			search: {},                                                                                                         // 13892
	                                                                                                                      // 13893
	                                                                                                                      // 13894
			/**                                                                                                                 // 13895
			 * Type based ordering.                                                                                             // 13896
			 *                                                                                                                  // 13897
			 * The column type tells DataTables what ordering to apply to the table                                             // 13898
			 * when a column is sorted upon. The order for each type that is defined,                                           // 13899
			 * is defined by the functions available in this object.                                                            // 13900
			 *                                                                                                                  // 13901
			 * Each ordering option can be described by three properties added to                                               // 13902
			 * this object:                                                                                                     // 13903
			 *                                                                                                                  // 13904
			 * * `{type}-pre` - Pre-formatting function                                                                         // 13905
			 * * `{type}-asc` - Ascending order function                                                                        // 13906
			 * * `{type}-desc` - Descending order function                                                                      // 13907
			 *                                                                                                                  // 13908
			 * All three can be used together, only `{type}-pre` or only                                                        // 13909
			 * `{type}-asc` and `{type}-desc` together. It is generally recommended                                             // 13910
			 * that only `{type}-pre` is used, as this provides the optimal                                                     // 13911
			 * implementation in terms of speed, although the others are provided                                               // 13912
			 * for compatibility with existing Javascript sort functions.                                                       // 13913
			 *                                                                                                                  // 13914
			 * `{type}-pre`: Functions defined take a single parameter:                                                         // 13915
			 *                                                                                                                  // 13916
		     *  1. `{*}` Data from the column cell to be prepared for ordering                                               // 13917
			 *                                                                                                                  // 13918
			 * And return:                                                                                                      // 13919
			 *                                                                                                                  // 13920
			 * * `{*}` Data to be sorted upon                                                                                   // 13921
			 *                                                                                                                  // 13922
			 * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort                                            // 13923
			 * functions, taking two parameters:                                                                                // 13924
			 *                                                                                                                  // 13925
		     *  1. `{*}` Data to compare to the second parameter                                                             // 13926
		     *  2. `{*}` Data to compare to the first parameter                                                              // 13927
			 *                                                                                                                  // 13928
			 * And returning:                                                                                                   // 13929
			 *                                                                                                                  // 13930
			 * * `{*}` Ordering match: <0 if first parameter should be sorted lower                                             // 13931
			 *   than the second parameter, ===0 if the two parameters are equal and                                            // 13932
			 *   >0 if the first parameter should be sorted height than the second                                              // 13933
			 *   parameter.                                                                                                     // 13934
			 *                                                                                                                  // 13935
			 *  @type object                                                                                                    // 13936
			 *  @default {}                                                                                                     // 13937
			 *                                                                                                                  // 13938
			 *  @example                                                                                                        // 13939
			 *    // Numeric ordering of formatted numbers with a pre-formatter                                                 // 13940
			 *    $.extend( $.fn.dataTable.ext.type.order, {                                                                    // 13941
			 *      "string-pre": function(x) {                                                                                 // 13942
			 *        a = (a === "-" || a === "") ? 0 : a.replace( /[^\d\-\.]/g, "" );                                          // 13943
			 *        return parseFloat( a );                                                                                   // 13944
			 *      }                                                                                                           // 13945
			 *    } );                                                                                                          // 13946
			 *                                                                                                                  // 13947
			 *  @example                                                                                                        // 13948
			 *    // Case-sensitive string ordering, with no pre-formatting method                                              // 13949
			 *    $.extend( $.fn.dataTable.ext.order, {                                                                         // 13950
			 *      "string-case-asc": function(x,y) {                                                                          // 13951
			 *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));                                                                // 13952
			 *      },                                                                                                          // 13953
			 *      "string-case-desc": function(x,y) {                                                                         // 13954
			 *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));                                                                // 13955
			 *      }                                                                                                           // 13956
			 *    } );                                                                                                          // 13957
			 */                                                                                                                 // 13958
			order: {}                                                                                                           // 13959
		},                                                                                                                   // 13960
	                                                                                                                      // 13961
		/**                                                                                                                  // 13962
		 * Unique DataTables instance counter                                                                                // 13963
		 *                                                                                                                   // 13964
		 * @type int                                                                                                         // 13965
		 * @private                                                                                                          // 13966
		 */                                                                                                                  // 13967
		_unique: 0,                                                                                                          // 13968
	                                                                                                                      // 13969
	                                                                                                                      // 13970
		//                                                                                                                   // 13971
		// Depreciated                                                                                                       // 13972
		// The following properties are retained for backwards compatiblity only.                                            // 13973
		// The should not be used in new projects and will be removed in a future                                            // 13974
		// version                                                                                                           // 13975
		//                                                                                                                   // 13976
	                                                                                                                      // 13977
		/**                                                                                                                  // 13978
		 * Version check function.                                                                                           // 13979
		 *  @type function                                                                                                   // 13980
		 *  @depreciated Since 1.10                                                                                          // 13981
		 */                                                                                                                  // 13982
		fnVersionCheck: DataTable.fnVersionCheck,                                                                            // 13983
	                                                                                                                      // 13984
	                                                                                                                      // 13985
		/**                                                                                                                  // 13986
		 * Index for what 'this' index API functions should use                                                              // 13987
		 *  @type int                                                                                                        // 13988
		 *  @deprecated Since v1.10                                                                                          // 13989
		 */                                                                                                                  // 13990
		iApiIndex: 0,                                                                                                        // 13991
	                                                                                                                      // 13992
	                                                                                                                      // 13993
		/**                                                                                                                  // 13994
		 * jQuery UI class container                                                                                         // 13995
		 *  @type object                                                                                                     // 13996
		 *  @deprecated Since v1.10                                                                                          // 13997
		 */                                                                                                                  // 13998
		oJUIClasses: {},                                                                                                     // 13999
	                                                                                                                      // 14000
	                                                                                                                      // 14001
		/**                                                                                                                  // 14002
		 * Software version                                                                                                  // 14003
		 *  @type string                                                                                                     // 14004
		 *  @deprecated Since v1.10                                                                                          // 14005
		 */                                                                                                                  // 14006
		sVersion: DataTable.version                                                                                          // 14007
	};                                                                                                                    // 14008
	                                                                                                                      // 14009
	                                                                                                                      // 14010
	//                                                                                                                    // 14011
	// Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts                                        // 14012
	//                                                                                                                    // 14013
	$.extend( _ext, {                                                                                                     // 14014
		afnFiltering: _ext.search,                                                                                           // 14015
		aTypes:       _ext.type.detect,                                                                                      // 14016
		ofnSearch:    _ext.type.search,                                                                                      // 14017
		oSort:        _ext.type.order,                                                                                       // 14018
		afnSortData:  _ext.order,                                                                                            // 14019
		aoFeatures:   _ext.feature,                                                                                          // 14020
		oApi:         _ext.internal,                                                                                         // 14021
		oStdClasses:  _ext.classes,                                                                                          // 14022
		oPagination:  _ext.pager                                                                                             // 14023
	} );                                                                                                                  // 14024
	                                                                                                                      // 14025
	                                                                                                                      // 14026
	$.extend( DataTable.ext.classes, {                                                                                    // 14027
		"sTable": "dataTable",                                                                                               // 14028
		"sNoFooter": "no-footer",                                                                                            // 14029
	                                                                                                                      // 14030
		/* Paging buttons */                                                                                                 // 14031
		"sPageButton": "paginate_button",                                                                                    // 14032
		"sPageButtonActive": "current",                                                                                      // 14033
		"sPageButtonDisabled": "disabled",                                                                                   // 14034
	                                                                                                                      // 14035
		/* Striping classes */                                                                                               // 14036
		"sStripeOdd": "odd",                                                                                                 // 14037
		"sStripeEven": "even",                                                                                               // 14038
	                                                                                                                      // 14039
		/* Empty row */                                                                                                      // 14040
		"sRowEmpty": "dataTables_empty",                                                                                     // 14041
	                                                                                                                      // 14042
		/* Features */                                                                                                       // 14043
		"sWrapper": "dataTables_wrapper",                                                                                    // 14044
		"sFilter": "dataTables_filter",                                                                                      // 14045
		"sInfo": "dataTables_info",                                                                                          // 14046
		"sPaging": "dataTables_paginate paging_", /* Note that the type is postfixed */                                      // 14047
		"sLength": "dataTables_length",                                                                                      // 14048
		"sProcessing": "dataTables_processing",                                                                              // 14049
	                                                                                                                      // 14050
		/* Sorting */                                                                                                        // 14051
		"sSortAsc": "sorting_asc",                                                                                           // 14052
		"sSortDesc": "sorting_desc",                                                                                         // 14053
		"sSortable": "sorting", /* Sortable in both directions */                                                            // 14054
		"sSortableAsc": "sorting_asc_disabled",                                                                              // 14055
		"sSortableDesc": "sorting_desc_disabled",                                                                            // 14056
		"sSortableNone": "sorting_disabled",                                                                                 // 14057
		"sSortColumn": "sorting_", /* Note that an int is postfixed for the sorting order */                                 // 14058
	                                                                                                                      // 14059
		/* Filtering */                                                                                                      // 14060
		"sFilterInput": "",                                                                                                  // 14061
	                                                                                                                      // 14062
		/* Page length */                                                                                                    // 14063
		"sLengthSelect": "",                                                                                                 // 14064
	                                                                                                                      // 14065
		/* Scrolling */                                                                                                      // 14066
		"sScrollWrapper": "dataTables_scroll",                                                                               // 14067
		"sScrollHead": "dataTables_scrollHead",                                                                              // 14068
		"sScrollHeadInner": "dataTables_scrollHeadInner",                                                                    // 14069
		"sScrollBody": "dataTables_scrollBody",                                                                              // 14070
		"sScrollFoot": "dataTables_scrollFoot",                                                                              // 14071
		"sScrollFootInner": "dataTables_scrollFootInner",                                                                    // 14072
	                                                                                                                      // 14073
		/* Misc */                                                                                                           // 14074
		"sHeaderTH": "",                                                                                                     // 14075
		"sFooterTH": "",                                                                                                     // 14076
	                                                                                                                      // 14077
		// Deprecated                                                                                                        // 14078
		"sSortJUIAsc": "",                                                                                                   // 14079
		"sSortJUIDesc": "",                                                                                                  // 14080
		"sSortJUI": "",                                                                                                      // 14081
		"sSortJUIAscAllowed": "",                                                                                            // 14082
		"sSortJUIDescAllowed": "",                                                                                           // 14083
		"sSortJUIWrapper": "",                                                                                               // 14084
		"sSortIcon": "",                                                                                                     // 14085
		"sJUIHeader": "",                                                                                                    // 14086
		"sJUIFooter": ""                                                                                                     // 14087
	} );                                                                                                                  // 14088
	                                                                                                                      // 14089
	                                                                                                                      // 14090
	(function() {                                                                                                         // 14091
	                                                                                                                      // 14092
	// Reused strings for better compression. Closure compiler appears to have a                                          // 14093
	// weird edge case where it is trying to expand strings rather than use the                                           // 14094
	// variable version. This results in about 200 bytes being added, for very                                            // 14095
	// little preference benefit since it this run on script load only.                                                   // 14096
	var _empty = '';                                                                                                      // 14097
	_empty = '';                                                                                                          // 14098
	                                                                                                                      // 14099
	var _stateDefault = _empty + 'ui-state-default';                                                                      // 14100
	var _sortIcon     = _empty + 'css_right ui-icon ui-icon-';                                                            // 14101
	var _headerFooter = _empty + 'fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix';                             // 14102
	                                                                                                                      // 14103
	$.extend( DataTable.ext.oJUIClasses, DataTable.ext.classes, {                                                         // 14104
		/* Full numbers paging buttons */                                                                                    // 14105
		"sPageButton":         "fg-button ui-button "+_stateDefault,                                                         // 14106
		"sPageButtonActive":   "ui-state-disabled",                                                                          // 14107
		"sPageButtonDisabled": "ui-state-disabled",                                                                          // 14108
	                                                                                                                      // 14109
		/* Features */                                                                                                       // 14110
		"sPaging": "dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi "+                                      // 14111
			"ui-buttonset-multi paging_", /* Note that the type is postfixed */                                                 // 14112
	                                                                                                                      // 14113
		/* Sorting */                                                                                                        // 14114
		"sSortAsc":            _stateDefault+" sorting_asc",                                                                 // 14115
		"sSortDesc":           _stateDefault+" sorting_desc",                                                                // 14116
		"sSortable":           _stateDefault+" sorting",                                                                     // 14117
		"sSortableAsc":        _stateDefault+" sorting_asc_disabled",                                                        // 14118
		"sSortableDesc":       _stateDefault+" sorting_desc_disabled",                                                       // 14119
		"sSortableNone":       _stateDefault+" sorting_disabled",                                                            // 14120
		"sSortJUIAsc":         _sortIcon+"triangle-1-n",                                                                     // 14121
		"sSortJUIDesc":        _sortIcon+"triangle-1-s",                                                                     // 14122
		"sSortJUI":            _sortIcon+"carat-2-n-s",                                                                      // 14123
		"sSortJUIAscAllowed":  _sortIcon+"carat-1-n",                                                                        // 14124
		"sSortJUIDescAllowed": _sortIcon+"carat-1-s",                                                                        // 14125
		"sSortJUIWrapper":     "DataTables_sort_wrapper",                                                                    // 14126
		"sSortIcon":           "DataTables_sort_icon",                                                                       // 14127
	                                                                                                                      // 14128
		/* Scrolling */                                                                                                      // 14129
		"sScrollHead": "dataTables_scrollHead "+_stateDefault,                                                               // 14130
		"sScrollFoot": "dataTables_scrollFoot "+_stateDefault,                                                               // 14131
	                                                                                                                      // 14132
		/* Misc */                                                                                                           // 14133
		"sHeaderTH":  _stateDefault,                                                                                         // 14134
		"sFooterTH":  _stateDefault,                                                                                         // 14135
		"sJUIHeader": _headerFooter+" ui-corner-tl ui-corner-tr",                                                            // 14136
		"sJUIFooter": _headerFooter+" ui-corner-bl ui-corner-br"                                                             // 14137
	} );                                                                                                                  // 14138
	                                                                                                                      // 14139
	}());                                                                                                                 // 14140
	                                                                                                                      // 14141
	                                                                                                                      // 14142
	                                                                                                                      // 14143
	var extPagination = DataTable.ext.pager;                                                                              // 14144
	                                                                                                                      // 14145
	function _numbers ( page, pages ) {                                                                                   // 14146
		var                                                                                                                  // 14147
			numbers = [],                                                                                                       // 14148
			buttons = extPagination.numbers_length,                                                                             // 14149
			half = Math.floor( buttons / 2 ),                                                                                   // 14150
			i = 1;                                                                                                              // 14151
	                                                                                                                      // 14152
		if ( pages <= buttons ) {                                                                                            // 14153
			numbers = _range( 0, pages );                                                                                       // 14154
		}                                                                                                                    // 14155
		else if ( page <= half ) {                                                                                           // 14156
			numbers = _range( 0, buttons-2 );                                                                                   // 14157
			numbers.push( 'ellipsis' );                                                                                         // 14158
			numbers.push( pages-1 );                                                                                            // 14159
		}                                                                                                                    // 14160
		else if ( page >= pages - 1 - half ) {                                                                               // 14161
			numbers = _range( pages-(buttons-2), pages );                                                                       // 14162
			numbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6                                                            // 14163
			numbers.splice( 0, 0, 0 );                                                                                          // 14164
		}                                                                                                                    // 14165
		else {                                                                                                               // 14166
			numbers = _range( page-half+2, page+half-1 );                                                                       // 14167
			numbers.push( 'ellipsis' );                                                                                         // 14168
			numbers.push( pages-1 );                                                                                            // 14169
			numbers.splice( 0, 0, 'ellipsis' );                                                                                 // 14170
			numbers.splice( 0, 0, 0 );                                                                                          // 14171
		}                                                                                                                    // 14172
	                                                                                                                      // 14173
		numbers.DT_el = 'span';                                                                                              // 14174
		return numbers;                                                                                                      // 14175
	}                                                                                                                     // 14176
	                                                                                                                      // 14177
	                                                                                                                      // 14178
	$.extend( extPagination, {                                                                                            // 14179
		simple: function ( page, pages ) {                                                                                   // 14180
			return [ 'previous', 'next' ];                                                                                      // 14181
		},                                                                                                                   // 14182
	                                                                                                                      // 14183
		full: function ( page, pages ) {                                                                                     // 14184
			return [  'first', 'previous', 'next', 'last' ];                                                                    // 14185
		},                                                                                                                   // 14186
	                                                                                                                      // 14187
		simple_numbers: function ( page, pages ) {                                                                           // 14188
			return [ 'previous', _numbers(page, pages), 'next' ];                                                               // 14189
		},                                                                                                                   // 14190
	                                                                                                                      // 14191
		full_numbers: function ( page, pages ) {                                                                             // 14192
			return [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];                                              // 14193
		},                                                                                                                   // 14194
	                                                                                                                      // 14195
		// For testing and plug-ins to use                                                                                   // 14196
		_numbers: _numbers,                                                                                                  // 14197
	                                                                                                                      // 14198
		// Number of number buttons (including ellipsis) to show. _Must be odd!_                                             // 14199
		numbers_length: 7                                                                                                    // 14200
	} );                                                                                                                  // 14201
	                                                                                                                      // 14202
	                                                                                                                      // 14203
	$.extend( true, DataTable.ext.renderer, {                                                                             // 14204
		pageButton: {                                                                                                        // 14205
			_: function ( settings, host, idx, buttons, page, pages ) {                                                         // 14206
				var classes = settings.oClasses;                                                                                   // 14207
				var lang = settings.oLanguage.oPaginate;                                                                           // 14208
				var btnDisplay, btnClass, counter=0;                                                                               // 14209
	                                                                                                                      // 14210
				var attach = function( container, buttons ) {                                                                      // 14211
					var i, ien, node, button;                                                                                         // 14212
					var clickHandler = function ( e ) {                                                                               // 14213
						_fnPageChange( settings, e.data.action, true );                                                                  // 14214
					};                                                                                                                // 14215
	                                                                                                                      // 14216
					for ( i=0, ien=buttons.length ; i<ien ; i++ ) {                                                                   // 14217
						button = buttons[i];                                                                                             // 14218
	                                                                                                                      // 14219
						if ( $.isArray( button ) ) {                                                                                     // 14220
							var inner = $( '<'+(button.DT_el || 'div')+'/>' )                                                               // 14221
								.appendTo( container );                                                                                        // 14222
							attach( inner, button );                                                                                        // 14223
						}                                                                                                                // 14224
						else {                                                                                                           // 14225
							btnDisplay = '';                                                                                                // 14226
							btnClass = '';                                                                                                  // 14227
	                                                                                                                      // 14228
							switch ( button ) {                                                                                             // 14229
								case 'ellipsis':                                                                                               // 14230
									container.append('<span class="ellipsis">&#x2026;</span>');                                                   // 14231
									break;                                                                                                        // 14232
	                                                                                                                      // 14233
								case 'first':                                                                                                  // 14234
									btnDisplay = lang.sFirst;                                                                                     // 14235
									btnClass = button + (page > 0 ?                                                                               // 14236
										'' : ' '+classes.sPageButtonDisabled);                                                                       // 14237
									break;                                                                                                        // 14238
	                                                                                                                      // 14239
								case 'previous':                                                                                               // 14240
									btnDisplay = lang.sPrevious;                                                                                  // 14241
									btnClass = button + (page > 0 ?                                                                               // 14242
										'' : ' '+classes.sPageButtonDisabled);                                                                       // 14243
									break;                                                                                                        // 14244
	                                                                                                                      // 14245
								case 'next':                                                                                                   // 14246
									btnDisplay = lang.sNext;                                                                                      // 14247
									btnClass = button + (page < pages-1 ?                                                                         // 14248
										'' : ' '+classes.sPageButtonDisabled);                                                                       // 14249
									break;                                                                                                        // 14250
	                                                                                                                      // 14251
								case 'last':                                                                                                   // 14252
									btnDisplay = lang.sLast;                                                                                      // 14253
									btnClass = button + (page < pages-1 ?                                                                         // 14254
										'' : ' '+classes.sPageButtonDisabled);                                                                       // 14255
									break;                                                                                                        // 14256
	                                                                                                                      // 14257
								default:                                                                                                       // 14258
									btnDisplay = button + 1;                                                                                      // 14259
									btnClass = page === button ?                                                                                  // 14260
										classes.sPageButtonActive : '';                                                                              // 14261
									break;                                                                                                        // 14262
							}                                                                                                               // 14263
	                                                                                                                      // 14264
							if ( btnDisplay ) {                                                                                             // 14265
								node = $('<a>', {                                                                                              // 14266
										'class': classes.sPageButton+' '+btnClass,                                                                   // 14267
										'aria-controls': settings.sTableId,                                                                          // 14268
										'data-dt-idx': counter,                                                                                      // 14269
										'tabindex': settings.iTabIndex,                                                                              // 14270
										'id': idx === 0 && typeof button === 'string' ?                                                              // 14271
											settings.sTableId +'_'+ button :                                                                            // 14272
											null                                                                                                        // 14273
									} )                                                                                                           // 14274
									.html( btnDisplay )                                                                                           // 14275
									.appendTo( container );                                                                                       // 14276
	                                                                                                                      // 14277
								_fnBindAction(                                                                                                 // 14278
									node, {action: button}, clickHandler                                                                          // 14279
								);                                                                                                             // 14280
	                                                                                                                      // 14281
								counter++;                                                                                                     // 14282
							}                                                                                                               // 14283
						}                                                                                                                // 14284
					}                                                                                                                 // 14285
				};                                                                                                                 // 14286
	                                                                                                                      // 14287
				// IE9 throws an 'unknown error' if document.activeElement is used                                                 // 14288
				// inside an iframe or frame. Try / catch the error. Not good for                                                  // 14289
				// accessibility, but neither are frames.                                                                          // 14290
				var activeEl;                                                                                                      // 14291
	                                                                                                                      // 14292
				try {                                                                                                              // 14293
					// Because this approach is destroying and recreating the paging                                                  // 14294
					// elements, focus is lost on the select button which is bad for                                                  // 14295
					// accessibility. So we want to restore focus once the draw has                                                   // 14296
					// completed                                                                                                      // 14297
					activeEl = $(document.activeElement).data('dt-idx');                                                              // 14298
				}                                                                                                                  // 14299
				catch (e) {}                                                                                                       // 14300
	                                                                                                                      // 14301
				attach( $(host).empty(), buttons );                                                                                // 14302
	                                                                                                                      // 14303
				if ( activeEl ) {                                                                                                  // 14304
					$(host).find( '[data-dt-idx='+activeEl+']' ).focus();                                                             // 14305
				}                                                                                                                  // 14306
			}                                                                                                                   // 14307
		}                                                                                                                    // 14308
	} );                                                                                                                  // 14309
	                                                                                                                      // 14310
	                                                                                                                      // 14311
	                                                                                                                      // 14312
	// Built in type detection. See model.ext.aTypes for information about                                                // 14313
	// what is required from this methods.                                                                                // 14314
	$.extend( DataTable.ext.type.detect, [                                                                                // 14315
		// Plain numbers - first since V8 detects some plain numbers as dates                                                // 14316
		// e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).                                                    // 14317
		function ( d, settings )                                                                                             // 14318
		{                                                                                                                    // 14319
			var decimal = settings.oLanguage.sDecimal;                                                                          // 14320
			return _isNumber( d, decimal ) ? 'num'+decimal : null;                                                              // 14321
		},                                                                                                                   // 14322
	                                                                                                                      // 14323
		// Dates (only those recognised by the browser's Date.parse)                                                         // 14324
		function ( d, settings )                                                                                             // 14325
		{                                                                                                                    // 14326
			// V8 will remove any unknown characters at the start and end of the                                                // 14327
			// expression, leading to false matches such as `$245.12` or `10%` being                                            // 14328
			// a valid date. See forum thread 18941 for detail.                                                                 // 14329
			if ( d && !(d instanceof Date) && ( ! _re_date_start.test(d) || ! _re_date_end.test(d) ) ) {                        // 14330
				return null;                                                                                                       // 14331
			}                                                                                                                   // 14332
			var parsed = Date.parse(d);                                                                                         // 14333
			return (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;                                            // 14334
		},                                                                                                                   // 14335
	                                                                                                                      // 14336
		// Formatted numbers                                                                                                 // 14337
		function ( d, settings )                                                                                             // 14338
		{                                                                                                                    // 14339
			var decimal = settings.oLanguage.sDecimal;                                                                          // 14340
			return _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;                                                    // 14341
		},                                                                                                                   // 14342
	                                                                                                                      // 14343
		// HTML numeric                                                                                                      // 14344
		function ( d, settings )                                                                                             // 14345
		{                                                                                                                    // 14346
			var decimal = settings.oLanguage.sDecimal;                                                                          // 14347
			return _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;                                                      // 14348
		},                                                                                                                   // 14349
	                                                                                                                      // 14350
		// HTML numeric, formatted                                                                                           // 14351
		function ( d, settings )                                                                                             // 14352
		{                                                                                                                    // 14353
			var decimal = settings.oLanguage.sDecimal;                                                                          // 14354
			return _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;                                            // 14355
		},                                                                                                                   // 14356
	                                                                                                                      // 14357
		// HTML (this is strict checking - there must be html)                                                               // 14358
		function ( d, settings )                                                                                             // 14359
		{                                                                                                                    // 14360
			return _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?                                            // 14361
				'html' : null;                                                                                                     // 14362
		}                                                                                                                    // 14363
	] );                                                                                                                  // 14364
	                                                                                                                      // 14365
	                                                                                                                      // 14366
	                                                                                                                      // 14367
	// Filter formatting functions. See model.ext.ofnSearch for information about                                         // 14368
	// what is required from these methods.                                                                               // 14369
	//                                                                                                                    // 14370
	// Note that additional search methods are added for the html numbers and                                             // 14371
	// html formatted numbers by `_addNumericSort()` when we know what the decimal                                        // 14372
	// place is                                                                                                           // 14373
	                                                                                                                      // 14374
	                                                                                                                      // 14375
	$.extend( DataTable.ext.type.search, {                                                                                // 14376
		html: function ( data ) {                                                                                            // 14377
			return _empty(data) ?                                                                                               // 14378
				data :                                                                                                             // 14379
				typeof data === 'string' ?                                                                                         // 14380
					data                                                                                                              // 14381
						.replace( _re_new_lines, " " )                                                                                   // 14382
						.replace( _re_html, "" ) :                                                                                       // 14383
					'';                                                                                                               // 14384
		},                                                                                                                   // 14385
	                                                                                                                      // 14386
		string: function ( data ) {                                                                                          // 14387
			return _empty(data) ?                                                                                               // 14388
				data :                                                                                                             // 14389
				typeof data === 'string' ?                                                                                         // 14390
					data.replace( _re_new_lines, " " ) :                                                                              // 14391
					data;                                                                                                             // 14392
		}                                                                                                                    // 14393
	} );                                                                                                                  // 14394
	                                                                                                                      // 14395
	                                                                                                                      // 14396
	                                                                                                                      // 14397
	var __numericReplace = function ( d, decimalPlace, re1, re2 ) {                                                       // 14398
		if ( d !== 0 && (!d || d === '-') ) {                                                                                // 14399
			return -Infinity;                                                                                                   // 14400
		}                                                                                                                    // 14401
	                                                                                                                      // 14402
		// If a decimal place other than `.` is used, it needs to be given to the                                            // 14403
		// function so we can detect it and replace with a `.` which is the only                                             // 14404
		// decimal place Javascript recognises - it is not locale aware.                                                     // 14405
		if ( decimalPlace ) {                                                                                                // 14406
			d = _numToDecimal( d, decimalPlace );                                                                               // 14407
		}                                                                                                                    // 14408
	                                                                                                                      // 14409
		if ( d.replace ) {                                                                                                   // 14410
			if ( re1 ) {                                                                                                        // 14411
				d = d.replace( re1, '' );                                                                                          // 14412
			}                                                                                                                   // 14413
	                                                                                                                      // 14414
			if ( re2 ) {                                                                                                        // 14415
				d = d.replace( re2, '' );                                                                                          // 14416
			}                                                                                                                   // 14417
		}                                                                                                                    // 14418
	                                                                                                                      // 14419
		return d * 1;                                                                                                        // 14420
	};                                                                                                                    // 14421
	                                                                                                                      // 14422
	                                                                                                                      // 14423
	// Add the numeric 'deformatting' functions for sorting and search. This is done                                      // 14424
	// in a function to provide an easy ability for the language options to add                                           // 14425
	// additional methods if a non-period decimal place is used.                                                          // 14426
	function _addNumericSort ( decimalPlace ) {                                                                           // 14427
		$.each(                                                                                                              // 14428
			{                                                                                                                   // 14429
				// Plain numbers                                                                                                   // 14430
				"num": function ( d ) {                                                                                            // 14431
					return __numericReplace( d, decimalPlace );                                                                       // 14432
				},                                                                                                                 // 14433
	                                                                                                                      // 14434
				// Formatted numbers                                                                                               // 14435
				"num-fmt": function ( d ) {                                                                                        // 14436
					return __numericReplace( d, decimalPlace, _re_formatted_numeric );                                                // 14437
				},                                                                                                                 // 14438
	                                                                                                                      // 14439
				// HTML numeric                                                                                                    // 14440
				"html-num": function ( d ) {                                                                                       // 14441
					return __numericReplace( d, decimalPlace, _re_html );                                                             // 14442
				},                                                                                                                 // 14443
	                                                                                                                      // 14444
				// HTML numeric, formatted                                                                                         // 14445
				"html-num-fmt": function ( d ) {                                                                                   // 14446
					return __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );                                      // 14447
				}                                                                                                                  // 14448
			},                                                                                                                  // 14449
			function ( key, fn ) {                                                                                              // 14450
				// Add the ordering method                                                                                         // 14451
				_ext.type.order[ key+decimalPlace+'-pre' ] = fn;                                                                   // 14452
	                                                                                                                      // 14453
				// For HTML types add a search formatter that will strip the HTML                                                  // 14454
				if ( key.match(/^html\-/) ) {                                                                                      // 14455
					_ext.type.search[ key+decimalPlace ] = _ext.type.search.html;                                                     // 14456
				}                                                                                                                  // 14457
			}                                                                                                                   // 14458
		);                                                                                                                   // 14459
	}                                                                                                                     // 14460
	                                                                                                                      // 14461
	                                                                                                                      // 14462
	// Default sort methods                                                                                               // 14463
	$.extend( _ext.type.order, {                                                                                          // 14464
		// Dates                                                                                                             // 14465
		"date-pre": function ( d ) {                                                                                         // 14466
			return Date.parse( d ) || 0;                                                                                        // 14467
		},                                                                                                                   // 14468
	                                                                                                                      // 14469
		// html                                                                                                              // 14470
		"html-pre": function ( a ) {                                                                                         // 14471
			return _empty(a) ?                                                                                                  // 14472
				'' :                                                                                                               // 14473
				a.replace ?                                                                                                        // 14474
					a.replace( /<.*?>/g, "" ).toLowerCase() :                                                                         // 14475
					a+'';                                                                                                             // 14476
		},                                                                                                                   // 14477
	                                                                                                                      // 14478
		// string                                                                                                            // 14479
		"string-pre": function ( a ) {                                                                                       // 14480
			// This is a little complex, but faster than always calling toString,                                               // 14481
			// http://jsperf.com/tostring-v-check                                                                               // 14482
			return _empty(a) ?                                                                                                  // 14483
				'' :                                                                                                               // 14484
				typeof a === 'string' ?                                                                                            // 14485
					a.toLowerCase() :                                                                                                 // 14486
					! a.toString ?                                                                                                    // 14487
						'' :                                                                                                             // 14488
						a.toString();                                                                                                    // 14489
		},                                                                                                                   // 14490
	                                                                                                                      // 14491
		// string-asc and -desc are retained only for compatibility with the old                                             // 14492
		// sort methods                                                                                                      // 14493
		"string-asc": function ( x, y ) {                                                                                    // 14494
			return ((x < y) ? -1 : ((x > y) ? 1 : 0));                                                                          // 14495
		},                                                                                                                   // 14496
	                                                                                                                      // 14497
		"string-desc": function ( x, y ) {                                                                                   // 14498
			return ((x < y) ? 1 : ((x > y) ? -1 : 0));                                                                          // 14499
		}                                                                                                                    // 14500
	} );                                                                                                                  // 14501
	                                                                                                                      // 14502
	                                                                                                                      // 14503
	// Numeric sorting types - order doesn't matter here                                                                  // 14504
	_addNumericSort( '' );                                                                                                // 14505
	                                                                                                                      // 14506
	                                                                                                                      // 14507
	$.extend( true, DataTable.ext.renderer, {                                                                             // 14508
		header: {                                                                                                            // 14509
			_: function ( settings, cell, column, classes ) {                                                                   // 14510
				// No additional mark-up required                                                                                  // 14511
				// Attach a sort listener to update on sort - note that using the                                                  // 14512
				// `DT` namespace will allow the event to be removed automatically                                                 // 14513
				// on destroy, while the `dt` namespaced event is the one we are                                                   // 14514
				// listening for                                                                                                   // 14515
				$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {                                      // 14516
					if ( settings !== ctx ) { // need to check this this is the host                                                  // 14517
						return;               // table, not a nested one                                                                 // 14518
					}                                                                                                                 // 14519
	                                                                                                                      // 14520
					var colIdx = column.idx;                                                                                          // 14521
	                                                                                                                      // 14522
					cell                                                                                                              // 14523
						.removeClass(                                                                                                    // 14524
							column.sSortingClass +' '+                                                                                      // 14525
							classes.sSortAsc +' '+                                                                                          // 14526
							classes.sSortDesc                                                                                               // 14527
						)                                                                                                                // 14528
						.addClass( columns[ colIdx ] == 'asc' ?                                                                          // 14529
							classes.sSortAsc : columns[ colIdx ] == 'desc' ?                                                                // 14530
								classes.sSortDesc :                                                                                            // 14531
								column.sSortingClass                                                                                           // 14532
						);                                                                                                               // 14533
				} );                                                                                                               // 14534
			},                                                                                                                  // 14535
	                                                                                                                      // 14536
			jqueryui: function ( settings, cell, column, classes ) {                                                            // 14537
				$('<div/>')                                                                                                        // 14538
					.addClass( classes.sSortJUIWrapper )                                                                              // 14539
					.append( cell.contents() )                                                                                        // 14540
					.append( $('<span/>')                                                                                             // 14541
						.addClass( classes.sSortIcon+' '+column.sSortingClassJUI )                                                       // 14542
					)                                                                                                                 // 14543
					.appendTo( cell );                                                                                                // 14544
	                                                                                                                      // 14545
				// Attach a sort listener to update on sort                                                                        // 14546
				$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {                                      // 14547
					if ( settings !== ctx ) {                                                                                         // 14548
						return;                                                                                                          // 14549
					}                                                                                                                 // 14550
	                                                                                                                      // 14551
					var colIdx = column.idx;                                                                                          // 14552
	                                                                                                                      // 14553
					cell                                                                                                              // 14554
						.removeClass( classes.sSortAsc +" "+classes.sSortDesc )                                                          // 14555
						.addClass( columns[ colIdx ] == 'asc' ?                                                                          // 14556
							classes.sSortAsc : columns[ colIdx ] == 'desc' ?                                                                // 14557
								classes.sSortDesc :                                                                                            // 14558
								column.sSortingClass                                                                                           // 14559
						);                                                                                                               // 14560
	                                                                                                                      // 14561
					cell                                                                                                              // 14562
						.find( 'span.'+classes.sSortIcon )                                                                               // 14563
						.removeClass(                                                                                                    // 14564
							classes.sSortJUIAsc +" "+                                                                                       // 14565
							classes.sSortJUIDesc +" "+                                                                                      // 14566
							classes.sSortJUI +" "+                                                                                          // 14567
							classes.sSortJUIAscAllowed +" "+                                                                                // 14568
							classes.sSortJUIDescAllowed                                                                                     // 14569
						)                                                                                                                // 14570
						.addClass( columns[ colIdx ] == 'asc' ?                                                                          // 14571
							classes.sSortJUIAsc : columns[ colIdx ] == 'desc' ?                                                             // 14572
								classes.sSortJUIDesc :                                                                                         // 14573
								column.sSortingClassJUI                                                                                        // 14574
						);                                                                                                               // 14575
				} );                                                                                                               // 14576
			}                                                                                                                   // 14577
		}                                                                                                                    // 14578
	} );                                                                                                                  // 14579
	                                                                                                                      // 14580
	/*                                                                                                                    // 14581
	 * Public helper functions. These aren't used internally by DataTables, or                                            // 14582
	 * called by any of the options passed into DataTables, but they can be used                                          // 14583
	 * externally by developers working with DataTables. They are helper functions                                        // 14584
	 * to make working with DataTables a little bit easier.                                                               // 14585
	 */                                                                                                                   // 14586
	                                                                                                                      // 14587
	/**                                                                                                                   // 14588
	 * Helpers for `columns.render`.                                                                                      // 14589
	 *                                                                                                                    // 14590
	 * The options defined here can be used with the `columns.render` initialisation                                      // 14591
	 * option to provide a display renderer. The following functions are defined:                                         // 14592
	 *                                                                                                                    // 14593
	 * * `number` - Will format numeric data (defined by `columns.data`) for                                              // 14594
	 *   display, retaining the original unformatted data for sorting and filtering.                                      // 14595
	 *   It takes 4 parameters:                                                                                           // 14596
	 *   * `string` - Thousands grouping separator                                                                        // 14597
	 *   * `string` - Decimal point indicator                                                                             // 14598
	 *   * `integer` - Number of decimal points to show                                                                   // 14599
	 *   * `string` (optional) - Prefix.                                                                                  // 14600
	 *                                                                                                                    // 14601
	 * @example                                                                                                           // 14602
	 *   // Column definition using the number renderer                                                                   // 14603
	 *   {                                                                                                                // 14604
	 *     data: "salary",                                                                                                // 14605
	 *     render: $.fn.dataTable.render.number( '\'', '.', 0, '$' )                                                      // 14606
	 *   }                                                                                                                // 14607
	 *                                                                                                                    // 14608
	 * @namespace                                                                                                         // 14609
	 */                                                                                                                   // 14610
	DataTable.render = {                                                                                                  // 14611
		number: function ( thousands, decimal, precision, prefix ) {                                                         // 14612
			return {                                                                                                            // 14613
				display: function ( d ) {                                                                                          // 14614
					if ( typeof d !== 'number' && typeof d !== 'string' ) {                                                           // 14615
						return d;                                                                                                        // 14616
					}                                                                                                                 // 14617
	                                                                                                                      // 14618
					var negative = d < 0 ? '-' : '';                                                                                  // 14619
					d = Math.abs( parseFloat( d ) );                                                                                  // 14620
	                                                                                                                      // 14621
					var intPart = parseInt( d, 10 );                                                                                  // 14622
					var floatPart = precision ?                                                                                       // 14623
						decimal+(d - intPart).toFixed( precision ).substring( 2 ):                                                       // 14624
						'';                                                                                                              // 14625
	                                                                                                                      // 14626
					return negative + (prefix||'') +                                                                                  // 14627
						intPart.toString().replace(                                                                                      // 14628
							/\B(?=(\d{3})+(?!\d))/g, thousands                                                                              // 14629
						) +                                                                                                              // 14630
						floatPart;                                                                                                       // 14631
				}                                                                                                                  // 14632
			};                                                                                                                  // 14633
		}                                                                                                                    // 14634
	};                                                                                                                    // 14635
	                                                                                                                      // 14636
	                                                                                                                      // 14637
	/*                                                                                                                    // 14638
	 * This is really a good bit rubbish this method of exposing the internal methods                                     // 14639
	 * publicly... - To be fixed in 2.0 using methods on the prototype                                                    // 14640
	 */                                                                                                                   // 14641
	                                                                                                                      // 14642
	                                                                                                                      // 14643
	/**                                                                                                                   // 14644
	 * Create a wrapper function for exporting an internal functions to an external API.                                  // 14645
	 *  @param {string} fn API function name                                                                              // 14646
	 *  @returns {function} wrapped function                                                                              // 14647
	 *  @memberof DataTable#internal                                                                                      // 14648
	 */                                                                                                                   // 14649
	function _fnExternApiFunc (fn)                                                                                        // 14650
	{                                                                                                                     // 14651
		return function() {                                                                                                  // 14652
			var args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(                                           // 14653
				Array.prototype.slice.call(arguments)                                                                              // 14654
			);                                                                                                                  // 14655
			return DataTable.ext.internal[fn].apply( this, args );                                                              // 14656
		};                                                                                                                   // 14657
	}                                                                                                                     // 14658
	                                                                                                                      // 14659
	                                                                                                                      // 14660
	/**                                                                                                                   // 14661
	 * Reference to internal functions for use by plug-in developers. Note that                                           // 14662
	 * these methods are references to internal functions and are considered to be                                        // 14663
	 * private. If you use these methods, be aware that they are liable to change                                         // 14664
	 * between versions.                                                                                                  // 14665
	 *  @namespace                                                                                                        // 14666
	 */                                                                                                                   // 14667
	$.extend( DataTable.ext.internal, {                                                                                   // 14668
		_fnExternApiFunc: _fnExternApiFunc,                                                                                  // 14669
		_fnBuildAjax: _fnBuildAjax,                                                                                          // 14670
		_fnAjaxUpdate: _fnAjaxUpdate,                                                                                        // 14671
		_fnAjaxParameters: _fnAjaxParameters,                                                                                // 14672
		_fnAjaxUpdateDraw: _fnAjaxUpdateDraw,                                                                                // 14673
		_fnAjaxDataSrc: _fnAjaxDataSrc,                                                                                      // 14674
		_fnAddColumn: _fnAddColumn,                                                                                          // 14675
		_fnColumnOptions: _fnColumnOptions,                                                                                  // 14676
		_fnAdjustColumnSizing: _fnAdjustColumnSizing,                                                                        // 14677
		_fnVisibleToColumnIndex: _fnVisibleToColumnIndex,                                                                    // 14678
		_fnColumnIndexToVisible: _fnColumnIndexToVisible,                                                                    // 14679
		_fnVisbleColumns: _fnVisbleColumns,                                                                                  // 14680
		_fnGetColumns: _fnGetColumns,                                                                                        // 14681
		_fnColumnTypes: _fnColumnTypes,                                                                                      // 14682
		_fnApplyColumnDefs: _fnApplyColumnDefs,                                                                              // 14683
		_fnHungarianMap: _fnHungarianMap,                                                                                    // 14684
		_fnCamelToHungarian: _fnCamelToHungarian,                                                                            // 14685
		_fnLanguageCompat: _fnLanguageCompat,                                                                                // 14686
		_fnBrowserDetect: _fnBrowserDetect,                                                                                  // 14687
		_fnAddData: _fnAddData,                                                                                              // 14688
		_fnAddTr: _fnAddTr,                                                                                                  // 14689
		_fnNodeToDataIndex: _fnNodeToDataIndex,                                                                              // 14690
		_fnNodeToColumnIndex: _fnNodeToColumnIndex,                                                                          // 14691
		_fnGetCellData: _fnGetCellData,                                                                                      // 14692
		_fnSetCellData: _fnSetCellData,                                                                                      // 14693
		_fnSplitObjNotation: _fnSplitObjNotation,                                                                            // 14694
		_fnGetObjectDataFn: _fnGetObjectDataFn,                                                                              // 14695
		_fnSetObjectDataFn: _fnSetObjectDataFn,                                                                              // 14696
		_fnGetDataMaster: _fnGetDataMaster,                                                                                  // 14697
		_fnClearTable: _fnClearTable,                                                                                        // 14698
		_fnDeleteIndex: _fnDeleteIndex,                                                                                      // 14699
		_fnInvalidate: _fnInvalidate,                                                                                        // 14700
		_fnGetRowElements: _fnGetRowElements,                                                                                // 14701
		_fnCreateTr: _fnCreateTr,                                                                                            // 14702
		_fnBuildHead: _fnBuildHead,                                                                                          // 14703
		_fnDrawHead: _fnDrawHead,                                                                                            // 14704
		_fnDraw: _fnDraw,                                                                                                    // 14705
		_fnReDraw: _fnReDraw,                                                                                                // 14706
		_fnAddOptionsHtml: _fnAddOptionsHtml,                                                                                // 14707
		_fnDetectHeader: _fnDetectHeader,                                                                                    // 14708
		_fnGetUniqueThs: _fnGetUniqueThs,                                                                                    // 14709
		_fnFeatureHtmlFilter: _fnFeatureHtmlFilter,                                                                          // 14710
		_fnFilterComplete: _fnFilterComplete,                                                                                // 14711
		_fnFilterCustom: _fnFilterCustom,                                                                                    // 14712
		_fnFilterColumn: _fnFilterColumn,                                                                                    // 14713
		_fnFilter: _fnFilter,                                                                                                // 14714
		_fnFilterCreateSearch: _fnFilterCreateSearch,                                                                        // 14715
		_fnEscapeRegex: _fnEscapeRegex,                                                                                      // 14716
		_fnFilterData: _fnFilterData,                                                                                        // 14717
		_fnFeatureHtmlInfo: _fnFeatureHtmlInfo,                                                                              // 14718
		_fnUpdateInfo: _fnUpdateInfo,                                                                                        // 14719
		_fnInfoMacros: _fnInfoMacros,                                                                                        // 14720
		_fnInitialise: _fnInitialise,                                                                                        // 14721
		_fnInitComplete: _fnInitComplete,                                                                                    // 14722
		_fnLengthChange: _fnLengthChange,                                                                                    // 14723
		_fnFeatureHtmlLength: _fnFeatureHtmlLength,                                                                          // 14724
		_fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,                                                                      // 14725
		_fnPageChange: _fnPageChange,                                                                                        // 14726
		_fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,                                                                  // 14727
		_fnProcessingDisplay: _fnProcessingDisplay,                                                                          // 14728
		_fnFeatureHtmlTable: _fnFeatureHtmlTable,                                                                            // 14729
		_fnScrollDraw: _fnScrollDraw,                                                                                        // 14730
		_fnApplyToChildren: _fnApplyToChildren,                                                                              // 14731
		_fnCalculateColumnWidths: _fnCalculateColumnWidths,                                                                  // 14732
		_fnThrottle: _fnThrottle,                                                                                            // 14733
		_fnConvertToWidth: _fnConvertToWidth,                                                                                // 14734
		_fnScrollingWidthAdjust: _fnScrollingWidthAdjust,                                                                    // 14735
		_fnGetWidestNode: _fnGetWidestNode,                                                                                  // 14736
		_fnGetMaxLenString: _fnGetMaxLenString,                                                                              // 14737
		_fnStringToCss: _fnStringToCss,                                                                                      // 14738
		_fnScrollBarWidth: _fnScrollBarWidth,                                                                                // 14739
		_fnSortFlatten: _fnSortFlatten,                                                                                      // 14740
		_fnSort: _fnSort,                                                                                                    // 14741
		_fnSortAria: _fnSortAria,                                                                                            // 14742
		_fnSortListener: _fnSortListener,                                                                                    // 14743
		_fnSortAttachListener: _fnSortAttachListener,                                                                        // 14744
		_fnSortingClasses: _fnSortingClasses,                                                                                // 14745
		_fnSortData: _fnSortData,                                                                                            // 14746
		_fnSaveState: _fnSaveState,                                                                                          // 14747
		_fnLoadState: _fnLoadState,                                                                                          // 14748
		_fnSettingsFromNode: _fnSettingsFromNode,                                                                            // 14749
		_fnLog: _fnLog,                                                                                                      // 14750
		_fnMap: _fnMap,                                                                                                      // 14751
		_fnBindAction: _fnBindAction,                                                                                        // 14752
		_fnCallbackReg: _fnCallbackReg,                                                                                      // 14753
		_fnCallbackFire: _fnCallbackFire,                                                                                    // 14754
		_fnLengthOverflow: _fnLengthOverflow,                                                                                // 14755
		_fnRenderer: _fnRenderer,                                                                                            // 14756
		_fnDataSource: _fnDataSource,                                                                                        // 14757
		_fnRowAttributes: _fnRowAttributes,                                                                                  // 14758
		_fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant                                          // 14759
		                                // in 1.10, so this dead-end function is                                             // 14760
		                                // added to prevent errors                                                           // 14761
	} );                                                                                                                  // 14762
	                                                                                                                      // 14763
                                                                                                                       // 14764
	// jQuery access                                                                                                      // 14765
	$.fn.dataTable = DataTable;                                                                                           // 14766
                                                                                                                       // 14767
	// Legacy aliases                                                                                                     // 14768
	$.fn.dataTableSettings = DataTable.settings;                                                                          // 14769
	$.fn.dataTableExt = DataTable.ext;                                                                                    // 14770
                                                                                                                       // 14771
	// With a capital `D` we return a DataTables API instance rather than a                                               // 14772
	// jQuery object                                                                                                      // 14773
	$.fn.DataTable = function ( opts ) {                                                                                  // 14774
		return $(this).dataTable( opts ).api();                                                                              // 14775
	};                                                                                                                    // 14776
                                                                                                                       // 14777
	// All properties that are available to $.fn.dataTable should also be                                                 // 14778
	// available on $.fn.DataTable                                                                                        // 14779
	$.each( DataTable, function ( prop, val ) {                                                                           // 14780
		$.fn.DataTable[ prop ] = val;                                                                                        // 14781
	} );                                                                                                                  // 14782
                                                                                                                       // 14783
                                                                                                                       // 14784
	// Information about events fired by DataTables - for documentation.                                                  // 14785
	/**                                                                                                                   // 14786
	 * Draw event, fired whenever the table is redrawn on the page, at the same                                           // 14787
	 * point as fnDrawCallback. This may be useful for binding events or                                                  // 14788
	 * performing calculations when the table is altered at all.                                                          // 14789
	 *  @name DataTable#draw.dt                                                                                           // 14790
	 *  @event                                                                                                            // 14791
	 *  @param {event} e jQuery event object                                                                              // 14792
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}                                   // 14793
	 */                                                                                                                   // 14794
                                                                                                                       // 14795
	/**                                                                                                                   // 14796
	 * Search event, fired when the searching applied to the table (using the                                             // 14797
	 * built-in global search, or column filters) is altered.                                                             // 14798
	 *  @name DataTable#search.dt                                                                                         // 14799
	 *  @event                                                                                                            // 14800
	 *  @param {event} e jQuery event object                                                                              // 14801
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}                                   // 14802
	 */                                                                                                                   // 14803
                                                                                                                       // 14804
	/**                                                                                                                   // 14805
	 * Page change event, fired when the paging of the table is altered.                                                  // 14806
	 *  @name DataTable#page.dt                                                                                           // 14807
	 *  @event                                                                                                            // 14808
	 *  @param {event} e jQuery event object                                                                              // 14809
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}                                   // 14810
	 */                                                                                                                   // 14811
                                                                                                                       // 14812
	/**                                                                                                                   // 14813
	 * Order event, fired when the ordering applied to the table is altered.                                              // 14814
	 *  @name DataTable#order.dt                                                                                          // 14815
	 *  @event                                                                                                            // 14816
	 *  @param {event} e jQuery event object                                                                              // 14817
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}                                   // 14818
	 */                                                                                                                   // 14819
                                                                                                                       // 14820
	/**                                                                                                                   // 14821
	 * DataTables initialisation complete event, fired when the table is fully                                            // 14822
	 * drawn, including Ajax data loaded, if Ajax data is required.                                                       // 14823
	 *  @name DataTable#init.dt                                                                                           // 14824
	 *  @event                                                                                                            // 14825
	 *  @param {event} e jQuery event object                                                                              // 14826
	 *  @param {object} oSettings DataTables settings object                                                              // 14827
	 *  @param {object} json The JSON object request from the server - only                                               // 14828
	 *    present if client-side Ajax sourced data is used</li></ol>                                                      // 14829
	 */                                                                                                                   // 14830
                                                                                                                       // 14831
	/**                                                                                                                   // 14832
	 * State save event, fired when the table has changed state a new state save                                          // 14833
	 * is required. This event allows modification of the state saving object                                             // 14834
	 * prior to actually doing the save, including addition or other state                                                // 14835
	 * properties (for plug-ins) or modification of a DataTables core property.                                           // 14836
	 *  @name DataTable#stateSaveParams.dt                                                                                // 14837
	 *  @event                                                                                                            // 14838
	 *  @param {event} e jQuery event object                                                                              // 14839
	 *  @param {object} oSettings DataTables settings object                                                              // 14840
	 *  @param {object} json The state information to be saved                                                            // 14841
	 */                                                                                                                   // 14842
                                                                                                                       // 14843
	/**                                                                                                                   // 14844
	 * State load event, fired when the table is loading state from the stored                                            // 14845
	 * data, but prior to the settings object being modified by the saved state                                           // 14846
	 * - allowing modification of the saved state is required or loading of                                               // 14847
	 * state for a plug-in.                                                                                               // 14848
	 *  @name DataTable#stateLoadParams.dt                                                                                // 14849
	 *  @event                                                                                                            // 14850
	 *  @param {event} e jQuery event object                                                                              // 14851
	 *  @param {object} oSettings DataTables settings object                                                              // 14852
	 *  @param {object} json The saved state information                                                                  // 14853
	 */                                                                                                                   // 14854
                                                                                                                       // 14855
	/**                                                                                                                   // 14856
	 * State loaded event, fired when state has been loaded from stored data and                                          // 14857
	 * the settings object has been modified by the loaded data.                                                          // 14858
	 *  @name DataTable#stateLoaded.dt                                                                                    // 14859
	 *  @event                                                                                                            // 14860
	 *  @param {event} e jQuery event object                                                                              // 14861
	 *  @param {object} oSettings DataTables settings object                                                              // 14862
	 *  @param {object} json The saved state information                                                                  // 14863
	 */                                                                                                                   // 14864
                                                                                                                       // 14865
	/**                                                                                                                   // 14866
	 * Processing event, fired when DataTables is doing some kind of processing                                           // 14867
	 * (be it, order, searcg or anything else). It can be used to indicate to                                             // 14868
	 * the end user that there is something happening, or that something has                                              // 14869
	 * finished.                                                                                                          // 14870
	 *  @name DataTable#processing.dt                                                                                     // 14871
	 *  @event                                                                                                            // 14872
	 *  @param {event} e jQuery event object                                                                              // 14873
	 *  @param {object} oSettings DataTables settings object                                                              // 14874
	 *  @param {boolean} bShow Flag for if DataTables is doing processing or not                                          // 14875
	 */                                                                                                                   // 14876
                                                                                                                       // 14877
	/**                                                                                                                   // 14878
	 * Ajax (XHR) event, fired whenever an Ajax request is completed from a                                               // 14879
	 * request to made to the server for new data. This event is called before                                            // 14880
	 * DataTables processed the returned data, so it can also be used to pre-                                             // 14881
	 * process the data returned from the server, if needed.                                                              // 14882
	 *                                                                                                                    // 14883
	 * Note that this trigger is called in `fnServerData`, if you override                                                // 14884
	 * `fnServerData` and which to use this event, you need to trigger it in you                                          // 14885
	 * success function.                                                                                                  // 14886
	 *  @name DataTable#xhr.dt                                                                                            // 14887
	 *  @event                                                                                                            // 14888
	 *  @param {event} e jQuery event object                                                                              // 14889
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}                                   // 14890
	 *  @param {object} json JSON returned from the server                                                                // 14891
	 *                                                                                                                    // 14892
	 *  @example                                                                                                          // 14893
	 *     // Use a custom property returned from the server in another DOM element                                       // 14894
	 *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {                                            // 14895
	 *       $('#status').html( json.status );                                                                            // 14896
	 *     } );                                                                                                           // 14897
	 *                                                                                                                    // 14898
	 *  @example                                                                                                          // 14899
	 *     // Pre-process the data returned from the server                                                               // 14900
	 *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {                                            // 14901
	 *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {                                                      // 14902
	 *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;                                              // 14903
	 *       }                                                                                                            // 14904
	 *       // Note no return - manipulate the data directly in the JSON object.                                         // 14905
	 *     } );                                                                                                           // 14906
	 */                                                                                                                   // 14907
                                                                                                                       // 14908
	/**                                                                                                                   // 14909
	 * Destroy event, fired when the DataTable is destroyed by calling fnDestroy                                          // 14910
	 * or passing the bDestroy:true parameter in the initialisation object. This                                          // 14911
	 * can be used to remove bound events, added DOM nodes, etc.                                                          // 14912
	 *  @name DataTable#destroy.dt                                                                                        // 14913
	 *  @event                                                                                                            // 14914
	 *  @param {event} e jQuery event object                                                                              // 14915
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}                                   // 14916
	 */                                                                                                                   // 14917
                                                                                                                       // 14918
	/**                                                                                                                   // 14919
	 * Page length change event, fired when number of records to show on each                                             // 14920
	 * page (the length) is changed.                                                                                      // 14921
	 *  @name DataTable#length.dt                                                                                         // 14922
	 *  @event                                                                                                            // 14923
	 *  @param {event} e jQuery event object                                                                              // 14924
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}                                   // 14925
	 *  @param {integer} len New length                                                                                   // 14926
	 */                                                                                                                   // 14927
                                                                                                                       // 14928
	/**                                                                                                                   // 14929
	 * Column sizing has changed.                                                                                         // 14930
	 *  @name DataTable#column-sizing.dt                                                                                  // 14931
	 *  @event                                                                                                            // 14932
	 *  @param {event} e jQuery event object                                                                              // 14933
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}                                   // 14934
	 */                                                                                                                   // 14935
                                                                                                                       // 14936
	/**                                                                                                                   // 14937
	 * Column visibility has changed.                                                                                     // 14938
	 *  @name DataTable#column-visibility.dt                                                                              // 14939
	 *  @event                                                                                                            // 14940
	 *  @param {event} e jQuery event object                                                                              // 14941
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}                                   // 14942
	 *  @param {int} column Column index                                                                                  // 14943
	 *  @param {bool} vis `false` if column now hidden, or `true` if visible                                              // 14944
	 */                                                                                                                   // 14945
                                                                                                                       // 14946
	return $.fn.dataTable;                                                                                                // 14947
}));                                                                                                                   // 14948
                                                                                                                       // 14949
}(window, document));                                                                                                  // 14950
                                                                                                                       // 14951
                                                                                                                       // 14952
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed_tabular/client/lib/dataTables.bootstrap.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*! DataTables Bootstrap integration                                                                                   // 1
 * Â©2011-2014 SpryMedia Ltd - datatables.net/license                                                                   // 2
 */                                                                                                                    // 3
                                                                                                                       // 4
/**                                                                                                                    // 5
 * DataTables integration for Bootstrap 3. This requires Bootstrap 3 and                                               // 6
 * DataTables 1.10 or newer.                                                                                           // 7
 *                                                                                                                     // 8
 * This file sets the defaults and adds options to DataTables to style its                                             // 9
 * controls using Bootstrap. See http://datatables.net/manual/styling/bootstrap                                        // 10
 * for further information.                                                                                            // 11
 */                                                                                                                    // 12
(function(window, document, undefined){                                                                                // 13
                                                                                                                       // 14
var factory = function( $, DataTable ) {                                                                               // 15
"use strict";                                                                                                          // 16
                                                                                                                       // 17
                                                                                                                       // 18
/* Set the defaults for DataTables initialisation */                                                                   // 19
$.extend( true, DataTable.defaults, {                                                                                  // 20
	dom:                                                                                                                  // 21
		"<'row'<'col-xs-6'l><'col-xs-6'f>r>" +                                                                               // 22
		"<'row'<'col-xs-12't>>" +                                                                                            // 23
		"<'row'<'col-xs-6'i><'col-xs-6'p>>",                                                                                 // 24
	renderer: 'bootstrap'                                                                                                 // 25
} );                                                                                                                   // 26
                                                                                                                       // 27
                                                                                                                       // 28
/* Default class modification */                                                                                       // 29
$.extend( DataTable.ext.classes, {                                                                                     // 30
	sWrapper:      "dataTables_wrapper form-inline dt-bootstrap",                                                         // 31
	sFilterInput:  "form-control input-sm",                                                                               // 32
	sLengthSelect: "form-control input-sm"                                                                                // 33
} );                                                                                                                   // 34
                                                                                                                       // 35
                                                                                                                       // 36
/* Bootstrap paging button renderer */                                                                                 // 37
DataTable.ext.renderer.pageButton.bootstrap = function ( settings, host, idx, buttons, page, pages ) {                 // 38
	var api     = new DataTable.Api( settings );                                                                          // 39
	var classes = settings.oClasses;                                                                                      // 40
	var lang    = settings.oLanguage.oPaginate;                                                                           // 41
	var btnDisplay, btnClass;                                                                                             // 42
                                                                                                                       // 43
	var attach = function( container, buttons ) {                                                                         // 44
		var i, ien, node, button;                                                                                            // 45
		var clickHandler = function ( e ) {                                                                                  // 46
			e.preventDefault();                                                                                                 // 47
			if ( !$(e.currentTarget).hasClass('disabled') ) {                                                                   // 48
				api.page( e.data.action ).draw( false );                                                                           // 49
			}                                                                                                                   // 50
		};                                                                                                                   // 51
                                                                                                                       // 52
		for ( i=0, ien=buttons.length ; i<ien ; i++ ) {                                                                      // 53
			button = buttons[i];                                                                                                // 54
                                                                                                                       // 55
			if ( $.isArray( button ) ) {                                                                                        // 56
				attach( container, button );                                                                                       // 57
			}                                                                                                                   // 58
			else {                                                                                                              // 59
				btnDisplay = '';                                                                                                   // 60
				btnClass = '';                                                                                                     // 61
                                                                                                                       // 62
				switch ( button ) {                                                                                                // 63
					case 'ellipsis':                                                                                                  // 64
						btnDisplay = '&hellip;';                                                                                         // 65
						btnClass = 'disabled';                                                                                           // 66
						break;                                                                                                           // 67
                                                                                                                       // 68
					case 'first':                                                                                                     // 69
						btnDisplay = lang.sFirst;                                                                                        // 70
						btnClass = button + (page > 0 ?                                                                                  // 71
							'' : ' disabled');                                                                                              // 72
						break;                                                                                                           // 73
                                                                                                                       // 74
					case 'previous':                                                                                                  // 75
						btnDisplay = lang.sPrevious;                                                                                     // 76
						btnClass = button + (page > 0 ?                                                                                  // 77
							'' : ' disabled');                                                                                              // 78
						break;                                                                                                           // 79
                                                                                                                       // 80
					case 'next':                                                                                                      // 81
						btnDisplay = lang.sNext;                                                                                         // 82
						btnClass = button + (page < pages-1 ?                                                                            // 83
							'' : ' disabled');                                                                                              // 84
						break;                                                                                                           // 85
                                                                                                                       // 86
					case 'last':                                                                                                      // 87
						btnDisplay = lang.sLast;                                                                                         // 88
						btnClass = button + (page < pages-1 ?                                                                            // 89
							'' : ' disabled');                                                                                              // 90
						break;                                                                                                           // 91
                                                                                                                       // 92
					default:                                                                                                          // 93
						btnDisplay = button + 1;                                                                                         // 94
						btnClass = page === button ?                                                                                     // 95
							'active' : '';                                                                                                  // 96
						break;                                                                                                           // 97
				}                                                                                                                  // 98
                                                                                                                       // 99
				if ( btnDisplay ) {                                                                                                // 100
					node = $('<li>', {                                                                                                // 101
							'class': classes.sPageButton+' '+btnClass,                                                                      // 102
							'aria-controls': settings.sTableId,                                                                             // 103
							'tabindex': settings.iTabIndex,                                                                                 // 104
							'id': idx === 0 && typeof button === 'string' ?                                                                 // 105
								settings.sTableId +'_'+ button :                                                                               // 106
								null                                                                                                           // 107
						} )                                                                                                              // 108
						.append( $('<a>', {                                                                                              // 109
								'href': '#'                                                                                                    // 110
							} )                                                                                                             // 111
							.html( btnDisplay )                                                                                             // 112
						)                                                                                                                // 113
						.appendTo( container );                                                                                          // 114
                                                                                                                       // 115
					settings.oApi._fnBindAction(                                                                                      // 116
						node, {action: button}, clickHandler                                                                             // 117
					);                                                                                                                // 118
				}                                                                                                                  // 119
			}                                                                                                                   // 120
		}                                                                                                                    // 121
	};                                                                                                                    // 122
                                                                                                                       // 123
	attach(                                                                                                               // 124
		$(host).empty().html('<ul class="pagination"/>').children('ul'),                                                     // 125
		buttons                                                                                                              // 126
	);                                                                                                                    // 127
};                                                                                                                     // 128
                                                                                                                       // 129
                                                                                                                       // 130
/*                                                                                                                     // 131
 * TableTools Bootstrap compatibility                                                                                  // 132
 * Required TableTools 2.1+                                                                                            // 133
 */                                                                                                                    // 134
if ( DataTable.TableTools ) {                                                                                          // 135
	// Set the classes that TableTools uses to something suitable for Bootstrap                                           // 136
	$.extend( true, DataTable.TableTools.classes, {                                                                       // 137
		"container": "DTTT btn-group",                                                                                       // 138
		"buttons": {                                                                                                         // 139
			"normal": "btn btn-default",                                                                                        // 140
			"disabled": "disabled"                                                                                              // 141
		},                                                                                                                   // 142
		"collection": {                                                                                                      // 143
			"container": "DTTT_dropdown dropdown-menu",                                                                         // 144
			"buttons": {                                                                                                        // 145
				"normal": "",                                                                                                      // 146
				"disabled": "disabled"                                                                                             // 147
			}                                                                                                                   // 148
		},                                                                                                                   // 149
		"print": {                                                                                                           // 150
			"info": "DTTT_print_info"                                                                                           // 151
		},                                                                                                                   // 152
		"select": {                                                                                                          // 153
			"row": "active"                                                                                                     // 154
		}                                                                                                                    // 155
	} );                                                                                                                  // 156
                                                                                                                       // 157
	// Have the collection use a bootstrap compatible drop down                                                           // 158
	$.extend( true, DataTable.TableTools.DEFAULTS.oTags, {                                                                // 159
		"collection": {                                                                                                      // 160
			"container": "ul",                                                                                                  // 161
			"button": "li",                                                                                                     // 162
			"liner": "a"                                                                                                        // 163
		}                                                                                                                    // 164
	} );                                                                                                                  // 165
}                                                                                                                      // 166
                                                                                                                       // 167
}; // /factory                                                                                                         // 168
                                                                                                                       // 169
                                                                                                                       // 170
// Define as an AMD module if possible                                                                                 // 171
if ( typeof define === 'function' && define.amd ) {                                                                    // 172
	define( ['jquery', 'datatables'], factory );                                                                          // 173
}                                                                                                                      // 174
else if ( typeof exports === 'object' ) {                                                                              // 175
    // Node/CommonJS                                                                                                   // 176
    factory( require('jquery'), require('datatables') );                                                               // 177
}                                                                                                                      // 178
else if ( jQuery ) {                                                                                                   // 179
	// Otherwise simply initialise as normal, stopping multiple evaluation                                                // 180
	factory( jQuery, jQuery.fn.dataTable );                                                                               // 181
}                                                                                                                      // 182
                                                                                                                       // 183
                                                                                                                       // 184
})(window, document);                                                                                                  // 185
                                                                                                                       // 186
                                                                                                                       // 187
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed_tabular/client/template.tabular.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("tabular");                                                                                       // 2
Template["tabular"] = new Template("Template.tabular", (function() {                                                   // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV("\n    \n    ", HTML.TABLE(HTML.Attrs(function() {                                                   // 5
    return Spacebars.attrMustache(view.lookup("atts"));                                                                // 6
  })), "\n  ");                                                                                                        // 7
}));                                                                                                                   // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed_tabular/client/util.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global Util:true, _ */                                                                                              // 1
                                                                                                                       // 2
Util = {};                                                                                                             // 3
                                                                                                                       // 4
Util.cleanFieldName = function cleanFieldName(field) {                                                                 // 5
  // for field names with a dot, we just need                                                                          // 6
  // the top level field name                                                                                          // 7
  var dot = field.indexOf(".");                                                                                        // 8
  if (dot !== -1) {                                                                                                    // 9
    field = field.slice(0, dot);                                                                                       // 10
  }                                                                                                                    // 11
                                                                                                                       // 12
  // If it's referencing an array, strip off the brackets                                                              // 13
  field = field.split('[')[0];                                                                                         // 14
                                                                                                                       // 15
  return field;                                                                                                        // 16
};                                                                                                                     // 17
                                                                                                                       // 18
Util.cleanFieldNameForSearch = function cleanFieldNameForSearch(field) {                                               // 19
  // If it's referencing an array, replace the brackets                                                                // 20
  // This will only work with an object which doesn't have ["foo"]                                                     // 21
  return field.replace(/\[\w+\]/, "");                                                                                 // 22
};                                                                                                                     // 23
                                                                                                                       // 24
Util.sortsAreEqual = function sortsAreEqual(oldVal, newVal) {                                                          // 25
  if (oldVal === newVal) {                                                                                             // 26
    return true;                                                                                                       // 27
  }                                                                                                                    // 28
  var areSame = false;                                                                                                 // 29
  if (_.isArray(oldVal) && _.isArray(newVal) && oldVal.length === newVal.length) {                                     // 30
    areSame = _.every(newVal, function (innerArray, i) {                                                               // 31
      return innerArray[0] === oldVal[i][0] &&                                                                         // 32
        innerArray[1] === oldVal[i][1];                                                                                // 33
    });                                                                                                                // 34
  }                                                                                                                    // 35
  return areSame;                                                                                                      // 36
};                                                                                                                     // 37
                                                                                                                       // 38
Util.objectsAreEqual = function objectsAreEqual(oldVal, newVal) {                                                      // 39
  if (oldVal === newVal) {                                                                                             // 40
    return true;                                                                                                       // 41
  }                                                                                                                    // 42
  return JSON.stringify(oldVal) === JSON.stringify(newVal);                                                            // 43
};                                                                                                                     // 44
                                                                                                                       // 45
// Take the DataTables `order` format and column info                                                                  // 46
// and convert it into a mongo sort array.                                                                             // 47
Util.getMongoSort = function getMongoSort(order, columns) {                                                            // 48
  if (!order || !columns) {                                                                                            // 49
    return;                                                                                                            // 50
  }                                                                                                                    // 51
                                                                                                                       // 52
  // TODO support the nested arrays format for sort                                                                    // 53
  // and ignore instance functions like "foo()"                                                                        // 54
  var sort = [];                                                                                                       // 55
  _.each(order, function (ord) {                                                                                       // 56
    var propName = columns[ord.column].data;                                                                           // 57
    var orderable = columns[ord.column].orderable;                                                                     // 58
    if (typeof propName === 'string' && orderable !== false) {                                                         // 59
      sort.push([propName, ord.dir]);                                                                                  // 60
    }                                                                                                                  // 61
  });                                                                                                                  // 62
  return sort;                                                                                                         // 63
};                                                                                                                     // 64
                                                                                                                       // 65
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed_tabular/client/tableRecords.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global Tabular, Mongo */                                                                                            // 1
                                                                                                                       // 2
// We are creating a named client Collection that we will only modify from server                                      // 3
Tabular.tableRecords = new Mongo.Collection('tabular_records');                                                        // 4
                                                                                                                       // 5
Tabular.getRecord = function(name) {                                                                                   // 6
  return Tabular.tableRecords.findOne(name);                                                                           // 7
};                                                                                                                     // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed_tabular/client/tableInit.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global tableInit:true, _, Blaze, Util */                                                                            // 1
                                                                                                                       // 2
/**                                                                                                                    // 3
 * Uses the Tabular.Table instance to get the columns, fields, and searchFields                                        // 4
 * @param {Tabular.Table} tabularTable The Tabular.Table instance                                                      // 5
 * @param {Template}      template     The Template instance                                                           // 6
 */                                                                                                                    // 7
tableInit = function tableInit(tabularTable, template) {                                                               // 8
  var columns = _.clone(tabularTable.options.columns);                                                                 // 9
  var fields = {}, searchFields = [];                                                                                  // 10
                                                                                                                       // 11
  // Loop through the provided columns object                                                                          // 12
  _.each(columns, function (col) {                                                                                     // 13
    // The `tmpl` column option is special for this                                                                    // 14
    // package. We parse it into other column options                                                                  // 15
    // and then remove it.                                                                                             // 16
    var tmpl = col.tmpl;                                                                                               // 17
    if (tmpl) {                                                                                                        // 18
      // Cell should be initially blank                                                                                // 19
      col.defaultContent = "";                                                                                         // 20
                                                                                                                       // 21
      // If there's also data attached, then we can still                                                              // 22
      // sort on this column. If not, then we shouldn't try.                                                           // 23
      if (!("data" in col)) {                                                                                          // 24
        col.orderable = false;                                                                                         // 25
      }                                                                                                                // 26
                                                                                                                       // 27
      // When the cell is created, render it's content from                                                            // 28
      // the provided template with row data.                                                                          // 29
      col.createdCell = function (cell, cellData, rowData) {                                                           // 30
        // Allow the table to adjust the template context if desired                                                   // 31
        if (typeof col.tmplContext === 'function') {                                                                   // 32
          rowData = col.tmplContext(rowData);                                                                          // 33
        }                                                                                                              // 34
                                                                                                                       // 35
        Blaze.renderWithData(tmpl, rowData, cell);                                                                     // 36
      };                                                                                                               // 37
                                                                                                                       // 38
      // Then delete the `tmpl` property since DataTables                                                              // 39
      // doesn't need it.                                                                                              // 40
      delete col.tmpl;                                                                                                 // 41
    }                                                                                                                  // 42
                                                                                                                       // 43
    // Automatically protect against errors from null and undefined                                                    // 44
    // values                                                                                                          // 45
    if (!("defaultContent" in col)) {                                                                                  // 46
      col.defaultContent = "";                                                                                         // 47
    }                                                                                                                  // 48
                                                                                                                       // 49
    // Build the list of field names we want included                                                                  // 50
    var dataProp = col.data;                                                                                           // 51
    if (typeof dataProp === "string") {                                                                                // 52
      // If it's referencing an instance function, don't                                                               // 53
      // include it. Prevent sorting and searching because                                                             // 54
      // our pub function won't be able to do it.                                                                      // 55
      if (dataProp.indexOf("()") !== -1) {                                                                             // 56
        col.orderable = false;                                                                                         // 57
        col.searchable = false;                                                                                        // 58
        return;                                                                                                        // 59
      }                                                                                                                // 60
                                                                                                                       // 61
      fields[Util.cleanFieldName(dataProp)] = 1;                                                                       // 62
                                                                                                                       // 63
      // DataTables says default value for col.searchable is `true`,                                                   // 64
      // so we will search on all columns that haven't been set to                                                     // 65
      // `false`.                                                                                                      // 66
      if (col.searchable !== false) {                                                                                  // 67
        searchFields.push(Util.cleanFieldNameForSearch(dataProp));                                                     // 68
      }                                                                                                                // 69
    }                                                                                                                  // 70
                                                                                                                       // 71
    // If we're displaying a template for this field,                                                                  // 72
    // and we've also provided data, we want to                                                                        // 73
    // pass the data prop along to DataTables                                                                          // 74
    // to enable sorting and filtering.                                                                                // 75
    // However, DataTables will then add that data to                                                                  // 76
    // the displayed cell, which we don't want since                                                                   // 77
    // we're rendering a template there with Blaze.                                                                    // 78
    // We can prevent this issue by having the "render"                                                                // 79
    // function return an empty string for display content.                                                            // 80
    if (tmpl && "data" in col && !("render" in col)) {                                                                 // 81
      col.render = function (data, type) {                                                                             // 82
        if (type === 'display') {                                                                                      // 83
          return '';                                                                                                   // 84
        }                                                                                                              // 85
        return data;                                                                                                   // 86
      };                                                                                                               // 87
    }                                                                                                                  // 88
  });                                                                                                                  // 89
                                                                                                                       // 90
  template.tabular.columns = columns;                                                                                  // 91
  template.tabular.fields = fields;                                                                                    // 92
  template.tabular.searchFields = searchFields;                                                                        // 93
};                                                                                                                     // 94
                                                                                                                       // 95
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed_tabular/client/pubSelector.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global getPubSelector:true, _ */                                                                                    // 1
                                                                                                                       // 2
getPubSelector = function getPubSelector(selector, searchString, searchFields, searchCaseInsensitive, columns) {       // 3
                                                                                                                       // 4
  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                         // 5
  // if search was invoked via .columns().search(), build a query off that                                             // 6
  // https://datatables.net/reference/api/columns().search()                                                           // 7
  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                         // 8
  var searchColumns = _.filter(columns, function(column) {                                                             // 9
    return column.search && column.search.value !== '';                                                                // 10
  });                                                                                                                  // 11
                                                                                                                       // 12
  // required args                                                                                                     // 13
  if ((!searchString && searchColumns.length === 0) || !searchFields || searchFields.length === 0) {                   // 14
    return selector;                                                                                                   // 15
  }                                                                                                                    // 16
                                                                                                                       // 17
  // See if we can resolve the search string to a number,                                                              // 18
  // in which case we use an extra query because $regex                                                                // 19
  // matches string fields only.                                                                                       // 20
  var searches = [];                                                                                                   // 21
                                                                                                                       // 22
  // normalize search fields array to mirror the structure                                                             // 23
  // as passed by the datatables ajax.data function                                                                    // 24
  searchFields = _.map(searchFields, function(field) {                                                                 // 25
    return {                                                                                                           // 26
      data: field,                                                                                                     // 27
      search: {                                                                                                        // 28
        value: searchString                                                                                            // 29
      }                                                                                                                // 30
    };                                                                                                                 // 31
  });                                                                                                                  // 32
                                                                                                                       // 33
  var searchTerms = _.isEmpty(searchColumns) ? searchFields : searchColumns;                                           // 34
                                                                                                                       // 35
  _.each(searchTerms, function(field) {                                                                                // 36
    var searchValue = field.search.value || '';                                                                        // 37
                                                                                                                       // 38
    // Split and OR by whitespace, as per default DataTables search behavior                                           // 39
    searchValue = searchValue.match(/\S+/g);                                                                           // 40
                                                                                                                       // 41
    _.each(searchValue, function (searchTerm) {                                                                        // 42
      var m1 = {}, m2 = {};                                                                                            // 43
                                                                                                                       // 44
      // String search                                                                                                 // 45
      m1[field.data] = { $regex: searchTerm };                                                                         // 46
                                                                                                                       // 47
      // DataTables searches are case insensitive by default                                                           // 48
      if (searchCaseInsensitive !== false) {                                                                           // 49
        m1[field.data].$options = "i";                                                                                 // 50
      }                                                                                                                // 51
                                                                                                                       // 52
      searches.push(m1);                                                                                               // 53
                                                                                                                       // 54
      // Number search                                                                                                 // 55
      var numSearchString = Number(searchTerm);                                                                        // 56
      if (!isNaN(numSearchString)) {                                                                                   // 57
        m2[field.data] = numSearchString;                                                                              // 58
        searches.push(m2);                                                                                             // 59
      }                                                                                                                // 60
    });                                                                                                                // 61
  });                                                                                                                  // 62
                                                                                                                       // 63
  var result;                                                                                                          // 64
  if (selector) {                                                                                                      // 65
    result = {$and: [selector, {$or: searches}]};                                                                      // 66
  } else {                                                                                                             // 67
    result = {$or: searches};                                                                                          // 68
  }                                                                                                                    // 69
                                                                                                                       // 70
  return result;                                                                                                       // 71
};                                                                                                                     // 72
                                                                                                                       // 73
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/aldeed_tabular/client/tabular.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* global _, Template, Tabular, Tracker, ReactiveVar, Session, Meteor, tableInit, getPubSelector, Util */              // 1
                                                                                                                       // 2
Template.tabular.helpers({                                                                                             // 3
  atts: function () {                                                                                                  // 4
    // We remove the "table" and "selector" attributes and assume the rest belong                                      // 5
    // on the <table> element                                                                                          // 6
    return _.omit(this, "table", "selector");                                                                          // 7
  }                                                                                                                    // 8
});                                                                                                                    // 9
                                                                                                                       // 10
var tabularOnRendered = function () {                                                                                  // 11
  var template = this,                                                                                                 // 12
      table, resetTablePaging = false,                                                                                 // 13
      $tableElement = template.$('table');                                                                             // 14
                                                                                                                       // 15
  template.tabular = {};                                                                                               // 16
  template.tabular.data = [];                                                                                          // 17
  template.tabular.pubSelector = new ReactiveVar({}, Util.objectsAreEqual);                                            // 18
  template.tabular.skip = new ReactiveVar(0);                                                                          // 19
  template.tabular.limit = new ReactiveVar(10);                                                                        // 20
  template.tabular.sort = new ReactiveVar(null, Util.sortsAreEqual);                                                   // 21
  template.tabular.columns = null;                                                                                     // 22
  template.tabular.fields = null;                                                                                      // 23
  template.tabular.searchFields = null;                                                                                // 24
  template.tabular.searchCaseInsensitive = true;                                                                       // 25
  template.tabular.tableName = new ReactiveVar(null);                                                                  // 26
  template.tabular.options = new ReactiveVar({}, Util.objectsAreEqual);                                                // 27
  template.tabular.docPub = new ReactiveVar(null);                                                                     // 28
  template.tabular.collection = new ReactiveVar(null);                                                                 // 29
  template.tabular.ready = new ReactiveVar(false);                                                                     // 30
  template.tabular.recordsTotal = 0;                                                                                   // 31
  template.tabular.recordsFiltered = 0;                                                                                // 32
  template.tabular.isLoading = new ReactiveVar(true);                                                                  // 33
                                                                                                                       // 34
  // These are some DataTables options that we need for everything to work.                                            // 35
  // We add them to the options specified by the user.                                                                 // 36
  var ajaxOptions = {                                                                                                  // 37
    // tell DataTables that we're getting the table data from a server                                                 // 38
    serverSide: true,                                                                                                  // 39
    // define the function that DataTables will call upon first load and whenever                                      // 40
    // we tell it to reload data, such as when paging, etc.                                                            // 41
    ajax: function (data, callback/*, settings*/) {                                                                    // 42
      // When DataTables requests data, first we set                                                                   // 43
      // the new skip, limit, order, and pubSelector values                                                            // 44
      // that DataTables has requested. These trigger                                                                  // 45
      // the first subscription, which will then trigger the                                                           // 46
      // second subscription.                                                                                          // 47
                                                                                                                       // 48
      template.tabular.isLoading.set(true);                                                                            // 49
      //console.log('data', template.tabular.data);                                                                    // 50
                                                                                                                       // 51
      // Update skip                                                                                                   // 52
      template.tabular.skip.set(data.start);                                                                           // 53
      Session.set('Tabular.LastSkip', data.start);                                                                     // 54
                                                                                                                       // 55
      // Update limit                                                                                                  // 56
      var options = template.tabular.options.get();                                                                    // 57
      var hardLimit = options && options.limit;                                                                        // 58
      if (data.length === -1) {                                                                                        // 59
        if (hardLimit === undefined) {                                                                                 // 60
          console.warn('When using no paging or an "All" option with tabular, it is best to also add a hard limit in your table options like {limit: 500}');
          template.tabular.limit.set(null);                                                                            // 62
        } else {                                                                                                       // 63
          template.tabular.limit.set(hardLimit);                                                                       // 64
        }                                                                                                              // 65
      } else {                                                                                                         // 66
        template.tabular.limit.set(data.length);                                                                       // 67
      }                                                                                                                // 68
                                                                                                                       // 69
      // Update sort                                                                                                   // 70
      template.tabular.sort.set(Util.getMongoSort(data.order, template.tabular.columns));                              // 71
      // Update pubSelector                                                                                            // 72
      var pubSelector = getPubSelector(                                                                                // 73
        template.tabular.selector,                                                                                     // 74
        (data.search && data.search.value) || null,                                                                    // 75
        template.tabular.searchFields,                                                                                 // 76
        template.tabular.searchCaseInsensitive,                                                                        // 77
        data.columns || null                                                                                           // 78
      );                                                                                                               // 79
      template.tabular.pubSelector.set(pubSelector);                                                                   // 80
                                                                                                                       // 81
      // We're ready to subscribe to the data.                                                                         // 82
      // Matters on the first run only.                                                                                // 83
      template.tabular.ready.set(true);                                                                                // 84
                                                                                                                       // 85
      //console.log('ajax');                                                                                           // 86
                                                                                                                       // 87
      callback({                                                                                                       // 88
        draw: data.draw,                                                                                               // 89
        recordsTotal: template.tabular.recordsTotal,                                                                   // 90
        recordsFiltered: template.tabular.recordsFiltered,                                                             // 91
        data: template.tabular.data                                                                                    // 92
      });                                                                                                              // 93
                                                                                                                       // 94
    }                                                                                                                  // 95
  };                                                                                                                   // 96
                                                                                                                       // 97
  // For testing                                                                                                       // 98
  //setUpTestingAutoRunLogging(template);                                                                              // 99
                                                                                                                       // 100
  // Reactively determine table columns, fields, and searchFields.                                                     // 101
  // This will rerun whenever the current template data changes.                                                       // 102
  var lastTableName;                                                                                                   // 103
  template.autorun(function () {                                                                                       // 104
    var data = Template.currentData();                                                                                 // 105
                                                                                                                       // 106
    //console.log('currentData autorun', data);                                                                        // 107
                                                                                                                       // 108
    if (!data) {return;}                                                                                               // 109
                                                                                                                       // 110
    // We get the current TabularTable instance, and cache it on the                                                   // 111
    // template instance for access elsewhere                                                                          // 112
    var tabularTable = template.tabular.tableDef = data.table;                                                         // 113
                                                                                                                       // 114
    if (!(tabularTable instanceof Tabular.Table)) {                                                                    // 115
      throw new Error("You must pass Tabular.Table instance as the table attribute");                                  // 116
    }                                                                                                                  // 117
                                                                                                                       // 118
    // Always update the selector reactively                                                                           // 119
    template.tabular.selector = data.selector;                                                                         // 120
                                                                                                                       // 121
    // The remaining stuff relates to changing the `table`                                                             // 122
    // attribute. If we didn't change it, we can stop here,                                                            // 123
    // but we need to reload the table if this is not the first                                                        // 124
    // run                                                                                                             // 125
    if (tabularTable.name === lastTableName) {                                                                         // 126
      if (table) {                                                                                                     // 127
        // passing `false` as the second arg tells it to                                                               // 128
        // reset the paging                                                                                            // 129
        table.ajax.reload(null, true);                                                                                 // 130
      }                                                                                                                // 131
      return;                                                                                                          // 132
    }                                                                                                                  // 133
                                                                                                                       // 134
    // If we reactively changed the `table` attribute, run                                                             // 135
    // onUnload for the previous table                                                                                 // 136
    if (lastTableName !== undefined) {                                                                                 // 137
      var lastTableDef = Tabular.tablesByName[lastTableName];                                                          // 138
      if (lastTableDef && typeof lastTableDef.onUnload === 'function') {                                               // 139
        lastTableDef.onUnload();                                                                                       // 140
      }                                                                                                                // 141
    }                                                                                                                  // 142
                                                                                                                       // 143
    // Cache this table name as the last table name for next run                                                       // 144
    lastTableName = tabularTable.name;                                                                                 // 145
                                                                                                                       // 146
    // Figure out and update the columns, fields, and searchFields                                                     // 147
    tableInit(tabularTable, template);                                                                                 // 148
                                                                                                                       // 149
    // Set/update everything else                                                                                      // 150
    template.tabular.searchCaseInsensitive = (tabularTable.options && tabularTable.options.search && tabularTable.options.search.caseInsensitive) || true;
    template.tabular.options.set(tabularTable.options);                                                                // 152
    template.tabular.tableName.set(tabularTable.name);                                                                 // 153
    template.tabular.docPub.set(tabularTable.pub);                                                                     // 154
    template.tabular.collection.set(tabularTable.collection);                                                          // 155
                                                                                                                       // 156
    // userOptions rerun should do this?                                                                               // 157
    if (table) {                                                                                                       // 158
      // passing `true` as the second arg tells it to                                                                  // 159
      // reset the paging                                                                                              // 160
      table.ajax.reload(null, true);                                                                                   // 161
    }                                                                                                                  // 162
  });                                                                                                                  // 163
                                                                                                                       // 164
  // First Subscription                                                                                                // 165
  // Subscribe to an array of _ids that should be on the                                                               // 166
  // current page of the table, plus some aggregate                                                                    // 167
  // numbers that DataTables needs in order to show the paging.                                                        // 168
  // The server will reactively keep this info accurate.                                                               // 169
  // It's not necessary to call stop                                                                                   // 170
  // on subscriptions that are within autorun computations.                                                            // 171
  template.autorun(function () {                                                                                       // 172
    if (!template.tabular.ready.get()) {                                                                               // 173
      return;                                                                                                          // 174
    }                                                                                                                  // 175
                                                                                                                       // 176
    //console.log('tabular_getInfo autorun');                                                                          // 177
                                                                                                                       // 178
    Meteor.subscribe(                                                                                                  // 179
      "tabular_getInfo",                                                                                               // 180
      template.tabular.tableName.get(),                                                                                // 181
      template.tabular.pubSelector.get(),                                                                              // 182
      template.tabular.sort.get(),                                                                                     // 183
      template.tabular.skip.get(),                                                                                     // 184
      template.tabular.limit.get()                                                                                     // 185
    );                                                                                                                 // 186
  });                                                                                                                  // 187
                                                                                                                       // 188
  // Second Subscription                                                                                               // 189
  // Reactively subscribe to the documents with _ids given to us. Limit the                                            // 190
  // fields to only those we need to display. It's not necessary to call stop                                          // 191
  // on subscriptions that are within autorun computations.                                                            // 192
  template.autorun(function () {                                                                                       // 193
    // tableInfo is reactive and causes a rerun whenever the                                                           // 194
    // list of docs that should currently be in the table changes.                                                     // 195
    // It does not cause reruns based on the documents themselves                                                      // 196
    // changing.                                                                                                       // 197
    var tableName = template.tabular.tableName.get();                                                                  // 198
    var tableInfo = Tabular.getRecord(tableName) || {};                                                                // 199
                                                                                                                       // 200
    //console.log('tableName and tableInfo autorun', tableName, tableInfo);                                            // 201
                                                                                                                       // 202
    template.tabular.recordsTotal = tableInfo.recordsTotal || 0;                                                       // 203
    template.tabular.recordsFiltered = tableInfo.recordsFiltered || 0;                                                 // 204
                                                                                                                       // 205
    // In some cases, there is no point in subscribing to nothing                                                      // 206
    if (_.isEmpty(tableInfo) ||                                                                                        // 207
        template.tabular.recordsTotal === 0 ||                                                                         // 208
        template.tabular.recordsFiltered === 0) {                                                                      // 209
      return;                                                                                                          // 210
    }                                                                                                                  // 211
                                                                                                                       // 212
    template.tabular.tableDef.sub.subscribe(                                                                           // 213
      template.tabular.docPub.get(),                                                                                   // 214
      tableName,                                                                                                       // 215
      tableInfo.ids || [],                                                                                             // 216
      template.tabular.fields                                                                                          // 217
    );                                                                                                                 // 218
  });                                                                                                                  // 219
                                                                                                                       // 220
  // Build the table. We rerun this only when the table                                                                // 221
  // options specified by the user changes, which should be                                                            // 222
  // only when the `table` attribute changes reactively.                                                               // 223
  template.autorun(function (c) {                                                                                      // 224
    var userOptions = template.tabular.options.get();                                                                  // 225
    var options = _.extend({}, ajaxOptions, userOptions);                                                              // 226
                                                                                                                       // 227
    //console.log('userOptions autorun', options);                                                                     // 228
                                                                                                                       // 229
    // unless the user provides her own displayStart,                                                                  // 230
    // we use a value from Session. This keeps the                                                                     // 231
    // same page selected after a hot code push.                                                                       // 232
    if (c.firstRun && !('displayStart' in options)) {                                                                  // 233
      options.displayStart = Tracker.nonreactive(function () {                                                         // 234
        return Session.get('Tabular.LastSkip');                                                                        // 235
      });                                                                                                              // 236
    }                                                                                                                  // 237
                                                                                                                       // 238
    if (!('order' in options)) {                                                                                       // 239
      options.order = [];                                                                                              // 240
    }                                                                                                                  // 241
                                                                                                                       // 242
    // After the first time, we need to destroy before rebuilding.                                                     // 243
    if (table) {                                                                                                       // 244
      var dt = $tableElement.DataTable();                                                                              // 245
      if (dt) {                                                                                                        // 246
        dt.destroy();                                                                                                  // 247
        $tableElement.empty();                                                                                         // 248
      }                                                                                                                // 249
    }                                                                                                                  // 250
                                                                                                                       // 251
    // We start with an empty table.                                                                                   // 252
    // Data will be populated by ajax function now.                                                                    // 253
    table = $tableElement.DataTable(options);                                                                          // 254
  });                                                                                                                  // 255
                                                                                                                       // 256
  template.autorun(function () {                                                                                       // 257
    // Get table name non-reactively                                                                                   // 258
    var tableName = Tracker.nonreactive(function () {                                                                  // 259
      return template.tabular.tableName.get();                                                                         // 260
    });                                                                                                                // 261
    // Get the collection that we're showing in the table non-reactively                                               // 262
    var collection = Tracker.nonreactive(function () {                                                                 // 263
      return template.tabular.collection.get();                                                                        // 264
    });                                                                                                                // 265
                                                                                                                       // 266
    // React when the requested list of records changes.                                                               // 267
    // This can happen for various reasons.                                                                            // 268
    // * DataTables reran ajax due to sort changing.                                                                   // 269
    // * DataTables reran ajax due to page changing.                                                                   // 270
    // * DataTables reran ajax due to results-per-page changing.                                                       // 271
    // * DataTables reran ajax due to search terms changing.                                                           // 272
    // * `selector` attribute changed reactively                                                                       // 273
    // * Docs were added/changed/removed by this user or                                                               // 274
    //   another user, causing visible result set to change.                                                           // 275
    var tableInfo = Tabular.getRecord(tableName);                                                                      // 276
                                                                                                                       // 277
    if (!collection || !tableInfo) {                                                                                   // 278
      return;                                                                                                          // 279
    }                                                                                                                  // 280
                                                                                                                       // 281
    // Build options object to pass to `find`.                                                                         // 282
    // It's important that we use the same options                                                                     // 283
    // that were used in generating the list of `_id`s                                                                 // 284
    // on the server.                                                                                                  // 285
    var findOptions = {};                                                                                              // 286
    var fields = template.tabular.fields;                                                                              // 287
    if (fields) {                                                                                                      // 288
      // Extend with extraFields from table definition                                                                 // 289
      if (typeof template.tabular.tableDef.extraFields === 'object') {                                                 // 290
        _.extend(fields, template.tabular.tableDef.extraFields);                                                       // 291
      }                                                                                                                // 292
      findOptions.fields = fields;                                                                                     // 293
    }                                                                                                                  // 294
                                                                                                                       // 295
    // Sort does not need to be reactive here; using                                                                   // 296
    // reactive sort would result in extra rerunning.                                                                  // 297
    var sort = Tracker.nonreactive(function () {                                                                       // 298
      return template.tabular.sort.get();                                                                              // 299
    });                                                                                                                // 300
    if (sort) {                                                                                                        // 301
      findOptions.sort = sort;                                                                                         // 302
    }                                                                                                                  // 303
                                                                                                                       // 304
    // Get the updated list of docs we should be showing                                                               // 305
    var cursor = collection.find({_id: {$in: tableInfo.ids}}, findOptions);                                            // 306
                                                                                                                       // 307
    //console.log('tableInfo, fields, sort, find autorun', cursor.count());                                            // 308
                                                                                                                       // 309
    // We're subscribing to the docs just in time, so there's                                                          // 310
    // a good chance that they aren't all sent to the client yet.                                                      // 311
    // We'll stop here if we didn't find all the docs we asked for.                                                    // 312
    // This will rerun one or more times as the docs are received                                                      // 313
    // from the server, and eventually we'll have them all.                                                            // 314
    // Without this check in here, there's a lot of flashing in the                                                    // 315
    // table as rows are added.                                                                                        // 316
    if (cursor.count() < tableInfo.ids.length) {                                                                       // 317
      return;                                                                                                          // 318
    }                                                                                                                  // 319
                                                                                                                       // 320
    // Get data as array for DataTables to consume in the ajax function                                                // 321
    template.tabular.data = cursor.fetch();                                                                            // 322
                                                                                                                       // 323
    template.tabular.isLoading.set(false);                                                                             // 324
                                                                                                                       // 325
    // For these types of reactive changes, we don't want to                                                           // 326
    // reset the page we're on, so we pass `false` as second arg.                                                      // 327
    // The exception is if we changed the results-per-page number,                                                     // 328
    // in which cases `resetTablePaging` will be `true` and we will do so.                                             // 329
    if (table) {                                                                                                       // 330
      if (resetTablePaging) {                                                                                          // 331
        table.ajax.reload(null, true);                                                                                 // 332
        resetTablePaging = false;                                                                                      // 333
      } else {                                                                                                         // 334
        table.ajax.reload(null, false);                                                                                // 335
      }                                                                                                                // 336
    }                                                                                                                  // 337
                                                                                                                       // 338
  });                                                                                                                  // 339
                                                                                                                       // 340
  // XXX Not working                                                                                                   // 341
  template.autorun(function () {                                                                                       // 342
    var visibility = template.tabular.isLoading.get() ? 'visible' : 'hidden';                                          // 343
    template.$('.dataTables_processing').css('visibility', visibility);                                                // 344
  });                                                                                                                  // 345
                                                                                                                       // 346
  // force table paging to reset to first page when we change page length                                              // 347
  $tableElement.on('length.dt', function () {                                                                          // 348
    resetTablePaging = true;                                                                                           // 349
  });                                                                                                                  // 350
};                                                                                                                     // 351
                                                                                                                       // 352
if (typeof Template.tabular.onRendered === 'function') {                                                               // 353
  Template.tabular.onRendered(tabularOnRendered);                                                                      // 354
} else {                                                                                                               // 355
  Template.tabular.rendered = tabularOnRendered;                                                                       // 356
}                                                                                                                      // 357
                                                                                                                       // 358
var tabularOnDestroyed = function () {                                                                                 // 359
  // Clear last skip tracking                                                                                          // 360
  Session.set('Tabular.LastSkip', 0);                                                                                  // 361
  // Run a user-provided onUnload function                                                                             // 362
  if (this.tabular &&                                                                                                  // 363
      this.tabular.tableDef &&                                                                                         // 364
      typeof this.tabular.tableDef.onUnload === 'function') {                                                          // 365
    this.tabular.tableDef.onUnload();                                                                                  // 366
  }                                                                                                                    // 367
};                                                                                                                     // 368
                                                                                                                       // 369
if (typeof Template.tabular.onDestroyed === 'function') {                                                              // 370
  Template.tabular.onDestroyed(tabularOnDestroyed);                                                                    // 371
} else {                                                                                                               // 372
  Template.tabular.destroyed = tabularOnDestroyed;                                                                     // 373
}                                                                                                                      // 374
                                                                                                                       // 375
//function setUpTestingAutoRunLogging(template) {                                                                      // 376
//  template.autorun(function () {                                                                                     // 377
//    var val = template.tabular.tableName.get();                                                                      // 378
//    console.log('tableName changed', val);                                                                           // 379
//  });                                                                                                                // 380
//                                                                                                                     // 381
//  template.autorun(function () {                                                                                     // 382
//    var val = template.tabular.pubSelector.get();                                                                    // 383
//    console.log('pubSelector changed', val);                                                                         // 384
//  });                                                                                                                // 385
//                                                                                                                     // 386
//  template.autorun(function () {                                                                                     // 387
//    var val = template.tabular.sort.get();                                                                           // 388
//    console.log('sort changed', val);                                                                                // 389
//  });                                                                                                                // 390
//                                                                                                                     // 391
//  template.autorun(function () {                                                                                     // 392
//    var val = template.tabular.skip.get();                                                                           // 393
//    console.log('skip changed', val);                                                                                // 394
//  });                                                                                                                // 395
//                                                                                                                     // 396
//  template.autorun(function () {                                                                                     // 397
//    var val = template.tabular.limit.get();                                                                          // 398
//    console.log('limit changed', val);                                                                               // 399
//  });                                                                                                                // 400
//}                                                                                                                    // 401
                                                                                                                       // 402
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['aldeed:tabular'] = {}, {
  Tabular: Tabular
});

})();
